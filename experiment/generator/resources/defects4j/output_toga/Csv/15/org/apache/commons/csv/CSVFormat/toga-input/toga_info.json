{
  "test1211107" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211107() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test1211107"
  },
  "test1211106" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211106() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1211106"
  },
  "test1211109" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211109() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1211109"
  },
  "test1211108" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211108() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test1211108"
  },
  "test1211103" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211103() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1211103"
  },
  "test1211102" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211102() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1211102"
  },
  "test1211105" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211105() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1211105"
  },
  "test1211104" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211104() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test1211104"
  },
  "test1211110" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211110() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test1211110"
  },
  "test016170" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016170() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test016170"
  },
  "test1601449" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601449() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1601449"
  },
  "test1601448" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601448() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1601448"
  },
  "test019202" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019202() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test019202"
  },
  "test079751" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079751() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test079751"
  },
  "test020203" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020203() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test020203"
  },
  "test079750" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079750() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test079750"
  },
  "test019200" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019200() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test019200"
  },
  "test020204" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020204() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test020204"
  },
  "test019201" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019201() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test019201"
  },
  "test020205" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020205() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test020205"
  },
  "test016172" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016172() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test016172"
  },
  "test020206" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020206() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test020206"
  },
  "test016171" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016171() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test016171"
  },
  "test020207" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020207() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test020207"
  },
  "test020208" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020208() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test020208"
  },
  "test079753" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079753() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test079753"
  },
  "test016173" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016173() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test016173"
  },
  "test020209" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020209() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test020209"
  },
  "test079752" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079752() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test079752"
  },
  "test091868" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091868() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test091868"
  },
  "test103958" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103958() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test103958"
  },
  "test1661504" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661504() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1661504"
  },
  "test2922096" : {
    "methodSignature" : "public CSVPrinter print(final Path out, final Charset charset) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2922096() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    MockFile mockFile0 = new MockFile(\"\");\n    Path path0 = mockFile0.toPath();\n    cSVFormat0.MYSQL.print(path0, (Charset) null);\n}",
    "testName" : "test2922096"
  },
  "test091869" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091869() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test091869"
  },
  "test103959" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103959() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test103959"
  },
  "test1661503" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661503() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1661503"
  },
  "test103956" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103956() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test103956"
  },
  "test1661502" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661502() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1661502"
  },
  "test103957" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103957() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test103957"
  },
  "test1661501" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661501() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1661501"
  },
  "test016169" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016169() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test016169"
  },
  "test091864" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091864() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test091864"
  },
  "test1661500" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661500() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1661500"
  },
  "test016168" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016168() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test016168"
  },
  "test091865" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091865() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test091865"
  },
  "test091866" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091866() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test091866"
  },
  "test091867" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091867() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test091867"
  },
  "test103954" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103954() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test103954"
  },
  "test103955" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103955() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test103955"
  },
  "test103953" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103953() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test103953"
  },
  "test1661505" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661505() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1661505"
  },
  "test2391767" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391767() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2391767"
  },
  "test020210" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020210() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test020210"
  },
  "test020211" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020211() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test020211"
  },
  "test2391769" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391769() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test2391769"
  },
  "test020212" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020212() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test020212"
  },
  "test2391768" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391768() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2391768"
  },
  "test016165" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016165() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test016165"
  },
  "test020213" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020213() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test020213"
  },
  "test016164" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016164() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test016164"
  },
  "test020214" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020214() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withSkipHeaderRecord(true);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test020214"
  },
  "test016167" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016167() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test016167"
  },
  "test016166" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016166() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test016166"
  },
  "test091870" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091870() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test091870"
  },
  "test068639" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068639() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test068639"
  },
  "test068635" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068635() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test068635"
  },
  "test068636" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068636() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test068636"
  },
  "test068637" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068637() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test068637"
  },
  "test068638" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068638() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test068638"
  },
  "test103961" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103961() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test103961"
  },
  "test103962" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103962() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test103962"
  },
  "test103960" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103960() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test103960"
  },
  "test103963" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103963() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test103963"
  },
  "test1361240" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361240() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1361240"
  },
  "test2391770" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2391770() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2391770"
  },
  "test1361242" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361242() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1361242"
  },
  "test1601443" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601443() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test1601443"
  },
  "test1361241" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361241() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1361241"
  },
  "test1601442" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601442() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1601442"
  },
  "test1361244" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361244() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1361244"
  },
  "test1601441" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601441() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1601441"
  },
  "test1361243" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361243() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1361243"
  },
  "test1601440" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601440() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1601440"
  },
  "test1601447" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601447() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test1601447"
  },
  "test1361245" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1361245() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1361245"
  },
  "test1601446" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601446() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1601446"
  },
  "test1991681" : {
    "methodSignature" : "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1991681() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Object object0 = new Object();\n    cSVFormat0.print(object0, (Appendable) null, false);\n}",
    "testName" : "test1991681"
  },
  "test1601445" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601445() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1601445"
  },
  "test1601444" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601444() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1601444"
  },
  "test00334" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00334() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test00334"
  },
  "test079748" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079748() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test079748"
  },
  "test00335" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00335() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00335"
  },
  "test079747" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079747() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test079747"
  },
  "test00332" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00332() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test00332"
  },
  "test079746" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079746() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test079746"
  },
  "test00333" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00333() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00333"
  },
  "test079745" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079745() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test079745"
  },
  "test00338" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00338() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test00338"
  },
  "test00339" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00339() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test00339"
  },
  "test00336" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00336() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test00336"
  },
  "test00337" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00337() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00337"
  },
  "test079749" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079749() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test079749"
  },
  "test079744" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079744() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test079744"
  },
  "test079743" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079743() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test079743"
  },
  "test1301191" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301191() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1301191"
  },
  "test2081699" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2081699() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1295);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);\n    cSVFormat0.MYSQL.print((Object) null, (Appendable) outputStreamWriter0, false);\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test2081699"
  },
  "test1301192" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301192() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1301192"
  },
  "test1301193" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301193() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1301193"
  },
  "test1381262" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1381262() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1381262"
  },
  "test1381261" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1381261() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1381261"
  },
  "test1301190" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301190() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1301190"
  },
  "test027274" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027274() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test027274"
  },
  "test027275" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027275() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test027275"
  },
  "test027276" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027276() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test027276"
  },
  "test027277" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027277() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test027277"
  },
  "test00330" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00330() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00330"
  },
  "test00331" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00331() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00331"
  },
  "test027272" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027272() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test027272"
  },
  "test027273" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027273() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test027273"
  },
  "test2832028" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2832028() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String string0 = cSVFormat0.INFORMIX_UNLOAD_CSV.toString();\n}",
    "testName" : "test2832028"
  },
  "test1381257" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1381257() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1381257"
  },
  "test1301188" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301188() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1301188"
  },
  "test1301189" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1301189() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1301189"
  },
  "test1381259" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1381259() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1381259"
  },
  "test1381258" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1381258() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1381258"
  },
  "test031308" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031308() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test031308"
  },
  "test031307" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031307() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test031307"
  },
  "test031306" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031306() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test031306"
  },
  "test1381260" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1381260() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1381260"
  },
  "test031309" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031309() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test031309"
  },
  "test1751584" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1751584() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"InformixUnload\");\n    cSVFormat0.getRecordSeparator();\n}",
    "testName" : "test1751584"
  },
  "test031311" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031311() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test031311"
  },
  "test031310" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031310() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"UGzGr]f\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test031310"
  },
  "test00774" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00774() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00774"
  },
  "test00775" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00775() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00775"
  },
  "test00772" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00772() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00772"
  },
  "test1211101" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211101() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1211101"
  },
  "test00773" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00773() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00773"
  },
  "test1211100" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1211100() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withFirstRecordAsHeader();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1211100"
  },
  "test00776" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00776() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00776"
  },
  "test00777" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00777() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00777"
  },
  "test2461796" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2461796() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    MockFile mockFile0 = new MockFile(\"wdL3,\", \"\\\" in \");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    Object[] objectArray0 = new Object[8];\n    objectArray0[5] = (Object) \"wdL3,\";\n    cSVFormat0.printRecord(mockPrintWriter0, objectArray0);\n    cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test2461796"
  },
  "test1881652" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881652() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test1881652"
  },
  "test1881651" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881651() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test1881651"
  },
  "test1881653" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881653() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test1881653"
  },
  "test2721962" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2721962() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = CSVFormat.TDF;\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test2721962"
  },
  "test038379" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038379() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test038379"
  },
  "test038377" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038377() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test038377"
  },
  "test038378" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038378() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test038378"
  },
  "test1881649" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881649() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getTrim();\n}",
    "testName" : "test1881649"
  },
  "test1881648" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881648() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1881648"
  },
  "test1881647" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881647() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test1881647"
  },
  "test1881646" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881646() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1881646"
  },
  "test1881650" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881650() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test1881650"
  },
  "test050480" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050480() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test050480"
  },
  "test038375" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038375() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test038375"
  },
  "test038376" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038376() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test038376"
  },
  "test038374" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038374() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test038374"
  },
  "test2902072" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902072() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test2902072"
  },
  "test1731573" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731573() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1731573"
  },
  "test2902073" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902073() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test2902073"
  },
  "test2902074" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902074() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2902074"
  },
  "test2902075" : {
    "methodSignature" : "public boolean isCommentMarkerSet()",
    "methodName" : "isCommentMarkerSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902075() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat2.isCommentMarkerSet();\n}",
    "testName" : "test2902075"
  },
  "test1731576" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731576() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1731576"
  },
  "test2902076" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902076() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2902076"
  },
  "test1731577" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731577() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1731577"
  },
  "test2902077" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902077() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test2902077"
  },
  "test1731574" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731574() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1731574"
  },
  "test2902078" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902078() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test2902078"
  },
  "test1731575" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731575() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1731575"
  },
  "test2902079" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902079() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2902079"
  },
  "test2902070" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902070() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2902070"
  },
  "test2902071" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902071() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2902071"
  },
  "test042412" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042412() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test042412"
  },
  "test042411" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042411() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test042411"
  },
  "test042413" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042413() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test042413"
  },
  "test1231124" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231124() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1231124"
  },
  "test1231125" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231125() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1231125"
  },
  "test042410" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042410() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test042410"
  },
  "test1231123" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231123() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1231123"
  },
  "test1231128" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231128() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1231128"
  },
  "test1231129" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231129() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1231129"
  },
  "test1231126" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231126() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1231126"
  },
  "test1231127" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231127() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1231127"
  },
  "test2902080" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902080() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test2902080"
  },
  "test2902081" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902081() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2902081"
  },
  "test1231130" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1231130() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1231130"
  },
  "test2902082" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2902082() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test2902082"
  },
  "test042409" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042409() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test042409"
  },
  "test042408" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042408() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test042408"
  },
  "test2812011" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2812011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test2812011"
  },
  "test2812013" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2812013() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test2812013"
  },
  "test2812012" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2812012() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test2812012"
  },
  "test2812015" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2812015() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.equals((Object) cSVFormat0);\n}",
    "testName" : "test2812015"
  },
  "test2812014" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2812014() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test2812014"
  },
  "test2812016" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2812016() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test2812016"
  },
  "test2591857" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2591857() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    cSVFormat0.MYSQL.hashCode();\n}",
    "testName" : "test2591857"
  },
  "test049469" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049469() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test049469"
  },
  "test064600" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064600() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test064600"
  },
  "test1731580" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731580() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1731580"
  },
  "test1731581" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731581() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1731581"
  },
  "test1731582" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731582() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1731582"
  },
  "test061570" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061570() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test061570"
  },
  "test1731578" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731578() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1731578"
  },
  "test1731579" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731579() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1731579"
  },
  "test1251148" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251148() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1251148"
  },
  "test1251149" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251149() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1251149"
  },
  "test1251146" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251146() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1251146"
  },
  "test1251147" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251147() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1251147"
  },
  "test1251144" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251144() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test1251144"
  },
  "test1251145" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251145() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1251145"
  },
  "test1251142" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251142() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1251142"
  },
  "test1251143" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251143() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test1251143"
  },
  "test050477" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050477() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test050477"
  },
  "test050476" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050476() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test050476"
  },
  "test050475" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050475() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test050475"
  },
  "test053500" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053500() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"VV0P[AFUSpAi`\");\n    cSVFormat3.getTrim();\n}",
    "testName" : "test053500"
  },
  "test050479" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050479() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test050479"
  },
  "test053501" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053501() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"VV0P[AFUSpAi`\");\n    cSVFormat3.getNullString();\n}",
    "testName" : "test053501"
  },
  "test050478" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050478() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test050478"
  },
  "test053502" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053502() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"VV0P[AFUSpAi`\");\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test053502"
  },
  "test1251151" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251151() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1251151"
  },
  "test2371760" : {
    "methodSignature" : "public CSVFormat withQuote(final Character quoteChar)",
    "methodName" : "withQuote",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2371760() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(' ');\n    Character character0 = Character.valueOf(' ');\n    cSVFormat0.withQuote(character0);\n}",
    "testName" : "test2371760"
  },
  "test1251150" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1251150() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withCommentMarker('>');\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1251150"
  },
  "test1791601" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791601() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1791601"
  },
  "test1791600" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791600() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1791600"
  },
  "test049471" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049471() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test049471"
  },
  "test049470" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049470() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test049470"
  },
  "test1791606" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791606() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1791606"
  },
  "test049473" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049473() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test049473"
  },
  "test1791605" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791605() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1791605"
  },
  "test2701956" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2701956() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = CSVFormat.POSTGRESQL_TEXT;\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test2701956"
  },
  "test049472" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049472() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test049472"
  },
  "test1791604" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791604() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1791604"
  },
  "test1791603" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791603() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1791603"
  },
  "test049474" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049474() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test049474"
  },
  "test1791602" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791602() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1791602"
  },
  "test012133" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012133() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test012133"
  },
  "test012132" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012132() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test012132"
  },
  "test012131" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012131() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test012131"
  },
  "test075706" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075706() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test075706"
  },
  "test107989" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107989() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test107989"
  },
  "test075705" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075705() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test075705"
  },
  "test075708" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075708() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test075708"
  },
  "test1101015" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101015() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1101015"
  },
  "test075707" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075707() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test075707"
  },
  "test1101014" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101014() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);\n    cSVFormat3.equals((Object) cSVFormat2);\n}",
    "testName" : "test1101014"
  },
  "test075709" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075709() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test075709"
  },
  "test107987" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107987() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test107987"
  },
  "test107988" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107988() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test107988"
  },
  "test075711" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075711() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test075711"
  },
  "test075710" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075710() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test075710"
  },
  "test1861644" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1861644() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = cSVFormat0.getEscapeCharacter();\n}",
    "testName" : "test1861644"
  },
  "test075713" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075713() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test075713"
  },
  "test075712" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075712() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test075712"
  },
  "test075714" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075714() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test075714"
  },
  "test012130" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012130() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test012130"
  },
  "test012123" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012123() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test012123"
  },
  "test012122" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012122() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test012122"
  },
  "test012121" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012121() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test012121"
  },
  "test012120" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012120() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test012120"
  },
  "test012127" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012127() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test012127"
  },
  "test012126" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012126() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test012126"
  },
  "test012125" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012125() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test012125"
  },
  "test012124" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012124() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test012124"
  },
  "test012129" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012129() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test012129"
  },
  "test012128" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012128() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test012128"
  },
  "test107992" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107992() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test107992"
  },
  "test107993" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107993() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test107993"
  },
  "test107994" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107994() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test107994"
  },
  "test107995" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107995() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test107995"
  },
  "test107990" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107990() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test107990"
  },
  "test107991" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107991() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.InformixUnloadCsv;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test107991"
  },
  "test1951677" : {
    "methodSignature" : "public void printRecord(final Appendable out, final Object... values) throws IOException",
    "methodName" : "printRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951677() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[1];\n    Object object0 = new Object();\n    objectArray0[0] = object0;\n    Charset charset0 = Charset.defaultCharset();\n    byte[] byteArray0 = new byte[3];\n    ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);\n    CharBuffer charBuffer0 = charset0.decode(byteBuffer0);\n    cSVFormat0.printRecord(charBuffer0, objectArray0);\n}",
    "testName" : "test1951677"
  },
  "test061563" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061563() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test061563"
  },
  "test083791" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083791() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test083791"
  },
  "test061562" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061562() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test061562"
  },
  "test061565" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061565() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test061565"
  },
  "test086820" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086820() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test086820"
  },
  "test1791599" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791599() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1791599"
  },
  "test061564" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061564() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test061564"
  },
  "test083790" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083790() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test083790"
  },
  "test086821" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086821() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test086821"
  },
  "test1791598" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791598() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1791598"
  },
  "test061567" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061567() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test061567"
  },
  "test1791597" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791597() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1791597"
  },
  "test061566" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061566() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test061566"
  },
  "test1791596" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791596() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1791596"
  },
  "test061569" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061569() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test061569"
  },
  "test2741983" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2741983() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('K');\n    Double double0 = new Double((-1.0));\n    boolean boolean0 = cSVFormat0.equals(double0);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2741983"
  },
  "test061568" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061568() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test061568"
  },
  "test2741984" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2741984() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('K');\n    Double double0 = new Double((-1.0));\n    boolean boolean0 = cSVFormat0.equals(double0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2741984"
  },
  "test012119" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012119() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test012119"
  },
  "test2782008" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2782008() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker((Character) null);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2782008"
  },
  "test086816" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086816() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test086816"
  },
  "test2782007" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2782007() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker((Character) null);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2782007"
  },
  "test086817" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086817() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test086817"
  },
  "test2782006" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2782006() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker((Character) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2782006"
  },
  "test086818" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086818() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test086818"
  },
  "test2782005" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2782005() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker((Character) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2782005"
  },
  "test086819" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086819() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test086819"
  },
  "test2782004" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2782004() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker((Character) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2782004"
  },
  "test2782003" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2782003() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker((Character) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2782003"
  },
  "test2782002" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2782002() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker((Character) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2782002"
  },
  "test2782001" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2782001() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker((Character) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2782001"
  },
  "test2741978" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2741978() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('K');\n    Double double0 = new Double((-1.0));\n    boolean boolean0 = cSVFormat0.equals(double0);\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2741978"
  },
  "test2741979" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2741979() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('K');\n    Double double0 = new Double((-1.0));\n    boolean boolean0 = cSVFormat0.equals(double0);\n}",
    "testName" : "test2741979"
  },
  "test2741976" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2741976() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('K');\n    Double double0 = new Double((-1.0));\n    boolean boolean0 = cSVFormat0.equals(double0);\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2741976"
  },
  "test2741977" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2741977() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('K');\n    Double double0 = new Double((-1.0));\n    boolean boolean0 = cSVFormat0.equals(double0);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2741977"
  },
  "test2741975" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2741975() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('K');\n    Double double0 = new Double((-1.0));\n    boolean boolean0 = cSVFormat0.equals(double0);\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test2741975"
  },
  "test1191085" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191085() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1191085"
  },
  "test1191084" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191084() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1191084"
  },
  "test1191087" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191087() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1191087"
  },
  "test1101009" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101009() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test1101009"
  },
  "test1191086" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191086() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1191086"
  },
  "test1101008" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101008() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1101008"
  },
  "test1191089" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191089() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1191089"
  },
  "test1191088" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191088() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1191088"
  },
  "test072672" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072672() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test072672"
  },
  "test072673" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072673() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test072673"
  },
  "test072674" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072674() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test072674"
  },
  "test072675" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072675() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test072675"
  },
  "test072676" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072676() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test072676"
  },
  "test075702" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075702() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test075702"
  },
  "test1101013" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101013() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test1101013"
  },
  "test1191090" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1191090() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1191090"
  },
  "test072677" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072677() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test072677"
  },
  "test075701" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075701() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test075701"
  },
  "test1101012" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101012() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);\n    cSVFormat3.getQuoteCharacter();\n}",
    "testName" : "test1101012"
  },
  "test075704" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075704() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test075704"
  },
  "test1101011" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);\n    cSVFormat3.getEscapeCharacter();\n}",
    "testName" : "test1101011"
  },
  "test075703" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075703() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test075703"
  },
  "test1101010" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1101010() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(resultSet0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1101010"
  },
  "test2741981" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2741981() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('K');\n    Double double0 = new Double((-1.0));\n    boolean boolean0 = cSVFormat0.equals(double0);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2741981"
  },
  "test2741982" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2741982() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('K');\n    Double double0 = new Double((-1.0));\n    boolean boolean0 = cSVFormat0.equals(double0);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2741982"
  },
  "test2741980" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2741980() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('K');\n    Double double0 = new Double((-1.0));\n    boolean boolean0 = cSVFormat0.equals(double0);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2741980"
  },
  "test023233" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023233() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getTrim();\n}",
    "testName" : "test023233"
  },
  "test023236" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023236() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test023236"
  },
  "test023237" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023237() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test023237"
  },
  "test023234" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023234() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test023234"
  },
  "test023235" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023235() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test023235"
  },
  "test023238" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023238() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test023238"
  },
  "test023239" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023239() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test023239"
  },
  "test083780" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083780() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test083780"
  },
  "test083781" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083781() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test083781"
  },
  "test083788" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083788() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test083788"
  },
  "test083789" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083789() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test083789"
  },
  "test083786" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083786() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test083786"
  },
  "test083787" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083787() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test083787"
  },
  "test083784" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083784() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test083784"
  },
  "test023240" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023240() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test023240"
  },
  "test083785" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083785() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test083785"
  },
  "test083782" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083782() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test083782"
  },
  "test083783" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083783() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test083783"
  },
  "test100934" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100934() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test100934"
  },
  "test100933" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100933() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getNullString();\n}",
    "testName" : "test100933"
  },
  "test097916" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097916() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test097916"
  },
  "test100936" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100936() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test100936"
  },
  "test094889" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094889() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test094889"
  },
  "test100935" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100935() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test100935"
  },
  "test2171716" : {
    "methodSignature" : "public String[] getHeaderComments()",
    "methodName" : "getHeaderComments",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2171716() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    String[] stringArray0 = cSVFormat0.getHeaderComments();\n}",
    "testName" : "test2171716"
  },
  "test097914" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097914() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test097914"
  },
  "test100938" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100938() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test100938"
  },
  "test097915" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097915() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test097915"
  },
  "test100937" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100937() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test100937"
  },
  "test1471329" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471329() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = Character.valueOf('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1471329"
  },
  "test1171067" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171067() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1171067"
  },
  "test1171066" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171066() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1171066"
  },
  "test1171069" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171069() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1171069"
  },
  "test1171068" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171068() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1171068"
  },
  "test1171065" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171065() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1171065"
  },
  "test1171070" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171070() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1171070"
  },
  "test094891" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094891() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test094891"
  },
  "test094890" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094890() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test094890"
  },
  "test1171071" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1171071() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1171071"
  },
  "test097909" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097909() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test097909"
  },
  "test097907" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097907() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test097907"
  },
  "test097908" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097908() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test097908"
  },
  "test1471333" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471333() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = Character.valueOf('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1471333"
  },
  "test1471334" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471334() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = Character.valueOf('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1471334"
  },
  "test2351758" : {
    "methodSignature" : "public CSVFormat withCommentMarker(final char commentMarker)",
    "methodName" : "withCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2351758() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('%');\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.withCommentMarker('%');\n}",
    "testName" : "test2351758"
  },
  "test1471330" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471330() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = Character.valueOf('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1471330"
  },
  "test2501807" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2501807() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[18];\n    objectArray0[0] = (Object) cSVFormat0;\n    cSVFormat0.POSTGRESQL_CSV.format(objectArray0);\n    cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test2501807"
  },
  "test1471331" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471331() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = Character.valueOf('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1471331"
  },
  "test100940" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100940() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test100940"
  },
  "test1471332" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1471332() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = Character.valueOf('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1471332"
  },
  "test097912" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097912() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test097912"
  },
  "test097913" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097913() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test097913"
  },
  "test100939" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100939() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test100939"
  },
  "test094888" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094888() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test094888"
  },
  "test097910" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097910() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test097910"
  },
  "test094887" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094887() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test094887"
  },
  "test097911" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097911() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test097911"
  },
  "test1121029" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121029() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1121029"
  },
  "test1121028" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121028() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1121028"
  },
  "test2521820" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521820() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    MockFile mockFile0 = new MockFile(\"[5u7'?-.Ckp?^KopS\", \"\\\" in \");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    Object[] objectArray0 = new Object[8];\n    cSVFormat2.printRecord(mockPrintWriter0, objectArray0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test2521820"
  },
  "test1121027" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121027() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1121027"
  },
  "test2521821" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521821() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    MockFile mockFile0 = new MockFile(\"[5u7'?-.Ckp?^KopS\", \"\\\" in \");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    Object[] objectArray0 = new Object[8];\n    cSVFormat2.printRecord(mockPrintWriter0, objectArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2521821"
  },
  "test1121026" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121026() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1121026"
  },
  "test1121025" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121025() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1121025"
  },
  "test1121024" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121024() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1121024"
  },
  "test1121023" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121023() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1121023"
  },
  "test00770" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00770() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test00770"
  },
  "test00771" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00771() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00771"
  },
  "test00767" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00767() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test00767"
  },
  "test00768" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00768() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test00768"
  },
  "test1121032" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121032() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1121032"
  },
  "test00769" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00769() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test00769"
  },
  "test1121031" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121031() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1121031"
  },
  "test1121030" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121030() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1121030"
  },
  "test034334" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034334() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test034334"
  },
  "test034335" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034335() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test034335"
  },
  "test2761986" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2761986() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    boolean boolean0 = cSVFormat0.equals(cSVFormat0);\n}",
    "testName" : "test2761986"
  },
  "test034336" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034336() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test034336"
  },
  "test034337" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034337() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test034337"
  },
  "test034338" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034338() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test034338"
  },
  "test2521816" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521816() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    MockFile mockFile0 = new MockFile(\"[5u7'?-.Ckp?^KopS\", \"\\\" in \");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    Object[] objectArray0 = new Object[8];\n    cSVFormat2.printRecord(mockPrintWriter0, objectArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2521816"
  },
  "test034339" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034339() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test034339"
  },
  "test2521817" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521817() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    MockFile mockFile0 = new MockFile(\"[5u7'?-.Ckp?^KopS\", \"\\\" in \");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    Object[] objectArray0 = new Object[8];\n    cSVFormat2.printRecord(mockPrintWriter0, objectArray0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test2521817"
  },
  "test2521818" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521818() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    MockFile mockFile0 = new MockFile(\"[5u7'?-.Ckp?^KopS\", \"\\\" in \");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    Object[] objectArray0 = new Object[8];\n    cSVFormat2.printRecord(mockPrintWriter0, objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2521818"
  },
  "test2521819" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2521819() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    MockFile mockFile0 = new MockFile(\"[5u7'?-.Ckp?^KopS\", \"\\\" in \");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    Object[] objectArray0 = new Object[8];\n    cSVFormat2.printRecord(mockPrintWriter0, objectArray0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test2521819"
  },
  "test1121022" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1121022() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1121022"
  },
  "test034340" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034340() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test034340"
  },
  "test1971679" : {
    "methodSignature" : "public void printRecord(final Appendable out, final Object... values) throws IOException",
    "methodName" : "printRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1971679() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    PipedWriter pipedWriter0 = new PipedWriter();\n    Object[] objectArray0 = new Object[2];\n    cSVFormat0.printRecord(pipedWriter0, objectArray0);\n}",
    "testName" : "test1971679"
  },
  "test1411282" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411282() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1411282"
  },
  "test1411281" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411281() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1411281"
  },
  "test1411280" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411280() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1411280"
  },
  "test1431295" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431295() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1431295"
  },
  "test1431294" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431294() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1431294"
  },
  "test1411287" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411287() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1411287"
  },
  "test1411286" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411286() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1411286"
  },
  "test1431299" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431299() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1431299"
  },
  "test1411285" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411285() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1411285"
  },
  "test1431298" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431298() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1431298"
  },
  "test1411284" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411284() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1411284"
  },
  "test1431297" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431297() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1431297"
  },
  "test1411283" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411283() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1411283"
  },
  "test1431296" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431296() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1431296"
  },
  "test1491346" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491346() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\\"');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1491346"
  },
  "test2782000" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2782000() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker((Character) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2782000"
  },
  "test1491347" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491347() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\\"');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1491347"
  },
  "test1411279" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411279() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1411279"
  },
  "test1411278" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1411278() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('r');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1411278"
  },
  "test1491341" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491341() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\\"');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1491341"
  },
  "test1151050" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151050() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1151050"
  },
  "test1491342" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491342() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\\"');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1491342"
  },
  "test1491343" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491343() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\\"');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1491343"
  },
  "test1151052" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151052() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1151052"
  },
  "test1491344" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491344() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\\"');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1491344"
  },
  "test1151051" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151051() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1151051"
  },
  "test1491345" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1491345() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('\\\"');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1491345"
  },
  "test019194" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019194() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test019194"
  },
  "test019195" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019195() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test019195"
  },
  "test019192" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019192() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test019192"
  },
  "test019193" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019193() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test019193"
  },
  "test1151049" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151049() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test1151049"
  },
  "test019198" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019198() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test019198"
  },
  "test019199" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019199() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test019199"
  },
  "test019196" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019196() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test019196"
  },
  "test019197" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019197() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test019197"
  },
  "test2331756" : {
    "methodSignature" : "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy)",
    "methodName" : "withQuoteMode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2331756() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    cSVFormat0.withQuoteMode(quoteMode0);\n}",
    "testName" : "test2331756"
  },
  "test045439" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045439() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('x');\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test045439"
  },
  "test045438" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045438() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('x');\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test045438"
  },
  "test2191729" : {
    "methodSignature" : "public String[] getHeader()",
    "methodName" : "getHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2191729() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    String[] stringArray0 = cSVFormat0.getHeader();\n}",
    "testName" : "test2191729"
  },
  "test045437" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045437() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('x');\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test045437"
  },
  "test045436" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045436() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('x');\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test045436"
  },
  "test045435" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045435() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('x');\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test045435"
  },
  "test1771587" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771587() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1771587"
  },
  "test045434" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045434() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('x');\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test045434"
  },
  "test1771588" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771588() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1771588"
  },
  "test045433" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045433() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('x');\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test045433"
  },
  "test1771586" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771586() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1771586"
  },
  "test1771589" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771589() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1771589"
  },
  "test1151054" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151054() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1151054"
  },
  "test1771590" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771590() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1771590"
  },
  "test1151053" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151053() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1151053"
  },
  "test1771591" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771591() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1771591"
  },
  "test1151056" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151056() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1151056"
  },
  "test1151055" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151055() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1151055"
  },
  "test1151058" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151058() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1151058"
  },
  "test1771594" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771594() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1771594"
  },
  "test1151057" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1151057() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1151057"
  },
  "test1771592" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771592() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1771592"
  },
  "test1771593" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771593() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1771593"
  },
  "test1811617" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811617() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"INVALID\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1811617"
  },
  "test1811616" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811616() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"INVALID\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1811616"
  },
  "test1811615" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811615() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"INVALID\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1811615"
  },
  "test1811619" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811619() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"INVALID\");\n    String string0 = cSVFormat1.getNullString();\n}",
    "testName" : "test1811619"
  },
  "test1811618" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811618() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"INVALID\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1811618"
  },
  "test1811620" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811620() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"INVALID\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1811620"
  },
  "test1811623" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811623() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"INVALID\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1811623"
  },
  "test1811622" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811622() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"INVALID\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1811622"
  },
  "test1811621" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811621() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"INVALID\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1811621"
  },
  "test1911673" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1911673() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1911673"
  },
  "test056518" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056518() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test056518"
  },
  "test2541829" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541829() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2541829"
  },
  "test056517" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056517() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test056517"
  },
  "test2541828" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541828() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getNullString();\n}",
    "testName" : "test2541828"
  },
  "test056519" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056519() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test056519"
  },
  "test2541825" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541825() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2541825"
  },
  "test2541824" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541824() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2541824"
  },
  "test056516" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056516() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test056516"
  },
  "test2541827" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541827() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2541827"
  },
  "test056515" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056515() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test056515"
  },
  "test2541826" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541826() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2541826"
  },
  "test2541823" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541823() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getCommentMarker();\n}",
    "testName" : "test2541823"
  },
  "test1141046" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141046() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1141046"
  },
  "test1141045" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141045() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1141045"
  },
  "test1141044" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141044() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1141044"
  },
  "test1141043" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141043() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1141043"
  },
  "test067634" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067634() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test067634"
  },
  "test1141048" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141048() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1141048"
  },
  "test1141047" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1141047() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1141047"
  },
  "test067630" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067630() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test067630"
  },
  "test067631" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067631() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test067631"
  },
  "test067632" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067632() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test067632"
  },
  "test067633" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067633() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test067633"
  },
  "test2151714" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2151714() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test2151714"
  },
  "test1581419" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581419() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1581419"
  },
  "test1581418" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581418() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1581418"
  },
  "test1581417" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581417() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1581417"
  },
  "test1581416" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581416() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1581416"
  },
  "test1581415" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581415() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1581415"
  },
  "test2011683" : {
    "methodSignature" : "public CSVPrinter print(final File out, final Charset charset) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2011683() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat0.INFORMIX_UNLOAD_CSV.print((File) null, charset0);\n}",
    "testName" : "test2011683"
  },
  "test00224" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00224() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test00224"
  },
  "test1431303" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431303() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1431303"
  },
  "test2641895" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641895() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('V');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2641895"
  },
  "test00225" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00225() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test00225"
  },
  "test1431302" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431302() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1431302"
  },
  "test2641894" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641894() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('V');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2641894"
  },
  "test1431301" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431301() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1431301"
  },
  "test2641897" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641897() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('V');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test2641897"
  },
  "test00223" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00223() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00223"
  },
  "test1431300" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431300() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1431300"
  },
  "test2641896" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641896() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('V');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2641896"
  },
  "test00228" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00228() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00228"
  },
  "test2641899" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641899() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('V');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test2641899"
  },
  "test00229" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00229() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00229"
  },
  "test2641898" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641898() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('V');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2641898"
  },
  "test00226" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00226() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00226"
  },
  "test1431305" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431305() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1431305"
  },
  "test00227" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00227() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00227"
  },
  "test1431304" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431304() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1431304"
  },
  "test1581429" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581429() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1581429"
  },
  "test1581428" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581428() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1581428"
  },
  "test1581427" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581427() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1581427"
  },
  "test1581426" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581426() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1581426"
  },
  "test1581425" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581425() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1581425"
  },
  "test1581424" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581424() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1581424"
  },
  "test1581423" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581423() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1581423"
  },
  "test1581422" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581422() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1581422"
  },
  "test1581421" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581421() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1581421"
  },
  "test1581420" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1581420() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1581420"
  },
  "test2641891" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641891() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('V');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2641891"
  },
  "test2641893" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641893() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('V');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2641893"
  },
  "test2641892" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641892() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('V');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2641892"
  },
  "test053499" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053499() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withNullString(\"VV0P[AFUSpAi`\");\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test053499"
  },
  "test056525" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056525() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test056525"
  },
  "test2541836" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541836() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2541836"
  },
  "test056524" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056524() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test056524"
  },
  "test2541835" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541835() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2541835"
  },
  "test056527" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056527() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test056527"
  },
  "test056526" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056526() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test056526"
  },
  "test056521" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056521() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test056521"
  },
  "test2541832" : {
    "methodSignature" : "public boolean isCommentMarkerSet()",
    "methodName" : "isCommentMarkerSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541832() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n}",
    "testName" : "test2541832"
  },
  "test056520" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056520() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat2.getNullString();\n}",
    "testName" : "test056520"
  },
  "test2541831" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541831() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test2541831"
  },
  "test056523" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056523() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test056523"
  },
  "test2541834" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541834() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2541834"
  },
  "test056522" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056522() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"Unexpected Token type: \");\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test056522"
  },
  "test2541833" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541833() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2541833"
  },
  "test2541830" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2541830() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2541830"
  },
  "test090863" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090863() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test090863"
  },
  "test1831636" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831636() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1831636"
  },
  "test1831635" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831635() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1831635"
  },
  "test1831634" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831634() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1831634"
  },
  "test1541384" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541384() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1541384"
  },
  "test1541382" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541382() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1541382"
  },
  "test1541383" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541383() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1541383"
  },
  "test1541380" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541380() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1541380"
  },
  "test1541381" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541381() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1541381"
  },
  "test1541379" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1541379() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1541379"
  },
  "test078742" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078742() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test078742"
  },
  "test078741" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078741() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test078741"
  },
  "test078740" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078740() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test078740"
  },
  "test090855" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090855() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test090855"
  },
  "test090854" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090854() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test090854"
  },
  "test1831629" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831629() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1831629"
  },
  "test104969" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104969() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test104969"
  },
  "test1831628" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831628() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1831628"
  },
  "test104968" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104968() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test104968"
  },
  "test1831627" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831627() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1831627"
  },
  "test090859" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090859() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test090859"
  },
  "test1831626" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831626() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1831626"
  },
  "test090858" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090858() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test090858"
  },
  "test1831625" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831625() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1831625"
  },
  "test090857" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090857() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test090857"
  },
  "test090856" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090856() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test090856"
  },
  "test2621881" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2621881() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    cSVFormat0.format((Object[]) null);\n}",
    "testName" : "test2621881"
  },
  "test104967" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104967() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test104967"
  },
  "test104966" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104966() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test104966"
  },
  "test104965" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104965() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test104965"
  },
  "test2771990" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771990() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2771990"
  },
  "test104964" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104964() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[0] = \"1\";\n    stringArray0[1] = \"' in \";\n    stringArray0[2] = \"org.apache.commons.csv.CSVPrinter\";\n    stringArray0[3] = \"string\";\n    stringArray0[4] = \"\";\n    stringArray0[5] = \"\\u2029\";\n    stringArray0[6] = \"Qad|CpVro7(+/%G<ei\";\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test104964"
  },
  "test2771987" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771987() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2771987"
  },
  "test2241734" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2241734() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = cSVFormat0.getCommentMarker();\n}",
    "testName" : "test2241734"
  },
  "test1831633" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831633() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1831633"
  },
  "test2771989" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771989() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2771989"
  },
  "test1831632" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831632() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1831632"
  },
  "test2771988" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771988() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test2771988"
  },
  "test1831631" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831631() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1831631"
  },
  "test2411778" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411778() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2411778"
  },
  "test1831630" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831630() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1831630"
  },
  "test090862" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090862() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test090862"
  },
  "test2411776" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411776() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2411776"
  },
  "test090861" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090861() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test090861"
  },
  "test2411777" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411777() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2411777"
  },
  "test090860" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090860() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getNullString();\n}",
    "testName" : "test090860"
  },
  "test2411775" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2411775() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test2411775"
  },
  "test067627" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067627() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test067627"
  },
  "test2892069" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2892069() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2892069"
  },
  "test067628" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067628() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test067628"
  },
  "test064599" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064599() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test064599"
  },
  "test067629" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067629() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test067629"
  },
  "test2892067" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2892067() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2892067"
  },
  "test064598" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064598() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test064598"
  },
  "test2892068" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2892068() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test2892068"
  },
  "test067623" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067623() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test067623"
  },
  "test2301740" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2301740() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2301740"
  },
  "test067624" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067624() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test067624"
  },
  "test067625" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067625() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test067625"
  },
  "test067626" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067626() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test067626"
  },
  "test064593" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064593() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test064593"
  },
  "test064592" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064592() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test064592"
  },
  "test067620" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067620() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test067620"
  },
  "test064591" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064591() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test064591"
  },
  "test067621" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067621() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test067621"
  },
  "test064590" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064590() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test064590"
  },
  "test067622" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067622() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test067622"
  },
  "test064597" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064597() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test064597"
  },
  "test089851" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089851() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test089851"
  },
  "test064596" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064596() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test064596"
  },
  "test089850" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089850() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test089850"
  },
  "test064595" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064595() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test064595"
  },
  "test089853" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089853() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test089853"
  },
  "test064594" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064594() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test064594"
  },
  "test089852" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089852() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test089852"
  },
  "test00664" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00664() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test00664"
  },
  "test00665" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00665() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00665"
  },
  "test00662" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00662() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test00662"
  },
  "test00663" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00663() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00663"
  },
  "test00666" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00666() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00666"
  },
  "test064589" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064589() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test064589"
  },
  "test067619" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067619() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test067619"
  },
  "test00660" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00660() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test00660"
  },
  "test00661" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00661() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00661"
  },
  "test078736" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078736() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test078736"
  },
  "test078735" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078735() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test078735"
  },
  "test078734" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078734() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test078734"
  },
  "test078733" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078733() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test078733"
  },
  "test078739" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078739() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test078739"
  },
  "test078738" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078738() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test078738"
  },
  "test078737" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078737() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test078737"
  },
  "test2301744" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2301744() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2301744"
  },
  "test2892061" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2892061() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2892061"
  },
  "test2301743" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2301743() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2301743"
  },
  "test2892062" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2892062() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2892062"
  },
  "test00659" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00659() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00659"
  },
  "test2301742" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2301742() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2301742"
  },
  "test2301741" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2301741() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2301741"
  },
  "test2892060" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2892060() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);\n    cSVFormat1.getNullString();\n}",
    "testName" : "test2892060"
  },
  "test078732" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078732() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test078732"
  },
  "test2301748" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2301748() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2301748"
  },
  "test2892065" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2892065() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2892065"
  },
  "test2301747" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2301747() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test2301747"
  },
  "test2892066" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2892066() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2892066"
  },
  "test2301746" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2301746() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test2301746"
  },
  "test2892063" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2892063() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2892063"
  },
  "test2301745" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2301745() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2301745"
  },
  "test2892064" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2892064() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2892064"
  },
  "test026265" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026265() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"F&X\");\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test026265"
  },
  "test026264" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026264() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"F&X\");\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test026264"
  },
  "test026269" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026269() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"F&X\");\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test026269"
  },
  "test026268" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026268() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"F&X\");\n    cSVFormat3.getTrim();\n}",
    "testName" : "test026268"
  },
  "test026267" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026267() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"F&X\");\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test026267"
  },
  "test2131712" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2131712() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    boolean boolean0 = cSVFormat0.isNullStringSet();\n}",
    "testName" : "test2131712"
  },
  "test026266" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026266() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"F&X\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test026266"
  },
  "test041407" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041407() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test041407"
  },
  "test089844" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089844() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test089844"
  },
  "test089846" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089846() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test089846"
  },
  "test089845" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089845() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test089845"
  },
  "test089848" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089848() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test089848"
  },
  "test089847" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089847() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test089847"
  },
  "test089849" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089849() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test089849"
  },
  "test026271" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026271() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"F&X\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test026271"
  },
  "test026270" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026270() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator(\"F&X\");\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test026270"
  },
  "test2561845" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561845() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2561845"
  },
  "test2561844" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561844() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2561844"
  },
  "test2561847" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561847() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2561847"
  },
  "test2561846" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561846() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2561846"
  },
  "test2561849" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561849() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2561849"
  },
  "test2561848" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561848() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2561848"
  },
  "test2561843" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561843() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2561843"
  },
  "test2561842" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2561842() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2561842"
  },
  "test1661499" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661499() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1661499"
  },
  "test1661498" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661498() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1661498"
  },
  "test1661497" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661497() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1661497"
  },
  "test030304" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030304() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"(u1\");\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test030304"
  },
  "test030305" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030305() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"(u1\");\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test030305"
  },
  "test030302" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030302() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"(u1\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test030302"
  },
  "test1451313" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451313() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1451313"
  },
  "test030303" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030303() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"(u1\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test030303"
  },
  "test1451314" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451314() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1451314"
  },
  "test030300" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030300() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"(u1\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test030300"
  },
  "test1451315" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451315() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1451315"
  },
  "test030301" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030301() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"(u1\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test030301"
  },
  "test1451316" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451316() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1451316"
  },
  "test1451317" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451317() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1451317"
  },
  "test1451318" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451318() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1451318"
  },
  "test1451319" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1451319() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('^');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1451319"
  },
  "test2031685" : {
    "methodSignature" : "public CSVFormat withQuote(final Character quoteChar)",
    "methodName" : "withQuote",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2031685() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = new Character('}');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.withQuote(character0);\n}",
    "testName" : "test2031685"
  },
  "test1501353" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501353() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1501353"
  },
  "test1501351" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501351() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1501351"
  },
  "test1501352" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501352() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1501352"
  },
  "test1501350" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501350() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1501350"
  },
  "test2091708" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2091708() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    StringWriter stringWriter0 = new StringWriter();\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);\n    BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);\n    cSVFormat0.INFORMIX_UNLOAD_CSV.print((Object) null, (Appendable) bufferedWriter0, true);\n    cSVFormat0.getRecordSeparator();\n}",
    "testName" : "test2091708"
  },
  "test1661496" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661496() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1661496"
  },
  "test2431785" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431785() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('t');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2431785"
  },
  "test2431786" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431786() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('t');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2431786"
  },
  "test2431784" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431784() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('t');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test2431784"
  },
  "test1501348" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501348() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1501348"
  },
  "test2431787" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431787() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('t');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2431787"
  },
  "test1501349" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1501349() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1501349"
  },
  "test2431788" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2431788() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = new Character('t');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2431788"
  },
  "test1521371" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521371() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1521371"
  },
  "test1521370" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521370() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1521370"
  },
  "test015163" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015163() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test015163"
  },
  "test1521368" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521368() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1521368"
  },
  "test1521369" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521369() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1521369"
  },
  "test015160" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015160() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test015160"
  },
  "test015162" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015162() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test015162"
  },
  "test015161" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015161() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test015161"
  },
  "test037367" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037367() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test037367"
  },
  "test037368" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037368() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test037368"
  },
  "test037365" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037365() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test037365"
  },
  "test037366" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037366() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test037366"
  },
  "test015157" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015157() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test015157"
  },
  "test1521366" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521366() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1521366"
  },
  "test015156" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015156() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test015156"
  },
  "test1521367" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521367() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1521367"
  },
  "test015159" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015159() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test015159"
  },
  "test037369" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037369() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test037369"
  },
  "test015158" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015158() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test015158"
  },
  "test1521365" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1521365() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('E');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1521365"
  },
  "test2221732" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2221732() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = cSVFormat0.getQuoteCharacter();\n}",
    "testName" : "test2221732"
  },
  "test015153" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015153() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test015153"
  },
  "test015152" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015152() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test015152"
  },
  "test037360" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037360() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test037360"
  },
  "test015155" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015155() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getNullString();\n}",
    "testName" : "test015155"
  },
  "test015154" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015154() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test015154"
  },
  "test037363" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037363() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test037363"
  },
  "test037364" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037364() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test037364"
  },
  "test037361" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037361() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test037361"
  },
  "test037362" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037362() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test037362"
  },
  "test037370" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037370() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test037370"
  },
  "test037371" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037371() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test037371"
  },
  "test037372" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037372() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test037372"
  },
  "test037373" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037373() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('^');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test037373"
  },
  "test041404" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041404() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test041404"
  },
  "test1931675" : {
    "methodSignature" : "public CSVFormat withEscape(final Character escape)",
    "methodName" : "withEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931675() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.withEscape(character0);\n}",
    "testName" : "test1931675"
  },
  "test041403" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041403() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test041403"
  },
  "test041406" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041406() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test041406"
  },
  "test041405" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041405() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test041405"
  },
  "test041400" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041400() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test041400"
  },
  "test041402" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041402() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test041402"
  },
  "test041401" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041401() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test041401"
  },
  "test2581856" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2581856() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    cSVFormat0.TDF.hashCode();\n}",
    "testName" : "test2581856"
  },
  "test1641476" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641476() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test1641476"
  },
  "test1641475" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641475() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1641475"
  },
  "test060561" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060561() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test060561"
  },
  "test2051695" : {
    "methodSignature" : "public void println(final Appendable out) throws IOException",
    "methodName" : "println",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2051695() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    cSVFormat0.println((Appendable) null);\n}",
    "testName" : "test2051695"
  },
  "test1641479" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641479() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);\n    cSVFormat4.equals((Object) cSVFormat1);\n}",
    "testName" : "test1641479"
  },
  "test1641478" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641478() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1641478"
  },
  "test1641477" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641477() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);\n    cSVFormat4.isQuoteCharacterSet();\n}",
    "testName" : "test1641477"
  },
  "test060560" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060560() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test060560"
  },
  "test1641483" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641483() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);\n    cSVFormat4.getAllowMissingColumnNames();\n}",
    "testName" : "test1641483"
  },
  "test1641482" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641482() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1641482"
  },
  "test1641481" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641481() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);\n    cSVFormat4.isNullStringSet();\n}",
    "testName" : "test1641481"
  },
  "test1641480" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641480() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test1641480"
  },
  "test1641485" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641485() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);\n    cSVFormat4.getTrim();\n}",
    "testName" : "test1641485"
  },
  "test1641484" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641484() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    CSVFormat cSVFormat3 = cSVFormat2.withAutoFlush(false);\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames(false);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1641484"
  },
  "test060559" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060559() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test060559"
  },
  "test060558" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060558() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test060558"
  },
  "test1331218" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331218() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('@');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1331218"
  },
  "test1331217" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331217() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('@');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1331217"
  },
  "test1331216" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331216() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('@');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1331216"
  },
  "test1331215" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331215() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('@');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1331215"
  },
  "test1331214" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331214() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('@');\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1331214"
  },
  "test1331213" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331213() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('@');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1331213"
  },
  "test1331212" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331212() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('@');\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test1331212"
  },
  "test1331211" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331211() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('@');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1331211"
  },
  "test048461" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048461() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('q');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test048461"
  },
  "test048462" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048462() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('q');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test048462"
  },
  "test048463" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048463() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('q');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test048463"
  },
  "test048464" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048464() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('q');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test048464"
  },
  "test048465" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048465() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('q');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test048465"
  },
  "test048466" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048466() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('q');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test048466"
  },
  "test048467" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048467() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('q');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test048467"
  },
  "test048468" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048468() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Character character0 = Character.valueOf('q');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test048468"
  },
  "test2111710" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2111710() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test2111710"
  },
  "test071669" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071669() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test071669"
  },
  "test2661922" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2661922() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2661922"
  },
  "test071668" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071668() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test071668"
  },
  "test1701537" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701537() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1701537"
  },
  "test2661920" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2661920() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2661920"
  },
  "test1701538" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701538() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1701538"
  },
  "test2661921" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2661921() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2661921"
  },
  "test1701539" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701539() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1701539"
  },
  "test108998" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108998() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test108998"
  },
  "test108997" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108997() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test108997"
  },
  "test108999" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108999() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test108999"
  },
  "test071670" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071670() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test071670"
  },
  "test1701540" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701540() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1701540"
  },
  "test1701541" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701541() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1701541"
  },
  "test108996" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108996() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test108996"
  },
  "test1701542" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701542() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1701542"
  },
  "test1701543" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701543() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1701543"
  },
  "test1701544" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701544() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1701544"
  },
  "test074700" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074700() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test074700"
  },
  "test1701545" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701545() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1701545"
  },
  "test1701546" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701546() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1701546"
  },
  "test059549" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059549() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test059549"
  },
  "test1701547" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701547() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1701547"
  },
  "test059548" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059548() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test059548"
  },
  "test059547" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059547() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test059547"
  },
  "test059546" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059546() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test059546"
  },
  "test059545" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059545() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.getNullString();\n}",
    "testName" : "test059545"
  },
  "test059544" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059544() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test059544"
  },
  "test059543" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059543() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test059543"
  },
  "test059542" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059542() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test059542"
  },
  "test071671" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071671() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test071671"
  },
  "test1271164" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271164() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test1271164"
  },
  "test1271165" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271165() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1271165"
  },
  "test1271162" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271162() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1271162"
  },
  "test1271163" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271163() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1271163"
  },
  "test1701548" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701548() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1701548"
  },
  "test1701549" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701549() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1701549"
  },
  "test2641900" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2641900() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('V');\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2641900"
  },
  "test1701550" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701550() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test1701550"
  },
  "test060555" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060555() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test060555"
  },
  "test060554" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060554() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test060554"
  },
  "test1271158" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271158() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1271158"
  },
  "test060557" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060557() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test060557"
  },
  "test060556" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060556() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test060556"
  },
  "test085813" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085813() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test085813"
  },
  "test085812" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085812() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test085812"
  },
  "test085811" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085811() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test085811"
  },
  "test1271159" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271159() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1271159"
  },
  "test085810" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085810() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test085810"
  },
  "test085809" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085809() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test085809"
  },
  "test085808" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085808() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test085808"
  },
  "test085807" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085807() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test085807"
  },
  "test085806" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085806() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test085806"
  },
  "test085805" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085805() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test085805"
  },
  "test082778" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082778() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test082778"
  },
  "test085804" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085804() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test085804"
  },
  "test082779" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082779() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test082779"
  },
  "test1271160" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271160() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1271160"
  },
  "test1271161" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1271161() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1271161"
  },
  "test059551" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059551() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test059551"
  },
  "test059550" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059550() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test059550"
  },
  "test2281738" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2281738() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2281738"
  },
  "test085815" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085815() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test085815"
  },
  "test085814" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085814() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withIgnoreHeaderCase(false);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test085814"
  },
  "test071667" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071667() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test071667"
  },
  "test2932101" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2932101() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\" SkipHeaderRecord:\", false);\n    cSVFormat0.POSTGRESQL_CSV.print((Appendable) mockFileWriter0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2932101"
  },
  "test071666" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071666() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test071666"
  },
  "test2932102" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2932102() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\" SkipHeaderRecord:\", false);\n    cSVFormat0.POSTGRESQL_CSV.print((Appendable) mockFileWriter0);\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2932102"
  },
  "test2932100" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2932100() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\" SkipHeaderRecord:\", false);\n    cSVFormat0.POSTGRESQL_CSV.print((Appendable) mockFileWriter0);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2932100"
  },
  "test2932105" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2932105() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\" SkipHeaderRecord:\", false);\n    cSVFormat0.POSTGRESQL_CSV.print((Appendable) mockFileWriter0);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2932105"
  },
  "test059553" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059553() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test059553"
  },
  "test2932103" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2932103() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\" SkipHeaderRecord:\", false);\n    cSVFormat0.POSTGRESQL_CSV.print((Appendable) mockFileWriter0);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2932103"
  },
  "test059552" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059552() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"z5kU\");\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test059552"
  },
  "test2932104" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2932104() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\" SkipHeaderRecord:\", false);\n    cSVFormat0.POSTGRESQL_CSV.print((Appendable) mockFileWriter0);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2932104"
  },
  "test1681521" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681521() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1681521"
  },
  "test1681522" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681522() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1681522"
  },
  "test1681523" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681523() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1681523"
  },
  "test1681524" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681524() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1681524"
  },
  "test1681529" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681529() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1681529"
  },
  "test1681525" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681525() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1681525"
  },
  "test1621459" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621459() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1621459"
  },
  "test1681526" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681526() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1681526"
  },
  "test1621458" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621458() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1621458"
  },
  "test1681527" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681527() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1681527"
  },
  "test1681528" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681528() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1681528"
  },
  "test018191" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018191() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test018191"
  },
  "test1621463" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621463() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1621463"
  },
  "test018190" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018190() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test018190"
  },
  "test1621462" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621462() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1621462"
  },
  "test1621461" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621461() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1621461"
  },
  "test1621460" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621460() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1621460"
  },
  "test022227" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022227() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(false);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test022227"
  },
  "test022229" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022229() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test022229"
  },
  "test022228" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022228() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test022228"
  },
  "test1681530" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681530() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1681530"
  },
  "test082776" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082776() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test082776"
  },
  "test082777" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082777() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test082777"
  },
  "test082774" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082774() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test082774"
  },
  "test082775" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082775() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test082775"
  },
  "test022230" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022230() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test022230"
  },
  "test022232" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022232() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test022232"
  },
  "test022231" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022231() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test022231"
  },
  "test1351239" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351239() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1351239"
  },
  "test1351234" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351234() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1351234"
  },
  "test1351233" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351233() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1351233"
  },
  "test018188" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018188() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test018188"
  },
  "test1351232" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351232() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1351232"
  },
  "test018189" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018189() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test018189"
  },
  "test1351231" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351231() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1351231"
  },
  "test018186" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018186() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test018186"
  },
  "test1351238" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351238() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1351238"
  },
  "test018187" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018187() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test018187"
  },
  "test1351237" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351237() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1351237"
  },
  "test1351236" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351236() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1351236"
  },
  "test018185" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018185() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test018185"
  },
  "test1351235" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351235() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1351235"
  },
  "test096906" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096906() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    String[] stringArray0 = new String[4];\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test096906"
  },
  "test096904" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096904() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    String[] stringArray0 = new String[4];\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test096904"
  },
  "test1351230" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351230() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('');\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1351230"
  },
  "test096905" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096905() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    String[] stringArray0 = new String[4];\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test096905"
  },
  "test096902" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096902() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    String[] stringArray0 = new String[4];\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test096902"
  },
  "test096903" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096903() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    String[] stringArray0 = new String[4];\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test096903"
  },
  "test1351229" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1351229() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1351229"
  },
  "test093884" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093884() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test093884"
  },
  "test093885" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093885() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test093885"
  },
  "test093886" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093886() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test093886"
  },
  "test093881" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093881() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test093881"
  },
  "test093882" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093882() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test093882"
  },
  "test093883" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093883() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('6');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test093883"
  },
  "test2661917" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2661917() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2661917"
  },
  "test2661918" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2661918() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test2661918"
  },
  "test2661915" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2661915() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2661915"
  },
  "test2661916" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2661916() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2661916"
  },
  "test2661913" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2661913() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2661913"
  },
  "test2661914" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2661914() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test2661914"
  },
  "test1561399" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561399() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1561399"
  },
  "test1561398" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561398() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1561398"
  },
  "test1561397" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561397() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1561397"
  },
  "test096900" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096900() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    String[] stringArray0 = new String[4];\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test096900"
  },
  "test2471800" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2471800() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('-');\n    Object[] objectArray0 = new Object[7];\n    objectArray0[5] = (Object) \"?NQFsN1r T~3cg-`$L-\";\n    String string0 = cSVFormat1.format(objectArray0);\n}",
    "testName" : "test2471800"
  },
  "test096901" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096901() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    String[] stringArray0 = new String[4];\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test096901"
  },
  "test2471801" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2471801() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('-');\n    Object[] objectArray0 = new Object[7];\n    objectArray0[5] = (Object) \"?NQFsN1r T~3cg-`$L-\";\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2471801"
  },
  "test1291186" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291186() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1291186"
  },
  "test1291187" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291187() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1291187"
  },
  "test1291184" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291184() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test1291184"
  },
  "test1291185" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291185() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1291185"
  },
  "test1291182" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291182() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1291182"
  },
  "test2471802" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2471802() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('-');\n    Object[] objectArray0 = new Object[7];\n    objectArray0[5] = (Object) \"?NQFsN1r T~3cg-`$L-\";\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2471802"
  },
  "test2661919" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2661919() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2661919"
  },
  "test1291183" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291183() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1291183"
  },
  "test029290" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029290() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"8B*TG]t!VT\");\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test029290"
  },
  "test1081000" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081000() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1081000"
  },
  "test1291180" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291180() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1291180"
  },
  "test2681933" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681933() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2681933"
  },
  "test029291" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029291() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"8B*TG]t!VT\");\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test029291"
  },
  "test1081001" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1081001() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1081001"
  },
  "test1291181" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291181() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1291181"
  },
  "test2681934" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681934() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2681934"
  },
  "test029292" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029292() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"8B*TG]t!VT\");\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test029292"
  },
  "test2601860" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601860() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);\n    cSVFormat1.printer();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2601860"
  },
  "test029293" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029293() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"8B*TG]t!VT\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test029293"
  },
  "test2681932" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681932() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2681932"
  },
  "test2601862" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601862() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);\n    cSVFormat1.printer();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2601862"
  },
  "test2681937" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681937() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2681937"
  },
  "test2601861" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601861() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);\n    cSVFormat1.printer();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2601861"
  },
  "test2681938" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681938() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test2681938"
  },
  "test2601864" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601864() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);\n    cSVFormat1.printer();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2601864"
  },
  "test2681935" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681935() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2681935"
  },
  "test2601863" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601863() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);\n    cSVFormat1.printer();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2601863"
  },
  "test2681936" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681936() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2681936"
  },
  "test029298" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029298() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"8B*TG]t!VT\");\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test029298"
  },
  "test029299" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029299() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"8B*TG]t!VT\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test029299"
  },
  "test029294" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029294() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"8B*TG]t!VT\");\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test029294"
  },
  "test1561396" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561396() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1561396"
  },
  "test029295" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029295() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"8B*TG]t!VT\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test029295"
  },
  "test1561395" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561395() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1561395"
  },
  "test029296" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029296() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"8B*TG]t!VT\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test029296"
  },
  "test1561394" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561394() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1561394"
  },
  "test029297" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029297() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"8B*TG]t!VT\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test029297"
  },
  "test2852030" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2852030() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    PipedReader pipedReader0 = new PipedReader();\n    cSVFormat1.parse(pipedReader0);\n}",
    "testName" : "test2852030"
  },
  "test1291179" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291179() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test1291179"
  },
  "test2261736" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2261736() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2261736"
  },
  "test2872045" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2872045() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2872045"
  },
  "test1291178" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1291178() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = new Character('a');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1291178"
  },
  "test2872046" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2872046() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test2872046"
  },
  "test2681939" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681939() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2681939"
  },
  "test2601859" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601859() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);\n    cSVFormat1.printer();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2601859"
  },
  "test2601858" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601858() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);\n    cSVFormat1.printer();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2601858"
  },
  "test011111" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test011111"
  },
  "test1331210" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1331210() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('@');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1331210"
  },
  "test011110" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011110() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test011110"
  },
  "test011115" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011115() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test011115"
  },
  "test033321" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033321() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test033321"
  },
  "test2872049" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2872049() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2872049"
  },
  "test011114" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011114() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test011114"
  },
  "test033322" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033322() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test033322"
  },
  "test011113" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011113() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test011113"
  },
  "test033323" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033323() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test033323"
  },
  "test2872047" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2872047() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2872047"
  },
  "test011112" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test011112"
  },
  "test033324" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033324() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test033324"
  },
  "test2872048" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2872048() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2872048"
  },
  "test033325" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033325() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test033325"
  },
  "test011118" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011118() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test011118"
  },
  "test033326" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033326() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test033326"
  },
  "test011117" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011117() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test011117"
  },
  "test033327" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033327() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test033327"
  },
  "test011116" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011116() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test011116"
  },
  "test033328" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033328() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test033328"
  },
  "test033329" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033329() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test033329"
  },
  "test2872052" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2872052() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2872052"
  },
  "test2872053" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2872053() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2872053"
  },
  "test2872050" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2872050() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2872050"
  },
  "test2872051" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2872051() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('1');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2872051"
  },
  "test033330" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033330() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test033330"
  },
  "test033331" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033331() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test033331"
  },
  "test033332" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033332() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test033332"
  },
  "test033333" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033333() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('x');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test033333"
  },
  "test011109" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011109() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test011109"
  },
  "test2681942" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681942() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2681942"
  },
  "test2681943" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681943() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2681943"
  },
  "test2681940" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681940() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2681940"
  },
  "test2681941" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2681941() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"org.apache.commons.csv.Token$Type\";\n    stringArray0[1] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2681941"
  },
  "test2601866" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601866() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);\n    cSVFormat1.printer();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2601866"
  },
  "test2601865" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601865() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);\n    cSVFormat1.printer();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2601865"
  },
  "test2601868" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601868() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);\n    cSVFormat1.printer();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2601868"
  },
  "test2601867" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2601867() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withHeaderComments(objectArray0);\n    cSVFormat1.printer();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2601867"
  },
  "test2822018" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2822018() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('=');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2822018"
  },
  "test2822017" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2822017() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('=');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2822017"
  },
  "test1371256" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371256() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1371256"
  },
  "test1371255" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371255() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1371255"
  },
  "test1371254" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371254() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1371254"
  },
  "test1371253" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371253() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1371253"
  },
  "test1371252" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371252() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1371252"
  },
  "test1371251" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371251() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1371251"
  },
  "test00121" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00121() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrim(false);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test00121"
  },
  "test00122" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00122() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrim(false);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test00122"
  },
  "test00120" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00120() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrim(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00120"
  },
  "test00114" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00114() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrim(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00114"
  },
  "test00115" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00115() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrim(false);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test00115"
  },
  "test00112" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrim(false);\n    cSVFormat1.getNullString();\n}",
    "testName" : "test00112"
  },
  "test00113" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00113() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrim(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00113"
  },
  "test00118" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00118() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrim(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test00118"
  },
  "test00119" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00119() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrim(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test00119"
  },
  "test00116" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00116() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrim(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00116"
  },
  "test00117" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00117() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withTrim(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test00117"
  },
  "test044428" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044428() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test044428"
  },
  "test044429" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044429() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test044429"
  },
  "test1761585" : {
    "methodSignature" : "public CSVPrinter print(final File out, final Charset charset) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1761585() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    MockFile mockFile0 = new MockFile(\"$VALUES\", \"Escape=<\");\n    Charset charset0 = Charset.defaultCharset();\n    CSVPrinter cSVPrinter0 = cSVFormat0.print((File) mockFile0, charset0);\n}",
    "testName" : "test1761585"
  },
  "test044426" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044426() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getTrim();\n}",
    "testName" : "test044426"
  },
  "test041399" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041399() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test041399"
  },
  "test044427" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044427() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test044427"
  },
  "test044425" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044425() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test044425"
  },
  "test041398" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041398() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test041398"
  },
  "test041397" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041397() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test041397"
  },
  "test2711960" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711960() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2711960"
  },
  "test2711961" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711961() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test2711961"
  },
  "test2822027" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2822027() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('=');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2822027"
  },
  "test2822026" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2822026() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('=');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2822026"
  },
  "test2822025" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2822025() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('=');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2822025"
  },
  "test2822024" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2822024() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('=');\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test2822024"
  },
  "test2822023" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2822023() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('=');\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test2822023"
  },
  "test2822022" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2822022() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('=');\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test2822022"
  },
  "test2822021" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2822021() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('=');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2822021"
  },
  "test2822020" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2822020() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('=');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2822020"
  },
  "test044431" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044431() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test044431"
  },
  "test044432" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044432() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test044432"
  },
  "test044430" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044430() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Character character0 = new Character('c');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    CSVFormat cSVFormat3 = cSVFormat2.withSkipHeaderRecord();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test044430"
  },
  "test1311196" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311196() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1311196"
  },
  "test2711957" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711957() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2711957"
  },
  "test1311197" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311197() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1311197"
  },
  "test2711958" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711958() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2711958"
  },
  "test1311194" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311194() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1311194"
  },
  "test2711959" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2711959() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(false);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2711959"
  },
  "test1311195" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311195() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1311195"
  },
  "test1311198" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311198() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1311198"
  },
  "test1311199" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1311199() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Character character0 = new Character('^');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1311199"
  },
  "test2822019" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2822019() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.POSTGRESQL_CSV.withQuote('=');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2822019"
  },
  "test1221111" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1221111"
  },
  "test1891660" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891660() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1891660"
  },
  "test1671512" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671512() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1671512"
  },
  "test1671511" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671511() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1671511"
  },
  "test1671514" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671514() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1671514"
  },
  "test1891659" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891659() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1891659"
  },
  "test1671513" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671513() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1671513"
  },
  "test1891658" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891658() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1891658"
  },
  "test2471797" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2471797() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('-');\n    Object[] objectArray0 = new Object[7];\n    objectArray0[5] = (Object) \"?NQFsN1r T~3cg-`$L-\";\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2471797"
  },
  "test1671510" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671510() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1671510"
  },
  "test1671519" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671519() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1671519"
  },
  "test2471798" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2471798() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('-');\n    Object[] objectArray0 = new Object[7];\n    objectArray0[5] = (Object) \"?NQFsN1r T~3cg-`$L-\";\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2471798"
  },
  "test2471799" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2471799() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('-');\n    Object[] objectArray0 = new Object[7];\n    objectArray0[5] = (Object) \"?NQFsN1r T~3cg-`$L-\";\n    String string0 = cSVFormat1.format(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2471799"
  },
  "test1671516" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671516() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1671516"
  },
  "test1891657" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891657() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1891657"
  },
  "test1671515" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671515() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1671515"
  },
  "test1891656" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891656() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1891656"
  },
  "test1671518" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671518() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1671518"
  },
  "test1891655" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891655() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1891655"
  },
  "test1671517" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671517() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1671517"
  },
  "test1891654" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891654() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1891654"
  },
  "test1221120" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221120() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1221120"
  },
  "test1221121" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221121() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1221121"
  },
  "test1221122" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221122() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1221122"
  },
  "test2912091" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912091() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test2912091"
  },
  "test2912092" : {
    "methodSignature" : "public boolean isCommentMarkerSet()",
    "methodName" : "isCommentMarkerSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912092() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.isCommentMarkerSet();\n}",
    "testName" : "test2912092"
  },
  "test2912090" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912090() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test2912090"
  },
  "test00554" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00554() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00554"
  },
  "test00555" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00555() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00555"
  },
  "test00552" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00552() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00552"
  },
  "test00553" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00553() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test00553"
  },
  "test00558" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00558() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test00558"
  },
  "test2912095" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912095() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test2912095"
  },
  "test00556" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00556() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00556"
  },
  "test2912093" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912093() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test2912093"
  },
  "test00557" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00557() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test00557"
  },
  "test2912094" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912094() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test2912094"
  },
  "test1221116" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221116() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1221116"
  },
  "test1671509" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671509() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1671509"
  },
  "test1221117" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221117() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1221117"
  },
  "test1671508" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671508() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1671508"
  },
  "test1221118" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221118() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1221118"
  },
  "test1221119" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221119() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1221119"
  },
  "test1221112" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1221112"
  },
  "test1221113" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221113() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1221113"
  },
  "test1221114" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221114() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1221114"
  },
  "test1671507" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671507() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1671507"
  },
  "test1221115" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1221115() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1221115"
  },
  "test1671506" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671506() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1671506"
  },
  "test00550" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00550() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00550"
  },
  "test00551" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00551() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test00551"
  },
  "test2912088" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912088() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test2912088"
  },
  "test2912089" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912089() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test2912089"
  },
  "test2912086" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912086() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test2912086"
  },
  "test2912087" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912087() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test2912087"
  },
  "test052498" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052498() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test052498"
  },
  "test2912084" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912084() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2912084"
  },
  "test2912085" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912085() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2912085"
  },
  "test2912083" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2912083() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('y');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"\";\n    stringArray0[1] = \"?+b\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test2912083"
  },
  "test052494" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052494() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test052494"
  },
  "test052495" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052495() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test052495"
  },
  "test00549" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00549() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00549"
  },
  "test052496" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052496() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test052496"
  },
  "test052497" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052497() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test052497"
  },
  "test052492" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052492() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test052492"
  },
  "test052493" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052493() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('E');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test052493"
  },
  "test1371250" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371250() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1371250"
  },
  "test055509" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055509() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"VV0P[AFUSpAi`\");\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test055509"
  },
  "test1371247" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371247() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1371247"
  },
  "test1371246" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371246() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1371246"
  },
  "test055513" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055513() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"VV0P[AFUSpAi`\");\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test055513"
  },
  "test055512" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055512() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"VV0P[AFUSpAi`\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test055512"
  },
  "test055514" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055514() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"VV0P[AFUSpAi`\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test055514"
  },
  "test1671520" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671520() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1671520"
  },
  "test1891664" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891664() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n}",
    "testName" : "test1891664"
  },
  "test1891663" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891663() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1891663"
  },
  "test055511" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055511() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"VV0P[AFUSpAi`\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test055511"
  },
  "test1891662" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891662() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1891662"
  },
  "test055510" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055510() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"VV0P[AFUSpAi`\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test055510"
  },
  "test1891661" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891661() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1891661"
  },
  "test1371249" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371249() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1371249"
  },
  "test1891666" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891666() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1891666"
  },
  "test1371248" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1371248() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('K');\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1371248"
  },
  "test1891665" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891665() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker('W');\n    Character character0 = cSVFormat1.getCommentMarker();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1891665"
  },
  "test077729" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077729() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test077729"
  },
  "test1391263" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1391263() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('E');\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test1391263"
  },
  "test1391267" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1391267() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('E');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1391267"
  },
  "test1391266" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1391266() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('E');\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1391266"
  },
  "test1391265" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1391265() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('E');\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1391265"
  },
  "test2802010" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2802010() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2802010"
  },
  "test1391264" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1391264() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('E');\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1391264"
  },
  "test014151" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014151() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test014151"
  },
  "test077730" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077730() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test077730"
  },
  "test2952107" : {
    "methodSignature" : "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2952107() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    char[] charArray0 = new char[2];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    cSVFormat0.print((Object) charBuffer0, (Appendable) charBuffer0, false);\n}",
    "testName" : "test2952107"
  },
  "test077731" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077731() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test077731"
  },
  "test014150" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014150() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test014150"
  },
  "test014148" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014148() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test014148"
  },
  "test014149" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014149() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test014149"
  },
  "test014144" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014144() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test014144"
  },
  "test014145" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014145() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test014145"
  },
  "test014146" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014146() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test014146"
  },
  "test014147" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014147() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test014147"
  },
  "test014143" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014143() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test014143"
  },
  "test063588" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063588() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test063588"
  },
  "test066614" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066614() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');\n    CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();\n    CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();\n    cSVFormat5.getIgnoreHeaderCase();\n}",
    "testName" : "test066614"
  },
  "test088843" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088843() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test088843"
  },
  "test101945" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101945() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test101945"
  },
  "test066613" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066613() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');\n    CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();\n    CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();\n    cSVFormat5.getEscapeCharacter();\n}",
    "testName" : "test066613"
  },
  "test088842" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088842() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test088842"
  },
  "test101946" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101946() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test101946"
  },
  "test063586" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063586() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test063586"
  },
  "test066612" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066612() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');\n    CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();\n    CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();\n    cSVFormat4.equals((Object) cSVFormat3);\n}",
    "testName" : "test066612"
  },
  "test101943" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101943() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test101943"
  },
  "test063587" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063587() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test063587"
  },
  "test066611" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066611() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');\n    CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();\n    CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();\n    cSVFormat5.equals((Object) cSVFormat4);\n}",
    "testName" : "test066611"
  },
  "test101944" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101944() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test101944"
  },
  "test066618" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066618() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');\n    CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();\n    CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test066618"
  },
  "test066617" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066617() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');\n    CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();\n    CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();\n    cSVFormat5.getAllowMissingColumnNames();\n}",
    "testName" : "test066617"
  },
  "test066616" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066616() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');\n    CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();\n    CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();\n    cSVFormat5.getTrim();\n}",
    "testName" : "test066616"
  },
  "test066615" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066615() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');\n    CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();\n    CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();\n    cSVFormat5.getTrailingDelimiter();\n}",
    "testName" : "test066615"
  },
  "test063584" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063584() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test063584"
  },
  "test066610" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066610() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape('9');\n    CSVFormat cSVFormat4 = cSVFormat3.withIgnoreEmptyLines();\n    CSVFormat cSVFormat5 = cSVFormat4.withIgnoreSurroundingSpaces();\n    cSVFormat5.getAutoFlush();\n}",
    "testName" : "test066610"
  },
  "test101941" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101941() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test101941"
  },
  "test063585" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063585() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test063585"
  },
  "test101942" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101942() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test101942"
  },
  "test063582" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063582() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test063582"
  },
  "test088841" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088841() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test088841"
  },
  "test063583" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063583() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test063583"
  },
  "test088840" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088840() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test088840"
  },
  "test2291739" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2291739() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    boolean boolean0 = cSVFormat0.getAutoFlush();\n}",
    "testName" : "test2291739"
  },
  "test088839" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088839() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test088839"
  },
  "test1741583" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1741583() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"TDF\");\n    cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test1741583"
  },
  "test074697" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074697() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test074697"
  },
  "test077723" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077723() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test077723"
  },
  "test074696" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074696() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test074696"
  },
  "test077724" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077724() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test077724"
  },
  "test074699" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074699() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test074699"
  },
  "test074698" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074698() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test074698"
  },
  "test077727" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077727() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test077727"
  },
  "test077728" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077728() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test077728"
  },
  "test077725" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077725() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test077725"
  },
  "test077726" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077726() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test077726"
  },
  "test074691" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074691() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test074691"
  },
  "test074693" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074693() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test074693"
  },
  "test074692" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074692() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test074692"
  },
  "test074695" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074695() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test074695"
  },
  "test074694" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074694() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test074694"
  },
  "test025257" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025257() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test025257"
  },
  "test025256" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025256() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test025256"
  },
  "test025259" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025259() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test025259"
  },
  "test025258" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025258() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test025258"
  },
  "test1871645" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1871645() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test1871645"
  },
  "test088832" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088832() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test088832"
  },
  "test2381766" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381766() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[1];\n    Object object0 = new Object();\n    objectArray0[0] = object0;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2381766"
  },
  "test088831" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088831() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test088831"
  },
  "test2381765" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381765() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[1];\n    Object object0 = new Object();\n    objectArray0[0] = object0;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2381765"
  },
  "test088834" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088834() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test088834"
  },
  "test2381764" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381764() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[1];\n    Object object0 = new Object();\n    objectArray0[0] = object0;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2381764"
  },
  "test088833" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088833() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test088833"
  },
  "test2381763" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381763() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[1];\n    Object object0 = new Object();\n    objectArray0[0] = object0;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2381763"
  },
  "test088836" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088836() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test088836"
  },
  "test088835" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088835() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test088835"
  },
  "test088838" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088838() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test088838"
  },
  "test088837" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088837() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test088837"
  },
  "test025260" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025260() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test025260"
  },
  "test2381762" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381762() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[1];\n    Object object0 = new Object();\n    objectArray0[0] = object0;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2381762"
  },
  "test025263" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025263() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test025263"
  },
  "test2381761" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2381761() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[1];\n    Object object0 = new Object();\n    objectArray0[0] = object0;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2381761"
  },
  "test025262" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025262() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test025262"
  },
  "test088830" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088830() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test088830"
  },
  "test025261" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025261() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test025261"
  },
  "test2451795" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2451795() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    String[] stringArray0 = new String[8];\n    stringArray0[1] = \"' in \";\n    String string0 = cSVFormat0.format(stringArray0);\n}",
    "testName" : "test2451795"
  },
  "test088829" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088829() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test088829"
  },
  "test088828" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088828() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = new Character('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getNullString();\n}",
    "testName" : "test088828"
  },
  "test1721568" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721568() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1721568"
  },
  "test1241140" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241140() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1241140"
  },
  "test1721569" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721569() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat4.getAutoFlush();\n}",
    "testName" : "test1721569"
  },
  "test1241141" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241141() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1241141"
  },
  "test1721570" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721570() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1721570"
  },
  "test1241132" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241132() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1241132"
  },
  "test1241133" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241133() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1241133"
  },
  "test1241134" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241134() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test1241134"
  },
  "test1241135" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241135() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1241135"
  },
  "test1241136" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241136() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getNullString();\n}",
    "testName" : "test1241136"
  },
  "test1721571" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721571() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat4.getTrim();\n}",
    "testName" : "test1721571"
  },
  "test1241137" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241137() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1241137"
  },
  "test1721572" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721572() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1721572"
  },
  "test1241138" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241138() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1241138"
  },
  "test1241139" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241139() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1241139"
  },
  "test099929" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099929() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test099929"
  },
  "test099928" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099928() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test099928"
  },
  "test099927" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099927() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test099927"
  },
  "test1241131" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1241131() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1241131"
  },
  "test1721564" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721564() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat4.getAllowMissingColumnNames();\n}",
    "testName" : "test1721564"
  },
  "test1721565" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721565() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test1721565"
  },
  "test1721566" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721566() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat4.equals((Object) cSVFormat2);\n}",
    "testName" : "test1721566"
  },
  "test1721567" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721567() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat4.getRecordSeparator();\n}",
    "testName" : "test1721567"
  },
  "test099932" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099932() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test099932"
  },
  "test099931" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099931() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test099931"
  },
  "test099930" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099930() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    Object[] objectArray0 = new Object[5];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test099930"
  },
  "test1721563" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721563() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines();\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1721563"
  },
  "test036349" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036349() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test036349"
  },
  "test036348" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036348() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test036348"
  },
  "test1421290" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421290() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('X');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1421290"
  },
  "test1421292" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421292() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('X');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1421292"
  },
  "test1421291" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421291() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('X');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1421291"
  },
  "test096898" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096898() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    String[] stringArray0 = new String[4];\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test096898"
  },
  "test096899" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096899() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    String[] stringArray0 = new String[4];\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test096899"
  },
  "test1481340" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481340() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"\\\" in \");\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1481340"
  },
  "test1421293" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421293() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('X');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1421293"
  },
  "test036354" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036354() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test036354"
  },
  "test036353" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036353() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test036353"
  },
  "test036356" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036356() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test036356"
  },
  "test036355" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036355() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test036355"
  },
  "test036358" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036358() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test036358"
  },
  "test036357" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036357() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test036357"
  },
  "test036359" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036359() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test036359"
  },
  "test036350" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036350() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test036350"
  },
  "test036352" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036352() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test036352"
  },
  "test036351" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036351() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('_');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test036351"
  },
  "test2201730" : {
    "methodSignature" : "public QuoteMode getQuoteMode()",
    "methodName" : "getQuoteMode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2201730() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    cSVFormat0.getQuoteMode();\n}",
    "testName" : "test2201730"
  },
  "test2181720" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181720() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2181720"
  },
  "test2181723" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181723() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2181723"
  },
  "test2181724" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181724() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2181724"
  },
  "test2181721" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181721() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2181721"
  },
  "test2181722" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181722() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2181722"
  },
  "test2181727" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181727() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2181727"
  },
  "test2181728" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181728() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2181728"
  },
  "test2181725" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181725() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2181725"
  },
  "test2181726" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181726() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2181726"
  },
  "test1941676" : {
    "methodSignature" : "public CSVFormat withDelimiter(final char delimiter)",
    "methodName" : "withDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1941676() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.withDelimiter('r');\n}",
    "testName" : "test1941676"
  },
  "test2361759" : {
    "methodSignature" : "public CSVFormat withEscape(final char escape)",
    "methodName" : "withEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2361759() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('v');\n    cSVFormat0.withEscape('v');\n}",
    "testName" : "test2361759"
  },
  "test1481338" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481338() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"\\\" in \");\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1481338"
  },
  "test1481339" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481339() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"\\\" in \");\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test1481339"
  },
  "test2181717" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181717() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2181717"
  },
  "test1481336" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481336() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"\\\" in \");\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test1481336"
  },
  "test1481337" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481337() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"\\\" in \");\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1481337"
  },
  "test2181718" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181718() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2181718"
  },
  "test2181719" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2181719() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getHeader();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2181719"
  },
  "test1481335" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1481335() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"\\\" in \");\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1481335"
  },
  "test1851643" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1851643() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test1851643"
  },
  "test1111021" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111021() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1111021"
  },
  "test1111020" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111020() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test1111020"
  },
  "test2511810" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511810() throws Throwable {\n    CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    cSVFormat0.format(cSVFormat_PredefinedArray0);\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2511810"
  },
  "test2511811" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511811() throws Throwable {\n    CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    cSVFormat0.format(cSVFormat_PredefinedArray0);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2511811"
  },
  "test2511814" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511814() throws Throwable {\n    CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    cSVFormat0.format(cSVFormat_PredefinedArray0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2511814"
  },
  "test2511815" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511815() throws Throwable {\n    CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    cSVFormat0.format(cSVFormat_PredefinedArray0);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2511815"
  },
  "test2511812" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511812() throws Throwable {\n    CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    cSVFormat0.format(cSVFormat_PredefinedArray0);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2511812"
  },
  "test2511813" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511813() throws Throwable {\n    CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    cSVFormat0.format(cSVFormat_PredefinedArray0);\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2511813"
  },
  "test1111016" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111016() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1111016"
  },
  "test1181083" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181083() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1181083"
  },
  "test1111018" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111018() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1111018"
  },
  "test1111017" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111017() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test1111017"
  },
  "test1111019" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111019() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1111019"
  },
  "test1181082" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181082() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1181082"
  },
  "test1181081" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181081() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1181081"
  },
  "test2731970" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731970() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test2731970"
  },
  "test1181080" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181080() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1181080"
  },
  "test2731971" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731971() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2731971"
  },
  "test2731972" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731972() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2731972"
  },
  "test1181075" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181075() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1181075"
  },
  "test1181074" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181074() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1181074"
  },
  "test2731963" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731963() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2731963"
  },
  "test1181073" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181073() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1181073"
  },
  "test2731964" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731964() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2731964"
  },
  "test1181072" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181072() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1181072"
  },
  "test2731965" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731965() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2731965"
  },
  "test1181079" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181079() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1181079"
  },
  "test2731966" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731966() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2731966"
  },
  "test1181078" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181078() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1181078"
  },
  "test2731967" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731967() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2731967"
  },
  "test1181077" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181077() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1181077"
  },
  "test2731968" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731968() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2731968"
  },
  "test1181076" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1181076() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1181076"
  },
  "test2731969" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731969() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2731969"
  },
  "test1961678" : {
    "methodSignature" : "public void printRecord(final Appendable out, final Object... values) throws IOException",
    "methodName" : "printRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961678() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CharArrayWriter charArrayWriter0 = new CharArrayWriter();\n    cSVFormat0.DEFAULT.printRecord(charArrayWriter0, (Object[]) null);\n}",
    "testName" : "test1961678"
  },
  "test047460" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047460() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test047460"
  },
  "test1561400" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561400() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1561400"
  },
  "test1561404" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561404() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1561404"
  },
  "test1561403" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561403() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1561403"
  },
  "test1561402" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561402() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1561402"
  },
  "test1561401" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561401() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1561401"
  },
  "test1561408" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561408() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1561408"
  },
  "test2731973" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731973() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2731973"
  },
  "test1561407" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561407() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1561407"
  },
  "test2731974" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2731974() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('@');\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2731974"
  },
  "test1561406" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561406() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1561406"
  },
  "test1561405" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1561405() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1561405"
  },
  "test047451" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047451() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test047451"
  },
  "test047452" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047452() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test047452"
  },
  "test047453" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047453() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test047453"
  },
  "test047454" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047454() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test047454"
  },
  "test047455" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047455() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test047455"
  },
  "test047456" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047456() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test047456"
  },
  "test047457" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047457() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test047457"
  },
  "test047458" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047458() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test047458"
  },
  "test047459" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047459() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test047459"
  },
  "test070659" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070659() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test070659"
  },
  "test070658" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070658() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat3.getQuoteCharacter();\n}",
    "testName" : "test070658"
  },
  "test070657" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070657() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test070657"
  },
  "test070656" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070656() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test070656"
  },
  "test058539" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058539() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test058539"
  },
  "test058537" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058537() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test058537"
  },
  "test058538" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058538() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test058538"
  },
  "test058536" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058536() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test058536"
  },
  "test070665" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070665() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test070665"
  },
  "test070664" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070664() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test070664"
  },
  "test070663" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070663() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test070663"
  },
  "test070662" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070662() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test070662"
  },
  "test070661" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070661() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test070661"
  },
  "test070660" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070660() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test070660"
  },
  "test1801612" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801612() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('o');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1801612"
  },
  "test1801611" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801611() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('o');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1801611"
  },
  "test1801614" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801614() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('o');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test1801614"
  },
  "test1801613" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801613() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('o');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getTrim();\n}",
    "testName" : "test1801613"
  },
  "test010102" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010102() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test010102"
  },
  "test010103" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010103() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test010103"
  },
  "test010100" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010100() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test010100"
  },
  "test1801610" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801610() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('o');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test1801610"
  },
  "test010101" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010101() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test010101"
  },
  "test010106" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010106() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test010106"
  },
  "test105975" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105975() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test105975"
  },
  "test010107" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010107() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test010107"
  },
  "test105974" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105974() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test105974"
  },
  "test010104" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010104() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test010104"
  },
  "test105973" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105973() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test105973"
  },
  "test010105" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010105() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test010105"
  },
  "test105972" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105972() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test105972"
  },
  "test069651" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069651() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test069651"
  },
  "test105979" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105979() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test105979"
  },
  "test069650" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069650() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test069650"
  },
  "test105978" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105978() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test105978"
  },
  "test010108" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010108() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('Z');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withTrailingDelimiter(false);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test010108"
  },
  "test069653" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069653() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test069653"
  },
  "test105977" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105977() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test105977"
  },
  "test069652" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069652() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test069652"
  },
  "test105976" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105976() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test105976"
  },
  "test00994" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00994() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test00994"
  },
  "test1401274" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401274() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1401274"
  },
  "test00995" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00995() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00995"
  },
  "test1401273" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401273() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1401273"
  },
  "test00992" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00992() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00992"
  },
  "test1401276" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401276() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1401276"
  },
  "test00993" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00993() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test00993"
  },
  "test1401275" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401275() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1401275"
  },
  "test00998" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00998() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00998"
  },
  "test105971" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105971() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test105971"
  },
  "test00999" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00999() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test00999"
  },
  "test105970" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105970() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test105970"
  },
  "test1401277" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401277() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test1401277"
  },
  "test00996" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00996() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00996"
  },
  "test00997" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00997() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00997"
  },
  "test1781595" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781595() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String string0 = cSVFormat0.getRecordSeparator();\n}",
    "testName" : "test1781595"
  },
  "test1801609" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801609() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('o');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test1801609"
  },
  "test1801608" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801608() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('o');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test1801608"
  },
  "test1401270" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401270() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1401270"
  },
  "test1401272" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401272() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1401272"
  },
  "test1801607" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801607() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('o');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test1801607"
  },
  "test1401271" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401271() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1401271"
  },
  "test1161062" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161062() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1161062"
  },
  "test1161061" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161061() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1161061"
  },
  "test1161060" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161060() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1161060"
  },
  "test084801" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084801() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test084801"
  },
  "test081773" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081773() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test081773"
  },
  "test084800" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084800() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test084800"
  },
  "test00990" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00990() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test00990"
  },
  "test081770" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081770() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test081770"
  },
  "test00991" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00991() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00991"
  },
  "test081772" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081772() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test081772"
  },
  "test081771" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081771() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test081771"
  },
  "test2771992" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771992() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2771992"
  },
  "test2771991" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771991() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test2771991"
  },
  "test2771994" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771994() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2771994"
  },
  "test2771993" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771993() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2771993"
  },
  "test081767" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081767() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test081767"
  },
  "test2771996" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771996() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2771996"
  },
  "test2932097" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2932097() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\" SkipHeaderRecord:\", false);\n    cSVFormat0.POSTGRESQL_CSV.print((Appendable) mockFileWriter0);\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test2932097"
  },
  "test081766" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081766() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test081766"
  },
  "test2771995" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771995() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2771995"
  },
  "test2932098" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2932098() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\" SkipHeaderRecord:\", false);\n    cSVFormat0.POSTGRESQL_CSV.print((Appendable) mockFileWriter0);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2932098"
  },
  "test081769" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081769() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test081769"
  },
  "test105980" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105980() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('Y');\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test105980"
  },
  "test1401269" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401269() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1401269"
  },
  "test2771998" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771998() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2771998"
  },
  "test081768" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081768() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test081768"
  },
  "test1401268" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1401268() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('+');\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test1401268"
  },
  "test2771997" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2771997() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2771997"
  },
  "test1161059" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161059() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1161059"
  },
  "test00989" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00989() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00989"
  },
  "test2341757" : {
    "methodSignature" : "public CSVFormat withCommentMarker(final Character commentMarker)",
    "methodName" : "withCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2341757() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('K');\n    Character character0 = Character.valueOf('K');\n    cSVFormat1.withCommentMarker(character0);\n}",
    "testName" : "test2341757"
  },
  "test2932099" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2932099() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\" SkipHeaderRecord:\", false);\n    cSVFormat0.POSTGRESQL_CSV.print((Appendable) mockFileWriter0);\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2932099"
  },
  "test1131041" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131041() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1131041"
  },
  "test1131040" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131040() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1131040"
  },
  "test1131042" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131042() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1131042"
  },
  "test1131038" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131038() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1131038"
  },
  "test1131037" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131037() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1131037"
  },
  "test1131039" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131039() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1131039"
  },
  "test1131034" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131034() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1131034"
  },
  "test1131033" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131033() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1131033"
  },
  "test084803" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084803() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test084803"
  },
  "test1131036" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131036() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1131036"
  },
  "test084802" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084802() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test084802"
  },
  "test1131035" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1131035() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1131035"
  },
  "test070655" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070655() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test070655"
  },
  "test070654" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070654() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('W');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase(true);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test070654"
  },
  "test2511808" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511808() throws Throwable {\n    CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    cSVFormat0.format(cSVFormat_PredefinedArray0);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2511808"
  },
  "test058540" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058540() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test058540"
  },
  "test1161064" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161064() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1161064"
  },
  "test2511809" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2511809() throws Throwable {\n    CSVFormat.Predefined[] cSVFormat_PredefinedArray0 = CSVFormat.Predefined.values();\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('6');\n    cSVFormat0.format(cSVFormat_PredefinedArray0);\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test2511809"
  },
  "test058541" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058541() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test058541"
  },
  "test1161063" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1161063() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    Class<QuoteMode> class0 = QuoteMode.class;\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(class0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1161063"
  },
  "test2531822" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2531822() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Object[] objectArray0 = new Object[1];\n    Object object0 = new Object();\n    objectArray0[0] = object0;\n    cSVFormat0.MYSQL.format(objectArray0);\n    cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test2531822"
  },
  "test021215" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021215() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test021215"
  },
  "test021217" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021217() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test021217"
  },
  "test021216" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021216() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test021216"
  },
  "test021219" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021219() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test021219"
  },
  "test021218" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021218() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test021218"
  },
  "test092876" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092876() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test092876"
  },
  "test092877" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092877() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test092877"
  },
  "test092878" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092878() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test092878"
  },
  "test092879" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092879() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test092879"
  },
  "test081763" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081763() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test081763"
  },
  "test081762" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081762() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test081762"
  },
  "test081765" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081765() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test081765"
  },
  "test081764" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081764() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('D');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test081764"
  },
  "test021220" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021220() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test021220"
  },
  "test021222" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021222() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test021222"
  },
  "test021221" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021221() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test021221"
  },
  "test021224" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021224() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test021224"
  },
  "test021223" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021223() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test021223"
  },
  "test021226" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021226() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test021226"
  },
  "test021225" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021225() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test021225"
  },
  "test092880" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092880() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test092880"
  },
  "test069648" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069648() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test069648"
  },
  "test069647" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069647() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test069647"
  },
  "test069649" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069649() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test069649"
  },
  "test069644" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069644() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test069644"
  },
  "test069646" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069646() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test069646"
  },
  "test069645" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069645() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test069645"
  },
  "test2751985" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2751985() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n}",
    "testName" : "test2751985"
  },
  "test092872" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092872() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test092872"
  },
  "test092873" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092873() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test092873"
  },
  "test092874" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092874() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test092874"
  },
  "test092875" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092875() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test092875"
  },
  "test092871" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092871() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test092871"
  },
  "test2792009" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2792009() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String string0 = cSVFormat0.getNullString();\n}",
    "testName" : "test2792009"
  },
  "test1981680" : {
    "methodSignature" : "public void print(final Object value, final Appendable out, final boolean newRecord) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1981680() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    char[] charArray0 = new char[3];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);\n    cSVFormat0.print((Object) cSVFormat0, (Appendable) charBuffer1, false);\n}",
    "testName" : "test1981680"
  },
  "test1421289" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421289() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('X');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1421289"
  },
  "test1421288" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1421288() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('X');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1421288"
  },
  "test0002" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0002() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test0002"
  },
  "test0003" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0003() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test0003"
  },
  "test0004" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0004() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test0004"
  },
  "test028280" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028280() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test028280"
  },
  "test0005" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0005() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test0005"
  },
  "test028281" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028281() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.getTrim();\n}",
    "testName" : "test028281"
  },
  "test0000" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test0000"
  },
  "test0001" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0001() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test0001"
  },
  "test028286" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028286() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test028286"
  },
  "test1531378" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531378() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1531378"
  },
  "test028287" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028287() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test028287"
  },
  "test028288" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028288() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test028288"
  },
  "test028289" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028289() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test028289"
  },
  "test0006" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0006() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test0006"
  },
  "test00011" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test00011"
  },
  "test028282" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028282() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test028282"
  },
  "test0007" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0007() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test0007"
  },
  "test028283" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028283() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test028283"
  },
  "test0008" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0008() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test0008"
  },
  "test028284" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028284() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test028284"
  },
  "test0009" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0009() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test0009"
  },
  "test00010" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00010() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test00010"
  },
  "test028285" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028285() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test028285"
  },
  "test2401774" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2401774() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2401774"
  },
  "test1591439" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591439() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');\n    CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1591439"
  },
  "test2401773" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2401773() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2401773"
  },
  "test2401772" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2401772() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test2401772"
  },
  "test2401771" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2401771() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2401771"
  },
  "test1591436" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591436() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');\n    CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();\n    cSVFormat5.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1591436"
  },
  "test1591435" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591435() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');\n    CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1591435"
  },
  "test1591438" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591438() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');\n    CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1591438"
  },
  "test1591437" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591437() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');\n    CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();\n    cSVFormat4.getAutoFlush();\n}",
    "testName" : "test1591437"
  },
  "test1591432" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591432() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');\n    CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();\n    cSVFormat5.getTrailingDelimiter();\n}",
    "testName" : "test1591432"
  },
  "test1591431" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591431() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');\n    CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();\n    cSVFormat5.getEscapeCharacter();\n}",
    "testName" : "test1591431"
  },
  "test1821624" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821624() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    String string0 = cSVFormat0.getNullString();\n}",
    "testName" : "test1821624"
  },
  "test1591434" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591434() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');\n    CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();\n    cSVFormat5.getSkipHeaderRecord();\n}",
    "testName" : "test1591434"
  },
  "test1591433" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591433() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');\n    CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();\n    cSVFormat3.equals((Object) cSVFormat0);\n}",
    "testName" : "test1591433"
  },
  "test2631883" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631883() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"InformixUnload\");\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2631883"
  },
  "test2631882" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631882() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"InformixUnload\");\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2631882"
  },
  "test1591430" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591430() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withTrim();\n    CSVFormat cSVFormat4 = cSVFormat3.withEscape('E');\n    CSVFormat cSVFormat5 = cSVFormat4.withFirstRecordAsHeader();\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1591430"
  },
  "test032319" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032319() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('A');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test032319"
  },
  "test032318" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032318() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('A');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test032318"
  },
  "test032317" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032317() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('A');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test032317"
  },
  "test032316" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032316() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('A');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test032316"
  },
  "test032315" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032315() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('A');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test032315"
  },
  "test032314" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032314() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('A');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test032314"
  },
  "test032313" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032313() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('A');\n    cSVFormat1.getNullString();\n}",
    "testName" : "test032313"
  },
  "test2231733" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2231733() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2231733"
  },
  "test032312" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032312() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('A');\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test032312"
  },
  "test2311749" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2311749() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2311749"
  },
  "test2691952" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691952() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2691952"
  },
  "test2691953" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691953() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test2691953"
  },
  "test2691954" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691954() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2691954"
  },
  "test2691955" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691955() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test2691955"
  },
  "test2311750" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2311750() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2311750"
  },
  "test032320" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032320() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator('A');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test032320"
  },
  "test2691950" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691950() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2691950"
  },
  "test2691951" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691951() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test2691951"
  },
  "test2691949" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691949() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2691949"
  },
  "test1531372" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531372() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1531372"
  },
  "test1531373" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531373() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1531373"
  },
  "test2691944" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691944() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat0.equals((Object) cSVFormat1);\n}",
    "testName" : "test2691944"
  },
  "test1531374" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531374() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1531374"
  },
  "test2691945" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691945() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2691945"
  },
  "test1531375" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531375() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1531375"
  },
  "test2691946" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691946() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2691946"
  },
  "test1531376" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531376() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1531376"
  },
  "test2691947" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691947() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2691947"
  },
  "test1531377" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1531377() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('t');\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1531377"
  },
  "test2691948" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2691948() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('i');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2691948"
  },
  "test2551837" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551837() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('@');\n    cSVFormat0.hashCode();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2551837"
  },
  "test1901671" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1901671() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    boolean boolean0 = cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1901671"
  },
  "test1901670" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1901670() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    boolean boolean0 = cSVFormat1.getAutoFlush();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1901670"
  },
  "test2551839" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551839() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('@');\n    cSVFormat0.hashCode();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2551839"
  },
  "test1901672" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1901672() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    boolean boolean0 = cSVFormat1.getAutoFlush();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1901672"
  },
  "test2551838" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551838() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('@');\n    cSVFormat0.hashCode();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2551838"
  },
  "test00444" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00444() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00444"
  },
  "test017180" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017180() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test017180"
  },
  "test00445" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00445() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00445"
  },
  "test00442" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00442() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test00442"
  },
  "test017182" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017182() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test017182"
  },
  "test00443" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00443() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test00443"
  },
  "test017181" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017181() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test017181"
  },
  "test00448" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00448() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00448"
  },
  "test00446" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00446() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00446"
  },
  "test00447" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00447() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00447"
  },
  "test017184" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017184() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test017184"
  },
  "test017183" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017183() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test017183"
  },
  "test2311752" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2311752() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2311752"
  },
  "test2551840" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551840() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('@');\n    cSVFormat0.hashCode();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2551840"
  },
  "test2311751" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2311751() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2311751"
  },
  "test2311754" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2311754() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2311754"
  },
  "test2311753" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2311753() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((Class<? extends Enum<?>>) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2311753"
  },
  "test00440" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00440() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00440"
  },
  "test1571409" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1571409() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1571409"
  },
  "test1901668" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1901668() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    boolean boolean0 = cSVFormat1.getAutoFlush();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1901668"
  },
  "test00441" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00441() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim(false);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00441"
  },
  "test1901667" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1901667() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    boolean boolean0 = cSVFormat1.getAutoFlush();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1901667"
  },
  "test1901669" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1901669() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    boolean boolean0 = cSVFormat1.getAutoFlush();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1901669"
  },
  "test2551841" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2551841() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('@');\n    cSVFormat0.hashCode();\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test2551841"
  },
  "test039380" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039380() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test039380"
  },
  "test017177" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017177() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test017177"
  },
  "test039384" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039384() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test039384"
  },
  "test017176" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017176() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test017176"
  },
  "test039383" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039383() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test039383"
  },
  "test051491" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051491() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('e');\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test051491"
  },
  "test017179" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017179() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test017179"
  },
  "test039382" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039382() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test039382"
  },
  "test051490" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051490() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('e');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test051490"
  },
  "test017178" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017178() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test017178"
  },
  "test039381" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039381() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test039381"
  },
  "test017175" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017175() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test017175"
  },
  "test017174" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017174() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    Character character0 = Character.valueOf('r');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test017174"
  },
  "test039385" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039385() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test039385"
  },
  "test043418" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043418() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test043418"
  },
  "test043419" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043419() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test043419"
  },
  "test043416" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043416() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test043416"
  },
  "test1571410" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1571410() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1571410"
  },
  "test043417" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043417() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test043417"
  },
  "test040388" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040388() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test040388"
  },
  "test043414" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043414() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test043414"
  },
  "test1571412" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1571412() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1571412"
  },
  "test040387" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040387() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test040387"
  },
  "test043415" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043415() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test043415"
  },
  "test1571411" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1571411() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1571411"
  },
  "test1571414" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1571414() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1571414"
  },
  "test040389" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040389() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test040389"
  },
  "test1571413" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1571413() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAutoFlush(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1571413"
  },
  "test040386" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040386() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test040386"
  },
  "test2781999" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2781999() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker((Character) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2781999"
  },
  "test2631887" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631887() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"InformixUnload\");\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2631887"
  },
  "test2631886" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631886() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"InformixUnload\");\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2631886"
  },
  "test2631885" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631885() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"InformixUnload\");\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2631885"
  },
  "test2631884" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631884() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"InformixUnload\");\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test2631884"
  },
  "test043423" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043423() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test043423"
  },
  "test2631889" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631889() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"InformixUnload\");\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2631889"
  },
  "test043424" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043424() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test043424"
  },
  "test2631888" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631888() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"InformixUnload\");\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2631888"
  },
  "test040395" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040395() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test040395"
  },
  "test043421" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043421() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test043421"
  },
  "test040394" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040394() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test040394"
  },
  "test043422" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043422() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test043422"
  },
  "test028278" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028278() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test028278"
  },
  "test040396" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040396() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test040396"
  },
  "test043420" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043420() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test043420"
  },
  "test040391" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040391() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test040391"
  },
  "test040390" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040390() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test040390"
  },
  "test040393" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040393() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test040393"
  },
  "test040392" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040392() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.ALL_NON_NULL;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test040392"
  },
  "test028279" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028279() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"InformixUnload\");\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test028279"
  },
  "test2631890" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631890() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"InformixUnload\");\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2631890"
  },
  "test1841641" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841641() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1841641"
  },
  "test1841640" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841640() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1841640"
  },
  "test2421779" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2421779() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('I');\n    String string0 = cSVFormat0.toString();\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test2421779"
  },
  "test1841642" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841642() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1841642"
  },
  "test1841638" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841638() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1841638"
  },
  "test2421780" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2421780() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('I');\n    String string0 = cSVFormat0.toString();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2421780"
  },
  "test1841637" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841637() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1841637"
  },
  "test2421781" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2421781() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('I');\n    String string0 = cSVFormat0.toString();\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2421781"
  },
  "test2421782" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2421782() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('I');\n    String string0 = cSVFormat0.toString();\n}",
    "testName" : "test2421782"
  },
  "test1841639" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841639() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1841639"
  },
  "test2421783" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2421783() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('I');\n    String string0 = cSVFormat0.toString();\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2421783"
  },
  "test062580" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062580() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test062580"
  },
  "test1511358" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511358() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1511358"
  },
  "test1511359" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511359() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1511359"
  },
  "test062581" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062581() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test062581"
  },
  "test1511361" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511361() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1511361"
  },
  "test1511362" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511362() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1511362"
  },
  "test1461327" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461327() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1461327"
  },
  "test1511363" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511363() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1511363"
  },
  "test1461328" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461328() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1461328"
  },
  "test1511364" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511364() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1511364"
  },
  "test1461325" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461325() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1461325"
  },
  "test065609" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065609() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test065609"
  },
  "test1461326" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461326() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1461326"
  },
  "test065608" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065608() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test065608"
  },
  "test1461323" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461323() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test1461323"
  },
  "test065607" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065607() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test065607"
  },
  "test1461324" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461324() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1461324"
  },
  "test1511360" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511360() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1511360"
  },
  "test1461321" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461321() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1461321"
  },
  "test1461322" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461322() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1461322"
  },
  "test1461320" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1461320() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(':');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1461320"
  },
  "test2001682" : {
    "methodSignature" : "public CSVPrinter print(final Appendable out) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2001682() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    cSVFormat0.TDF.print((Appendable) null);\n}",
    "testName" : "test2001682"
  },
  "test2161715" : {
    "methodSignature" : "public boolean isCommentMarkerSet()",
    "methodName" : "isCommentMarkerSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2161715() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    boolean boolean0 = cSVFormat0.isCommentMarkerSet();\n}",
    "testName" : "test2161715"
  },
  "test054508" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054508() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test054508"
  },
  "test051489" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051489() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('e');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test051489"
  },
  "test051488" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051488() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('e');\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test051488"
  },
  "test051487" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051487() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('e');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test051487"
  },
  "test051486" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051486() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('e');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test051486"
  },
  "test051481" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051481() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('e');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test051481"
  },
  "test051485" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051485() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('e');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test051485"
  },
  "test051484" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051484() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('e');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test051484"
  },
  "test051483" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051483() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('e');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test051483"
  },
  "test051482" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051482() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('e');\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test051482"
  },
  "test2571853" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571853() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.hashCode();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2571853"
  },
  "test2571852" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571852() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.hashCode();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2571852"
  },
  "test2571851" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571851() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.hashCode();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2571851"
  },
  "test2571850" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571850() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2571850"
  },
  "test2571855" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571855() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2571855"
  },
  "test2571854" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2571854() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    cSVFormat1.hashCode();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2571854"
  },
  "test054504" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054504() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test054504"
  },
  "test054505" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054505() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test054505"
  },
  "test054506" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054506() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test054506"
  },
  "test054507" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054507() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test054507"
  },
  "test1921674" : {
    "methodSignature" : "public CSVFormat withQuote(final char quoteChar)",
    "methodName" : "withQuote",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921674() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.withQuote('o');\n}",
    "testName" : "test1921674"
  },
  "test054503" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054503() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString((String) null);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test054503"
  },
  "test076719" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076719() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test076719"
  },
  "test076717" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076717() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test076717"
  },
  "test076718" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076718() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test076718"
  },
  "test076722" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076722() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test076722"
  },
  "test076720" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076720() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test076720"
  },
  "test076721" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076721() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test076721"
  },
  "test073690" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073690() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test073690"
  },
  "test102947" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102947() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"TOKEN\";\n    stringArray0[1] = \"VV0P[AFUSpAi`\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test102947"
  },
  "test2141713" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2141713() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test2141713"
  },
  "test102948" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102948() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"TOKEN\";\n    stringArray0[1] = \"VV0P[AFUSpAi`\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test102948"
  },
  "test102949" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102949() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"TOKEN\";\n    stringArray0[1] = \"VV0P[AFUSpAi`\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test102949"
  },
  "test062576" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062576() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test062576"
  },
  "test065602" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065602() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test065602"
  },
  "test1441311" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441311() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('F');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1441311"
  },
  "test062577" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062577() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test062577"
  },
  "test065601" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065601() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test065601"
  },
  "test1441310" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441310() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('F');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1441310"
  },
  "test062574" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062574() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test062574"
  },
  "test062575" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062575() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test062575"
  },
  "test1441312" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441312() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('F');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1441312"
  },
  "test065606" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065606() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test065606"
  },
  "test065605" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065605() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test065605"
  },
  "test062578" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062578() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test062578"
  },
  "test065604" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065604() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test065604"
  },
  "test062579" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062579() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test062579"
  },
  "test065603" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065603() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test065603"
  },
  "test102950" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102950() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"TOKEN\";\n    stringArray0[1] = \"VV0P[AFUSpAi`\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test102950"
  },
  "test062572" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062572() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test062572"
  },
  "test062573" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062573() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test062573"
  },
  "test102951" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102951() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"TOKEN\";\n    stringArray0[1] = \"VV0P[AFUSpAi`\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test102951"
  },
  "test062571" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062571() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test062571"
  },
  "test102952" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102952() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"TOKEN\";\n    stringArray0[1] = \"VV0P[AFUSpAi`\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test102952"
  },
  "test1511354" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511354() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1511354"
  },
  "test1511355" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511355() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test1511355"
  },
  "test1511356" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511356() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1511356"
  },
  "test1511357" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1511357() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('7');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test1511357"
  },
  "test073678" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073678() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test073678"
  },
  "test073679" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073679() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test073679"
  },
  "test2211731" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2211731() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getTrim();\n}",
    "testName" : "test2211731"
  },
  "test087827" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087827() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test087827"
  },
  "test2021684" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2021684() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    cSVFormat0.TDF.parse((Reader) null);\n}",
    "testName" : "test2021684"
  },
  "test2081701" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2081701() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1295);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);\n    cSVFormat0.MYSQL.print((Object) null, (Appendable) outputStreamWriter0, false);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2081701"
  },
  "test2081700" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2081700() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1295);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);\n    cSVFormat0.MYSQL.print((Object) null, (Appendable) outputStreamWriter0, false);\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2081700"
  },
  "test1441306" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441306() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('F');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1441306"
  },
  "test1441308" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441308() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('F');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1441308"
  },
  "test1441307" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441307() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('F');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1441307"
  },
  "test1441309" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1441309() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('F');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1441309"
  },
  "test073684" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073684() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test073684"
  },
  "test073685" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073685() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test073685"
  },
  "test073686" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073686() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test073686"
  },
  "test073687" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073687() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test073687"
  },
  "test073688" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073688() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test073688"
  },
  "test076715" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076715() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test076715"
  },
  "test073689" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073689() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test073689"
  },
  "test076716" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076716() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test076716"
  },
  "test2081707" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2081707() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1295);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);\n    cSVFormat0.MYSQL.print((Object) null, (Appendable) outputStreamWriter0, false);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2081707"
  },
  "test2081706" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2081706() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1295);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);\n    cSVFormat0.MYSQL.print((Object) null, (Appendable) outputStreamWriter0, false);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2081706"
  },
  "test073680" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073680() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test073680"
  },
  "test2081703" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2081703() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1295);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);\n    cSVFormat0.MYSQL.print((Object) null, (Appendable) outputStreamWriter0, false);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2081703"
  },
  "test073681" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073681() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test073681"
  },
  "test2081702" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2081702() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1295);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);\n    cSVFormat0.MYSQL.print((Object) null, (Appendable) outputStreamWriter0, false);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2081702"
  },
  "test073682" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073682() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test073682"
  },
  "test2081705" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2081705() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1295);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);\n    cSVFormat0.MYSQL.print((Object) null, (Appendable) outputStreamWriter0, false);\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2081705"
  },
  "test073683" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073683() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD_CSV.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test073683"
  },
  "test2081704" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2081704() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('x');\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1295);\n    Charset charset0 = Charset.defaultCharset();\n    CharsetEncoder charsetEncoder0 = charset0.newEncoder();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);\n    cSVFormat0.MYSQL.print((Object) null, (Appendable) outputStreamWriter0, false);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2081704"
  },
  "test2862031" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862031() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test2862031"
  },
  "test2862032" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862032() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2862032"
  },
  "test2862033" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862033() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test2862033"
  },
  "test2862034" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862034() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2862034"
  },
  "test2862035" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862035() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test2862035"
  },
  "test2862036" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862036() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2862036"
  },
  "test024241" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024241() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test024241"
  },
  "test1321200" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321200() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('`');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test1321200"
  },
  "test2441789" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2441789() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[2];\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2441789"
  },
  "test024244" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024244() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test024244"
  },
  "test024245" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024245() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test024245"
  },
  "test024242" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024242() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test024242"
  },
  "test024243" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024243() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test024243"
  },
  "test024248" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024248() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test024248"
  },
  "test024249" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024249() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test024249"
  },
  "test2441790" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2441790() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[2];\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2441790"
  },
  "test024246" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024246() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test024246"
  },
  "test2441791" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2441791() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[2];\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2441791"
  },
  "test024247" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024247() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test024247"
  },
  "test2441792" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2441792() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[2];\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2441792"
  },
  "test1091006" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1091006() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1091006"
  },
  "test1091005" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1091005() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1091005"
  },
  "test1091007" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1091007() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1091007"
  },
  "test1091002" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1091002() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1091002"
  },
  "test1091004" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1091004() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1091004"
  },
  "test1091003" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1091003() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1091003"
  },
  "test084793" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084793() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test084793"
  },
  "test084792" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084792() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test084792"
  },
  "test087822" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087822() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test087822"
  },
  "test1201099" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201099() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1201099"
  },
  "test087823" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087823() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test087823"
  },
  "test1201098" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201098() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1201098"
  },
  "test087824" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087824() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test087824"
  },
  "test1201097" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201097() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test1201097"
  },
  "test087825" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087825() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test087825"
  },
  "test1201096" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201096() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1201096"
  },
  "test087826" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087826() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test087826"
  },
  "test1201095" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201095() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1201095"
  },
  "test1201094" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201094() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1201094"
  },
  "test1711556" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711556() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getNullString();\n}",
    "testName" : "test1711556"
  },
  "test2441793" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2441793() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[2];\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2441793"
  },
  "test1201093" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201093() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1201093"
  },
  "test1711557" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711557() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1711557"
  },
  "test2441794" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2441794() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    String[] stringArray0 = new String[2];\n    cSVFormat1.format(stringArray0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2441794"
  },
  "test084799" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084799() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test084799"
  },
  "test1201092" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201092() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1201092"
  },
  "test1711554" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711554() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1711554"
  },
  "test084798" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084798() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test084798"
  },
  "test1201091" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1201091() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('J');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1201091"
  },
  "test1711555" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711555() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1711555"
  },
  "test024251" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024251() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test024251"
  },
  "test084797" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084797() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test084797"
  },
  "test1711552" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711552() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1711552"
  },
  "test024252" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024252() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test024252"
  },
  "test084796" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084796() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test084796"
  },
  "test1711553" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711553() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1711553"
  },
  "test084795" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084795() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test084795"
  },
  "test024250" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024250() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test024250"
  },
  "test084794" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084794() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test084794"
  },
  "test1711551" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711551() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1711551"
  },
  "test024255" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024255() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test024255"
  },
  "test1321201" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321201() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('`');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1321201"
  },
  "test1321202" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321202() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('`');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1321202"
  },
  "test024253" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024253() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test024253"
  },
  "test1321203" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321203() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('`');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1321203"
  },
  "test024254" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024254() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.INFORMIX_UNLOAD.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test024254"
  },
  "test1321204" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321204() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('`');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1321204"
  },
  "test1321205" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321205() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('`');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1321205"
  },
  "test1321206" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321206() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('`');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1321206"
  },
  "test1321207" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321207() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('`');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1321207"
  },
  "test1321208" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321208() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('`');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1321208"
  },
  "test1321209" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321209() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('`');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1321209"
  },
  "test1711560" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711560() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1711560"
  },
  "test098926" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098926() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test098926"
  },
  "test1711561" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711561() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1711561"
  },
  "test1711562" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711562() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1711562"
  },
  "test1711558" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711558() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1711558"
  },
  "test1711559" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711559() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1711559"
  },
  "test098919" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098919() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test098919"
  },
  "test098918" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098918() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test098918"
  },
  "test098917" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098917() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test098917"
  },
  "test2271737" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2271737() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    boolean boolean0 = cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2271737"
  },
  "test1261156" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261156() throws Throwable {\n    Character character0 = new Character('C');\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1261156"
  },
  "test1261157" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261157() throws Throwable {\n    Character character0 = new Character('C');\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1261157"
  },
  "test095892" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095892() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Object[] objectArray0 = new Object[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test095892"
  },
  "test1261152" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261152() throws Throwable {\n    Character character0 = new Character('C');\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1261152"
  },
  "test1261153" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261153() throws Throwable {\n    Character character0 = new Character('C');\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1261153"
  },
  "test1261154" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261154() throws Throwable {\n    Character character0 = new Character('C');\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1261154"
  },
  "test1261155" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1261155() throws Throwable {\n    Character character0 = new Character('C');\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1261155"
  },
  "test098925" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098925() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test098925"
  },
  "test095897" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095897() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Object[] objectArray0 = new Object[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test095897"
  },
  "test098924" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098924() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test098924"
  },
  "test098923" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098923() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test098923"
  },
  "test098922" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098922() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test098922"
  },
  "test095894" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095894() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Object[] objectArray0 = new Object[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test095894"
  },
  "test098921" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098921() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test098921"
  },
  "test095893" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095893() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Object[] objectArray0 = new Object[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test095893"
  },
  "test098920" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098920() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test098920"
  },
  "test095896" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095896() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Object[] objectArray0 = new Object[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test095896"
  },
  "test095895" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095895() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    Object[] objectArray0 = new Object[2];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test095895"
  },
  "test1631464" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631464() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1631464"
  },
  "test1631466" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631466() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1631466"
  },
  "test1631465" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631465() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1631465"
  },
  "test2121711" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121711() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    boolean boolean0 = cSVFormat0.isNullStringSet();\n}",
    "testName" : "test2121711"
  },
  "test2942106" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2942106() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2942106"
  },
  "test013140" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013140() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test013140"
  },
  "test013141" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013141() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test013141"
  },
  "test013142" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013142() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test013142"
  },
  "test013136" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013136() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test013136"
  },
  "test035342" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035342() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test035342"
  },
  "test013137" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013137() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test013137"
  },
  "test035341" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035341() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test035341"
  },
  "test013138" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013138() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test013138"
  },
  "test035344" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035344() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test035344"
  },
  "test013139" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013139() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getNullString();\n}",
    "testName" : "test013139"
  },
  "test035343" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035343() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test035343"
  },
  "test035346" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035346() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test035346"
  },
  "test035345" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035345() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test035345"
  },
  "test013134" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013134() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test013134"
  },
  "test1651486" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651486() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1651486"
  },
  "test013135" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013135() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    Character character0 = Character.valueOf('o');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrailingDelimiter();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test013135"
  },
  "test035347" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035347() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('K');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test035347"
  },
  "test1651491" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651491() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1651491"
  },
  "test1651490" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651490() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1651490"
  },
  "test1651493" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651493() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1651493"
  },
  "test1651492" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651492() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1651492"
  },
  "test1651495" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651495() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1651495"
  },
  "test1651494" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651494() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1651494"
  },
  "test2651901" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651901() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getNullString();\n}",
    "testName" : "test2651901"
  },
  "test2651902" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651902() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test2651902"
  },
  "test2651903" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651903() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2651903"
  },
  "test2651904" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651904() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2651904"
  },
  "test2651905" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651905() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2651905"
  },
  "test2651906" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651906() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2651906"
  },
  "test2651907" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651907() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2651907"
  },
  "test2651908" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651908() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2651908"
  },
  "test2041694" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2041694() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    cSVFormat0.println((Appendable) null);\n    cSVFormat0.getAutoFlush();\n}",
    "testName" : "test2041694"
  },
  "test2651909" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651909() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test2651909"
  },
  "test2041690" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2041690() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    cSVFormat0.println((Appendable) null);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test2041690"
  },
  "test2041691" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2041691() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    cSVFormat0.println((Appendable) null);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test2041691"
  },
  "test2041692" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2041692() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    cSVFormat0.println((Appendable) null);\n    cSVFormat0.getTrim();\n}",
    "testName" : "test2041692"
  },
  "test2041693" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2041693() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    cSVFormat0.println((Appendable) null);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test2041693"
  },
  "test1651488" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651488() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1651488"
  },
  "test1651487" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651487() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1651487"
  },
  "test1651489" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651489() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1651489"
  },
  "test2651910" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651910() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2651910"
  },
  "test2651911" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651911() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test2651911"
  },
  "test2651912" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2651912() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2651912"
  },
  "test2041686" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2041686() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    cSVFormat0.getTrailingDelimiter();\n}",
    "testName" : "test2041686"
  },
  "test2041687" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2041687() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    cSVFormat0.println((Appendable) null);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test2041687"
  },
  "test2041688" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2041688() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    cSVFormat0.println((Appendable) null);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test2041688"
  },
  "test2041689" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2041689() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('*');\n    cSVFormat0.println((Appendable) null);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test2041689"
  },
  "test2611869" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611869() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test2611869"
  },
  "test1551387" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551387() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Class<Token.Type> class0 = Token.Type.class;\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test1551387"
  },
  "test1551388" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551388() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Class<Token.Type> class0 = Token.Type.class;\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1551388"
  },
  "test1551389" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551389() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Class<Token.Type> class0 = Token.Type.class;\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1551389"
  },
  "test2251735" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2251735() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = cSVFormat0.getEscapeCharacter();\n}",
    "testName" : "test2251735"
  },
  "test2671929" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2671929() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2671929"
  },
  "test00884" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00884() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00884"
  },
  "test1281172" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281172() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1281172"
  },
  "test2671925" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2671925() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test2671925"
  },
  "test00885" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00885() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00885"
  },
  "test1281173" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281173() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1281173"
  },
  "test2671926" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2671926() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2671926"
  },
  "test00882" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00882() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test00882"
  },
  "test1281174" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281174() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test1281174"
  },
  "test2671927" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2671927() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test2671927"
  },
  "test00883" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00883() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test00883"
  },
  "test1281175" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281175() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1281175"
  },
  "test2671928" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2671928() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2671928"
  },
  "test00888" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00888() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00888"
  },
  "test1281176" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281176() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1281176"
  },
  "test1281177" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281177() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1281177"
  },
  "test00886" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00886() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test00886"
  },
  "test2671923" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2671923() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test2671923"
  },
  "test00887" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00887() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00887"
  },
  "test2671924" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2671924() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2671924"
  },
  "test2611874" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611874() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    PipedReader pipedReader0 = new PipedReader(126);\n    cSVFormat3.parse(pipedReader0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test2611874"
  },
  "test2611873" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611873() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    PipedReader pipedReader0 = new PipedReader(126);\n    cSVFormat3.parse(pipedReader0);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test2611873"
  },
  "test2611872" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611872() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    PipedReader pipedReader0 = new PipedReader(126);\n    cSVFormat3.parse(pipedReader0);\n    cSVFormat3.equals((Object) cSVFormat2);\n}",
    "testName" : "test2611872"
  },
  "test2611871" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611871() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    PipedReader pipedReader0 = new PipedReader(126);\n    cSVFormat3.parse(pipedReader0);\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test2611871"
  },
  "test1551390" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551390() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Class<Token.Type> class0 = Token.Type.class;\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test1551390"
  },
  "test2611870" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611870() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    PipedReader pipedReader0 = new PipedReader(126);\n    cSVFormat3.parse(pipedReader0);\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test2611870"
  },
  "test1551391" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551391() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Class<Token.Type> class0 = Token.Type.class;\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1551391"
  },
  "test1551392" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551392() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Class<Token.Type> class0 = Token.Type.class;\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);\n    cSVFormat3.equals((Object) cSVFormat2);\n}",
    "testName" : "test1551392"
  },
  "test1551393" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551393() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Class<Token.Type> class0 = Token.Type.class;\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test1551393"
  },
  "test2611879" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611879() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    PipedReader pipedReader0 = new PipedReader(126);\n    cSVFormat3.parse(pipedReader0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2611879"
  },
  "test2611878" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611878() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    PipedReader pipedReader0 = new PipedReader(126);\n    cSVFormat3.parse(pipedReader0);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test2611878"
  },
  "test2611877" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611877() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    PipedReader pipedReader0 = new PipedReader(126);\n    cSVFormat3.parse(pipedReader0);\n    cSVFormat3.getTrim();\n}",
    "testName" : "test2611877"
  },
  "test2611876" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611876() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    PipedReader pipedReader0 = new PipedReader(126);\n    cSVFormat3.parse(pipedReader0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2611876"
  },
  "test2611875" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611875() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    PipedReader pipedReader0 = new PipedReader(126);\n    cSVFormat3.parse(pipedReader0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test2611875"
  },
  "test2882054" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2882054() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test2882054"
  },
  "test2882055" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2882055() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2882055"
  },
  "test2882056" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2882056() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2882056"
  },
  "test00880" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00880() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00880"
  },
  "test00881" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00881() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test00881"
  },
  "test1281170" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281170() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1281170"
  },
  "test1281171" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281171() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1281171"
  },
  "test00878" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00878() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test00878"
  },
  "test1281166" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281166() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test1281166"
  },
  "test1281167" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281167() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1281167"
  },
  "test1281168" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281168() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1281168"
  },
  "test1281169" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1281169() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = Character.valueOf('{');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1281169"
  },
  "test00879" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00879() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withTrim();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00879"
  },
  "test1551385" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551385() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Class<Token.Type> class0 = Token.Type.class;\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1551385"
  },
  "test2671930" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2671930() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test2671930"
  },
  "test1551386" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1551386() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    Class<Token.Type> class0 = Token.Type.class;\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(class0);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1551386"
  },
  "test2671931" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2671931() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('$');\n    cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2671931"
  },
  "test2611880" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2611880() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Class<CSVFormat.Predefined> class0 = CSVFormat.Predefined.class;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(class0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreSurroundingSpaces(true);\n    PipedReader pipedReader0 = new PipedReader(126);\n    cSVFormat3.parse(pipedReader0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test2611880"
  },
  "test2842029" : {
    "methodSignature" : "public CSVPrinter print(final File out, final Charset charset) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2842029() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    MockFile mockFile0 = new MockFile(\"\", \"\");\n    Charset charset0 = Charset.defaultCharset();\n    cSVFormat0.print((File) mockFile0, charset0);\n}",
    "testName" : "test2842029"
  },
  "test046449" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046449() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('i');\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test046449"
  },
  "test046448" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046448() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('i');\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test046448"
  },
  "test046447" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046447() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('i');\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test046447"
  },
  "test046446" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046446() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('i');\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test046446"
  },
  "test046445" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046445() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('i');\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getEscapeCharacter();\n}",
    "testName" : "test046445"
  },
  "test046444" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046444() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('i');\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test046444"
  },
  "test046443" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046443() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('i');\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test046443"
  },
  "test046442" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046442() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('i');\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test046442"
  },
  "test046441" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046441() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('i');\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getAutoFlush();\n}",
    "testName" : "test046441"
  },
  "test046440" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046440() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('i');\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getTrailingDelimiter();\n}",
    "testName" : "test046440"
  },
  "test2882057" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2882057() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2882057"
  },
  "test2882058" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2882058() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test2882058"
  },
  "test2882059" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2882059() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSet) null);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test2882059"
  },
  "test1631474" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631474() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test1631474"
  },
  "test1631471" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631471() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1631471"
  },
  "test1631470" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631470() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1631470"
  },
  "test1631473" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631473() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1631473"
  },
  "test1631472" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631472() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1631472"
  },
  "test046450" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046450() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('i');\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote(character0);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test046450"
  },
  "test1631468" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631468() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1631468"
  },
  "test1631467" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631467() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1631467"
  },
  "test1631469" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631469() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1631469"
  },
  "test057529" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057529() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"D-4!vHa1G]gN3*=\");\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test057529"
  },
  "test057528" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057528() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"D-4!vHa1G]gN3*=\");\n    cSVFormat1.getTrim();\n}",
    "testName" : "test057528"
  },
  "test2101709" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2101709() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    boolean boolean0 = cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test2101709"
  },
  "test068642" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068642() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test068642"
  },
  "test068643" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068643() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test068643"
  },
  "test106984" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106984() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test106984"
  },
  "test106985" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106985() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test106985"
  },
  "test068640" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068640() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test068640"
  },
  "test106986" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106986() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test106986"
  },
  "test068641" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068641() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test068641"
  },
  "test106981" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106981() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test106981"
  },
  "test106982" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106982() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test106982"
  },
  "test106983" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106983() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test106983"
  },
  "test1691533" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1691533() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1691533"
  },
  "test1691534" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1691534() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1691534"
  },
  "test1691531" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1691531() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1691531"
  },
  "test1691532" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1691532() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getTrim();\n}",
    "testName" : "test1691532"
  },
  "test1611451" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611451() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getAutoFlush();\n}",
    "testName" : "test1611451"
  },
  "test2061697" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2061697() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withFirstRecordAsHeader();\n    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter('H');\n    CharBuffer charBuffer0 = CharBuffer.allocate(124);\n    cSVFormat3.println(charBuffer0);\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test2061697"
  },
  "test1611450" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611450() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1611450"
  },
  "test1611453" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611453() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test1611453"
  },
  "test1691535" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1691535() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1691535"
  },
  "test1611452" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611452() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test1611452"
  },
  "test1691536" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1691536() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrailingDelimiter();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1691536"
  },
  "test1611455" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611455() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1611455"
  },
  "test1611454" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611454() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1611454"
  },
  "test1611457" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611457() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1611457"
  },
  "test1611456" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611456() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Character character0 = Character.valueOf('f');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1611456"
  },
  "test1341226" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341226() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\\" in \");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('u');\n    cSVFormat2.getNullString();\n}",
    "testName" : "test1341226"
  },
  "test080761" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080761() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test080761"
  },
  "test1341225" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341225() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\\" in \");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('u');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1341225"
  },
  "test1341228" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341228() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\\" in \");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('u');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1341228"
  },
  "test1341227" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341227() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\\" in \");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('u');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1341227"
  },
  "test1341222" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341222() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\\" in \");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('u');\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test1341222"
  },
  "test1341221" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341221() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\\" in \");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('u');\n    cSVFormat1.getTrim();\n}",
    "testName" : "test1341221"
  },
  "test080760" : {
    "methodSignature" : "public boolean getAutoFlush()",
    "methodName" : "getAutoFlush",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080760() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAutoFlush();\n}",
    "testName" : "test080760"
  },
  "test1341224" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341224() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\\" in \");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('u');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1341224"
  },
  "test1341223" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341223() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\\" in \");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('u');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test1341223"
  },
  "test080759" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080759() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test080759"
  },
  "test080758" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080758() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test080758"
  },
  "test080755" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080755() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test080755"
  },
  "test080754" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080754() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test080754"
  },
  "test080757" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080757() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getTrim();\n}",
    "testName" : "test080757"
  },
  "test080756" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080756() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAutoFlush(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test080756"
  },
  "test2862040" : {
    "methodSignature" : "public boolean getTrim()",
    "methodName" : "getTrim",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862040() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat2.getTrim();\n}",
    "testName" : "test2862040"
  },
  "test2862041" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862041() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test2862041"
  },
  "test2862042" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862042() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test2862042"
  },
  "test2862043" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862043() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test2862043"
  },
  "test1341219" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341219() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\\" in \");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('u');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1341219"
  },
  "test2862044" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862044() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test2862044"
  },
  "test1341220" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1341220() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\\\" in \");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('u');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1341220"
  },
  "test057534" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057534() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"D-4!vHa1G]gN3*=\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test057534"
  },
  "test2862037" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862037() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat1.getTrailingDelimiter();\n}",
    "testName" : "test2862037"
  },
  "test057535" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057535() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"D-4!vHa1G]gN3*=\");\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test057535"
  },
  "test2862038" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862038() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test2862038"
  },
  "test057532" : {
    "methodSignature" : "public boolean getTrailingDelimiter()",
    "methodName" : "getTrailingDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057532() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"D-4!vHa1G]gN3*=\");\n    cSVFormat2.getTrailingDelimiter();\n}",
    "testName" : "test057532"
  },
  "test2862039" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2862039() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(':');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('L');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test2862039"
  },
  "test057533" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057533() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"D-4!vHa1G]gN3*=\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test057533"
  },
  "test057530" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057530() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"D-4!vHa1G]gN3*=\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test057530"
  },
  "test057531" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057531() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"D-4!vHa1G]gN3*=\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test057531"
  }
}