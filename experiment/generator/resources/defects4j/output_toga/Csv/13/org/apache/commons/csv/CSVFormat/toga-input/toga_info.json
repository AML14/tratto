{
  "test159999" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test159999() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Object[] objectArray0 = new Object[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test159999"
  },
  "test137961" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137961() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test137961"
  },
  "test137960" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137960() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test137960"
  },
  "test092731" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092731() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test092731"
  },
  "test092732" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092732() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test092732"
  },
  "test1931176" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931176() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"$/G\");\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test1931176"
  },
  "test1931177" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931177() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"$/G\");\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test1931177"
  },
  "test1931178" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931178() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"$/G\");\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test1931178"
  },
  "test1931179" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931179() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"$/G\");\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1931179"
  },
  "test00114" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00114() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00114"
  },
  "test00112" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test00112"
  },
  "test00113" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00113() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00113"
  },
  "test054441" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054441() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test054441"
  },
  "test054442" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054442() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test054442"
  },
  "test054440" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test054440() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test054440"
  },
  "test067546" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067546() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test067546"
  },
  "test1931183" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931183() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"$/G\");\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');\n    cSVFormat3.getRecordSeparator();\n}",
    "testName" : "test1931183"
  },
  "test1931184" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931184() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"$/G\");\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test1931184"
  },
  "test067544" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067544() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test067544"
  },
  "test1931185" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931185() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"$/G\");\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');\n    cSVFormat3.getNullString();\n}",
    "testName" : "test1931185"
  },
  "test067545" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067545() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test067545"
  },
  "test1931186" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931186() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"$/G\");\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test1931186"
  },
  "test00110" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00110() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test00110"
  },
  "test00111" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00111"
  },
  "test1931180" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931180() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"$/G\");\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test1931180"
  },
  "test1931181" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931181() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"$/G\");\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');\n    cSVFormat3.getQuoteCharacter();\n}",
    "testName" : "test1931181"
  },
  "test1931182" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1931182() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"$/G\");\n    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test1931182"
  },
  "test1611004" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611004() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');\n    String string0 = cSVFormat0.toString();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1611004"
  },
  "test1611005" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1611005() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');\n    String string0 = cSVFormat0.toString();\n}",
    "testName" : "test1611005"
  },
  "test104828" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104828() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test104828"
  },
  "test104827" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104827() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test104827"
  },
  "test104826" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104826() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test104826"
  },
  "test043348" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043348() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"$VALUES\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test043348"
  },
  "test043349" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043349() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"$VALUES\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test043349"
  },
  "test043346" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043346() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"$VALUES\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test043346"
  },
  "test043347" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043347() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"$VALUES\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test043347"
  },
  "test104829" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104829() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test104829"
  },
  "test043344" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043344() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"$VALUES\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test043344"
  },
  "test043345" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043345() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"$VALUES\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test043345"
  },
  "test043342" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043342() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"$VALUES\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test043342"
  },
  "test043343" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043343() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"$VALUES\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test043343"
  },
  "test043340" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043340() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"$VALUES\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test043340"
  },
  "test043341" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043341() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(\"$VALUES\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test043341"
  },
  "test127922" : {
    "methodSignature" : "public CSVFormat withDelimiter(final char delimiter)",
    "methodName" : "withDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test127922() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('E');\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);\n    cSVFormat1.withDelimiter('E');\n}",
    "testName" : "test127922"
  },
  "test137956" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137956() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test137956"
  },
  "test137955" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137955() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test137955"
  },
  "test137954" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137954() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test137954"
  },
  "test137953" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137953() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test137953"
  },
  "test137959" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137959() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getHeader();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test137959"
  },
  "test137958" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137958() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test137958"
  },
  "test137957" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test137957() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);\n    cSVFormat1.getHeader();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test137957"
  },
  "test041330" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041330() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test041330"
  },
  "test104831" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104831() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test104831"
  },
  "test104830" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104830() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test104830"
  },
  "test041332" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041332() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test041332"
  },
  "test041331" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041331() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test041331"
  },
  "test00330" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00330() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00330"
  },
  "test104835" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104835() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test104835"
  },
  "test00331" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00331() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00331"
  },
  "test104834" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104834() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test104834"
  },
  "test104833" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104833() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test104833"
  },
  "test104832" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test104832() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test104832"
  },
  "test00324" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00324() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00324"
  },
  "test029219" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029219() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test029219"
  },
  "test078623" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078623() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test078623"
  },
  "test078624" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078624() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test078624"
  },
  "test00327" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00327() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00327"
  },
  "test00328" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00328() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00328"
  },
  "test00325" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00325() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00325"
  },
  "test00326" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00326() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00326"
  },
  "test075591" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075591() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test075591"
  },
  "test149981" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test149981() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    boolean boolean0 = cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test149981"
  },
  "test075590" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075590() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test075590"
  },
  "test150982" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test150982() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test150982"
  },
  "test00329" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00329() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test00329"
  },
  "test075593" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075593() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test075593"
  },
  "test150983" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test150983() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test150983"
  },
  "test075592" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075592() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test075592"
  },
  "test150984" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test150984() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test150984"
  },
  "test075595" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075595() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test075595"
  },
  "test078621" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078621() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test078621"
  },
  "test075594" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075594() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test075594"
  },
  "test078622" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078622() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test078622"
  },
  "test075596" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075596() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test075596"
  },
  "test078620" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078620() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test078620"
  },
  "test065534" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065534() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test065534"
  },
  "test065533" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065533() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test065533"
  },
  "test029221" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029221() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test029221"
  },
  "test029222" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029222() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test029222"
  },
  "test029223" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029223() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test029223"
  },
  "test029224" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029224() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test029224"
  },
  "test026199" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026199() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test026199"
  },
  "test065532" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065532() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test065532"
  },
  "test026198" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026198() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test026198"
  },
  "test065531" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065531() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test065531"
  },
  "test065530" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065530() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test065530"
  },
  "test029220" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029220() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test029220"
  },
  "test117904" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117904() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test117904"
  },
  "test099794" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099794() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test099794"
  },
  "test029225" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029225() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test029225"
  },
  "test099793" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099793() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test099793"
  },
  "test029226" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029226() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test029226"
  },
  "test099792" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099792() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat4.getDelimiter();\n}",
    "testName" : "test099792"
  },
  "test029227" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029227() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test029227"
  },
  "test099791" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099791() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat4.getRecordSeparator();\n}",
    "testName" : "test099791"
  },
  "test029228" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029228() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test029228"
  },
  "test099790" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099790() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat4.equals((Object) cSVFormat3);\n}",
    "testName" : "test099790"
  },
  "test117902" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117902() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test117902"
  },
  "test117903" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117903() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test117903"
  },
  "test117900" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117900() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test117900"
  },
  "test117901" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117901() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test117901"
  },
  "test090723" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090723() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test090723"
  },
  "test090722" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090722() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test090722"
  },
  "test090721" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090721() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test090721"
  },
  "test090720" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090720() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test090720"
  },
  "test090727" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090727() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test090727"
  },
  "test090726" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090726() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test090726"
  },
  "test018137" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018137() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test018137"
  },
  "test090725" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090725() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test090725"
  },
  "test018138" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018138() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test018138"
  },
  "test090724" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090724() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test090724"
  },
  "test030229" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030229() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test030229"
  },
  "test00541" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00541() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00541"
  },
  "test018135" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018135() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test018135"
  },
  "test018136" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018136() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test018136"
  },
  "test099789" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099789() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat4.getNullString();\n}",
    "testName" : "test099789"
  },
  "test099788" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099788() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat4.getAllowMissingColumnNames();\n}",
    "testName" : "test099788"
  },
  "test099787" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099787() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');\n    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();\n    cSVFormat4.getIgnoreHeaderCase();\n}",
    "testName" : "test099787"
  },
  "test114890" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test114890() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = cSVFormat0.getEscapeCharacter();\n}",
    "testName" : "test114890"
  },
  "test1601003" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601003() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');\n    String string0 = cSVFormat2.toString();\n}",
    "testName" : "test1601003"
  },
  "test090719" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test090719() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test090719"
  },
  "test1601002" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601002() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');\n    String string0 = cSVFormat2.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1601002"
  },
  "test1601001" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1601001() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');\n    String string0 = cSVFormat2.toString();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1601001"
  },
  "test00540" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00540() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00540"
  },
  "test075588" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075588() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test075588"
  },
  "test075587" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075587() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test075587"
  },
  "test078615" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078615() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test078615"
  },
  "test075589" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test075589() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test075589"
  },
  "test1941187" : {
    "methodSignature" : "public CSVPrinter print(final Appendable out) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1941187() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\">Z%5F+:E\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);\n    CSVPrinter cSVPrinter0 = cSVFormat0.DEFAULT.print(mockPrintWriter0);\n}",
    "testName" : "test1941187"
  },
  "test00536" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00536() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00536"
  },
  "test078618" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078618() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test078618"
  },
  "test00537" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00537() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00537"
  },
  "test078619" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078619() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test078619"
  },
  "test078616" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078616() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test078616"
  },
  "test00535" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00535() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00535"
  },
  "test078617" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078617() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test078617"
  },
  "test030232" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030232() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test030232"
  },
  "test00538" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00538() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00538"
  },
  "test030230" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030230() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test030230"
  },
  "test00539" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00539() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00539"
  },
  "test030231" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030231() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test030231"
  },
  "test086686" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086686() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test086686"
  },
  "test089712" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089712() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    Character character0 = Character.valueOf('A');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test089712"
  },
  "test086687" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086687() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test086687"
  },
  "test089711" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089711() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    Character character0 = Character.valueOf('A');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test089711"
  },
  "test086688" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086688() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test086688"
  },
  "test089714" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089714() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    Character character0 = Character.valueOf('A');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test089714"
  },
  "test086689" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086689() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test086689"
  },
  "test089713" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089713() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    Character character0 = Character.valueOf('A');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test089713"
  },
  "test089716" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089716() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    Character character0 = Character.valueOf('A');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test089716"
  },
  "test089715" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089715() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    Character character0 = Character.valueOf('A');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test089715"
  },
  "test089718" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089718() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    Character character0 = Character.valueOf('A');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test089718"
  },
  "test089717" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089717() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    Character character0 = Character.valueOf('A');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test089717"
  },
  "test052429" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052429() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test052429"
  },
  "test086683" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086683() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test086683"
  },
  "test086684" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086684() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test086684"
  },
  "test086685" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086685() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test086685"
  },
  "test110882" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110882() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test110882"
  },
  "test110881" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110881() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test110881"
  },
  "test110880" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110880() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test110880"
  },
  "test052430" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052430() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test052430"
  },
  "test052431" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052431() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test052431"
  },
  "test037288" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037288() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test037288"
  },
  "test037289" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037289() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test037289"
  },
  "test01291" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01291() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\\u0085\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test01291"
  },
  "test01290" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01290() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\\u0085\");\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test01290"
  },
  "test01295" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01295() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\\u0085\");\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test01295"
  },
  "test01294" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01294() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\\u0085\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test01294"
  },
  "test086690" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086690() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test086690"
  },
  "test01293" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01293() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\\u0085\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test01293"
  },
  "test086691" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086691() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test086691"
  },
  "test01292" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01292() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\\u0085\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test01292"
  },
  "test086692" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test086692() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test086692"
  },
  "test01296" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01296() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\\u0085\");\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test01296"
  },
  "test052425" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052425() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test052425"
  },
  "test110874" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110874() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test110874"
  },
  "test052426" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052426() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test052426"
  },
  "test052427" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052427() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test052427"
  },
  "test135951" : {
    "methodSignature" : "public boolean isCommentMarkerSet()",
    "methodName" : "isCommentMarkerSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test135951() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isCommentMarkerSet();\n}",
    "testName" : "test135951"
  },
  "test01289" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01289() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\\u0085\");\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test01289"
  },
  "test052428" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052428() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test052428"
  },
  "test052423" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052423() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test052423"
  },
  "test052424" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test052424() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test052424"
  },
  "test110879" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110879() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test110879"
  },
  "test037286" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037286() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test037286"
  },
  "test110878" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110878() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test110878"
  },
  "test037287" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037287() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test037287"
  },
  "test110877" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110877() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test110877"
  },
  "test110876" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110876() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test110876"
  },
  "test110875" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test110875() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test110875"
  },
  "test065525" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065525() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test065525"
  },
  "test1951196" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951196() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    PipedReader pipedReader0 = new PipedReader();\n    cSVFormat1.parse(pipedReader0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1951196"
  },
  "test1951197" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951197() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    PipedReader pipedReader0 = new PipedReader();\n    cSVFormat1.parse(pipedReader0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1951197"
  },
  "test065529" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065529() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test065529"
  },
  "test065528" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065528() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test065528"
  },
  "test065527" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065527() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test065527"
  },
  "test065526" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test065526() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test065526"
  },
  "test1951190" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951190() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    PipedReader pipedReader0 = new PipedReader();\n    cSVFormat1.parse(pipedReader0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1951190"
  },
  "test1951191" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951191() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    PipedReader pipedReader0 = new PipedReader();\n    cSVFormat1.parse(pipedReader0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1951191"
  },
  "test01288" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01288() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\\u0085\");\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test01288"
  },
  "test1951192" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951192() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    PipedReader pipedReader0 = new PipedReader();\n    cSVFormat1.parse(pipedReader0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1951192"
  },
  "test01287" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01287() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\\u0085\");\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test01287"
  },
  "test1951193" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951193() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    PipedReader pipedReader0 = new PipedReader();\n    cSVFormat1.parse(pipedReader0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1951193"
  },
  "test1951194" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951194() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    PipedReader pipedReader0 = new PipedReader();\n    cSVFormat1.parse(pipedReader0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1951194"
  },
  "test1951195" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951195() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    PipedReader pipedReader0 = new PipedReader();\n    cSVFormat1.parse(pipedReader0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1951195"
  },
  "test037290" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037290() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test037290"
  },
  "test037293" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037293() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test037293"
  },
  "test037294" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037294() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test037294"
  },
  "test037291" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037291() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test037291"
  },
  "test037292" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037292() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test037292"
  },
  "test041327" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041327() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test041327"
  },
  "test041326" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041326() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test041326"
  },
  "test041329" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041329() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test041329"
  },
  "test041328" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041328() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test041328"
  },
  "test1951188" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951188() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1951188"
  },
  "test041323" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041323() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test041323"
  },
  "test1951189" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1951189() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1951189"
  },
  "test041322" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041322() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test041322"
  },
  "test041325" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041325() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test041325"
  },
  "test041324" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041324() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test041324"
  },
  "test145977" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test145977() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String string0 = cSVFormat0.getNullString();\n}",
    "testName" : "test145977"
  },
  "test102814" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102814() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test102814"
  },
  "test102815" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102815() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test102815"
  },
  "test102812" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102812() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test102812"
  },
  "test102813" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102813() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test102813"
  },
  "test102818" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102818() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test102818"
  },
  "test102819" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102819() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test102819"
  },
  "test102816" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102816() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test102816"
  },
  "test102817" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102817() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test102817"
  },
  "test060490" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060490() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test060490"
  },
  "test060492" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060492() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test060492"
  },
  "test102810" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102810() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test102810"
  },
  "test060491" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060491() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test060491"
  },
  "test102811" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test102811() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test102811"
  },
  "test060493" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060493() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test060493"
  },
  "test076601" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076601() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test076601"
  },
  "test097783" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097783() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);\n    cSVFormat3.equals((Object) cSVFormat2);\n}",
    "testName" : "test097783"
  },
  "test073575" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073575() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test073575"
  },
  "test076602" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076602() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test076602"
  },
  "test073576" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073576() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test073576"
  },
  "test097781" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097781() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);\n    cSVFormat3.equals((Object) cSVFormat1);\n}",
    "testName" : "test097781"
  },
  "test073577" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073577() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test073577"
  },
  "test076600" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076600() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test076600"
  },
  "test097782" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097782() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test097782"
  },
  "test073578" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073578() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test073578"
  },
  "test076605" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076605() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test076605"
  },
  "test073579" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073579() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test073579"
  },
  "test097780" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097780() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test097780"
  },
  "test076603" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076603() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test076603"
  },
  "test076604" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076604() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test076604"
  },
  "test063512" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063512() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test063512"
  },
  "test060489" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060489() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test060489"
  },
  "test016124" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016124() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf(']');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test016124"
  },
  "test060488" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test060488() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test060488"
  },
  "test063513" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063513() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test063513"
  },
  "test063514" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test063514() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    Object[] objectArray0 = new Object[9];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test063514"
  },
  "test147979" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test147979() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test147979"
  },
  "test125920" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test125920() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    PipedReader pipedReader0 = new PipedReader();\n    cSVFormat1.parse(pipedReader0);\n}",
    "testName" : "test125920"
  },
  "test027205" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027205() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('9');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test027205"
  },
  "test027206" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027206() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('9');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test027206"
  },
  "test097773" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097773() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test097773"
  },
  "test027207" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027207() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('9');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test027207"
  },
  "test027208" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027208() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('9');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test027208"
  },
  "test027201" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027201() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('9');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test027201"
  },
  "test027202" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027202() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('9');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test027202"
  },
  "test027203" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027203() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('9');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test027203"
  },
  "test027204" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027204() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('9');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test027204"
  },
  "test016121" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016121() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf(']');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test016121"
  },
  "test016120" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016120() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf(']');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test016120"
  },
  "test016123" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016123() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf(']');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test016123"
  },
  "test097778" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097778() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test097778"
  },
  "test016122" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016122() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf(']');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test016122"
  },
  "test073580" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073580() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test073580"
  },
  "test097779" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097779() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test097779"
  },
  "test027209" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027209() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('9');\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test027209"
  },
  "test073581" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073581() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test073581"
  },
  "test097776" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097776() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test097776"
  },
  "test073582" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073582() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test073582"
  },
  "test097777" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097777() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test097777"
  },
  "test1961198" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1961198() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Object[] objectArray0 = new Object[2];\n    String string0 = cSVFormat0.format(objectArray0);\n}",
    "testName" : "test1961198"
  },
  "test073583" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073583() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test073583"
  },
  "test097774" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097774() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);\n    cSVFormat3.getRecordSeparator();\n}",
    "testName" : "test097774"
  },
  "test073584" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test073584() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test073584"
  },
  "test097775" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test097775() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test097775"
  },
  "test016118" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016118() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf(']');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test016118"
  },
  "test016117" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016117() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf(']');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test016117"
  },
  "test016119" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016119() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf(']');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test016119"
  },
  "test024181" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024181() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Character character1 = new Character('=');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test024181"
  },
  "test048390" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048390() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test048390"
  },
  "test024182" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024182() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Character character1 = new Character('=');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test024182"
  },
  "test048391" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048391() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();\n    cSVFormat3.equals((Object) cSVFormat2);\n}",
    "testName" : "test048391"
  },
  "test048392" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048392() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test048392"
  },
  "test024180" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024180() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Character character1 = new Character('=');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test024180"
  },
  "test024185" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024185() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Character character1 = new Character('=');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test024185"
  },
  "test024186" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024186() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Character character1 = new Character('=');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test024186"
  },
  "test024183" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024183() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Character character1 = new Character('=');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test024183"
  },
  "test024184" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024184() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Character character1 = new Character('=');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test024184"
  },
  "test024187" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024187() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Character character1 = new Character('=');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test024187"
  },
  "test024188" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024188() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Character character1 = new Character('=');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test024188"
  },
  "test157996" : {
    "methodSignature" : "public CSVFormat withQuote(final char quoteChar)",
    "methodName" : "withQuote",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test157996() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(')');\n    cSVFormat1.withQuote(')');\n}",
    "testName" : "test157996"
  },
  "test112886" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test112886() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test112886"
  },
  "test048383" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048383() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test048383"
  },
  "test048384" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048384() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test048384"
  },
  "test048385" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048385() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();\n    cSVFormat3.equals((Object) cSVFormat1);\n}",
    "testName" : "test048385"
  },
  "test048386" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048386() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test048386"
  },
  "test048387" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048387() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test048387"
  },
  "test048388" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048388() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test048388"
  },
  "test048389" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048389() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test048389"
  },
  "test050408" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050408() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test050408"
  },
  "test084669" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084669() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test084669"
  },
  "test050407" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050407() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test050407"
  },
  "test084668" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084668() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test084668"
  },
  "test050406" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050406() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test050406"
  },
  "test084667" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084667() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test084667"
  },
  "test050405" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050405() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test050405"
  },
  "test084666" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084666() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test084666"
  },
  "test084665" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084665() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test084665"
  },
  "test050409" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050409() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test050409"
  },
  "test050411" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050411() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test050411"
  },
  "test050410" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050410() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test050410"
  },
  "test050413" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050413() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test050413"
  },
  "test050412" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050412() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test050412"
  },
  "test035265" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035265() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test035265"
  },
  "test084672" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084672() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test084672"
  },
  "test1791105" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791105() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test1791105"
  },
  "test084671" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084671() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test084671"
  },
  "test1791106" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791106() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1791106"
  },
  "test035267" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035267() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test035267"
  },
  "test084670" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084670() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test084670"
  },
  "test087700" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087700() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test087700"
  },
  "test1791103" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791103() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1791103"
  },
  "test035266" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035266() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test035266"
  },
  "test087701" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087701() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test087701"
  },
  "test1791104" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791104() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1791104"
  },
  "test035269" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035269() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test035269"
  },
  "test1791101" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791101() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1791101"
  },
  "test035268" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035268() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test035268"
  },
  "test1791102" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791102() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1791102"
  },
  "test1791100" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791100() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test1791100"
  },
  "test1791107" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791107() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1791107"
  },
  "test084673" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test084673() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test084673"
  },
  "test059485" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059485() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test059485"
  },
  "test059484" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059484() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test059484"
  },
  "test038300" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038300() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test038300"
  },
  "test059483" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059483() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test059483"
  },
  "test059482" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059482() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test059482"
  },
  "test059481" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059481() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test059481"
  },
  "test1731051" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731051() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test1731051"
  },
  "test1731052" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731052() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1731052"
  },
  "test071569" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071569() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test071569"
  },
  "test1731050" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731050() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1731050"
  },
  "test108859" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108859() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test108859"
  },
  "test108858" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108858() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test108858"
  },
  "test108855" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108855() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test108855"
  },
  "test108854" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108854() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test108854"
  },
  "test108857" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108857() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test108857"
  },
  "test108856" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108856() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test108856"
  },
  "test071571" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071571() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test071571"
  },
  "test071570" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071570() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test071570"
  },
  "test1741060" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1741060() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1741060"
  },
  "test122917" : {
    "methodSignature" : "public CSVFormat withCommentMarker(final Character commentMarker)",
    "methodName" : "withCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test122917() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = new Character('O');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    cSVFormat1.withCommentMarker(character0);\n}",
    "testName" : "test122917"
  },
  "test1741061" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1741061() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1741061"
  },
  "test035270" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035270() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test035270"
  },
  "test035272" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035272() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test035272"
  },
  "test035271" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035271() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test035271"
  },
  "test035274" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035274() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test035274"
  },
  "test059487" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059487() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test059487"
  },
  "test035273" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035273() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"krB-k'{\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test035273"
  },
  "test059486" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059486() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test059486"
  },
  "test1901161" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1901161() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1901161"
  },
  "test1901160" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1901160() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1901160"
  },
  "test132939" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test132939() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test132939"
  },
  "test1731048" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731048() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1731048"
  },
  "test1731049" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731049() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1731049"
  },
  "test1731047" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1731047() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1731047"
  },
  "test108862" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108862() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test108862"
  },
  "test108861" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108861() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test108861"
  },
  "test108863" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108863() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test108863"
  },
  "test108860" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test108860() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"TDF\");\n    String string0 = cSVFormat1.getNullString();\n}",
    "testName" : "test108860"
  },
  "test014111" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test014111"
  },
  "test061501" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061501() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test061501"
  },
  "test014112" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test014112"
  },
  "test061500" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061500() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test061500"
  },
  "test014113" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014113() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test014113"
  },
  "test061502" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061502() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test061502"
  },
  "test144976" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test144976() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = cSVFormat0.getCommentMarker();\n}",
    "testName" : "test144976"
  },
  "test095760" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095760() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test095760"
  },
  "test014110" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014110() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test014110"
  },
  "test095762" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095762() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test095762"
  },
  "test095761" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095761() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test095761"
  },
  "test095763" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test095763() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test095763"
  },
  "test057471" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057471() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test057471"
  },
  "test057472" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057472() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test057472"
  },
  "test014106" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014106() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test014106"
  },
  "test014107" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014107() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test014107"
  },
  "test057470" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057470() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test057470"
  },
  "test014108" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014108() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test014108"
  },
  "test014109" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014109() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator(\"\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test014109"
  },
  "test134942" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134942() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test134942"
  },
  "test134941" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134941() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test134941"
  },
  "test071568" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071568() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test071568"
  },
  "test134948" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134948() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test134948"
  },
  "test071567" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071567() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test071567"
  },
  "test134947" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134947() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test134947"
  },
  "test057477" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057477() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test057477"
  },
  "test071566" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071566() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test071566"
  },
  "test071565" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071565() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test071565"
  },
  "test134949" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134949() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test134949"
  },
  "test057475" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057475() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test057475"
  },
  "test071564" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test071564() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test071564"
  },
  "test134944" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134944() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test134944"
  },
  "test057476" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057476() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test057476"
  },
  "test134943" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134943() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test134943"
  },
  "test057473" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057473() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test057473"
  },
  "test134946" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134946() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test134946"
  },
  "test057474" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057474() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test057474"
  },
  "test134945" : {
    "methodSignature" : "public boolean isCommentMarkerSet()",
    "methodName" : "isCommentMarkerSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134945() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n}",
    "testName" : "test134945"
  },
  "test022162" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022162() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test022162"
  },
  "test022164" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022164() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test022164"
  },
  "test049400" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049400() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test049400"
  },
  "test022163" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022163() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test022163"
  },
  "test022166" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022166() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test022166"
  },
  "test049402" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049402() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test049402"
  },
  "test022165" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022165() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test022165"
  },
  "test049401" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049401() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test049401"
  },
  "test022168" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022168() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test022168"
  },
  "test049404" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049404() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test049404"
  },
  "test022167" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022167() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test022167"
  },
  "test049403" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049403() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test049403"
  },
  "test022169" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022169() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test022169"
  },
  "test046375" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046375() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test046375"
  },
  "test046374" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046374() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test046374"
  },
  "test046373" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046373() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test046373"
  },
  "test046372" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046372() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test046372"
  },
  "test1721040" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721040() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getHeaderComments();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1721040"
  },
  "test046371" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046371() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test046371"
  },
  "test1721041" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721041() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getHeaderComments();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1721041"
  },
  "test1721042" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721042() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getHeaderComments();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1721042"
  },
  "test154993" : {
    "methodSignature" : "public CSVFormat withEscape(final char escape)",
    "methodName" : "withEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test154993() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');\n    cSVFormat1.withEscape('(');\n}",
    "testName" : "test154993"
  },
  "test1721043" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721043() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getHeaderComments();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1721043"
  },
  "test1721044" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721044() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getHeaderComments();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1721044"
  },
  "test1721045" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721045() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getHeaderComments();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test1721045"
  },
  "test1721046" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1721046() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getHeaderComments();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test1721046"
  },
  "test082645" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082645() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test082645"
  },
  "test044361" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044361() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test044361"
  },
  "test044360" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044360() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test044360"
  },
  "test130931" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130931() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"S9!tjmt06ctf:57#Z\");\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat2.isNullStringSet();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test130931"
  },
  "test130930" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130930() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"S9!tjmt06ctf:57#Z\");\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat2.isNullStringSet();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test130930"
  },
  "test130935" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130935() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"S9!tjmt06ctf:57#Z\");\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat2.isNullStringSet();\n    cSVFormat2.getNullString();\n}",
    "testName" : "test130935"
  },
  "test130934" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130934() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"S9!tjmt06ctf:57#Z\");\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat2.isNullStringSet();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test130934"
  },
  "test130933" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130933() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"S9!tjmt06ctf:57#Z\");\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat2.isNullStringSet();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test130933"
  },
  "test130932" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130932() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"S9!tjmt06ctf:57#Z\");\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat2.isNullStringSet();\n}",
    "testName" : "test130932"
  },
  "test129928" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129928() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.isQuoteCharacterSet();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test129928"
  },
  "test129927" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129927() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.isQuoteCharacterSet();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test129927"
  },
  "test130937" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130937() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"S9!tjmt06ctf:57#Z\");\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat2.isNullStringSet();\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test130937"
  },
  "test129929" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129929() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.isQuoteCharacterSet();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test129929"
  },
  "test130936" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test130936() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"S9!tjmt06ctf:57#Z\");\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    boolean boolean0 = cSVFormat2.isNullStringSet();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test130936"
  },
  "test1711039" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711039() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1711039"
  },
  "test082653" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082653() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test082653"
  },
  "test082654" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082654() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test082654"
  },
  "test1711038" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1711038() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.hashCode();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1711038"
  },
  "test082651" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082651() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test082651"
  },
  "test129924" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129924() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.isQuoteCharacterSet();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test129924"
  },
  "test082652" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082652() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test082652"
  },
  "test129926" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129926() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.isQuoteCharacterSet();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test129926"
  },
  "test082650" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082650() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test082650"
  },
  "test129925" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test129925() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.isQuoteCharacterSet();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test129925"
  },
  "test00752" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00752() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test00752"
  },
  "test00753" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00753() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00753"
  },
  "test00750" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00750() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00750"
  },
  "test00751" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00751() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00751"
  },
  "test082648" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082648() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');\n    cSVFormat2.getNullString();\n}",
    "testName" : "test082648"
  },
  "test082649" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082649() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test082649"
  },
  "test00754" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00754() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getNullString();\n}",
    "testName" : "test00754"
  },
  "test082646" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082646() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test082646"
  },
  "test00755" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00755() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test00755"
  },
  "test082647" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test082647() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test082647"
  },
  "test033252" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033252() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('5');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"N(686|R}S{Y&2\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test033252"
  },
  "test033253" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033253() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('5');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"N(686|R}S{Y&2\");\n    cSVFormat2.getNullString();\n}",
    "testName" : "test033253"
  },
  "test033254" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033254() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('5');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"N(686|R}S{Y&2\");\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test033254"
  },
  "test033255" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033255() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('5');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"N(686|R}S{Y&2\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test033255"
  },
  "test033256" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033256() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('5');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"N(686|R}S{Y&2\");\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test033256"
  },
  "test033257" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033257() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('5');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"N(686|R}S{Y&2\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test033257"
  },
  "test033258" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033258() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('5');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"N(686|R}S{Y&2\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test033258"
  },
  "test033259" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033259() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('5');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"N(686|R}S{Y&2\");\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test033259"
  },
  "test019140" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019140() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test019140"
  },
  "test00745" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00745() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00745"
  },
  "test00746" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00746() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00746"
  },
  "test139963" : {
    "methodSignature" : "public QuoteMode getQuoteMode()",
    "methodName" : "getQuoteMode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test139963() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    cSVFormat0.getQuoteMode();\n}",
    "testName" : "test139963"
  },
  "test00749" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00749() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00749"
  },
  "test057468" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057468() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test057468"
  },
  "test057469" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057469() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test057469"
  },
  "test00747" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00747() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00747"
  },
  "test019145" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019145() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test019145"
  },
  "test00748" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00748() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00748"
  },
  "test057467" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test057467() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test057467"
  },
  "test019143" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019143() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test019143"
  },
  "test019144" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019144() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test019144"
  },
  "test019141" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019141() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test019141"
  },
  "test119914" : {
    "methodSignature" : "public CSVFormat withHeader(final ResultSet resultSet) throws SQLException",
    "methodName" : "withHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test119914() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());\n    doReturn((-3419)).when(resultSetMetaData0).getColumnCount();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(resultSetMetaData0).when(resultSet0).getMetaData();\n    cSVFormat0.EXCEL.withHeader(resultSet0);\n}",
    "testName" : "test119914"
  },
  "test019142" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019142() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test019142"
  },
  "test093749" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093749() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test093749"
  },
  "test093745" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093745() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test093745"
  },
  "test093746" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093746() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test093746"
  },
  "test093747" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093747() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test093747"
  },
  "test019139" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019139() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test019139"
  },
  "test093748" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093748() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test093748"
  },
  "test106845" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106845() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test106845"
  },
  "test106846" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106846() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test106846"
  },
  "test106847" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106847() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test106847"
  },
  "test106842" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106842() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test106842"
  },
  "test140964" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test140964() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = cSVFormat0.getQuoteCharacter();\n}",
    "testName" : "test140964"
  },
  "test106843" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106843() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test106843"
  },
  "test106844" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test106844() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');\n    QuoteMode quoteMode0 = QuoteMode.MINIMAL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);\n    cSVFormat1.getQuoteMode();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test106844"
  },
  "test00970" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00970() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00970"
  },
  "test00971" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00971() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00971"
  },
  "test033260" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033260() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('5');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"N(686|R}S{Y&2\");\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test033260"
  },
  "test033261" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033261() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('5');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"N(686|R}S{Y&2\");\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test033261"
  },
  "test1901159" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1901159() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1901159"
  },
  "test1921168" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921168() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1921168"
  },
  "test00966" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00966() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00966"
  },
  "test120915" : {
    "methodSignature" : "public CSVFormat withHeader(final ResultSet resultSet) throws SQLException",
    "methodName" : "withHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test120915() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());\n    doReturn(477).when(resultSetMetaData0).getColumnCount();\n    doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(resultSetMetaData0).when(resultSet0).getMetaData();\n    cSVFormat0.EXCEL.withHeader(resultSet0);\n}",
    "testName" : "test120915"
  },
  "test1921169" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921169() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1921169"
  },
  "test00969" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00969() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00969"
  },
  "test093741" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093741() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test093741"
  },
  "test093742" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093742() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test093742"
  },
  "test00967" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00967() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test00967"
  },
  "test093743" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093743() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test093743"
  },
  "test00968" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00968() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00968"
  },
  "test093744" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093744() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test093744"
  },
  "test093740" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test093740() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test093740"
  },
  "test116893" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116893() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test116893"
  },
  "test116894" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116894() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test116894"
  },
  "test116892" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116892() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test116892"
  },
  "test142966" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test142966() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test142966"
  },
  "test1701037" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1701037() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    cSVFormat0.MYSQL.hashCode();\n}",
    "testName" : "test1701037"
  },
  "test055454" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055454() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test055454"
  },
  "test116897" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116897() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test116897"
  },
  "test1921175" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921175() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1921175"
  },
  "test055453" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055453() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test055453"
  },
  "test116895" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116895() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test116895"
  },
  "test1921173" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921173() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1921173"
  },
  "test116896" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test116896() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test116896"
  },
  "test1921174" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921174() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1921174"
  },
  "test055450" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055450() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test055450"
  },
  "test1921171" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921171() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1921171"
  },
  "test1921172" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921172() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test1921172"
  },
  "test055452" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055452() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test055452"
  },
  "test055451" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055451() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test055451"
  },
  "test1921170" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1921170() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1921170"
  },
  "test080641" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080641() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test080641"
  },
  "test080640" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080640() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test080640"
  },
  "test080638" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080638() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test080638"
  },
  "test080637" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080637() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test080637"
  },
  "test080639" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080639() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test080639"
  },
  "test080634" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080634() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test080634"
  },
  "test080633" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080633() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test080633"
  },
  "test080636" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080636() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test080636"
  },
  "test020146" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020146() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test020146"
  },
  "test080635" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test080635() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test080635"
  },
  "test020147" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020147() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test020147"
  },
  "test020148" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020148() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test020148"
  },
  "test020149" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020149() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test020149"
  },
  "test068547" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068547() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test068547"
  },
  "test068548" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068548() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test068548"
  },
  "test044358" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044358() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test044358"
  },
  "test068549" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test068549() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test068549"
  },
  "test044359" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044359() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test044359"
  },
  "test1911167" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1911167() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);\n    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1911167"
  },
  "test044356" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044356() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test044356"
  },
  "test1911166" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1911166() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);\n    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');\n    cSVFormat3.equals((Object) cSVFormat1);\n}",
    "testName" : "test1911166"
  },
  "test044357" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044357() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test044357"
  },
  "test1911165" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1911165() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);\n    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');\n    cSVFormat4.getAllowMissingColumnNames();\n}",
    "testName" : "test1911165"
  },
  "test044354" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044354() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test044354"
  },
  "test1911164" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1911164() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);\n    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');\n    cSVFormat4.getDelimiter();\n}",
    "testName" : "test1911164"
  },
  "test044355" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044355() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test044355"
  },
  "test1911163" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1911163() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);\n    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');\n    cSVFormat3.equals((Object) cSVFormat0);\n}",
    "testName" : "test1911163"
  },
  "test044352" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044352() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test044352"
  },
  "test1911162" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1911162() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);\n    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1911162"
  },
  "test044353" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044353() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test044353"
  },
  "test044350" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044350() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test044350"
  },
  "test044351" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044351() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test044351"
  },
  "test020150" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020150() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test020150"
  },
  "test020151" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020151() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test020151"
  },
  "test020152" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020152() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test020152"
  },
  "test020153" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020153() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Character character0 = new Character('x');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test020153"
  },
  "test0002" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0002() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test0002"
  },
  "test1781092" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781092() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1781092"
  },
  "test0003" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0003() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test0003"
  },
  "test100799" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100799() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('u');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test100799"
  },
  "test1781093" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781093() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1781093"
  },
  "test0004" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0004() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test0004"
  },
  "test103824" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103824() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat3.getEscapeCharacter();\n}",
    "testName" : "test103824"
  },
  "test1781094" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781094() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getCommentMarker();\n}",
    "testName" : "test1781094"
  },
  "test103825" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103825() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test103825"
  },
  "test1781095" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781095() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1781095"
  },
  "test1781096" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781096() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1781096"
  },
  "test0000" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test0000"
  },
  "test0001" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0001() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test0001"
  },
  "test100796" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100796() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('u');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test100796"
  },
  "test103822" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103822() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat3.equals((Object) cSVFormat2);\n}",
    "testName" : "test103822"
  },
  "test100795" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100795() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('u');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test100795"
  },
  "test103823" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103823() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test103823"
  },
  "test100798" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100798() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('u');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test100798"
  },
  "test103820" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103820() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test103820"
  },
  "test1781090" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781090() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1781090"
  },
  "test100797" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100797() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('u');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test100797"
  },
  "test103821" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test103821() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');\n    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test103821"
  },
  "test1781091" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781091() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test1781091"
  },
  "test079630" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079630() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test079630"
  },
  "test1781089" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781089() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1781089"
  },
  "test079632" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079632() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.getCommentMarker();\n}",
    "testName" : "test079632"
  },
  "test079631" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079631() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test079631"
  },
  "test0015" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0015() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test0015"
  },
  "test0016" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0016() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test0016"
  },
  "test1781087" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781087() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1781087"
  },
  "test1781088" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1781088() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1781088"
  },
  "test066540" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066540() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test066540"
  },
  "test0017" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0017() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test0017"
  },
  "test0018" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0018() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test0018"
  },
  "test066543" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066543() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test066543"
  },
  "test0019" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0019() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test0019"
  },
  "test066542" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066542() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test066542"
  },
  "test066541" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066541() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test066541"
  },
  "test017133" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017133() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test017133"
  },
  "test017132" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017132() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test017132"
  },
  "test017134" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017134() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test017134"
  },
  "test148980" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test148980() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String string0 = cSVFormat0.getRecordSeparator();\n}",
    "testName" : "test148980"
  },
  "test017131" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017131() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test017131"
  },
  "test017130" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017130() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test017130"
  },
  "test017129" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017129() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test017129"
  },
  "test017126" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017126() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test017126"
  },
  "test017125" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017125() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test017125"
  },
  "test017128" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017128() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test017128"
  },
  "test017127" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017127() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test017127"
  },
  "test00222" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00222() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00222"
  },
  "test00223" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00223() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00223"
  },
  "test031239" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031239() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test031239"
  },
  "test031238" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031238() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test031238"
  },
  "test055447" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055447() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test055447"
  },
  "test031237" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031237() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test031237"
  },
  "test055446" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055446() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getNullString();\n}",
    "testName" : "test055446"
  },
  "test031236" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031236() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test031236"
  },
  "test055449" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055449() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test055449"
  },
  "test031235" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031235() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test031235"
  },
  "test055448" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055448() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test055448"
  },
  "test031234" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031234() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test031234"
  },
  "test055443" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055443() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test055443"
  },
  "test031233" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031233() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test031233"
  },
  "test055445" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055445() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test055445"
  },
  "test055444" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055444() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"lwi!f<\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test055444"
  },
  "test091728" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091728() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    Character character0 = new Character('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test091728"
  },
  "test00220" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00220() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00220"
  },
  "test091729" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091729() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    Character character0 = new Character('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test091729"
  },
  "test00221" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00221() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00221"
  },
  "test079627" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079627() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test079627"
  },
  "test1691034" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1691034() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1691034"
  },
  "test079626" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079626() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test079626"
  },
  "test113889" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113889() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[3];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.getHeaderComments();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test113889"
  },
  "test1691035" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1691035() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1691035"
  },
  "test076599" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076599() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test076599"
  },
  "test079625" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079625() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test079625"
  },
  "test1691033" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1691033() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    cSVFormat1.hashCode();\n    cSVFormat1.getCommentMarker();\n}",
    "testName" : "test1691033"
  },
  "test00217" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00217() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test00217"
  },
  "test00218" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00218() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00218"
  },
  "test158998" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test158998() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test158998"
  },
  "test00215" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00215() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test00215"
  },
  "test079629" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079629() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.getEscapeCharacter();\n}",
    "testName" : "test079629"
  },
  "test158997" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test158997() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.valueOf(\"Excel\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test158997"
  },
  "test1691036" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1691036() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1691036"
  },
  "test00216" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00216() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00216"
  },
  "test079628" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test079628() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test079628"
  },
  "test00219" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00219() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test00219"
  },
  "test091730" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test091730() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    Character character0 = new Character('P');\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test091730"
  },
  "test031242" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031242() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test031242"
  },
  "test031241" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031241() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test031241"
  },
  "test076597" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076597() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test076597"
  },
  "test031240" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031240() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test031240"
  },
  "test076598" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test076598() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test076598"
  },
  "test113888" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113888() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[3];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.getHeaderComments();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test113888"
  },
  "test113887" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test113887() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Object[] objectArray0 = new Object[3];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.getHeaderComments();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test113887"
  },
  "test087698" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087698() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test087698"
  },
  "test087699" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087699() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test087699"
  },
  "test1791099" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791099() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1791099"
  },
  "test087693" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087693() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test087693"
  },
  "test087694" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087694() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test087694"
  },
  "test128923" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test128923() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test128923"
  },
  "test087695" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087695() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test087695"
  },
  "test087696" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087696() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test087696"
  },
  "test087697" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test087697() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    Character character0 = Character.valueOf('%');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test087697"
  },
  "test1771079" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771079() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat2);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1771079"
  },
  "test00433" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00433() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00433"
  },
  "test053437" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053437() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test053437"
  },
  "test1771084" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771084() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat2);\n}",
    "testName" : "test1771084"
  },
  "test00434" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00434() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00434"
  },
  "test053438" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053438() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test053438"
  },
  "test1771085" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771085() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat2);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test1771085"
  },
  "test053439" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053439() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test053439"
  },
  "test1771082" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771082() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat2);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1771082"
  },
  "test00432" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00432() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00432"
  },
  "test1771083" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771083() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat2);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test1771083"
  },
  "test053433" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053433() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test053433"
  },
  "test053434" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053434() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test053434"
  },
  "test053435" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053435() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test053435"
  },
  "test1771086" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771086() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat2);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1771086"
  },
  "test053436" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053436() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test053436"
  },
  "test038295" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038295() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test038295"
  },
  "test053432" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test053432() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test053432"
  },
  "test038298" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038298() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test038298"
  },
  "test1771080" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771080() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat2);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1771080"
  },
  "test038299" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038299() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test038299"
  },
  "test1771081" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771081() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat2);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test1771081"
  },
  "test038296" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038296() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test038296"
  },
  "test038297" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038297() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test038297"
  },
  "test1591000" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1591000() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    Object[] objectArray0 = new Object[2];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test1591000"
  },
  "test066537" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066537() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test066537"
  },
  "test066536" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066536() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test066536"
  },
  "test066535" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066535() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test066535"
  },
  "test066539" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066539() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test066539"
  },
  "test066538" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066538() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test066538"
  },
  "test118908" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118908() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test118908"
  },
  "test118907" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118907() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test118907"
  },
  "test118906" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118906() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test118906"
  },
  "test118905" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118905() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test118905"
  },
  "test1771078" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1771078() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat0.equals(cSVFormat2);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1771078"
  },
  "test118909" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118909() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test118909"
  },
  "test042339" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042339() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test042339"
  },
  "test042338" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042338() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test042338"
  },
  "test105839" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105839() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test105839"
  },
  "test105838" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105838() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test105838"
  },
  "test105837" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105837() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test105837"
  },
  "test042335" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042335() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test042335"
  },
  "test042334" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042334() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test042334"
  },
  "test042337" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042337() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test042337"
  },
  "test042336" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042336() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test042336"
  },
  "test042333" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042333() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test042333"
  },
  "test105836" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105836() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test105836"
  },
  "test138962" : {
    "methodSignature" : "public String[] getHeader()",
    "methodName" : "getHeader",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test138962() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    String[] stringArray0 = cSVFormat0.getHeader();\n}",
    "testName" : "test138962"
  },
  "test101802" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101802() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test101802"
  },
  "test101803" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101803() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test101803"
  },
  "test101801" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101801() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test101801"
  },
  "test01181" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01181() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(\"$6\\u0005i+`jwl\");\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test01181"
  },
  "test101806" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101806() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test101806"
  },
  "test040321" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040321() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test040321"
  },
  "test101807" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101807() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test101807"
  },
  "test101804" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101804() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test101804"
  },
  "test101805" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101805() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat3.isEscapeCharacterSet();\n}",
    "testName" : "test101805"
  },
  "test01185" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01185() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(\"$6\\u0005i+`jwl\");\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test01185"
  },
  "test01184" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01184() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(\"$6\\u0005i+`jwl\");\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test01184"
  },
  "test01183" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01183() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(\"$6\\u0005i+`jwl\");\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test01183"
  },
  "test040320" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040320() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test040320"
  },
  "test077608" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077608() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test077608"
  },
  "test01182" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01182() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(\"$6\\u0005i+`jwl\");\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test01182"
  },
  "test077609" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077609() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test077609"
  },
  "test01186" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01186() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(\"$6\\u0005i+`jwl\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test01186"
  },
  "test077613" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077613() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test077613"
  },
  "test074586" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074586() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test074586"
  },
  "test077614" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077614() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test077614"
  },
  "test077611" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077611() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test077611"
  },
  "test077612" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077612() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test077612"
  },
  "test124919" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test124919() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    cSVFormat0.parse((Reader) null);\n}",
    "testName" : "test124919"
  },
  "test040319" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040319() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test040319"
  },
  "test040318" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040318() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test040318"
  },
  "test077610" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077610() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test077610"
  },
  "test074585" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test074585() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test074585"
  },
  "test061497" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061497() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test061497"
  },
  "test064524" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064524() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"format\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test064524"
  },
  "test015116" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015116() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\");\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test015116"
  },
  "test061496" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061496() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test061496"
  },
  "test064523" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064523() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"format\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test064523"
  },
  "test061499" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061499() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test061499"
  },
  "test064522" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064522() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"format\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test064522"
  },
  "test061498" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061498() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test061498"
  },
  "test064521" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064521() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"format\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test064521"
  },
  "test015115" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015115() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test015115"
  },
  "test015114" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015114() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(\"\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test015114"
  },
  "test1671031" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671031() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1671031"
  },
  "test028210" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028210() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test028210"
  },
  "test1671030" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671030() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1671030"
  },
  "test028211" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028211() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test028211"
  },
  "test028212" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028212() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test028212"
  },
  "test064520" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064520() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"format\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test064520"
  },
  "test061495" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061495() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test061495"
  },
  "test061494" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test061494() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('\\'');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    Object[] objectArray0 = new Object[0];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test061494"
  },
  "test028217" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028217() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test028217"
  },
  "test098785" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098785() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test098785"
  },
  "test028218" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028218() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test028218"
  },
  "test098784" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098784() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test098784"
  },
  "test025189" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025189() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test025189"
  },
  "test1671029" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1671029() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1671029"
  },
  "test028213" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028213() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat2.getQuoteCharacter();\n}",
    "testName" : "test028213"
  },
  "test028214" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028214() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test028214"
  },
  "test028215" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028215() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test028215"
  },
  "test028216" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028216() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test028216"
  },
  "test156995" : {
    "methodSignature" : "public CSVFormat withCommentMarker(final char commentMarker)",
    "methodName" : "withCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test156995() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    cSVFormat0.withCommentMarker('w');\n}",
    "testName" : "test156995"
  },
  "test064519" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064519() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"format\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test064519"
  },
  "test101808" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101808() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test101808"
  },
  "test064518" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064518() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"format\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test064518"
  },
  "test101809" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test101809() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test101809"
  },
  "test098786" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test098786() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test098786"
  },
  "test025190" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025190() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test025190"
  },
  "test025194" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025194() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test025194"
  },
  "test025193" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025193() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test025193"
  },
  "test025192" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025192() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test025192"
  },
  "test025191" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025191() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test025191"
  },
  "test025197" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025197() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test025197"
  },
  "test025196" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025196() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test025196"
  },
  "test025195" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025195() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test025195"
  },
  "test134950" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test134950() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Character character0 = Character.valueOf('0');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    boolean boolean0 = cSVFormat1.isCommentMarkerSet();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test134950"
  },
  "test01399" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01399() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test01399"
  },
  "test1661023" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661023() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    cSVFormat1.hashCode();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1661023"
  },
  "test1761076" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1761076() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1761076"
  },
  "test1761077" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1761077() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test1761077"
  },
  "test1761072" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1761072() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1761072"
  },
  "test1761073" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1761073() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1761073"
  },
  "test1761074" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1761074() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1761074"
  },
  "test1761075" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1761075() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    cSVFormat2.equals(cSVFormat1);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test1761075"
  },
  "test049394" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049394() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test049394"
  },
  "test049393" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049393() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test049393"
  },
  "test1761071" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1761071() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    cSVFormat2.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1761071"
  },
  "test01398" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01398() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test01398"
  },
  "test049396" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049396() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test049396"
  },
  "test01397" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01397() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test01397"
  },
  "test049395" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049395() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test049395"
  },
  "test049398" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049398() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test049398"
  },
  "test049397" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049397() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test049397"
  },
  "test049399" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049399() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\") invalid parse sequence\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test049399"
  },
  "test077606" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077606() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test077606"
  },
  "test077607" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077607() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test077607"
  },
  "test088702" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088702() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test088702"
  },
  "test088704" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088704() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test088704"
  },
  "test088703" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088703() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test088703"
  },
  "test088706" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088706() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test088706"
  },
  "test088705" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088705() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test088705"
  },
  "test051419" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051419() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test051419"
  },
  "test051418" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051418() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test051418"
  },
  "test085679" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085679() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test085679"
  },
  "test051417" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051417() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test051417"
  },
  "test085678" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085678() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test085678"
  },
  "test085677" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085677() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');\n    cSVFormat1.getEscapeCharacter();\n}",
    "testName" : "test085677"
  },
  "test085676" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085676() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test085676"
  },
  "test085675" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085675() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test085675"
  },
  "test085674" : {
    "methodSignature" : "public Character getQuoteCharacter()",
    "methodName" : "getQuoteCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085674() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');\n    cSVFormat1.getQuoteCharacter();\n}",
    "testName" : "test085674"
  },
  "test051422" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051422() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test051422"
  },
  "test051421" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051421() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test051421"
  },
  "test136952" : {
    "methodSignature" : "public String[] getHeaderComments()",
    "methodName" : "getHeaderComments",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test136952() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = cSVFormat0.getHeaderComments();\n}",
    "testName" : "test136952"
  },
  "test051420" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051420() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test051420"
  },
  "test036277" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036277() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('~');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test036277"
  },
  "test039304" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039304() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test039304"
  },
  "test036276" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036276() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('~');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test036276"
  },
  "test039303" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039303() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getNullString();\n}",
    "testName" : "test039303"
  },
  "test088710" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088710() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test088710"
  },
  "test036279" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036279() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('~');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test036279"
  },
  "test039302" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039302() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test039302"
  },
  "test085682" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085682() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test085682"
  },
  "test036278" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036278() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('~');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test036278"
  },
  "test039301" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039301() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test039301"
  },
  "test085681" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085681() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test085681"
  },
  "test039308" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039308() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test039308"
  },
  "test085680" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test085680() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test085680"
  },
  "test039307" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039307() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test039307"
  },
  "test039306" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039306() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test039306"
  },
  "test039305" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039305() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test039305"
  },
  "test039309" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039309() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test039309"
  },
  "test051416" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051416() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test051416"
  },
  "test051415" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051415() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test051415"
  },
  "test051414" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test051414() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test051414"
  },
  "test088708" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088708() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test088708"
  },
  "test088707" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088707() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test088707"
  },
  "test1741053" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1741053() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1741053"
  },
  "test1741054" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1741054() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1741054"
  },
  "test088709" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088709() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test088709"
  },
  "test1741055" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1741055() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1741055"
  },
  "test111883" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111883() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test111883"
  },
  "test1741056" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1741056() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1741056"
  },
  "test111884" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111884() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test111884"
  },
  "test1741057" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1741057() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1741057"
  },
  "test036275" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036275() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('~');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test036275"
  },
  "test111885" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test111885() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test111885"
  },
  "test1741058" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1741058() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test1741058"
  },
  "test1741059" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1741059() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1741059"
  },
  "test039312" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039312() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test039312"
  },
  "test064517" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064517() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"format\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test064517"
  },
  "test064516" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064516() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"format\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test064516"
  },
  "test064515" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test064515() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"format\");\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test064515"
  },
  "test126921" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test126921() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    cSVFormat0.format((Object[]) null);\n}",
    "testName" : "test126921"
  },
  "test146978" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test146978() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = cSVFormat0.getEscapeCharacter();\n}",
    "testName" : "test146978"
  },
  "test1751068" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1751068() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1751068"
  },
  "test1751069" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1751069() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1751069"
  },
  "test1751066" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1751066() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1751066"
  },
  "test1751067" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1751067() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1751067"
  },
  "test1751064" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1751064() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1751064"
  },
  "test1751065" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1751065() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test1751065"
  },
  "test1751062" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1751062() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1751062"
  },
  "test1751063" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1751063() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1751063"
  },
  "test036280" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036280() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('~');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test036280"
  },
  "test1891158" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891158() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1891158"
  },
  "test1891157" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891157() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1891157"
  },
  "test036282" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036282() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('~');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test036282"
  },
  "test1891156" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1891156() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test1891156"
  },
  "test036281" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036281() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('~');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test036281"
  },
  "test1681032" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1681032() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    cSVFormat0.TDF.hashCode();\n}",
    "testName" : "test1681032"
  },
  "test036284" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036284() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('~');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test036284"
  },
  "test039311" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039311() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test039311"
  },
  "test036283" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036283() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('~');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test036283"
  },
  "test039310" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039310() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test039310"
  },
  "test036285" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036285() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf('~');\n    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test036285"
  },
  "test040315" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040315() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test040315"
  },
  "test040314" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040314() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test040314"
  },
  "test040317" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040317() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test040317"
  },
  "test040316" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040316() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test040316"
  },
  "test040313" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040313() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test040313"
  },
  "test1751070" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1751070() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    String[] stringArray0 = new String[3];\n    stringArray0[0] = \"63msK\\\"sU`@JH@kw8\";\n    stringArray0[1] = \"L,d3z4N*9<\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1751070"
  },
  "test013103" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013103() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test013103"
  },
  "test062510" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062510() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test062510"
  },
  "test013104" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013104() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test013104"
  },
  "test062511" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062511() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test062511"
  },
  "test013105" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013105() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test013105"
  },
  "test1801108" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801108() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\\'');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n}",
    "testName" : "test1801108"
  },
  "test013100" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013100() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test013100"
  },
  "test013101" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013101() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test013101"
  },
  "test013102" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013102() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test013102"
  },
  "test143969" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143969() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test143969"
  },
  "test143968" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143968() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test143968"
  },
  "test143967" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143967() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test143967"
  },
  "test096771" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096771() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test096771"
  },
  "test096772" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096772() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test096772"
  },
  "test096770" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096770() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test096770"
  },
  "test062507" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062507() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test062507"
  },
  "test062508" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062508() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test062508"
  },
  "test062505" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062505() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test062505"
  },
  "test062506" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062506() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test062506"
  },
  "test062509" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062509() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test062509"
  },
  "test062503" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062503() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test062503"
  },
  "test143973" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143973() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test143973"
  },
  "test058480" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058480() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test058480"
  },
  "test062504" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test062504() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    Object[] objectArray0 = new Object[6];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test062504"
  },
  "test143972" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143972() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test143972"
  },
  "test143971" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143971() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test143971"
  },
  "test143970" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143970() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test143970"
  },
  "test143975" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143975() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test143975"
  },
  "test143974" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test143974() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test143974"
  },
  "test072573" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072573() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test072573"
  },
  "test072574" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072574() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test072574"
  },
  "test121916" : {
    "methodSignature" : "public CSVFormat withEscape(final Character escape)",
    "methodName" : "withEscape",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test121916() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('P');\n    Character character0 = new Character('P');\n    cSVFormat0.withEscape(character0);\n}",
    "testName" : "test121916"
  },
  "test096768" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096768() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test096768"
  },
  "test096769" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096769() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test096769"
  },
  "test096766" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096766() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test096766"
  },
  "test096767" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096767() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test096767"
  },
  "test096764" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096764() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test096764"
  },
  "test096765" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test096765() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = Character.valueOf(')');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test096765"
  },
  "test072572" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test072572() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test072572"
  },
  "test023170" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023170() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');\n    Character character0 = new Character('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test023170"
  },
  "test047380" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047380() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test047380"
  },
  "test047381" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047381() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test047381"
  },
  "test023173" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023173() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');\n    Character character0 = new Character('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test023173"
  },
  "test047382" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047382() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test047382"
  },
  "test023174" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023174() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');\n    Character character0 = new Character('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test023174"
  },
  "test023171" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023171() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');\n    Character character0 = new Character('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test023171"
  },
  "test023172" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023172() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');\n    Character character0 = new Character('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test023172"
  },
  "test023177" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023177() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');\n    Character character0 = new Character('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test023177"
  },
  "test023178" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023178() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');\n    Character character0 = new Character('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test023178"
  },
  "test023175" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023175() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');\n    Character character0 = new Character('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test023175"
  },
  "test023176" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023176() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');\n    Character character0 = new Character('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test023176"
  },
  "test026200" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026200() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test026200"
  },
  "test153992" : {
    "methodSignature" : "public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy)",
    "methodName" : "withQuoteMode",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test153992() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    cSVFormat0.RFC4180.withQuoteMode(quoteMode0);\n}",
    "testName" : "test153992"
  },
  "test023179" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023179() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');\n    Character character0 = new Character('~');\n    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);\n    QuoteMode quoteMode0 = QuoteMode.NONE;\n    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test023179"
  },
  "test1801112" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\\'');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test1801112"
  },
  "test1801113" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801113() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\\'');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1801113"
  },
  "test1641017" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641017() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1641017"
  },
  "test1881149" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881149() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1881149"
  },
  "test1641016" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1641016() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test1641016"
  },
  "test1801110" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801110() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\\'');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test1801110"
  },
  "test1801111" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801111() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\\'');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.equals((Object) cSVFormat0);\n}",
    "testName" : "test1801111"
  },
  "test1881146" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881146() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1881146"
  },
  "test1881148" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881148() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1881148"
  },
  "test1881147" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881147() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test1881147"
  },
  "test1881153" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881153() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1881153"
  },
  "test047376" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047376() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test047376"
  },
  "test1881152" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881152() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1881152"
  },
  "test047377" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047377() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test047377"
  },
  "test1881155" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881155() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1881155"
  },
  "test047378" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047378() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test047378"
  },
  "test1881154" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881154() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1881154"
  },
  "test047379" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047379() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    Character character0 = new Character(' ');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test047379"
  },
  "test1881151" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881151() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test1881151"
  },
  "test1881150" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1881150() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(\"NONE\");\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getNullString();\n}",
    "testName" : "test1881150"
  },
  "test1801109" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1801109() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\\'');\n    Object[] objectArray0 = new Object[4];\n    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);\n    boolean boolean0 = cSVFormat1.equals(cSVFormat2);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test1801109"
  },
  "test083656" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083656() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test083656"
  },
  "test083657" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083657() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test083657"
  },
  "test083655" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083655() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test083655"
  },
  "test1811114" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811114() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1811114"
  },
  "test045370" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045370() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test045370"
  },
  "test1811118" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811118() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1811118"
  },
  "test1811117" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811117() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1811117"
  },
  "test1811116" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811116() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1811116"
  },
  "test155994" : {
    "methodSignature" : "public CSVFormat withQuote(final Character quoteChar)",
    "methodName" : "withQuote",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test155994() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');\n    Character character0 = Character.valueOf('6');\n    cSVFormat1.withQuote(character0);\n}",
    "testName" : "test155994"
  },
  "test1811115" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811115() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1811115"
  },
  "test100800" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test100800() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('u');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test100800"
  },
  "test1871145" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1871145() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1871145"
  },
  "test083660" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083660() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test083660"
  },
  "test1661028" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661028() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1661028"
  },
  "test1661027" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661027() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1661027"
  },
  "test1661026" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661026() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    cSVFormat1.hashCode();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1661026"
  },
  "test1661025" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661025() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    cSVFormat1.hashCode();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1661025"
  },
  "test1661024" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1661024() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    cSVFormat1.hashCode();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1661024"
  },
  "test1811119" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811119() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n}",
    "testName" : "test1811119"
  },
  "test083663" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083663() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');\n    cSVFormat2.getDelimiter();\n}",
    "testName" : "test083663"
  },
  "test083664" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083664() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test083664"
  },
  "test083661" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083661() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test083661"
  },
  "test083662" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083662() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test083662"
  },
  "test083658" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083658() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test083658"
  },
  "test083659" : {
    "methodSignature" : "public Character getEscapeCharacter()",
    "methodName" : "getEscapeCharacter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test083659() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');\n    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');\n    cSVFormat2.getEscapeCharacter();\n}",
    "testName" : "test083659"
  },
  "test1811121" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811121() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1811121"
  },
  "test1811120" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1811120() throws Throwable {\n    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;\n    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();\n    QuoteMode quoteMode0 = QuoteMode.ALL;\n    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1811120"
  },
  "test034263" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034263() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"i+GE6EAjjvqAW3\");\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test034263"
  },
  "test034264" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034264() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"i+GE6EAjjvqAW3\");\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test034264"
  },
  "test1821132" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821132() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n}",
    "testName" : "test1821132"
  },
  "test070559" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070559() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test070559"
  },
  "test01080" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01080() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test01080"
  },
  "test109867" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109867() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test109867"
  },
  "test109866" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109866() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test109866"
  },
  "test109869" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109869() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getRecordSeparator();\n}",
    "testName" : "test109869"
  },
  "test1821131" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821131() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1821131"
  },
  "test109868" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109868() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test109868"
  },
  "test1821130" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821130() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test1821130"
  },
  "test109865" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109865() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n}",
    "testName" : "test109865"
  },
  "test109864" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109864() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test109864"
  },
  "test133940" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test133940() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test133940"
  },
  "test1821129" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821129() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat0.equals((Object) cSVFormat1);\n}",
    "testName" : "test1821129"
  },
  "test058478" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058478() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test058478"
  },
  "test058479" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test058479() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test058479"
  },
  "test070563" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070563() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test070563"
  },
  "test070562" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070562() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test070562"
  },
  "test070561" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070561() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test070561"
  },
  "test034262" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034262() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);\n    CSVFormat cSVFormat2 = cSVFormat1.withNullString(\"i+GE6EAjjvqAW3\");\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test034262"
  },
  "test070560" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test070560() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test070560"
  },
  "test1651020" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651020() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('0');\n    cSVFormat0.hashCode();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test1651020"
  },
  "test094758" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094758() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test094758"
  },
  "test1651022" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651022() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('0');\n    cSVFormat0.hashCode();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test1651022"
  },
  "test094757" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094757() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test094757"
  },
  "test1651021" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651021() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('0');\n    cSVFormat0.hashCode();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test1651021"
  },
  "test094759" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094759() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test094759"
  },
  "test01075" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01075() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);\n    cSVFormat3.getIgnoreEmptyLines();\n}",
    "testName" : "test01075"
  },
  "test01074" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01074() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);\n    cSVFormat3.getDelimiter();\n}",
    "testName" : "test01074"
  },
  "test01073" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01073() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);\n    cSVFormat3.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test01073"
  },
  "test01072" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01072() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);\n    cSVFormat3.getSkipHeaderRecord();\n}",
    "testName" : "test01072"
  },
  "test01079" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01079() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);\n    cSVFormat3.isNullStringSet();\n}",
    "testName" : "test01079"
  },
  "test01078" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01078() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test01078"
  },
  "test01077" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01077() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);\n    cSVFormat3.getAllowMissingColumnNames();\n}",
    "testName" : "test01077"
  },
  "test01076" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test01076() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"$/G\");\n    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');\n    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);\n    cSVFormat3.isQuoteCharacterSet();\n}",
    "testName" : "test01076"
  },
  "test109873" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109873() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test109873"
  },
  "test109870" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109870() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test109870"
  },
  "test109872" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109872() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test109872"
  },
  "test109871" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test109871() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    String string0 = cSVFormat1.getNullString();\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test109871"
  },
  "test123918" : {
    "methodSignature" : "public CSVPrinter print(final Appendable out) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test123918() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    cSVFormat0.MYSQL.print((Appendable) null);\n}",
    "testName" : "test123918"
  },
  "test1651019" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651019() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('0');\n    cSVFormat0.hashCode();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test1651019"
  },
  "test1651018" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1651018() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('0');\n    cSVFormat0.hashCode();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1651018"
  },
  "test115891" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test115891() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test115891"
  },
  "test105841" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105841() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test105841"
  },
  "test105840" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test105840() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');\n    cSVFormat0.getRecordSeparator();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test105840"
  },
  "test00642" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00642() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test00642"
  },
  "test00643" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00643() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00643"
  },
  "test151990" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test151990() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test151990"
  },
  "test00644" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00644() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test00644"
  },
  "test094754" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094754() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test094754"
  },
  "test094753" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094753() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test094753"
  },
  "test094756" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094756() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test094756"
  },
  "test094755" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094755() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test094755"
  },
  "test094750" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094750() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test094750"
  },
  "test094752" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094752() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test094752"
  },
  "test094751" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test094751() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test094751"
  },
  "test1631013" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631013() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    Object[] objectArray0 = new Object[4];\n    cSVFormat0.MYSQL.format(objectArray0);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test1631013"
  },
  "test1821122" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821122() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test1821122"
  },
  "test1631012" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631012() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    Object[] objectArray0 = new Object[4];\n    cSVFormat0.MYSQL.format(objectArray0);\n    cSVFormat0.isEscapeCharacterSet();\n}",
    "testName" : "test1631012"
  },
  "test056460" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056460() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test056460"
  },
  "test1631015" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631015() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    Object[] objectArray0 = new Object[4];\n    cSVFormat0.MYSQL.format(objectArray0);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test1631015"
  },
  "test1821124" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821124() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1821124"
  },
  "test1631014" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631014() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    Object[] objectArray0 = new Object[4];\n    cSVFormat0.MYSQL.format(objectArray0);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1631014"
  },
  "test1821123" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821123() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test1821123"
  },
  "test1821126" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821126() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1821126"
  },
  "test1821125" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821125() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test1821125"
  },
  "test1631011" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    Object[] objectArray0 = new Object[4];\n    cSVFormat0.MYSQL.format(objectArray0);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test1631011"
  },
  "test1821128" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821128() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test1821128"
  },
  "test1631010" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631010() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    Object[] objectArray0 = new Object[4];\n    cSVFormat0.MYSQL.format(objectArray0);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1631010"
  },
  "test1821127" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821127() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');\n    boolean boolean0 = cSVFormat1.equals(cSVFormat0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1821127"
  },
  "test1861142" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1861142() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Object[] objectArray0 = new Object[4];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1861142"
  },
  "test1861144" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1861144() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Object[] objectArray0 = new Object[4];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test1861144"
  },
  "test1861143" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1861143() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Object[] objectArray0 = new Object[4];\n    objectArray0[0] = (Object) cSVFormat0;\n    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test1861143"
  },
  "test056466" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056466() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test056466"
  },
  "test118911" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118911() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test118911"
  },
  "test056465" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056465() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test056465"
  },
  "test118910" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118910() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test118910"
  },
  "test1631009" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631009() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    Object[] objectArray0 = new Object[4];\n    cSVFormat0.MYSQL.format(objectArray0);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test1631009"
  },
  "test151985" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test151985() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    char char0 = cSVFormat0.getDelimiter();\n}",
    "testName" : "test151985"
  },
  "test056462" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056462() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test056462"
  },
  "test151986" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test151986() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test151986"
  },
  "test056461" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056461() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test056461"
  },
  "test151987" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test151987() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test151987"
  },
  "test056464" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056464() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test056464"
  },
  "test118913" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118913() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test118913"
  },
  "test151988" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test151988() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test151988"
  },
  "test1631008" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1631008() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    cSVFormat0.isQuoteCharacterSet();\n}",
    "testName" : "test1631008"
  },
  "test056463" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056463() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test056463"
  },
  "test118912" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test118912() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();\n    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test118912"
  },
  "test151989" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test151989() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');\n    char char0 = cSVFormat0.getDelimiter();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test151989"
  },
  "test00862" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00862() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test00862"
  },
  "test00863" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00863() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test00863"
  },
  "test00860" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00860() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test00860"
  },
  "test021154" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021154() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test021154"
  },
  "test00861" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00861() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test00861"
  },
  "test021156" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021156() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test021156"
  },
  "test021155" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021155() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test021155"
  },
  "test00864" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00864() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00864"
  },
  "test021158" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021158() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test021158"
  },
  "test00865" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00865() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test00865"
  },
  "test021157" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021157() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test021157"
  },
  "test021159" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021159() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test021159"
  },
  "test045369" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045369() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.equals((Object) cSVFormat1);\n}",
    "testName" : "test045369"
  },
  "test069556" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069556() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getNullString();\n}",
    "testName" : "test069556"
  },
  "test045368" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045368() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test045368"
  },
  "test069555" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069555() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test069555"
  },
  "test045367" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045367() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.isNullStringSet();\n}",
    "testName" : "test045367"
  },
  "test069558" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069558() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test069558"
  },
  "test045366" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045366() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test045366"
  },
  "test069557" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069557() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test069557"
  },
  "test045365" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045365() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreEmptyLines();\n}",
    "testName" : "test045365"
  },
  "test069552" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069552() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test069552"
  },
  "test045364" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045364() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test045364"
  },
  "test069551" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069551() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test069551"
  },
  "test021161" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021161() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test021161"
  },
  "test045363" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045363() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.isQuoteCharacterSet();\n}",
    "testName" : "test045363"
  },
  "test069554" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069554() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test069554"
  },
  "test021160" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021160() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;\n    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test021160"
  },
  "test045362" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045362() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);\n    cSVFormat2.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test045362"
  },
  "test069553" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069553() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test069553"
  },
  "test069550" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test069550() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"t\");\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test069550"
  },
  "test00856" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00856() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test00856"
  },
  "test00859" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00859() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat2.getIgnoreHeaderCase();\n}",
    "testName" : "test00859"
  },
  "test1791097" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791097() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test1791097"
  },
  "test1791098" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1791098() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');\n    boolean boolean0 = cSVFormat0.equals(cSVFormat1);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1791098"
  },
  "test00857" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00857() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test00857"
  },
  "test00858" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00858() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Character character0 = new Character('F');\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test00858"
  },
  "test1831133" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1831133() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.equals(\"63msK\\\"sU`@JH@kw8\");\n}",
    "testName" : "test1831133"
  },
  "test131938" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test131938() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.isNullStringSet();\n}",
    "testName" : "test131938"
  },
  "test081642" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081642() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    Character character0 = new Character(')');\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat2.getAllowMissingColumnNames();\n}",
    "testName" : "test081642"
  },
  "test081644" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081644() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    Character character0 = new Character(')');\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat1.equals((Object) cSVFormat0);\n}",
    "testName" : "test081644"
  },
  "test081643" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test081643() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();\n    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);\n    Character character0 = new Character(')');\n    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);\n    cSVFormat3.getIgnoreHeaderCase();\n}",
    "testName" : "test081643"
  },
  "test1621007" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621007() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"i+GE6EAjjvqAW3\");\n    String string0 = cSVFormat1.toString();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test1621007"
  },
  "test1621006" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1621006() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"i+GE6EAjjvqAW3\");\n    String string0 = cSVFormat1.toString();\n}",
    "testName" : "test1621006"
  },
  "test1851141" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1851141() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.equals(cSVFormat0);\n}",
    "testName" : "test1851141"
  },
  "test1841140" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841140() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test1841140"
  },
  "test107848" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107848() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test107848"
  },
  "test107849" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107849() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test107849"
  },
  "test141965" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test141965() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    boolean boolean0 = cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test141965"
  },
  "test056459" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056459() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test056459"
  },
  "test1841139" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841139() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test1841139"
  },
  "test032249" : {
    "methodSignature" : "public boolean isNullStringSet()",
    "methodName" : "isNullStringSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032249() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);\n    cSVFormat1.isNullStringSet();\n}",
    "testName" : "test032249"
  },
  "test056458" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056458() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test056458"
  },
  "test1841138" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841138() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test1841138"
  },
  "test032248" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032248() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);\n    cSVFormat1.isEscapeCharacterSet();\n}",
    "testName" : "test032248"
  },
  "test032247" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032247() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test032247"
  },
  "test032246" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032246() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test032246"
  },
  "test056455" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056455() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test056455"
  },
  "test117898" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117898() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test117898"
  },
  "test032245" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032245() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);\n    cSVFormat1.getSkipHeaderRecord();\n}",
    "testName" : "test032245"
  },
  "test117899" : {
    "methodSignature" : "public boolean isQuoteCharacterSet()",
    "methodName" : "isQuoteCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test117899() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = new Character('w');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);\n    cSVFormat1.getCommentMarker();\n    cSVFormat1.isQuoteCharacterSet();\n}",
    "testName" : "test117899"
  },
  "test032244" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032244() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test032244"
  },
  "test056457" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056457() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test056457"
  },
  "test032243" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032243() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test032243"
  },
  "test056456" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056456() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');\n    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();\n    cSVFormat2.getSkipHeaderRecord();\n}",
    "testName" : "test056456"
  },
  "test092737" : {
    "methodSignature" : "public String getRecordSeparator()",
    "methodName" : "getRecordSeparator",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092737() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');\n    cSVFormat2.getRecordSeparator();\n}",
    "testName" : "test092737"
  },
  "test092738" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092738() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');\n    cSVFormat1.getAllowMissingColumnNames();\n}",
    "testName" : "test092738"
  },
  "test092739" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092739() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');\n    cSVFormat1.getDelimiter();\n}",
    "testName" : "test092739"
  },
  "test092733" : {
    "methodSignature" : "public boolean getIgnoreSurroundingSpaces()",
    "methodName" : "getIgnoreSurroundingSpaces",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092733() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');\n    cSVFormat1.getIgnoreSurroundingSpaces();\n}",
    "testName" : "test092733"
  },
  "test092734" : {
    "methodSignature" : "public Character getCommentMarker()",
    "methodName" : "getCommentMarker",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092734() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');\n    cSVFormat2.getCommentMarker();\n}",
    "testName" : "test092734"
  },
  "test092735" : {
    "methodSignature" : "public String getNullString()",
    "methodName" : "getNullString",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092735() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');\n    cSVFormat2.getNullString();\n}",
    "testName" : "test092735"
  },
  "test092736" : {
    "methodSignature" : "public boolean isEscapeCharacterSet()",
    "methodName" : "isEscapeCharacterSet",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test092736() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"\");\n    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');\n    cSVFormat2.isEscapeCharacterSet();\n}",
    "testName" : "test092736"
  },
  "test1841135" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841135() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test1841135"
  },
  "test1841134" : {
    "methodSignature" : "public char getDelimiter()",
    "methodName" : "getDelimiter",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841134() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getDelimiter();\n}",
    "testName" : "test1841134"
  },
  "test1841137" : {
    "methodSignature" : "public boolean equals(final Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841137() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n}",
    "testName" : "test1841137"
  },
  "test1841136" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1841136() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');\n    boolean boolean0 = cSVFormat0.equals((Object) null);\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test1841136"
  },
  "test107853" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107853() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getIgnoreHeaderCase();\n}",
    "testName" : "test107853"
  },
  "test107850" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107850() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getIgnoreEmptyLines();\n}",
    "testName" : "test107850"
  },
  "test107851" : {
    "methodSignature" : "public boolean getAllowMissingColumnNames()",
    "methodName" : "getAllowMissingColumnNames",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107851() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getAllowMissingColumnNames();\n}",
    "testName" : "test107851"
  },
  "test107852" : {
    "methodSignature" : "public boolean getSkipHeaderRecord()",
    "methodName" : "getSkipHeaderRecord",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test107852() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');\n    cSVFormat0.getQuoteCharacter();\n    cSVFormat0.getSkipHeaderRecord();\n}",
    "testName" : "test107852"
  },
  "test032251" : {
    "methodSignature" : "public boolean getIgnoreHeaderCase()",
    "methodName" : "getIgnoreHeaderCase",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032251() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);\n    cSVFormat1.getIgnoreHeaderCase();\n}",
    "testName" : "test032251"
  },
  "test032250" : {
    "methodSignature" : "public boolean getIgnoreEmptyLines()",
    "methodName" : "getIgnoreEmptyLines",
    "className" : "org.apache.commons.csv.CSVFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032250() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);\n    cSVFormat1.getIgnoreEmptyLines();\n}",
    "testName" : "test032250"
  }
}