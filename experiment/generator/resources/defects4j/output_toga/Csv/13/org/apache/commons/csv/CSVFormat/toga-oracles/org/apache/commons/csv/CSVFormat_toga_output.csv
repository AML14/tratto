project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test0001,"public void test0001() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test0002,"public void test0002() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test0003,"public void test0003() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test0004,"public void test0004() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test0015,"public void test0015() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test0016,"public void test0016() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test0017,"public void test0017() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test0018,"public void test0018() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test0019,"public void test0019() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test00110,"public void test00110() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test00111,"public void test00111() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00112,"public void test00112() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test00113,"public void test00113() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('Y', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test00114,"public void test00114() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('Y');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test00215,"public void test00215() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test00216,"public void test00216() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test00217,"public void test00217() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertEquals(""t"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test00218,"public void test00218() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test00219,"public void test00219() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test00220,"public void test00220() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00221,"public void test00221() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00222,"public void test00222() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test00223,"public void test00223() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test00324,"public void test00324() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00325,"public void test00325() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test00326,"public void test00326() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test00327,"public void test00327() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00328,"public void test00328() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test00329,"public void test00329() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test00330,"public void test00330() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test00331,"public void test00331() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test00432,"public void test00432() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test00433,"public void test00433() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test00434,"public void test00434() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00535,"public void test00535() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test00536,"public void test00536() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test00537,"public void test00537() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test00538,"public void test00538() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test00539,"public void test00539() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test00540,"public void test00540() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00541,"public void test00541() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test00642,"public void test00642() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test00643,"public void test00643() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00644,"public void test00644() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(false);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test00745,"public void test00745() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00746,"public void test00746() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00747,"public void test00747() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test00748,"public void test00748() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test00749,"public void test00749() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test00750,"public void test00750() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test00751,"public void test00751() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test00752,"public void test00752() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test00753,"public void test00753() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00754,"public void test00754() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertEquals(""$/G"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test00755,"public void test00755() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test00856,"public void test00856() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('F');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test00857,"public void test00857() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('F');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test00858,"public void test00858() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('F');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00859,"public void test00859() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('F');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test00860,"public void test00860() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('F');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test00861,"public void test00861() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('F');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test00862,"public void test00862() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('F');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test00863,"public void test00863() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('F');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test00864,"public void test00864() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('F');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test00865,"public void test00865() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('F');
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test00966,"public void test00966() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test00967,"public void test00967() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test00968,"public void test00968() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test00969,"public void test00969() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test00970,"public void test00970() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test00971,"public void test00971() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test01072,"public void test01072() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
    assertFalse(cSVFormat3.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat3.getSkipHeaderRecord())
project,0,test01073,"public void test01073() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test01074,"public void test01074() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
    assertEquals(',', cSVFormat3.getDelimiter());
}",0,
project,0,test01075,"public void test01075() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
    assertTrue(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test01076,"public void test01076() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
    assertTrue(cSVFormat3.isQuoteCharacterSet());
}",0,
project,0,test01077,"public void test01077() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat3.getAllowMissingColumnNames())
project,0,test01078,"public void test01078() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
    assertEquals(""?"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test01079,"public void test01079() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
    assertTrue(cSVFormat3.isNullStringSet());
}",0,assertTrue(cSVFormat3.isNullStringSet())
project,0,test01080,"public void test01080() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    CSVFormat cSVFormat3 = cSVFormat2.withRecordSeparator((String) null);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,
project,0,test01181,"public void test01181() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(""$6\u0005i+`jwl"");
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test01182,"public void test01182() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(""$6\u0005i+`jwl"");
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test01183,"public void test01183() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(""$6\u0005i+`jwl"");
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test01184,"public void test01184() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(""$6\u0005i+`jwl"");
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test01185,"public void test01185() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(""$6\u0005i+`jwl"");
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test01186,"public void test01186() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withRecordSeparator(""$6\u0005i+`jwl"");
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test01287,"public void test01287() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""\u0085"");
    assertEquals('b', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test01288,"public void test01288() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""\u0085"");
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test01289,"public void test01289() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""\u0085"");
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test01290,"public void test01290() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""\u0085"");
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test01291,"public void test01291() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""\u0085"");
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test01292,"public void test01292() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""\u0085"");
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test01293,"public void test01293() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""\u0085"");
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test01294,"public void test01294() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""\u0085"");
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test01295,"public void test01295() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""\u0085"");
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test01296,"public void test01296() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator(""\u0085"");
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test01397,"public void test01397() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test01398,"public void test01398() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test01399,"public void test01399() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test013100,"public void test013100() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test013101,"public void test013101() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test013102,"public void test013102() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,
project,0,test013103,"public void test013103() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test013104,"public void test013104() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test013105,"public void test013105() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator((String) null);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test014106,"public void test014106() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test014107,"public void test014107() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test014108,"public void test014108() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test014109,"public void test014109() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test014110,"public void test014110() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test014111,"public void test014111() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test014112,"public void test014112() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test014113,"public void test014113() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator("""");
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test015114,"public void test015114() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("""");
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,
project,0,test015115,"public void test015115() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("""");
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test015116,"public void test015116() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator("""");
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test016117,"public void test016117() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf(']');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test016118,"public void test016118() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf(']');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test016119,"public void test016119() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf(']');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
    assertEquals(""T"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test016120,"public void test016120() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf(']');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test016121,"public void test016121() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf(']');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test016122,"public void test016122() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf(']');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test016123,"public void test016123() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf(']');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test016124,"public void test016124() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = Character.valueOf(']');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('T');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test017125,"public void test017125() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test017126,"public void test017126() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test017127,"public void test017127() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertEquals(""|"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test017128,"public void test017128() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test017129,"public void test017129() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test017130,"public void test017130() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test017131,"public void test017131() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test017132,"public void test017132() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test017133,"public void test017133() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test017134,"public void test017134() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('|');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test018135,"public void test018135() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test018136,"public void test018136() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test018137,"public void test018137() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test018138,"public void test018138() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('Z');
    assertEquals(""Z"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test019139,"public void test019139() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test019140,"public void test019140() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test019141,"public void test019141() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test019142,"public void test019142() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test019143,"public void test019143() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals("""", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test019144,"public void test019144() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test019145,"public void test019145() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test020146,"public void test020146() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('x');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test020147,"public void test020147() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('x');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test020148,"public void test020148() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('x');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test020149,"public void test020149() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('x');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test020150,"public void test020150() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('x');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test020151,"public void test020151() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('x');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,
project,0,test020152,"public void test020152() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('x');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test020153,"public void test020153() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.TDF;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Character character0 = new Character('x');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test021154,"public void test021154() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test021155,"public void test021155() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test021156,"public void test021156() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test021157,"public void test021157() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test021158,"public void test021158() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test021159,"public void test021159() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test021160,"public void test021160() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test021161,"public void test021161() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test022162,"public void test022162() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,
project,0,test022163,"public void test022163() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test022164,"public void test022164() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test022165,"public void test022165() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test022166,"public void test022166() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test022167,"public void test022167() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test022168,"public void test022168() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test022169,"public void test022169() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat2 = cSVFormat1.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test023170,"public void test023170() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
    Character character0 = new Character('~');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test023171,"public void test023171() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
    Character character0 = new Character('~');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    QuoteMode quoteMode0 = QuoteMode.NONE;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test023172,"public void test023172() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
    Character character0 = new Character('~');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    QuoteMode quoteMode0 = QuoteMode.NONE;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test023173,"public void test023173() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
    Character character0 = new Character('~');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    QuoteMode quoteMode0 = QuoteMode.NONE;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertEquals('O', cSVFormat3.getDelimiter());
}",0,assertNotNull(cSVFormat3.getDelimiter())
project,0,test023174,"public void test023174() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
    Character character0 = new Character('~');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    QuoteMode quoteMode0 = QuoteMode.NONE;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test023175,"public void test023175() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
    Character character0 = new Character('~');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    QuoteMode quoteMode0 = QuoteMode.NONE;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test023176,"public void test023176() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
    Character character0 = new Character('~');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    QuoteMode quoteMode0 = QuoteMode.NONE;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertTrue(cSVFormat3.getIgnoreHeaderCase());
}",0,
project,0,test023177,"public void test023177() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
    Character character0 = new Character('~');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    QuoteMode quoteMode0 = QuoteMode.NONE;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test023178,"public void test023178() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
    Character character0 = new Character('~');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    QuoteMode quoteMode0 = QuoteMode.NONE;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test023179,"public void test023179() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('O');
    Character character0 = new Character('~');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    QuoteMode quoteMode0 = QuoteMode.NONE;
    CSVFormat cSVFormat3 = cSVFormat2.withQuoteMode(quoteMode0);
    assertFalse(cSVFormat3.isQuoteCharacterSet());
}",0,
project,0,test024180,"public void test024180() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Character character1 = new Character('=');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test024181,"public void test024181() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Character character1 = new Character('=');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test024182,"public void test024182() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Character character1 = new Character('=');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test024183,"public void test024183() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Character character1 = new Character('=');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test024184,"public void test024184() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Character character1 = new Character('=');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test024185,"public void test024185() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Character character1 = new Character('=');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test024186,"public void test024186() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Character character1 = new Character('=');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test024187,"public void test024187() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Character character1 = new Character('=');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test024188,"public void test024188() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Character character1 = new Character('=');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character1);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test025189,"public void test025189() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test025190,"public void test025190() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,
project,0,test025191,"public void test025191() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test025192,"public void test025192() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test025193,"public void test025193() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test025194,"public void test025194() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test025195,"public void test025195() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test025196,"public void test025196() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test025197,"public void test025197() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test026198,"public void test026198() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test026199,"public void test026199() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test026200,"public void test026200() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test027201,"public void test027201() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('9');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test027202,"public void test027202() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('9');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test027203,"public void test027203() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('9');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test027204,"public void test027204() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('9');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test027205,"public void test027205() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('9');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test027206,"public void test027206() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('9');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test027207,"public void test027207() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('9');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test027208,"public void test027208() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('9');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test027209,"public void test027209() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('9');
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withQuote('9');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote(character0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test028210,"public void test028210() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertEquals('\""', (char) cSVFormat1.getQuoteCharacter());
}",0,
project,0,test028211,"public void test028211() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertEquals('_', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test028212,"public void test028212() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test028213,"public void test028213() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertEquals('_', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test028214,"public void test028214() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test028215,"public void test028215() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test028216,"public void test028216() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test028217,"public void test028217() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test028218,"public void test028218() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('_');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test029219,"public void test029219() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test029220,"public void test029220() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test029221,"public void test029221() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
    assertEquals('*', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test029222,"public void test029222() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test029223,"public void test029223() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
    assertEquals('G', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test029224,"public void test029224() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test029225,"public void test029225() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
    assertEquals('r', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test029226,"public void test029226() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test029227,"public void test029227() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test029228,"public void test029228() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('*');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test030229,"public void test030229() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test030230,"public void test030230() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertEquals('_', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test030231,"public void test030231() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test030232,"public void test030232() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withQuote('_');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test031233,"public void test031233() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test031234,"public void test031234() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test031235,"public void test031235() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test031236,"public void test031236() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test031237,"public void test031237() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test031238,"public void test031238() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test031239,"public void test031239() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
    assertEquals('9', (char) cSVFormat1.getQuoteCharacter());
}",0,
project,0,test031240,"public void test031240() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test031241,"public void test031241() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test031242,"public void test031242() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('9');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test032243,"public void test032243() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test032244,"public void test032244() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test032245,"public void test032245() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test032246,"public void test032246() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test032247,"public void test032247() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test032248,"public void test032248() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test032249,"public void test032249() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test032250,"public void test032250() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test032251,"public void test032251() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString((String) null);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test033252,"public void test033252() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('5');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""N(686|R}S{Y&2"");
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test033253,"public void test033253() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('5');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""N(686|R}S{Y&2"");
    assertEquals(""N(686|R}S{Y&2"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test033254,"public void test033254() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('5');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""N(686|R}S{Y&2"");
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test033255,"public void test033255() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('5');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""N(686|R}S{Y&2"");
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,
project,0,test033256,"public void test033256() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('5');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""N(686|R}S{Y&2"");
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test033257,"public void test033257() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('5');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""N(686|R}S{Y&2"");
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test033258,"public void test033258() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('5');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""N(686|R}S{Y&2"");
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test033259,"public void test033259() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('5');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""N(686|R}S{Y&2"");
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test033260,"public void test033260() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('5');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""N(686|R}S{Y&2"");
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test033261,"public void test033261() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = new Character('5');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""N(686|R}S{Y&2"");
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test034262,"public void test034262() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""i+GE6EAjjvqAW3"");
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test034263,"public void test034263() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""i+GE6EAjjvqAW3"");
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test034264,"public void test034264() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""i+GE6EAjjvqAW3"");
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test035265,"public void test035265() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test035266,"public void test035266() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test035267,"public void test035267() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertEquals(""krB-k'{"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test035268,"public void test035268() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test035269,"public void test035269() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test035270,"public void test035270() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test035271,"public void test035271() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test035272,"public void test035272() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test035273,"public void test035273() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test035274,"public void test035274() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test036275,"public void test036275() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('~');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test036276,"public void test036276() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('~');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test036277,"public void test036277() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('~');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test036278,"public void test036278() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('~');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test036279,"public void test036279() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('~');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test036280,"public void test036280() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('~');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test036281,"public void test036281() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('~');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test036282,"public void test036282() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('~');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test036283,"public void test036283() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('~');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test036284,"public void test036284() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('~');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test036285,"public void test036285() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('~');
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test037286,"public void test037286() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test037287,"public void test037287() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test037288,"public void test037288() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test037289,"public void test037289() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test037290,"public void test037290() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test037291,"public void test037291() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test037292,"public void test037292() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test037293,"public void test037293() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test037294,"public void test037294() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(false);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test038295,"public void test038295() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test038296,"public void test038296() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test038297,"public void test038297() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test038298,"public void test038298() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test038299,"public void test038299() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test038300,"public void test038300() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test039301,"public void test039301() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test039302,"public void test039302() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test039303,"public void test039303() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertEquals("""", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test039304,"public void test039304() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test039305,"public void test039305() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test039306,"public void test039306() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test039307,"public void test039307() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test039308,"public void test039308() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test039309,"public void test039309() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test039310,"public void test039310() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test039311,"public void test039311() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test039312,"public void test039312() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test040313,"public void test040313() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test040314,"public void test040314() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test040315,"public void test040315() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test040316,"public void test040316() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test040317,"public void test040317() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test040318,"public void test040318() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test040319,"public void test040319() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test040320,"public void test040320() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test040321,"public void test040321() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test041322,"public void test041322() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test041323,"public void test041323() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test041324,"public void test041324() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test041325,"public void test041325() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test041326,"public void test041326() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test041327,"public void test041327() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test041328,"public void test041328() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test041329,"public void test041329() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test041330,"public void test041330() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test041331,"public void test041331() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test041332,"public void test041332() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test042333,"public void test042333() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test042334,"public void test042334() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test042335,"public void test042335() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test042336,"public void test042336() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test042337,"public void test042337() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test042338,"public void test042338() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test042339,"public void test042339() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test043340,"public void test043340() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""$VALUES"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test043341,"public void test043341() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""$VALUES"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test043342,"public void test043342() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""$VALUES"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test043343,"public void test043343() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""$VALUES"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertEquals(""$VALUES"", cSVFormat2.getNullString());
}",0,
project,0,test043344,"public void test043344() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""$VALUES"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test043345,"public void test043345() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""$VALUES"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test043346,"public void test043346() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""$VALUES"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test043347,"public void test043347() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""$VALUES"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test043348,"public void test043348() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""$VALUES"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test043349,"public void test043349() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withNullString(""$VALUES"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test044350,"public void test044350() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test044351,"public void test044351() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test044352,"public void test044352() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test044353,"public void test044353() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test044354,"public void test044354() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test044355,"public void test044355() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test044356,"public void test044356() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test044357,"public void test044357() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test044358,"public void test044358() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test044359,"public void test044359() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test044360,"public void test044360() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test044361,"public void test044361() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertEquals('~', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test045362,"public void test045362() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test045363,"public void test045363() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test045364,"public void test045364() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test045365,"public void test045365() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test045366,"public void test045366() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test045367,"public void test045367() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test045368,"public void test045368() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test045369,"public void test045369() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test045370,"public void test045370() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test046371,"public void test046371() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test046372,"public void test046372() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test046373,"public void test046373() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test046374,"public void test046374() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test046375,"public void test046375() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.equals((Object) cSVFormat0));
}",0,
project,0,test047376,"public void test047376() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test047377,"public void test047377() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test047378,"public void test047378() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test047379,"public void test047379() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test047380,"public void test047380() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test047381,"public void test047381() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test047382,"public void test047382() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test048383,"public void test048383() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
    assertFalse(cSVFormat3.isNullStringSet());
}",0,assertTrue(cSVFormat3.isNullStringSet())
project,0,test048384,"public void test048384() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
    assertTrue(cSVFormat3.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat3.isQuoteCharacterSet())
project,0,test048385,"public void test048385() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
    assertFalse(cSVFormat3.equals((Object) cSVFormat1));
}",0,
project,0,test048386,"public void test048386() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test048387,"public void test048387() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test048388,"public void test048388() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
    assertFalse(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test048389,"public void test048389() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
    assertTrue(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test048390,"public void test048390() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
    assertFalse(cSVFormat3.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat3.isEscapeCharacterSet())
project,0,test048391,"public void test048391() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
    assertTrue(cSVFormat3.equals((Object) cSVFormat2));
}",0,
project,0,test048392,"public void test048392() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreHeaderCase();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test049393,"public void test049393() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test049394,"public void test049394() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test049395,"public void test049395() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test049396,"public void test049396() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test049397,"public void test049397() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals("") invalid parse sequence"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test049398,"public void test049398() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test049399,"public void test049399() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test049400,"public void test049400() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test049401,"public void test049401() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test049402,"public void test049402() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test049403,"public void test049403() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat2.isQuoteCharacterSet())
project,0,test049404,"public void test049404() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("") invalid parse sequence"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test050405,"public void test050405() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test050406,"public void test050406() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertEquals('t', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test050407,"public void test050407() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test050408,"public void test050408() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test050409,"public void test050409() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test050410,"public void test050410() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test050411,"public void test050411() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test050412,"public void test050412() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test050413,"public void test050413() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('t');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test051414,"public void test051414() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test051415,"public void test051415() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test051416,"public void test051416() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test051417,"public void test051417() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test051418,"public void test051418() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test051419,"public void test051419() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test051420,"public void test051420() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test051421,"public void test051421() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test051422,"public void test051422() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test052423,"public void test052423() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat3.getIgnoreEmptyLines());
}",0,
project,0,test052424,"public void test052424() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat3.isQuoteCharacterSet());
}",0,
project,0,test052425,"public void test052425() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertEquals('I', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test052426,"public void test052426() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,
project,0,test052427,"public void test052427() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat3.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat3.getSkipHeaderRecord())
project,0,test052428,"public void test052428() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertTrue(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test052429,"public void test052429() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat3.isNullStringSet());
}",0,
project,0,test052430,"public void test052430() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat3.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat3.isEscapeCharacterSet())
project,0,test052431,"public void test052431() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('I');
    CSVFormat cSVFormat3 = cSVFormat2.withIgnoreEmptyLines(false);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test053432,"public void test053432() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test053433,"public void test053433() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test053434,"public void test053434() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test053435,"public void test053435() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,
project,0,test053436,"public void test053436() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test053437,"public void test053437() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.equals((Object) cSVFormat0));
}",0,
project,0,test053438,"public void test053438() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals('\'', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test053439,"public void test053439() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test054440,"public void test054440() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test054441,"public void test054441() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test054442,"public void test054442() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test055443,"public void test055443() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test055444,"public void test055444() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test055445,"public void test055445() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test055446,"public void test055446() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertEquals(""lwi!f<"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test055447,"public void test055447() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test055448,"public void test055448() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test055449,"public void test055449() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test055450,"public void test055450() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test055451,"public void test055451() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test055452,"public void test055452() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test055453,"public void test055453() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test055454,"public void test055454() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.MySQL;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""lwi!f<"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,
project,0,test056455,"public void test056455() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test056456,"public void test056456() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test056457,"public void test056457() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test056458,"public void test056458() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test056459,"public void test056459() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertEquals('b', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test056460,"public void test056460() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test056461,"public void test056461() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test056462,"public void test056462() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test056463,"public void test056463() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test056464,"public void test056464() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test056465,"public void test056465() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test056466,"public void test056466() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('b');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test057467,"public void test057467() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test057468,"public void test057468() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test057469,"public void test057469() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test057470,"public void test057470() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test057471,"public void test057471() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test057472,"public void test057472() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test057473,"public void test057473() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test057474,"public void test057474() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,
project,0,test057475,"public void test057475() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test057476,"public void test057476() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test057477,"public void test057477() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test058478,"public void test058478() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test058479,"public void test058479() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test058480,"public void test058480() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test059481,"public void test059481() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test059482,"public void test059482() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test059483,"public void test059483() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test059484,"public void test059484() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test059485,"public void test059485() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test059486,"public void test059486() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test059487,"public void test059487() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines();
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test060488,"public void test060488() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test060489,"public void test060489() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
    assertEquals("""", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test060490,"public void test060490() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test060491,"public void test060491() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test060492,"public void test060492() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test060493,"public void test060493() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments((Object[]) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test061494,"public void test061494() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test061495,"public void test061495() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test061496,"public void test061496() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test061497,"public void test061497() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test061498,"public void test061498() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat2.isQuoteCharacterSet())
project,0,test061499,"public void test061499() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test061500,"public void test061500() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test061501,"public void test061501() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test061502,"public void test061502() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf('\'');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test062503,"public void test062503() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test062504,"public void test062504() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test062505,"public void test062505() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test062506,"public void test062506() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test062507,"public void test062507() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test062508,"public void test062508() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test062509,"public void test062509() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test062510,"public void test062510() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test062511,"public void test062511() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    Object[] objectArray0 = new Object[6];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test063512,"public void test063512() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Object[] objectArray0 = new Object[9];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test063513,"public void test063513() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Object[] objectArray0 = new Object[9];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test063514,"public void test063514() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    Object[] objectArray0 = new Object[9];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test064515,"public void test064515() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""format"");
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test064516,"public void test064516() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""format"");
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertEquals(""format"", cSVFormat2.getNullString());
}",0,
project,0,test064517,"public void test064517() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""format"");
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test064518,"public void test064518() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""format"");
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test064519,"public void test064519() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""format"");
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test064520,"public void test064520() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""format"");
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test064521,"public void test064521() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""format"");
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test064522,"public void test064522() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""format"");
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test064523,"public void test064523() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""format"");
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test064524,"public void test064524() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""format"");
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test065525,"public void test065525() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertEquals('r', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test065526,"public void test065526() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test065527,"public void test065527() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test065528,"public void test065528() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test065529,"public void test065529() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test065530,"public void test065530() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test065531,"public void test065531() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test065532,"public void test065532() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test065533,"public void test065533() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test065534,"public void test065534() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.DEFAULT.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((String[]) null);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test066535,"public void test066535() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test066536,"public void test066536() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test066537,"public void test066537() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test066538,"public void test066538() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,
project,0,test066539,"public void test066539() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test066540,"public void test066540() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test066541,"public void test066541() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test066542,"public void test066542() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test066543,"public void test066543() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test067544,"public void test067544() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    String[] stringArray0 = new String[2];
    stringArray0[0] = """";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test067545,"public void test067545() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    String[] stringArray0 = new String[2];
    stringArray0[0] = """";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test067546,"public void test067546() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    String[] stringArray0 = new String[2];
    stringArray0[0] = """";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test068547,"public void test068547() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test068548,"public void test068548() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test068549,"public void test068549() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(stringArray0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test069550,"public void test069550() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test069551,"public void test069551() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test069552,"public void test069552() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test069553,"public void test069553() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test069554,"public void test069554() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test069555,"public void test069555() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test069556,"public void test069556() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertEquals(""t"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test069557,"public void test069557() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test069558,"public void test069558() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test070559,"public void test070559() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test070560,"public void test070560() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test070561,"public void test070561() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test070562,"public void test070562() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test070563,"public void test070563() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test071564,"public void test071564() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test071565,"public void test071565() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test071566,"public void test071566() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test071567,"public void test071567() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test071568,"public void test071568() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test071569,"public void test071569() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test071570,"public void test071570() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test071571,"public void test071571() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat2.isQuoteCharacterSet())
project,0,test072572,"public void test072572() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test072573,"public void test072573() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test072574,"public void test072574() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test073575,"public void test073575() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test073576,"public void test073576() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test073577,"public void test073577() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test073578,"public void test073578() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test073579,"public void test073579() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test073580,"public void test073580() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test073581,"public void test073581() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test073582,"public void test073582() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test073583,"public void test073583() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test073584,"public void test073584() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""krB-k'{"");
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertEquals(""krB-k'{"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test074585,"public void test074585() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test074586,"public void test074586() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSet) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test075587,"public void test075587() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test075588,"public void test075588() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test075589,"public void test075589() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test075590,"public void test075590() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test075591,"public void test075591() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test075592,"public void test075592() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertEquals('~', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test075593,"public void test075593() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test075594,"public void test075594() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test075595,"public void test075595() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat2.isQuoteCharacterSet())
project,0,test075596,"public void test075596() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('~');
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test076597,"public void test076597() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test076598,"public void test076598() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test076599,"public void test076599() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test076600,"public void test076600() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat2.isQuoteCharacterSet())
project,0,test076601,"public void test076601() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test076602,"public void test076602() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test076603,"public void test076603() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test076604,"public void test076604() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test076605,"public void test076605() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test077606,"public void test077606() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test077607,"public void test077607() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test077608,"public void test077608() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test077609,"public void test077609() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test077610,"public void test077610() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test077611,"public void test077611() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test077612,"public void test077612() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test077613,"public void test077613() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test077614,"public void test077614() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader(resultSet0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test078615,"public void test078615() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test078616,"public void test078616() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test078617,"public void test078617() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test078618,"public void test078618() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test078619,"public void test078619() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test078620,"public void test078620() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test078621,"public void test078621() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test078622,"public void test078622() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test078623,"public void test078623() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('F', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test078624,"public void test078624() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    Character character0 = new Character('F');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(""NONE"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test079625,"public void test079625() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test079626,"public void test079626() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertFalse(cSVFormat3.isNullStringSet());
}",0,assertFalse(cSVFormat3.isNullStringSet())
project,0,test079627,"public void test079627() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertFalse(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test079628,"public void test079628() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test079629,"public void test079629() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertEquals(' ', (char) cSVFormat3.getEscapeCharacter());
}",0,
project,0,test079630,"public void test079630() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,
project,0,test079631,"public void test079631() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertEquals(',', cSVFormat3.getDelimiter());
}",0,
project,0,test079632,"public void test079632() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertEquals('|', (char) cSVFormat3.getCommentMarker());
}",0,
project,0,test080633,"public void test080633() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test080634,"public void test080634() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test080635,"public void test080635() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test080636,"public void test080636() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test080637,"public void test080637() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test080638,"public void test080638() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test080639,"public void test080639() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test080640,"public void test080640() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertEquals(' ', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test080641,"public void test080641() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = new Character(' ');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape(character0);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test081642,"public void test081642() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    Character character0 = new Character(')');
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test081643,"public void test081643() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    Character character0 = new Character(')');
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertTrue(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test081644,"public void test081644() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    Character character0 = new Character(')');
    CSVFormat cSVFormat3 = cSVFormat2.withEscape(character0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test082645,"public void test082645() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
    assertEquals('z', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test082646,"public void test082646() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test082647,"public void test082647() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test082648,"public void test082648() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
    assertEquals(""t"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test082649,"public void test082649() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test082650,"public void test082650() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test082651,"public void test082651() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test082652,"public void test082652() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test082653,"public void test082653() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test082654,"public void test082654() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""t"");
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('z');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test083655,"public void test083655() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test083656,"public void test083656() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test083657,"public void test083657() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test083658,"public void test083658() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test083659,"public void test083659() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
    assertEquals('t', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test083660,"public void test083660() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test083661,"public void test083661() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test083662,"public void test083662() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
    assertEquals('r', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test083663,"public void test083663() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
    assertEquals('G', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test083664,"public void test083664() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('G');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('r');
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('t');
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test084665,"public void test084665() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test084666,"public void test084666() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test084667,"public void test084667() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
    assertEquals('g', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test084668,"public void test084668() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
    assertEquals('A', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test084669,"public void test084669() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
    assertFalse(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test084670,"public void test084670() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test084671,"public void test084671() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test084672,"public void test084672() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test084673,"public void test084673() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('g');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('A');
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test085674,"public void test085674() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
    assertEquals('\""', (char) cSVFormat1.getQuoteCharacter());
}",0,
project,0,test085675,"public void test085675() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test085676,"public void test085676() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test085677,"public void test085677() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
    assertEquals('O', (char) cSVFormat1.getEscapeCharacter());
}",0,
project,0,test085678,"public void test085678() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
    assertFalse(cSVFormat1.isNullStringSet());
}",0,
project,0,test085679,"public void test085679() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test085680,"public void test085680() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test085681,"public void test085681() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test085682,"public void test085682() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('O');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test086683,"public void test086683() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test086684,"public void test086684() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test086685,"public void test086685() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test086686,"public void test086686() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test086687,"public void test086687() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test086688,"public void test086688() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test086689,"public void test086689() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertEquals('9', (char) cSVFormat2.getEscapeCharacter());
}",0,
project,0,test086690,"public void test086690() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertEquals('\""', (char) cSVFormat2.getQuoteCharacter());
}",0,
project,0,test086691,"public void test086691() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test086692,"public void test086692() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withEscape('9');
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test087693,"public void test087693() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertEquals('U', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test087694,"public void test087694() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test087695,"public void test087695() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test087696,"public void test087696() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test087697,"public void test087697() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat2.getSkipHeaderRecord())
project,0,test087698,"public void test087698() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test087699,"public void test087699() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test087700,"public void test087700() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test087701,"public void test087701() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = Character.valueOf('%');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('U');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test088702,"public void test088702() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test088703,"public void test088703() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test088704,"public void test088704() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,
project,0,test088705,"public void test088705() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test088706,"public void test088706() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
    assertEquals('S', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test088707,"public void test088707() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test088708,"public void test088708() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test088709,"public void test088709() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test088710,"public void test088710() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withDelimiter('S');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test089711,"public void test089711() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    Character character0 = Character.valueOf('A');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test089712,"public void test089712() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    Character character0 = Character.valueOf('A');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test089713,"public void test089713() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    Character character0 = Character.valueOf('A');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertEquals(""TDF"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test089714,"public void test089714() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    Character character0 = Character.valueOf('A');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test089715,"public void test089715() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    Character character0 = Character.valueOf('A');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test089716,"public void test089716() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    Character character0 = Character.valueOf('A');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test089717,"public void test089717() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    Character character0 = Character.valueOf('A');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertEquals(""\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test089718,"public void test089718() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    Character character0 = Character.valueOf('A');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test090719,"public void test090719() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test090720,"public void test090720() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test090721,"public void test090721() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test090722,"public void test090722() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test090723,"public void test090723() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test090724,"public void test090724() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test090725,"public void test090725() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test090726,"public void test090726() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test090727,"public void test090727() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker((Character) null);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test091728,"public void test091728() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    Character character0 = new Character('P');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test091729,"public void test091729() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    Character character0 = new Character('P');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test091730,"public void test091730() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.RFC4180;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    Character character0 = new Character('P');
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker(character0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test092731,"public void test092731() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test092732,"public void test092732() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test092733,"public void test092733() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test092734,"public void test092734() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
    assertEquals('6', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test092735,"public void test092735() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
    assertEquals("""", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test092736,"public void test092736() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test092737,"public void test092737() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test092738,"public void test092738() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test092739,"public void test092739() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('6');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test093740,"public void test093740() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test093741,"public void test093741() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test093742,"public void test093742() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
    assertEquals('w', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test093743,"public void test093743() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test093744,"public void test093744() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test093745,"public void test093745() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test093746,"public void test093746() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test093747,"public void test093747() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test093748,"public void test093748() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test093749,"public void test093749() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('w');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test094750,"public void test094750() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test094751,"public void test094751() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test094752,"public void test094752() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test094753,"public void test094753() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
    assertEquals('I', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test094754,"public void test094754() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test094755,"public void test094755() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test094756,"public void test094756() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test094757,"public void test094757() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test094758,"public void test094758() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test094759,"public void test094759() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('I');
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test095760,"public void test095760() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test095761,"public void test095761() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
    assertEquals('4', (char) cSVFormat2.getCommentMarker());
}",0,
project,0,test095762,"public void test095762() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test095763,"public void test095763() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withCommentMarker('4');
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test096764,"public void test096764() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test096765,"public void test096765() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test096766,"public void test096766() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test096767,"public void test096767() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test096768,"public void test096768() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertFalse(cSVFormat2.isNullStringSet())
project,0,test096769,"public void test096769() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test096770,"public void test096770() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat2.isQuoteCharacterSet())
project,0,test096771,"public void test096771() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test096772,"public void test096772() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = Character.valueOf(')');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(false);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test097773,"public void test097773() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat3.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat3.getAllowMissingColumnNames())
project,0,test097774,"public void test097774() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
    assertEquals(""-"", cSVFormat3.getRecordSeparator());
}",0,assertNotNull(cSVFormat3.getRecordSeparator())
project,0,test097775,"public void test097775() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test097776,"public void test097776() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test097777,"public void test097777() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test097778,"public void test097778() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test097779,"public void test097779() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test097780,"public void test097780() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
    assertEquals('$', cSVFormat3.getDelimiter());
}",0,assertNotNull(cSVFormat3.getDelimiter())
project,0,test097781,"public void test097781() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat3.equals((Object) cSVFormat1));
}",0,
project,0,test097782,"public void test097782() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat3.isNullStringSet());
}",0,
project,0,test097783,"public void test097783() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('-');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat3.equals((Object) cSVFormat2));
}",0,
project,0,test098784,"public void test098784() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test098785,"public void test098785() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test098786,"public void test098786() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test099787,"public void test099787() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
    assertFalse(cSVFormat4.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat4.getIgnoreHeaderCase())
project,0,test099788,"public void test099788() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
    assertTrue(cSVFormat4.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat4.getAllowMissingColumnNames())
project,0,test099789,"public void test099789() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
    assertEquals("""", cSVFormat4.getNullString());
}",0,assertNotNull(cSVFormat4.getNullString())
project,0,test099790,"public void test099790() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
    assertTrue(cSVFormat4.equals((Object) cSVFormat3));
}",0,
project,0,test099791,"public void test099791() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
    assertEquals(""\r\n"", cSVFormat4.getRecordSeparator());
}",0,assertNotNull(cSVFormat4.getRecordSeparator())
project,0,test099792,"public void test099792() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
    assertEquals(';', cSVFormat4.getDelimiter());
}",0,assertNotNull(cSVFormat4.getDelimiter())
project,0,test099793,"public void test099793() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test099794,"public void test099794() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    CSVFormat cSVFormat2 = cSVFormat1.withQuote((Character) null);
    CSVFormat cSVFormat3 = cSVFormat2.withDelimiter(';');
    CSVFormat cSVFormat4 = cSVFormat3.withAllowMissingColumnNames();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test100795,"public void test100795() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('u');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.isQuoteCharacterSet());
}",0,
project,0,test100796,"public void test100796() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('u');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test100797,"public void test100797() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('u');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test100798,"public void test100798() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('u');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test100799,"public void test100799() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('u');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test100800,"public void test100800() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('u');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test101801,"public void test101801() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    Character character0 = new Character('F');
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test101802,"public void test101802() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    Character character0 = new Character('F');
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
    assertFalse(cSVFormat3.isNullStringSet());
}",0,assertTrue(cSVFormat3.isNullStringSet())
project,0,test101803,"public void test101803() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    Character character0 = new Character('F');
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test101804,"public void test101804() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    Character character0 = new Character('F');
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test101805,"public void test101805() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    Character character0 = new Character('F');
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
    assertFalse(cSVFormat3.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat3.isEscapeCharacterSet())
project,0,test101806,"public void test101806() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    Character character0 = new Character('F');
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
    assertTrue(cSVFormat3.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat3.isQuoteCharacterSet())
project,0,test101807,"public void test101807() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    Character character0 = new Character('F');
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
    assertTrue(cSVFormat3.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat3.getSkipHeaderRecord())
project,0,test101808,"public void test101808() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    Character character0 = new Character('F');
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test101809,"public void test101809() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    Character character0 = new Character('F');
    CSVFormat cSVFormat3 = cSVFormat2.withCommentMarker(character0);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test102810,"public void test102810() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test102811,"public void test102811() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
    assertTrue(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test102812,"public void test102812() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
    assertFalse(cSVFormat3.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat3.getSkipHeaderRecord())
project,0,test102813,"public void test102813() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
    assertTrue(cSVFormat3.getIgnoreEmptyLines());
}",0,
project,0,test102814,"public void test102814() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
    assertFalse(cSVFormat3.isNullStringSet());
}",0,
project,0,test102815,"public void test102815() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
    assertTrue(cSVFormat3.isQuoteCharacterSet());
}",0,
project,0,test102816,"public void test102816() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
    assertFalse(cSVFormat3.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat3.isEscapeCharacterSet())
project,0,test102817,"public void test102817() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test102818,"public void test102818() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test102819,"public void test102819() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat3 = cSVFormat2.withHeader(stringArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test103820,"public void test103820() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test103821,"public void test103821() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertTrue(cSVFormat3.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat3.getAllowMissingColumnNames())
project,0,test103822,"public void test103822() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertTrue(cSVFormat3.equals((Object) cSVFormat2));
}",0,
project,0,test103823,"public void test103823() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test103824,"public void test103824() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertEquals('0', (char) cSVFormat3.getEscapeCharacter());
}",0,
project,0,test103825,"public void test103825() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
    CSVFormat cSVFormat3 = cSVFormat2.withAllowMissingColumnNames();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test104826,"public void test104826() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test104827,"public void test104827() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test104828,"public void test104828() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test104829,"public void test104829() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test104830,"public void test104830() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertEquals('|', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test104831,"public void test104831() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test104832,"public void test104832() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test104833,"public void test104833() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test104834,"public void test104834() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat0.getIgnoreEmptyLines())
project,0,test104835,"public void test104835() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('|');
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.getSkipHeaderRecord();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test105836,"public void test105836() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test105837,"public void test105837() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
    cSVFormat0.getRecordSeparator();
    assertEquals(')', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test105838,"public void test105838() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test105839,"public void test105839() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat0.getAllowMissingColumnNames())
project,0,test105840,"public void test105840() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test105841,"public void test105841() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat(')');
    cSVFormat0.getRecordSeparator();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test106842,"public void test106842() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,
project,0,test106843,"public void test106843() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test106844,"public void test106844() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test106845,"public void test106845() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertEquals('D', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test106846,"public void test106846() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test106847,"public void test106847() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('D');
    QuoteMode quoteMode0 = QuoteMode.MINIMAL;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.getQuoteMode();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test107848,"public void test107848() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.getQuoteCharacter();
    assertEquals('E', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test107849,"public void test107849() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.getQuoteCharacter();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",1,
project,0,test107850,"public void test107850() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.getQuoteCharacter();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test107851,"public void test107851() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.getQuoteCharacter();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test107852,"public void test107852() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.getQuoteCharacter();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test107853,"public void test107853() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.getQuoteCharacter();
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test108854,"public void test108854() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    String string0 = cSVFormat1.getNullString();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test108855,"public void test108855() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    String string0 = cSVFormat1.getNullString();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test108856,"public void test108856() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    String string0 = cSVFormat1.getNullString();
    assertEquals(""\r\n"", cSVFormat1.getRecordSeparator());
}",0,
project,0,test108857,"public void test108857() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test108858,"public void test108858() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    String string0 = cSVFormat1.getNullString();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test108859,"public void test108859() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test108860,"public void test108860() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    String string0 = cSVFormat1.getNullString();
    assertEquals(""TDF"", string0);
}",0,
project,0,test108861,"public void test108861() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test108862,"public void test108862() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test108863,"public void test108863() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""TDF"");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test109864,"public void test109864() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test109865,"public void test109865() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test109866,"public void test109866() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test109867,"public void test109867() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test109868,"public void test109868() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test109869,"public void test109869() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertEquals(""\r\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test109870,"public void test109870() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test109871,"public void test109871() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test109872,"public void test109872() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test109873,"public void test109873() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString("""");
    String string0 = cSVFormat1.getNullString();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test110874,"public void test110874() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test110875,"public void test110875() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test110876,"public void test110876() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test110877,"public void test110877() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test110878,"public void test110878() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test110879,"public void test110879() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test110880,"public void test110880() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test110881,"public void test110881() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test110882,"public void test110882() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getIgnoreSurroundingSpaces();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test111883,"public void test111883() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test111884,"public void test111884() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test111885,"public void test111885() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat1.getIgnoreHeaderCase();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test112886,"public void test112886() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test113887,"public void test113887() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[3];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    cSVFormat1.getHeaderComments();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test113888,"public void test113888() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[3];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    cSVFormat1.getHeaderComments();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test113889,"public void test113889() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Object[] objectArray0 = new Object[3];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    cSVFormat1.getHeaderComments();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test114890,"public void test114890() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = cSVFormat0.getEscapeCharacter();
    assertEquals('\\', (char) character0);
}",0,
project,0,test115891,"public void test115891() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    char char0 = cSVFormat0.getDelimiter();
    assertEquals(',', char0);
}",0,
project,0,test116892,"public void test116892() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,
project,0,test116893,"public void test116893() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test116894,"public void test116894() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test116895,"public void test116895() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test116896,"public void test116896() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
    char char0 = cSVFormat0.getDelimiter();
    assertEquals('4', char0);
}",0,
project,0,test116897,"public void test116897() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('4');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test117898,"public void test117898() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test117899,"public void test117899() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test117900,"public void test117900() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test117901,"public void test117901() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test117902,"public void test117902() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test117903,"public void test117903() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test117904,"public void test117904() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('w');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    cSVFormat1.getCommentMarker();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test118905,"public void test118905() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test118906,"public void test118906() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test118907,"public void test118907() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test118908,"public void test118908() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test118909,"public void test118909() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test118910,"public void test118910() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test118911,"public void test118911() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test118912,"public void test118912() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    assertTrue(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test118913,"public void test118913() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat1.getAllowMissingColumnNames();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test119914,"public void test119914() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
    doReturn((-3419)).when(resultSetMetaData0).getColumnCount();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
    // Undeclared exception!
    try {
        cSVFormat0.EXCEL.withHeader(resultSet0);
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test120915,"public void test120915() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
    doReturn(477).when(resultSetMetaData0).getColumnCount();
    doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
    // Undeclared exception!
    try {
        cSVFormat0.EXCEL.withHeader(resultSet0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The header contains a duplicate entry: 'null' in [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test121916,"public void test121916() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('P');
    Character character0 = new Character('P');
    // Undeclared exception!
    try {
        cSVFormat0.withEscape(character0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The escape character and the delimiter cannot be the same ('P')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test122917,"public void test122917() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.TDF;
    Character character0 = new Character('O');
    CSVFormat cSVFormat1 = cSVFormat0.withEscape(character0);
    // Undeclared exception!
    try {
        cSVFormat1.withCommentMarker(character0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start and the escape character cannot be the same ('O')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test123918,"public void test123918() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    // Undeclared exception!
    try {
        cSVFormat0.MYSQL.print((Appendable) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'out' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test124919,"public void test124919() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    // Undeclared exception!
    try {
        cSVFormat0.parse((Reader) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter 'reader' must not be null!
        //
        verifyException(""org.apache.commons.csv.Assertions"", e);
    }
}",0,
project,0,test125920,"public void test125920() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    PipedReader pipedReader0 = new PipedReader();
    try {
        cSVFormat1.parse(pipedReader0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedReader"", e);
    }
}",0,
project,0,test126921,"public void test126921() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    // Undeclared exception!
    try {
        cSVFormat0.format((Object[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.csv.CSVPrinter"", e);
    }
}",0,
project,0,test127922,"public void test127922() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Character character0 = new Character('E');
    CSVFormat cSVFormat1 = cSVFormat0.withQuote(character0);
    // Undeclared exception!
    try {
        cSVFormat1.withDelimiter('E');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The quoteChar character and the delimiter cannot be the same ('E')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test128923,"public void test128923() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.isQuoteCharacterSet();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test129924,"public void test129924() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.isQuoteCharacterSet();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test129925,"public void test129925() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.isQuoteCharacterSet();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test129926,"public void test129926() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.isQuoteCharacterSet();
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test129927,"public void test129927() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.isQuoteCharacterSet();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test129928,"public void test129928() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.isQuoteCharacterSet();
    assertEquals('E', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test129929,"public void test129929() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('E');
    cSVFormat0.isQuoteCharacterSet();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test130930,"public void test130930() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""S9!tjmt06ctf:57#Z"");
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat2.isNullStringSet();
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test130931,"public void test130931() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""S9!tjmt06ctf:57#Z"");
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat2.isNullStringSet();
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test130932,"public void test130932() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""S9!tjmt06ctf:57#Z"");
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat2.isNullStringSet();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test130933,"public void test130933() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""S9!tjmt06ctf:57#Z"");
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat2.isNullStringSet();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test130934,"public void test130934() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""S9!tjmt06ctf:57#Z"");
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat2.isNullStringSet();
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test130935,"public void test130935() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""S9!tjmt06ctf:57#Z"");
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat2.isNullStringSet();
    assertEquals(""S9!tjmt06ctf:57#Z"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test130936,"public void test130936() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""S9!tjmt06ctf:57#Z"");
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat2.isNullStringSet();
    assertTrue(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test130937,"public void test130937() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""S9!tjmt06ctf:57#Z"");
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    boolean boolean0 = cSVFormat2.isNullStringSet();
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test131938,"public void test131938() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.isNullStringSet();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test132939,"public void test132939() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test133940,"public void test133940() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    boolean boolean0 = cSVFormat0.isEscapeCharacterSet();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test134941,"public void test134941() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('0');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test134942,"public void test134942() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('0');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test134943,"public void test134943() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('0');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test134944,"public void test134944() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('0');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test134945,"public void test134945() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('0');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test134946,"public void test134946() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('0');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test134947,"public void test134947() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('0');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test134948,"public void test134948() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('0');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test134949,"public void test134949() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('0');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test134950,"public void test134950() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = Character.valueOf('0');
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
    boolean boolean0 = cSVFormat1.isCommentMarkerSet();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test135951,"public void test135951() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.isCommentMarkerSet();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test136952,"public void test136952() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = cSVFormat0.getHeaderComments();
    assertNull(stringArray0);
}",0,assertNotNull(stringArray0)
project,0,test137953,"public void test137953() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    cSVFormat1.getHeader();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,
project,0,test137954,"public void test137954() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    cSVFormat1.getHeader();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test137955,"public void test137955() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test137956,"public void test137956() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test137957,"public void test137957() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test137958,"public void test137958() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test137959,"public void test137959() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test137960,"public void test137960() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    cSVFormat1.getHeader();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test137961,"public void test137961() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
    doReturn(rowSetMetaDataImpl0).when(resultSet0).getMetaData();
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(resultSet0);
    cSVFormat1.getHeader();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test138962,"public void test138962() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    String[] stringArray0 = cSVFormat0.getHeader();
    assertNull(stringArray0);
}",0,
project,0,test139963,"public void test139963() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    cSVFormat0.getQuoteMode();
}",0,
project,0,test140964,"public void test140964() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    Character character0 = cSVFormat0.getQuoteCharacter();
    assertEquals('\""', (char) character0);
}",0,
project,0,test141965,"public void test141965() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.getSkipHeaderRecord();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test142966,"public void test142966() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.getIgnoreSurroundingSpaces();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test143967,"public void test143967() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat2.isQuoteCharacterSet())
project,0,test143968,"public void test143968() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,assertTrue(cSVFormat2.isNullStringSet())
project,0,test143969,"public void test143969() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test143970,"public void test143970() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test143971,"public void test143971() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test143972,"public void test143972() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test143973,"public void test143973() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test143974,"public void test143974() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test143975,"public void test143975() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord(true);
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreEmptyLines(true);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test144976,"public void test144976() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    Character character0 = cSVFormat0.getCommentMarker();
    assertNull(character0);
}",0,assertNotNull(character0)
project,0,test145977,"public void test145977() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String string0 = cSVFormat0.getNullString();
    assertNull(string0);
}",0,
project,0,test146978,"public void test146978() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Character character0 = cSVFormat0.getEscapeCharacter();
    assertNull(character0);
}",0,
project,0,test147979,"public void test147979() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.getIgnoreEmptyLines();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test148980,"public void test148980() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String string0 = cSVFormat0.getRecordSeparator();
    assertEquals(""\r\n"", string0);
}",0,
project,0,test149981,"public void test149981() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    boolean boolean0 = cSVFormat0.getIgnoreHeaderCase();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test150982,"public void test150982() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test150983,"public void test150983() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test150984,"public void test150984() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames(true);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertTrue(cSVFormat1.getAllowMissingColumnNames())
project,0,test151985,"public void test151985() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    char char0 = cSVFormat0.getDelimiter();
    assertEquals('w', char0);
}",0,
project,0,test151986,"public void test151986() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test151987,"public void test151987() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test151988,"public void test151988() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",1,
project,0,test151989,"public void test151989() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test151990,"public void test151990() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    char char0 = cSVFormat0.getDelimiter();
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test153992,"public void test153992() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    QuoteMode quoteMode0 = QuoteMode.NONE;
    // Undeclared exception!
    try {
        cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // No quotes mode set but no escape character is set
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test154993,"public void test154993() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('(');
    // Undeclared exception!
    try {
        cSVFormat1.withEscape('(');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start and the escape character cannot be the same ('(')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test155994,"public void test155994() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('6');
    Character character0 = Character.valueOf('6');
    // Undeclared exception!
    try {
        cSVFormat1.withQuote(character0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start character and the quoteChar cannot be the same ('6')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",1,
project,0,test156995,"public void test156995() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    // Undeclared exception!
    try {
        cSVFormat0.withCommentMarker('w');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The comment start character and the delimiter cannot be the same ('w')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test157996,"public void test157996() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter(')');
    // Undeclared exception!
    try {
        cSVFormat1.withQuote(')');
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The quoteChar character and the delimiter cannot be the same (')')
        //
        verifyException(""org.apache.commons.csv.CSVFormat"", e);
    }
}",0,
project,0,test158997,"public void test158997() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test158998,"public void test158998() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();
    CSVFormat cSVFormat1 = cSVFormat0.TDF.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<\t> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored SurroundingSpaces:ignored SkipHeaderRecord:false Header:[]"", string0);
}",0,
project,0,test159999,"public void test159999() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Object[] objectArray0 = new Object[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    String string0 = cSVFormat1.toString();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1591000,"public void test1591000() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    Object[] objectArray0 = new Object[2];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<,> QuoteChar=<\""> RecordSeparator=<\r\n> SkipHeaderRecord:false HeaderComments:[null, null]"", string0);
}",0,
project,0,test1601001,"public void test1601001() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
    String string0 = cSVFormat2.toString();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1601002,"public void test1601002() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
    String string0 = cSVFormat2.toString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1601003,"public void test1601003() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    CSVFormat cSVFormat2 = cSVFormat1.withEscape('0');
    String string0 = cSVFormat2.toString();
    assertEquals(""Delimiter=<,> Escape=<0> QuoteChar=<\""> RecordSeparator=<\r\n> EmptyLines:ignored IgnoreHeaderCase:ignored SkipHeaderRecord:false"", string0);
}",0,
project,0,test1611004,"public void test1611004() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
    String string0 = cSVFormat0.toString();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test1611005,"public void test1611005() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('q');
    String string0 = cSVFormat0.toString();
    assertEquals(""Delimiter=<q> SkipHeaderRecord:false"", string0);
}",0,
project,0,test1621006,"public void test1621006() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""i+GE6EAjjvqAW3"");
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<,> QuoteChar=<\""> NullString=<i+GE6EAjjvqAW3> RecordSeparator=<\r\n> EmptyLines:ignored SkipHeaderRecord:false"", string0);
}",0,
project,0,test1621007,"public void test1621007() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""i+GE6EAjjvqAW3"");
    String string0 = cSVFormat1.toString();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1631008,"public void test1631008() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    assertFalse(cSVFormat0.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat0.isQuoteCharacterSet())
project,0,test1631009,"public void test1631009() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    Object[] objectArray0 = new Object[4];
    cSVFormat0.MYSQL.format(objectArray0);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,
project,0,test1631010,"public void test1631010() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    Object[] objectArray0 = new Object[4];
    cSVFormat0.MYSQL.format(objectArray0);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,
project,0,test1631011,"public void test1631011() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    Object[] objectArray0 = new Object[4];
    cSVFormat0.MYSQL.format(objectArray0);
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test1631012,"public void test1631012() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    Object[] objectArray0 = new Object[4];
    cSVFormat0.MYSQL.format(objectArray0);
    assertFalse(cSVFormat0.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat0.isEscapeCharacterSet())
project,0,test1631013,"public void test1631013() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    Object[] objectArray0 = new Object[4];
    cSVFormat0.MYSQL.format(objectArray0);
    assertEquals('w', cSVFormat0.getDelimiter());
}",0,
project,0,test1631014,"public void test1631014() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    Object[] objectArray0 = new Object[4];
    cSVFormat0.MYSQL.format(objectArray0);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test1631015,"public void test1631015() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    Object[] objectArray0 = new Object[4];
    cSVFormat0.MYSQL.format(objectArray0);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat0.getSkipHeaderRecord())
project,0,test1641016,"public void test1641016() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    String string0 = cSVFormat1.toString();
    assertEquals(""Delimiter=<,> QuoteChar=<\""> CommentStart=<!> RecordSeparator=<\r\n> SkipHeaderRecord:false"", string0);
}",0,
project,0,test1641017,"public void test1641017() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    String string0 = cSVFormat1.toString();
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,
project,0,test1651018,"public void test1651018() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test1651019,"public void test1651019() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat0.getIgnoreHeaderCase())
project,0,test1651020,"public void test1651020() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test1651021,"public void test1651021() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
    cSVFormat0.hashCode();
    assertEquals('0', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test1651022,"public void test1651022() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('0');
    cSVFormat0.hashCode();
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat0.getSkipHeaderRecord())
project,0,test1661023,"public void test1661023() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1661024,"public void test1661024() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test1661025,"public void test1661025() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1661026,"public void test1661026() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    cSVFormat1.hashCode();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1661027,"public void test1661027() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1661028,"public void test1661028() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1671029,"public void test1671029() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1671030,"public void test1671030() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1671031,"public void test1671031() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase(true);
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1681032,"public void test1681032() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    cSVFormat0.TDF.hashCode();
}",0,
project,0,test1691033,"public void test1691033() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    cSVFormat1.hashCode();
    assertEquals('|', (char) cSVFormat1.getCommentMarker());
}",0,
project,0,test1691034,"public void test1691034() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1691035,"public void test1691035() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1691036,"public void test1691036() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.RFC4180;
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('|');
    cSVFormat1.hashCode();
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1701037,"public void test1701037() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    cSVFormat0.MYSQL.hashCode();
}",0,
project,0,test1711038,"public void test1711038() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1711039,"public void test1711039() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    QuoteMode quoteMode0 = QuoteMode.NON_NUMERIC;
    CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
    cSVFormat1.hashCode();
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test1721040,"public void test1721040() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    cSVFormat2.getHeaderComments();
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1721041,"public void test1721041() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    cSVFormat2.getHeaderComments();
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test1721042,"public void test1721042() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    cSVFormat2.getHeaderComments();
    assertFalse(cSVFormat2.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat2.getIgnoreEmptyLines())
project,0,test1721043,"public void test1721043() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    cSVFormat2.getHeaderComments();
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1721044,"public void test1721044() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    cSVFormat2.getHeaderComments();
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test1721045,"public void test1721045() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    cSVFormat2.getHeaderComments();
    assertTrue(cSVFormat2.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat2.getSkipHeaderRecord())
project,0,test1721046,"public void test1721046() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    Object[] objectArray0 = new Object[0];
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord();
    cSVFormat2.getHeaderComments();
    assertFalse(cSVFormat2.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat2.getAllowMissingColumnNames())
project,0,test1731047,"public void test1731047() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1731048,"public void test1731048() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1731049,"public void test1731049() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1731050,"public void test1731050() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('w', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test1731051,"public void test1731051() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(boolean0);
}",0,
project,0,test1731052,"public void test1731052() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('w');
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test1741053,"public void test1741053() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test1741054,"public void test1741054() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test1741055,"public void test1741055() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1741056,"public void test1741056() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1741057,"public void test1741057() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1741058,"public void test1741058() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test1741059,"public void test1741059() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1741060,"public void test1741060() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test1741061,"public void test1741061() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1751062,"public void test1751062() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1751063,"public void test1751063() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1751064,"public void test1751064() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1751065,"public void test1751065() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test1751066,"public void test1751066() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1751067,"public void test1751067() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test1751068,"public void test1751068() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1751069,"public void test1751069() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertTrue(cSVFormat1.isNullStringSet())
project,0,test1751070,"public void test1751070() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""63msK\""sU`@JH@kw8"";
    stringArray0[1] = ""L,d3z4N*9<"";
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1761071,"public void test1761071() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1761072,"public void test1761072() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1761073,"public void test1761073() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    cSVFormat2.equals(cSVFormat1);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test1761074,"public void test1761074() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    cSVFormat2.equals(cSVFormat1);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test1761075,"public void test1761075() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    cSVFormat2.equals(cSVFormat1);
    assertEquals(""?"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test1761076,"public void test1761076() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    cSVFormat2.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1761077,"public void test1761077() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withRecordSeparator('?');
    cSVFormat2.equals(cSVFormat1);
    assertEquals(""$/G"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
project,0,test1771078,"public void test1771078() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat0.equals(cSVFormat2);
    assertFalse(cSVFormat2.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat2.getIgnoreSurroundingSpaces())
project,0,test1771079,"public void test1771079() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat0.equals(cSVFormat2);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1771080,"public void test1771080() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat0.equals(cSVFormat2);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test1771081,"public void test1771081() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat0.equals(cSVFormat2);
    assertEquals(""\r\n"", cSVFormat2.getRecordSeparator());
}",0,assertNotNull(cSVFormat2.getRecordSeparator())
project,0,test1771082,"public void test1771082() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat0.equals(cSVFormat2);
    assertTrue(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test1771083,"public void test1771083() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat0.equals(cSVFormat2);
    assertTrue(cSVFormat2.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat2.getIgnoreEmptyLines())
project,0,test1771084,"public void test1771084() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat0.equals(cSVFormat2);
    assertFalse(boolean0);
}",0,
project,0,test1771085,"public void test1771085() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat0.equals(cSVFormat2);
    assertTrue(cSVFormat2.equals((Object) cSVFormat1));
}",0,
project,0,test1771086,"public void test1771086() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withNullString(""$/G"");
    CSVFormat cSVFormat2 = cSVFormat1.withIgnoreHeaderCase();
    boolean boolean0 = cSVFormat0.equals(cSVFormat2);
    assertFalse(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test1781087,"public void test1781087() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1781088,"public void test1781088() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test1781089,"public void test1781089() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1781090,"public void test1781090() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,
project,0,test1781091,"public void test1781091() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test1781092,"public void test1781092() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1781093,"public void test1781093() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1781094,"public void test1781094() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('!', (char) cSVFormat1.getCommentMarker());
}",0,
project,0,test1781095,"public void test1781095() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test1781096,"public void test1781096() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Excel;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('!');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1791097,"public void test1791097() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test1791098,"public void test1791098() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1791099,"public void test1791099() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat1.getIgnoreHeaderCase())
project,0,test1791100,"public void test1791100() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test1791101,"public void test1791101() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1791102,"public void test1791102() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test1791103,"public void test1791103() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1791104,"public void test1791104() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1791105,"public void test1791105() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals('?', (char) cSVFormat1.getQuoteCharacter());
}",0,
project,0,test1791106,"public void test1791106() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1791107,"public void test1791107() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withQuote('?');
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1801108,"public void test1801108() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertTrue(boolean0);
}",0,
project,0,test1801109,"public void test1801109() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertTrue(cSVFormat2.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat2.isEscapeCharacterSet())
project,0,test1801110,"public void test1801110() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertEquals('\'', cSVFormat2.getDelimiter());
}",0,assertNotNull(cSVFormat2.getDelimiter())
project,0,test1801111,"public void test1801111() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat2.equals((Object) cSVFormat0));
}",0,
project,0,test1801112,"public void test1801112() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat2.isNullStringSet());
}",0,
project,0,test1801113,"public void test1801113() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.MYSQL.withDelimiter('\'');
    Object[] objectArray0 = new Object[4];
    CSVFormat cSVFormat2 = cSVFormat1.withHeaderComments(objectArray0);
    boolean boolean0 = cSVFormat1.equals(cSVFormat2);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1811114,"public void test1811114() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,
project,0,test1811115,"public void test1811115() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1811116,"public void test1811116() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test1811117,"public void test1811117() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1811118,"public void test1811118() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1811119,"public void test1811119() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test1811120,"public void test1811120() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1811121,"public void test1811121() throws Throwable {
    CSVFormat.Predefined cSVFormat_Predefined0 = CSVFormat.Predefined.Default;
    CSVFormat cSVFormat0 = cSVFormat_Predefined0.getFormat();
    QuoteMode quoteMode0 = QuoteMode.ALL;
    CSVFormat cSVFormat1 = cSVFormat0.RFC4180.withQuoteMode(quoteMode0);
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1821122,"public void test1821122() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat1.getSkipHeaderRecord())
project,0,test1821123,"public void test1821123() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1821124,"public void test1821124() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test1821125,"public void test1821125() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals('w', cSVFormat1.getDelimiter());
}",0,assertNotNull(cSVFormat1.getDelimiter())
project,0,test1821126,"public void test1821126() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1821127,"public void test1821127() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1821128,"public void test1821128() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test1821129,"public void test1821129() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat0.equals((Object) cSVFormat1));
}",0,
project,0,test1821130,"public void test1821130() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1821131,"public void test1821131() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1821132,"public void test1821132() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    CSVFormat cSVFormat1 = cSVFormat0.withDelimiter('w');
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test1831133,"public void test1831133() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.equals(""63msK\""sU`@JH@kw8"");
    assertFalse(boolean0);
}",0,
project,0,test1841134,"public void test1841134() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertEquals('!', cSVFormat0.getDelimiter());
}",0,assertNotNull(cSVFormat0.getDelimiter())
project,0,test1841135,"public void test1841135() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getIgnoreHeaderCase());
}",0,assertFalse(cSVFormat0.getIgnoreHeaderCase())
project,0,test1841136,"public void test1841136() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat0.getAllowMissingColumnNames())
project,0,test1841137,"public void test1841137() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(boolean0);
}",0,
project,0,test1841138,"public void test1841138() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat0.getIgnoreSurroundingSpaces())
project,0,test1841139,"public void test1841139() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getSkipHeaderRecord());
}",0,assertFalse(cSVFormat0.getSkipHeaderRecord())
project,0,test1841140,"public void test1841140() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.newFormat('!');
    boolean boolean0 = cSVFormat0.equals((Object) null);
    assertFalse(cSVFormat0.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat0.getIgnoreEmptyLines())
project,0,test1851141,"public void test1851141() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.equals(cSVFormat0);
    assertTrue(boolean0);
}",0,
project,0,test1861142,"public void test1861142() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Object[] objectArray0 = new Object[4];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1861143,"public void test1861143() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Object[] objectArray0 = new Object[4];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1861144,"public void test1861144() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Object[] objectArray0 = new Object[4];
    objectArray0[0] = (Object) cSVFormat0;
    CSVFormat cSVFormat1 = cSVFormat0.withHeaderComments(objectArray0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1871145,"public void test1871145() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    boolean boolean0 = cSVFormat0.getAllowMissingColumnNames();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1881146,"public void test1881146() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1881147,"public void test1881147() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(boolean0);
}",0,
project,0,test1881148,"public void test1881148() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1881149,"public void test1881149() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1881150,"public void test1881150() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(""NONE"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
project,0,test1881151,"public void test1881151() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertEquals(""\r\n"", cSVFormat1.getRecordSeparator());
}",0,assertNotNull(cSVFormat1.getRecordSeparator())
project,0,test1881152,"public void test1881152() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test1881153,"public void test1881153() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1881154,"public void test1881154() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertFalse(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1881155,"public void test1881155() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString(""NONE"");
    boolean boolean0 = cSVFormat1.equals(cSVFormat0);
    assertFalse(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1891156,"public void test1891156() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
    assertFalse(cSVFormat2.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat2.getIgnoreHeaderCase())
project,0,test1891157,"public void test1891157() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1891158,"public void test1891158() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withAllowMissingColumnNames();
    CSVFormat cSVFormat2 = cSVFormat1.withHeader((ResultSetMetaData) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1901159,"public void test1901159() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
    assertTrue(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1901160,"public void test1901160() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
    assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1901161,"public void test1901161() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.valueOf(""Excel"");
    CSVFormat cSVFormat1 = cSVFormat0.withEscape((Character) null);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1911162,"public void test1911162() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1911163,"public void test1911163() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
    assertTrue(cSVFormat3.equals((Object) cSVFormat0));
}",0,
project,0,test1911164,"public void test1911164() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
    assertEquals('j', cSVFormat4.getDelimiter());
}",0,assertNotNull(cSVFormat4.getDelimiter())
project,0,test1911165,"public void test1911165() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
    assertTrue(cSVFormat4.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat4.getAllowMissingColumnNames())
project,0,test1911166,"public void test1911166() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
    assertTrue(cSVFormat3.equals((Object) cSVFormat1));
}",0,
project,0,test1911167,"public void test1911167() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreHeaderCase();
    CSVFormat cSVFormat2 = cSVFormat1.withAllowMissingColumnNames(true);
    CSVFormat cSVFormat3 = cSVFormat2.withHeader((ResultSet) null);
    CSVFormat cSVFormat4 = cSVFormat3.withDelimiter('j');
    assertTrue(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1921168,"public void test1921168() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1921169,"public void test1921169() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.isQuoteCharacterSet());
}",0,assertTrue(cSVFormat1.isQuoteCharacterSet())
project,0,test1921170,"public void test1921170() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test1921171,"public void test1921171() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1921172,"public void test1921172() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(boolean0);
}",0,
project,0,test1921173,"public void test1921173() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1921174,"public void test1921174() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertTrue(cSVFormat1.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat1.getIgnoreEmptyLines())
project,0,test1921175,"public void test1921175() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withIgnoreSurroundingSpaces();
    boolean boolean0 = cSVFormat0.equals(cSVFormat1);
    assertEquals(',', cSVFormat1.getDelimiter());
}",0,
project,0,test1931176,"public void test1931176() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""$/G"");
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
    assertFalse(cSVFormat3.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat3.isEscapeCharacterSet())
project,0,test1931177,"public void test1931177() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""$/G"");
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
    assertTrue(cSVFormat3.isQuoteCharacterSet());
}",0,
project,0,test1931178,"public void test1931178() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""$/G"");
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
    assertTrue(cSVFormat3.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat3.getSkipHeaderRecord())
project,0,test1931179,"public void test1931179() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""$/G"");
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
    assertFalse(cSVFormat3.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat3.getIgnoreSurroundingSpaces())
project,0,test1931180,"public void test1931180() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""$/G"");
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
    assertTrue(cSVFormat3.getIgnoreEmptyLines());
}",0,assertTrue(cSVFormat3.getIgnoreEmptyLines())
project,0,test1931181,"public void test1931181() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""$/G"");
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
    assertEquals('?', (char) cSVFormat3.getQuoteCharacter());
}",0,
project,0,test1931182,"public void test1931182() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""$/G"");
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
    assertEquals(',', cSVFormat3.getDelimiter());
}",0,
project,0,test1931183,"public void test1931183() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""$/G"");
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
    assertEquals(""\r\n"", cSVFormat3.getRecordSeparator());
}",0,assertNotNull(cSVFormat3.getRecordSeparator())
project,0,test1931184,"public void test1931184() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""$/G"");
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
    assertFalse(cSVFormat3.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat3.getIgnoreHeaderCase())
project,0,test1931185,"public void test1931185() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""$/G"");
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
    assertEquals(""$/G"", cSVFormat3.getNullString());
}",0,assertNotNull(cSVFormat3.getNullString())
project,0,test1931186,"public void test1931186() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    CSVFormat cSVFormat1 = cSVFormat0.withSkipHeaderRecord();
    CSVFormat cSVFormat2 = cSVFormat1.withNullString(""$/G"");
    CSVFormat cSVFormat3 = cSVFormat2.withQuote('?');
    assertFalse(cSVFormat3.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat3.getAllowMissingColumnNames())
project,0,test1941187,"public void test1941187() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.EXCEL;
    MockFileWriter mockFileWriter0 = new MockFileWriter("">Z%5F+:E"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
    CSVPrinter cSVPrinter0 = cSVFormat0.DEFAULT.print(mockPrintWriter0);
    assertNotNull(cSVPrinter0);
}",0,assertNotNull(cSVPrinter0)
project,0,test1951188,"public void test1951188() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    assertFalse(cSVFormat1.getIgnoreHeaderCase());
}",0,assertTrue(cSVFormat1.getIgnoreHeaderCase())
project,0,test1951189,"public void test1951189() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    assertFalse(cSVFormat1.getSkipHeaderRecord());
}",0,assertTrue(cSVFormat1.getSkipHeaderRecord())
project,0,test1951190,"public void test1951190() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    PipedReader pipedReader0 = new PipedReader();
    cSVFormat1.parse(pipedReader0);
    assertFalse(cSVFormat1.equals((Object) cSVFormat0));
}",0,
project,0,test1951191,"public void test1951191() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    PipedReader pipedReader0 = new PipedReader();
    cSVFormat1.parse(pipedReader0);
    assertFalse(cSVFormat1.isQuoteCharacterSet());
}",0,assertFalse(cSVFormat1.isQuoteCharacterSet())
project,0,test1951192,"public void test1951192() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    PipedReader pipedReader0 = new PipedReader();
    cSVFormat1.parse(pipedReader0);
    assertFalse(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
project,0,test1951193,"public void test1951193() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    PipedReader pipedReader0 = new PipedReader();
    cSVFormat1.parse(pipedReader0);
    assertEquals('\t', cSVFormat1.getDelimiter());
}",0,
project,0,test1951194,"public void test1951194() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    PipedReader pipedReader0 = new PipedReader();
    cSVFormat1.parse(pipedReader0);
    assertFalse(cSVFormat1.getIgnoreEmptyLines());
}",0,assertFalse(cSVFormat1.getIgnoreEmptyLines())
project,0,test1951195,"public void test1951195() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    PipedReader pipedReader0 = new PipedReader();
    cSVFormat1.parse(pipedReader0);
    assertTrue(cSVFormat1.isEscapeCharacterSet());
}",0,assertTrue(cSVFormat1.isEscapeCharacterSet())
project,0,test1951196,"public void test1951196() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    PipedReader pipedReader0 = new PipedReader();
    cSVFormat1.parse(pipedReader0);
    assertFalse(cSVFormat1.getIgnoreSurroundingSpaces());
}",0,assertTrue(cSVFormat1.getIgnoreSurroundingSpaces())
project,0,test1951197,"public void test1951197() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.MYSQL;
    String[] stringArray0 = new String[1];
    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
    PipedReader pipedReader0 = new PipedReader();
    cSVFormat1.parse(pipedReader0);
    assertFalse(cSVFormat1.isNullStringSet());
}",0,assertFalse(cSVFormat1.isNullStringSet())
project,0,test1961198,"public void test1961198() throws Throwable {
    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
    Object[] objectArray0 = new Object[2];
    String string0 = cSVFormat0.format(objectArray0);
    assertEquals(""\""\"","", string0);
}",0,
