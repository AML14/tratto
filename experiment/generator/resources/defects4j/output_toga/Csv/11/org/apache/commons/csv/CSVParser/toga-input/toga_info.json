{
  "test2224" : {
    "methodSignature" : "public Map<String, Integer> getHeaderMap()",
    "methodName" : "getHeaderMap",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2224() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \">\";\n    stringArray0[1] = \"string\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    PipedWriter pipedWriter0 = new PipedWriter();\n    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 35);\n    CSVParser cSVParser0 = cSVFormat1.parse(pipedReader0);\n    Map<String, Integer> map0 = cSVParser0.getHeaderMap();\n}",
    "testName" : "test2224"
  },
  "test1314" : {
    "methodSignature" : "public <T extends Collection<CSVRecord>> T getRecords(final T records) throws IOException",
    "methodName" : "getRecords",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser cSVParser0 = CSVParser.parse(\"XhdDY\", cSVFormat0);\n    LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();\n    LinkedList<CSVRecord> linkedList1 = cSVParser0.getRecords(linkedList0);\n}",
    "testName" : "test1314"
  },
  "test2325" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2325() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"The delimiter cannot be a line break\");\n    CSVParser cSVParser0 = CSVParser.parse(\"The delimiter cannot be a line break\", cSVFormat1);\n    CSVRecord cSVRecord0 = cSVParser0.nextRecord();\n    cSVRecord0.toString();\n}",
    "testName" : "test2325"
  },
  "test2122" : {
    "methodSignature" : "public Map<String, Integer> getHeaderMap()",
    "methodName" : "getHeaderMap",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2122() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser cSVParser0 = CSVParser.parse(\"string\", cSVFormat0);\n    Map<String, Integer> map0 = cSVParser0.getHeaderMap();\n}",
    "testName" : "test2122"
  },
  "test1011" : {
    "methodSignature" : "CSVRecord nextRecord() throws IOException",
    "methodName" : "nextRecord",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    PipedReader pipedReader0 = new PipedReader();\n    CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);\n    cSVParser0.nextRecord();\n}",
    "testName" : "test1011"
  },
  "test3133" : {
    "methodSignature" : "public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3133() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser.parse((File) null, charset0, cSVFormat0);\n}",
    "testName" : "test3133"
  },
  "test1112" : {
    "methodSignature" : "public <T extends Collection<CSVRecord>> T getRecords(final T records) throws IOException",
    "methodName" : "getRecords",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    PipedWriter pipedWriter0 = new PipedWriter();\n    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 35);\n    CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);\n    cSVParser0.close();\n    LinkedList<CSVRecord> linkedList0 = new LinkedList<CSVRecord>();\n    cSVParser0.getRecords(linkedList0);\n}",
    "testName" : "test1112"
  },
  "test011" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \">\";\n    stringArray0[1] = \"string\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser cSVParser0 = CSVParser.parse(\"string\", cSVFormat1);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test011"
  },
  "test012" : {
    "methodSignature" : "public boolean isConsistent()",
    "methodName" : "isConsistent",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \">\";\n    stringArray0[1] = \"string\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser cSVParser0 = CSVParser.parse(\"string\", cSVFormat1);\n    CSVRecord cSVRecord0 = cSVParser0.nextRecord();\n    cSVRecord0.isConsistent();\n}",
    "testName" : "test012"
  },
  "test034" : {
    "methodSignature" : "public <T extends Collection<CSVRecord>> T getRecords(final T records) throws IOException",
    "methodName" : "getRecords",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVParser cSVParser0 = CSVParser.parse(\"(line \", cSVFormat0);\n    cSVParser0.nextRecord();\n    LinkedList<CSVRecord> linkedList0 = cSVParser0.getRecords((LinkedList<CSVRecord>) null);\n}",
    "testName" : "test034"
  },
  "test056" : {
    "methodSignature" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056() throws Throwable {\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser.parse((URL) null, charset0, (CSVFormat) null);\n}",
    "testName" : "test056"
  },
  "test078" : {
    "methodSignature" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078() throws Throwable {\n    CSVParser.parse(\"gtjqJAKF$}f4^#\", (CSVFormat) null);\n}",
    "testName" : "test078"
  },
  "test1617" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1617() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVParser cSVParser0 = CSVParser.parse(\"*#\", cSVFormat0);\n    cSVParser0.close();\n    Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    cSVParser0.forEach(consumer0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test1617"
  },
  "test2628" : {
    "methodSignature" : "public long getCurrentLineNumber()",
    "methodName" : "getCurrentLineNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2628() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser cSVParser0 = CSVParser.parse(\"XhdDY\", cSVFormat0);\n    long long0 = cSVParser0.getCurrentLineNumber();\n}",
    "testName" : "test2628"
  },
  "test1718" : {
    "methodSignature" : "public CSVParser parse(final Reader in) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1718() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(',');\n    String[] stringArray0 = new String[2];\n    stringArray0[0] = \"org.apache.commons.csv.CSVParser\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVFormat cSVFormat2 = cSVFormat1.withSkipHeaderRecord(true);\n    PipedReader pipedReader0 = new PipedReader(2097);\n    cSVFormat2.parse(pipedReader0);\n}",
    "testName" : "test1718"
  },
  "test1415" : {
    "methodSignature" : "public boolean isClosed()",
    "methodName" : "isClosed",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    PipedReader pipedReader0 = new PipedReader(98);\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);\n    boolean boolean0 = cSVParser0.isClosed();\n}",
    "testName" : "test1415"
  },
  "test2426" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2426() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVFormat cSVFormat1 = cSVFormat0.withNullString(\"6+<SO]1CEx]vC4+W#$\");\n    CSVParser cSVParser0 = CSVParser.parse(\"string\", cSVFormat1);\n    CSVRecord cSVRecord0 = cSVParser0.nextRecord();\n    cSVRecord0.toString();\n}",
    "testName" : "test2426"
  },
  "test1516" : {
    "methodSignature" : "public List<CSVRecord> getRecords() throws IOException",
    "methodName" : "getRecords",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    PipedReader pipedReader0 = new PipedReader(288);\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0);\n    cSVParser0.getRecords();\n}",
    "testName" : "test1516"
  },
  "test2527" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2527() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser cSVParser0 = CSVParser.parse(\"(line \", cSVFormat0);\n    long long0 = cSVParser0.getRecordNumber();\n}",
    "testName" : "test2527"
  },
  "test3032" : {
    "methodSignature" : "public Iterator<CSVRecord> iterator()",
    "methodName" : "iterator",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3032() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser cSVParser0 = CSVParser.parse(\"XhdDY\", cSVFormat0);\n    Iterator<CSVRecord> iterator0 = cSVParser0.iterator();\n}",
    "testName" : "test3032"
  },
  "test2830" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2830() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser cSVParser0 = CSVParser.parse(\"(line \", cSVFormat0);\n    Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    cSVParser0.forEach(consumer0);\n    long long0 = cSVParser0.getRecordNumber();\n}",
    "testName" : "test2830"
  },
  "test2931" : {
    "methodSignature" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2931() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    URL uRL0 = MockURL.getHttpExample();\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser.parse(uRL0, charset0, cSVFormat0);\n}",
    "testName" : "test2931"
  },
  "test000" : {
    "methodSignature" : "CSVRecord nextRecord() throws IOException",
    "methodName" : "nextRecord",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVParser cSVParser0 = CSVParser.parse(\"\", cSVFormat0);\n    CSVRecord cSVRecord0 = cSVParser0.nextRecord();\n}",
    "testName" : "test000"
  },
  "test023" : {
    "methodSignature" : "public boolean isClosed()",
    "methodName" : "isClosed",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    PipedWriter pipedWriter0 = new PipedWriter();\n    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 35);\n    CSVParser cSVParser0 = cSVFormat0.parse(pipedReader0);\n    cSVParser0.close();\n    boolean boolean0 = cSVParser0.isClosed();\n}",
    "testName" : "test023"
  },
  "test045" : {
    "methodSignature" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    URI uRI0 = MockURI.aFileURI;\n    URL uRL0 = MockURI.toURL(uRI0);\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser.parse(uRL0, charset0, cSVFormat0);\n}",
    "testName" : "test045"
  },
  "test067" : {
    "methodSignature" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    String[] stringArray0 = new String[1];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser.parse(\"\", cSVFormat1);\n}",
    "testName" : "test067"
  },
  "test089" : {
    "methodSignature" : "public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089() throws Throwable {\n    File file0 = MockFile.createTempFile(\"ygTPJ><bl[d^LLv.`hn\", \"[LrS_H&F+GyXtIZ:`\");\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('$');\n    CSVParser.parse(file0, (Charset) null, cSVFormat0);\n}",
    "testName" : "test089"
  },
  "test0910" : {
    "methodSignature" : "public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0910() throws Throwable {\n    MockFile mockFile0 = new MockFile(\",`g|C]bw%\", \",`g|C]bw%\");\n    Charset charset0 = Charset.defaultCharset();\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVParser.parse((File) mockFile0, charset0, cSVFormat0);\n}",
    "testName" : "test0910"
  },
  "test1819" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1819() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser cSVParser0 = CSVParser.parse(\") \", cSVFormat1);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test1819"
  }
}