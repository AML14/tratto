{
  "test1212" : {
    "methodSignature" : "public void print(final Object value) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"k`.3en(twdW3W\", false);\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);\n    cSVPrinter0.close();\n    Double double0 = new Double(0.0);\n    cSVPrinter0.print(double0);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public CSVPrinter(final Appendable out, final CSVFormat format)",
    "methodName" : "CSVPrinter",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"Tv/A*$\", true);\n    Character character0 = new Character('/');\n    Quote quote0 = Quote.NONE;\n    String[] stringArray0 = new String[5];\n    CSVFormat cSVFormat0 = new CSVFormat('/', character0, quote0, character0, character0, false, true, \"\", \"\", stringArray0, true);\n    CSVPrinter cSVPrinter0 = null;\n    cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public void printComment(final String comment) throws IOException",
    "methodName" : "printComment",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    char[] charArray0 = new char[6];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('P');\n    CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat1);\n    cSVPrinter0.printComment(\"FYGb0TDj\");\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public void print(final Object value) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    char[] charArray0 = new char[4];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);\n    Float float0 = new Float((-594.9592F));\n    cSVPrinter0.print(float0);\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "public void print(final Object value) throws IOException",
    "methodName" : "print",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);\n    Charset charset0 = Charset.defaultCharset();\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charset0);\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVFormat cSVFormat1 = cSVFormat0.withQuoteChar('o');\n    CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat1);\n    cSVPrinter0.print(outputStreamWriter0);\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "public String format(final Object... values)",
    "methodName" : "format",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.newFormat(']');\n    Object[] objectArray0 = new Object[7];\n    objectArray0[4] = (Object) cSVFormat0;\n    String string0 = cSVFormat0.format(objectArray0);\n}",
    "testName" : "test011"
  },
  "test022" : {
    "methodSignature" : "public void printRecords(final Object[] values) throws IOException",
    "methodName" : "printRecords",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(\"NONE\", true);\n    MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);\n    cSVPrinter0.printRecords((Object[]) null);\n}",
    "testName" : "test022"
  },
  "test033" : {
    "methodSignature" : "public void printRecords(final ResultSet resultSet) throws SQLException, IOException",
    "methodName" : "printRecords",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    File file0 = MockFile.createTempFile(\"url\", \"org.apache.commons.csv.CSVPrinter$1\");\n    MockPrintStream mockPrintStream0 = new MockPrintStream(file0);\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();\n    cSVPrinter0.printRecords(resultSet0);\n}",
    "testName" : "test033"
  },
  "test044" : {
    "methodSignature" : "public void printRecords(final Iterable<?> values) throws IOException",
    "methodName" : "printRecords",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0);\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);\n    cSVPrinter0.printRecords((Iterable<?>) null);\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "public void printRecord(final Iterable<?> values) throws IOException",
    "methodName" : "printRecord",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(\"out\");\n    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(outputStreamWriter0, cSVFormat0);\n    cSVPrinter0.printRecord((Iterable<?>) null);\n}",
    "testName" : "test088"
  },
  "test099" : {
    "methodSignature" : "public void printComment(final String comment) throws IOException",
    "methodName" : "printComment",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Charset charset0 = Charset.defaultCharset();\n    ByteBuffer byteBuffer0 = ByteBuffer.allocate(1161);\n    CharBuffer charBuffer0 = charset0.decode(byteBuffer0);\n    CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Character character0 = Character.valueOf('&');\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart(character0);\n    CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer1, cSVFormat1);\n    cSVPrinter0.printComment(\"S:p0sP_!\");\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public void println() throws IOException",
    "methodName" : "println",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    File file0 = MockFile.createTempFile(\"The comment start and the escape character cannot be the same ('\", \"The comment start and the escape character cannot be the same ('\");\n    MockPrintStream mockPrintStream0 = new MockPrintStream(file0);\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);\n    cSVPrinter0.println();\n}",
    "testName" : "test1616"
  },
  "test2727" : {
    "methodSignature" : "public void flush() throws IOException",
    "methodName" : "flush",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"QuoteChar=<\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat0);\n    cSVPrinter0.flush();\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public void printRecords(final ResultSet resultSet) throws SQLException, IOException",
    "methodName" : "printRecords",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"G=SE(HGw-\");\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);\n    ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());\n    doReturn(16).when(resultSetMetaData0).getColumnCount();\n    ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());\n    doReturn(resultSetMetaData0).when(resultSet0).getMetaData();\n    doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());\n    doReturn(true, false).when(resultSet0).next();\n    cSVPrinter0.printRecords(resultSet0);\n}",
    "testName" : "test1717"
  },
  "test2828" : {
    "methodSignature" : "public void flush() throws IOException",
    "methodName" : "flush",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    char[] charArray0 = new char[7];\n    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(charBuffer0, cSVFormat0);\n    cSVPrinter0.flush();\n}",
    "testName" : "test2828"
  },
  "test1818" : {
    "methodSignature" : "public void printRecords(final Object[] values) throws IOException",
    "methodName" : "printRecords",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    MockFileWriter mockFileWriter0 = new MockFileWriter(\"[{\", false);\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(mockFileWriter0, cSVFormat0);\n    SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(\"\");\n    Object[] objectArray0 = new Object[9];\n    objectArray0[5] = (Object) sQLTransactionRollbackException0;\n    cSVPrinter0.printRecords(objectArray0);\n}",
    "testName" : "test1818"
  },
  "test2929" : {
    "methodSignature" : "public void close() throws IOException",
    "methodName" : "close",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);\n    cSVPrinter0.close();\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public void printComment(final String comment) throws IOException",
    "methodName" : "printComment",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"QuoteChar=<\");\n    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVFormat cSVFormat1 = cSVFormat0.withCommentStart('w');\n    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintWriter0, cSVFormat1);\n    cSVPrinter0.print(mockFile0);\n    cSVPrinter0.printComment(\"QuoteChar=<\");\n}",
    "testName" : "test1919"
  },
  "test3030" : {
    "methodSignature" : "public Appendable getOut()",
    "methodName" : "getOut",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    StringWriter stringWriter0 = new StringWriter();\n    StringBuffer stringBuffer0 = stringWriter0.getBuffer();\n    CSVFormat cSVFormat0 = CSVFormat.TDF;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(stringBuffer0, cSVFormat0);\n    Appendable appendable0 = cSVPrinter0.getOut();\n}",
    "testName" : "test3030"
  },
  "test2020" : {
    "methodSignature" : "public void printComment(final String comment) throws IOException",
    "methodName" : "printComment",
    "className" : "org.apache.commons.csv.CSVPrinter",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    File file0 = MockFile.createTempFile(\"The comment start and the escape character cannot be the same ('\", \"The comment start and the escape character cannot be the same ('\");\n    MockPrintStream mockPrintStream0 = new MockPrintStream(file0);\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVPrinter cSVPrinter0 = new CSVPrinter(mockPrintStream0, cSVFormat0);\n    cSVPrinter0.printComment(\"The quoteChar cannot be a line break\");\n}",
    "testName" : "test2020"
  }
}