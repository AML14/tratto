{
  "test3336" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3336() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVParser cSVParser0 = CSVParser.parse(\"thk,3Hy3DboF\", cSVFormat0);\n    cSVParser0.nextRecord();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3336"
  },
  "test1213" : {
    "methodSignature" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1213() throws Throwable {\n    URL uRL0 = MockURL.getHttpExample();\n    CSVFormat cSVFormat0 = CSVFormat.EXCEL;\n    CSVParser.parse(uRL0, (Charset) null, cSVFormat0);\n}",
    "testName" : "test1213"
  },
  "test3437" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3437() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVFormat cSVFormat1 = cSVFormat0.withTrim();\n    CSVParser cSVParser0 = CSVParser.parse(\"@_(Y\\\"+#u%[i<2A\", cSVFormat1);\n    cSVParser0.nextRecord();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3437"
  },
  "test1314" : {
    "methodSignature" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    Charset charset0 = Charset.defaultCharset();\n    CSVFormat cSVFormat0 = CSVFormat.ORACLE;\n    URL uRL0 = MockURL.getHttpExample();\n    CSVParser.parse(uRL0, charset0, cSVFormat0);\n}",
    "testName" : "test1314"
  },
  "test2122" : {
    "methodSignature" : "CSVRecord nextRecord() throws IOException",
    "methodName" : "nextRecord",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2122() throws Throwable {\n    PipedReader pipedReader0 = new PipedReader();\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser cSVParser0 = CSVParser.parse((Reader) pipedReader0, cSVFormat0);\n    cSVParser0.nextRecord();\n}",
    "testName" : "test2122"
  },
  "test1011" : {
    "methodSignature" : "public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    URI uRI0 = MockURI.aFileURI;\n    MockFile mockFile0 = new MockFile(uRI0);\n    Path path0 = mockFile0.toPath();\n    CSVParser.parse(path0, (Charset) null, (CSVFormat) null);\n}",
    "testName" : "test1011"
  },
  "test3133" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3133() throws Throwable {\n    PipedReader pipedReader0 = new PipedReader();\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[4];\n    stringArray0[1] = \"1\";\n    stringArray0[2] = \"Unexpected Token type: \";\n    stringArray0[3] = \" valuels=\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, 0L);\n    Map<String, Integer> map0 = cSVParser0.getHeaderMap();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3133"
  },
  "test4346" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4346() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"6Ih\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    cSVParser0.forEach(consumer0);\n    long long0 = cSVParser0.getRecordNumber();\n}",
    "testName" : "test4346"
  },
  "test2223" : {
    "methodSignature" : "public List<CSVRecord> getRecords() throws IOException",
    "methodName" : "getRecords",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2223() throws Throwable {\n    PipedReader pipedReader0 = new PipedReader(1559);\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 1559, 509L);\n    cSVParser0.getRecords();\n}",
    "testName" : "test2223"
  },
  "test3235" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3235() throws Throwable {\n    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(\"Escape=</Escape=<0Escape=<\");\n    FileSystemHandling.appendLineToFile(evoSuiteFile0, \"\");\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    MockFile mockFile0 = new MockFile(\"Escape=<\");\n    File file0 = MockFile.createTempFile(\"Escape=<\", \"Escape=<\", (File) mockFile0);\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat0);\n    cSVParser0.nextRecord();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3235"
  },
  "test1112" : {
    "methodSignature" : "public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1112() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.ORACLE;\n    String[] stringArray0 = new String[0];\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    MockFile mockFile0 = new MockFile(\"\", \"\");\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser.parse(path0, charset0, cSVFormat1);\n}",
    "testName" : "test1112"
  },
  "test4245" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4245() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"6Ih\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    cSVParser0.getFirstEndOfLine();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test4245"
  },
  "test011" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"6Ih\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    cSVParser0.forEach(consumer0);\n    cSVParser0.nextRecord();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.ORACLE;\n    CSVParser cSVParser0 = CSVParser.parse(\"\", cSVFormat0);\n    cSVParser0.iterator();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test033"
  },
  "test2728" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2728() throws Throwable {\n    File file0 = MockFile.createTempFile(\"charset\", \"charset\");\n    Charset charset0 = Charset.defaultCharset();\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('P');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2728"
  },
  "test056" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test056() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"6Ih\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    Consumer<CSVRecord> consumer0 = (Consumer<CSVRecord>) mock(Consumer.class, new ViolatedAssumptionAnswer());\n    cSVParser0.forEach(consumer0);\n    cSVParser0.getRecords();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test056"
  },
  "test078" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078() throws Throwable {\n    File file0 = MockFile.createTempFile(\"charset\", \"charset\");\n    Charset charset0 = Charset.defaultCharset();\n    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(\"/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/charset0charset\");\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('P');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    FileSystemHandling.appendLineToFile(evoSuiteFile0, \"FORMAT\");\n    CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat1);\n    cSVParser0.getFirstEndOfLine();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test078"
  },
  "test1617" : {
    "methodSignature" : "public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1617() throws Throwable {\n    PipedReader pipedReader0 = new PipedReader();\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    RowSetMetaDataImpl rowSetMetaDataImpl0 = new RowSetMetaDataImpl();\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader((ResultSetMetaData) rowSetMetaDataImpl0);\n    CSVParser.parse((Reader) pipedReader0, cSVFormat1);\n}",
    "testName" : "test1617"
  },
  "test1718" : {
    "methodSignature" : "public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1718() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    CSVFormat cSVFormat0 = CSVFormat.ORACLE;\n    CSVParser.parse((InputStream) pipedInputStream0, (Charset) null, cSVFormat0);\n}",
    "testName" : "test1718"
  },
  "test2526" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2526() throws Throwable {\n    StringReader stringReader0 = new StringReader(\"inputStream\");\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVParser cSVParser0 = new CSVParser(stringReader0, cSVFormat0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2526"
  },
  "test3538" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3538() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    CSVParser cSVParser0 = CSVParser.parse(\"\\\"K>=/L(ei:8HpA.;e\", cSVFormat0);\n    long long0 = cSVParser0.getRecordNumber();\n}",
    "testName" : "test3538"
  },
  "test1415" : {
    "methodSignature" : "public static CSVParser parse(final String string, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    CSVParser.parse(\"\", (CSVFormat) null);\n}",
    "testName" : "test1415"
  },
  "test2627" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2627() throws Throwable {\n    PipedReader pipedReader0 = new PipedReader();\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[4];\n    stringArray0[1] = \"1\";\n    stringArray0[2] = \"Unexpected Token type: \";\n    stringArray0[3] = \"\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, 0L);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2627"
  },
  "test3639" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3639() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVParser cSVParser0 = CSVParser.parse(\"6Ih\", cSVFormat0);\n    cSVParser0.isClosed();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3639"
  },
  "test1516" : {
    "methodSignature" : "public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser.parse((Reader) null, cSVFormat0);\n}",
    "testName" : "test1516"
  },
  "test3031" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3031() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    StringReader stringReader0 = new StringReader(\"P5, ?Y[|*\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    cSVParser0.getHeaderMap();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3031"
  },
  "test4144" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4144() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"6Ih\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    cSVParser0.getCurrentLineNumber();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test4144"
  },
  "test2021" : {
    "methodSignature" : "public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2021() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    MockFile mockFile0 = new MockFile(\"\", \"\");\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser.parse((File) mockFile0, charset0, cSVFormat0);\n}",
    "testName" : "test2021"
  },
  "test3132" : {
    "methodSignature" : "public Map<String, Integer> getHeaderMap()",
    "methodName" : "getHeaderMap",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3132() throws Throwable {\n    PipedReader pipedReader0 = new PipedReader();\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    String[] stringArray0 = new String[4];\n    stringArray0[1] = \"1\";\n    stringArray0[2] = \"Unexpected Token type: \";\n    stringArray0[3] = \" valuels=\";\n    CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);\n    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat1, 0L, 0L);\n    Map<String, Integer> map0 = cSVParser0.getHeaderMap();\n}",
    "testName" : "test3132"
  },
  "test4043" : {
    "methodSignature" : "public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4043() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser.parse((File) null, charset0, cSVFormat0);\n}",
    "testName" : "test4043"
  },
  "test3841" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3841() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD;\n    MockFile mockFile0 = new MockFile(\"\", \"\");\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser cSVParser0 = CSVParser.parse(path0, charset0, cSVFormat0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test3841"
  },
  "test2930" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2930() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    StringReader stringReader0 = new StringReader(\"6Ih\");\n    CSVParser cSVParser0 = cSVFormat0.parse(stringReader0);\n    cSVParser0.getRecords();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test2930"
  },
  "test3942" : {
    "methodSignature" : "public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3942() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    Charset charset0 = Charset.defaultCharset();\n    URL uRL0 = MockURL.getFtpExample();\n    CSVParser.parse(uRL0, charset0, cSVFormat0);\n}",
    "testName" : "test3942"
  },
  "test3740" : {
    "methodSignature" : "public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3740() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.MYSQL;\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser.parse((InputStream) null, charset0, cSVFormat0);\n}",
    "testName" : "test3740"
  },
  "test000" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    Charset charset0 = Charset.defaultCharset();\n    CSVFormat cSVFormat0 = CSVFormat.INFORMIX_UNLOAD_CSV;\n    CSVParser cSVParser0 = CSVParser.parse((InputStream) pipedInputStream0, charset0, cSVFormat0);\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(\"Escape=</Escape=<0Escape=<\");\n    byte[] byteArray0 = new byte[8];\n    byteArray0[6] = (byte) 10;\n    FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    MockFile mockFile0 = new MockFile(\"Escape=<\");\n    File file0 = MockFile.createTempFile(\"Escape=<\", \"Escape=<\", (File) mockFile0);\n    Charset charset0 = Charset.defaultCharset();\n    CSVParser cSVParser0 = CSVParser.parse(file0, charset0, cSVFormat0);\n    cSVParser0.nextRecord();\n    cSVParser0.nextRecord();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVParser cSVParser0 = CSVParser.parse(\"6Ih\", cSVFormat0);\n    cSVParser0.close();\n    boolean boolean0 = cSVParser0.isClosed();\n    cSVParser0.getRecordNumber();\n}",
    "testName" : "test044"
  },
  "test045" : {
    "methodSignature" : "public boolean isClosed()",
    "methodName" : "isClosed",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.DEFAULT;\n    CSVParser cSVParser0 = CSVParser.parse(\"6Ih\", cSVFormat0);\n    cSVParser0.close();\n    boolean boolean0 = cSVParser0.isClosed();\n}",
    "testName" : "test045"
  },
  "test067" : {
    "methodSignature" : "public long getRecordNumber()",
    "methodName" : "getRecordNumber",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test067() throws Throwable {\n    PipedWriter pipedWriter0 = new PipedWriter();\n    PipedReader pipedReader0 = new PipedReader(pipedWriter0);\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    CSVParser cSVParser0 = new CSVParser(pipedReader0, cSVFormat0, 0L, (-1L));\n    long long0 = cSVParser0.getRecordNumber();\n}",
    "testName" : "test067"
  },
  "test089" : {
    "methodSignature" : "public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"P2494y_M+a~\", \"P2494y_M+a~\");\n    Path path0 = mockFile0.toPath();\n    Charset charset0 = Charset.defaultCharset();\n    CSVFormat cSVFormat0 = CSVFormat.RFC4180;\n    CSVParser.parse(path0, charset0, cSVFormat0);\n}",
    "testName" : "test089"
  },
  "test1920" : {
    "methodSignature" : "public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1920() throws Throwable {\n    File file0 = MockFile.createTempFile(\"charset\", \"charset\");\n    Charset charset0 = Charset.defaultCharset();\n    FileSystemHandling.shouldAllThrowIOExceptions();\n    CSVFormat cSVFormat0 = CSVFormat.newFormat('P');\n    CSVFormat cSVFormat1 = cSVFormat0.withFirstRecordAsHeader();\n    CSVParser.parse(file0, charset0, cSVFormat1);\n}",
    "testName" : "test1920"
  },
  "test0910" : {
    "methodSignature" : "public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0910() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_CSV;\n    MockFile mockFile0 = new MockFile(\"inputStream\");\n    Path path0 = mockFile0.toPath();\n    CSVParser.parse(path0, (Charset) null, cSVFormat0);\n}",
    "testName" : "test0910"
  },
  "test1819" : {
    "methodSignature" : "public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException",
    "methodName" : "parse",
    "className" : "org.apache.commons.csv.CSVParser",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1819() throws Throwable {\n    CSVFormat cSVFormat0 = CSVFormat.POSTGRESQL_TEXT;\n    File file0 = MockFile.createTempFile(\"No more CSV records available\", \"No more CSV records available\");\n    CSVParser.parse(file0, (Charset) null, cSVFormat0);\n}",
    "testName" : "test1819"
  }
}