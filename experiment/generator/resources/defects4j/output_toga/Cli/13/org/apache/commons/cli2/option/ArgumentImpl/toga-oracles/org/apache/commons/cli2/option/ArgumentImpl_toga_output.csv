project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""orj.apache.commons.cli2.va,idation.FileValidator"", ""orj.apache.commons.cli2.va,idation.FileValidator"", 2, 2, '3', '3', (Validator) null, ""orj.apache.commons.cli2.va,idation.FileValidator"", linkedList0, 2);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    argumentImpl0.defaults(writeableCommandLineImpl0);
    assertEquals(""orj.apache.commons.cli2.va,idation.FileValidator"", argumentImpl0.getDescription());
}",0,
project,0,test001,"public void test001() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""orj.apache.commons.cli2.va,idation.FileValidator"", ""orj.apache.commons.cli2.va,idation.FileValidator"", 2, 2, '3', '3', (Validator) null, ""orj.apache.commons.cli2.va,idation.FileValidator"", linkedList0, 2);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    argumentImpl0.defaults(writeableCommandLineImpl0);
    assertEquals(""orj.apache.commons.cli2.va,idation.FileValidator"", argumentImpl0.getConsumeRemaining());
}",0,
project,0,test002,"public void test002() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""orj.apache.commons.cli2.va,idation.FileValidator"", ""orj.apache.commons.cli2.va,idation.FileValidator"", 2, 2, '3', '3', (Validator) null, ""orj.apache.commons.cli2.va,idation.FileValidator"", linkedList0, 2);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    argumentImpl0.defaults(writeableCommandLineImpl0);
    assertEquals('3', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test003,"public void test003() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""orj.apache.commons.cli2.va,idation.FileValidator"", ""orj.apache.commons.cli2.va,idation.FileValidator"", 2, 2, '3', '3', (Validator) null, ""orj.apache.commons.cli2.va,idation.FileValidator"", linkedList0, 2);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    argumentImpl0.defaults(writeableCommandLineImpl0);
    assertEquals(2, argumentImpl0.getMinimum());
}",0,"assertEquals(0, argumentImpl0.getMinimum())"
project,0,test004,"public void test004() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""orj.apache.commons.cli2.va,idation.FileValidator"", ""orj.apache.commons.cli2.va,idation.FileValidator"", 2, 2, '3', '3', (Validator) null, ""orj.apache.commons.cli2.va,idation.FileValidator"", linkedList0, 2);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    argumentImpl0.defaults(writeableCommandLineImpl0);
    assertEquals(""orj.apache.commons.cli2.va,idation.FileValidator"", argumentImpl0.getPreferredName());
}",0,
project,0,test005,"public void test005() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""orj.apache.commons.cli2.va,idation.FileValidator"", ""orj.apache.commons.cli2.va,idation.FileValidator"", 2, 2, '3', '3', (Validator) null, ""orj.apache.commons.cli2.va,idation.FileValidator"", linkedList0, 2);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    argumentImpl0.defaults(writeableCommandLineImpl0);
    assertEquals('3', argumentImpl0.getInitialSeparator());
}",0,assertNotNull(argumentImpl0.getInitialSeparator())
project,0,test006,"public void test006() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""orj.apache.commons.cli2.va,idation.FileValidator"", ""orj.apache.commons.cli2.va,idation.FileValidator"", 2, 2, '3', '3', (Validator) null, ""orj.apache.commons.cli2.va,idation.FileValidator"", linkedList0, 2);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    argumentImpl0.defaults(writeableCommandLineImpl0);
    assertEquals(2, argumentImpl0.getMaximum());
}",0,"assertEquals(0, argumentImpl0.getMaximum())"
project,0,test017,"public void test017() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", """", 0, 0, 'A', ';', dateValidator0, """", (List) null, (-3157));
    char char0 = argumentImpl0.getInitialSeparator();
    assertEquals(0, argumentImpl0.getMaximum());
}",0,"assertEquals(0, argumentImpl0.getMaximum())"
project,0,test018,"public void test018() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", """", 0, 0, 'A', ';', dateValidator0, """", (List) null, (-3157));
    char char0 = argumentImpl0.getInitialSeparator();
    assertEquals("""", argumentImpl0.getPreferredName());
}",0,assertNotNull(argumentImpl0.getPreferredName())
project,0,test019,"public void test019() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", """", 0, 0, 'A', ';', dateValidator0, """", (List) null, (-3157));
    char char0 = argumentImpl0.getInitialSeparator();
    assertEquals('A', char0);
}",0,assertNotNull(char0)
project,0,test0110,"public void test0110() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", """", 0, 0, 'A', ';', dateValidator0, """", (List) null, (-3157));
    char char0 = argumentImpl0.getInitialSeparator();
    assertEquals(0, argumentImpl0.getMinimum());
}",0,"assertEquals(0, argumentImpl0.getMinimum())"
project,0,test0111,"public void test0111() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", """", 0, 0, 'A', ';', dateValidator0, """", (List) null, (-3157));
    char char0 = argumentImpl0.getInitialSeparator();
    assertEquals("""", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test0112,"public void test0112() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", """", 0, 0, 'A', ';', dateValidator0, """", (List) null, (-3157));
    char char0 = argumentImpl0.getInitialSeparator();
    assertEquals("""", argumentImpl0.getConsumeRemaining());
}",0,assertNotNull(argumentImpl0.getConsumeRemaining())
project,0,test0113,"public void test0113() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", """", 0, 0, 'A', ';', dateValidator0, """", (List) null, (-3157));
    char char0 = argumentImpl0.getInitialSeparator();
    assertEquals(';', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test0214,"public void test0214() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""+"", ""org.apache.commons.cli2.validation.UrlValidator"", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, ""org.apache.commons.cli2.validation.UrlValidator"", (List) null, Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, argumentImpl0.getMinimum());
}",0,"assertEquals(0, argumentImpl0.getMinimum())"
project,0,test0215,"public void test0215() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""+"", ""org.apache.commons.cli2.validation.UrlValidator"", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, ""org.apache.commons.cli2.validation.UrlValidator"", (List) null, Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, argumentImpl0.getMaximum());
}",0,"assertEquals(0, argumentImpl0.getMaximum())"
project,0,test0216,"public void test0216() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""+"", ""org.apache.commons.cli2.validation.UrlValidator"", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, ""org.apache.commons.cli2.validation.UrlValidator"", (List) null, Integer.MAX_VALUE);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, (List) null);
    boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""@'r--d,B;"");
    assertEquals('Q', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test0217,"public void test0217() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""+"", ""org.apache.commons.cli2.validation.UrlValidator"", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, ""org.apache.commons.cli2.validation.UrlValidator"", (List) null, Integer.MAX_VALUE);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, (List) null);
    boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""@'r--d,B;"");
    assertEquals(""+"", argumentImpl0.getPreferredName());
}",0,assertNotNull(argumentImpl0.getPreferredName())
project,0,test0218,"public void test0218() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""+"", ""org.apache.commons.cli2.validation.UrlValidator"", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, ""org.apache.commons.cli2.validation.UrlValidator"", (List) null, Integer.MAX_VALUE);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, (List) null);
    boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""@'r--d,B;"");
    assertEquals(""org.apache.commons.cli2.validation.UrlValidator"", argumentImpl0.getDescription());
}",0,
project,0,test0219,"public void test0219() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""+"", ""org.apache.commons.cli2.validation.UrlValidator"", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, ""org.apache.commons.cli2.validation.UrlValidator"", (List) null, Integer.MAX_VALUE);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, (List) null);
    boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""@'r--d,B;"");
    assertEquals(""org.apache.commons.cli2.validation.UrlValidator"", argumentImpl0.getConsumeRemaining());
}",0,assertNotNull(argumentImpl0.getConsumeRemaining())
project,0,test0220,"public void test0220() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""+"", ""org.apache.commons.cli2.validation.UrlValidator"", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, ""org.apache.commons.cli2.validation.UrlValidator"", (List) null, Integer.MAX_VALUE);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, (List) null);
    boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""@'r--d,B;"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0221,"public void test0221() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""+"", ""org.apache.commons.cli2.validation.UrlValidator"", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, ""org.apache.commons.cli2.validation.UrlValidator"", (List) null, Integer.MAX_VALUE);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, (List) null);
    boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""@'r--d,B;"");
    assertEquals(Integer.MAX_VALUE, sourceDestArgument0.getMinimum());
}",0,
project,0,test0222,"public void test0222() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""+"", ""org.apache.commons.cli2.validation.UrlValidator"", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, ""org.apache.commons.cli2.validation.UrlValidator"", (List) null, Integer.MAX_VALUE);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, (List) null);
    boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""@'r--d,B;"");
    assertEquals(Integer.MAX_VALUE, sourceDestArgument0.getMaximum());
}",0,"assertEquals(0, sourceDestArgument0.getMaximum())"
project,0,test0223,"public void test0223() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""+"", ""org.apache.commons.cli2.validation.UrlValidator"", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, ""org.apache.commons.cli2.validation.UrlValidator"", (List) null, Integer.MAX_VALUE);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, (List) null);
    boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""@'r--d,B;"");
    assertEquals(""SourceDestArgument"", sourceDestArgument0.getPreferredName());
}",0,assertNotNull(sourceDestArgument0.getPreferredName())
project,0,test0224,"public void test0224() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""+"", ""org.apache.commons.cli2.validation.UrlValidator"", Integer.MAX_VALUE, Integer.MAX_VALUE, 'Q', 'Q', fileValidator0, ""org.apache.commons.cli2.validation.UrlValidator"", (List) null, Integer.MAX_VALUE);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, (List) null);
    boolean boolean0 = sourceDestArgument0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""@'r--d,B;"");
    assertEquals('Q', argumentImpl0.getInitialSeparator());
}",0,assertNotNull(argumentImpl0.getInitialSeparator())
project,0,test0325,"public void test0325() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    assertEquals(247, argumentImpl0.getMinimum());
}",0,"assertEquals(0, argumentImpl0.getMinimum())"
project,0,test0326,"public void test0326() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    assertEquals(247, argumentImpl0.getMaximum());
}",0,"assertEquals(0, argumentImpl0.getMaximum())"
project,0,test0327,"public void test0327() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'Y', '\u0000', ""-"", (List) null);
    char char0 = sourceDestArgument0.getSubsequentSeparator();
    assertEquals(""Command.preferredName.too.short"", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test0328,"public void test0328() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'Y', '\u0000', ""-"", (List) null);
    char char0 = sourceDestArgument0.getSubsequentSeparator();
    assertEquals('Y', sourceDestArgument0.getInitialSeparator());
}",0,assertNotNull(sourceDestArgument0.getInitialSeparator())
project,0,test0329,"public void test0329() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'Y', '\u0000', ""-"", (List) null);
    char char0 = sourceDestArgument0.getSubsequentSeparator();
    assertEquals(""-"", sourceDestArgument0.getConsumeRemaining());
}",0,assertNotNull(sourceDestArgument0.getConsumeRemaining())
project,0,test0330,"public void test0330() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'Y', '\u0000', ""-"", (List) null);
    char char0 = sourceDestArgument0.getSubsequentSeparator();
    assertEquals("""", argumentImpl0.getConsumeRemaining());
}",0,assertNotNull(argumentImpl0.getConsumeRemaining())
project,0,test0331,"public void test0331() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'Y', '\u0000', ""-"", (List) null);
    char char0 = sourceDestArgument0.getSubsequentSeparator();
    assertEquals(""SourceDestArgument"", sourceDestArgument0.getPreferredName());
}",0,
project,0,test0332,"public void test0332() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'Y', '\u0000', ""-"", (List) null);
    char char0 = sourceDestArgument0.getSubsequentSeparator();
    assertEquals("""", argumentImpl0.getPreferredName());
}",0,
project,0,test0333,"public void test0333() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'Y', '\u0000', ""-"", (List) null);
    char char0 = sourceDestArgument0.getSubsequentSeparator();
    assertEquals('\u0000', char0);
}",0,assertNotNull(char0)
project,0,test0434,"public void test0434() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""-"", ""-"", (-1145), (-1145), 'Z', 'Q', numberValidator0, ""-"", linkedList0, 'Z');
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    sourceDestArgument0.helpLines((-1145), linkedHashSet0, (Comparator) null);
    assertEquals('Q', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test0435,"public void test0435() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""-"", ""-"", (-1145), (-1145), 'Z', 'Q', numberValidator0, ""-"", linkedList0, 'Z');
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    sourceDestArgument0.helpLines((-1145), linkedHashSet0, (Comparator) null);
    assertEquals('Z', argumentImpl0.getInitialSeparator());
}",0,assertNotNull(argumentImpl0.getInitialSeparator())
project,0,test0436,"public void test0436() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""-"", ""-"", (-1145), (-1145), 'Z', 'Q', numberValidator0, ""-"", linkedList0, 'Z');
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    sourceDestArgument0.helpLines((-1145), linkedHashSet0, (Comparator) null);
    assertEquals(""--"", sourceDestArgument0.getConsumeRemaining());
}",0,assertNotNull(sourceDestArgument0.getConsumeRemaining())
project,0,test0437,"public void test0437() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""-"", ""-"", (-1145), (-1145), 'Z', 'Q', numberValidator0, ""-"", linkedList0, 'Z');
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    sourceDestArgument0.helpLines((-1145), linkedHashSet0, (Comparator) null);
    assertEquals(""-"", argumentImpl0.getConsumeRemaining());
}",0,assertNotNull(argumentImpl0.getConsumeRemaining())
project,0,test0438,"public void test0438() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""-"", ""-"", (-1145), (-1145), 'Z', 'Q', numberValidator0, ""-"", linkedList0, 'Z');
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    sourceDestArgument0.helpLines((-1145), linkedHashSet0, (Comparator) null);
    assertEquals(""SourceDestArgument"", sourceDestArgument0.getPreferredName());
}",0,assertNotNull(sourceDestArgument0.getPreferredName())
project,0,test0439,"public void test0439() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<DisplaySetting> linkedList0 = new LinkedList<DisplaySetting>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""-"", ""-"", (-1145), (-1145), 'Z', 'Q', numberValidator0, ""-"", linkedList0, 'Z');
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    sourceDestArgument0.helpLines((-1145), linkedHashSet0, (Comparator) null);
    assertEquals(""-"", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test0540,"public void test0540() throws Throwable {
    LinkedList<String> linkedList0 = new LinkedList<String>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""VO;h9!Ubi*B"", ""DISPLAY_GROUP_EXPANDED"", (-1442), (-1442), 'N', '(', (Validator) null, ""UB"", linkedList0, (-1442));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    // Undeclared exception!
    try {
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1442
        //
        verifyException(""java.util.Collections$EmptyList"", e);
    }
}",1,
project,0,test0641,"public void test0641() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    String string0 = argumentImpl0.getConsumeRemaining();
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test0642,"public void test0642() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    String string0 = argumentImpl0.getConsumeRemaining();
    assertEquals('Y', argumentImpl0.getInitialSeparator());
}",0,assertNotNull(argumentImpl0.getInitialSeparator())
project,0,test0643,"public void test0643() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    String string0 = argumentImpl0.getConsumeRemaining();
    assertEquals(""Command.preferredName.too.short"", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test0644,"public void test0644() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    String string0 = argumentImpl0.getConsumeRemaining();
    assertEquals('6', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test0645,"public void test0645() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateTimeInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""Command.preferredName.too.short"", 247, 247, 'Y', '6', dateValidator0, """", (List) null, 91);
    String string0 = argumentImpl0.getConsumeRemaining();
    assertEquals("""", argumentImpl0.getPreferredName());
}",0,assertNotNull(argumentImpl0.getPreferredName())
project,0,test0746,"public void test0746() throws Throwable {
    UrlValidator urlValidator0 = new UrlValidator();
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Set<String> set0 = locale0.getUnicodeLocaleKeys();
    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""NumberValidator.number.OutOfRange"", ""qM3"", 679, 679, 'T', 'U', urlValidator0, ""`a`KsY!8?_uN:{94>"", list0, 679);
    argumentImpl0.getValidator();
    assertEquals(""qM3"", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test0747,"public void test0747() throws Throwable {
    UrlValidator urlValidator0 = new UrlValidator();
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Set<String> set0 = locale0.getUnicodeLocaleKeys();
    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""NumberValidator.number.OutOfRange"", ""qM3"", 679, 679, 'T', 'U', urlValidator0, ""`a`KsY!8?_uN:{94>"", list0, 679);
    argumentImpl0.getValidator();
    assertEquals('T', argumentImpl0.getInitialSeparator());
}",0,assertNotNull(argumentImpl0.getInitialSeparator())
project,0,test0748,"public void test0748() throws Throwable {
    UrlValidator urlValidator0 = new UrlValidator();
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Set<String> set0 = locale0.getUnicodeLocaleKeys();
    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""NumberValidator.number.OutOfRange"", ""qM3"", 679, 679, 'T', 'U', urlValidator0, ""`a`KsY!8?_uN:{94>"", list0, 679);
    argumentImpl0.getValidator();
    assertEquals('U', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test0749,"public void test0749() throws Throwable {
    UrlValidator urlValidator0 = new UrlValidator();
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Set<String> set0 = locale0.getUnicodeLocaleKeys();
    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""NumberValidator.number.OutOfRange"", ""qM3"", 679, 679, 'T', 'U', urlValidator0, ""`a`KsY!8?_uN:{94>"", list0, 679);
    argumentImpl0.getValidator();
    assertEquals(""NumberValidator.number.OutOfRange"", argumentImpl0.getPreferredName());
}",0,assertNotNull(argumentImpl0.getPreferredName())
project,0,test0750,"public void test0750() throws Throwable {
    UrlValidator urlValidator0 = new UrlValidator();
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    Set<String> set0 = locale0.getUnicodeLocaleKeys();
    Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""NumberValidator.number.OutOfRange"", ""qM3"", 679, 679, 'T', 'U', urlValidator0, ""`a`KsY!8?_uN:{94>"", list0, 679);
    argumentImpl0.getValidator();
    assertEquals(""`a`KsY!8?_uN:{94>"", argumentImpl0.getConsumeRemaining());
}",0,assertNotNull(argumentImpl0.getConsumeRemaining())
project,0,test0851,"public void test0851() throws Throwable {
    NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
    NumberValidator numberValidator0 = new NumberValidator(numberFormat0);
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = null;
    try {
        argumentImpl0 = new ArgumentImpl(""\""d^(k#"", ""\""d^(k#"", 0, (-2219), 'Z', 'Z', numberValidator0, ""Vh="", linkedList0, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Minimum number of values must not exceed maximum number
        //
        verifyException(""org.apache.commons.cli2.option.ArgumentImpl"", e);
    }
}",0,
project,0,test0952,"public void test0952() throws Throwable {
    DateValidator dateValidator0 = DateValidator.getDateInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""arg"", ""arg"", (-2449), (-1), 's', 'e', dateValidator0, ""DateValidator.date.OutOfRange"", linkedList0, (-2449));
    Object object0 = new Object();
    linkedList0.addFirst(object0);
    SourceDestArgument sourceDestArgument0 = null;
    try {
        sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'e', 's', ""--"", linkedList0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Too many default values.
        //
        verifyException(""org.apache.commons.cli2.option.ArgumentImpl"", e);
    }
}",0,
project,0,test1053,"public void test1053() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    linkedList0.add((Object) ""f{LO[+G`'|"");
    ArgumentImpl argumentImpl0 = null;
    try {
        argumentImpl0 = new ArgumentImpl((String) null, (String) null, 1405, 1405, '%', '>', fileValidator0, (String) null, linkedList0, 1405);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Not enough default values.
        //
        verifyException(""org.apache.commons.cli2.option.ArgumentImpl"", e);
    }
}",0,
project,0,test1154,"public void test1154() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    Object object0 = new Object();
    linkedList0.add(object0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""--"", ""}O"", (-2148), 761, '_', '\u0000', fileValidator0, ""Switch.no.disabledPrefix"", linkedList0, 0);
    assertEquals('_', argumentImpl0.getInitialSeparator());
}",0,
project,0,test1155,"public void test1155() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    Object object0 = new Object();
    linkedList0.add(object0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""--"", ""}O"", (-2148), 761, '_', '\u0000', fileValidator0, ""Switch.no.disabledPrefix"", linkedList0, 0);
    assertEquals(""--"", argumentImpl0.getPreferredName());
}",0,
project,0,test1156,"public void test1156() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    Object object0 = new Object();
    linkedList0.add(object0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""--"", ""}O"", (-2148), 761, '_', '\u0000', fileValidator0, ""Switch.no.disabledPrefix"", linkedList0, 0);
    assertEquals('\u0000', argumentImpl0.getSubsequentSeparator());
}",0,
project,0,test1157,"public void test1157() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    Object object0 = new Object();
    linkedList0.add(object0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""--"", ""}O"", (-2148), 761, '_', '\u0000', fileValidator0, ""Switch.no.disabledPrefix"", linkedList0, 0);
    assertEquals(""}O"", argumentImpl0.getDescription());
}",0,
project,0,test1158,"public void test1158() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    Object object0 = new Object();
    linkedList0.add(object0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""--"", ""}O"", (-2148), 761, '_', '\u0000', fileValidator0, ""Switch.no.disabledPrefix"", linkedList0, 0);
    assertEquals(761, argumentImpl0.getMaximum());
}",0,
project,0,test1159,"public void test1159() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    Object object0 = new Object();
    linkedList0.add(object0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""--"", ""}O"", (-2148), 761, '_', '\u0000', fileValidator0, ""Switch.no.disabledPrefix"", linkedList0, 0);
    assertFalse(argumentImpl0.isRequired());
}",0,assertTrue(argumentImpl0.isRequired())
project,0,test1160,"public void test1160() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingFileInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    Object object0 = new Object();
    linkedList0.add(object0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""--"", ""}O"", (-2148), 761, '_', '\u0000', fileValidator0, ""Switch.no.disabledPrefix"", linkedList0, 0);
    assertEquals(""Switch.no.disabledPrefix"", argumentImpl0.getConsumeRemaining());
}",0,assertNotNull(argumentImpl0.getConsumeRemaining())
project,0,test1262,"public void test1262() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""G"", 2, 2, 'Y', '^', (Validator) null, ""orj.apache.commons.cli2.va,idation.FileValidator"", linkedList0, 2);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    LinkedList<String> linkedList1 = new LinkedList<String>();
    linkedList1.add(""orj.apache.commons.cli2.va,idation.FileValidator"");
    linkedList1.add(""DL+5~ M!IKE`?o"");
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals('^', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test1465,"public void test1465() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", 5974, 5974, '3', '-', (Validator) null, ""Argument.too.few.defaults"", linkedList0, 0);
    List list0 = argumentImpl0.getDefaultValues();
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '_', '9', ""org.apache.commons.cli2.resource.ResourceHelper"", list0);
    GroupImpl groupImpl0 = new GroupImpl(list0, ""w'(5:(qN@dI+t#"", ""--"", (-1303), 3);
    Boolean boolean0 = Boolean.FALSE;
    Switch switch0 = new Switch(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", ""org.apache.commons.cli2.resource.ResourceHelper"", set0, ""\b"", true, sourceDestArgument0, groupImpl0, 0, boolean0);
    LinkedList<Object> linkedList1 = new LinkedList<Object>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(switch0, linkedList1);
    LinkedList<String> linkedList2 = new LinkedList<String>();
    linkedList2.add(""org.apache.commons.cli2.validation.FileValidator"");
    ListIterator<String> listIterator0 = linkedList2.listIterator();
    sourceDestArgument0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(""org.apache.commons.cli2.validation.FileValidator"", argumentImpl0.getPreferredName());
}",0,assertNotNull(argumentImpl0.getPreferredName())
project,0,test1466,"public void test1466() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", 5974, 5974, '3', '-', (Validator) null, ""Argument.too.few.defaults"", linkedList0, 0);
    List list0 = argumentImpl0.getDefaultValues();
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '_', '9', ""org.apache.commons.cli2.resource.ResourceHelper"", list0);
    GroupImpl groupImpl0 = new GroupImpl(list0, ""w'(5:(qN@dI+t#"", ""--"", (-1303), 3);
    Boolean boolean0 = Boolean.FALSE;
    Switch switch0 = new Switch(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", ""org.apache.commons.cli2.resource.ResourceHelper"", set0, ""\b"", true, sourceDestArgument0, groupImpl0, 0, boolean0);
    LinkedList<Object> linkedList1 = new LinkedList<Object>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(switch0, linkedList1);
    LinkedList<String> linkedList2 = new LinkedList<String>();
    linkedList2.add(""org.apache.commons.cli2.validation.FileValidator"");
    ListIterator<String> listIterator0 = linkedList2.listIterator();
    sourceDestArgument0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals('9', sourceDestArgument0.getSubsequentSeparator());
}",0,assertNotNull(sourceDestArgument0.getSubsequentSeparator())
project,0,test1468,"public void test1468() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", 5974, 5974, '3', '-', (Validator) null, ""Argument.too.few.defaults"", linkedList0, 0);
    List list0 = argumentImpl0.getDefaultValues();
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '_', '9', ""org.apache.commons.cli2.resource.ResourceHelper"", list0);
    GroupImpl groupImpl0 = new GroupImpl(list0, ""w'(5:(qN@dI+t#"", ""--"", (-1303), 3);
    Boolean boolean0 = Boolean.FALSE;
    Switch switch0 = new Switch(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", ""org.apache.commons.cli2.resource.ResourceHelper"", set0, ""\b"", true, sourceDestArgument0, groupImpl0, 0, boolean0);
    LinkedList<Object> linkedList1 = new LinkedList<Object>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(switch0, linkedList1);
    LinkedList<String> linkedList2 = new LinkedList<String>();
    linkedList2.add(""org.apache.commons.cli2.validation.FileValidator"");
    ListIterator<String> listIterator0 = linkedList2.listIterator();
    sourceDestArgument0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(""Argument.too.few.defaults"", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test1469,"public void test1469() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", 5974, 5974, '3', '-', (Validator) null, ""Argument.too.few.defaults"", linkedList0, 0);
    List list0 = argumentImpl0.getDefaultValues();
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '_', '9', ""org.apache.commons.cli2.resource.ResourceHelper"", list0);
    GroupImpl groupImpl0 = new GroupImpl(list0, ""w'(5:(qN@dI+t#"", ""--"", (-1303), 3);
    Boolean boolean0 = Boolean.FALSE;
    Switch switch0 = new Switch(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", ""org.apache.commons.cli2.resource.ResourceHelper"", set0, ""\b"", true, sourceDestArgument0, groupImpl0, 0, boolean0);
    LinkedList<Object> linkedList1 = new LinkedList<Object>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(switch0, linkedList1);
    LinkedList<String> linkedList2 = new LinkedList<String>();
    linkedList2.add(""org.apache.commons.cli2.validation.FileValidator"");
    ListIterator<String> listIterator0 = linkedList2.listIterator();
    sourceDestArgument0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals('_', sourceDestArgument0.getInitialSeparator());
}",0,
project,0,test1470,"public void test1470() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", 5974, 5974, '3', '-', (Validator) null, ""Argument.too.few.defaults"", linkedList0, 0);
    List list0 = argumentImpl0.getDefaultValues();
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '_', '9', ""org.apache.commons.cli2.resource.ResourceHelper"", list0);
    GroupImpl groupImpl0 = new GroupImpl(list0, ""w'(5:(qN@dI+t#"", ""--"", (-1303), 3);
    Boolean boolean0 = Boolean.FALSE;
    Switch switch0 = new Switch(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", ""org.apache.commons.cli2.resource.ResourceHelper"", set0, ""\b"", true, sourceDestArgument0, groupImpl0, 0, boolean0);
    LinkedList<Object> linkedList1 = new LinkedList<Object>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(switch0, linkedList1);
    LinkedList<String> linkedList2 = new LinkedList<String>();
    linkedList2.add(""org.apache.commons.cli2.validation.FileValidator"");
    ListIterator<String> listIterator0 = linkedList2.listIterator();
    sourceDestArgument0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(""SourceDestArgument"", sourceDestArgument0.getPreferredName());
}",0,assertNotNull(sourceDestArgument0.getPreferredName())
project,0,test1471,"public void test1471() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", 5974, 5974, '3', '-', (Validator) null, ""Argument.too.few.defaults"", linkedList0, 0);
    List list0 = argumentImpl0.getDefaultValues();
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '_', '9', ""org.apache.commons.cli2.resource.ResourceHelper"", list0);
    GroupImpl groupImpl0 = new GroupImpl(list0, ""w'(5:(qN@dI+t#"", ""--"", (-1303), 3);
    Boolean boolean0 = Boolean.FALSE;
    Switch switch0 = new Switch(""org.apache.commons.cli2.validation.FileValidator"", ""Argument.too.few.defaults"", ""org.apache.commons.cli2.resource.ResourceHelper"", set0, ""\b"", true, sourceDestArgument0, groupImpl0, 0, boolean0);
    LinkedList<Object> linkedList1 = new LinkedList<Object>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(switch0, linkedList1);
    LinkedList<String> linkedList2 = new LinkedList<String>();
    linkedList2.add(""org.apache.commons.cli2.validation.FileValidator"");
    ListIterator<String> listIterator0 = linkedList2.listIterator();
    sourceDestArgument0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(""org.apache.commons.cli2.resource.ResourceHelper"", sourceDestArgument0.getConsumeRemaining());
}",0,assertNotNull(sourceDestArgument0.getConsumeRemaining())
project,0,test1674,"public void test1674() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""orj.apache.commons.cli2.va,idation.FileValidator"", 2, 2, '3', '3', (Validator) null, ""orj.apache.commons.cli2.va,idation.FileValidator"", linkedList0, 2);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, linkedList0);
    LinkedList<String> linkedList1 = new LinkedList<String>();
    linkedList1.add(""--"");
    linkedList1.add(""1C4WEiu]J3zT"");
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    try {
        argumentImpl0.process(writeableCommandLineImpl0, listIterator0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unexpected value \""zT\"" found while processing
        //
        verifyException(""org.apache.commons.cli2.option.ArgumentImpl"", e);
    }
}",0,
project,0,test1775,"public void test1775() throws Throwable {
    LinkedList<String> linkedList0 = new LinkedList<String>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", ""]J}30hW3fB5Mo2>}jzY"", 1038, 1038, 'w', 'w', (Validator) null, ""]J}30hW3fB5Mo2>}jzY"", linkedList0, 1038);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, '8', '\u0000', """", linkedList0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
    try {
        argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0, (Option) sourceDestArgument0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing value(s)
        //
        verifyException(""org.apache.commons.cli2.option.ArgumentImpl"", e);
    }
}",1,
project,0,test1876,"public void test1876() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""%&C<hpXS-e/ExQLDe0="", ""%&C<hpXS-e/ExQLDe0="", 0, 0, 'E', 'E', (Validator) null, ""%&C<hpXS-e/ExQLDe0="", list0, 93);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
    argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
    assertEquals(""%&C<hpXS-e/ExQLDe0="", argumentImpl0.getPreferredName());
}",0,assertNotNull(argumentImpl0.getPreferredName())
project,0,test1877,"public void test1877() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""%&C<hpXS-e/ExQLDe0="", ""%&C<hpXS-e/ExQLDe0="", 0, 0, 'E', 'E', (Validator) null, ""%&C<hpXS-e/ExQLDe0="", list0, 93);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
    argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
    assertEquals('E', argumentImpl0.getInitialSeparator());
}",0,assertNotNull(argumentImpl0.getInitialSeparator())
project,0,test1878,"public void test1878() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""%&C<hpXS-e/ExQLDe0="", ""%&C<hpXS-e/ExQLDe0="", 0, 0, 'E', 'E', (Validator) null, ""%&C<hpXS-e/ExQLDe0="", list0, 93);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
    argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
    assertEquals(""%&C<hpXS-e/ExQLDe0="", argumentImpl0.getConsumeRemaining());
}",0,assertNotNull(argumentImpl0.getConsumeRemaining())
project,0,test1879,"public void test1879() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""%&C<hpXS-e/ExQLDe0="", ""%&C<hpXS-e/ExQLDe0="", 0, 0, 'E', 'E', (Validator) null, ""%&C<hpXS-e/ExQLDe0="", list0, 93);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
    argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
    assertEquals('E', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test1880,"public void test1880() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""%&C<hpXS-e/ExQLDe0="", ""%&C<hpXS-e/ExQLDe0="", 0, 0, 'E', 'E', (Validator) null, ""%&C<hpXS-e/ExQLDe0="", list0, 93);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(argumentImpl0, list0);
    argumentImpl0.validate((WriteableCommandLine) writeableCommandLineImpl0);
    assertEquals(""%&C<hpXS-e/ExQLDe0="", argumentImpl0.getDescription());
}",0,
project,0,test1981,"public void test1981() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzQGr]f3"", ""F+UGzQGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzQGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
    sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0);
    assertEquals('i', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test1982,"public void test1982() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzQGr]f3"", ""F+UGzQGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzQGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
    sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0);
    assertEquals('j', argumentImpl0.getInitialSeparator());
}",0,
project,0,test1983,"public void test1983() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzQGr]f3"", ""F+UGzQGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzQGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
    sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0);
    assertEquals(""--"", sourceDestArgument0.getConsumeRemaining());
}",0,
project,0,test1984,"public void test1984() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzQGr]f3"", ""F+UGzQGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzQGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
    sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0);
    assertEquals(""SourceDestArgument"", sourceDestArgument0.getPreferredName());
}",0,assertNotNull(sourceDestArgument0.getPreferredName())
project,0,test1985,"public void test1985() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzQGr]f3"", ""F+UGzQGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzQGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
    sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0);
    assertEquals(""F+UGzQGr]f3"", argumentImpl0.getConsumeRemaining());
}",0,
project,0,test1986,"public void test1986() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzQGr]f3"", ""F+UGzQGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzQGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList0);
    sourceDestArgument0.validate((WriteableCommandLine) writeableCommandLineImpl0);
    assertEquals(""F+UGzQGr]f3"", argumentImpl0.getDescription());
}",0,
project,0,test2087,"public void test2087() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""\""a!U<\""#|o*(7LY"", """", Integer.MAX_VALUE, Integer.MAX_VALUE, '9', '-', (Validator) null, """", list0, 41);
    String string0 = argumentImpl0.toString();
    assertEquals(""<\""a!U<\""#|o*(7LY1> <\""a!U<\""#|o*(7LY2> ..."", string0);
}",0,
project,0,test2088,"public void test2088() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""\""a!U<\""#|o*(7LY"", """", Integer.MAX_VALUE, Integer.MAX_VALUE, '9', '-', (Validator) null, """", list0, 41);
    String string0 = argumentImpl0.toString();
    assertEquals('9', argumentImpl0.getInitialSeparator());
}",0,
project,0,test2089,"public void test2089() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""\""a!U<\""#|o*(7LY"", """", Integer.MAX_VALUE, Integer.MAX_VALUE, '9', '-', (Validator) null, """", list0, 41);
    String string0 = argumentImpl0.toString();
    assertEquals('-', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test2090,"public void test2090() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""\""a!U<\""#|o*(7LY"", """", Integer.MAX_VALUE, Integer.MAX_VALUE, '9', '-', (Validator) null, """", list0, 41);
    String string0 = argumentImpl0.toString();
    assertEquals("""", argumentImpl0.getConsumeRemaining());
}",0,assertNotNull(argumentImpl0.getConsumeRemaining())
project,0,test2091,"public void test2091() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""\""a!U<\""#|o*(7LY"", """", Integer.MAX_VALUE, Integer.MAX_VALUE, '9', '-', (Validator) null, """", list0, 41);
    String string0 = argumentImpl0.toString();
    assertEquals("""", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test2192,"public void test2192() throws Throwable {
    LinkedList<String> linkedList0 = new LinkedList<String>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""VO;h9!Ubi*B"", ""DISPLAY_GROUP_EXPANDED"", (-1442), (-1442), 'N', '(', (Validator) null, ""UB"", linkedList0, (-1442));
    String string0 = argumentImpl0.toString();
    assertEquals('N', argumentImpl0.getInitialSeparator());
}",0,assertNotNull(argumentImpl0.getInitialSeparator())
project,0,test2193,"public void test2193() throws Throwable {
    LinkedList<String> linkedList0 = new LinkedList<String>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""VO;h9!Ubi*B"", ""DISPLAY_GROUP_EXPANDED"", (-1442), (-1442), 'N', '(', (Validator) null, ""UB"", linkedList0, (-1442));
    String string0 = argumentImpl0.toString();
    assertEquals(""DISPLAY_GROUP_EXPANDED"", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test2194,"public void test2194() throws Throwable {
    LinkedList<String> linkedList0 = new LinkedList<String>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""VO;h9!Ubi*B"", ""DISPLAY_GROUP_EXPANDED"", (-1442), (-1442), 'N', '(', (Validator) null, ""UB"", linkedList0, (-1442));
    String string0 = argumentImpl0.toString();
    assertEquals("""", string0);
}",0,
project,0,test2195,"public void test2195() throws Throwable {
    LinkedList<String> linkedList0 = new LinkedList<String>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""VO;h9!Ubi*B"", ""DISPLAY_GROUP_EXPANDED"", (-1442), (-1442), 'N', '(', (Validator) null, ""UB"", linkedList0, (-1442));
    String string0 = argumentImpl0.toString();
    assertEquals(""VO;h9!Ubi*B"", argumentImpl0.getPreferredName());
}",0,assertNotNull(argumentImpl0.getPreferredName())
project,0,test2196,"public void test2196() throws Throwable {
    LinkedList<String> linkedList0 = new LinkedList<String>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""VO;h9!Ubi*B"", ""DISPLAY_GROUP_EXPANDED"", (-1442), (-1442), 'N', '(', (Validator) null, ""UB"", linkedList0, (-1442));
    String string0 = argumentImpl0.toString();
    assertEquals('(', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test2197,"public void test2197() throws Throwable {
    LinkedList<String> linkedList0 = new LinkedList<String>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""VO;h9!Ubi*B"", ""DISPLAY_GROUP_EXPANDED"", (-1442), (-1442), 'N', '(', (Validator) null, ""UB"", linkedList0, (-1442));
    String string0 = argumentImpl0.toString();
    assertEquals(""UB"", argumentImpl0.getConsumeRemaining());
}",0,assertNotNull(argumentImpl0.getConsumeRemaining())
project,0,test2298,"public void test2298() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""org.apache.commons.cli2.validation.FileValidator"", '3', 5974, '3', '9', (Validator) null, ""org.apache.commons.cli2.validation.FileValidator"", linkedList0, '3');
    argumentImpl0.toString();
    assertEquals(""org.apache.commons.cli2.validation.FileValidator"", argumentImpl0.getConsumeRemaining());
}",0,assertNotNull(argumentImpl0.getConsumeRemaining())
project,0,test2299,"public void test2299() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""org.apache.commons.cli2.validation.FileValidator"", '3', 5974, '3', '9', (Validator) null, ""org.apache.commons.cli2.validation.FileValidator"", linkedList0, '3');
    argumentImpl0.toString();
    assertEquals(""org.apache.commons.cli2.validation.FileValidator"", argumentImpl0.getPreferredName());
}",0,assertNotNull(argumentImpl0.getPreferredName())
project,0,test22100,"public void test22100() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""org.apache.commons.cli2.validation.FileValidator"", '3', 5974, '3', '9', (Validator) null, ""org.apache.commons.cli2.validation.FileValidator"", linkedList0, '3');
    argumentImpl0.toString();
    assertEquals('3', argumentImpl0.getInitialSeparator());
}",0,assertNotNull(argumentImpl0.getInitialSeparator())
project,0,test22101,"public void test22101() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""org.apache.commons.cli2.validation.FileValidator"", '3', 5974, '3', '9', (Validator) null, ""org.apache.commons.cli2.validation.FileValidator"", linkedList0, '3');
    argumentImpl0.toString();
    assertEquals('9', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test23103,"public void test23103() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzGr]f3"", ""F+UGzGr]f3"", 0, 85, 'i', 'i', fileValidator0, ""DISPLAY_PROPERTY_OPTION"", linkedList0, (-1543));
    StringBuffer stringBuffer0 = new StringBuffer(0);
    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
    argumentImpl0.appendUsage(stringBuffer0, linkedHashSet0, (Comparator) null);
    assertEquals(""F+UGzGr]f3"", argumentImpl0.getPreferredName());
}",0,assertNotNull(argumentImpl0.getPreferredName())
project,0,test24104,"public void test24104() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""org.apache.commons.cli2.validation.FileValidator"", 5941, 5941, '9', '#', (Validator) null, ""$GMuQluqoa[9"", linkedList0, 5941);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""a\"""");
    assertEquals('9', argumentImpl0.getInitialSeparator());
}",0,assertNotNull(argumentImpl0.getInitialSeparator())
project,0,test24105,"public void test24105() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""org.apache.commons.cli2.validation.FileValidator"", 5941, 5941, '9', '#', (Validator) null, ""$GMuQluqoa[9"", linkedList0, 5941);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""a\"""");
    assertEquals(""$GMuQluqoa[9"", argumentImpl0.getConsumeRemaining());
}",0,assertNotNull(argumentImpl0.getConsumeRemaining())
project,0,test24106,"public void test24106() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""org.apache.commons.cli2.validation.FileValidator"", 5941, 5941, '9', '#', (Validator) null, ""$GMuQluqoa[9"", linkedList0, 5941);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""a\"""");
    assertEquals(""a"", string0);
}",0,
project,0,test24107,"public void test24107() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""org.apache.commons.cli2.validation.FileValidator"", 5941, 5941, '9', '#', (Validator) null, ""$GMuQluqoa[9"", linkedList0, 5941);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""a\"""");
    assertEquals(""SourceDestArgument"", sourceDestArgument0.getPreferredName());
}",0,assertNotNull(sourceDestArgument0.getPreferredName())
project,0,test24108,"public void test24108() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""org.apache.commons.cli2.validation.FileValidator"", 5941, 5941, '9', '#', (Validator) null, ""$GMuQluqoa[9"", linkedList0, 5941);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""a\"""");
    assertEquals(""org.apache.commons.cli2.validation.FileValidator"", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test24109,"public void test24109() throws Throwable {
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""org.apache.commons.cli2.validation.FileValidator"", ""org.apache.commons.cli2.validation.FileValidator"", 5941, 5941, '9', '#', (Validator) null, ""$GMuQluqoa[9"", linkedList0, 5941);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""a\"""");
    assertEquals('#', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test25110,"public void test25110() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzGr]f3"", ""F+UGzGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""}O"");
    assertEquals(""F+UGzGr]f3"", argumentImpl0.getConsumeRemaining());
}",0,
project,0,test25111,"public void test25111() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzGr]f3"", ""F+UGzGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""}O"");
    assertEquals('i', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test25112,"public void test25112() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzGr]f3"", ""F+UGzGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""}O"");
    assertEquals(""\""}O"", string0);
}",0,
project,0,test25113,"public void test25113() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzGr]f3"", ""F+UGzGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""}O"");
    assertEquals(""F+UGzGr]f3"", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test25114,"public void test25114() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzGr]f3"", ""F+UGzGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""}O"");
    assertEquals(""--"", sourceDestArgument0.getConsumeRemaining());
}",0,
project,0,test25115,"public void test25115() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzGr]f3"", ""F+UGzGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""}O"");
    assertEquals('j', argumentImpl0.getInitialSeparator());
}",0,
project,0,test25116,"public void test25116() throws Throwable {
    FileValidator fileValidator0 = FileValidator.getExistingInstance();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""F+UGzGr]f3"", ""F+UGzGr]f3"", 0, 0, 'j', 'i', fileValidator0, ""F+UGzGr]f3"", linkedList0, 0);
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    String string0 = sourceDestArgument0.stripBoundaryQuotes(""\""}O"");
    assertEquals(""SourceDestArgument"", sourceDestArgument0.getPreferredName());
}",0,assertNotNull(sourceDestArgument0.getPreferredName())
project,0,test26117,"public void test26117() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""a!U<\""#|o*(7LY"", ""a!U<\""#|o*(7LY"", 0, 0, '5', '5', numberValidator0, """", linkedList0, 0);
    boolean boolean0 = argumentImpl0.isRequired();
    assertEquals("""", argumentImpl0.getConsumeRemaining());
}",0,
project,0,test26118,"public void test26118() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""a!U<\""#|o*(7LY"", ""a!U<\""#|o*(7LY"", 0, 0, '5', '5', numberValidator0, """", linkedList0, 0);
    boolean boolean0 = argumentImpl0.isRequired();
    assertEquals('5', argumentImpl0.getInitialSeparator());
}",0,
project,0,test26119,"public void test26119() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""a!U<\""#|o*(7LY"", ""a!U<\""#|o*(7LY"", 0, 0, '5', '5', numberValidator0, """", linkedList0, 0);
    boolean boolean0 = argumentImpl0.isRequired();
    assertEquals(""a!U<\""#|o*(7LY"", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test26120,"public void test26120() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""a!U<\""#|o*(7LY"", ""a!U<\""#|o*(7LY"", 0, 0, '5', '5', numberValidator0, """", linkedList0, 0);
    boolean boolean0 = argumentImpl0.isRequired();
    assertEquals('5', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test26121,"public void test26121() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""a!U<\""#|o*(7LY"", ""a!U<\""#|o*(7LY"", 0, 0, '5', '5', numberValidator0, """", linkedList0, 0);
    boolean boolean0 = argumentImpl0.isRequired();
    assertEquals(""a!U<\""#|o*(7LY"", argumentImpl0.getPreferredName());
}",0,assertNotNull(argumentImpl0.getPreferredName())
project,0,test26122,"public void test26122() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""a!U<\""#|o*(7LY"", ""a!U<\""#|o*(7LY"", 0, 0, '5', '5', numberValidator0, """", linkedList0, 0);
    boolean boolean0 = argumentImpl0.isRequired();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test27123,"public void test27123() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""\""}O"", """", 19, 19, 'P', 'b', numberValidator0, """", linkedList0, 19);
    boolean boolean0 = argumentImpl0.isRequired();
    assertEquals("""", argumentImpl0.getConsumeRemaining());
}",0,
project,0,test27124,"public void test27124() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""\""}O"", """", 19, 19, 'P', 'b', numberValidator0, """", linkedList0, 19);
    boolean boolean0 = argumentImpl0.isRequired();
    assertEquals('b', argumentImpl0.getSubsequentSeparator());
}",0,assertNotNull(argumentImpl0.getSubsequentSeparator())
project,0,test27125,"public void test27125() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""\""}O"", """", 19, 19, 'P', 'b', numberValidator0, """", linkedList0, 19);
    boolean boolean0 = argumentImpl0.isRequired();
    assertEquals("""", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test27126,"public void test27126() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""\""}O"", """", 19, 19, 'P', 'b', numberValidator0, """", linkedList0, 19);
    boolean boolean0 = argumentImpl0.isRequired();
    assertEquals('P', argumentImpl0.getInitialSeparator());
}",0,
project,0,test27127,"public void test27127() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""\""}O"", """", 19, 19, 'P', 'b', numberValidator0, """", linkedList0, 19);
    boolean boolean0 = argumentImpl0.isRequired();
    assertEquals(""\""}O"", argumentImpl0.getPreferredName());
}",0,assertNotNull(argumentImpl0.getPreferredName())
project,0,test27128,"public void test27128() throws Throwable {
    NumberValidator numberValidator0 = NumberValidator.getPercentInstance();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""\""}O"", """", 19, 19, 'P', 'b', numberValidator0, """", linkedList0, 19);
    boolean boolean0 = argumentImpl0.isRequired();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
