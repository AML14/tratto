focal_method,test_prefix,docstring
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test000() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addOption(""o"", true, ""-o"");
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""-o"";
    stringArray0[1] = ""-o"";
    try {
        defaultParser0.parse(options1, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing argument for option: o
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {
    return parse(options, arguments, properties, false);
}","public void test011() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Properties properties0 = new Properties();
    CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0);
    assertNotNull(commandLine0);
}","/**
 * Parse the arguments according to the specified options and properties.
 *
 * @param options    the specified Options
 * @param arguments  the command line arguments
 * @param properties command line option name-value pairs
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 */"
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test022() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Option option0 = new Option(""o"", true, ""o"");
    options0.addOption(option0);
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""o"";
    stringArray0[1] = ""o"";
    stringArray0[2] = ""-org.apach.common].cli.Co}mandLine"";
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {
    return parse(options, arguments, properties, false);
}","public void test033() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Properties properties0 = new Properties();
    properties0.put(""o"", options0);
    // Undeclared exception!
    try {
        defaultParser0.parse(options0, (String[]) null, properties0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}","/**
 * Parse the arguments according to the specified options and properties.
 *
 * @param options    the specified Options
 * @param arguments  the command line arguments
 * @param properties command line option name-value pairs
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 */"
"public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {
    return parse(options, arguments, null, stopAtNonOption);
}","public void test044() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.setRequired(true);
    Options options1 = options0.addOptionGroup(optionGroup0);
    String[] stringArray0 = new String[0];
    try {
        defaultParser0.parse(options1, stringArray0, true);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing required option: []
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"protected void handleConcatenatedOptions(String token) throws ParseException {
    for (int i = 1; i < token.length(); i++) {
        String ch = String.valueOf(token.charAt(i));
        if (options.hasOption(ch)) {
            handleOption(options.getOption(ch));
            if (currentOption != null && (token.length() != (i + 1))) {
                // add the trail as an argument of the option
                currentOption.addValueForProcessing(token.substring(i + 1));
                break;
            }
        } else {
            handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);
            break;
        }
    }
}","public void test055() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addOption("""", true, ""U-)"");
    String[] stringArray0 = new String[20];
    stringArray0[0] = ""U-)"";
    defaultParser0.parse(options0, stringArray0, true);
    defaultParser0.handleConcatenatedOptions(""U-)"");
    defaultParser0.handleConcatenatedOptions(""U-)"");
}","/**
 * Breaks <code>token</code> into its constituent parts
 * using the following algorithm.
 *
 * <ul>
 *  <li>ignore the first character (""<b>-</b>"")</li>
 *  <li>foreach remaining character check if an {@link Option}
 *  exists with that id.</li>
 *  <li>if an {@link Option} does exist then add that character
 *  prepended with ""<b>-</b>"" to the list of processed tokens.</li>
 *  <li>if the {@link Option} can have an argument value and there
 *  are remaining characters in the token then add the remaining
 *  characters as a token to the list of processed tokens.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
 *  ""<b>--</b>"" followed by the remaining characters and also
 *  the remaining tokens directly to the processed tokens list.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
 *  character prepended with ""<b>-</b>"".</li>
 * </ul>
 *
 * @param token The current token to be <b>burst</b>
 * at the first non-Option encountered.
 */"
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test066() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""--"";
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test077() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addOption(""o"", true, ""-o"");
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""-o"";
    stringArray0[1] = ""o"";
    CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test088() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addOption(""o"", true, ""o"");
    String[] stringArray0 = new String[6];
    stringArray0[0] = ""-o"";
    stringArray0[1] = ""-"";
    stringArray0[2] = ""--Rx|v,K'-G3+v7c-7"";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: --Rx|v,K'-G3+v7c-7
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test099() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-"";
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1010() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addOption(""o"", ""o"", true, ""o"");
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""-o"";
    stringArray0[1] = ""-o"";
    try {
        defaultParser0.parse(options1, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing argument for option: o
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1111() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addOption(""o"", true, ""H"");
    String[] stringArray0 = new String[4];
    stringArray0[0] = ""-o"";
    stringArray0[1] = ""--t<=E"";
    // Undeclared exception!
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"protected void handleConcatenatedOptions(String token) throws ParseException {
    for (int i = 1; i < token.length(); i++) {
        String ch = String.valueOf(token.charAt(i));
        if (options.hasOption(ch)) {
            handleOption(options.getOption(ch));
            if (currentOption != null && (token.length() != (i + 1))) {
                // add the trail as an argument of the option
                currentOption.addValueForProcessing(token.substring(i + 1));
                break;
            }
        } else {
            handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);
            break;
        }
    }
}","public void test1212() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    defaultParser0.parse(options0, (String[]) null, true);
    defaultParser0.handleConcatenatedOptions(""--I"");
}","/**
 * Breaks <code>token</code> into its constituent parts
 * using the following algorithm.
 *
 * <ul>
 *  <li>ignore the first character (""<b>-</b>"")</li>
 *  <li>foreach remaining character check if an {@link Option}
 *  exists with that id.</li>
 *  <li>if an {@link Option} does exist then add that character
 *  prepended with ""<b>-</b>"" to the list of processed tokens.</li>
 *  <li>if the {@link Option} can have an argument value and there
 *  are remaining characters in the token then add the remaining
 *  characters as a token to the list of processed tokens.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
 *  ""<b>--</b>"" followed by the remaining characters and also
 *  the remaining tokens directly to the processed tokens list.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
 *  character prepended with ""<b>-</b>"".</li>
 * </ul>
 *
 * @param token The current token to be <b>burst</b>
 * at the first non-Option encountered.
 */"
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1313() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[11];
    stringArray0[0] = ""----=Fi!(0"";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: ----=Fi!(0
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1414() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addOption(""o"", ""---"", false, ""---"");
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""---"";
    // Undeclared exception!
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1515() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addOption("""", ""---"", false, ""---"");
    options0.addOption(""yes"", ""-: "", false, ""---"");
    String[] stringArray0 = new String[4];
    stringArray0[0] = ""---"";
    try {
        defaultParser0.parse(options1, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Ambiguous option: '---'  (could be: '-: ', '---')
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1616() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""-1"";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: -1
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1717() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""t"";
    stringArray0[1] = ""-t="";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: -t=
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1818() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addOption(""true"", false, ""-true"");
    String[] stringArray0 = new String[4];
    stringArray0[0] = """";
    stringArray0[1] = ""o"";
    stringArray0[2] = ""-true"";
    // Undeclared exception!
    try {
        defaultParser0.parse(options1, stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1919() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Option option0 = new Option(""o"", true, ""o"");
    option0.setArgs((-2));
    options0.addOption(option0);
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""o"";
    stringArray0[1] = ""o"";
    stringArray0[2] = ""-org.apach.common].cli.Co}mandLine"";
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test2020() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-[O<N60=+P[%tV{X"";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: -[O<N60=+P[%tV{X
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test2121() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addOption(""t"", true, ""-t="");
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""t"";
    stringArray0[1] = ""-t="";
    // Undeclared exception!
    try {
        defaultParser0.parse(options1, stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test2222() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addOption(""t"", false, ""-t="");
    String[] stringArray0 = new String[17];
    stringArray0[0] = ""-t="";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: -t=
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test2323() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""-org.apache.commons.cli.Option"";
    Option option0 = new Option(""o"", true, stringArray0[1]);
    option0.setArgs(174);
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup1);
    // Undeclared exception!
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"protected void handleConcatenatedOptions(String token) throws ParseException {
    for (int i = 1; i < token.length(); i++) {
        String ch = String.valueOf(token.charAt(i));
        if (options.hasOption(ch)) {
            handleOption(options.getOption(ch));
            if (currentOption != null && (token.length() != (i + 1))) {
                // add the trail as an argument of the option
                currentOption.addValueForProcessing(token.substring(i + 1));
                break;
            }
        } else {
            handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);
            break;
        }
    }
}","public void test2424() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Option option0 = new Option("""", false, """");
    String[] stringArray0 = new String[0];
    options0.addOption(option0);
    option0.setRequired(true);
    defaultParser0.parse(options0, stringArray0, true);
    defaultParser0.handleConcatenatedOptions(""--"");
}","/**
 * Breaks <code>token</code> into its constituent parts
 * using the following algorithm.
 *
 * <ul>
 *  <li>ignore the first character (""<b>-</b>"")</li>
 *  <li>foreach remaining character check if an {@link Option}
 *  exists with that id.</li>
 *  <li>if an {@link Option} does exist then add that character
 *  prepended with ""<b>-</b>"" to the list of processed tokens.</li>
 *  <li>if the {@link Option} can have an argument value and there
 *  are remaining characters in the token then add the remaining
 *  characters as a token to the list of processed tokens.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
 *  ""<b>--</b>"" followed by the remaining characters and also
 *  the remaining tokens directly to the processed tokens list.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
 *  character prepended with ""<b>-</b>"".</li>
 * </ul>
 *
 * @param token The current token to be <b>burst</b>
 * at the first non-Option encountered.
 */"
"protected void handleConcatenatedOptions(String token) throws ParseException {
    for (int i = 1; i < token.length(); i++) {
        String ch = String.valueOf(token.charAt(i));
        if (options.hasOption(ch)) {
            handleOption(options.getOption(ch));
            if (currentOption != null && (token.length() != (i + 1))) {
                // add the trail as an argument of the option
                currentOption.addValueForProcessing(token.substring(i + 1));
                break;
            }
        } else {
            handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);
            break;
        }
    }
}","public void test2525() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option("""", true, """");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup1);
    optionGroup0.setRequired(true);
    String[] stringArray0 = new String[0];
    defaultParser0.parse(options1, stringArray0, true);
    defaultParser0.handleConcatenatedOptions(""--"");
}","/**
 * Breaks <code>token</code> into its constituent parts
 * using the following algorithm.
 *
 * <ul>
 *  <li>ignore the first character (""<b>-</b>"")</li>
 *  <li>foreach remaining character check if an {@link Option}
 *  exists with that id.</li>
 *  <li>if an {@link Option} does exist then add that character
 *  prepended with ""<b>-</b>"" to the list of processed tokens.</li>
 *  <li>if the {@link Option} can have an argument value and there
 *  are remaining characters in the token then add the remaining
 *  characters as a token to the list of processed tokens.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
 *  ""<b>--</b>"" followed by the remaining characters and also
 *  the remaining tokens directly to the processed tokens list.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
 *  character prepended with ""<b>-</b>"".</li>
 * </ul>
 *
 * @param token The current token to be <b>burst</b>
 * at the first non-Option encountered.
 */"
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test2626() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-org.apach4.ommons.zli.AlreadySelectedExcepion"";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: -org.apach4.ommons.zli.AlreadySelectedExcepion
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"protected void handleConcatenatedOptions(String token) throws ParseException {
    for (int i = 1; i < token.length(); i++) {
        String ch = String.valueOf(token.charAt(i));
        if (options.hasOption(ch)) {
            handleOption(options.getOption(ch));
            if (currentOption != null && (token.length() != (i + 1))) {
                // add the trail as an argument of the option
                currentOption.addValueForProcessing(token.substring(i + 1));
                break;
            }
        } else {
            handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);
            break;
        }
    }
}","public void test2727() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addOption("""", false, ""U-)"");
    defaultParser0.parse(options0, (String[]) null, true);
    defaultParser0.handleConcatenatedOptions(""U-)"");
}","/**
 * Breaks <code>token</code> into its constituent parts
 * using the following algorithm.
 *
 * <ul>
 *  <li>ignore the first character (""<b>-</b>"")</li>
 *  <li>foreach remaining character check if an {@link Option}
 *  exists with that id.</li>
 *  <li>if an {@link Option} does exist then add that character
 *  prepended with ""<b>-</b>"" to the list of processed tokens.</li>
 *  <li>if the {@link Option} can have an argument value and there
 *  are remaining characters in the token then add the remaining
 *  characters as a token to the list of processed tokens.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
 *  ""<b>--</b>"" followed by the remaining characters and also
 *  the remaining tokens directly to the processed tokens list.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
 *  character prepended with ""<b>-</b>"".</li>
 * </ul>
 *
 * @param token The current token to be <b>burst</b>
 * at the first non-Option encountered.
 */"
