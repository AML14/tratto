focal_method,test_prefix,docstring
"public void processArgs(Option opt, ListIterator iter) throws ParseException {
    // loop until an option is found
    while (iter.hasNext()) {
        String str = (String) iter.next();
        // found an Option, not an argument
        if (getOptions().hasOption(str) && str.startsWith(""-"")) {
            iter.previous();
            break;
        }
        // found a value
        try {
            opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));
        } catch (RuntimeException exp) {
            iter.previous();
            break;
        }
    }
    if (opt.getValues() == null && !opt.hasOptionalArg()) {
        throw new MissingArgumentException(opt);
    }
}","public void test000() throws Throwable {
    BasicParser basicParser0 = new BasicParser();
    Option option0 = new Option((String) null, true, (String) null);
    LinkedList<String> linkedList0 = new LinkedList<String>();
    ListIterator<String> listIterator0 = linkedList0.listIterator();
    option0.setOptionalArg(true);
    basicParser0.processArgs(option0, listIterator0);
    assertEquals((-2), Option.UNLIMITED_VALUES);
}","/**
 * <p>Process the argument values for the specified Option
 * <code>opt</code> using the values retrieved from the
 * specified iterator <code>iter</code>.
 *
 * @param opt The current Option
 * @param iter The iterator over the flattened command line
 * Options.
 *
 * @throws ParseException if an argument value is required
 * and it is has not been found.
 */"
"public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {
    return parse(options, arguments, null, stopAtNonOption);
}","public void test011() throws Throwable {
    Options options0 = new Options();
    GnuParser gnuParser0 = new GnuParser();
    String[] stringArray0 = new String[1];
    // Undeclared exception!
    try {
        gnuParser0.parse(options0, stringArray0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.GnuParser"", e);
    }
}","/**
 * Parses the specified <code>arguments</code>
 * based on the specifed {@link Options}.
 *
 * @param options         the <code>Options</code>
 * @param arguments       the <code>arguments</code>
 * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops
 *     the parsing and the remaining arguments are added to the
 *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized
 *     argument triggers a ParseException.
 * @return the <code>CommandLine</code>
 * @throws ParseException if an error occurs when parsing the arguments.
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {
    return parse(options, arguments, properties, false);
}","public void test022() throws Throwable {
    Options options0 = new Options();
    Properties properties0 = new Properties();
    GnuParser gnuParser0 = new GnuParser();
    CommandLine commandLine0 = gnuParser0.parse(options0, (String[]) null, properties0);
    assertNotNull(commandLine0);
}","/**
 * Parse the arguments according to the specified options and properties.
 *
 * @param options    the specified Options
 * @param arguments  the command line arguments
 * @param properties command line option name-value pairs
 * @return the list of atomic option and value tokens
 * @throws ParseException if there are any problems encountered
 *                        while parsing the command line tokens.
 *
 * @since 1.1
 */"
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null, false);
}","public void test033() throws Throwable {
    GnuParser gnuParser0 = new GnuParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""-~;t"";
    PosixParser posixParser0 = new PosixParser();
    String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
    CommandLine commandLine0 = gnuParser0.parse(options0, stringArray1);
    assertNotNull(commandLine0);
}","/**
 * Parses the specified <code>arguments</code> based
 * on the specifed {@link Options}.
 *
 * @param options the <code>Options</code>
 * @param arguments the <code>arguments</code>
 * @return the <code>CommandLine</code>
 * @throws ParseException if an error occurs when parsing the
 * arguments.
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {
    // clear out the data in options in case it's been used before (CLI-71)
    for (Iterator it = options.helpOptions().iterator(); it.hasNext(); ) {
        Option opt = (Option) it.next();
        opt.clearValues();
    }
    // clear the data from the groups
    for (Iterator it = options.getOptionGroups().iterator(); it.hasNext(); ) {
        OptionGroup group = (OptionGroup) it.next();
        group.setSelected(null);
    }
    // initialise members
    setOptions(options);
    cmd = new CommandLine();
    boolean eatTheRest = false;
    if (arguments == null) {
        arguments = new String[0];
    }
    List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));
    ListIterator iterator = tokenList.listIterator();
    // process each flattened token
    while (iterator.hasNext()) {
        String t = (String) iterator.next();
        // the value is the double-dash
        if (""--"".equals(t)) {
            eatTheRest = true;
        } else // the value is a single dash
        if (""-"".equals(t)) {
            if (stopAtNonOption) {
                eatTheRest = true;
            } else {
                cmd.addArg(t);
            }
        } else // the value is an option
        if (t.startsWith(""-"")) {
            if (stopAtNonOption && !getOptions().hasOption(t)) {
                eatTheRest = true;
                cmd.addArg(t);
            } else {
                processOption(t, iterator);
            }
        } else // the value is an argument
        {
            cmd.addArg(t);
            if (stopAtNonOption) {
                eatTheRest = true;
            }
        }
        // eat the remaining tokens
        if (eatTheRest) {
            while (iterator.hasNext()) {
                String str = (String) iterator.next();
                // ensure only one double-dash is added
                if (!""--"".equals(str)) {
                    cmd.addArg(str);
                }
            }
        }
    }
    processProperties(properties);
    checkRequiredOptions();
    return cmd;
}","public void test044() throws Throwable {
    Options options0 = new Options();
    Properties properties0 = new Properties();
    GnuParser gnuParser0 = new GnuParser();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-"";
    CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
    assertNotNull(commandLine0);
}","/**
 * Parse the arguments according to the specified options and
 * properties.
 *
 * @param options the specified Options
 * @param arguments the command line arguments
 * @param properties command line option name-value pairs
 * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops
 *     the parsing and the remaining arguments are added to the
 *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized
 *     argument triggers a ParseException.
 *
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 *
 * @since 1.1
 */"
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null, false);
}","public void test055() throws Throwable {
    Options options0 = new Options();
    GnuParser gnuParser0 = new GnuParser();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-"";
    CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0);
    assertNotNull(commandLine0);
}","/**
 * Parses the specified <code>arguments</code> based
 * on the specifed {@link Options}.
 *
 * @param options the <code>Options</code>
 * @param arguments the <code>arguments</code>
 * @return the <code>CommandLine</code>
 * @throws ParseException if an error occurs when parsing the
 * arguments.
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {
    // clear out the data in options in case it's been used before (CLI-71)
    for (Iterator it = options.helpOptions().iterator(); it.hasNext(); ) {
        Option opt = (Option) it.next();
        opt.clearValues();
    }
    // clear the data from the groups
    for (Iterator it = options.getOptionGroups().iterator(); it.hasNext(); ) {
        OptionGroup group = (OptionGroup) it.next();
        group.setSelected(null);
    }
    // initialise members
    setOptions(options);
    cmd = new CommandLine();
    boolean eatTheRest = false;
    if (arguments == null) {
        arguments = new String[0];
    }
    List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));
    ListIterator iterator = tokenList.listIterator();
    // process each flattened token
    while (iterator.hasNext()) {
        String t = (String) iterator.next();
        // the value is the double-dash
        if (""--"".equals(t)) {
            eatTheRest = true;
        } else // the value is a single dash
        if (""-"".equals(t)) {
            if (stopAtNonOption) {
                eatTheRest = true;
            } else {
                cmd.addArg(t);
            }
        } else // the value is an option
        if (t.startsWith(""-"")) {
            if (stopAtNonOption && !getOptions().hasOption(t)) {
                eatTheRest = true;
                cmd.addArg(t);
            } else {
                processOption(t, iterator);
            }
        } else // the value is an argument
        {
            cmd.addArg(t);
            if (stopAtNonOption) {
                eatTheRest = true;
            }
        }
        // eat the remaining tokens
        if (eatTheRest) {
            while (iterator.hasNext()) {
                String str = (String) iterator.next();
                // ensure only one double-dash is added
                if (!""--"".equals(str)) {
                    cmd.addArg(str);
                }
            }
        }
    }
    processProperties(properties);
    checkRequiredOptions();
    return cmd;
}","public void test066() throws Throwable {
    GnuParser gnuParser0 = new GnuParser();
    Options options0 = new Options();
    Properties properties0 = new Properties();
    String[] stringArray0 = new String[20];
    stringArray0[0] = ""-tn'm{W$6H0r5{;w"";
    CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
    assertNotNull(commandLine0);
}","/**
 * Parse the arguments according to the specified options and
 * properties.
 *
 * @param options the specified Options
 * @param arguments the command line arguments
 * @param properties command line option name-value pairs
 * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops
 *     the parsing and the remaining arguments are added to the
 *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized
 *     argument triggers a ParseException.
 *
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 *
 * @since 1.1
 */"
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null, false);
}","public void test077() throws Throwable {
    Options options0 = new Options();
    GnuParser gnuParser0 = new GnuParser();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-~;t"";
    try {
        gnuParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: -~;t
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * Parses the specified <code>arguments</code> based
 * on the specifed {@link Options}.
 *
 * @param options the <code>Options</code>
 * @param arguments the <code>arguments</code>
 * @return the <code>CommandLine</code>
 * @throws ParseException if an error occurs when parsing the
 * arguments.
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {
    // clear out the data in options in case it's been used before (CLI-71)
    for (Iterator it = options.helpOptions().iterator(); it.hasNext(); ) {
        Option opt = (Option) it.next();
        opt.clearValues();
    }
    // clear the data from the groups
    for (Iterator it = options.getOptionGroups().iterator(); it.hasNext(); ) {
        OptionGroup group = (OptionGroup) it.next();
        group.setSelected(null);
    }
    // initialise members
    setOptions(options);
    cmd = new CommandLine();
    boolean eatTheRest = false;
    if (arguments == null) {
        arguments = new String[0];
    }
    List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));
    ListIterator iterator = tokenList.listIterator();
    // process each flattened token
    while (iterator.hasNext()) {
        String t = (String) iterator.next();
        // the value is the double-dash
        if (""--"".equals(t)) {
            eatTheRest = true;
        } else // the value is a single dash
        if (""-"".equals(t)) {
            if (stopAtNonOption) {
                eatTheRest = true;
            } else {
                cmd.addArg(t);
            }
        } else // the value is an option
        if (t.startsWith(""-"")) {
            if (stopAtNonOption && !getOptions().hasOption(t)) {
                eatTheRest = true;
                cmd.addArg(t);
            } else {
                processOption(t, iterator);
            }
        } else // the value is an argument
        {
            cmd.addArg(t);
            if (stopAtNonOption) {
                eatTheRest = true;
            }
        }
        // eat the remaining tokens
        if (eatTheRest) {
            while (iterator.hasNext()) {
                String str = (String) iterator.next();
                // ensure only one double-dash is added
                if (!""--"".equals(str)) {
                    cmd.addArg(str);
                }
            }
        }
    }
    processProperties(properties);
    checkRequiredOptions();
    return cmd;
}","public void test088() throws Throwable {
    Options options0 = new Options();
    BasicParser basicParser0 = new BasicParser();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""org.apache.commons.cli.AmbiguousOptionException"";
    stringArray0[1] = ""--"";
    Properties properties0 = new Properties();
    CommandLine commandLine0 = basicParser0.parse(options0, stringArray0, properties0, true);
    assertNotNull(commandLine0);
}","/**
 * Parse the arguments according to the specified options and
 * properties.
 *
 * @param options the specified Options
 * @param arguments the command line arguments
 * @param properties command line option name-value pairs
 * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops
 *     the parsing and the remaining arguments are added to the
 *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized
 *     argument triggers a ParseException.
 *
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 *
 * @since 1.1
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {
    // clear out the data in options in case it's been used before (CLI-71)
    for (Iterator it = options.helpOptions().iterator(); it.hasNext(); ) {
        Option opt = (Option) it.next();
        opt.clearValues();
    }
    // clear the data from the groups
    for (Iterator it = options.getOptionGroups().iterator(); it.hasNext(); ) {
        OptionGroup group = (OptionGroup) it.next();
        group.setSelected(null);
    }
    // initialise members
    setOptions(options);
    cmd = new CommandLine();
    boolean eatTheRest = false;
    if (arguments == null) {
        arguments = new String[0];
    }
    List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));
    ListIterator iterator = tokenList.listIterator();
    // process each flattened token
    while (iterator.hasNext()) {
        String t = (String) iterator.next();
        // the value is the double-dash
        if (""--"".equals(t)) {
            eatTheRest = true;
        } else // the value is a single dash
        if (""-"".equals(t)) {
            if (stopAtNonOption) {
                eatTheRest = true;
            } else {
                cmd.addArg(t);
            }
        } else // the value is an option
        if (t.startsWith(""-"")) {
            if (stopAtNonOption && !getOptions().hasOption(t)) {
                eatTheRest = true;
                cmd.addArg(t);
            } else {
                processOption(t, iterator);
            }
        } else // the value is an argument
        {
            cmd.addArg(t);
            if (stopAtNonOption) {
                eatTheRest = true;
            }
        }
        // eat the remaining tokens
        if (eatTheRest) {
            while (iterator.hasNext()) {
                String str = (String) iterator.next();
                // ensure only one double-dash is added
                if (!""--"".equals(str)) {
                    cmd.addArg(str);
                }
            }
        }
    }
    processProperties(properties);
    checkRequiredOptions();
    return cmd;
}","public void test099() throws Throwable {
    GnuParser gnuParser0 = new GnuParser();
    Options options0 = new Options();
    Properties properties0 = new Properties();
    properties0.put(""-tn'm{W$6H0r5{;w"", ""-tn'm{W$6H0r5{;w"");
    // Undeclared exception!
    try {
        gnuParser0.parse(options0, (String[]) null, properties0, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * Parse the arguments according to the specified options and
 * properties.
 *
 * @param options the specified Options
 * @param arguments the command line arguments
 * @param properties command line option name-value pairs
 * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops
 *     the parsing and the remaining arguments are added to the
 *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized
 *     argument triggers a ParseException.
 *
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 *
 * @since 1.1
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {
    // clear out the data in options in case it's been used before (CLI-71)
    for (Iterator it = options.helpOptions().iterator(); it.hasNext(); ) {
        Option opt = (Option) it.next();
        opt.clearValues();
    }
    // clear the data from the groups
    for (Iterator it = options.getOptionGroups().iterator(); it.hasNext(); ) {
        OptionGroup group = (OptionGroup) it.next();
        group.setSelected(null);
    }
    // initialise members
    setOptions(options);
    cmd = new CommandLine();
    boolean eatTheRest = false;
    if (arguments == null) {
        arguments = new String[0];
    }
    List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));
    ListIterator iterator = tokenList.listIterator();
    // process each flattened token
    while (iterator.hasNext()) {
        String t = (String) iterator.next();
        // the value is the double-dash
        if (""--"".equals(t)) {
            eatTheRest = true;
        } else // the value is a single dash
        if (""-"".equals(t)) {
            if (stopAtNonOption) {
                eatTheRest = true;
            } else {
                cmd.addArg(t);
            }
        } else // the value is an option
        if (t.startsWith(""-"")) {
            if (stopAtNonOption && !getOptions().hasOption(t)) {
                eatTheRest = true;
                cmd.addArg(t);
            } else {
                processOption(t, iterator);
            }
        } else // the value is an argument
        {
            cmd.addArg(t);
            if (stopAtNonOption) {
                eatTheRest = true;
            }
        }
        // eat the remaining tokens
        if (eatTheRest) {
            while (iterator.hasNext()) {
                String str = (String) iterator.next();
                // ensure only one double-dash is added
                if (!""--"".equals(str)) {
                    cmd.addArg(str);
                }
            }
        }
    }
    processProperties(properties);
    checkRequiredOptions();
    return cmd;
}","public void test1010() throws Throwable {
    GnuParser gnuParser0 = new GnuParser();
    Options options0 = new Options();
    Properties properties0 = new Properties();
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.setRequired(true);
    Options options1 = options0.addOptionGroup(optionGroup0);
    try {
        gnuParser0.parse(options1, (String[]) null, properties0, true);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing required option: []
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * Parse the arguments according to the specified options and
 * properties.
 *
 * @param options the specified Options
 * @param arguments the command line arguments
 * @param properties command line option name-value pairs
 * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops
 *     the parsing and the remaining arguments are added to the
 *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized
 *     argument triggers a ParseException.
 *
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 *
 * @since 1.1
 */"
"public void processArgs(Option opt, ListIterator iter) throws ParseException {
    // loop until an option is found
    while (iter.hasNext()) {
        String str = (String) iter.next();
        // found an Option, not an argument
        if (getOptions().hasOption(str) && str.startsWith(""-"")) {
            iter.previous();
            break;
        }
        // found a value
        try {
            opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));
        } catch (RuntimeException exp) {
            iter.previous();
            break;
        }
    }
    if (opt.getValues() == null && !opt.hasOptionalArg()) {
        throw new MissingArgumentException(opt);
    }
}","public void test1213() throws Throwable {
    Options options0 = new Options();
    GnuParser gnuParser0 = new GnuParser();
    Properties properties0 = new Properties();
    LinkedList<String> linkedList0 = new LinkedList<String>();
    linkedList0.add("" to desired type: "");
    String[] stringArray0 = new String[1];
    stringArray0[0] = "" to desired type: "";
    gnuParser0.parse(options0, stringArray0, properties0, true);
    ListIterator<String> listIterator0 = linkedList0.listIterator();
    // Undeclared exception!
    try {
        gnuParser0.processArgs((Option) null, listIterator0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * <p>Process the argument values for the specified Option
 * <code>opt</code> using the values retrieved from the
 * specified iterator <code>iter</code>.
 *
 * @param opt The current Option
 * @param iter The iterator over the flattened command line
 * Options.
 *
 * @throws ParseException if an argument value is required
 * and it is has not been found.
 */"
"protected void processOption(String arg, ListIterator iter) throws ParseException {
    boolean hasOption = getOptions().hasOption(arg);
    // if there is no option throw an UnrecognisedOptionException
    if (!hasOption) {
        throw new UnrecognizedOptionException(""Unrecognized option: "" + arg, arg);
    }
    // get the option represented by arg
    Option opt = (Option) getOptions().getOption(arg).clone();
    // update the required options and groups
    updateRequiredOptions(opt);
    // if the option takes an argument value
    if (opt.hasArg()) {
        processArgs(opt, iter);
    }
    // set the option on the command line
    cmd.addOption(opt);
}","public void test1314() throws Throwable {
    Option option0 = new Option(""5"", ""5"", true, ""5"");
    Options options0 = new Options();
    Options options1 = options0.addOption(option0);
    Properties properties0 = new Properties();
    BasicParser basicParser0 = new BasicParser();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""5"";
    stringArray0[1] = ""5"";
    basicParser0.parse(options1, stringArray0, properties0, false);
    LinkedList<String> linkedList0 = new LinkedList<String>();
    linkedList0.add(""-5"");
    ListIterator<String> listIterator0 = linkedList0.listIterator();
    try {
        basicParser0.processOption(""-5"", listIterator0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing argument for option: 5
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * Process the Option specified by <code>arg</code> using the values
 * retrieved from the specfied iterator <code>iter</code>.
 *
 * @param arg The String value representing an Option
 * @param iter The iterator over the flattened command line arguments.
 *
 * @throws ParseException if <code>arg</code> does not represent an Option
 */"
"protected void processOption(String arg, ListIterator iter) throws ParseException {
    boolean hasOption = getOptions().hasOption(arg);
    // if there is no option throw an UnrecognisedOptionException
    if (!hasOption) {
        throw new UnrecognizedOptionException(""Unrecognized option: "" + arg, arg);
    }
    // get the option represented by arg
    Option opt = (Option) getOptions().getOption(arg).clone();
    // update the required options and groups
    updateRequiredOptions(opt);
    // if the option takes an argument value
    if (opt.hasArg()) {
        processArgs(opt, iter);
    }
    // set the option on the command line
    cmd.addOption(opt);
}","public void test1415() throws Throwable {
    BasicParser basicParser0 = new BasicParser();
    Options options0 = new Options();
    Option option0 = new Option(""yes"", ""yes"", false, ""yes"");
    Options options1 = options0.addOption(option0);
    String[] stringArray0 = new String[0];
    Properties properties0 = new Properties();
    basicParser0.parse(options1, stringArray0, properties0, false);
    basicParser0.processOption(""yes"", (ListIterator) null);
}","/**
 * Process the Option specified by <code>arg</code> using the values
 * retrieved from the specfied iterator <code>iter</code>.
 *
 * @param arg The String value representing an Option
 * @param iter The iterator over the flattened command line arguments.
 *
 * @throws ParseException if <code>arg</code> does not represent an Option
 */"
"protected void processOption(String arg, ListIterator iter) throws ParseException {
    boolean hasOption = getOptions().hasOption(arg);
    // if there is no option throw an UnrecognisedOptionException
    if (!hasOption) {
        throw new UnrecognizedOptionException(""Unrecognized option: "" + arg, arg);
    }
    // get the option represented by arg
    Option opt = (Option) getOptions().getOption(arg).clone();
    // update the required options and groups
    updateRequiredOptions(opt);
    // if the option takes an argument value
    if (opt.hasArg()) {
        processArgs(opt, iter);
    }
    // set the option on the command line
    cmd.addOption(opt);
}","public void test1516() throws Throwable {
    BasicParser basicParser0 = new BasicParser();
    Options options0 = new Options();
    Option option0 = new Option(""es"", ""es"", true, ""es"");
    Properties properties0 = new Properties();
    Options options1 = options0.addOption(option0);
    option0.setRequired(true);
    String[] stringArray0 = new String[0];
    basicParser0.parse(options1, stringArray0, properties0, true);
    // Undeclared exception!
    try {
        basicParser0.processOption(""es"", (ListIterator) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * Process the Option specified by <code>arg</code> using the values
 * retrieved from the specfied iterator <code>iter</code>.
 *
 * @param arg The String value representing an Option
 * @param iter The iterator over the flattened command line arguments.
 *
 * @throws ParseException if <code>arg</code> does not represent an Option
 */"
"protected void processOption(String arg, ListIterator iter) throws ParseException {
    boolean hasOption = getOptions().hasOption(arg);
    // if there is no option throw an UnrecognisedOptionException
    if (!hasOption) {
        throw new UnrecognizedOptionException(""Unrecognized option: "" + arg, arg);
    }
    // get the option represented by arg
    Option opt = (Option) getOptions().getOption(arg).clone();
    // update the required options and groups
    updateRequiredOptions(opt);
    // if the option takes an argument value
    if (opt.hasArg()) {
        processArgs(opt, iter);
    }
    // set the option on the command line
    cmd.addOption(opt);
}","public void test1617() throws Throwable {
    Option option0 = new Option(""5"", ""5"", true, (String) null);
    Options options0 = new Options();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""5"";
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup1);
    Properties properties0 = new Properties();
    optionGroup0.setRequired(true);
    BasicParser basicParser0 = new BasicParser();
    basicParser0.parse(options1, stringArray0, properties0, true);
    LinkedList<String> linkedList0 = new LinkedList<String>();
    ListIterator<String> listIterator0 = linkedList0.listIterator();
    try {
        basicParser0.processOption(""5"", listIterator0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing argument for option: 5
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * Process the Option specified by <code>arg</code> using the values
 * retrieved from the specfied iterator <code>iter</code>.
 *
 * @param arg The String value representing an Option
 * @param iter The iterator over the flattened command line arguments.
 *
 * @throws ParseException if <code>arg</code> does not represent an Option
 */"
