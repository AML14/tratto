focal_method,test_prefix,docstring
"public Options addOption(String opt, boolean hasArg, String description) {
    addOption(opt, null, hasArg, description);
    return this;
}","public void test000() throws Throwable {
    Options options0 = new Options();
    // Undeclared exception!
    try {
        options0.addOption(""j;"", true, ""=\""wF?Y"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The option 'j;' contains an illegal character : ';'
        //
        verifyException(""org.apache.commons.cli.OptionValidator"", e);
    }
}","/**
 * Add an option that only contains a short-name.
 * It may be specified as requiring an argument.
 *
 * @param opt Short single-character name of the option.
 * @param hasArg flag signally if an argument is required after this option
 * @param description Self-documenting description
 * @return the resulting Options instance
 */"
"public Options addOption(String opt, String description) {
    addOption(opt, null, false, description);
    return this;
}","public void test011() throws Throwable {
    Options options0 = new Options();
    Options options1 = options0.addOption("""", """");
    assertSame(options1, options0);
}","/**
 * Add an option that only contains a short name.
 * The option does not take an argument.
 *
 * @param opt Short single-character name of the option.
 * @param description Self-documenting description
 * @return the resulting Options instance
 * @since 1.3
 */"
"public Collection<Option> getOptions() {
    return Collections.unmodifiableCollection(helpOptions());
}","public void test022() throws Throwable {
    Options options0 = new Options();
    Collection<Option> collection0 = options0.getOptions();
    assertNotNull(collection0);
}","/**
 * Retrieve a read-only list of options in this set
 *
 * @return read-only Collection of {@link Option} objects in this descriptor
 */"
"@Override
public String toString() {
    StringBuilder buf = new StringBuilder();
    buf.append(""[ Options: [ short "");
    buf.append(shortOpts.toString());
    buf.append("" ] [ long "");
    buf.append(longOpts);
    buf.append("" ]"");
    return buf.toString();
}","public void test044() throws Throwable {
    Options options0 = new Options();
    String string0 = options0.toString();
    assertNotNull(string0);
}","/**
 * Dump state, suitable for debugging.
 *
 * @return Stringified form of this object
 */"
"public OptionGroup getOptionGroup(Option opt) {
    return optionGroups.get(opt.getKey());
}","public void test055() throws Throwable {
    Options options0 = new Options();
    // Undeclared exception!
    try {
        options0.getOptionGroup((Option) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.Options"", e);
    }
}","/**
 * Returns the OptionGroup the <code>opt</code> belongs to.
 * @param opt the option whose OptionGroup is being queried.
 *
 * @return the OptionGroup if <code>opt</code> is part
 * of an OptionGroup, otherwise return null
 */"
"Collection<OptionGroup> getOptionGroups() {
    return new HashSet<OptionGroup>(optionGroups.values());
}","public void test066() throws Throwable {
    Options options0 = new Options();
    Collection<OptionGroup> collection0 = options0.getOptionGroups();
    assertNotNull(collection0);
}","/**
 * Lists the OptionGroups that are members of this Options instance.
 *
 * @return a Collection of OptionGroup instances.
 */"
"public Options addOptionGroup(OptionGroup group) {
    if (group.isRequired()) {
        requiredOpts.add(group);
    }
    for (Option option : group.getOptions()) {
        // an Option cannot be required if it is in an
        // OptionGroup, either the group is required or
        // nothing is required
        option.setRequired(false);
        addOption(option);
        optionGroups.put(option.getKey(), group);
    }
    return this;
}","public void test077() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.setRequired(true);
    Options options1 = options0.addOptionGroup(optionGroup0);
    assertSame(options0, options1);
}","/**
 * Add the specified option group.
 *
 * @param group the OptionGroup that is to be added
 * @return the resulting Options instance
 */"
"public boolean isRequired() {
    return required;
}","public void test088() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""Vw"", ""org.apache.commons.cli.Options"", false, ""OJ,R!zRP"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup1);
    assertFalse(option0.isRequired());
}","/**
 * Query to see if this Option is mandatory
 *
 * @return boolean flag indicating whether this Option is mandatory
 */"
"public boolean hasOption(String opt) {
    opt = Util.stripLeadingHyphens(opt);
    return shortOpts.containsKey(opt) || longOpts.containsKey(opt);
}","public void test089() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""Vw"", ""org.apache.commons.cli.Options"", false, ""OJ,R!zRP"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup1);
    boolean boolean0 = options0.hasOption(""Vw"");
    assertTrue(boolean0);
}","/**
 * Returns whether the named {@link Option} is a member of this {@link Options}.
 *
 * @param opt short or long name of the {@link Option}
 * @return true if the named {@link Option} is a member of this {@link Options}
 */"
"public Options addOption(Option opt) {
    String key = opt.getKey();
    // add it to the long option list
    if (opt.hasLongOpt()) {
        longOpts.put(opt.getLongOpt(), opt);
    }
    // if the option is required add it to the required list
    if (opt.isRequired()) {
        if (requiredOpts.contains(key)) {
            requiredOpts.remove(requiredOpts.indexOf(key));
        }
        requiredOpts.add(key);
    }
    shortOpts.put(key, opt);
    return this;
}","public void test0910() throws Throwable {
    Options options0 = new Options();
    Option option0 = new Option(""u"", ""?B&B~"");
    option0.setRequired(true);
    options0.addOption(option0);
    Options options1 = options0.addOption(option0);
    assertSame(options1, options0);
}","/**
 * Adds an option instance
 *
 * @param opt the option that is to be added
 * @return the resulting Options instance
 */"
"public Option getOption(String opt) {
    opt = Util.stripLeadingHyphens(opt);
    if (shortOpts.containsKey(opt)) {
        return shortOpts.get(opt);
    }
    return longOpts.get(opt);
}","public void test1011() throws Throwable {
    Options options0 = new Options();
    Option option0 = options0.getOption(""The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. "");
    assertNull(option0);
}","/**
 * Retrieve the {@link Option} matching the long or short name specified.
 * The leading hyphens in the name are ignored (up to 2).
 *
 * @param opt short or long name of the {@link Option}
 * @return the option represented by opt
 */"
"public Option getOption(String opt) {
    opt = Util.stripLeadingHyphens(opt);
    if (shortOpts.containsKey(opt)) {
        return shortOpts.get(opt);
    }
    return longOpts.get(opt);
}","public void test1112() throws Throwable {
    Options options0 = new Options();
    Option option0 = new Option("""", """");
    Options options1 = options0.addOption(option0);
    Option option1 = options1.getOption("""");
    assertEquals((-2), Option.UNLIMITED_VALUES);
}","/**
 * Retrieve the {@link Option} matching the long or short name specified.
 * The leading hyphens in the name are ignored (up to 2).
 *
 * @param opt short or long name of the {@link Option}
 * @return the option represented by opt
 */"
"public boolean hasOption(String opt) {
    opt = Util.stripLeadingHyphens(opt);
    return shortOpts.containsKey(opt) || longOpts.containsKey(opt);
}","public void test1416() throws Throwable {
    Options options0 = new Options();
    boolean boolean0 = options0.hasOption(""org.apache.commons.cli.Options"");
    assertFalse(boolean0);
}","/**
 * Returns whether the named {@link Option} is a member of this {@link Options}.
 *
 * @param opt short or long name of the {@link Option}
 * @return true if the named {@link Option} is a member of this {@link Options}
 */"
"public boolean hasOption(String opt) {
    opt = Util.stripLeadingHyphens(opt);
    return shortOpts.containsKey(opt) || longOpts.containsKey(opt);
}","public void test1518() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""Vw"", ""org.apache.commons.cli.Options"", false, ""OJ,R!zRP"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup1);
    boolean boolean0 = options0.hasOption(""org.apache.commons.cli.Options"");
    assertTrue(boolean0);
}","/**
 * Returns whether the named {@link Option} is a member of this {@link Options}.
 *
 * @param opt short or long name of the {@link Option}
 * @return true if the named {@link Option} is a member of this {@link Options}
 */"
"public boolean hasLongOption(String opt) {
    opt = Util.stripLeadingHyphens(opt);
    return longOpts.containsKey(opt);
}","public void test1619() throws Throwable {
    Options options0 = new Options();
    boolean boolean0 = options0.hasLongOption(""7"");
    assertFalse(boolean0);
}","/**
 * Returns whether the named {@link Option} is a member of this {@link Options}.
 *
 * @param opt long name of the {@link Option}
 * @return true if the named {@link Option} is a member of this {@link Options}
 * @since 1.3
 */"
"public boolean hasLongOption(String opt) {
    opt = Util.stripLeadingHyphens(opt);
    return longOpts.containsKey(opt);
}","public void test1720() throws Throwable {
    Options options0 = new Options();
    options0.addOption(""dI"", """", true, (String) null);
    boolean boolean0 = options0.hasLongOption("""");
    assertTrue(boolean0);
}","/**
 * Returns whether the named {@link Option} is a member of this {@link Options}.
 *
 * @param opt long name of the {@link Option}
 * @return true if the named {@link Option} is a member of this {@link Options}
 * @since 1.3
 */"
"public boolean hasShortOption(String opt) {
    opt = Util.stripLeadingHyphens(opt);
    return shortOpts.containsKey(opt);
}","public void test1821() throws Throwable {
    Options options0 = new Options();
    boolean boolean0 = options0.hasShortOption(""OV{8Rx'de"");
    assertFalse(boolean0);
}","/**
 * Returns whether the named {@link Option} is a member of this {@link Options}.
 *
 * @param opt short name of the {@link Option}
 * @return true if the named {@link Option} is a member of this {@link Options}
 * @since 1.3
 */"
"public boolean hasShortOption(String opt) {
    opt = Util.stripLeadingHyphens(opt);
    return shortOpts.containsKey(opt);
}","public void test1922() throws Throwable {
    Options options0 = new Options();
    Option option0 = new Option("""", (String) null);
    Options options1 = options0.addOption(option0);
    boolean boolean0 = options1.hasShortOption("""");
    assertTrue(boolean0);
}","/**
 * Returns whether the named {@link Option} is a member of this {@link Options}.
 *
 * @param opt short name of the {@link Option}
 * @return true if the named {@link Option} is a member of this {@link Options}
 * @since 1.3
 */"
