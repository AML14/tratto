focal_method,test_prefix,docstring
"public int getWidth() {
    return defaultWidth;
}","public void test000() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(74, int0);
}","/**
 * Returns the 'width'.
 *
 * @return the 'width'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test002() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test003() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test004() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test005() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test017() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""-"");
    assertEquals(""-"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test028() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public int getDescPadding() {
    return defaultDescPad;
}","public void test029() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'descPadding'.
 *
 * @return the 'descPadding'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0210() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test0212() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0213() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getNewLine() {
    return defaultNewLine;
}","public void test0315() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setNewLine(""-"");
    assertEquals(""-"", helpFormatter0.getNewLine());
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0416() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""usage: "");
    assertEquals(""usage: "", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test0517() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""usage: "");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void setSyntaxPrefix(String prefix) {
    this.defaultSyntaxPrefix = prefix;
}","public void test0518() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""usage: "");
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'syntaxPrefix'.
 *
 * @param prefix the new value of 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0519() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""usage: "");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0520() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""usage: "");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0521() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""usage: "");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test0624() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(3, ""--"", ""--"", options0, ""--"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Total width is less than the width of the argument and indent - no room for the description
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public void printHelp(String cmdLineSyntax, Options options) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);
}","public void test0725() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""arg"", options0);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0727() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""arg"", options0);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void setWidth(int width) {
    this.defaultWidth = width;
}","public void test0828() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(3);
    assertEquals(3, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'width'.
 *
 * @param width the new value of 'width'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0929() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""\n"");
    assertEquals(""\n"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1030() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public int getLeftPadding() {
    return defaultLeftPad;
}","public void test1031() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Returns the 'leftPadding'.
 *
 * @return the 'leftPadding'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1032() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1035() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1036() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1137() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1138() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1141() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1143() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {
    printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
}","public void test1244() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp((PrintWriter) null, 74, ""usage: "", ""usage: "", (Options) null, 74, 74, ""usage: "");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.
 *
 * @param pw the writer to which the help will be written
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param leftPad the number of characters of padding to be prefixed
 * to each line
 * @param descPad the number of characters of padding to be prefixed
 * to each description line
 * @param footer the banner to display at the end of the help
 *
 * @throws IllegalStateException if there is no room to print a line
 */"
"public void setDescPadding(int padding) {
    this.defaultDescPad = padding;
}","public void test1345() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setDescPadding(74);
    assertEquals(74, helpFormatter0.defaultDescPad);
}","/**
 * Sets the 'descPadding'.
 *
 * @param padding the new value of 'descPadding'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(cmdLineSyntax, header, options, footer, false);
}","public void test1447() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""-"", ""-"", options0, ""-"");
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1548() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getNewLine() {
    return defaultNewLine;
}","public void test1549() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1551() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1552() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1553() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
}","public void test1656() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(""usage: "", (Options) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1757() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1758() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1761() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1763() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1864() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1865() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1867() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1868() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1971() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1972() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1973() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1976() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test2078() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", true, ""-"");
    Options options1 = options0.addOption(option0);
    options1.addOption((String) null, ""-"", true, ""arg"");
    helpFormatter0.printHelp(""\n"", ""\n"", options1, ""--"", true);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test2179() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test2180() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test2181() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test2182() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test2183() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<OptionGroup> comparator0 = (Comparator<OptionGroup>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Set the comparator used to sort the options when they output in help text
 *
 * Passing in a null parameter will set the ordering to the default mode
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test2286() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test2287() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Set the comparator used to sort the options when they output in help text
 *
 * Passing in a null parameter will set the ordering to the default mode
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test2288() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test2290() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test2291() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test2393() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp((String) null, (String) null, options0, (String) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public void printHelp(String cmdLineSyntax, Options options) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);
}","public void test2494() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp("""", options0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test2595() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""--"", ""--"", options0, ""\n"", true);
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public void printUsage(PrintWriter pw, int width, String app, Options options) {
    // initialise the string buffer
    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");
    // create a list for processed option groups
    final Collection processedGroups = new ArrayList();
    // temp variable
    Option option;
    List optList = new ArrayList(options.getOptions());
    Collections.sort(optList, getOptionComparator());
    // iterate over the options
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        // get the next Option
        option = (Option) i.next();
        // check if the option is part of an OptionGroup
        OptionGroup group = options.getOptionGroup(option);
        // if the option is part of a group
        if (group != null) {
            // and if the group has not already been processed
            if (!processedGroups.contains(group)) {
                // add the group to the processed list
                processedGroups.add(group);
                // add the usage clause
                appendOptionGroup(buff, group);
            }
            // otherwise the option was displayed in the group
            // previously so ignore it.
        } else // if the Option is not part of an OptionGroup
        {
            appendOption(buff, option, option.isRequired());
        }
        if (i.hasNext()) {
            buff.append("" "");
        }
    }
    // call printWrapped
    printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
}","public void test2698() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""--"");
    Option option0 = new Option(""arg"", ""arg"");
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option1 = new Option("""", true, ""arg"");
    optionGroup0.addOption(option1);
    optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup0);
    // Undeclared exception!
    try {
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), """", options0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * <p>Prints the usage statement for the specified application.</p>
 *
 * @param pw The PrintWriter to print the usage statement
 * @param width The number of characters to display per line
 * @param app The application name
 * @param options The command line Options
 */"
"public void printUsage(PrintWriter pw, int width, String app, Options options) {
    // initialise the string buffer
    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");
    // create a list for processed option groups
    final Collection processedGroups = new ArrayList();
    // temp variable
    Option option;
    List optList = new ArrayList(options.getOptions());
    Collections.sort(optList, getOptionComparator());
    // iterate over the options
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        // get the next Option
        option = (Option) i.next();
        // check if the option is part of an OptionGroup
        OptionGroup group = options.getOptionGroup(option);
        // if the option is part of a group
        if (group != null) {
            // and if the group has not already been processed
            if (!processedGroups.contains(group)) {
                // add the group to the processed list
                processedGroups.add(group);
                // add the usage clause
                appendOptionGroup(buff, group);
            }
            // otherwise the option was displayed in the group
            // previously so ignore it.
        } else // if the Option is not part of an OptionGroup
        {
            appendOption(buff, option, option.isRequired());
        }
        if (i.hasNext()) {
            buff.append("" "");
        }
    }
    // call printWrapped
    printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
}","public void test2799() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""--"");
    Option option0 = new Option(""arg"", ""arg"");
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.addOption(option0);
    optionGroup0.setRequired(true);
    Options options1 = options0.addOptionGroup(optionGroup0);
    // Undeclared exception!
    try {
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-2), ""usage: "", options1);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * <p>Prints the usage statement for the specified application.</p>
 *
 * @param pw The PrintWriter to print the usage statement
 * @param width The number of characters to display per line
 * @param app The application name
 * @param options The command line Options
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test28100() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", true, ""arg"");
    option0.setArgName("""");
    options0.addOption(option0);
    helpFormatter0.printHelp(""--"", ""arg"", options0, ""xC"", true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test28101() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", true, ""arg"");
    option0.setArgName("""");
    options0.addOption(option0);
    helpFormatter0.printHelp(""--"", ""arg"", options0, ""xC"", true);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test28102() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", true, ""arg"");
    option0.setArgName("""");
    options0.addOption(option0);
    helpFormatter0.printHelp(""--"", ""arg"", options0, ""xC"", true);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test29104() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""--"");
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(""\n"", ""\n"", options1, ""--"", true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test30105() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.setLeftPadding(61);
    Options options1 = options0.addOption(""arg"", ""--"", true, ""arg"");
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(""\n"", ""\n"", options1, ""--"", true);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Total width is less than the width of the argument and indent - no room for the description
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test31106() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption((String) null, true, (String) null);
    helpFormatter0.printHelp(""--"", (String) null, options1, ""--"", true);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {
    int argPos = cmdLineSyntax.indexOf(' ') + 1;
    printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
}","public void test32107() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printUsage((PrintWriter) null, 13, ""[ Options: [ short "");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the cmdLineSyntax to the specified writer, using the
 * specified width.
 *
 * @param pw The printWriter to write the help to
 * @param width The number of characters per line for the usage statement.
 * @param cmdLineSyntax The usage statement.
 */"
"public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {
    int argPos = cmdLineSyntax.indexOf(' ') + 1;
    printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
}","public void test33108() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printUsage((PrintWriter) null, 1, ""\n"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Total width is less than the width of the argument and indent - no room for the description
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the cmdLineSyntax to the specified writer, using the
 * specified width.
 *
 * @param pw The printWriter to write the help to
 * @param width The number of characters per line for the usage statement.
 * @param cmdLineSyntax The usage statement.
 */"
"protected int findWrapPos(String text, int width, int startPos) {
    int pos = -1;
    // the line ends before the max wrap pos or a new line char found
    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width)) {
        return pos + 1;
    } else if (startPos + width >= text.length()) {
        return -1;
    }
    // look for the last whitespace character before startPos+width
    pos = startPos + width;
    char c;
    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        --pos;
    }
    // if we found it - just return
    if (pos > startPos) {
        return pos;
    }
    // must look for the first whitespace chearacter after startPos
    // + width
    pos = startPos + width;
    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        ++pos;
    }
    return (pos == text.length()) ? (-1) : pos;
}","public void test34109() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Finds the next text wrap position after <code>startPos</code> for the
 * text in <code>text</code> with the column width <code>width</code>.
 * The wrap point is the last postion before startPos+width having a
 * whitespace character (space, \n, \r).
 *
 * @param text The text being searched for the wrap position
 * @param width width of the wrapped text
 * @param startPos position from which to start the lookup whitespace
 * character
 * @return postion on which the text must be wrapped or -1 if the wrap
 * position is at the end of the text
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test34111() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"protected String rtrim(String s) {
    if ((s == null) || (s.length() == 0)) {
        return s;
    }
    int pos = s.length();
    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {
        --pos;
    }
    return s.substring(0, pos);
}","public void test35113() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Remove the trailing whitespace from the specified String.
 *
 * @param s The String to remove the trailing padding from.
 *
 * @return The String of without the trailing padding
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test35114() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test35115() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test35118() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test35120() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
    int pos = findWrapPos(text, width, 0);
    if (pos == -1) {
        sb.append(rtrim(text));
        return sb;
    }
    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    if (nextLineTabStop >= width) {
        // stops infinite loop happening
        throw new IllegalStateException(""Total width is less than the width of the argument and indent "" + ""- no room for the description"");
    }
    // all following lines must be padded with nextLineTabStop space
    // characters
    final String padding = createPadding(nextLineTabStop);
    while (true) {
        text = padding + text.substring(pos).trim();
        pos = findWrapPos(text, width, 0);
        if (pos == -1) {
            sb.append(text);
            return sb;
        }
        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
            pos = width;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    }
}","public void test36121() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Render the specified text and return the rendered Options
 * in a StringBuffer.
 *
 * @param sb The StringBuffer to place the rendered text into.
 * @param width The number of characters to display per line
 * @param nextLineTabStop The position on the next line for the first tab.
 * @param text The text to be rendered.
 *
 * @return the StringBuffer with the rendered Options contents.
 */"
"protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
    int pos = findWrapPos(text, width, 0);
    if (pos == -1) {
        sb.append(rtrim(text));
        return sb;
    }
    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    if (nextLineTabStop >= width) {
        // stops infinite loop happening
        throw new IllegalStateException(""Total width is less than the width of the argument and indent "" + ""- no room for the description"");
    }
    // all following lines must be padded with nextLineTabStop space
    // characters
    final String padding = createPadding(nextLineTabStop);
    while (true) {
        text = padding + text.substring(pos).trim();
        pos = findWrapPos(text, width, 0);
        if (pos == -1) {
            sb.append(text);
            return sb;
        }
        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
            pos = width;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    }
}","public void test37122() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.renderWrappedText((StringBuffer) null, 1, 1, ""\n"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Render the specified text and return the rendered Options
 * in a StringBuffer.
 *
 * @param sb The StringBuffer to place the rendered text into.
 * @param width The number of characters to display per line
 * @param nextLineTabStop The position on the next line for the first tab.
 * @param text The text to be rendered.
 *
 * @return the StringBuffer with the rendered Options contents.
 */"
