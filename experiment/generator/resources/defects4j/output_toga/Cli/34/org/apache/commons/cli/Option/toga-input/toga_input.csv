focal_method,test_prefix,docstring
"public int getArgs() {
    return numberOfArgs;
}","public void test000() throws Throwable {
    Option option0 = new Option(""e"", ""e"");
    option0.setValueSeparator('a');
    option0.setArgs('a');
    option0.addValueForProcessing(""Illegal option name '"");
    assertEquals(97, option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test011() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.getDescription();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test022() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getArgName();
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test023() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getArgName();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasOptionalArg() {
    return optionalArg;
}","public void test034() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setOptionalArg(true);
    boolean boolean0 = option0.acceptsArg();
    assertTrue(option0.hasOptionalArg());
}","/**
 * @return whether this Option can have an optional argument
 */"
"boolean acceptsArg() {
    return (hasArg() || hasArgs() || hasOptionalArg()) && (numberOfArgs <= 0 || values.size() < numberOfArgs);
}","public void test035() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setOptionalArg(true);
    boolean boolean0 = option0.acceptsArg();
    assertTrue(boolean0);
}","/**
 * Tells if the option can accept more arguments.
 *
 * @return false if the maximum number of arguments is reached
 * @since 1.3
 */"
"public boolean isRequired() {
    return required;
}","public void test046() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setRequired(true);
    assertTrue(option0.isRequired());
}","/**
 * Query to see if this Option is mandatory
 *
 * @return boolean flag indicating whether this Option is mandatory
 */"
"void addValueForProcessing(String value) {
    switch(numberOfArgs) {
        case UNINITIALIZED:
            throw new RuntimeException(""NO_ARGS_ALLOWED"");
        default:
            processValue(value);
    }
}","public void test057() throws Throwable {
    Option option0 = new Option((String) null, true, (String) null);
    option0.addValueForProcessing((String) null);
    // Undeclared exception!
    try {
        option0.addValueForProcessing((String) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Cannot add value, list full.
        //
        verifyException(""org.apache.commons.cli.Option"", e);
    }
}","/**
 * Adds the specified value to this Option.
 *
 * @param value is a/the value of this Option
 */"
"public String toString() {
    StringBuffer buf = new StringBuffer().append(""[ option: "");
    buf.append(opt);
    if (longOpt != null) {
        buf.append("" "").append(longOpt);
    }
    buf.append("" "");
    if (hasArgs()) {
        buf.append(""[ARG...]"");
    } else if (hasArg()) {
        buf.append("" [ARG]"");
    }
    buf.append("" :: "").append(description);
    if (type != null) {
        buf.append("" :: "").append(type);
    }
    buf.append("" ]"");
    return buf.toString();
}","public void test068() throws Throwable {
    Option option0 = new Option(""U"", ""U"");
    Class<Object> class0 = Object.class;
    option0.setType(class0);
    String string0 = option0.toString();
    assertEquals(""[ option: U  :: U :: class java.lang.Object ]"", string0);
}","/**
 * Dump state, suitable for debugging.
 *
 * @return Stringified form of this object
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test069() throws Throwable {
    Option option0 = new Option(""U"", ""U"");
    Class<Object> class0 = Object.class;
    option0.setType(class0);
    String string0 = option0.toString();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test0710() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.isRequired();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test0811() throws Throwable {
    Option option0 = new Option("""", false, """");
    option0.getValuesList();
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test0812() throws Throwable {
    Option option0 = new Option("""", false, """");
    option0.getValuesList();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public String getLongOpt() {
    return longOpt;
}","public void test0913() throws Throwable {
    Option option0 = new Option("""", """");
    String string0 = option0.getLongOpt();
    assertNull(string0);
}","/**
 * Retrieve the long name of this Option.
 *
 * @return Long name of this option, or null, if there is no long name
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test0914() throws Throwable {
    Option option0 = new Option("""", """");
    String string0 = option0.getLongOpt();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public int getId() {
    return getKey().charAt(0);
}","public void test1015() throws Throwable {
    Option option0 = new Option(""eis"", true, ""eis"");
    int int0 = option0.getId();
    assertEquals(101, int0);
}","/**
 * Returns the id of this Option.  This is only set when the
 * Option shortOpt is a single character.  This is used for switch
 * statements.
 *
 * @return the id of this Option
 */"
"public boolean hasArg() {
    return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;
}","public void test1016() throws Throwable {
    Option option0 = new Option(""eis"", true, ""eis"");
    int int0 = option0.getId();
    assertTrue(option0.hasArg());
}","/**
 * Query to see if this Option requires an argument
 *
 * @return boolean flag indicating if an argument is required
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test1017() throws Throwable {
    Option option0 = new Option(""eis"", true, ""eis"");
    int int0 = option0.getId();
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public boolean addValue(String value) {
    throw new UnsupportedOperationException(""The addValue method is not intended for client use. "" + ""Subclasses should use the addValueForProcessing method instead. "");
}","public void test1118() throws Throwable {
    Option option0 = new Option("""", """");
    // Undeclared exception!
    try {
        option0.addValue("""");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead.
        //
        verifyException(""org.apache.commons.cli.Option"", e);
    }
}","/**
 * This method is not intended to be used. It was a piece of internal
 * API that was made public in 1.0. It currently throws an UnsupportedOperationException.
 * @deprecated
 * @throws UnsupportedOperationException
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test1219() throws Throwable {
    Option option0 = new Option(""eiU"", ""eiU"");
    option0.getType();
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test1220() throws Throwable {
    Option option0 = new Option(""eiU"", ""eiU"");
    option0.getType();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test1321() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setDescription((String) null);
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test1422() throws Throwable {
    Option option0 = new Option("""", """");
    option0.setArgName("""");
    boolean boolean0 = option0.hasArgName();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test1423() throws Throwable {
    Option option0 = new Option("""", """");
    option0.setArgName("""");
    boolean boolean0 = option0.hasArgName();
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public boolean hasArgName() {
    return argName != null && argName.length() > 0;
}","public void test1424() throws Throwable {
    Option option0 = new Option("""", """");
    option0.setArgName("""");
    boolean boolean0 = option0.hasArgName();
    assertFalse(boolean0);
}","/**
 * Returns whether the display name for the argument value has been set.
 *
 * @return if the display name for the argument value has been set.
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test1525() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getOpt();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test1526() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getOpt();
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test1627() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    int int0 = option0.getArgs();
    assertEquals((-1), int0);
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test1728() throws Throwable {
    Option option0 = new Option(""e"", ""e"");
    option0.clearValues();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test1729() throws Throwable {
    Option option0 = new Option(""e"", ""e"");
    option0.clearValues();
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test1830() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.getKey();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test1931() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.hasLongOpt();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test1932() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.hasLongOpt();
    assertFalse(boolean0);
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test2033() throws Throwable {
    Option option0 = new Option("""", """", false, """");
    boolean boolean0 = option0.hasLongOpt();
    assertTrue(boolean0);
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test2034() throws Throwable {
    Option option0 = new Option("""", """", false, """");
    boolean boolean0 = option0.hasLongOpt();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasArgName() {
    return argName != null && argName.length() > 0;
}","public void test2135() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.hasArgName();
    assertFalse(boolean0);
}","/**
 * Returns whether the display name for the argument value has been set.
 *
 * @return if the display name for the argument value has been set.
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test2136() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.hasArgName();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasArgName() {
    return argName != null && argName.length() > 0;
}","public void test2237() throws Throwable {
    Option option0 = new Option(""4"", ""4"");
    option0.setArgName(""4"");
    boolean boolean0 = option0.hasArgName();
    assertTrue(boolean0);
}","/**
 * Returns whether the display name for the argument value has been set.
 *
 * @return if the display name for the argument value has been set.
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test2338() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setArgs(63);
    option0.toString();
    assertEquals(63, option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasArgs() {
    return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES;
}","public void test2439() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    assertFalse(option0.hasArgs());
}","/**
 * Query to see if this Option can take many values.
 *
 * @return boolean flag indicating if multiple values are allowed
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test2440() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setArgs((-2));
    option0.toString();
    assertEquals((-2), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test2542() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setArgs((-2));
    assertEquals((-2), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"boolean requiresArg() {
    if (optionalArg) {
        return false;
    }
    if (numberOfArgs == UNLIMITED_VALUES) {
        return values.size() < 1;
    } else {
        return acceptsArg();
    }
}","public void test2543() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setArgs((-2));
    option0.addValueForProcessing((String) null);
    boolean boolean0 = option0.requiresArg();
    assertFalse(boolean0);
}","/**
 * Tells if the option requires more arguments to be valid.
 *
 * @return false if the option doesn't require more arguments
 * @since 1.3
 */"
"void addValueForProcessing(String value) {
    switch(numberOfArgs) {
        case UNINITIALIZED:
            throw new RuntimeException(""NO_ARGS_ALLOWED"");
        default:
            processValue(value);
    }
}","public void test2644() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    // Undeclared exception!
    try {
        option0.addValueForProcessing((String) null);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // NO_ARGS_ALLOWED
        //
        verifyException(""org.apache.commons.cli.Option"", e);
    }
}","/**
 * Adds the specified value to this Option.
 *
 * @param value is a/the value of this Option
 */"
"public boolean hasValueSeparator() {
    return valuesep > 0;
}","public void test2745() throws Throwable {
    Option option0 = new Option(""eiU"", true, ""eiU"");
    option0.setValueSeparator('e');
    option0.addValueForProcessing(""eiU"");
    assertTrue(option0.hasValueSeparator());
}","/**
 * Return whether this Option has specified a value separator.
 *
 * @return whether this Option has specified a value separator.
 * @since 1.1
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test2846() throws Throwable {
    Option option0 = new Option(""eiU"", true, ""eiU"");
    option0.addValueForProcessing(""eiU"");
    option0.getValue(""eiU"");
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test2947() throws Throwable {
    Option option0 = new Option(""eiU"", false, ""eiU"");
    String string0 = option0.getValue(""eiU"");
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test2948() throws Throwable {
    Option option0 = new Option(""eiU"", false, ""eiU"");
    String string0 = option0.getValue(""eiU"");
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public String getValue(String defaultValue) {
    String value = getValue();
    return (value != null) ? value : defaultValue;
}","public void test2949() throws Throwable {
    Option option0 = new Option(""eiU"", false, ""eiU"");
    String string0 = option0.getValue(""eiU"");
    assertNotNull(string0);
}","/**
 * Returns the value/first value of this Option or the
 * <code>defaultValue</code> if there is no value.
 *
 * @param defaultValue The value to be returned if ther
 * is no value.
 *
 * @return the value/first value of this Option or the
 * <code>defaultValue</code> if there are no values.
 */"
"public String getValue(int index) throws IndexOutOfBoundsException {
    return hasNoValues() ? null : (String) values.get(index);
}","public void test3050() throws Throwable {
    Option option0 = new Option((String) null, true, (String) null);
    option0.addValueForProcessing((String) null);
    try {
        option0.getValue((-1));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Returns the specified value of this Option or
 * <code>null</code> if there is no value.
 *
 * @param index The index of the value to be returned.
 *
 * @return the specified value of this Option or
 * <code>null</code> if there is no value.
 *
 * @throws IndexOutOfBoundsException if index is less than 1
 * or greater than the number of the values for this Option.
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test3151() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getValue((-2));
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test3152() throws Throwable {
    Option option0 = new Option("""", """");
    option0.getValue((-2));
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test3253() throws Throwable {
    Option option0 = new Option(""eiU"", true, ""eiU"");
    option0.addValueForProcessing(""eiU"");
    String[] stringArray0 = option0.getValues();
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public String[] getValues() {
    return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]);
}","public void test3254() throws Throwable {
    Option option0 = new Option(""eiU"", true, ""eiU"");
    option0.addValueForProcessing(""eiU"");
    String[] stringArray0 = option0.getValues();
    assertNotNull(stringArray0);
}","/**
 * Return the values of this Option as a String array
 * or null if there are no values
 *
 * @return the values of this Option as a String array
 * or null if there are no values
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test3355() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    String[] stringArray0 = option0.getValues();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public String[] getValues() {
    return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]);
}","public void test3356() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    String[] stringArray0 = option0.getValues();
    assertNull(stringArray0);
}","/**
 * Return the values of this Option as a String array
 * or null if there are no values
 *
 * @return the values of this Option as a String array
 * or null if there are no values
 */"
"public String toString() {
    StringBuffer buf = new StringBuffer().append(""[ option: "");
    buf.append(opt);
    if (longOpt != null) {
        buf.append("" "").append(longOpt);
    }
    buf.append("" "");
    if (hasArgs()) {
        buf.append(""[ARG...]"");
    } else if (hasArg()) {
        buf.append("" [ARG]"");
    }
    buf.append("" :: "").append(description);
    if (type != null) {
        buf.append("" :: "").append(type);
    }
    buf.append("" ]"");
    return buf.toString();
}","public void test3457() throws Throwable {
    Option option0 = new Option("""", """", true, """");
    String string0 = option0.toString();
    assertEquals(""[ option:    [ARG] ::  ]"", string0);
}","/**
 * Dump state, suitable for debugging.
 *
 * @return Stringified form of this object
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test3558() throws Throwable {
    Option option0 = new Option(""U"", ""U"");
    String string0 = option0.toString();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public String toString() {
    StringBuffer buf = new StringBuffer().append(""[ option: "");
    buf.append(opt);
    if (longOpt != null) {
        buf.append("" "").append(longOpt);
    }
    buf.append("" "");
    if (hasArgs()) {
        buf.append(""[ARG...]"");
    } else if (hasArg()) {
        buf.append("" [ARG]"");
    }
    buf.append("" :: "").append(description);
    if (type != null) {
        buf.append("" :: "").append(type);
    }
    buf.append("" ]"");
    return buf.toString();
}","public void test3559() throws Throwable {
    Option option0 = new Option(""U"", ""U"");
    String string0 = option0.toString();
    assertEquals(""[ option: U  :: U ]"", string0);
}","/**
 * Dump state, suitable for debugging.
 *
 * @return Stringified form of this object
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test3660() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals(option0);
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test3661() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals(option0);
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
        return false;
    }
    Option option = (Option) o;
    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {
        return false;
    }
    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {
        return false;
    }
    return true;
}","public void test3662() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals(option0);
    assertTrue(boolean0);
}",""
"public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
        return false;
    }
    Option option = (Option) o;
    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {
        return false;
    }
    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {
        return false;
    }
    return true;
}","public void test3763() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.equals((Object) null);
    assertFalse(boolean0);
}",""
"public int getArgs() {
    return numberOfArgs;
}","public void test3764() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.equals((Object) null);
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test3865() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals("""");
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test3866() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals("""");
    assertFalse(option0.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
        return false;
    }
    Option option = (Option) o;
    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {
        return false;
    }
    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {
        return false;
    }
    return true;
}","public void test3867() throws Throwable {
    Option option0 = new Option("""", """");
    boolean boolean0 = option0.equals("""");
    assertFalse(boolean0);
}",""
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test3968() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option("""", """");
    boolean boolean0 = option0.equals(option1);
    assertFalse(option1.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
        return false;
    }
    Option option = (Option) o;
    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {
        return false;
    }
    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {
        return false;
    }
    return true;
}","public void test3969() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option("""", """");
    boolean boolean0 = option0.equals(option1);
    assertFalse(option1.equals((Object) option0));
}",""
"public int getArgs() {
    return numberOfArgs;
}","public void test3970() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option("""", """");
    boolean boolean0 = option0.equals(option1);
    assertEquals((-1), option1.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
        return false;
    }
    Option option = (Option) o;
    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {
        return false;
    }
    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {
        return false;
    }
    return true;
}","public void test3971() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option("""", """");
    boolean boolean0 = option0.equals(option1);
    assertFalse(boolean0);
}",""
"public String getDescription() {
    return description;
}","public void test4072() throws Throwable {
    Option option0 = new Option(""2Q9r"", true, ""2Q9r"");
    Option option1 = new Option("""", true, ""2Q9r"");
    boolean boolean0 = option0.equals(option1);
    assertEquals(""2Q9r"", option1.getDescription());
}","/**
 * Retrieve the self-documenting description of this Option
 *
 * @return The string description of this option
 */"
"public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
        return false;
    }
    Option option = (Option) o;
    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {
        return false;
    }
    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {
        return false;
    }
    return true;
}","public void test4073() throws Throwable {
    Option option0 = new Option(""2Q9r"", true, ""2Q9r"");
    Option option1 = new Option("""", true, ""2Q9r"");
    boolean boolean0 = option0.equals(option1);
    assertFalse(boolean0);
}",""
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test4074() throws Throwable {
    Option option0 = new Option(""2Q9r"", true, ""2Q9r"");
    Option option1 = new Option("""", true, ""2Q9r"");
    boolean boolean0 = option0.equals(option1);
    assertFalse(option1.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
        return false;
    }
    Option option = (Option) o;
    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {
        return false;
    }
    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {
        return false;
    }
    return true;
}","public void test4175() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option((String) null, false, (String) null);
    boolean boolean0 = option0.equals(option1);
    assertTrue(boolean0);
}",""
"public int getArgs() {
    return numberOfArgs;
}","public void test4176() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    Option option1 = new Option((String) null, false, (String) null);
    boolean boolean0 = option0.equals(option1);
    assertEquals((-1), option1.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
        return false;
    }
    Option option = (Option) o;
    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {
        return false;
    }
    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {
        return false;
    }
    return true;
}","public void test4277() throws Throwable {
    Option option0 = new Option(""NO_ARGS_ALOWED"", ""NO_ARGS_ALOWED"");
    Option option1 = new Option(""NO_ARGS_ALOWED"", ""NO_ARGS_ALOWED"", false, ""NO_ARGS_ALOWED"");
    boolean boolean0 = option1.equals(option0);
    assertFalse(boolean0);
}",""
"public int getArgs() {
    return numberOfArgs;
}","public void test4278() throws Throwable {
    Option option0 = new Option(""NO_ARGS_ALOWED"", ""NO_ARGS_ALOWED"");
    Option option1 = new Option(""NO_ARGS_ALOWED"", ""NO_ARGS_ALOWED"", false, ""NO_ARGS_ALOWED"");
    boolean boolean0 = option1.equals(option0);
    assertEquals((-1), option1.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test4379() throws Throwable {
    Option option0 = new Option("""", """", false, """");
    Option option1 = (Option) option0.clone();
    boolean boolean0 = option0.equals(option1);
    assertEquals((-1), option1.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
        return false;
    }
    Option option = (Option) o;
    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {
        return false;
    }
    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {
        return false;
    }
    return true;
}","public void test4380() throws Throwable {
    Option option0 = new Option("""", """", false, """");
    Option option1 = (Option) option0.clone();
    boolean boolean0 = option0.equals(option1);
    assertTrue(boolean0);
}",""
"public boolean hasLongOpt() {
    return longOpt != null;
}","public void test4482() throws Throwable {
    Option option0 = new Option("""", """");
    Option option1 = (Option) option0.clone();
    assertFalse(option1.hasLongOpt());
}","/**
 * Query to see if this Option has a long name
 *
 * @return boolean flag indicating existence of a long name
 */"
"public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
        return false;
    }
    Option option = (Option) o;
    if (opt != null ? !opt.equals(option.opt) : option.opt != null) {
        return false;
    }
    if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) {
        return false;
    }
    return true;
}","public void test4483() throws Throwable {
    Option option0 = new Option("""", """");
    Option option1 = (Option) option0.clone();
    option1.setLongOpt("""");
    boolean boolean0 = option0.equals(option1);
    assertFalse(boolean0);
}",""
"public int getArgs() {
    return numberOfArgs;
}","public void test4584() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.hashCode();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public int hashCode() {
    int result;
    result = opt != null ? opt.hashCode() : 0;
    result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0);
    return result;
}","public void test4685() throws Throwable {
    Option option0 = new Option(""eiU"", ""eiU"", true, ""eiU"");
    option0.hashCode();
}",""
"boolean requiresArg() {
    if (optionalArg) {
        return false;
    }
    if (numberOfArgs == UNLIMITED_VALUES) {
        return values.size() < 1;
    } else {
        return acceptsArg();
    }
}","public void test4786() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.requiresArg();
    assertFalse(boolean0);
}","/**
 * Tells if the option requires more arguments to be valid.
 *
 * @return false if the option doesn't require more arguments
 * @since 1.3
 */"
"public int getArgs() {
    return numberOfArgs;
}","public void test4787() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    boolean boolean0 = option0.requiresArg();
    assertEquals((-1), option0.getArgs());
}","/**
 * Returns the number of argument values this Option can take.
 *
 * @return num the number of argument values
 */"
"public boolean hasOptionalArg() {
    return optionalArg;
}","public void test4888() throws Throwable {
    Option option0 = new Option("""", """");
    option0.setOptionalArg(true);
    boolean boolean0 = option0.requiresArg();
    assertTrue(option0.hasOptionalArg());
}","/**
 * @return whether this Option can have an optional argument
 */"
"boolean requiresArg() {
    if (optionalArg) {
        return false;
    }
    if (numberOfArgs == UNLIMITED_VALUES) {
        return values.size() < 1;
    } else {
        return acceptsArg();
    }
}","public void test4889() throws Throwable {
    Option option0 = new Option("""", """");
    option0.setOptionalArg(true);
    boolean boolean0 = option0.requiresArg();
    assertFalse(boolean0);
}","/**
 * Tells if the option requires more arguments to be valid.
 *
 * @return false if the option doesn't require more arguments
 * @since 1.3
 */"
"boolean requiresArg() {
    if (optionalArg) {
        return false;
    }
    if (numberOfArgs == UNLIMITED_VALUES) {
        return values.size() < 1;
    } else {
        return acceptsArg();
    }
}","public void test4991() throws Throwable {
    Option option0 = new Option((String) null, (String) null);
    option0.setArgs((-2));
    boolean boolean0 = option0.requiresArg();
    assertTrue(boolean0);
}","/**
 * Tells if the option requires more arguments to be valid.
 *
 * @return false if the option doesn't require more arguments
 * @since 1.3
 */"
