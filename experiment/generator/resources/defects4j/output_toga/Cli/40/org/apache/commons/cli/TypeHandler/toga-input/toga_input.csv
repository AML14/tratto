focal_method,test_prefix,docstring
"public static Object createValue(final String str, final Object obj) throws ParseException {
    return createValue(str, (Class<?>) obj);
}","public void test000() throws Throwable {
    TypeHandler typeHandler0 = new TypeHandler();
    // Undeclared exception!
    try {
        TypeHandler.createValue("""", (Object) typeHandler0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.apache.commons.cli.TypeHandler cannot be cast to java.lang.Class
        //
        verifyException(""org.apache.commons.cli.TypeHandler"", e);
    }
}","/**
 * Returns the <code>Object</code> of type <code>obj</code>
 * with the value of <code>str</code>.
 *
 * @param str the command line value
 * @param obj the type of argument
 * @return The instance of <code>obj</code> initialised with
 * the value of <code>str</code>.
 * @throws ParseException if the value creation for the given object type failed
 */"
"public static Class<?> createClass(final String classname) throws ParseException {
    try {
        return Class.forName(classname);
    } catch (final ClassNotFoundException e) {
        throw new ParseException(""Unable to find the class: "" + classname);
    }
}","public void test011() throws Throwable {
    try {
        TypeHandler.createClass("""");
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unable to find the class:
        //
        verifyException(""org.apache.commons.cli.TypeHandler"", e);
    }
}","/**
 * Returns the class whose name is <code>classname</code>.
 *
 * @param classname the class name
 * @return The class if it is found
 * @throws ParseException if the class could not be found
 */"
"public static FileInputStream openFile(String str) throws ParseException {
    try {
        return new FileInputStream(str);
    } catch (FileNotFoundException e) {
        throw new ParseException(""Unable to find file: "" + str);
    }
}","public void test022() throws Throwable {
    try {
        TypeHandler.openFile(""P:<ffkD7dzT1_@'Zx4^"");
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unable to find file: P:<ffkD7dzT1_@'Zx4^
        //
        verifyException(""org.apache.commons.cli.TypeHandler"", e);
    }
}","/**
 * Returns the opened FileInputStream represented by <code>str</code>.
 *
 * @param str the file location
 * @return The file input stream represented by <code>str</code>.
 * @throws ParseException if the file is not exist or not readable
 */"
"public static File[] createFiles(final String str) {
    // to implement/port:
    //        return FileW.findFiles(str);
    throw new UnsupportedOperationException(""Not yet implemented"");
}","public void test033() throws Throwable {
    // Undeclared exception!
    try {
        TypeHandler.createFiles(""P:<ffkD7dzT1_@'Zx4^"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Not yet implemented
        //
        verifyException(""org.apache.commons.cli.TypeHandler"", e);
    }
}","/**
 * Returns the File[] represented by <code>str</code>.
 * <p>
 * This method is not yet implemented and always throws an
 * {@link UnsupportedOperationException}.
 *
 * @param str the paths to the files
 * @return The File[] represented by <code>str</code>.
 * @throws UnsupportedOperationException always
 */"
"public static URL createURL(final String str) throws ParseException {
    try {
        return new URL(str);
    } catch (final MalformedURLException e) {
        throw new ParseException(""Unable to parse the URL: "" + str);
    }
}","public void test044() throws Throwable {
    try {
        TypeHandler.createURL(""En=T-RZ?Dc`WrX3]%"");
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unable to parse the URL: En=T-RZ?Dc`WrX3]%
        //
        verifyException(""org.apache.commons.cli.TypeHandler"", e);
    }
}","/**
 * Returns the URL represented by <code>str</code>.
 *
 * @param str the URL string
 * @return The URL in <code>str</code> is well-formed
 * @throws ParseException if the URL in <code>str</code> is not well-formed
 */"
"public static Date createDate(final String str) {
    throw new UnsupportedOperationException(""Not yet implemented"");
}","public void test055() throws Throwable {
    // Undeclared exception!
    try {
        TypeHandler.createDate(""6hqo$Jh4!6\u0004"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Not yet implemented
        //
        verifyException(""org.apache.commons.cli.TypeHandler"", e);
    }
}","/**
 * Returns the date represented by <code>str</code>.
 * <p>
 * This method is not yet implemented and always throws an
 * {@link UnsupportedOperationException}.
 *
 * @param str the date string
 * @return The date if <code>str</code> is a valid date string,
 * otherwise return null.
 * @throws UnsupportedOperationException always
 */"
"// returned value will have type T because it is fixed by clazz
@SuppressWarnings(""unchecked"")
public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
    if (PatternOptionBuilder.STRING_VALUE == clazz) {
        return (T) str;
    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
        return (T) createObject(str);
    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
        return (T) createNumber(str);
    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {
        return (T) createDate(str);
    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
        return (T) createClass(str);
    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {
        return (T) createFile(str);
    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
        return (T) openFile(str);
    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {
        return (T) createFiles(str);
    } else if (PatternOptionBuilder.URL_VALUE == clazz) {
        return (T) createURL(str);
    } else {
        return null;
    }
}","public void test077() throws Throwable {
    Class<Object> class0 = Object.class;
    try {
        TypeHandler.createValue("""", class0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unable to find the class:
        //
        verifyException(""org.apache.commons.cli.TypeHandler"", e);
    }
}","/**
 * Returns the <code>Object</code> of type <code>clazz</code>
 * with the value of <code>str</code>.
 *
 * @param str the command line value
 * @param clazz the type of argument
 * @return The instance of <code>clazz</code> initialised with
 * the value of <code>str</code>.
 * @throws ParseException if the value creation for the given class failed
 */"
"// returned value will have type T because it is fixed by clazz
@SuppressWarnings(""unchecked"")
public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
    if (PatternOptionBuilder.STRING_VALUE == clazz) {
        return (T) str;
    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
        return (T) createObject(str);
    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
        return (T) createNumber(str);
    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {
        return (T) createDate(str);
    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
        return (T) createClass(str);
    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {
        return (T) createFile(str);
    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
        return (T) openFile(str);
    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {
        return (T) createFiles(str);
    } else if (PatternOptionBuilder.URL_VALUE == clazz) {
        return (T) createURL(str);
    } else {
        return null;
    }
}","public void test088() throws Throwable {
    Class<String> class0 = String.class;
    String string0 = TypeHandler.createValue("">fSxx"", class0);
    assertEquals("">fSxx"", string0);
}","/**
 * Returns the <code>Object</code> of type <code>clazz</code>
 * with the value of <code>str</code>.
 *
 * @param str the command line value
 * @param clazz the type of argument
 * @return The instance of <code>clazz</code> initialised with
 * the value of <code>str</code>.
 * @throws ParseException if the value creation for the given class failed
 */"
"// returned value will have type T because it is fixed by clazz
@SuppressWarnings(""unchecked"")
public static <T> T createValue(final String str, final Class<T> clazz) throws ParseException {
    if (PatternOptionBuilder.STRING_VALUE == clazz) {
        return (T) str;
    } else if (PatternOptionBuilder.OBJECT_VALUE == clazz) {
        return (T) createObject(str);
    } else if (PatternOptionBuilder.NUMBER_VALUE == clazz) {
        return (T) createNumber(str);
    } else if (PatternOptionBuilder.DATE_VALUE == clazz) {
        return (T) createDate(str);
    } else if (PatternOptionBuilder.CLASS_VALUE == clazz) {
        return (T) createClass(str);
    } else if (PatternOptionBuilder.FILE_VALUE == clazz) {
        return (T) createFile(str);
    } else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz) {
        return (T) openFile(str);
    } else if (PatternOptionBuilder.FILES_VALUE == clazz) {
        return (T) createFiles(str);
    } else if (PatternOptionBuilder.URL_VALUE == clazz) {
        return (T) createURL(str);
    } else {
        return null;
    }
}","public void test099() throws Throwable {
    Class<Integer> class0 = Integer.class;
    Integer integer0 = TypeHandler.createValue(""P]bQaY+u$aA"", class0);
    assertNull(integer0);
}","/**
 * Returns the <code>Object</code> of type <code>clazz</code>
 * with the value of <code>str</code>.
 *
 * @param str the command line value
 * @param clazz the type of argument
 * @return The instance of <code>clazz</code> initialised with
 * the value of <code>str</code>.
 * @throws ParseException if the value creation for the given class failed
 */"
"public static Number createNumber(final String str) throws ParseException {
    try {
        if (str.indexOf('.') != -1) {
            return Double.valueOf(str);
        }
        return Long.valueOf(str);
    } catch (final NumberFormatException e) {
        throw new ParseException(e.getMessage());
    }
}","public void test1010() throws Throwable {
    try {
        TypeHandler.createNumber(""4qX%wKNAr6T;;"");
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // For input string: \""4qX%wKNAr6T;;\""
        //
        verifyException(""org.apache.commons.cli.TypeHandler"", e);
    }
}","/**
 * Create a number from a String. If a . is present, it creates a
 * Double, otherwise a Long.
 *
 * @param str the value
 * @return the number represented by <code>str</code>
 * @throws ParseException if <code>str</code> is not a number
 */"
"public static Number createNumber(final String str) throws ParseException {
    try {
        if (str.indexOf('.') != -1) {
            return Double.valueOf(str);
        }
        return Long.valueOf(str);
    } catch (final NumberFormatException e) {
        throw new ParseException(e.getMessage());
    }
}","public void test1111() throws Throwable {
    try {
        TypeHandler.createNumber(""org.apachecoMmons.cli.PatterOptionBilder"");
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // For input string: \""org.apachecoMmons.cli.PatterOptionBilder\""
        //
        verifyException(""org.apache.commons.cli.TypeHandler"", e);
    }
}","/**
 * Create a number from a String. If a . is present, it creates a
 * Double, otherwise a Long.
 *
 * @param str the value
 * @return the number represented by <code>str</code>
 * @throws ParseException if <code>str</code> is not a number
 */"
