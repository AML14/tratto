focal_method,test_prefix,docstring
"public int getWidth() {
    return defaultWidth;
}","public void test000() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'width'.
 *
 * @return the 'width'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test001() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test003() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test004() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test005() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test007() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test018() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""The option '"");
    assertEquals(""The option '"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test029() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public int getDescPadding() {
    return defaultDescPad;
}","public void test0210() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'descPadding'.
 *
 * @return the 'descPadding'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test0213() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0214() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0215() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0216() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0317() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptSeparator(""}x6OyW~+K|5,$kZ"");
    assertEquals(""}x6OyW~+K|5,$kZ"", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getNewLine() {
    return defaultNewLine;
}","public void test0418() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setNewLine(""--"");
    assertEquals(""--"", helpFormatter0.getNewLine());
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public void setLeftPadding(int padding) {
    this.defaultLeftPad = padding;
}","public void test0519() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(32);
    assertEquals(32, helpFormatter0.defaultLeftPad);
}","/**
 * Sets the 'leftPadding'.
 *
 * @param padding the new value of 'leftPadding'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0620() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""usage: "");
    assertEquals(""usage: "", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test0721() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    helpFormatter0.printHelp(0, ""i[.c[|\""b 7HH6%_uZ"", ""i[.c[|\""b 7HH6%_uZ"", options0, ""i[.c[|\""b 7HH6%_uZ"");
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the beginning of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0822() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""G/o"");
    assertEquals(""G/o"", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0923() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0924() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals("" "", string0);
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0926() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0928() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test0930() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void setWidth(int width) {
    this.defaultWidth = width;
}","public void test1031() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(2703);
    assertEquals(2703, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'width'.
 *
 * @param width the new value of 'width'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1132() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void setOptPrefix(String prefix) {
    this.defaultOptPrefix = prefix;
}","public void test1133() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'optPrefix'.
 *
 * @param prefix the new value of 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1134() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1135() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1136() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1138() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1240() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public int getLeftPadding() {
    return defaultLeftPad;
}","public void test1241() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(1, int0);
}","/**
 * Returns the 'leftPadding'.
 *
 * @return the 'leftPadding'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1244() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1245() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1246() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1247() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {
    printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
}","public void test1348() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""usage: "");
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 3, "" "", ""arg"", options0, 3, (-454), "", "");
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.
 *
 * @param pw the writer to which the help will be written
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param leftPad the number of characters of padding to be prefixed
 * to each line
 * @param descPad the number of characters of padding to be prefixed
 * to each description line
 * @param footer the banner to display at the end of the help
 *
 * @throws IllegalStateException if there is no room to print a line
 */"
"public void setDescPadding(int padding) {
    this.defaultDescPad = padding;
}","public void test1449() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setDescPadding(1202);
    assertEquals(1202, helpFormatter0.defaultDescPad);
}","/**
 * Sets the 'descPadding'.
 *
 * @param padding the new value of 'descPadding'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1551() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp("" "", "" "", options0, "" "");
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1652() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1653() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getNewLine() {
    return defaultNewLine;
}","public void test1654() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1658() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1659() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1660() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1761() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1764() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1765() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1766() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1767() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1869() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1870() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1872() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1873() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1876() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1977() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1978() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1979() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1981() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1983() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test2186() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test2187() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Set the comparator used to sort the options when they output in help text.
 * Passing in a null parameter will set the ordering to the default mode.
 *
 * @since 1.2
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test2189() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test2190() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test2192() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test2193() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test2294() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test2295() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Set the comparator used to sort the options when they output in help text.
 * Passing in a null parameter will set the ordering to the default mode.
 *
 * @since 1.2
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test2297() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test2299() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test22100() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test22101() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(String cmdLineSyntax, Options options) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);
}","public void test23102() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp((String) null, options0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 */"
"public void printHelp(String cmdLineSyntax, Options options) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);
}","public void test24103() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp("""", options0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test25104() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Option option0 = new Option(""arg"", ""\n"", true, ""-"");
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Option option1 = new Option("""", ""NO_ARGS_ALLOWED"");
    optionGroup1.addOption(option1);
    Options options1 = options0.addOptionGroup(optionGroup1);
    helpFormatter0.printHelp(""--"", ""--"", options1, ""arg"", true);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test26106() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Option option0 = new Option(""arg"", ""\n"", true, ""-"");
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    optionGroup1.setRequired(true);
    Options options1 = options0.addOptionGroup(optionGroup1);
    helpFormatter0.printHelp(""--"", ""--"", options1, ""arg"", true);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test26107() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Option option0 = new Option(""arg"", ""\n"", true, ""-"");
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    optionGroup1.setRequired(true);
    Options options1 = options0.addOptionGroup(optionGroup1);
    helpFormatter0.printHelp(""--"", ""--"", options1, ""arg"", true);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test26108() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Option option0 = new Option(""arg"", ""\n"", true, ""-"");
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    optionGroup1.setRequired(true);
    Options options1 = options0.addOptionGroup(optionGroup1);
    helpFormatter0.printHelp(""--"", ""--"", options1, ""arg"", true);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test27109() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option((String) null, ""-"");
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(helpFormatter0.defaultOptPrefix, helpFormatter0.defaultOptPrefix, options1, helpFormatter0.defaultOptPrefix, true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test28110() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Option option0 = new Option("""", true, """");
    Options options0 = new Options();
    Options options1 = options0.addOption(option0);
    option0.setArgName(""-"");
    helpFormatter0.printHelp(""arg"", """", options1, """", true);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test29112() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Option option0 = new Option("""", true, """");
    Options options0 = new Options();
    options0.addOption(option0);
    option0.setArgName("""");
    helpFormatter0.printHelp(""H-A.{cE0ms:r5`O,"", """", options0, """", true);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void printUsage(PrintWriter pw, int width, String app, Options options) {
    // initialise the string buffer
    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");
    // create a list for processed option groups
    final Collection processedGroups = new ArrayList();
    // temp variable
    Option option;
    List optList = new ArrayList(options.getOptions());
    Collections.sort(optList, getOptionComparator());
    // iterate over the options
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        // get the next Option
        option = (Option) i.next();
        // check if the option is part of an OptionGroup
        OptionGroup group = options.getOptionGroup(option);
        // if the option is part of a group
        if (group != null) {
            // and if the group has not already been processed
            if (!processedGroups.contains(group)) {
                // add the group to the processed list
                processedGroups.add(group);
                // add the usage clause
                appendOptionGroup(buff, group);
            }
            // otherwise the option was displayed in the group
            // previously so ignore it.
        } else // if the Option is not part of an OptionGroup
        {
            appendOption(buff, option, option.isRequired());
        }
        if (i.hasNext()) {
            buff.append("" "");
        }
    }
    // call printWrapped
    printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
}","public void test30113() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""usage: "");
    Options options0 = new Options();
    Options options1 = options0.addOption((String) null, ""usage: "", true, "":mi2k**mQ\""bJc}Y"");
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, ""[ARG...]"", options1);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Prints the usage statement for the specified application.
 *
 * @param pw The PrintWriter to print the usage statement
 * @param width The number of characters to display per line
 * @param app The application name
 * @param options The command line Options
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test30115() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""usage: "");
    Options options0 = new Options();
    Options options1 = options0.addOption((String) null, ""usage: "", true, "":mi2k**mQ\""bJc}Y"");
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, ""[ARG...]"", options1);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
}","public void test31116() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", (String) null);
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp("" "", options1, false);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test31117() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", (String) null);
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp("" "", options1, false);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test31118() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", (String) null);
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp("" "", options1, false);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test32120() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption("""", true, ""\n"");
    helpFormatter0.printHelp(""s'zn"", ""usage: "", options1, ""s'zn"", true);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
    int pos = findWrapPos(text, width, 0);
    if (pos == -1) {
        sb.append(rtrim(text));
        return sb;
    }
    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    if (nextLineTabStop >= width) {
        // stops infinite loop happening
        nextLineTabStop = 1;
    }
    // all following lines must be padded with nextLineTabStop space characters
    final String padding = createPadding(nextLineTabStop);
    while (true) {
        text = padding + text.substring(pos).trim();
        pos = findWrapPos(text, width, 0);
        if (pos == -1) {
            sb.append(text);
            return sb;
        }
        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
            pos = width;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    }
}","public void test33121() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    StringBuffer stringBuffer0 = new StringBuffer();
    // Undeclared exception!
    try {
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, ""cmdLineSyntax not provided"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Render the specified text and return the rendered Options
 * in a StringBuffer.
 *
 * @param sb The StringBuffer to place the rendered text into.
 * @param width The number of characters to display per line
 * @param nextLineTabStop The position on the next line for the first tab.
 * @param text The text to be rendered.
 *
 * @return the StringBuffer with the rendered Options contents.
 */"
"protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
    int pos = findWrapPos(text, width, 0);
    if (pos == -1) {
        sb.append(rtrim(text));
        return sb;
    }
    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    if (nextLineTabStop >= width) {
        // stops infinite loop happening
        nextLineTabStop = 1;
    }
    // all following lines must be padded with nextLineTabStop space characters
    final String padding = createPadding(nextLineTabStop);
    while (true) {
        text = padding + text.substring(pos).trim();
        pos = findWrapPos(text, width, 0);
        if (pos == -1) {
            sb.append(text);
            return sb;
        }
        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
            pos = width;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    }
}","public void test34122() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    StringBuffer stringBuffer0 = new StringBuffer(74);
    // Undeclared exception!
    try {
        helpFormatter0.renderWrappedText(stringBuffer0, (-2302), (-2302), ""\n"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Render the specified text and return the rendered Options
 * in a StringBuffer.
 *
 * @param sb The StringBuffer to place the rendered text into.
 * @param width The number of characters to display per line
 * @param nextLineTabStop The position on the next line for the first tab.
 * @param text The text to be rendered.
 *
 * @return the StringBuffer with the rendered Options contents.
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test35123() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"protected int findWrapPos(String text, int width, int startPos) {
    int pos;
    // the line ends before the max wrap pos or a new line char found
    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width)) {
        return pos + 1;
    } else if (startPos + width >= text.length()) {
        return -1;
    }
    // look for the last whitespace character before startPos+width
    pos = startPos + width;
    char c;
    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        --pos;
    }
    // if we found it - just return
    if (pos > startPos) {
        return pos;
    }
    // if we didn't find one, simply chop at startPos+width
    pos = startPos + width;
    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        ++pos;
    }
    return pos == text.length() ? -1 : pos;
}","public void test35124() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Finds the next text wrap position after <code>startPos</code> for the
 * text in <code>text</code> with the column width <code>width</code>.
 * The wrap point is the last position before startPos+width having a
 * whitespace character (space, \n, \r). If there is no whitespace character
 * before startPos+width, it will return startPos+width.
 *
 * @param text The text being searched for the wrap position
 * @param width width of the wrapped text
 * @param startPos position from which to start the lookup whitespace
 * character
 * @return postion on which the text must be wrapped or -1 if the wrap
 * position is at the end of the text
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test35127() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test35128() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"protected String rtrim(String s) {
    if ((s == null) || (s.length() == 0)) {
        return s;
    }
    int pos = s.length();
    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {
        --pos;
    }
    return s.substring(0, pos);
}","public void test36129() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Remove the trailing whitespace from the specified String.
 *
 * @param s The String to remove the trailing padding from.
 *
 * @return The String of without the trailing padding
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test36131() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test36133() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test36135() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test36136() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test36137() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
    int pos = findWrapPos(text, width, 0);
    if (pos == -1) {
        sb.append(rtrim(text));
        return sb;
    }
    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    if (nextLineTabStop >= width) {
        // stops infinite loop happening
        nextLineTabStop = 1;
    }
    // all following lines must be padded with nextLineTabStop space characters
    final String padding = createPadding(nextLineTabStop);
    while (true) {
        text = padding + text.substring(pos).trim();
        pos = findWrapPos(text, width, 0);
        if (pos == -1) {
            sb.append(text);
            return sb;
        }
        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
            pos = width;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    }
}","public void test37138() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    StringBuffer stringBuffer0 = new StringBuffer(74);
    // Undeclared exception!
    helpFormatter0.renderWrappedText(stringBuffer0, 0, 0, ""\n"");
}","/**
 * Render the specified text and return the rendered Options
 * in a StringBuffer.
 *
 * @param sb The StringBuffer to place the rendered text into.
 * @param width The number of characters to display per line
 * @param nextLineTabStop The position on the next line for the first tab.
 * @param text The text to be rendered.
 *
 * @return the StringBuffer with the rendered Options contents.
 */"
