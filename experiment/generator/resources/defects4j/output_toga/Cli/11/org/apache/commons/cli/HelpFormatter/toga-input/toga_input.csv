focal_method,test_prefix,docstring
"public int getWidth() {
    return this.defaultWidth;
}","public void test000() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(74, int0);
}","/**
 * Returns the 'width'.
 *
 * @return the 'width'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test002() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test004() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test005() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test006() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test017() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""\n"");
    assertEquals(""\n"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public int getDescPadding() {
    return this.defaultDescPad;
}","public void test028() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'descPadding'.
 *
 * @return the 'descPadding'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test029() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test0211() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test0212() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test0214() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getNewLine() {
    return this.defaultNewLine;
}","public void test0315() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setNewLine(""usage: "");
    assertEquals(""usage: "", helpFormatter0.getNewLine());
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public void setArgName(String name) {
    this.defaultArgName = name;
}","public void test0416() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""arg"");
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'argName'.
 *
 * @param name the new value of 'argName'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test0418() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""arg"");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test0419() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""arg"");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test0421() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""arg"");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test0422() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""arg"");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test0523() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""--"");
    assertEquals(""--"", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void setWidth(int width) {
    this.defaultWidth = width;
}","public void test0625() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(1);
    assertEquals(1, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'width'.
 *
 * @param width the new value of 'width'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test0726() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""usage: "");
    assertEquals(""usage: "", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test0827() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public int getLeftPadding() {
    return this.defaultLeftPad;
}","public void test0828() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'leftPadding'.
 *
 * @return the 'leftPadding'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test0830() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test0832() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test0833() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test0934() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test0935() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test0937() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test0940() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {
    printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
}","public void test1041() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""arg"");
    Options options0 = new Options();
    // Undeclared exception!
    helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 1, ""-"", ""-"", options0, 1, 1, ""usage: "");
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.</p>
 *
 * @param pw the writer to which the help will be written
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param leftPad the number of characters of padding to be prefixed
 * to each line
 * @param descPad the number of characters of padding to be prefixed
 * to each description line
 * @param footer the banner to display at the end of the help
 */"
"public void setDescPadding(int padding) {
    this.defaultDescPad = padding;
}","public void test1143() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setDescPadding(1);
    assertEquals(1, helpFormatter0.defaultDescPad);
}","/**
 * Sets the 'descPadding'.
 *
 * @param padding the new value of 'descPadding'
 */"
"public String getNewLine() {
    return this.defaultNewLine;
}","public void test1244() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1246() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1247() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1248() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1250() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
}","public void test1353() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""--"", options0, true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1355() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""--"", options0, true);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1456() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1457() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""--"", string0);
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1458() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1461() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1563() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1564() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1565() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1566() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1670() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""-"", string0);
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1672() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1675() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1676() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void printUsage(PrintWriter pw, int width, String app, Options options) {
    // initialise the string buffer
    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");
    // create a list for processed option groups
    final Collection processedGroups = new ArrayList();
    // temp variable
    Option option;
    List optList = new ArrayList(options.getOptions());
    Collections.sort(optList, getOptionComparator());
    // iterate over the options
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        // get the next Option
        option = (Option) i.next();
        // check if the option is part of an OptionGroup
        OptionGroup group = options.getOptionGroup(option);
        // if the option is part of a group
        if (group != null) {
            // and if the group has not already been processed
            if (!processedGroups.contains(group)) {
                // add the group to the processed list
                processedGroups.add(group);
                // add the usage clause
                appendOptionGroup(buff, group);
            }
            // otherwise the option was displayed in the group
            // previously so ignore it.
        } else // if the Option is not part of an OptionGroup
        {
            appendOption(buff, option, option.isRequired());
        }
        if (i.hasNext()) {
            buff.append("" "");
        }
    }
    // call printWrapped
    printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
}","public void test1777() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", true, ""arg"");
    Option option1 = new Option(""mvZl"", true, """");
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
    MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.addOption(option1);
    optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup0);
    // Undeclared exception!
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 3, ""usage: "", options0);
}","/**
 * <p>Prints the usage statement for the specified application.</p>
 *
 * @param pw The PrintWriter to print the usage statement
 * @param width The number of characters to display per line
 * @param app The application name
 * @param options The command line Options
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test1878() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Set the comparator used to sort the options when they output in help text
 *
 * Passing in a null parameter will set the ordering to the default mode
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1879() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1882() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1883() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1884() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1985() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test1986() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Set the comparator used to sort the options when they output in help text
 *
 * Passing in a null parameter will set the ordering to the default mode
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1988() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1989() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1990() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test2092() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(3, (String) null, ""-"", (Options) null, ""-"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"// ------------------------------------------------------------------ Public
/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 */
public void printHelp(String cmdLineSyntax, Options options) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);
}","public void test2193() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp("""", options0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}",""
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test2294() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""--"");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    optionGroup1.setRequired(true);
    options0.addOptionGroup(optionGroup1);
    helpFormatter0.printHelp(""arg"", ""-"", options0, ""\n"", true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test2395() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option((String) null, true, ""-"");
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(""usage: "", ""usage: "", options1, ""usage: "", true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test2497() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""mvZl"", true, ""-"");
    options0.addOption(option0);
    option0.setArgName((String) null);
    helpFormatter0.printHelp(""\n"", ""\n"", options0, ""usage: "", true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"// ------------------------------------------------------------------ Public
/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 */
public void printHelp(String cmdLineSyntax, Options options) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);
}","public void test2598() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption("""", ""--"", true, ""arg"");
    Options options2 = options1.addOption(""arg"", true, ""--"");
    helpFormatter0.printHelp(""--"", options2);
    assertEquals(3, helpFormatter0.defaultDescPad);
}",""
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test25100() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption("""", ""--"", true, ""arg"");
    Options options2 = options1.addOption(""arg"", true, ""--"");
    helpFormatter0.printHelp(""--"", options2);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test26102() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.setLeftPadding(32);
    Option option0 = new Option(""arg"", ""-"", true, ""usage: "");
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(""usage: "", ""-"", options1, ""usage: "", true);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test27103() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""usage: "", false, (String) null);
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(""\n"", ""\n"", options1, ""\n"");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(cmdLineSyntax, header, options, footer, false);
}","public void test27104() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""usage: "", false, (String) null);
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(""\n"", ""\n"", options1, ""\n"");
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"protected int findWrapPos(String text, int width, int startPos) {
    int pos = -1;
    // the line ends before the max wrap pos or a new line char found
    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width)) {
        return pos + 1;
    } else if ((startPos + width) >= text.length()) {
        return -1;
    }
    // look for the last whitespace character before startPos+width
    pos = startPos + width;
    char c;
    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        --pos;
    }
    // if we found it - just return
    if (pos > startPos) {
        return pos;
    }
    // must look for the first whitespace chearacter after startPos
    // + width
    pos = startPos + width;
    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        ++pos;
    }
    return (pos == text.length()) ? (-1) : pos;
}","public void test28105() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.findWrapPos(""\n"", (-2307), (-2307));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Finds the next text wrap position after <code>startPos</code> for the
 * text in <code>text</code> with the column width <code>width</code>.
 * The wrap point is the last postion before startPos+width having a
 * whitespace character (space, \n, \r).
 *
 * @param text The text being searched for the wrap position
 * @param width width of the wrapped text
 * @param startPos position from which to start the lookup whitespace
 * character
 * @return postion on which the text must be wrapped or -1 if the wrap
 * position is at the end of the text
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test29106() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"protected int findWrapPos(String text, int width, int startPos) {
    int pos = -1;
    // the line ends before the max wrap pos or a new line char found
    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width)) {
        return pos + 1;
    } else if ((startPos + width) >= text.length()) {
        return -1;
    }
    // look for the last whitespace character before startPos+width
    pos = startPos + width;
    char c;
    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        --pos;
    }
    // if we found it - just return
    if (pos > startPos) {
        return pos;
    }
    // must look for the first whitespace chearacter after startPos
    // + width
    pos = startPos + width;
    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        ++pos;
    }
    return (pos == text.length()) ? (-1) : pos;
}","public void test29107() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Finds the next text wrap position after <code>startPos</code> for the
 * text in <code>text</code> with the column width <code>width</code>.
 * The wrap point is the last postion before startPos+width having a
 * whitespace character (space, \n, \r).
 *
 * @param text The text being searched for the wrap position
 * @param width width of the wrapped text
 * @param startPos position from which to start the lookup whitespace
 * character
 * @return postion on which the text must be wrapped or -1 if the wrap
 * position is at the end of the text
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test29109() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test30111() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"protected String rtrim(String s) {
    if ((s == null) || (s.length() == 0)) {
        return s;
    }
    int pos = s.length();
    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {
        --pos;
    }
    return s.substring(0, pos);
}","public void test30112() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertNull(string0);
}","/**
 * <p>Remove the trailing whitespace from the specified String.</p>
 *
 * @param s The String to remove the trailing padding from.
 *
 * @return The String of without the trailing padding
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test30113() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test30114() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test30117() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"protected String rtrim(String s) {
    if ((s == null) || (s.length() == 0)) {
        return s;
    }
    int pos = s.length();
    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {
        --pos;
    }
    return s.substring(0, pos);
}","public void test31119() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim("""");
    assertEquals("""", string0);
}","/**
 * <p>Remove the trailing whitespace from the specified String.</p>
 *
 * @param s The String to remove the trailing padding from.
 *
 * @return The String of without the trailing padding
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test31122() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim("""");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test31124() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim("""");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test31125() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim("""");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test31126() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim("""");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
