focal_method,test_prefix,docstring
"public boolean isRequired() {
    return required;
}","public void test00() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    boolean boolean0 = optionGroup0.isRequired();
    assertFalse(boolean0);
}","/**
 * Returns whether this option group is required.
 *
 * @return whether this option group is required
 */"
"public boolean isRequired() {
    return required;
}","public void test11() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.setRequired(true);
    assertTrue(optionGroup0.isRequired());
}","/**
 * Returns whether this option group is required.
 *
 * @return whether this option group is required
 */"
"public Collection getNames() {
    // the key set is the collection of names
    return optionMap.keySet();
}","public void test22() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    Collection collection0 = optionGroup0.getNames();
    assertNotNull(collection0);
}","/**
 * @return the names of the options in this group as a
 * <code>Collection</code>
 */"
"public String getSelected() {
    return selected;
}","public void test33() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.setSelected((Option) null);
    assertNull(optionGroup0.getSelected());
}","/**
 * @return the selected option name
 */"
"public int getId() {
    return getKey().charAt(0);
}","public void test44() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""Q8"", false, ""Q8"");
    optionGroup0.setSelected(option0);
    optionGroup0.setSelected(option0);
    assertEquals(81, option0.getId());
}","/**
 * Returns the id of this Option.  This is only set when the
 * Option shortOpt is a single character.  This is used for switch
 * statements.
 *
 * @return the id of this Option
 */"
"public void setSelected(Option option) throws AlreadySelectedException {
    if (option == null) {
        // reset the option previously selected
        selected = null;
        return;
    }
    // if no option has already been selected or the
    // same option is being reselected then set the
    // selected member variable
    if (selected == null || selected.equals(option.getOpt())) {
        selected = option.getOpt();
    } else {
        throw new AlreadySelectedException(this, option);
    }
}","public void test55() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""l7to"", ""maXvo'PF"");
    optionGroup0.setSelected(option0);
    Option option1 = new Option("""", false, ""The option '"");
    try {
        optionGroup0.setSelected(option1);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // The option '' was specified but an option from this group has already been selected: 'l7to'
        //
        verifyException(""org.apache.commons.cli.OptionGroup"", e);
    }
}","/**
 * Set the selected option of this group to <code>name</code>.
 *
 * @param option the option that is selected
 * @throws AlreadySelectedException if an option from this group has
 * already been selected.
 */"
"public String toString() {
    StringBuffer buff = new StringBuffer();
    Iterator iter = getOptions().iterator();
    buff.append(""["");
    while (iter.hasNext()) {
        Option option = (Option) iter.next();
        if (option.getOpt() != null) {
            buff.append(""-"");
            buff.append(option.getOpt());
        } else {
            buff.append(""--"");
            buff.append(option.getLongOpt());
        }
        buff.append("" "");
        buff.append(option.getDescription());
        if (iter.hasNext()) {
            buff.append("", "");
        }
    }
    buff.append(""]"");
    return buff.toString();
}","public void test66() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option((String) null, true, ""org.apache.commons.cli.Option"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Option option1 = new Option("""", false, ""illegal option value '"");
    optionGroup1.addOption(option1);
    String string0 = optionGroup1.toString();
    assertEquals(""[--null org.apache.commons.cli.Option, - illegal option value ']"", string0);
}","/**
 * Returns the stringified version of this OptionGroup.
 *
 * @return the stringified representation of this group
 */"
