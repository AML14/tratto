focal_method,test_prefix,docstring
"public boolean hasOption(char opt) {
    return hasOption(String.valueOf(opt));
}","public void test000() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    boolean boolean0 = commandLine0.hasOption('t');
    assertFalse(boolean0);
}","/**
 * Query to see if an option has been set.
 *
 * @param opt character name of the option
 * @return true if set, false if not
 */"
"public Option[] getOptions() {
    Collection processed = options.values();
    // reinitialise array
    Option[] optionsArray = new Option[processed.size()];
    // return the array
    return (Option[]) processed.toArray(optionsArray);
}","public void test011() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    Option[] optionArray0 = commandLine0.getOptions();
    assertEquals(0, optionArray0.length);
}","/**
 * Returns an array of the processed {@link Option}s.
 *
 * @return an array of the processed {@link Option}s.
 */"
"public Iterator iterator() {
    return hashcodeMap.values().iterator();
}","public void test022() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    Iterator iterator0 = commandLine0.iterator();
    assertNotNull(iterator0);
}","/**
 * Returns an iterator over the Option members of CommandLine.
 *
 * @return an <code>Iterator</code> over the processed {@link Option}
 * members of this {@link CommandLine}
 */"
"/**
 * Retrieves the array of values, if any, of an option.
 *
 * @param opt character name of the option
 * @return Values of the argument if option is set, and has an argument,
 * otherwise null.
 */
public String[] getOptionValues(char opt) {
    return getOptionValues(String.valueOf(opt));
}","public void test033() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    String[] stringArray0 = commandLine0.getOptionValues('O');
    assertNull(stringArray0);
}","/**
 * <p>Retrieves the option object given the long or short option as a String</p>
 * @param opt short or long name of the option
 * @return Canonicalized option
 */"
"public String getOptionValue(char opt) {
    return getOptionValue(String.valueOf(opt));
}","public void test044() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    String string0 = commandLine0.getOptionValue('\""');
    assertNull(string0);
}","/**
 * Retrieve the argument, if any, of this option.
 *
 * @param opt the character name of the option
 * @return Value of the argument if option is set, and has an argument,
 * otherwise null.
 */"
"public String getOptionValue(char opt, String defaultValue) {
    return getOptionValue(String.valueOf(opt), defaultValue);
}","public void test055() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    String string0 = commandLine0.getOptionValue('p', ""NO_ARGS_ALLOWED"");
    assertEquals(""NO_ARGS_ALLOWED"", string0);
}","/**
 * Retrieve the argument, if any, of an option.
 *
 * @param opt character name of the option
 * @param defaultValue is the default value to be returned if the option
 * is not specified
 * @return Value of the argument if option is set, and has an argument,
 * otherwise <code>defaultValue</code>.
 */"
"public Object getOptionObject(char opt) {
    return getOptionObject(String.valueOf(opt));
}","public void test078() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    Object object0 = commandLine0.getOptionObject('U');
    assertNull(object0);
}","/**
 * Return the <code>Object</code> type of this <code>Option</code>.
 *
 * @param opt the name of the option
 * @return the type of opt
 */"
"public String[] getArgs() {
    String[] answer = new String[args.size()];
    args.toArray(answer);
    return answer;
}","public void test089() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    String[] stringArray0 = commandLine0.getArgs();
    assertEquals(0, stringArray0.length);
}","/**
 * Retrieve any left-over non-recognized options and arguments
 *
 * @return remaining items passed in but not parsed as an array
 */"
"/*
    public String toString() {
        StringBuffer buf = new StringBuffer();
            
        buf.append(""[ CommandLine: [ options: "");
        buf.append(options.toString());
        buf.append("" ] [ args: "");
        buf.append(args.toString());
        buf.append("" ] ]"");
            
        return buf.toString();
    }
    */
/**
 * Add left-over unrecognized option/argument.
 *
 * @param arg the unrecognised option/argument.
 */
void addArg(String arg) {
    args.add(arg);
}","public void test0910() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    commandLine0.addArg("""");
}","/**
 * jkeyes
 * - commented out until it is implemented properly
 * <p>Dump state, suitable for debugging.</p>
 *
 * @return Stringified form of this object
 */"
"public boolean hasOption(String opt) {
    return options.containsKey(opt);
}","public void test1011() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    Option option0 = new Option(""mvZl"", true, (String) null);
    commandLine0.addOption(option0);
    boolean boolean0 = commandLine0.hasOption(""mvZl"");
    assertTrue(boolean0);
}","/**
 * Query to see if an option has been set.
 *
 * @param opt Short name of the option
 * @return true if set, false if not
 */"
"public Object getOptionObject(String opt) {
    String res = getOptionValue(opt);
    if (!options.containsKey(opt)) {
        return null;
    }
    Object type = ((Option) options.get(opt)).getType();
    return (res == null) ? null : TypeHandler.createValue(res, type);
}","public void test1112() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    Option option0 = new Option("""", true, """");
    commandLine0.addOption(option0);
    Object object0 = commandLine0.getOptionObject("""");
    assertNull(object0);
}","/**
 * Return the <code>Object</code> type of this <code>Option</code>.
 *
 * @param opt the name of the option
 * @return the type of this <code>Option</code>
 */"
"public Object getOptionObject(String opt) {
    String res = getOptionValue(opt);
    if (!options.containsKey(opt)) {
        return null;
    }
    Object type = ((Option) options.get(opt)).getType();
    return (res == null) ? null : TypeHandler.createValue(res, type);
}","public void test1213() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    Option option0 = new Option("""", true, """");
    option0.addValue(""hA:a#%yP V$HK"");
    commandLine0.addOption(option0);
    Object object0 = commandLine0.getOptionObject("""");
    assertNull(object0);
}","/**
 * Return the <code>Object</code> type of this <code>Option</code>.
 *
 * @param opt the name of the option
 * @return the type of this <code>Option</code>
 */"
"public String getOptionValue(String opt, String defaultValue) {
    String answer = getOptionValue(opt);
    return (answer != null) ? answer : defaultValue;
}","public void test1314() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    Option option0 = new Option("""", true, """");
    option0.setLongOpt("""");
    commandLine0.addOption(option0);
    String string0 = commandLine0.getOptionValue("""", ""Strings must not be null"");
    assertNotNull(string0);
}","/**
 * Retrieve the argument, if any, of an option.
 *
 * @param opt name of the option
 * @param defaultValue is the default value to be returned if the option
 * is not specified
 * @return Value of the argument if option is set, and has an argument,
 * otherwise <code>defaultValue</code>.
 */"
"public String getOptionValue(String opt, String defaultValue) {
    String answer = getOptionValue(opt);
    return (answer != null) ? answer : defaultValue;
}","public void test1416() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    Option option0 = new Option("""", true, """");
    option0.addValue(""hA:a#%yP V$HK"");
    commandLine0.addOption(option0);
    String string0 = commandLine0.getOptionValue("""", ""Strings must not be null"");
    assertEquals(""hA:a#%yP V$HK"", string0);
}","/**
 * Retrieve the argument, if any, of an option.
 *
 * @param opt name of the option
 * @param defaultValue is the default value to be returned if the option
 * is not specified
 * @return Value of the argument if option is set, and has an argument,
 * otherwise <code>defaultValue</code>.
 */"
"void addOption(Option opt) {
    hashcodeMap.put(new Integer(opt.hashCode()), opt);
    String key = opt.getKey();
    if (key == null) {
        key = opt.getLongOpt();
    } else {
        names.put(opt.getLongOpt(), key);
    }
    options.put(key, opt);
}","public void test1517() throws Throwable {
    CommandLine commandLine0 = new CommandLine();
    Option option0 = new Option((String) null, false, """");
    commandLine0.addOption(option0);
    assertEquals((-2), Option.UNLIMITED_VALUES);
}","/**
 * Add an option to the command line.  The values of
 * the option are stored.
 *
 * @param opt the processed option
 */"
