focal_method,test_prefix,docstring
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test000() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public int getWidth() {
    return defaultWidth;
}","public void test001() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'width'.
 *
 * @return the 'width'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test002() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test003() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test006() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test017() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""usage: "");
    assertEquals(""usage: "", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test028() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public int getDescPadding() {
    return defaultDescPad;
}","public void test029() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(3, int0);
}","/**
 * Returns the 'descPadding'.
 *
 * @return the 'descPadding'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0210() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0211() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0214() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getNewLine() {
    return defaultNewLine;
}","public void test0315() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setNewLine(""arg"");
    assertEquals(""arg"", helpFormatter0.getNewLine());
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0416() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""-"");
    assertEquals(""-"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {
    printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
}","public void test0517() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp((PrintWriter) null, 3, ""arg"", ""arg"", (Options) null, 3, 3, ""arg"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.
 *
 * @param pw the writer to which the help will be written
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param leftPad the number of characters of padding to be prefixed
 * to each line
 * @param descPad the number of characters of padding to be prefixed
 * to each description line
 * @param footer the banner to display at the end of the help
 *
 * @throws IllegalStateException if there is no room to print a line
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0618() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""--"");
    assertEquals(""--"", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test0719() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(1, ""--"", ""--"", (Options) null, ""--"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public void setWidth(int width) {
    this.defaultWidth = width;
}","public void test0820() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(3);
    assertEquals(3, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'width'.
 *
 * @param width the new value of 'width'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0921() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""--"");
    assertEquals(""--"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1022() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public int getLeftPadding() {
    return defaultLeftPad;
}","public void test1023() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'leftPadding'.
 *
 * @return the 'leftPadding'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1024() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1026() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1028() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1129() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1131() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1132() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1135() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void setDescPadding(int padding) {
    this.defaultDescPad = padding;
}","public void test1236() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setDescPadding(3);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'descPadding'.
 *
 * @param padding the new value of 'descPadding'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1237() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setDescPadding(3);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1238() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setDescPadding(3);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1239() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setDescPadding(3);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1240() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setDescPadding(3);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(cmdLineSyntax, header, options, footer, false);
}","public void test1343() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""arg"", ""arg"", options0, ""arg"");
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public String getNewLine() {
    return defaultNewLine;
}","public void test1445() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1446() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1447() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1449() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1451() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1553() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1554() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1555() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1557() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1660() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1661() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1662() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1664() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1767() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1768() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1771() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1772() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test1875() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option("""", """");
    optionGroup0.addOption(option0);
    Option option1 = new Option(""arg"", ""--"");
    optionGroup0.addOption(option1);
    Options options1 = options0.addOptionGroup(optionGroup0);
    helpFormatter0.printHelp(""-"", ""-"", options1, ""-"", true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test1976() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Set the comparator used to sort the options when they output in help text
 *
 * Passing in a null parameter will set the ordering to the default mode
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1977() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1978() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1980() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1981() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test2083() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Set the comparator used to sort the options when they output in help text
 *
 * Passing in a null parameter will set the ordering to the default mode
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test2084() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test2085() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test2087() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test2089() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(String cmdLineSyntax, Options options) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);
}","public void test2190() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp((String) null, options0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test2291() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp("""", """", options0, """", false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test2392() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""\n"", ""\n"", options0, ""\n"", false);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test2493() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""arg"", ""--"");
    optionGroup0.setRequired(true);
    optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup0);
    helpFormatter0.printHelp(""-"", ""-"", options1, ""-"", true);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test2594() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""arg"", true, ""usage: "");
    option0.setArgName("""");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup1);
    helpFormatter0.printHelp(""PNy3"", ""-"", options0, """", true);
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test2695() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""arg"", ""-"", true, ""usage: "");
    optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup0);
    helpFormatter0.printHelp(""-"", ""-"", options1, ""-"", true);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test2796() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption("""", true, ""-"");
    Option option0 = new Option(""arg"", ""A6gNYx$5F:av`z}z!5"");
    Options options2 = options1.addOption(option0);
    helpFormatter0.printHelp(""A6gNYx$5F:av`z}z!5"", ""--"", options2, ""A6gNYx$5F:av`z}z!5"", true);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test2897() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.setLeftPadding(74);
    Options options1 = options0.addOption((String) null, true, ""usage: "");
    helpFormatter0.printHelp(""-"", options1, true);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
}","public void test2898() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.setLeftPadding(74);
    Options options1 = options0.addOption((String) null, true, ""usage: "");
    helpFormatter0.printHelp(""-"", options1, true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test2999() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", false, (String) null);
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(""--"", ""--"", options1, ""--"", false);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {
    int argPos = cmdLineSyntax.indexOf(' ') + 1;
    printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
}","public void test30100() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printUsage((PrintWriter) null, 3, ""bLCaJ|E ."");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the cmdLineSyntax to the specified writer, using the
 * specified width.
 *
 * @param pw The printWriter to write the help to
 * @param width The number of characters per line for the usage statement.
 * @param cmdLineSyntax The usage statement.
 */"
"protected int findWrapPos(String text, int width, int startPos) {
    int pos = -1;
    // the line ends before the max wrap pos or a new line char found
    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width)) {
        return pos + 1;
    } else if (startPos + width >= text.length()) {
        return -1;
    }
    // look for the last whitespace character before startPos+width
    pos = startPos + width;
    char c;
    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        --pos;
    }
    // if we found it - just return
    if (pos > startPos) {
        return pos;
    }
    // must look for the first whitespace chearacter after startPos
    // + width
    pos = startPos + width;
    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        ++pos;
    }
    return (pos == text.length()) ? (-1) : pos;
}","public void test31101() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.findWrapPos(""\n"", (-896), (-896));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Finds the next text wrap position after <code>startPos</code> for the
 * text in <code>text</code> with the column width <code>width</code>.
 * The wrap point is the last postion before startPos+width having a
 * whitespace character (space, \n, \r).
 *
 * @param text The text being searched for the wrap position
 * @param width width of the wrapped text
 * @param startPos position from which to start the lookup whitespace
 * character
 * @return postion on which the text must be wrapped or -1 if the wrap
 * position is at the end of the text
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test32102() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"protected int findWrapPos(String text, int width, int startPos) {
    int pos = -1;
    // the line ends before the max wrap pos or a new line char found
    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width)) {
        return pos + 1;
    } else if (startPos + width >= text.length()) {
        return -1;
    }
    // look for the last whitespace character before startPos+width
    pos = startPos + width;
    char c;
    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        --pos;
    }
    // if we found it - just return
    if (pos > startPos) {
        return pos;
    }
    // must look for the first whitespace chearacter after startPos
    // + width
    pos = startPos + width;
    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        ++pos;
    }
    return (pos == text.length()) ? (-1) : pos;
}","public void test32103() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Finds the next text wrap position after <code>startPos</code> for the
 * text in <code>text</code> with the column width <code>width</code>.
 * The wrap point is the last postion before startPos+width having a
 * whitespace character (space, \n, \r).
 *
 * @param text The text being searched for the wrap position
 * @param width width of the wrapped text
 * @param startPos position from which to start the lookup whitespace
 * character
 * @return postion on which the text must be wrapped or -1 if the wrap
 * position is at the end of the text
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test33106() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test33107() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"protected String rtrim(String s) {
    if ((s == null) || (s.length() == 0)) {
        return s;
    }
    int pos = s.length();
    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {
        --pos;
    }
    return s.substring(0, pos);
}","public void test33108() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertNull(string0);
}","/**
 * Remove the trailing whitespace from the specified String.
 *
 * @param s The String to remove the trailing padding from.
 *
 * @return The String of without the trailing padding
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test33110() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test33111() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
    int pos = findWrapPos(text, width, 0);
    if (pos == -1) {
        sb.append(rtrim(text));
        return sb;
    }
    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    if (nextLineTabStop >= width) {
        // stops infinite loop happening
        nextLineTabStop = width - 1;
    }
    // all following lines must be padded with nextLineTabStop space
    // characters
    final String padding = createPadding(nextLineTabStop);
    while (true) {
        text = padding + text.substring(pos).trim();
        pos = findWrapPos(text, width, 0);
        if (pos == -1) {
            sb.append(text);
            return sb;
        }
        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
            pos = width;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    }
}","public void test34114() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""--"");
    StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, """");
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Render the specified text and return the rendered Options
 * in a StringBuffer.
 *
 * @param sb The StringBuffer to place the rendered text into.
 * @param width The number of characters to display per line
 * @param nextLineTabStop The position on the next line for the first tab.
 * @param text The text to be rendered.
 *
 * @return the StringBuffer with the rendered Options contents.
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test34117() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""--"");
    StringBuffer stringBuffer1 = helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, """");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"protected String rtrim(String s) {
    if ((s == null) || (s.length() == 0)) {
        return s;
    }
    int pos = s.length();
    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {
        --pos;
    }
    return s.substring(0, pos);
}","public void test35119() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim(""\n"");
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Remove the trailing whitespace from the specified String.
 *
 * @param s The String to remove the trailing padding from.
 *
 * @return The String of without the trailing padding
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test35120() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim(""\n"");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test35122() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim(""\n"");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test35124() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim(""\n"");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test35125() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim(""\n"");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
