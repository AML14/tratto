focal_method,test_prefix,docstring
"public boolean isRequired() {
    return required;
}","public void test00() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    boolean boolean0 = optionGroup0.isRequired();
    assertFalse(boolean0);
}","/**
 * Returns whether this option group is required.
 *
 * @return whether this option group is required
 */"
"public boolean isRequired() {
    return required;
}","public void test11() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.setRequired(false);
    assertFalse(optionGroup0.isRequired());
}","/**
 * Returns whether this option group is required.
 *
 * @return whether this option group is required
 */"
"public Collection<String> getNames() {
    // the key set is the collection of names
    return optionMap.keySet();
}","public void test22() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    Collection<String> collection0 = optionGroup0.getNames();
    assertNotNull(collection0);
}","/**
 * @return the names of the options in this group as a
 * <code>Collection</code>
 */"
"public void setSelected(Option option) throws AlreadySelectedException {
    if (option == null) {
        // reset the option previously selected
        selected = null;
        return;
    }
    // if no option has already been selected or the
    // same option is being reselected then set the
    // selected member variable
    if (selected == null || selected.equals(option.getKey())) {
        selected = option.getKey();
    } else {
        throw new AlreadySelectedException(this, option);
    }
}","public void test33() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""W"", """", false, ""W"");
    optionGroup0.setSelected(option0);
    Option option1 = new Option("""", (String) null);
    try {
        optionGroup0.setSelected(option1);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // The option '' was specified but an option from this group has already been selected: 'W'
        //
        verifyException(""org.apache.commons.cli.OptionGroup"", e);
    }
}","/**
 * Set the selected option of this group to <code>name</code>.
 *
 * @param option the option that is selected
 * @throws AlreadySelectedException if an option from this group has
 * already been selected.
 */"
"public String getSelected() {
    return selected;
}","public void test44() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.setSelected((Option) null);
    assertNull(optionGroup0.getSelected());
}","/**
 * @return the selected option name
 */"
"public void setSelected(Option option) throws AlreadySelectedException {
    if (option == null) {
        // reset the option previously selected
        selected = null;
        return;
    }
    // if no option has already been selected or the
    // same option is being reselected then set the
    // selected member variable
    if (selected == null || selected.equals(option.getKey())) {
        selected = option.getKey();
    } else {
        throw new AlreadySelectedException(this, option);
    }
}","public void test55() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option("""", """", true, (String) null);
    optionGroup0.setSelected(option0);
    optionGroup0.setSelected(option0);
    assertEquals((-2), Option.UNLIMITED_VALUES);
}","/**
 * Set the selected option of this group to <code>name</code>.
 *
 * @param option the option that is selected
 * @throws AlreadySelectedException if an option from this group has
 * already been selected.
 */"
"@Override
public String toString() {
    StringBuilder buff = new StringBuilder();
    Iterator<Option> iter = getOptions().iterator();
    buff.append(""["");
    while (iter.hasNext()) {
        Option option = iter.next();
        if (option.getOpt() != null) {
            buff.append(""-"");
            buff.append(option.getOpt());
        } else {
            buff.append(""--"");
            buff.append(option.getLongOpt());
        }
        if (option.getDescription() != null) {
            buff.append("" "");
            buff.append(option.getDescription());
        }
        if (iter.hasNext()) {
            buff.append("", "");
        }
    }
    buff.append(""]"");
    return buff.toString();
}","public void test66() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option((String) null, ""org.apache.commons.cli.OptionGroup"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    String string0 = optionGroup1.toString();
    assertEquals(""[--null org.apache.commons.cli.OptionGroup]"", string0);
}","/**
 * Returns the stringified version of this OptionGroup.
 *
 * @return the stringified representation of this group
 */"
"@Override
public String toString() {
    StringBuilder buff = new StringBuilder();
    Iterator<Option> iter = getOptions().iterator();
    buff.append(""["");
    while (iter.hasNext()) {
        Option option = iter.next();
        if (option.getOpt() != null) {
            buff.append(""-"");
            buff.append(option.getOpt());
        } else {
            buff.append(""--"");
            buff.append(option.getLongOpt());
        }
        if (option.getDescription() != null) {
            buff.append("" "");
            buff.append(option.getDescription());
        }
        if (iter.hasNext()) {
            buff.append("", "");
        }
    }
    buff.append(""]"");
    return buff.toString();
}","public void test77() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option("""", (String) null);
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    String string0 = optionGroup1.toString();
    assertEquals(""[-]"", string0);
}","/**
 * Returns the stringified version of this OptionGroup.
 *
 * @return the stringified representation of this group
 */"
"@Override
public String toString() {
    StringBuilder buff = new StringBuilder();
    Iterator<Option> iter = getOptions().iterator();
    buff.append(""["");
    while (iter.hasNext()) {
        Option option = iter.next();
        if (option.getOpt() != null) {
            buff.append(""-"");
            buff.append(option.getOpt());
        } else {
            buff.append(""--"");
            buff.append(option.getLongOpt());
        }
        if (option.getDescription() != null) {
            buff.append("" "");
            buff.append(option.getDescription());
        }
        if (iter.hasNext()) {
            buff.append("", "");
        }
    }
    buff.append(""]"");
    return buff.toString();
}","public void test88() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""Db0KDf"", """", true, ""Db0KDf"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Option option1 = new Option("""", """", true, ""Db0KDf"");
    OptionGroup optionGroup2 = optionGroup1.addOption(option1);
    String string0 = optionGroup2.toString();
    assertEquals(""[- Db0KDf, -Db0KDf Db0KDf]"", string0);
}","/**
 * Returns the stringified version of this OptionGroup.
 *
 * @return the stringified representation of this group
 */"
