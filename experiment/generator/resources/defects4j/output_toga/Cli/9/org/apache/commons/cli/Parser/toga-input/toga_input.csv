focal_method,test_prefix,docstring
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null, false);
}","public void test000() throws Throwable {
    PosixParser posixParser0 = new PosixParser();
    Options options0 = new Options();
    CommandLine commandLine0 = posixParser0.parse(options0, (String[]) null);
    assertNotNull(commandLine0);
}","/**
 * <p>Parses the specified <code>arguments</code>
 * based on the specifed {@link Options}.</p>
 *
 * @param options the <code>Options</code>
 * @param arguments the <code>arguments</code>
 * @return the <code>CommandLine</code>
 * @throws ParseException if an error occurs when parsing the
 * arguments.
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {
    // clear out the data in options in case it's been used before (CLI-71)
    for (Iterator it = options.helpOptions().iterator(); it.hasNext(); ) {
        Option opt = (Option) it.next();
        opt.clearValues();
    }
    // initialise members
    setOptions(options);
    cmd = new CommandLine();
    boolean eatTheRest = false;
    if (arguments == null) {
        arguments = new String[0];
    }
    List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));
    ListIterator iterator = tokenList.listIterator();
    // process each flattened token
    while (iterator.hasNext()) {
        String t = (String) iterator.next();
        // the value is the double-dash
        if (""--"".equals(t)) {
            eatTheRest = true;
        } else // the value is a single dash
        if (""-"".equals(t)) {
            if (stopAtNonOption) {
                eatTheRest = true;
            } else {
                cmd.addArg(t);
            }
        } else // the value is an option
        if (t.startsWith(""-"")) {
            if (stopAtNonOption && !getOptions().hasOption(t)) {
                eatTheRest = true;
                cmd.addArg(t);
            } else {
                processOption(t, iterator);
            }
        } else // the value is an argument
        {
            cmd.addArg(t);
            if (stopAtNonOption) {
                eatTheRest = true;
            }
        }
        // eat the remaining tokens
        if (eatTheRest) {
            while (iterator.hasNext()) {
                String str = (String) iterator.next();
                // ensure only one double-dash is added
                if (!""--"".equals(str)) {
                    cmd.addArg(str);
                }
            }
        }
    }
    processProperties(properties);
    checkRequiredOptions();
    return cmd;
}","public void test011() throws Throwable {
    Options options0 = new Options();
    GnuParser gnuParser0 = new GnuParser();
    Properties properties0 = new Properties();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-"";
    CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
    assertNotNull(commandLine0);
}","/**
 * Parse the arguments according to the specified options and
 * properties.
 *
 * @param options the specified Options
 * @param arguments the command line arguments
 * @param properties command line option name-value pairs
 * @param stopAtNonOption stop parsing the arguments when the first
 * non option is encountered.
 *
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 */"
"public String getLongOpt() {
    return this.longOpt;
}","public void test022() throws Throwable {
    PosixParser posixParser0 = new PosixParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[7];
    stringArray0[0] = ""YTc*cX :#5_XKki4L-A"";
    stringArray0[1] = ""yes"";
    stringArray0[2] = ""7"";
    stringArray0[3] = ""7"";
    stringArray0[4] = ""--"";
    stringArray0[5] = ""YTc*cX :#5_XKki4L-A"";
    stringArray0[6] = ""--"";
    posixParser0.parse(options0, stringArray0, (Properties) null);
    options0.addOption(""7"", ""7"", true, ""7"");
    Option option0 = new Option(""7"", true, ""yes"");
    ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
    doReturn(true, true).when(listIterator0).hasNext();
    doReturn(""7"", ""-7"").when(listIterator0).next();
    doReturn(""--"").when(listIterator0).previous();
    posixParser0.processArgs(option0, listIterator0);
    assertNull(option0.getLongOpt());
}","/**
 * Retrieve the long name of this Option.
 *
 * @return Long name of this option, or null, if there is no long name
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {
    return parse(options, arguments, properties, false);
}","public void test033() throws Throwable {
    Options options0 = new Options();
    GnuParser gnuParser0 = new GnuParser();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-"";
    Properties properties0 = new Properties();
    CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0);
    assertNotNull(commandLine0);
}","/**
 * Parse the arguments according to the specified options and
 * properties.
 *
 * @param options the specified Options
 * @param arguments the command line arguments
 * @param properties command line option name-value pairs
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {
    return parse(options, arguments, properties, false);
}","public void test044() throws Throwable {
    Options options0 = new Options();
    GnuParser gnuParser0 = new GnuParser();
    Properties properties0 = new Properties();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-}cc"";
    try {
        gnuParser0.parse(options0, stringArray0, properties0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: -}cc
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * Parse the arguments according to the specified options and
 * properties.
 *
 * @param options the specified Options
 * @param arguments the command line arguments
 * @param properties command line option name-value pairs
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {
    // clear out the data in options in case it's been used before (CLI-71)
    for (Iterator it = options.helpOptions().iterator(); it.hasNext(); ) {
        Option opt = (Option) it.next();
        opt.clearValues();
    }
    // initialise members
    setOptions(options);
    cmd = new CommandLine();
    boolean eatTheRest = false;
    if (arguments == null) {
        arguments = new String[0];
    }
    List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));
    ListIterator iterator = tokenList.listIterator();
    // process each flattened token
    while (iterator.hasNext()) {
        String t = (String) iterator.next();
        // the value is the double-dash
        if (""--"".equals(t)) {
            eatTheRest = true;
        } else // the value is a single dash
        if (""-"".equals(t)) {
            if (stopAtNonOption) {
                eatTheRest = true;
            } else {
                cmd.addArg(t);
            }
        } else // the value is an option
        if (t.startsWith(""-"")) {
            if (stopAtNonOption && !getOptions().hasOption(t)) {
                eatTheRest = true;
                cmd.addArg(t);
            } else {
                processOption(t, iterator);
            }
        } else // the value is an argument
        {
            cmd.addArg(t);
            if (stopAtNonOption) {
                eatTheRest = true;
            }
        }
        // eat the remaining tokens
        if (eatTheRest) {
            while (iterator.hasNext()) {
                String str = (String) iterator.next();
                // ensure only one double-dash is added
                if (!""--"".equals(str)) {
                    cmd.addArg(str);
                }
            }
        }
    }
    processProperties(properties);
    checkRequiredOptions();
    return cmd;
}","public void test055() throws Throwable {
    Options options0 = new Options();
    GnuParser gnuParser0 = new GnuParser();
    Properties properties0 = new Properties();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""u7a}[2=V"";
    CommandLine commandLine0 = gnuParser0.parse(options0, stringArray0, properties0, true);
    assertNotNull(commandLine0);
}","/**
 * Parse the arguments according to the specified options and
 * properties.
 *
 * @param options the specified Options
 * @param arguments the command line arguments
 * @param properties command line option name-value pairs
 * @param stopAtNonOption stop parsing the arguments when the first
 * non option is encountered.
 *
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {
    return parse(options, arguments, properties, false);
}","public void test066() throws Throwable {
    PosixParser posixParser0 = new PosixParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[0];
    Properties properties0 = new Properties();
    properties0.put("""", posixParser0);
    // Undeclared exception!
    try {
        posixParser0.parse(options0, stringArray0, properties0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * Parse the arguments according to the specified options and
 * properties.
 *
 * @param options the specified Options
 * @param arguments the command line arguments
 * @param properties command line option name-value pairs
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 */"
"public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {
    return parse(options, arguments, null, stopAtNonOption);
}","public void test077() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.setRequired(true);
    BasicParser basicParser0 = new BasicParser();
    options0.addOptionGroup(optionGroup0);
    try {
        basicParser0.parse(options0, (String[]) null, true);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing required option: []
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * <p>Parses the specified <code>arguments</code>
 * based on the specifed {@link Options}.</p>
 *
 * @param options the <code>Options</code>
 * @param arguments the <code>arguments</code>
 * @param stopAtNonOption specifies whether to stop
 * interpreting the arguments when a non option has
 * been encountered and to add them to the CommandLines
 * args list.
 *
 * @return the <code>CommandLine</code>
 * @throws ParseException if an error occurs when parsing the
 * arguments.
 */"
"public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {
    return parse(options, arguments, null, stopAtNonOption);
}","public void test088() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    optionGroup0.setRequired(true);
    Options options1 = options0.addOptionGroup(optionGroup0);
    BasicParser basicParser0 = new BasicParser();
    options1.addOptionGroup(optionGroup0);
    try {
        basicParser0.parse(options1, (String[]) null, false);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing required options: [][]
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * <p>Parses the specified <code>arguments</code>
 * based on the specifed {@link Options}.</p>
 *
 * @param options the <code>Options</code>
 * @param arguments the <code>arguments</code>
 * @param stopAtNonOption specifies whether to stop
 * interpreting the arguments when a non option has
 * been encountered and to add them to the CommandLines
 * args list.
 *
 * @return the <code>CommandLine</code>
 * @throws ParseException if an error occurs when parsing the
 * arguments.
 */"
"protected void processOption(String arg, ListIterator iter) throws ParseException {
    boolean hasOption = getOptions().hasOption(arg);
    // if there is no option throw an UnrecognisedOptionException
    if (!hasOption) {
        throw new UnrecognizedOptionException(""Unrecognized option: "" + arg);
    }
    // get the option represented by arg
    final Option opt = getOptions().getOption(arg);
    // if the option is a required option remove the option from
    // the requiredOptions list
    if (opt.isRequired()) {
        getRequiredOptions().remove(opt.getKey());
    }
    // if the option is in an OptionGroup make that option the selected
    // option of the group
    if (getOptions().getOptionGroup(opt) != null) {
        OptionGroup group = getOptions().getOptionGroup(opt);
        if (group.isRequired()) {
            getRequiredOptions().remove(group);
        }
        group.setSelected(opt);
    }
    // if the option takes an argument value
    if (opt.hasArg()) {
        processArgs(opt, iter);
    }
    // set the option on the command line
    cmd.addOption(opt);
}","public void test099() throws Throwable {
    Options options0 = new Options();
    Options options1 = options0.addOption((String) null, true, ""true"");
    String[] stringArray0 = new String[0];
    GnuParser gnuParser0 = new GnuParser();
    Properties properties0 = new Properties();
    gnuParser0.parse(options1, stringArray0, properties0, true);
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ListIterator<Object> listIterator0 = linkedList0.listIterator();
    try {
        gnuParser0.processOption((String) null, listIterator0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing argument for option:null
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * <p>Process the Option specified by <code>arg</code>
 * using the values retrieved from the specfied iterator
 * <code>iter</code>.
 *
 * @param arg The String value representing an Option
 * @param iter The iterator over the flattened command
 * line arguments.
 *
 * @throws ParseException if <code>arg</code> does not
 * represent an Option
 */"
"public void processArgs(Option opt, ListIterator iter) throws ParseException {
    // loop until an option is found
    while (iter.hasNext()) {
        String str = (String) iter.next();
        // found an Option, not an argument
        if (getOptions().hasOption(str) && str.startsWith(""-"")) {
            iter.previous();
            break;
        }
        // found a value
        try {
            opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));
        } catch (RuntimeException exp) {
            iter.previous();
            break;
        }
    }
    if ((opt.getValues() == null) && !opt.hasOptionalArg()) {
        throw new MissingArgumentException(""Missing argument for option:"" + opt.getKey());
    }
}","public void test1010() throws Throwable {
    PosixParser posixParser0 = new PosixParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[0];
    Properties properties0 = new Properties();
    posixParser0.parse(options0, stringArray0, properties0);
    Option option0 = new Option((String) null, (String) null);
    ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
    doReturn(true).when(listIterator0).hasNext();
    doReturn((String) null).when(listIterator0).next();
    doReturn((Object) null).when(listIterator0).previous();
    try {
        posixParser0.processArgs(option0, listIterator0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing argument for option:null
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * <p>Process the argument values for the specified Option
 * <code>opt</code> using the values retrieved from the
 * specified iterator <code>iter</code>.
 *
 * @param opt The current Option
 * @param iter The iterator over the flattened command line
 * Options.
 *
 * @throws ParseException if an argument value is required
 * and it is has not been found.
 */"
"public void processArgs(Option opt, ListIterator iter) throws ParseException {
    // loop until an option is found
    while (iter.hasNext()) {
        String str = (String) iter.next();
        // found an Option, not an argument
        if (getOptions().hasOption(str) && str.startsWith(""-"")) {
            iter.previous();
            break;
        }
        // found a value
        try {
            opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str));
        } catch (RuntimeException exp) {
            iter.previous();
            break;
        }
    }
    if ((opt.getValues() == null) && !opt.hasOptionalArg()) {
        throw new MissingArgumentException(""Missing argument for option:"" + opt.getKey());
    }
}","public void test1111() throws Throwable {
    PosixParser posixParser0 = new PosixParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[7];
    stringArray0[0] = ""YTc*cX :#5_XKki4CXA"";
    stringArray0[1] = ""yes"";
    stringArray0[2] = ""7"";
    stringArray0[3] = ""7"";
    stringArray0[4] = ""YTc*cX :#5_XKki4CXA"";
    stringArray0[5] = ""YTc*cX :#5_XKki4CXA"";
    stringArray0[6] = ""YTc*cX :#5_XKki4CXA"";
    posixParser0.parse(options0, stringArray0, (Properties) null);
    options0.addOption(""7"", ""7"", true, ""7"");
    Option option0 = new Option(""yes"", ""yes"");
    ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
    doReturn(true).when(listIterator0).hasNext();
    doReturn(""7"").when(listIterator0).next();
    doReturn(""YTc*cX :#5_XKki4CXA"").when(listIterator0).previous();
    try {
        posixParser0.processArgs(option0, listIterator0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing argument for option:yes
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * <p>Process the argument values for the specified Option
 * <code>opt</code> using the values retrieved from the
 * specified iterator <code>iter</code>.
 *
 * @param opt The current Option
 * @param iter The iterator over the flattened command line
 * Options.
 *
 * @throws ParseException if an argument value is required
 * and it is has not been found.
 */"
"public String getArgName() {
    return this.argName;
}","public void test1212() throws Throwable {
    PosixParser posixParser0 = new PosixParser();
    Option option0 = new Option("""", ""}uOe;`_98Lf"");
    option0.setOptionalArg(true);
    ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(listIterator0).hasNext();
    posixParser0.processArgs(option0, listIterator0);
    assertEquals(""arg"", option0.getArgName());
}","/**
 * Gets the display name for the argument value.
 *
 * @return the display name for the argument value.
 */"
"protected void processOption(String arg, ListIterator iter) throws ParseException {
    boolean hasOption = getOptions().hasOption(arg);
    // if there is no option throw an UnrecognisedOptionException
    if (!hasOption) {
        throw new UnrecognizedOptionException(""Unrecognized option: "" + arg);
    }
    // get the option represented by arg
    final Option opt = getOptions().getOption(arg);
    // if the option is a required option remove the option from
    // the requiredOptions list
    if (opt.isRequired()) {
        getRequiredOptions().remove(opt.getKey());
    }
    // if the option is in an OptionGroup make that option the selected
    // option of the group
    if (getOptions().getOptionGroup(opt) != null) {
        OptionGroup group = getOptions().getOptionGroup(opt);
        if (group.isRequired()) {
            getRequiredOptions().remove(group);
        }
        group.setSelected(opt);
    }
    // if the option takes an argument value
    if (opt.hasArg()) {
        processArgs(opt, iter);
    }
    // set the option on the command line
    cmd.addOption(opt);
}","public void test1313() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""LwnQ"", true, ""LwnQ"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup1);
    Properties properties0 = new Properties();
    GnuParser gnuParser0 = new GnuParser();
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""-7a}[2cV"";
    option0.setRequired(true);
    gnuParser0.parse(options1, stringArray0, properties0, true);
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ListIterator<Object> listIterator0 = linkedList0.listIterator();
    try {
        gnuParser0.processOption(""LwnQ"", listIterator0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing argument for option:LwnQ
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * <p>Process the Option specified by <code>arg</code>
 * using the values retrieved from the specfied iterator
 * <code>iter</code>.
 *
 * @param arg The String value representing an Option
 * @param iter The iterator over the flattened command
 * line arguments.
 *
 * @throws ParseException if <code>arg</code> does not
 * represent an Option
 */"
"protected void processOption(String arg, ListIterator iter) throws ParseException {
    boolean hasOption = getOptions().hasOption(arg);
    // if there is no option throw an UnrecognisedOptionException
    if (!hasOption) {
        throw new UnrecognizedOptionException(""Unrecognized option: "" + arg);
    }
    // get the option represented by arg
    final Option opt = getOptions().getOption(arg);
    // if the option is a required option remove the option from
    // the requiredOptions list
    if (opt.isRequired()) {
        getRequiredOptions().remove(opt.getKey());
    }
    // if the option is in an OptionGroup make that option the selected
    // option of the group
    if (getOptions().getOptionGroup(opt) != null) {
        OptionGroup group = getOptions().getOptionGroup(opt);
        if (group.isRequired()) {
            getRequiredOptions().remove(group);
        }
        group.setSelected(opt);
    }
    // if the option takes an argument value
    if (opt.hasArg()) {
        processArgs(opt, iter);
    }
    // set the option on the command line
    cmd.addOption(opt);
}","public void test1414() throws Throwable {
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""LwnQ"", true, ""LwnQ"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup1);
    Properties properties0 = new Properties();
    optionGroup0.setRequired(true);
    GnuParser gnuParser0 = new GnuParser();
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""-7a}[2cV"";
    gnuParser0.parse(options1, stringArray0, properties0, true);
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    ListIterator<Object> listIterator0 = linkedList0.listIterator();
    try {
        gnuParser0.processOption(""LwnQ"", listIterator0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing argument for option:LwnQ
        //
        verifyException(""org.apache.commons.cli.Parser"", e);
    }
}","/**
 * <p>Process the Option specified by <code>arg</code>
 * using the values retrieved from the specfied iterator
 * <code>iter</code>.
 *
 * @param arg The String value representing an Option
 * @param iter The iterator over the flattened command
 * line arguments.
 *
 * @throws ParseException if <code>arg</code> does not
 * represent an Option
 */"
