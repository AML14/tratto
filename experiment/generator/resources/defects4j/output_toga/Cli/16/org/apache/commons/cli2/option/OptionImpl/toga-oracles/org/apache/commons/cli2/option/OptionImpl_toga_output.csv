project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    linkedList0.add((Object) propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", (-1), (-1));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    groupImpl0.validate(writeableCommandLineImpl0);
    assertEquals(68, propertyOption0.getId());
}",0,"assertEquals(0, propertyOption0.getId())"
project,0,test001,"public void test001() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    linkedList0.add((Object) propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", (-1), (-1));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    groupImpl0.validate(writeableCommandLineImpl0);
    assertFalse(propertyOption0.isRequired());
}",0,assertTrue(propertyOption0.isRequired())
project,0,test012,"public void test012() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    propertyOption0.defaults((WriteableCommandLine) null);
    assertEquals(""-D"", propertyOption0.getPreferredName());
}",0,assertNotNull(propertyOption0.getPreferredName())
project,0,test023,"public void test023() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);
    boolean boolean0 = propertyOption0.equals(propertyOption0);
    assertEquals(15, propertyOption0.getId());
}",0,"assertEquals(1, propertyOption0.getId())"
project,0,test024,"public void test024() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);
    boolean boolean0 = propertyOption0.equals(propertyOption0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test025,"public void test025() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);
    boolean boolean0 = propertyOption0.equals(propertyOption0);
    assertFalse(propertyOption0.isRequired());
}",0,
project,0,test036,"public void test036() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    propertyOption0.toString();
    assertFalse(propertyOption0.isRequired());
}",0,assertFalse(propertyOption0.isRequired())
project,0,test037,"public void test037() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    propertyOption0.toString();
    assertEquals(68, propertyOption0.getId());
}",0,
project,0,test048,"public void test048() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ListIterator<Integer> listIterator0 = linkedList0.listIterator();
    boolean boolean0 = propertyOption0.canProcess((WriteableCommandLine) null, listIterator0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test059,"public void test059() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    Integer integer0 = new Integer(60);
    linkedList0.add(integer0);
    ListIterator<Integer> listIterator0 = linkedList0.listIterator();
    // Undeclared exception!
    try {
        propertyOption0.canProcess((WriteableCommandLine) null, listIterator0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Integer cannot be cast to java.lang.String
        //
        verifyException(""org.apache.commons.cli2.option.OptionImpl"", e);
    }
}",0,
project,0,test0610,"public void test0610() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    boolean boolean0 = propertyOption0.equals(""Passes properties and values to the application"");
    assertFalse(propertyOption0.isRequired());
}",0,assertFalse(propertyOption0.isRequired())
project,0,test0611,"public void test0611() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    boolean boolean0 = propertyOption0.equals(""Passes properties and values to the application"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0612,"public void test0612() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    boolean boolean0 = propertyOption0.equals(""Passes properties and values to the application"");
    assertEquals(68, propertyOption0.getId());
}",0,
project,0,test0713,"public void test0713() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    PropertyOption propertyOption1 = new PropertyOption(""Passes properties and values to the application"", ""Passes properties and values to the application"", 404);
    boolean boolean0 = propertyOption0.equals(propertyOption1);
    assertEquals(404, propertyOption1.getId());
}",0,"assertEquals(0, propertyOption1.getId())"
project,0,test0714,"public void test0714() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    PropertyOption propertyOption1 = new PropertyOption(""Passes properties and values to the application"", ""Passes properties and values to the application"", 404);
    boolean boolean0 = propertyOption0.equals(propertyOption1);
    assertFalse(propertyOption1.isRequired());
}",0,assertFalse(propertyOption1.isRequired())
project,0,test0715,"public void test0715() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    PropertyOption propertyOption1 = new PropertyOption(""Passes properties and values to the application"", ""Passes properties and values to the application"", 404);
    boolean boolean0 = propertyOption0.equals(propertyOption1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0816,"public void test0816() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);
    PropertyOption propertyOption1 = new PropertyOption(""-D"", (String) null, 15);
    boolean boolean0 = propertyOption1.equals(propertyOption0);
    assertEquals(15, propertyOption1.getId());
}",0,"assertEquals(0, propertyOption1.getId())"
project,0,test0817,"public void test0817() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);
    PropertyOption propertyOption1 = new PropertyOption(""-D"", (String) null, 15);
    boolean boolean0 = propertyOption1.equals(propertyOption0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0818,"public void test0818() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);
    PropertyOption propertyOption1 = new PropertyOption(""-D"", (String) null, 15);
    boolean boolean0 = propertyOption1.equals(propertyOption0);
    assertFalse(propertyOption1.isRequired());
}",0,assertTrue(propertyOption1.isRequired())
project,0,test0919,"public void test0919() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    PropertyOption propertyOption1 = new PropertyOption(""-D"", ""-D"", 68);
    boolean boolean0 = propertyOption0.equals(propertyOption1);
    assertEquals(68, propertyOption1.getId());
}",0,
project,0,test0920,"public void test0920() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    PropertyOption propertyOption1 = new PropertyOption(""-D"", ""-D"", 68);
    boolean boolean0 = propertyOption0.equals(propertyOption1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0921,"public void test0921() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    PropertyOption propertyOption1 = new PropertyOption(""-D"", ""-D"", 68);
    boolean boolean0 = propertyOption0.equals(propertyOption1);
    assertFalse(propertyOption1.isRequired());
}",0,assertFalse(propertyOption1.isRequired())
project,0,test1022,"public void test1022() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption(""G"", ""G"", 0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""G"", ""G"", 0, 0);
    boolean boolean0 = propertyOption0.equals(groupImpl0);
    assertEquals(0, groupImpl0.getId());
}",0,"assertEquals(0, groupImpl0.getId())"
project,0,test1023,"public void test1023() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption(""G"", ""G"", 0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""G"", ""G"", 0, 0);
    boolean boolean0 = propertyOption0.equals(groupImpl0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1024,"public void test1024() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption(""G"", ""G"", 0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""G"", ""G"", 0, 0);
    boolean boolean0 = propertyOption0.equals(groupImpl0);
    assertFalse(propertyOption0.isRequired());
}",0,assertTrue(propertyOption0.isRequired())
project,0,test1125,"public void test1125() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    PropertyOption propertyOption1 = new PropertyOption((String) null, (String) null, 68);
    boolean boolean0 = propertyOption1.equals(propertyOption0);
    assertEquals(68, propertyOption1.getId());
}",0,
project,0,test1126,"public void test1126() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    PropertyOption propertyOption1 = new PropertyOption((String) null, (String) null, 68);
    boolean boolean0 = propertyOption1.equals(propertyOption0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1127,"public void test1127() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    PropertyOption propertyOption1 = new PropertyOption((String) null, (String) null, 68);
    boolean boolean0 = propertyOption1.equals(propertyOption0);
    assertFalse(propertyOption1.isRequired());
}",0,assertTrue(propertyOption1.isRequired())
project,0,test1228,"public void test1228() throws Throwable {
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 1116, 1116);
    groupImpl0.hashCode();
    assertEquals(0, groupImpl0.getId());
}",0,"assertEquals(1, groupImpl0.getId())"
project,0,test1329,"public void test1329() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    propertyOption0.hashCode();
    assertEquals(68, propertyOption0.getId());
}",0,"assertEquals(0, propertyOption0.getId())"
project,0,test1430,"public void test1430() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    Option option0 = propertyOption0.findOption(""Passes properties and values to the application"");
    assertNull(option0);
}",0,assertNotNull(option0)
project,0,test1431,"public void test1431() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    Option option0 = propertyOption0.findOption(""Passes properties and values to the application"");
    assertEquals(68, propertyOption0.getId());
}",0,"assertEquals(0, propertyOption0.getId())"
project,0,test1432,"public void test1432() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    Option option0 = propertyOption0.findOption(""Passes properties and values to the application"");
    assertFalse(propertyOption0.isRequired());
}",0,assertTrue(propertyOption0.isRequired())
project,0,test1533,"public void test1533() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    Option option0 = propertyOption0.findOption(""-D"");
    assertEquals(68, option0.getId());
}",0,"assertEquals(0, option0.getId())"
project,0,test1534,"public void test1534() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    Option option0 = propertyOption0.findOption(""-D"");
    assertNotNull(option0);
}",0,assertNotNull(option0)
project,0,test1535,"public void test1535() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    Option option0 = propertyOption0.findOption(""-D"");
    assertFalse(option0.isRequired());
}",0,assertTrue(option0.isRequired())
project,0,test1636,"public void test1636() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    // Undeclared exception!
    try {
        propertyOption0.checkPrefixes(set0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Trigger -D must be prefixed with a value from java.util.HashSet@0000000003
        //
        verifyException(""org.apache.commons.cli2.option.OptionImpl"", e);
    }
}",1,
project,0,test1737,"public void test1737() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedHashSet<ArgumentImpl> linkedHashSet0 = new LinkedHashSet<ArgumentImpl>();
    propertyOption0.checkPrefixes(linkedHashSet0);
    assertEquals(68, propertyOption0.getId());
}",0,"assertEquals(0, propertyOption0.getId())"
project,0,test1738,"public void test1738() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedHashSet<ArgumentImpl> linkedHashSet0 = new LinkedHashSet<ArgumentImpl>();
    propertyOption0.checkPrefixes(linkedHashSet0);
    assertFalse(propertyOption0.isRequired());
}",0,assertFalse(propertyOption0.isRequired())
project,0,test1839,"public void test1839() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""-D"");
    propertyOption0.checkPrefixes(linkedHashSet0);
    assertEquals(68, propertyOption0.getId());
}",0,"assertEquals(0, propertyOption0.getId())"
project,0,test1840,"public void test1840() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    linkedHashSet0.add(""-D"");
    propertyOption0.checkPrefixes(linkedHashSet0);
    assertFalse(propertyOption0.isRequired());
}",0,assertTrue(propertyOption0.isRequired())
