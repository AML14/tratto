{
  "test1432" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1432() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    Option option0 = propertyOption0.findOption(\"Passes properties and values to the application\");\n    propertyOption0.isRequired();\n}",
    "testName" : "test1432"
  },
  "test1533" : {
    "methodSignature" : "int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1533() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    Option option0 = propertyOption0.findOption(\"-D\");\n    option0.getId();\n}",
    "testName" : "test1533"
  },
  "test1534" : {
    "methodSignature" : "public Option findOption(String trigger)",
    "methodName" : "findOption",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1534() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    Option option0 = propertyOption0.findOption(\"-D\");\n}",
    "testName" : "test1534"
  },
  "test1430" : {
    "methodSignature" : "public Option findOption(String trigger)",
    "methodName" : "findOption",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1430() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    Option option0 = propertyOption0.findOption(\"Passes properties and values to the application\");\n}",
    "testName" : "test1430"
  },
  "test1431" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1431() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    Option option0 = propertyOption0.findOption(\"Passes properties and values to the application\");\n    propertyOption0.getId();\n}",
    "testName" : "test1431"
  },
  "test1737" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1737() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    LinkedHashSet<ArgumentImpl> linkedHashSet0 = new LinkedHashSet<ArgumentImpl>();\n    propertyOption0.checkPrefixes(linkedHashSet0);\n    propertyOption0.getId();\n}",
    "testName" : "test1737"
  },
  "test012" : {
    "methodSignature" : "public String getPreferredName()",
    "methodName" : "getPreferredName",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    PropertyOption propertyOption0 = PropertyOption.INSTANCE;\n    propertyOption0.defaults((WriteableCommandLine) null);\n    propertyOption0.getPreferredName();\n}",
    "testName" : "test012"
  },
  "test1738" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1738() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    LinkedHashSet<ArgumentImpl> linkedHashSet0 = new LinkedHashSet<ArgumentImpl>();\n    propertyOption0.checkPrefixes(linkedHashSet0);\n    propertyOption0.isRequired();\n}",
    "testName" : "test1738"
  },
  "test1839" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1839() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n    linkedHashSet0.add(\"-D\");\n    propertyOption0.checkPrefixes(linkedHashSet0);\n    propertyOption0.getId();\n}",
    "testName" : "test1839"
  },
  "test1535" : {
    "methodSignature" : "boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1535() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    Option option0 = propertyOption0.findOption(\"-D\");\n    option0.isRequired();\n}",
    "testName" : "test1535"
  },
  "test0920" : {
    "methodSignature" : "public boolean equals(final Object thatObj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0920() throws Throwable {\n    PropertyOption propertyOption0 = PropertyOption.INSTANCE;\n    PropertyOption propertyOption1 = new PropertyOption(\"-D\", \"-D\", 68);\n    boolean boolean0 = propertyOption0.equals(propertyOption1);\n}",
    "testName" : "test0920"
  },
  "test0921" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0921() throws Throwable {\n    PropertyOption propertyOption0 = PropertyOption.INSTANCE;\n    PropertyOption propertyOption1 = new PropertyOption(\"-D\", \"-D\", 68);\n    boolean boolean0 = propertyOption0.equals(propertyOption1);\n    propertyOption1.isRequired();\n}",
    "testName" : "test0921"
  },
  "test1636" : {
    "methodSignature" : "protected void checkPrefixes(final Set prefixes)",
    "methodName" : "checkPrefixes",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1636() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    propertyOption0.checkPrefixes(set0);\n}",
    "testName" : "test1636"
  },
  "test048" : {
    "methodSignature" : "public boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments)",
    "methodName" : "canProcess",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048() throws Throwable {\n    PropertyOption propertyOption0 = PropertyOption.INSTANCE;\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n    ListIterator<Integer> listIterator0 = linkedList0.listIterator();\n    boolean boolean0 = propertyOption0.canProcess((WriteableCommandLine) null, listIterator0);\n}",
    "testName" : "test048"
  },
  "test0817" : {
    "methodSignature" : "public boolean equals(final Object thatObj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0817() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);\n    PropertyOption propertyOption1 = new PropertyOption(\"-D\", (String) null, 15);\n    boolean boolean0 = propertyOption1.equals(propertyOption0);\n}",
    "testName" : "test0817"
  },
  "test0818" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0818() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);\n    PropertyOption propertyOption1 = new PropertyOption(\"-D\", (String) null, 15);\n    boolean boolean0 = propertyOption1.equals(propertyOption0);\n    propertyOption1.isRequired();\n}",
    "testName" : "test0818"
  },
  "test024" : {
    "methodSignature" : "public boolean equals(final Object thatObj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);\n    boolean boolean0 = propertyOption0.equals(propertyOption0);\n}",
    "testName" : "test024"
  },
  "test025" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);\n    boolean boolean0 = propertyOption0.equals(propertyOption0);\n    propertyOption0.isRequired();\n}",
    "testName" : "test025"
  },
  "test0919" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0919() throws Throwable {\n    PropertyOption propertyOption0 = PropertyOption.INSTANCE;\n    PropertyOption propertyOption1 = new PropertyOption(\"-D\", \"-D\", 68);\n    boolean boolean0 = propertyOption0.equals(propertyOption1);\n    propertyOption1.getId();\n}",
    "testName" : "test0919"
  },
  "test1125" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1125() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    PropertyOption propertyOption1 = new PropertyOption((String) null, (String) null, 68);\n    boolean boolean0 = propertyOption1.equals(propertyOption0);\n    propertyOption1.getId();\n}",
    "testName" : "test1125"
  },
  "test1840" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1840() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();\n    linkedHashSet0.add(\"-D\");\n    propertyOption0.checkPrefixes(linkedHashSet0);\n    propertyOption0.isRequired();\n}",
    "testName" : "test1840"
  },
  "test1126" : {
    "methodSignature" : "public boolean equals(final Object thatObj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1126() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    PropertyOption propertyOption1 = new PropertyOption((String) null, (String) null, 68);\n    boolean boolean0 = propertyOption1.equals(propertyOption0);\n}",
    "testName" : "test1126"
  },
  "test0610" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0610() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    boolean boolean0 = propertyOption0.equals(\"Passes properties and values to the application\");\n    propertyOption0.isRequired();\n}",
    "testName" : "test0610"
  },
  "test1127" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1127() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    PropertyOption propertyOption1 = new PropertyOption((String) null, (String) null, 68);\n    boolean boolean0 = propertyOption1.equals(propertyOption0);\n    propertyOption1.isRequired();\n}",
    "testName" : "test1127"
  },
  "test1022" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1022() throws Throwable {\n    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();\n    PropertyOption propertyOption0 = new PropertyOption(\"G\", \"G\", 0);\n    GroupImpl groupImpl0 = new GroupImpl(linkedList0, \"G\", \"G\", 0, 0);\n    boolean boolean0 = propertyOption0.equals(groupImpl0);\n    groupImpl0.getId();\n}",
    "testName" : "test1022"
  },
  "test1023" : {
    "methodSignature" : "public boolean equals(final Object thatObj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1023() throws Throwable {\n    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();\n    PropertyOption propertyOption0 = new PropertyOption(\"G\", \"G\", 0);\n    GroupImpl groupImpl0 = new GroupImpl(linkedList0, \"G\", \"G\", 0, 0);\n    boolean boolean0 = propertyOption0.equals(groupImpl0);\n}",
    "testName" : "test1023"
  },
  "test1024" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1024() throws Throwable {\n    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();\n    PropertyOption propertyOption0 = new PropertyOption(\"G\", \"G\", 0);\n    GroupImpl groupImpl0 = new GroupImpl(linkedList0, \"G\", \"G\", 0, 0);\n    boolean boolean0 = propertyOption0.equals(groupImpl0);\n    propertyOption0.isRequired();\n}",
    "testName" : "test1024"
  },
  "test000" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    linkedList0.add((Object) propertyOption0);\n    GroupImpl groupImpl0 = new GroupImpl(linkedList0, \"-D\", \"-D\", (-1), (-1));\n    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);\n    groupImpl0.validate(writeableCommandLineImpl0);\n    propertyOption0.getId();\n}",
    "testName" : "test000"
  },
  "test0714" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0714() throws Throwable {\n    PropertyOption propertyOption0 = PropertyOption.INSTANCE;\n    PropertyOption propertyOption1 = new PropertyOption(\"Passes properties and values to the application\", \"Passes properties and values to the application\", 404);\n    boolean boolean0 = propertyOption0.equals(propertyOption1);\n    propertyOption1.isRequired();\n}",
    "testName" : "test0714"
  },
  "test001" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    LinkedList<Object> linkedList0 = new LinkedList<Object>();\n    linkedList0.add((Object) propertyOption0);\n    GroupImpl groupImpl0 = new GroupImpl(linkedList0, \"-D\", \"-D\", (-1), (-1));\n    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);\n    groupImpl0.validate(writeableCommandLineImpl0);\n    propertyOption0.isRequired();\n}",
    "testName" : "test001"
  },
  "test023" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);\n    boolean boolean0 = propertyOption0.equals(propertyOption0);\n    propertyOption0.getId();\n}",
    "testName" : "test023"
  },
  "test0715" : {
    "methodSignature" : "public boolean equals(final Object thatObj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0715() throws Throwable {\n    PropertyOption propertyOption0 = PropertyOption.INSTANCE;\n    PropertyOption propertyOption1 = new PropertyOption(\"Passes properties and values to the application\", \"Passes properties and values to the application\", 404);\n    boolean boolean0 = propertyOption0.equals(propertyOption1);\n}",
    "testName" : "test0715"
  },
  "test0816" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0816() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption((String) null, (String) null, 15);\n    PropertyOption propertyOption1 = new PropertyOption(\"-D\", (String) null, 15);\n    boolean boolean0 = propertyOption1.equals(propertyOption0);\n    propertyOption1.getId();\n}",
    "testName" : "test0816"
  },
  "test0611" : {
    "methodSignature" : "public boolean equals(final Object thatObj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0611() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    boolean boolean0 = propertyOption0.equals(\"Passes properties and values to the application\");\n}",
    "testName" : "test0611"
  },
  "test0612" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0612() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    boolean boolean0 = propertyOption0.equals(\"Passes properties and values to the application\");\n    propertyOption0.getId();\n}",
    "testName" : "test0612"
  },
  "test1228" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1228() throws Throwable {\n    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();\n    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 1116, 1116);\n    groupImpl0.hashCode();\n    groupImpl0.getId();\n}",
    "testName" : "test1228"
  },
  "test0713" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0713() throws Throwable {\n    PropertyOption propertyOption0 = PropertyOption.INSTANCE;\n    PropertyOption propertyOption1 = new PropertyOption(\"Passes properties and values to the application\", \"Passes properties and values to the application\", 404);\n    boolean boolean0 = propertyOption0.equals(propertyOption1);\n    propertyOption1.getId();\n}",
    "testName" : "test0713"
  },
  "test1329" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1329() throws Throwable {\n    PropertyOption propertyOption0 = PropertyOption.INSTANCE;\n    propertyOption0.hashCode();\n    propertyOption0.getId();\n}",
    "testName" : "test1329"
  },
  "test037" : {
    "methodSignature" : "public int getId()",
    "methodName" : "getId",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    propertyOption0.toString();\n    propertyOption0.getId();\n}",
    "testName" : "test037"
  },
  "test059" : {
    "methodSignature" : "public boolean canProcess(final WriteableCommandLine commandLine, final ListIterator arguments)",
    "methodName" : "canProcess",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059() throws Throwable {\n    PropertyOption propertyOption0 = PropertyOption.INSTANCE;\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n    Integer integer0 = new Integer(60);\n    linkedList0.add(integer0);\n    ListIterator<Integer> listIterator0 = linkedList0.listIterator();\n    propertyOption0.canProcess((WriteableCommandLine) null, listIterator0);\n}",
    "testName" : "test059"
  },
  "test036" : {
    "methodSignature" : "public boolean isRequired()",
    "methodName" : "isRequired",
    "className" : "org.apache.commons.cli2.option.OptionImpl",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036() throws Throwable {\n    PropertyOption propertyOption0 = new PropertyOption();\n    propertyOption0.toString();\n    propertyOption0.isRequired();\n}",
    "testName" : "test036"
  }
}