project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 60, 60);
    groupImpl0.getAnonymous();
    assertEquals(60, groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test001,"public void test001() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 60, 60);
    groupImpl0.getAnonymous();
    assertEquals(60, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test012,"public void test012() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""6fH~_%MC"", ""6fH~_%MC"", 3, 3);
    int int0 = groupImpl0.getMaximum();
    assertEquals(3, int0);
}",0,
project,0,test013,"public void test013() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""6fH~_%MC"", ""6fH~_%MC"", 3, 3);
    int int0 = groupImpl0.getMaximum();
    assertEquals(3, groupImpl0.getMinimum());
}",0,
project,0,test025,"public void test025() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", 0, 0);
    groupImpl0.findOption(""Passes properties and values to the application"");
    assertEquals(0, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test037,"public void test037() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    UrlValidator urlValidator0 = new UrlValidator("""");
    ArgumentImpl argumentImpl0 = new ArgumentImpl("""", """", 217, 217, '~', '~', urlValidator0, (String) null, linkedList0, '~');
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    linkedList0.add((Object) sourceDestArgument0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""EZfj7W|"", ""--"", 217, '\u0000');
    groupImpl0.toString();
    assertEquals(0, groupImpl0.getMaximum());
}",0,
project,0,test048,"public void test048() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""org.apache.commons.cli2.option.SourceDestArgument"", ""org.apache.commons.cli2.option.SourceDestArgument"", 0, 0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    assertEquals(0, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test049,"public void test049() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""org.apache.commons.cli2.option.SourceDestArgument"", ""org.apache.commons.cli2.option.SourceDestArgument"", 0, 0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    assertEquals(0, groupImpl0.getMaximum());
}",0,
project,0,test0410,"public void test0410() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""org.apache.commons.cli2.option.SourceDestArgument"", ""org.apache.commons.cli2.option.SourceDestArgument"", 0, 0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, (String) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0512,"public void test0512() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", ""-D"", (-784), (-784));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0614,"public void test0614() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""w71WR"", ""w71WR"", 0, 0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""w71WR"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0716,"public void test0716() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption("""", """", 2676);
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", (-1968), (-1968));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0817,"public void test0817() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", (String) null, (-283), (-283));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertEquals((-283), groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test0818,"public void test0818() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", (String) null, (-283), (-283));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0819,"public void test0819() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", (String) null, (-283), (-283));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""-D"");
    assertEquals((-283), groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test0921,"public void test0921() throws Throwable {
    LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""x:zZJ-"", ""x:zZJ-"", 61, 61, '7', '7', fileValidator0, ""x:zZJ-"", linkedList0, 61);
    LinkedList<DefaultOption> linkedList1 = new LinkedList<DefaultOption>();
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'j', 'j', ""--"", linkedList1);
    linkedList0.add(sourceDestArgument0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""\""1ez(U #n_t"", ""\""1ez(U #n_t"", '7', '7');
    LinkedList<GroupImpl> linkedList2 = new LinkedList<GroupImpl>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList2);
    boolean boolean0 = groupImpl0.canProcess((WriteableCommandLine) writeableCommandLineImpl0, ""--"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1022,"public void test1022() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""DISPLAY_GRUP_OUT/ER"", ""DISPLAY_GRUP_OUT/ER"", 0, 0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    ListIterator<GroupImpl> listIterator0 = linkedList0.listIterator();
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(0, groupImpl0.getMaximum());
}",0,
project,0,test1023,"public void test1023() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""DISPLAY_GRUP_OUT/ER"", ""DISPLAY_GRUP_OUT/ER"", 0, 0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    ListIterator<GroupImpl> listIterator0 = linkedList0.listIterator();
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(0, groupImpl0.getMinimum());
}",0,"assertEquals(1, groupImpl0.getMinimum())"
project,0,test1124,"public void test1124() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""-D"", (-2163), (-2163));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    LinkedList<String> linkedList1 = new LinkedList<String>(set0);
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(""Passes properties and values to the application"", groupImpl0.getPreferredName());
}",0,assertNotNull(groupImpl0.getPreferredName())
project,0,test1125,"public void test1125() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""-D"", (-2163), (-2163));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    LinkedList<String> linkedList1 = new LinkedList<String>(set0);
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals((-2163), groupImpl0.getMinimum());
}",0,"assertEquals(1, groupImpl0.getMinimum())"
project,0,test1126,"public void test1126() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""-D"", (-2163), (-2163));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    LinkedList<String> linkedList1 = new LinkedList<String>(set0);
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals((-2163), groupImpl0.getMaximum());
}",0,
project,0,test1127,"public void test1127() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""-D"", (-2163), (-2163));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    LinkedList<String> linkedList1 = new LinkedList<String>(set0);
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(""-D"", groupImpl0.getDescription());
}",0,assertNotNull(groupImpl0.getDescription())
project,0,test1229,"public void test1229() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption("""", """", 2676);
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", ""-D"", 2676, 2676);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
    doReturn(true, false).when(listIterator0).hasNext();
    doReturn(""Passes properties and values to the application"", (Object) null, (Object) null).when(listIterator0).next();
    doReturn((Object) null, (Object) null).when(listIterator0).previous();
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals(2676, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test1330,"public void test1330() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.add(propertyOption0);
    PropertyOption propertyOption1 = new PropertyOption("""", """", 2676);
    linkedList0.add(propertyOption1);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", ""-D"", 2676, 2676);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    ListIterator<String> listIterator0 = (ListIterator<String>) mock(ListIterator.class, new ViolatedAssumptionAnswer());
    doReturn(true, false).when(listIterator0).hasNext();
    doReturn(""Passes properties and values to the application"", (Object) null, (Object) null).when(listIterator0).next();
    doReturn(""-D"", (Object) null).when(listIterator0).previous();
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
}",1,
project,0,test1431,"public void test1431() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", (-2343), (-2343));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    LinkedList<String> linkedList1 = new LinkedList<String>();
    linkedList1.add(""-D"");
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals((-2343), groupImpl0.getMaximum());
}",0,
project,0,test1433,"public void test1433() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Passes properties and values to the application"", ""Passes properties and values to the application"", (-2343), (-2343));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    LinkedList<String> linkedList1 = new LinkedList<String>();
    linkedList1.add(""-D"");
    ListIterator<String> listIterator0 = linkedList1.listIterator();
    groupImpl0.process(writeableCommandLineImpl0, listIterator0);
    assertEquals((-2343), groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test1534,"public void test1534() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 45, 45);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    try {
        groupImpl0.validate(writeableCommandLineImpl0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing option
        //
        verifyException(""org.apache.commons.cli2.option.GroupImpl"", e);
    }
}",1,
project,0,test1635,"public void test1635() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 60, 60);
    linkedList0.add(groupImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    // Undeclared exception!
    try {
        groupImpl0.validate(writeableCommandLineImpl0);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
    }
}",1,
project,0,test1736,"public void test1736() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.offerLast(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""eAP^/,L}F1laI:"", ""eAP^/,L}F1laI:"", 0, 0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.validate(writeableCommandLineImpl0);
    assertEquals(0, groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test1737,"public void test1737() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption();
    linkedList0.offerLast(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""eAP^/,L}F1laI:"", ""eAP^/,L}F1laI:"", 0, 0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    groupImpl0.validate(writeableCommandLineImpl0);
    assertEquals(0, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test1838,"public void test1838() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""3S-TqUp'"", ""3S-TqUp'"", (-386), (-386));
    linkedList0.add(groupImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    writeableCommandLineImpl0.addOption(groupImpl0);
    GroupImpl groupImpl1 = new GroupImpl(linkedList0, ""3S-TqUp'"", ""3S-TqUp'"", 3, 3);
    try {
        groupImpl1.validate(writeableCommandLineImpl0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unexpected 3S-TqUp' while processing 3S-TqUp'
        //
        verifyException(""org.apache.commons.cli2.option.GroupImpl"", e);
    }
}",1,
project,0,test1939,"public void test1939() throws Throwable {
    LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
    NumberValidator numberValidator0 = NumberValidator.getNumberInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""so"", ""so"", (-1), (-1), 'f', 'f', numberValidator0, ""cdl/0m\""T4T}e|y)x0"", linkedList0, (-1));
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0);
    linkedList0.add(sourceDestArgument0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""@U"", ""|"", (-1), (-1));
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    // Undeclared exception!
    try {
        groupImpl0.validate(writeableCommandLineImpl0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$EmptyIterator"", e);
    }
}",1,
project,0,test2040,"public void test2040() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, 0);
    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
    Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
    assertEquals(0, groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test2041,"public void test2041() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, (String) null, (String) null, 0, 0);
    LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
    Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    groupImpl0.appendUsage((StringBuffer) null, (Set) linkedHashSet0, (Comparator) comparator0, (String) null);
    assertEquals(0, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test2142,"public void test2142() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.offerLast(propertyOption0);
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Ix"", ""Ix"", 0, 0);
    String string0 = groupImpl0.toString();
    assertEquals(0, groupImpl0.getMaximum());
}",0,"assertEquals(0, groupImpl0.getMaximum())"
project,0,test2143,"public void test2143() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    linkedList0.offerLast(propertyOption0);
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""Ix"", ""Ix"", 0, 0);
    String string0 = groupImpl0.toString();
    assertEquals(""[Ix (-D<property>=<value>|-D<property>=<value>)]"", string0);
}",0,assertNotNull(string0)
project,0,test2244,"public void test2244() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""org.apache.commons.cli2.option.SourceDestArgument"", ""org.apache.commons.cli2.option.SourceDestArgument"", 0, 0);
    LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
    List list0 = groupImpl0.helpLines(0, linkedHashSet0, (Comparator) null);
    assertEquals(0, groupImpl0.getMaximum());
}",0,"assertEquals(1, groupImpl0.getMaximum())"
project,0,test2246,"public void test2246() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""org.apache.commons.cli2.option.SourceDestArgument"", ""org.apache.commons.cli2.option.SourceDestArgument"", 0, 0);
    LinkedHashSet<GroupImpl> linkedHashSet0 = new LinkedHashSet<GroupImpl>();
    List list0 = groupImpl0.helpLines(0, linkedHashSet0, (Comparator) null);
    assertEquals(0, groupImpl0.getMinimum());
}",0,
project,0,test2348,"public void test2348() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""DIS9LAY_ARxUMENT_BRACKETED"", ""DIS9LAY_ARxUMENT_BRACKETED"", 2865, 2865);
    List list0 = groupImpl0.helpLines(2865, displaySetting0.ALL, (Comparator) null);
    assertEquals(2865, groupImpl0.getMaximum());
}",0,
project,0,test2349,"public void test2349() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""DIS9LAY_ARxUMENT_BRACKETED"", ""DIS9LAY_ARxUMENT_BRACKETED"", 2865, 2865);
    List list0 = groupImpl0.helpLines(2865, displaySetting0.ALL, (Comparator) null);
    assertEquals(2865, groupImpl0.getMinimum());
}",0,
project,0,test2450,"public void test2450() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 1325, 1325);
    List list0 = groupImpl0.helpLines(1325, displaySetting0.ALL, comparator0);
    assertEquals(1325, groupImpl0.getMaximum());
}",0,
project,0,test2451,"public void test2451() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    Comparator<Command> comparator0 = (Comparator<Command>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, """", """", 1325, 1325);
    List list0 = groupImpl0.helpLines(1325, displaySetting0.ALL, comparator0);
    assertEquals(1325, groupImpl0.getMinimum());
}",0,
project,0,test2553,"public void test2553() throws Throwable {
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    DisplaySetting displaySetting0 = mock(DisplaySetting.class, new ViolatedAssumptionAnswer());
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""\""p"", ""\""p"", (-1929), (-1929));
    Integer integer0 = new Integer((-1929));
    linkedList0.add(integer0);
    Comparator<GroupImpl> comparator0 = (Comparator<GroupImpl>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    // Undeclared exception!
    try {
        groupImpl0.helpLines((-1929), displaySetting0.ALL, comparator0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Integer cannot be cast to org.apache.commons.cli2.Option
        //
        verifyException(""org.apache.commons.cli2.option.GroupImpl"", e);
    }
}",0,
project,0,test2654,"public void test2654() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption("""", """", 2676);
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", 2676, 2676);
    Option option0 = groupImpl0.findOption("""");
    assertNotNull(option0);
}",0,assertNotNull(option0)
project,0,test2655,"public void test2655() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption("""", """", 2676);
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", 2676, 2676);
    Option option0 = groupImpl0.findOption("""");
    assertEquals(2676, groupImpl0.getMinimum());
}",0,"assertEquals(0, groupImpl0.getMinimum())"
project,0,test2656,"public void test2656() throws Throwable {
    LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
    PropertyOption propertyOption0 = new PropertyOption("""", """", 2676);
    linkedList0.add(propertyOption0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""-D"", ""-D"", 2676, 2676);
    Option option0 = groupImpl0.findOption("""");
    assertEquals(2676, groupImpl0.getMaximum());
}",0,
project,0,test2757,"public void test2757() throws Throwable {
    LinkedList<GroupImpl> linkedList0 = new LinkedList<GroupImpl>();
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""6fH~_%MC"", ""6fH~_%MC"", 3, 3);
    linkedList0.offer(groupImpl0);
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(groupImpl0, linkedList0);
    // Undeclared exception!
    try {
        groupImpl0.defaults(writeableCommandLineImpl0);
        fail(""Expecting exception: StackOverflowError"");
    } catch (StackOverflowError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test2859,"public void test2859() throws Throwable {
    LinkedList<SourceDestArgument> linkedList0 = new LinkedList<SourceDestArgument>();
    FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""x:zZJ-"", ""x:zZJ-"", 61, 61, '7', 'G', fileValidator0, ""joE%RX$7"", linkedList0, 61);
    LinkedList<DefaultOption> linkedList1 = new LinkedList<DefaultOption>();
    SourceDestArgument sourceDestArgument0 = new SourceDestArgument(argumentImpl0, argumentImpl0, 'j', 'j', ""--"", linkedList1);
    linkedList0.add(sourceDestArgument0);
    GroupImpl groupImpl0 = new GroupImpl(linkedList0, ""\""1ez(U #n_t"", ""\""1ez(U #n_t"", '\u0000', '\u0000');
    LinkedList<GroupImpl> linkedList2 = new LinkedList<GroupImpl>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(sourceDestArgument0, linkedList2);
    groupImpl0.defaults(writeableCommandLineImpl0);
    assertEquals(0, groupImpl0.getMaximum());
}",0,
