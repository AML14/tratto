focal_method,test_prefix,docstring
"public int getWidth() {
    return defaultWidth;
}","public void test000() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(74, int0);
}","/**
 * Returns the 'width'.
 *
 * @return the 'width'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test001() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test003() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test005() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test006() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test007() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void setLongOptPrefix(String prefix) {
    this.defaultLongOptPrefix = prefix;
}","public void test018() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Sets the 'longOptPrefix'.
 *
 * @param prefix the new value of 'longOptPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test019() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0111() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test0112() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0114() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0115() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test0216() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public int getDescPadding() {
    return defaultDescPad;
}","public void test0217() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(3, int0);
}","/**
 * Returns the 'descPadding'.
 *
 * @return the 'descPadding'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0218() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0220() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0221() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0223() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0324() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptSeparator(""arg"");
    assertEquals(""arg"", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getNewLine() {
    return defaultNewLine;
}","public void test0425() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setNewLine(""-"");
    assertEquals(""-"", helpFormatter0.getNewLine());
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public void setLeftPadding(int padding) {
    this.defaultLeftPad = padding;
}","public void test0526() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(3);
    assertEquals(3, helpFormatter0.defaultLeftPad);
}","/**
 * Sets the 'leftPadding'.
 *
 * @param padding the new value of 'leftPadding'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0627() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""-"");
    assertEquals(""-"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0728() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix("" "");
    assertEquals("" "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void printHelp(String cmdLineSyntax, Options options) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);
}","public void test0829() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""--"", options0);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0830() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""--"", options0);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0931() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test0933() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0935() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0936() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0938() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void setWidth(int width) {
    this.defaultWidth = width;
}","public void test1039() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(1);
    assertEquals(1, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'width'.
 *
 * @param width the new value of 'width'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1140() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1141() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1142() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void setOptPrefix(String prefix) {
    this.defaultOptPrefix = prefix;
}","public void test1143() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Sets the 'optPrefix'.
 *
 * @param prefix the new value of 'optPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1145() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1146() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1248() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public int getLeftPadding() {
    return defaultLeftPad;
}","public void test1249() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(1, int0);
}","/**
 * Returns the 'leftPadding'.
 *
 * @return the 'leftPadding'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1250() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1251() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1253() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1254() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {
    printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
}","public void test1356() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""usage: "");
    helpFormatter0.printHelp((PrintWriter) mockPrintWriter0, 2577, ""--"", ""arg"", options0, 2577, 2577, ""\n"");
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.
 *
 * @param pw the writer to which the help will be written
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param leftPad the number of characters of padding to be prefixed
 * to each line
 * @param descPad the number of characters of padding to be prefixed
 * to each description line
 * @param footer the banner to display at the end of the help
 *
 * @throws IllegalStateException if there is no room to print a line
 */"
"public void setDescPadding(int padding) {
    this.defaultDescPad = padding;
}","public void test1459() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setDescPadding(1);
    assertEquals(1, helpFormatter0.defaultDescPad);
}","/**
 * Sets the 'descPadding'.
 *
 * @param padding the new value of 'descPadding'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(cmdLineSyntax, header, options, footer, false);
}","public void test1560() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""arg"", ""arg"", options0, ""arg"");
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public String getNewLine() {
    return defaultNewLine;
}","public void test1661() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1662() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1663() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1666() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1668() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1669() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1770() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""--"", options0, true);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
}","public void test1771() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""--"", options0, true);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1872() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""--"", string0);
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1873() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1874() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1878() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1879() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1980() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1981() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1982() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1983() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1985() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test2088() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test2090() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test2092() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test2093() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test2095() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"// --------------------------------------------------------------- Protected
/**
 * Render the specified Options and return the rendered Options
 * in a StringBuffer.
 *
 * @param sb The StringBuffer to place the rendered Options into.
 * @param width The number of characters to display per line
 * @param options The command line Options
 * @param leftPad the number of characters of padding to be prefixed
 * to each line
 * @param descPad the number of characters of padding to be prefixed
 * to each description line
 *
 * @return the StringBuffer with the rendered Options contents.
 */
protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {
    final String lpad = createPadding(leftPad);
    final String dpad = createPadding(descPad);
    // first create list containing only <lpad>-a,--aaa where
    // -a is opt and --aaa is long opt; in parallel look for
    // the longest opt string this list will be then used to
    // sort options ascending
    int max = 0;
    StringBuffer optBuf;
    List prefixList = new ArrayList();
    List optList = options.helpOptions();
    Collections.sort(optList, getOptionComparator());
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        Option option = (Option) i.next();
        optBuf = new StringBuffer();
        if (option.getOpt() == null) {
            optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
        } else {
            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());
            if (option.hasLongOpt()) {
                optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
            }
        }
        if (option.hasArg()) {
            String argName = option.getArgName();
            if (argName != null && argName.length() == 0) {
                // if the option has a blank argname
                optBuf.append(' ');
            } else {
                optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
            }
        }
        prefixList.add(optBuf);
        max = (optBuf.length() > max) ? optBuf.length() : max;
    }
    int x = 0;
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        Option option = (Option) i.next();
        optBuf = new StringBuffer(prefixList.get(x++).toString());
        if (optBuf.length() < max) {
            optBuf.append(createPadding(max - optBuf.length()));
        }
        optBuf.append(dpad);
        int nextLineTabStop = max + descPad;
        if (option.getDescription() != null) {
            optBuf.append(option.getDescription());
        }
        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());
        if (i.hasNext()) {
            sb.append(defaultNewLine);
        }
    }
    return sb;
}","public void test2196() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    options0.addOption(""iR1uAxi"", "" "", true, ""--"");
    Options options1 = options0.addOption(""R"", true, ""-"");
    // Undeclared exception!
    try {
        helpFormatter0.renderOptions((StringBuffer) null, 1, options1, 3, 3);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}",""
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test2297() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test2298() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test2299() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Set the comparator used to sort the options when they output in help text.
 * Passing in a null parameter will set the ordering to the default mode.
 *
 * @since 1.2
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test22101() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test22102() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test22104() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test23105() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Set the comparator used to sort the options when they output in help text.
 * Passing in a null parameter will set the ordering to the default mode.
 *
 * @since 1.2
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test23106() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test23107() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test23108() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test23110() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test23111() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test24113() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(1, (String) null, (String) null, options0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the beginning of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test25114() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(1, """", """", options0, """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the beginning of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test26115() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(24, ""[ option:  arg  [ARG] :: \n ]"", """", options0, "" "");
    assertEquals(3, HelpFormatter.DEFAULT_DESC_PAD);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the beginning of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    PrintWriter pw = new PrintWriter(System.out);
    printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);
    pw.flush();
}","public void test27116() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption((String) null, true, ""arg"");
    // Undeclared exception!
    helpFormatter0.printHelp(1, ""usage: "", ""usage: "", options1, (String) null, true);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test28117() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""arg"", ""--"", true, ""arg"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Option option1 = new Option((String) null, "" "", true, """");
    optionGroup1.addOption(option1);
    Options options1 = options0.addOptionGroup(optionGroup1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""arg"");
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 6575, ""--"", options1);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test29118() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""arg"", true, ""\n"");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    optionGroup0.setRequired(true);
    Options options1 = options0.addOptionGroup(optionGroup1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""arg"");
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, ""line.separator"", options1);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test29119() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""arg"", true, ""\n"");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    optionGroup0.setRequired(true);
    Options options1 = options0.addOptionGroup(optionGroup1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""arg"");
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, ""line.separator"", options1);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test30120() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""arg"", false, ""\n"");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""\n"");
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, ""--"", options1);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void printUsage(PrintWriter pw, int width, String app, Options options) {
    // initialise the string buffer
    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");
    // create a list for processed option groups
    final Collection processedGroups = new ArrayList();
    // temp variable
    Option option;
    List optList = new ArrayList(options.getOptions());
    Collections.sort(optList, getOptionComparator());
    // iterate over the options
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        // get the next Option
        option = (Option) i.next();
        // check if the option is part of an OptionGroup
        OptionGroup group = options.getOptionGroup(option);
        // if the option is part of a group
        if (group != null) {
            // and if the group has not already been processed
            if (!processedGroups.contains(group)) {
                // add the group to the processed list
                processedGroups.add(group);
                // add the usage clause
                appendOptionGroup(buff, group);
            }
            // otherwise the option was displayed in the group
            // previously so ignore it.
        } else // if the Option is not part of an OptionGroup
        {
            appendOption(buff, option, option.isRequired());
        }
        if (i.hasNext()) {
            buff.append("" "");
        }
    }
    // call printWrapped
    printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
}","public void test30121() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""arg"", false, ""\n"");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""\n"");
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, ""--"", options1);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Prints the usage statement for the specified application.
 *
 * @param pw The PrintWriter to print the usage statement
 * @param width The number of characters to display per line
 * @param app The application name
 * @param options The command line Options
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test30123() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""arg"", false, ""\n"");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""\n"");
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, ""--"", options1);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void printUsage(PrintWriter pw, int width, String app, Options options) {
    // initialise the string buffer
    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");
    // create a list for processed option groups
    final Collection processedGroups = new ArrayList();
    // temp variable
    Option option;
    List optList = new ArrayList(options.getOptions());
    Collections.sort(optList, getOptionComparator());
    // iterate over the options
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        // get the next Option
        option = (Option) i.next();
        // check if the option is part of an OptionGroup
        OptionGroup group = options.getOptionGroup(option);
        // if the option is part of a group
        if (group != null) {
            // and if the group has not already been processed
            if (!processedGroups.contains(group)) {
                // add the group to the processed list
                processedGroups.add(group);
                // add the usage clause
                appendOptionGroup(buff, group);
            }
            // otherwise the option was displayed in the group
            // previously so ignore it.
        } else // if the Option is not part of an OptionGroup
        {
            appendOption(buff, option, option.isRequired());
        }
        if (i.hasNext()) {
            buff.append("" "");
        }
    }
    // call printWrapped
    printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
}","public void test31124() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""[amb:alH(Shr"", true, "" :: "");
    option0.setArgName("""");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""usage: "");
    // Undeclared exception!
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 1, ""[amb:alH(Shr"", options1);
}","/**
 * Prints the usage statement for the specified application.
 *
 * @param pw The PrintWriter to print the usage statement
 * @param width The number of characters to display per line
 * @param app The application name
 * @param options The command line Options
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test32125() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""arg"", true, ""\n"");
    option0.setArgName("" "");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""arg"");
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, ""line.separator"", options1);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void printUsage(PrintWriter pw, int width, String app, Options options) {
    // initialise the string buffer
    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");
    // create a list for processed option groups
    final Collection processedGroups = new ArrayList();
    // temp variable
    Option option;
    List optList = new ArrayList(options.getOptions());
    Collections.sort(optList, getOptionComparator());
    // iterate over the options
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        // get the next Option
        option = (Option) i.next();
        // check if the option is part of an OptionGroup
        OptionGroup group = options.getOptionGroup(option);
        // if the option is part of a group
        if (group != null) {
            // and if the group has not already been processed
            if (!processedGroups.contains(group)) {
                // add the group to the processed list
                processedGroups.add(group);
                // add the usage clause
                appendOptionGroup(buff, group);
            }
            // otherwise the option was displayed in the group
            // previously so ignore it.
        } else // if the Option is not part of an OptionGroup
        {
            appendOption(buff, option, option.isRequired());
        }
        if (i.hasNext()) {
            buff.append("" "");
        }
    }
    // call printWrapped
    printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
}","public void test32126() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""arg"", true, ""\n"");
    option0.setArgName("" "");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""arg"");
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, ""line.separator"", options1);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Prints the usage statement for the specified application.
 *
 * @param pw The PrintWriter to print the usage statement
 * @param width The number of characters to display per line
 * @param app The application name
 * @param options The command line Options
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test32128() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option(""arg"", ""arg"", true, ""\n"");
    option0.setArgName("" "");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""arg"");
    helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 74, ""line.separator"", options1);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test33130() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    options0.addOption((String) null, ""arg"", true, ""arg"");
    helpFormatter0.printHelp(3, ""arg"", ""arg"", options0, ""arg"");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test33131() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    options0.addOption((String) null, ""arg"", true, ""arg"");
    helpFormatter0.printHelp(3, ""arg"", ""arg"", options0, ""arg"");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test34132() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", ""arg"", true, ""\n"");
    option0.setArgName("" "");
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(74, ""[ option:  arg  [ARG] :: \n ]"", ""[ option:  arg  [ARG] :: \n ]"", options1, ""[ option:  arg  [ARG] :: \n ]"");
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the beginning of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test34133() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", ""arg"", true, ""\n"");
    option0.setArgName("" "");
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(74, ""[ option:  arg  [ARG] :: \n ]"", ""[ option:  arg  [ARG] :: \n ]"", options1, ""[ option:  arg  [ARG] :: \n ]"");
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test35134() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", ""usage: "", true, ""--"");
    option0.setArgName("""");
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(393, ""--"", """", options1, """");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test35135() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", ""usage: "", true, ""--"");
    option0.setArgName("""");
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(393, ""--"", """", options1, """");
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test35136() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Option option0 = new Option("""", ""usage: "", true, ""--"");
    option0.setArgName("""");
    Options options1 = options0.addOption(option0);
    helpFormatter0.printHelp(393, ""--"", """", options1, """");
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the beginning of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test37138() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    options0.addOption(""arg"", false, (String) null);
    helpFormatter0.printHelp(3, ""arg"", "" "", options0, ""--"");
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the beginning of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test38139() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    options0.addOption(""arg"", false, ""--"");
    options0.addOption("""", false, ""-"");
    helpFormatter0.printHelp(3, ""arg"", ""L!2}Y/?r-pkLY"", options0, ""--"");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test39140() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    helpFormatter0.printHelp(0, ""--"", ""--"", options0, ""--"");
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the beginning of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test40141() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"protected String rtrim(String s) {
    if ((s == null) || (s.length() == 0)) {
        return s;
    }
    int pos = s.length();
    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {
        --pos;
    }
    return s.substring(0, pos);
}","public void test40142() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Remove the trailing whitespace from the specified String.
 *
 * @param s The String to remove the trailing padding from.
 *
 * @return The String of without the trailing padding
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test40143() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test40144() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test40145() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test40149() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
