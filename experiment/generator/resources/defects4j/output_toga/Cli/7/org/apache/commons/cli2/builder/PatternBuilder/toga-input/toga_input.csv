focal_method,test_prefix,docstring
"String getPreferredName();","public void test000() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern(""_"");
    Option option0 = patternBuilder0.create();
    assertEquals(""-_"", option0.getPreferredName());
}","/**
 * The preferred name of an option is used for generating help and usage
 * information.
 *
 * @return The preferred name of the option
 */"
"boolean isRequired();","public void test001() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern(""_"");
    Option option0 = patternBuilder0.create();
    assertFalse(option0.isRequired());
}","/**
 * Indicates whether this option is required to be present.
 * @return true iff the CommandLine will be invalid without this Option
 */"
"public int getMinimum() {
    return minimum;
}","public void test012() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern(""u+B54O&?sj$}"");
    GroupImpl groupImpl0 = (GroupImpl) patternBuilder0.create();
    assertEquals(0, groupImpl0.getMinimum());
}",""
"public void withPattern(final String pattern) {
    int sz = pattern.length();
    char opt = ' ';
    char ch = ' ';
    char type = ' ';
    boolean required = false;
    for (int i = 0; i < sz; i++) {
        ch = pattern.charAt(i);
        switch(ch) {
            case '!':
                required = true;
                break;
            case '@':
            case ':':
            case '%':
            case '+':
            case '#':
            case '<':
            case '>':
            case '*':
            case '/':
                type = ch;
                break;
            default:
                if (opt != ' ') {
                    createOption(type, required, opt);
                    required = false;
                    type = ' ';
                }
                opt = ch;
        }
    }
    if (opt != ' ') {
        createOption(type, required, opt);
    }
}","public void test023() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern(""zy^?*!BxLN+>^&S\""@"");
}","/**
 * Builds an Option using a pattern string.
 * @param pattern the pattern to build from
 */"
"public void withPattern(final String pattern) {
    int sz = pattern.length();
    char opt = ' ';
    char ch = ' ';
    char type = ' ';
    boolean required = false;
    for (int i = 0; i < sz; i++) {
        ch = pattern.charAt(i);
        switch(ch) {
            case '!':
                required = true;
                break;
            case '@':
            case ':':
            case '%':
            case '+':
            case '#':
            case '<':
            case '>':
            case '*':
            case '/':
                type = ch;
                break;
            default:
                if (opt != ' ') {
                    createOption(type, required, opt);
                    required = false;
                    type = ' ';
                }
                opt = ch;
        }
    }
    if (opt != ' ') {
        createOption(type, required, opt);
    }
}","public void test034() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern(""@kp+)3l#w"");
}","/**
 * Builds an Option using a pattern string.
 * @param pattern the pattern to build from
 */"
"public void withPattern(final String pattern) {
    int sz = pattern.length();
    char opt = ' ';
    char ch = ' ';
    char type = ' ';
    boolean required = false;
    for (int i = 0; i < sz; i++) {
        ch = pattern.charAt(i);
        switch(ch) {
            case '!':
                required = true;
                break;
            case '@':
            case ':':
            case '%':
            case '+':
            case '#':
            case '<':
            case '>':
            case '*':
            case '/':
                type = ch;
                break;
            default:
                if (opt != ' ') {
                    createOption(type, required, opt);
                    required = false;
                    type = ' ';
                }
                opt = ch;
        }
    }
    if (opt != ' ') {
        createOption(type, required, opt);
    }
}","public void test045() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern(""-cW9xb-)%'HS`eL/"");
}","/**
 * Builds an Option using a pattern string.
 * @param pattern the pattern to build from
 */"
"public void withPattern(final String pattern) {
    int sz = pattern.length();
    char opt = ' ';
    char ch = ' ';
    char type = ' ';
    boolean required = false;
    for (int i = 0; i < sz; i++) {
        ch = pattern.charAt(i);
        switch(ch) {
            case '!':
                required = true;
                break;
            case '@':
            case ':':
            case '%':
            case '+':
            case '#':
            case '<':
            case '>':
            case '*':
            case '/':
                type = ch;
                break;
            default:
                if (opt != ' ') {
                    createOption(type, required, opt);
                    required = false;
                    type = ' ';
                }
                opt = ch;
        }
    }
    if (opt != ' ') {
        createOption(type, required, opt);
    }
}","public void test056() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern(""T\""|0KFIn/-2("");
}","/**
 * Builds an Option using a pattern string.
 * @param pattern the pattern to build from
 */"
"public void withPattern(final String pattern) {
    int sz = pattern.length();
    char opt = ' ';
    char ch = ' ';
    char type = ' ';
    boolean required = false;
    for (int i = 0; i < sz; i++) {
        ch = pattern.charAt(i);
        switch(ch) {
            case '!':
                required = true;
                break;
            case '@':
            case ':':
            case '%':
            case '+':
            case '#':
            case '<':
            case '>':
            case '*':
            case '/':
                type = ch;
                break;
            default:
                if (opt != ' ') {
                    createOption(type, required, opt);
                    required = false;
                    type = ' ';
                }
                opt = ch;
        }
    }
    if (opt != ' ') {
        createOption(type, required, opt);
    }
}","public void test067() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern(""tT;(< ,vN9~{TwrG"");
}","/**
 * Builds an Option using a pattern string.
 * @param pattern the pattern to build from
 */"
"public void withPattern(final String pattern) {
    int sz = pattern.length();
    char opt = ' ';
    char ch = ' ';
    char type = ' ';
    boolean required = false;
    for (int i = 0; i < sz; i++) {
        ch = pattern.charAt(i);
        switch(ch) {
            case '!':
                required = true;
                break;
            case '@':
            case ':':
            case '%':
            case '+':
            case '#':
            case '<':
            case '>':
            case '*':
            case '/':
                type = ch;
                break;
            default:
                if (opt != ' ') {
                    createOption(type, required, opt);
                    required = false;
                    type = ' ';
                }
                opt = ch;
        }
    }
    if (opt != ' ') {
        createOption(type, required, opt);
    }
}","public void test078() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern(""org.apache.commons.cli2.commandline.CommandLineImpl"");
}","/**
 * Builds an Option using a pattern string.
 * @param pattern the pattern to build from
 */"
"public void withPattern(final String pattern) {
    int sz = pattern.length();
    char opt = ' ';
    char ch = ' ';
    char type = ' ';
    boolean required = false;
    for (int i = 0; i < sz; i++) {
        ch = pattern.charAt(i);
        switch(ch) {
            case '!':
                required = true;
                break;
            case '@':
            case ':':
            case '%':
            case '+':
            case '#':
            case '<':
            case '>':
            case '*':
            case '/':
                type = ch;
                break;
            default:
                if (opt != ' ') {
                    createOption(type, required, opt);
                    required = false;
                    type = ' ';
                }
                opt = ch;
        }
    }
    if (opt != ' ') {
        createOption(type, required, opt);
    }
}","public void test089() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern(""v6C#A]`q2A!I3>1Im3"");
}","/**
 * Builds an Option using a pattern string.
 * @param pattern the pattern to build from
 */"
"public void withPattern(final String pattern) {
    int sz = pattern.length();
    char opt = ' ';
    char ch = ' ';
    char type = ' ';
    boolean required = false;
    for (int i = 0; i < sz; i++) {
        ch = pattern.charAt(i);
        switch(ch) {
            case '!':
                required = true;
                break;
            case '@':
            case ':':
            case '%':
            case '+':
            case '#':
            case '<':
            case '>':
            case '*':
            case '/':
                type = ch;
                break;
            default:
                if (opt != ' ') {
                    createOption(type, required, opt);
                    required = false;
                    type = ' ';
                }
                opt = ch;
        }
    }
    if (opt != ' ') {
        createOption(type, required, opt);
    }
}","public void test0910() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    // Undeclared exception!
    try {
        patternBuilder0.withPattern(""WX!E*''e:7l8 /%S'"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Cannot use null as a validator.
        //
        verifyException(""org.apache.commons.cli2.builder.ArgumentBuilder"", e);
    }
}","/**
 * Builds an Option using a pattern string.
 * @param pattern the pattern to build from
 */"
"public void withPattern(final String pattern) {
    int sz = pattern.length();
    char opt = ' ';
    char ch = ' ';
    char type = ' ';
    boolean required = false;
    for (int i = 0; i < sz; i++) {
        ch = pattern.charAt(i);
        switch(ch) {
            case '!':
                required = true;
                break;
            case '@':
            case ':':
            case '%':
            case '+':
            case '#':
            case '<':
            case '>':
            case '*':
            case '/':
                type = ch;
                break;
            default:
                if (opt != ' ') {
                    createOption(type, required, opt);
                    required = false;
                    type = ' ';
                }
                opt = ch;
        }
    }
    if (opt != ' ') {
        createOption(type, required, opt);
    }
}","public void test1011() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern(""zy^?*=BxLN+>^&S\""8"");
}","/**
 * Builds an Option using a pattern string.
 * @param pattern the pattern to build from
 */"
"public void withPattern(final String pattern) {
    int sz = pattern.length();
    char opt = ' ';
    char ch = ' ';
    char type = ' ';
    boolean required = false;
    for (int i = 0; i < sz; i++) {
        ch = pattern.charAt(i);
        switch(ch) {
            case '!':
                required = true;
                break;
            case '@':
            case ':':
            case '%':
            case '+':
            case '#':
            case '<':
            case '>':
            case '*':
            case '/':
                type = ch;
                break;
            default:
                if (opt != ' ') {
                    createOption(type, required, opt);
                    required = false;
                    type = ' ';
                }
                opt = ch;
        }
    }
    if (opt != ' ') {
        createOption(type, required, opt);
    }
}","public void test1112() throws Throwable {
    PatternBuilder patternBuilder0 = new PatternBuilder();
    patternBuilder0.withPattern("""");
}","/**
 * Builds an Option using a pattern string.
 * @param pattern the pattern to build from
 */"
