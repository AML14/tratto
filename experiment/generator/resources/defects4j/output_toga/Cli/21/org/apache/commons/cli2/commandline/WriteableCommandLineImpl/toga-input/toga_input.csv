focal_method,test_prefix,docstring
"public String getProperty(final String property) {
    return getProperty(new PropertyOption(), property);
}","public void test000() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    String string0 = writeableCommandLineImpl0.getProperty(""-D"");
    assertNull(string0);
}",""
"public int getId() {
    return id;
}","public void test022() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addProperty(""Passes properties and values to the application"", ""-D"");
    writeableCommandLineImpl0.addProperty((Option) propertyOption0, ""Passes properties and values to the application"", ""Passes properties and values to the application"");
    assertEquals(68, propertyOption0.getId());
}",""
"public String getDescription() {
    return description;
}","public void test077() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    propertyOption0.setParent(propertyOption0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    assertEquals(""Passes properties and values to the application"", propertyOption0.getDescription());
}",""
"public String getDescription() {
    return description;
}","public void test088() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    FileValidator fileValidator0 = new FileValidator();
    LinkedList<String> linkedList1 = new LinkedList<String>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""Passes properties and values to the application"", ""Passes properties and values to the application"", (-2915), (-2915), 'q', 'q', fileValidator0, ""Passes properties and values to the application"", linkedList1, (-2915));
    writeableCommandLineImpl0.addValue(argumentImpl0, argumentImpl0);
    assertEquals(""Passes properties and values to the application"", argumentImpl0.getDescription());
}",""
"public int getId() {
    return id;
}","public void test099() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
    assertEquals(68, propertyOption0.getId());
}",""
"public void addSwitch(final Option option, final boolean value) {
    addOption(option);
    if (switches.containsKey(option)) {
        throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET));
    } else {
        switches.put(option, value ? Boolean.TRUE : Boolean.FALSE);
    }
}","public void test1010() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    // Undeclared exception!
    try {
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Switch already set.
        //
        verifyException(""org.apache.commons.cli2.commandline.WriteableCommandLineImpl"", e);
    }
}",""
"public boolean isRequired() {
    return required;
}","public void test1111() throws Throwable {
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, false);
    assertFalse(propertyOption0.isRequired());
}",""
"public final boolean hasOption(final String trigger) {
    return hasOption(getOption(trigger));
}","public void test1212() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.hasOption(""-D"");
    assertFalse(boolean0);
}",""
"public final boolean hasOption(final String trigger) {
    return hasOption(getOption(trigger));
}","public void test1313() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addOption(propertyOption0);
    boolean boolean0 = writeableCommandLineImpl0.hasOption(""-D"");
    assertTrue(boolean0);
}",""
"public Boolean getSwitch(final Option option, final Boolean defaultValue) {
    // First grab the command line values
    Boolean bool = (Boolean) switches.get(option);
    // Secondly try the defaults supplied to the method
    if (bool == null) {
        bool = defaultValue;
    }
    // Thirdly try the option's default values
    if (bool == null) {
        bool = (Boolean) this.defaultSwitches.get(option);
    }
    return bool;
}","public void test1919() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    Boolean boolean0 = new Boolean(true);
    Boolean boolean1 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0, boolean0);
    assertNotNull(boolean1);
}",""
"public final Boolean getSwitch(final String trigger) {
    return getSwitch(getOption(trigger), null);
}","public void test2021() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    Boolean boolean0 = writeableCommandLineImpl0.getSwitch(""Passes properties and values to the application"");
    assertNull(boolean0);
}",""
"public String getProperty(final String property) {
    return getProperty(new PropertyOption(), property);
}","public void test2122() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addProperty((Option) propertyOption0, ""Passes properties and values to the application"", ""Passes properties and values to the application"");
    String string0 = writeableCommandLineImpl0.getProperty(""Passes properties and values to the application"");
    assertEquals(""Passes properties and values to the application"", string0);
}",""
"public boolean looksLikeOption(final String trigger) {
    // this is a reentrant call
    for (final Iterator i = prefixes.iterator(); i.hasNext(); ) {
        final String prefix = (String) i.next();
        if (trigger.startsWith(prefix)) {
            return true;
        }
    }
    return false;
}","public void test2324() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.looksLikeOption(""Passes properties and values to the application"");
    assertFalse(boolean0);
}","/**
 * Tests whether the passed in trigger looks like an option. This
 * implementation first checks whether the passed in string starts with a
 * prefix that indicates an option. If this is the case, it is also checked
 * whether an option of this name is known for the current option. (This can
 * lead to reentrant invocations of this method, so care has to be taken
 * about this.)
 *
 * @param trigger the command line element to test
 * @return a flag whether this element seems to be an option
 */"
"public boolean looksLikeOption(final String trigger) {
    // this is a reentrant call
    for (final Iterator i = prefixes.iterator(); i.hasNext(); ) {
        final String prefix = (String) i.next();
        if (trigger.startsWith(prefix)) {
            return true;
        }
    }
    return false;
}","public void test2425() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.looksLikeOption(""-D"");
    assertTrue(boolean0);
}","/**
 * Tests whether the passed in trigger looks like an option. This
 * implementation first checks whether the passed in string starts with a
 * prefix that indicates an option. If this is the case, it is also checked
 * whether an option of this name is known for the current option. (This can
 * lead to reentrant invocations of this method, so care has to be taken
 * about this.)
 *
 * @param trigger the command line element to test
 * @return a flag whether this element seems to be an option
 */"
"public String toString() {
    final StringBuffer buffer = new StringBuffer();
    // need to add group header
    for (final Iterator i = normalised.iterator(); i.hasNext(); ) {
        final String arg = (String) i.next();
        if (arg.indexOf(' ') >= 0) {
            buffer.append(""\"""").append(arg).append(""\"""");
        } else {
            buffer.append(arg);
        }
        if (i.hasNext()) {
            buffer.append(' ');
        }
    }
    return buffer.toString();
}","public void test2526() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<String> linkedList0 = new LinkedList<String>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    linkedList0.add(""Passes properties and values to the application"");
    linkedList0.add(""-D"");
    String string0 = writeableCommandLineImpl0.toString();
    assertEquals(""\""Passes properties and values to the application\"" -D"", string0);
}",""
"public boolean isRequired() {
    return required;
}","public void test2627() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    writeableCommandLineImpl0.setDefaultValues(propertyOption0, (List) null);
    assertFalse(propertyOption0.isRequired());
}",""
"public int getId() {
    return id;
}","public void test2728() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    Boolean boolean0 = new Boolean(""-D"");
    writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
    assertEquals(68, propertyOption0.getId());
}",""
"public int getId() {
    return id;
}","public void test2829() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, (Boolean) null);
    assertEquals(68, propertyOption0.getId());
}",""
