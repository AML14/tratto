project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    String string0 = writeableCommandLineImpl0.getProperty(""-D"");
    assertNull(string0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addProperty(""Passes properties and values to the application"", ""-D"");
    writeableCommandLineImpl0.addProperty((Option) propertyOption0, ""Passes properties and values to the application"", ""Passes properties and values to the application"");
    assertEquals(68, propertyOption0.getId());
}",0,"assertEquals(0, propertyOption0.getId())"
project,0,test077,"public void test077() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    propertyOption0.setParent(propertyOption0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    assertEquals(""Passes properties and values to the application"", propertyOption0.getDescription());
}",0,
project,0,test088,"public void test088() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    FileValidator fileValidator0 = new FileValidator();
    LinkedList<String> linkedList1 = new LinkedList<String>();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""Passes properties and values to the application"", ""Passes properties and values to the application"", (-2915), (-2915), 'q', 'q', fileValidator0, ""Passes properties and values to the application"", linkedList1, (-2915));
    writeableCommandLineImpl0.addValue(argumentImpl0, argumentImpl0);
    assertEquals(""Passes properties and values to the application"", argumentImpl0.getDescription());
}",0,assertNotNull(argumentImpl0.getDescription())
project,0,test099,"public void test099() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addValue(propertyOption0, linkedList0);
    assertEquals(68, propertyOption0.getId());
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    // Undeclared exception!
    try {
        writeableCommandLineImpl0.addSwitch(propertyOption0, true);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Switch already set.
        //
        verifyException(""org.apache.commons.cli2.commandline.WriteableCommandLineImpl"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, false);
    assertFalse(propertyOption0.isRequired());
}",0,assertTrue(propertyOption0.isRequired())
project,0,test1212,"public void test1212() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.hasOption(""-D"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1313,"public void test1313() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addOption(propertyOption0);
    boolean boolean0 = writeableCommandLineImpl0.hasOption(""-D"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1919,"public void test1919() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    Boolean boolean0 = new Boolean(true);
    Boolean boolean1 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0, boolean0);
    assertNotNull(boolean1);
}",0,
project,0,test2021,"public void test2021() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    Boolean boolean0 = writeableCommandLineImpl0.getSwitch(""Passes properties and values to the application"");
    assertNull(boolean0);
}",0,assertNotNull(boolean0)
project,0,test2122,"public void test2122() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addProperty((Option) propertyOption0, ""Passes properties and values to the application"", ""Passes properties and values to the application"");
    String string0 = writeableCommandLineImpl0.getProperty(""Passes properties and values to the application"");
    assertEquals(""Passes properties and values to the application"", string0);
}",0,
project,0,test2324,"public void test2324() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.looksLikeOption(""Passes properties and values to the application"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2425,"public void test2425() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.looksLikeOption(""-D"");
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2526,"public void test2526() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<String> linkedList0 = new LinkedList<String>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    linkedList0.add(""Passes properties and values to the application"");
    linkedList0.add(""-D"");
    String string0 = writeableCommandLineImpl0.toString();
    assertEquals(""\""Passes properties and values to the application\"" -D"", string0);
}",0,
project,0,test2627,"public void test2627() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    writeableCommandLineImpl0.setDefaultValues(propertyOption0, (List) null);
    assertFalse(propertyOption0.isRequired());
}",0,assertTrue(propertyOption0.isRequired())
project,0,test2728,"public void test2728() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    Boolean boolean0 = new Boolean(""-D"");
    writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
    assertEquals(68, propertyOption0.getId());
}",0,"assertEquals(0, propertyOption0.getId())"
project,0,test2829,"public void test2829() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, (Boolean) null);
    assertEquals(68, propertyOption0.getId());
}",0,"assertEquals(0, propertyOption0.getId())"
