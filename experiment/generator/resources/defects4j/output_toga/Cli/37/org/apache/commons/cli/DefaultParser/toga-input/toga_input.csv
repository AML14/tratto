focal_method,test_prefix,docstring
"public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException {
    return parse(options, arguments, null, stopAtNonOption);
}","public void test000() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[1];
    // Undeclared exception!
    try {
        defaultParser0.parse(options0, stringArray0, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test011() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addOption(""1"", true, ""1"");
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""-1"";
    stringArray0[1] = ""-1"";
    // Undeclared exception!
    try {
        defaultParser0.parse(options1, stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {
    this.options = options;
    this.stopAtNonOption = stopAtNonOption;
    skipParsing = false;
    currentOption = null;
    expectedOpts = new ArrayList(options.getRequiredOptions());
    // clear the data from the groups
    for (OptionGroup group : options.getOptionGroups()) {
        group.setSelected(null);
    }
    cmd = new CommandLine();
    if (arguments != null) {
        for (String argument : arguments) {
            handleToken(argument);
        }
    }
    // check the arguments of the last option
    checkRequiredArgs();
    // add the default options
    handleProperties(properties);
    checkRequiredOptions();
    return cmd;
}","public void test022() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-1e1"";
    Properties properties0 = new Properties();
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
    assertNotNull(commandLine0);
}","/**
 * Parse the arguments according to the specified options and properties.
 *
 * @param options         the specified Options
 * @param arguments       the command line arguments
 * @param properties      command line option name-value pairs
 * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops
 *     the parsing and the remaining arguments are added to the
 *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized
 *     argument triggers a ParseException.
 *
 * @return the list of atomic option and value tokens
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 */"
"public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException {
    return parse(options, arguments, properties, false);
}","public void test033() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Properties properties0 = new Properties();
    properties0.put("""", options0);
    try {
        defaultParser0.parse(options0, (String[]) null, properties0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Default option wasn't defined
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}","/**
 * Parse the arguments according to the specified options and properties.
 *
 * @param options    the specified Options
 * @param arguments  the command line arguments
 * @param properties command line option name-value pairs
 * @return the list of atomic option and value tokens
 *
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 */"
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test044() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addRequiredOption(""1"", ""1"", true, ""1"");
    String[] stringArray0 = new String[0];
    try {
        defaultParser0.parse(options1, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing required option: 1
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test055() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addRequiredOption(""1"", ""1"", true, ""1"");
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""--1"";
    stringArray0[1] = ""--1"";
    try {
        defaultParser0.parse(options1, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Missing argument for option: 1
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {
    this.options = options;
    this.stopAtNonOption = stopAtNonOption;
    skipParsing = false;
    currentOption = null;
    expectedOpts = new ArrayList(options.getRequiredOptions());
    // clear the data from the groups
    for (OptionGroup group : options.getOptionGroups()) {
        group.setSelected(null);
    }
    cmd = new CommandLine();
    if (arguments != null) {
        for (String argument : arguments) {
            handleToken(argument);
        }
    }
    // check the arguments of the last option
    checkRequiredArgs();
    // add the default options
    handleProperties(properties);
    checkRequiredOptions();
    return cmd;
}","public void test066() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""--1"";
    Properties properties0 = new Properties();
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
    assertNotNull(commandLine0);
}","/**
 * Parse the arguments according to the specified options and properties.
 *
 * @param options         the specified Options
 * @param arguments       the command line arguments
 * @param properties      command line option name-value pairs
 * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops
 *     the parsing and the remaining arguments are added to the
 *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized
 *     argument triggers a ParseException.
 *
 * @return the list of atomic option and value tokens
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 */"
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test077() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""--"";
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test088() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""-"";
    // Undeclared exception!
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test099() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addRequiredOption(""1"", ""1"", true, ""1"");
    String[] stringArray0 = new String[3];
    stringArray0[0] = ""1"";
    stringArray0[1] = ""--1"";
    stringArray0[2] = ""-"";
    CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1010() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addRequiredOption(""1"", ""1"", true, ""1"");
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""--1"";
    stringArray0[1] = ""1"";
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1111() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addRequiredOption(""1"", ""1"", true, ""1"");
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""--1"";
    stringArray0[1] = ""--o=.8F?tc"";
    CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1212() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    Options options1 = options0.addRequiredOption(""1"", ""1"", true, ""1"");
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""--=xN1"";
    CommandLine commandLine0 = defaultParser0.parse(options1, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1313() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addRequiredOption(""1"", ""1"", true, ""1"");
    options0.addRequiredOption(""1"", ""--=xN1"", true, ""--=xN1"");
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""--=xN1"";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Ambiguous option: '--'  (could be: '1', '--=xN1')
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1414() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addRequiredOption("""", """", false, """");
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""--=xN1"";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: --=xN1
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1515() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-\"""";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: -\""
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1616() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""-M=>7Qd/3"";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: -M=>7Qd/3
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1717() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addRequiredOption(""11"", ""11"", true, ""11"");
    String[] stringArray0 = new String[10];
    stringArray0[0] = ""-11"";
    // Undeclared exception!
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1818() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addRequiredOption(""De"", ""De"", false, ""Default option wasn't defined"");
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-Default option wasn't defined"";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: -Default option wasn't defined
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test1919() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addRequiredOption(""De"", ""De"", true, ""-Default option wasn't defined"");
    String[] stringArray0 = new String[6];
    stringArray0[0] = ""-Default option wasn't defined"";
    // Undeclared exception!
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test2020() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""-M$?f=D79BF@d/3J"";
    try {
        defaultParser0.parse(options0, stringArray0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Unrecognized option: -M$?f=D79BF@d/3J
        //
        verifyException(""org.apache.commons.cli.DefaultParser"", e);
    }
}",""
"public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException {
    this.options = options;
    this.stopAtNonOption = stopAtNonOption;
    skipParsing = false;
    currentOption = null;
    expectedOpts = new ArrayList(options.getRequiredOptions());
    // clear the data from the groups
    for (OptionGroup group : options.getOptionGroups()) {
        group.setSelected(null);
    }
    cmd = new CommandLine();
    if (arguments != null) {
        for (String argument : arguments) {
            handleToken(argument);
        }
    }
    // check the arguments of the last option
    checkRequiredArgs();
    // add the default options
    handleProperties(properties);
    checkRequiredOptions();
    return cmd;
}","public void test2121() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addOption(""1"", ""1"");
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-1e1"";
    Properties properties0 = new Properties();
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
    assertNotNull(commandLine0);
}","/**
 * Parse the arguments according to the specified options and properties.
 *
 * @param options         the specified Options
 * @param arguments       the command line arguments
 * @param properties      command line option name-value pairs
 * @param stopAtNonOption if <tt>true</tt> an unrecognized argument stops
 *     the parsing and the remaining arguments are added to the
 *     {@link CommandLine}s args list. If <tt>false</tt> an unrecognized
 *     argument triggers a ParseException.
 *
 * @return the list of atomic option and value tokens
 * @throws ParseException if there are any problems encountered
 * while parsing the command line tokens.
 */"
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test2222() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""1"", ""1"", true, ""1"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    options0.addOptionGroup(optionGroup1);
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-11"";
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test2323() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""1"", ""1"", true, ""1"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    optionGroup1.setRequired(true);
    options0.addOptionGroup(optionGroup1);
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-11"";
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
    assertNotNull(commandLine0);
}",""
"public CommandLine parse(Options options, String[] arguments) throws ParseException {
    return parse(options, arguments, null);
}","public void test2424() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addOption(""1"", ""1"");
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""-11"";
    CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
    assertNotNull(commandLine0);
}",""
"protected void handleConcatenatedOptions(String token) throws ParseException {
    for (int i = 1; i < token.length(); i++) {
        String ch = String.valueOf(token.charAt(i));
        if (options.hasOption(ch)) {
            handleOption(options.getOption(ch));
            if (currentOption != null && token.length() != i + 1) {
                // add the trail as an argument of the option
                currentOption.addValueForProcessing(token.substring(i + 1));
                break;
            }
        } else {
            handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);
            break;
        }
    }
}","public void test2525() throws Throwable {
    DefaultParser defaultParser0 = new DefaultParser();
    Options options0 = new Options();
    options0.addOption(""1"", true, ""1"");
    Options options1 = options0.addOption("""", ""1"");
    String[] stringArray0 = new String[2];
    stringArray0[0] = """";
    Properties properties0 = new Properties();
    defaultParser0.parse(options1, stringArray0, properties0, true);
    defaultParser0.handleConcatenatedOptions(""---1"");
}","/**
 * Breaks <code>token</code> into its constituent parts
 * using the following algorithm.
 *
 * <ul>
 *  <li>ignore the first character (""<b>-</b>"")</li>
 *  <li>foreach remaining character check if an {@link Option}
 *  exists with that id.</li>
 *  <li>if an {@link Option} does exist then add that character
 *  prepended with ""<b>-</b>"" to the list of processed tokens.</li>
 *  <li>if the {@link Option} can have an argument value and there
 *  are remaining characters in the token then add the remaining
 *  characters as a token to the list of processed tokens.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS</b> set then add the special token
 *  ""<b>--</b>"" followed by the remaining characters and also
 *  the remaining tokens directly to the processed tokens list.</li>
 *  <li>if an {@link Option} does <b>NOT</b> exist <b>AND</b>
 *  <code>stopAtNonOption</code> <b>IS NOT</b> set then add that
 *  character prepended with ""<b>-</b>"".</li>
 * </ul>
 *
 * @param token The current token to be <b>burst</b>
 * at the first non-Option encountered.
 * @throws ParseException if there are any problems encountered
 *                        while parsing the command line token.
 */"
