focal_method,test_prefix,docstring
"public String getProperty(final String property) {
    return getProperty(new PropertyOption(), property);
}","public void test000() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    String string0 = writeableCommandLineImpl0.getProperty(""Passes properties and values to the application"");
    assertNull(string0);
}",""
"public final boolean hasOption(final String trigger) {
    return hasOption(getOption(trigger));
}","public void test077() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addOption(propertyOption0);
    boolean boolean0 = writeableCommandLineImpl0.hasOption(""-D"");
    assertTrue(boolean0);
}",""
"public String toString() {
    final StringBuffer buffer = new StringBuffer();
    // need to add group header
    for (final Iterator i = normalised.iterator(); i.hasNext(); ) {
        final String arg = (String) i.next();
        if (arg.indexOf(' ') >= 0) {
            buffer.append(""\"""").append(arg).append(""\"""");
        } else {
            buffer.append(arg);
        }
        if (i.hasNext()) {
            buffer.append(' ');
        }
    }
    return buffer.toString();
}","public void test088() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addValue((Option) null, ""-D"");
    Long long0 = new Long((-1L));
    writeableCommandLineImpl0.addValue((Option) null, long0);
    List list0 = writeableCommandLineImpl0.getValues(""-D"");
    WriteableCommandLineImpl writeableCommandLineImpl1 = new WriteableCommandLineImpl(propertyOption0, list0);
    // Undeclared exception!
    try {
        writeableCommandLineImpl1.toString();
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.Long cannot be cast to java.lang.String
        //
        verifyException(""org.apache.commons.cli2.commandline.WriteableCommandLineImpl"", e);
    }
}",""
"public int getMinimum() {
    return minimum;
}","public void test099() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    ClassValidator classValidator0 = new ClassValidator();
    ArgumentImpl argumentImpl0 = new ArgumentImpl(""Passes properties and values to the application"", ""Passes properties and values to the application"", (-2143), (-2143), ':', ':', classValidator0, ""Passes properties and values to the application"", linkedList0, (-2143));
    Boolean boolean0 = Boolean.FALSE;
    writeableCommandLineImpl0.addValue(argumentImpl0, boolean0);
    assertEquals((-2143), argumentImpl0.getMinimum());
}",""
"public final Boolean getSwitch(final Option option) {
    return getSwitch(option, null);
}","public void test1010() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, false);
    Boolean boolean0 = writeableCommandLineImpl0.getSwitch((Option) propertyOption0);
    assertNotNull(boolean0);
}",""
"public void addSwitch(final Option option, final boolean value) {
    addOption(option);
    if (switches.containsKey(option)) {
        throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET));
    } else {
        switches.put(option, value ? Boolean.TRUE : Boolean.FALSE);
    }
}","public void test1112() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, false);
    // Undeclared exception!
    try {
        writeableCommandLineImpl0.addSwitch(propertyOption0, false);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Switch already set.
        //
        verifyException(""org.apache.commons.cli2.commandline.WriteableCommandLineImpl"", e);
    }
}",""
"public String getDescription() {
    return description;
}","public void test1213() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addSwitch(propertyOption0, true);
    assertEquals(""Passes properties and values to the application"", propertyOption0.getDescription());
}",""
"public final boolean hasOption(final String trigger) {
    return hasOption(getOption(trigger));
}","public void test1314() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.hasOption(""-D"");
    assertFalse(boolean0);
}",""
"public String toString() {
    final StringBuffer buffer = new StringBuffer();
    // need to add group header
    for (final Iterator i = normalised.iterator(); i.hasNext(); ) {
        final String arg = (String) i.next();
        if (arg.indexOf(' ') >= 0) {
            buffer.append(""\"""").append(arg).append(""\"""");
        } else {
            buffer.append(arg);
        }
        if (i.hasNext()) {
            buffer.append(' ');
        }
    }
    return buffer.toString();
}","public void test1415() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addValue((Option) null, ""-D"");
    List list0 = writeableCommandLineImpl0.getValues(""-D"");
    WriteableCommandLineImpl writeableCommandLineImpl1 = new WriteableCommandLineImpl(propertyOption0, list0);
    String string0 = writeableCommandLineImpl1.toString();
    assertEquals(""-D"", string0);
}",""
"public final Boolean getSwitch(final String trigger) {
    return getSwitch(getOption(trigger), null);
}","public void test1819() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    Boolean boolean0 = writeableCommandLineImpl0.getSwitch(""Passes properties and values to the application"");
    assertNull(boolean0);
}",""
"public int getId() {
    return id;
}","public void test1920() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addProperty((Option) propertyOption0, ""Passes properties and values to the application"", ""-D"");
    writeableCommandLineImpl0.addProperty((Option) propertyOption0, ""-D"", ""-D"");
    assertEquals(68, propertyOption0.getId());
}",""
"public String getProperty(final Option option, final String property, final String defaultValue) {
    Properties properties = (Properties) optionToProperties.get(option);
    if (properties == null) {
        return defaultValue;
    }
    return properties.getProperty(property, defaultValue);
}","public void test2021() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addProperty((Option) propertyOption0, ""Passes properties and values to the application"", ""-D"");
    String string0 = writeableCommandLineImpl0.getProperty((Option) propertyOption0, ""Passes properties and values to the application"", ""-D"");
    assertEquals(""-D"", string0);
}",""
"public boolean looksLikeOption(final String trigger) {
    for (final Iterator i = prefixes.iterator(); i.hasNext(); ) {
        final String prefix = (String) i.next();
        if (trigger.startsWith(prefix)) {
            return true;
        }
    }
    return false;
}","public void test2122() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.looksLikeOption(""Passes properties and values to the application"");
    assertFalse(boolean0);
}",""
"public boolean looksLikeOption(final String trigger) {
    for (final Iterator i = prefixes.iterator(); i.hasNext(); ) {
        final String prefix = (String) i.next();
        if (trigger.startsWith(prefix)) {
            return true;
        }
    }
    return false;
}","public void test2223() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<DefaultOption> linkedList0 = new LinkedList<DefaultOption>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    boolean boolean0 = writeableCommandLineImpl0.looksLikeOption(""-D"");
    assertTrue(boolean0);
}",""
"public String toString() {
    final StringBuffer buffer = new StringBuffer();
    // need to add group header
    for (final Iterator i = normalised.iterator(); i.hasNext(); ) {
        final String arg = (String) i.next();
        if (arg.indexOf(' ') >= 0) {
            buffer.append(""\"""").append(arg).append(""\"""");
        } else {
            buffer.append(arg);
        }
        if (i.hasNext()) {
            buffer.append(' ');
        }
    }
    return buffer.toString();
}","public void test2324() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption(""RV7H"", ""RV7H"", 192);
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.addValue((Option) null, ""Passes properties and values to the application"");
    List list0 = writeableCommandLineImpl0.getValues(""Passes properties and values to the application"");
    WriteableCommandLineImpl writeableCommandLineImpl1 = new WriteableCommandLineImpl(propertyOption0, list0);
    String string0 = writeableCommandLineImpl1.toString();
    assertEquals(""\""Passes properties and values to the application\"""", string0);
}",""
"public String getDescription() {
    return description;
}","public void test2425() throws Throwable {
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.setDefaultValues(propertyOption0, linkedList0);
    assertEquals(""Passes properties and values to the application"", propertyOption0.getDescription());
}",""
"public String getDescription() {
    return description;
}","public void test2526() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, (List) null);
    writeableCommandLineImpl0.setDefaultValues(propertyOption0, (List) null);
    assertEquals(""Passes properties and values to the application"", propertyOption0.getDescription());
}",""
"public String getDescription() {
    return description;
}","public void test2627() throws Throwable {
    PropertyOption propertyOption0 = PropertyOption.INSTANCE;
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    Boolean boolean0 = Boolean.TRUE;
    writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, boolean0);
    assertEquals(""Passes properties and values to the application"", propertyOption0.getDescription());
}",""
"public String getPreferredName() {
    return optionString;
}","public void test2728() throws Throwable {
    PropertyOption propertyOption0 = new PropertyOption();
    LinkedList<Command> linkedList0 = new LinkedList<Command>();
    WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
    writeableCommandLineImpl0.setDefaultSwitch(propertyOption0, (Boolean) null);
    assertEquals(""-D"", propertyOption0.getPreferredName());
}",""
