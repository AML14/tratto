focal_method,test_prefix,docstring
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test000() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public int getWidth() {
    return this.defaultWidth;
}","public void test001() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(74, int0);
}","/**
 * Returns the 'width'.
 *
 * @return the 'width'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test003() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test005() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test006() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test017() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""usage: "");
    assertEquals(""usage: "", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public int getDescPadding() {
    return this.defaultDescPad;
}","public void test028() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(3, int0);
}","/**
 * Returns the 'descPadding'.
 *
 * @return the 'descPadding'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test029() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test0210() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test0212() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test0213() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getNewLine() {
    return this.defaultNewLine;
}","public void test0315() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setNewLine(""usage: "");
    assertEquals(""usage: "", helpFormatter0.getNewLine());
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test0416() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(1);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test0417() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(1);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test0418() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(1);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void setLeftPadding(int padding) {
    this.defaultLeftPad = padding;
}","public void test0419() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(1);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'leftPadding'.
 *
 * @param padding the new value of 'leftPadding'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test0422() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(1);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void setArgName(String name) {
    this.defaultArgName = name;
}","public void test0523() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""arg"");
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Sets the 'argName'.
 *
 * @param name the new value of 'argName'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test0524() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""arg"");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test0526() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""arg"");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test0527() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""arg"");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test0529() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""arg"");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test0630() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""\n"");
    assertEquals(""\n"", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test0732() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""usage: "", options0);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void setWidth(int width) {
    this.defaultWidth = width;
}","public void test0833() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(3);
    assertEquals(3, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'width'.
 *
 * @param width the new value of 'width'
 */"
"public void setOptPrefix(String prefix) {
    this.defaultOptPrefix = prefix;
}","public void test0934() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'optPrefix'.
 *
 * @param prefix the new value of 'optPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test0935() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test0936() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test0937() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test0939() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public int getLeftPadding() {
    return this.defaultLeftPad;
}","public void test1041() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(1, int0);
}","/**
 * Returns the 'leftPadding'.
 *
 * @return the 'leftPadding'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1042() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1043() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1044() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1046() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1148() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1149() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1150() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""arg"", string0);
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1153() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getArgName();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {
    printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
}","public void test1255() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp((PrintWriter) null, 1, ""-"", ""-"", (Options) null, 1, 1, ""arg"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.</p>
 *
 * @param pw the writer to which the help will be written
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param leftPad the number of characters of padding to be prefixed
 * to each line
 * @param descPad the number of characters of padding to be prefixed
 * to each description line
 * @param footer the banner to display at the end of the help
 */"
"public void setDescPadding(int padding) {
    this.defaultDescPad = padding;
}","public void test1357() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setDescPadding(1);
    assertEquals(1, helpFormatter0.defaultDescPad);
}","/**
 * Sets the 'descPadding'.
 *
 * @param padding the new value of 'descPadding'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(cmdLineSyntax, header, options, footer, false);
}","public void test1458() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""--"", ""--"", options0, ""--"");
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public String getNewLine() {
    return this.defaultNewLine;
}","public void test1559() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1560() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1561() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1562() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1564() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
}","public void test1667() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(""-"", (Options) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1768() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1769() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1770() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1773() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1875() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1876() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1877() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1880() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test1982() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test1983() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test1984() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test1988() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test2089() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(74, (String) null, ""usage: "", options0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test2190() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(3, """", """", options0, """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public void printUsage(PrintWriter pw, int width, String app, Options options) {
    // initialise the string buffer
    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");
    // create a list for processed option groups
    final Collection processedGroups = new ArrayList();
    // temp variable
    Option option;
    List optList = new ArrayList(options.getOptions());
    Collections.sort(optList, new OptionComparator());
    // iterate over the options
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        // get the next Option
        option = (Option) i.next();
        // check if the option is part of an OptionGroup
        OptionGroup group = options.getOptionGroup(option);
        // if the option is part of a group
        if (group != null) {
            // and if the group has not already been processed
            if (!processedGroups.contains(group)) {
                // add the group to the processed list
                processedGroups.add(group);
                // add the usage clause
                appendOptionGroup(buff, group);
            }
            // otherwise the option was displayed in the group
            // previously so ignore it.
        } else // if the Option is not part of an OptionGroup
        {
            appendOption(buff, option, option.isRequired());
        }
        if (i.hasNext()) {
            buff.append("" "");
        }
    }
    // call printWrapped
    printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
}","public void test2291() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""arg"", ""usage: "");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    optionGroup1.setRequired(true);
    Options options0 = new Options();
    options0.addOptionGroup(optionGroup1);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""usage: "");
    // Undeclared exception!
    try {
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), ""\n"", options0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * <p>Prints the usage statement for the specified application.</p>
 *
 * @param pw The PrintWriter to print the usage statement
 * @param width The number of characters to display per line
 * @param app The application name
 * @param options The command line Options
 */"
"public void printUsage(PrintWriter pw, int width, String app, Options options) {
    // initialise the string buffer
    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");
    // create a list for processed option groups
    final Collection processedGroups = new ArrayList();
    // temp variable
    Option option;
    List optList = new ArrayList(options.getOptions());
    Collections.sort(optList, new OptionComparator());
    // iterate over the options
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        // get the next Option
        option = (Option) i.next();
        // check if the option is part of an OptionGroup
        OptionGroup group = options.getOptionGroup(option);
        // if the option is part of a group
        if (group != null) {
            // and if the group has not already been processed
            if (!processedGroups.contains(group)) {
                // add the group to the processed list
                processedGroups.add(group);
                // add the usage clause
                appendOptionGroup(buff, group);
            }
            // otherwise the option was displayed in the group
            // previously so ignore it.
        } else // if the Option is not part of an OptionGroup
        {
            appendOption(buff, option, option.isRequired());
        }
        if (i.hasNext()) {
            buff.append("" "");
        }
    }
    // call printWrapped
    printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
}","public void test2392() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Option option0 = new Option(""arg"", ""arg"");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Option option1 = new Option("""", true, ""-"");
    optionGroup1.addOption(option1);
    Options options0 = new Options();
    options0.addOptionGroup(optionGroup0);
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""arg"");
    // Undeclared exception!
    try {
        helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, (-1), ""usage: "", options0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * <p>Prints the usage statement for the specified application.</p>
 *
 * @param pw The PrintWriter to print the usage statement
 * @param width The number of characters to display per line
 * @param app The application name
 * @param options The command line Options
 */"
"public void printUsage(PrintWriter pw, int width, String app, Options options) {
    // initialise the string buffer
    StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append("" "");
    // create a list for processed option groups
    final Collection processedGroups = new ArrayList();
    // temp variable
    Option option;
    List optList = new ArrayList(options.getOptions());
    Collections.sort(optList, new OptionComparator());
    // iterate over the options
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        // get the next Option
        option = (Option) i.next();
        // check if the option is part of an OptionGroup
        OptionGroup group = options.getOptionGroup(option);
        // if the option is part of a group
        if (group != null) {
            // and if the group has not already been processed
            if (!processedGroups.contains(group)) {
                // add the group to the processed list
                processedGroups.add(group);
                // add the usage clause
                appendOptionGroup(buff, group);
            }
            // otherwise the option was displayed in the group
            // previously so ignore it.
        } else // if the Option is not part of an OptionGroup
        {
            appendOption(buff, option, option.isRequired());
        }
        if (i.hasNext()) {
            buff.append("" "");
        }
    }
    // call printWrapped
    printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
}","public void test2493() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption((String) null, ""\n"", true, (String) null);
    // Undeclared exception!
    try {
        helpFormatter0.printUsage((PrintWriter) null, 3, (String) null, options1);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * <p>Prints the usage statement for the specified application.</p>
 *
 * @param pw The PrintWriter to print the usage statement
 * @param width The number of characters to display per line
 * @param app The application name
 * @param options The command line Options
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test2594() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption((String) null, true, ""-"");
    helpFormatter0.printHelp(74, ""usage: "", ""--"", options1, ""--"");
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test2595() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption((String) null, true, ""-"");
    helpFormatter0.printHelp(74, ""usage: "", ""--"", options1, ""--"");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test2696() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption(""arg"", false, ""usage: "");
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(3, ""\n"", ""\n"", options1, ""\n"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test2797() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption(""arg"", true, ""usage: "");
    options1.addOption("""", ""\n"", true, ""-"");
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(3, ""\n"", ""\n"", options1, ""\n"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(width, cmdLineSyntax, header, options, footer, false);
}","public void test2898() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.defaultOptPrefix = ""^QGFW-vUA0|^:^wUbdD"";
    Options options0 = new Options();
    Options options1 = options0.addOption(""arg"", ""usage: "", true, ""\n"");
    helpFormatter0.printHelp(3, ""\n"", ""\n"", options1, ""\n"");
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * <p>Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.</p>
 *
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test2999() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption(""arg"", true, (String) null);
    helpFormatter0.printHelp(3, ""\n"", ""-"", options1, ""\n"");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test30100() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""usage: "", 3, 3);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"protected int findWrapPos(String text, int width, int startPos) {
    int pos = -1;
    // the line ends before the max wrap pos or a new line char found
    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width)) {
        return pos + 1;
    } else if ((startPos + width) >= text.length()) {
        return -1;
    }
    // look for the last whitespace character before startPos+width
    pos = startPos + width;
    char c;
    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        --pos;
    }
    // if we found it - just return
    if (pos > startPos) {
        return pos;
    }
    // must look for the first whitespace chearacter after startPos
    // + width
    pos = startPos + width;
    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        ++pos;
    }
    return (pos == text.length()) ? (-1) : pos;
}","public void test30101() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""usage: "", 3, 3);
    assertEquals(6, int0);
}","/**
 * Finds the next text wrap position after <code>startPos</code> for the
 * text in <code>text</code> with the column width <code>width</code>.
 * The wrap point is the last postion before startPos+width having a
 * whitespace character (space, \n, \r).
 *
 * @param text The text being searched for the wrap position
 * @param width width of the wrapped text
 * @param startPos position from which to start the lookup whitespace
 * character
 * @return postion on which the text must be wrapped or -1 if the wrap
 * position is at the end of the text
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test30103() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""usage: "", 3, 3);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test30105() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""usage: "", 3, 3);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test31106() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.defaultSyntaxPrefix = ""org.apache.commons.cli.OptionGroup"";
    helpFormatter0.printHelp(3, ""\n"", ""\n"", options0, ""\n"");
    assertEquals(""org.apache.commons.cli.OptionGroup"", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return this.defaultArgName;
}","public void test32107() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"protected String rtrim(String s) {
    if ((s == null) || (s.length() == 0)) {
        return s;
    }
    int pos = s.length();
    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {
        --pos;
    }
    return s.substring(0, pos);
}","public void test32108() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * <p>Remove the trailing whitespace from the specified String.</p>
 *
 * @param s The String to remove the trailing padding from.
 *
 * @return The String of without the trailing padding
 */"
"public String getSyntaxPrefix() {
    return this.defaultSyntaxPrefix;
}","public void test32109() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return this.defaultLongOptPrefix;
}","public void test32111() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return this.defaultOptPrefix;
}","public void test32112() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {
    int argPos = cmdLineSyntax.indexOf(' ') + 1;
    printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
}","public void test33115() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.defaultSyntaxPrefix = """";
    // Undeclared exception!
    try {
        helpFormatter0.printUsage((PrintWriter) null, 1, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * <p>Print the cmdLineSyntax to the specified writer, using the
 * specified width.</p>
 *
 * @param pw The printWriter to write the help to
 * @param width The number of characters per line for the usage statement.
 * @param cmdLineSyntax The usage statement.
 */"
"public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) {
    int argPos = cmdLineSyntax.indexOf(' ') + 1;
    printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);
}","public void test34116() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.defaultSyntaxPrefix = ""\n"";
    // Undeclared exception!
    try {
        helpFormatter0.printUsage((PrintWriter) null, 1, ""--"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * <p>Print the cmdLineSyntax to the specified writer, using the
 * specified width.</p>
 *
 * @param pw The printWriter to write the help to
 * @param width The number of characters per line for the usage statement.
 * @param cmdLineSyntax The usage statement.
 */"
