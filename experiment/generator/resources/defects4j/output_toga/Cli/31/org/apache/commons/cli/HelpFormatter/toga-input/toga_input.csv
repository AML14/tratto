focal_method,test_prefix,docstring
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test000() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test001() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test002() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public int getWidth() {
    return defaultWidth;
}","public void test003() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'width'.
 *
 * @return the 'width'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test005() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test006() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getWidth();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test018() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public void setLongOptPrefix(String prefix) {
    this.defaultLongOptPrefix = prefix;
}","public void test019() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Sets the 'longOptPrefix'.
 *
 * @param prefix the new value of 'longOptPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0111() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0112() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0114() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0115() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptPrefix(""--"");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public int getDescPadding() {
    return defaultDescPad;
}","public void test0216() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'descPadding'.
 *
 * @return the 'descPadding'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test0217() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0218() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0219() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0221() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0222() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getDescPadding();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0324() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLongOptSeparator(""-"");
    assertEquals(""-"", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getNewLine() {
    return defaultNewLine;
}","public void test0425() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setNewLine("" "");
    assertEquals("" "", helpFormatter0.getNewLine());
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public void setLeftPadding(int padding) {
    this.defaultLeftPad = padding;
}","public void test0526() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(1);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Sets the 'leftPadding'.
 *
 * @param padding the new value of 'leftPadding'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0527() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(1);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0529() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(1);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test0530() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(1);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0531() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(1);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0532() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setLeftPadding(1);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0634() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setArgName(""--"");
    assertEquals(""--"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {
    printHelp(cmdLineSyntax, header, options, footer, false);
}","public void test0735() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp(""usage: "", ""usage: "", (Options) null, ""usage: "");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0836() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""usage: "");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void setSyntaxPrefix(String prefix) {
    this.defaultSyntaxPrefix = prefix;
}","public void test0837() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""usage: "");
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Sets the 'syntaxPrefix'.
 *
 * @param prefix the new value of 'syntaxPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test0838() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""usage: "");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test0839() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""usage: "");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test0842() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""usage: "");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0843() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setSyntaxPrefix(""usage: "");
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test0944() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(3, "" "", """", options0, ""\"""");
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test0945() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(3, "" "", """", options0, ""\"""");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1046() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1047() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1050() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1051() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1053() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptSeparator();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1154() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(74);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1155() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(74);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public void setWidth(int width) {
    this.defaultWidth = width;
}","public void test1156() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(74);
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Sets the 'width'.
 *
 * @param width the new value of 'width'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1158() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(74);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1159() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(74);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1161() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setWidth(74);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void setOptPrefix(String prefix) {
    this.defaultOptPrefix = prefix;
}","public void test1262() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Sets the 'optPrefix'.
 *
 * @param prefix the new value of 'optPrefix'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1263() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1265() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1267() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1268() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1269() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptPrefix(""-"");
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public int getLeftPadding() {
    return defaultLeftPad;
}","public void test1370() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'leftPadding'.
 *
 * @return the 'leftPadding'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1371() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1372() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1374() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1375() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1376() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.getLeftPadding();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"// --------------------------------------------------------------- Protected
/**
 * Render the specified Options and return the rendered Options
 * in a StringBuffer.
 *
 * @param sb The StringBuffer to place the rendered Options into.
 * @param width The number of characters to display per line
 * @param options The command line Options
 * @param leftPad the number of characters of padding to be prefixed
 * to each line
 * @param descPad the number of characters of padding to be prefixed
 * to each description line
 *
 * @return the StringBuffer with the rendered Options contents.
 */
protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {
    final String lpad = createPadding(leftPad);
    final String dpad = createPadding(descPad);
    // first create list containing only <lpad>-a,--aaa where
    // -a is opt and --aaa is long opt; in parallel look for
    // the longest opt string this list will be then used to
    // sort options ascending
    int max = 0;
    StringBuffer optBuf;
    List prefixList = new ArrayList();
    List optList = options.helpOptions();
    Collections.sort(optList, getOptionComparator());
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        Option option = (Option) i.next();
        optBuf = new StringBuffer();
        if (option.getOpt() == null) {
            optBuf.append(lpad).append(""   "" + defaultLongOptPrefix).append(option.getLongOpt());
        } else {
            optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());
            if (option.hasLongOpt()) {
                optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());
            }
        }
        if (option.hasArg()) {
            String argName = option.getArgName();
            if (argName != null && argName.length() == 0) {
                // if the option has a blank argname
                optBuf.append(' ');
            } else {
                optBuf.append(option.hasLongOpt() ? longOptSeparator : "" "");
                optBuf.append(""<"").append(argName != null ? option.getArgName() : getArgName()).append("">"");
            }
        }
        prefixList.add(optBuf);
        max = (optBuf.length() > max) ? optBuf.length() : max;
    }
    int x = 0;
    for (Iterator i = optList.iterator(); i.hasNext(); ) {
        Option option = (Option) i.next();
        optBuf = new StringBuffer(prefixList.get(x++).toString());
        if (optBuf.length() < max) {
            optBuf.append(createPadding(max - optBuf.length()));
        }
        optBuf.append(dpad);
        int nextLineTabStop = max + descPad;
        if (option.getDescription() != null) {
            optBuf.append(option.getDescription());
        }
        renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());
        if (i.hasNext()) {
            sb.append(defaultNewLine);
        }
    }
    return sb;
}","public void test1478() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Option option0 = new Option("""", ""\n"", true, ""\n"");
    option0.setArgName((String) null);
    Options options0 = new Options();
    options0.addOption(option0);
    // Undeclared exception!
    try {
        helpFormatter0.renderOptions((StringBuffer) null, 74, options0, 1, 1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}",""
"public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) {
    printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);
}","public void test1579() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp((PrintWriter) null, 1, ""--"", ""--"", (Options) null, 3, 3, ""--"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.
 *
 * @param pw the writer to which the help will be written
 * @param width the number of characters to be displayed on each line
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param leftPad the number of characters of padding to be prefixed
 * to each line
 * @param descPad the number of characters of padding to be prefixed
 * to each description line
 * @param footer the banner to display at the end of the help
 *
 * @throws IllegalStateException if there is no room to print a line
 */"
"public void setDescPadding(int padding) {
    this.defaultDescPad = padding;
}","public void test1680() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setDescPadding(13);
    assertEquals(13, helpFormatter0.defaultDescPad);
}","/**
 * Sets the 'descPadding'.
 *
 * @param padding the new value of 'descPadding'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1781() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getNewLine() {
    return defaultNewLine;
}","public void test1782() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'newLine'.
 *
 * @return the 'newLine'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1785() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1786() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1788() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test1789() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getNewLine();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);
}","public void test1891() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""R{nqH9d"", options0, true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test1993() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test1994() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test1997() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test1998() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test19100() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getLongOptPrefix();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test20101() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test20102() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test20103() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test20105() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test20107() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getSyntaxPrefix();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test21109() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test21110() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test21113() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test21114() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test21115() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.getOptPrefix();
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test22117() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption(""u6J$gcHH"", ""--"", true, ""usage: "");
    Options options2 = options1.addOption(""arg"", ""usage: "", true, ""-"");
    helpFormatter0.printHelp(""u6J$gcHH"", ""u6J$gcHH"", options2, ""u6J$gcHH"", true);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test23118() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test23119() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test23120() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test23121() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Set the comparator used to sort the options when they output in help text.
 * Passing in a null parameter will set the ordering to the default mode.
 *
 * @since 1.2
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test23122() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test23124() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    helpFormatter0.setOptionComparator(comparator0);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test24126() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void setOptionComparator(Comparator comparator) {
    if (comparator == null) {
        this.optionComparator = new OptionComparator();
    } else {
        this.optionComparator = comparator;
    }
}","public void test24127() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Set the comparator used to sort the options when they output in help text.
 * Passing in a null parameter will set the ordering to the default mode.
 *
 * @since 1.2
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test24128() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test24129() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test24132() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test24133() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.setOptionComparator((Comparator) null);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public void printHelp(String cmdLineSyntax, Options options) {
    printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);
}","public void test25134() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp((String) null, (Options) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param options the Options instance
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test26135() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.printHelp("""", """", (Options) null, """", true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // cmdLineSyntax not provided
        //
        verifyException(""org.apache.commons.cli.HelpFormatter"", e);
    }
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test27136() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(3, "" "", ""--"", options0, "" "");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test28138() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option("""", true, ""--"");
    optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup0);
    helpFormatter0.printHelp(""--"", ""a"", options1, ""--"", true);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test28139() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option("""", true, ""--"");
    optionGroup0.addOption(option0);
    Options options1 = options0.addOptionGroup(optionGroup0);
    helpFormatter0.printHelp(""--"", ""a"", options1, ""--"", true);
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test29141() throws Throwable {
    Option option0 = new Option("""", """");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Option option1 = new Option(""1V"", ""1V"");
    optionGroup1.addOption(option1);
    Options options0 = new Options();
    Options options1 = options0.addOptionGroup(optionGroup1);
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.printHelp(""@uoce4Azn\""8y"", ""qaP].nM_b&>-{u_Gd"", options1, ""1V"", true);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test29142() throws Throwable {
    Option option0 = new Option("""", """");
    OptionGroup optionGroup0 = new OptionGroup();
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Option option1 = new Option(""1V"", ""1V"");
    optionGroup1.addOption(option1);
    Options options0 = new Options();
    Options options1 = options0.addOptionGroup(optionGroup1);
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.printHelp(""@uoce4Azn\""8y"", ""qaP].nM_b&>-{u_Gd"", options1, ""1V"", true);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test30143() throws Throwable {
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option(""ubU"", ""Oa"");
    OptionGroup optionGroup1 = optionGroup0.addOption(option0);
    Options options0 = new Options();
    Options options1 = options0.addOptionGroup(optionGroup1);
    optionGroup1.setRequired(true);
    HelpFormatter helpFormatter0 = new HelpFormatter();
    helpFormatter0.printHelp(""Oa"", ""Oa"", options1, ""Oa"", true);
    assertEquals(74, helpFormatter0.defaultWidth);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test31145() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    Options options1 = options0.addOption((String) null, ""@} P0M+z<_W6%q,Ke"", true, ""usage: "");
    helpFormatter0.printHelp(""usage: "", ""@} P0M+z<_W6%q,Ke"", options1, ""@} P0M+z<_W6%q,Ke"", true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test32147() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    OptionGroup optionGroup0 = new OptionGroup();
    Option option0 = new Option("""", true, ""--"");
    optionGroup0.addOption(option0);
    option0.setArgName("""");
    Options options1 = options0.addOptionGroup(optionGroup0);
    helpFormatter0.printHelp(""--"", ""a"", options1, ""--"", true);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test34149() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    options0.addOption(""arg"", ""\n"", true, (String) null);
    helpFormatter0.printHelp(""--"", ""usage: "", options0, (String) null, true);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {
    printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage);
}","public void test35150() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    Options options0 = new Options();
    helpFormatter0.printHelp(""w1J^j"", ""usage: "", options0, ""[ Options: [ short java.util.HashMap@0000000005 ] [ long {\n=[ option: arg \n  ::   ]} ]"", false);
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Print the help for <code>options</code> with the specified
 * command line syntax.  This method prints help information to
 * System.out.
 *
 * @param cmdLineSyntax the syntax for this application
 * @param header the banner to display at the begining of the help
 * @param options the Options instance
 * @param footer the banner to display at the end of the help
 * @param autoUsage whether to print an automatically generated
 * usage statement
 */"
"protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {
    int pos = findWrapPos(text, width, 0);
    if (pos == -1) {
        sb.append(rtrim(text));
        return sb;
    }
    sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    if (nextLineTabStop >= width) {
        // stops infinite loop happening
        nextLineTabStop = 1;
    }
    // all following lines must be padded with nextLineTabStop space
    // characters
    final String padding = createPadding(nextLineTabStop);
    while (true) {
        text = padding + text.substring(pos).trim();
        pos = findWrapPos(text, width, 0);
        if (pos == -1) {
            sb.append(text);
            return sb;
        }
        if ((text.length() > width) && (pos == nextLineTabStop - 1)) {
            pos = width;
        }
        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
    }
}","public void test36152() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""usage: "");
    // Undeclared exception!
    try {
        helpFormatter0.renderWrappedText(stringBuffer0, 3, 3, ""[ Options: [ short "");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Render the specified text and return the rendered Options
 * in a StringBuffer.
 *
 * @param sb The StringBuffer to place the rendered text into.
 * @param width The number of characters to display per line
 * @param nextLineTabStop The position on the next line for the first tab.
 * @param text The text to be rendered.
 *
 * @return the StringBuffer with the rendered Options contents.
 */"
"public void printWrapped(PrintWriter pw, int width, String text) {
    printWrapped(pw, width, 0, text);
}","public void test37153() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    MockFile mockFile0 = new MockFile(""\n"");
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
    // Undeclared exception!
    helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, "" "");
}","/**
 * Print the specified text to the specified PrintWriter.
 *
 * @param pw The printWriter to write the help to
 * @param width The number of characters to display per line
 * @param text The text to be written to the PrintWriter
 */"
"protected int findWrapPos(String text, int width, int startPos) {
    int pos = -1;
    // the line ends before the max wrap pos or a new line char found
    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width)) {
        return pos + 1;
    } else if (startPos + width >= text.length()) {
        return -1;
    }
    // look for the last whitespace character before startPos+width
    pos = startPos + width;
    char c;
    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        --pos;
    }
    // if we found it - just return
    if (pos > startPos) {
        return pos;
    }
    // must look for the first whitespace chearacter after startPos
    // + width
    pos = startPos + width;
    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        ++pos;
    }
    return (pos == text.length()) ? (-1) : pos;
}","public void test38154() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    // Undeclared exception!
    try {
        helpFormatter0.findWrapPos(""\n"", (-1048), (-1048));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Finds the next text wrap position after <code>startPos</code> for the
 * text in <code>text</code> with the column width <code>width</code>.
 * The wrap point is the last postion before startPos+width having a
 * whitespace character (space, \n, \r).
 *
 * @param text The text being searched for the wrap position
 * @param width width of the wrapped text
 * @param startPos position from which to start the lookup whitespace
 * character
 * @return postion on which the text must be wrapped or -1 if the wrap
 * position is at the end of the text
 */"
"protected int findWrapPos(String text, int width, int startPos) {
    int pos = -1;
    // the line ends before the max wrap pos or a new line char found
    if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\t', startPos)) != -1 && pos <= width)) {
        return pos + 1;
    } else if (startPos + width >= text.length()) {
        return -1;
    }
    // look for the last whitespace character before startPos+width
    pos = startPos + width;
    char c;
    while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        --pos;
    }
    // if we found it - just return
    if (pos > startPos) {
        return pos;
    }
    // must look for the first whitespace chearacter after startPos
    // + width
    pos = startPos + width;
    while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\n') && (c != '\r')) {
        ++pos;
    }
    return (pos == text.length()) ? (-1) : pos;
}","public void test39155() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Finds the next text wrap position after <code>startPos</code> for the
 * text in <code>text</code> with the column width <code>width</code>.
 * The wrap point is the last postion before startPos+width having a
 * whitespace character (space, \n, \r).
 *
 * @param text The text being searched for the wrap position
 * @param width width of the wrapped text
 * @param startPos position from which to start the lookup whitespace
 * character
 * @return postion on which the text must be wrapped or -1 if the wrap
 * position is at the end of the text
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test39157() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    int int0 = helpFormatter0.findWrapPos(""\n"", (-1), 1);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test40159() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"protected String rtrim(String s) {
    if ((s == null) || (s.length() == 0)) {
        return s;
    }
    int pos = s.length();
    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {
        --pos;
    }
    return s.substring(0, pos);
}","public void test40160() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(1, helpFormatter0.defaultLeftPad);
}","/**
 * Remove the trailing whitespace from the specified String.
 *
 * @param s The String to remove the trailing padding from.
 *
 * @return The String of without the trailing padding
 */"
"public String getLongOptPrefix() {
    return defaultLongOptPrefix;
}","public void test40162() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}","/**
 * Returns the 'longOptPrefix'.
 *
 * @return the 'longOptPrefix'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test40165() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test40166() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test40167() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim((String) null);
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"protected String rtrim(String s) {
    if ((s == null) || (s.length() == 0)) {
        return s;
    }
    int pos = s.length();
    while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) {
        --pos;
    }
    return s.substring(0, pos);
}","public void test41168() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim("" "");
    assertEquals(3, helpFormatter0.defaultDescPad);
}","/**
 * Remove the trailing whitespace from the specified String.
 *
 * @param s The String to remove the trailing padding from.
 *
 * @return The String of without the trailing padding
 */"
"public String getOptPrefix() {
    return defaultOptPrefix;
}","public void test41169() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim("" "");
    assertEquals(""-"", helpFormatter0.getOptPrefix());
}","/**
 * Returns the 'optPrefix'.
 *
 * @return the 'optPrefix'
 */"
"public String getSyntaxPrefix() {
    return defaultSyntaxPrefix;
}","public void test41171() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim("" "");
    assertEquals(""usage: "", helpFormatter0.getSyntaxPrefix());
}","/**
 * Returns the 'syntaxPrefix'.
 *
 * @return the 'syntaxPrefix'
 */"
"public String getArgName() {
    return defaultArgName;
}","public void test41173() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim("" "");
    assertEquals(""arg"", helpFormatter0.getArgName());
}","/**
 * Returns the 'argName'.
 *
 * @return the 'argName'
 */"
"public String getLongOptSeparator() {
    return longOptSeparator;
}","public void test41174() throws Throwable {
    HelpFormatter helpFormatter0 = new HelpFormatter();
    String string0 = helpFormatter0.rtrim("" "");
    assertEquals("" "", helpFormatter0.getLongOptSeparator());
}","/**
 * Returns the separator displayed between a long option and its value.
 *
 * @return the separator
 * @since 1.3
 */"
