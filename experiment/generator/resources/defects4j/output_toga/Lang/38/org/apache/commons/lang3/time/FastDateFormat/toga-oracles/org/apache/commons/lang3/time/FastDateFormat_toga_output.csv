project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test005,"public void test005() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test006,"public void test006() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test007,"public void test007() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0016,"public void test0016() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test0024,"public void test0024() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test0029,"public void test0029() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""B:>]S[=_Pv8oQ"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test0036,"public void test0036() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""B:>]S[=_Pv8oQ"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0037,"public void test0037() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""B:>]S[=_Pv8oQ"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0038,"public void test0038() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""B:>]S[=_Pv8oQ"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0045,"public void test0045() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar) mockSimpleDateFormat0.getCalendar();
    Date date0 = mockGregorianCalendar0.getGregorianChange();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""B:>]S[=_Pv8oQ"");
    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test0160,"public void test0160() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0166,"public void test0166() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test0167,"public void test0167() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0168,"public void test0168() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0169,"public void test0169() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 1, 16, (-359), 1992, 3);
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62196126477000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=33,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=12,SECOND=3,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test0280,"public void test0280() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0291,"public void test0291() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0292,"public void test0292() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test0293,"public void test0293() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0294,"public void test0294() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    fastDateFormat0.init();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test02104,"public void test02104() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    fastDateFormat0.init();
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test02105,"public void test02105() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    fastDateFormat0.init();
    assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test02106,"public void test02106() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""6"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    fastDateFormat0.init();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test03107,"public void test03107() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",1,
project,0,test03112,"public void test03112() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test03113,"public void test03113() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test03114,"public void test03114() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test03115,"public void test03115() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test03122,"public void test03122() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test03123,"public void test03123() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test03124,"public void test03124() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0);
    int[] intArray0 = new int[7];
    String string0 = fastDateFormat0.parseToken(""Urk}#"", intArray0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test04133,"public void test04133() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test04144,"public void test04144() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test04145,"public void test04145() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test04146,"public void test04146() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test04147,"public void test04147() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test04158,"public void test04158() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test04159,"public void test04159() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test04160,"public void test04160() throws Throwable {
    Locale locale0 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test05162,"public void test05162() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    assertNotNull(timeZone0);
}",0,
project,0,test05167,"public void test05167() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test05176,"public void test05176() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test05177,"public void test05177() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertEquals(""h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test05178,"public void test05178() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test06188,"public void test06188() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test06200,"public void test06200() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertEquals(""H.mm.ss z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test06201,"public void test06201() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test06202,"public void test06202() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test06203,"public void test06203() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test06215,"public void test06215() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(""H.mm.ss z"", fastDateFormat0.getPattern());
}",0,
project,0,test06216,"public void test06216() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test06217,"public void test06217() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test07225,"public void test07225() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test07236,"public void test07236() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test07237,"public void test07237() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test07238,"public void test07238() throws Throwable {
    Locale locale0 = Locale.US;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test08247,"public void test08247() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    assertNotNull(timeZone0);
}",0,assertNotNull(timeZone0)
project,0,test08252,"public void test08252() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""&'C"", timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test08267,"public void test08267() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""&'C"", timeZone0, locale0);
    assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test08268,"public void test08268() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""&'C"", timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test08269,"public void test08269() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""&'C"", timeZone0, locale0);
    assertEquals(""&'C"", fastDateFormat0.getPattern());
}",0,
project,0,test09270,"public void test09270() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test09275,"public void test09275() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test09276,"public void test09276() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test09277,"public void test09277() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test10285,"public void test10285() throws Throwable {
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""&."", locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test10296,"public void test10296() throws Throwable {
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""&."", locale0);
    assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test10297,"public void test10297() throws Throwable {
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""&."", locale0);
    assertEquals(""&."", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test10298,"public void test10298() throws Throwable {
    Locale locale0 = Locale.ITALY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""&."", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test11299,"public void test11299() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'L[d"");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test11304,"public void test11304() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'L[d"");
    assertEquals(""'L[d"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test11305,"public void test11305() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'L[d"");
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test11306,"public void test11306() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'L[d"");
    assertEquals(3, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test12307,"public void test12307() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test12312,"public void test12312() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
    assertEquals(""MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test12313,"public void test12313() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
    assertEquals(39, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test12314,"public void test12314() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test13315,"public void test13315() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test13320,"public void test13320() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test13321,"public void test13321() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test13322,"public void test13322() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) null);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test14325,"public void test14325() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test14331,"public void test14331() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test14332,"public void test14332() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test14333,"public void test14333() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test14338,"public void test14338() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test14346,"public void test14346() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test14347,"public void test14347() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test14348,"public void test14348() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test14349,"public void test14349() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    MockDate mockDate0 = new MockDate(3, 89, 1, 4, 648);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""Wed Jun 01 14:48:00 GMT 1910"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test15363,"public void test15363() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test15375,"public void test15375() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test15376,"public void test15376() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test15377,"public void test15377() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test15379,"public void test15379() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test15392,"public void test15392() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test15393,"public void test15393() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test15394,"public void test15394() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test15395,"public void test15395() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate((-2848), 1, 284, (-2305), (-2305), 1916);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""Mon Aug 04 09:06:56 GMT 949"", mockDate0.toString());
}",0,
project,0,test16396,"public void test16396() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test16401,"public void test16401() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test16402,"public void test16402() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test16403,"public void test16403() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test16405,"public void test16405() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    assertNotNull(timeZone0);
}",0,
project,0,test16410,"public void test16410() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    assertNotNull(calendar0);
}",0,
project,0,test16419,"public void test16419() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test16425,"public void test16425() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test16426,"public void test16426() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test16427,"public void test16427() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""");
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test17450,"public void test17450() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test17458,"public void test17458() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test17459,"public void test17459() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test17460,"public void test17460() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((long) 3, stringBuffer0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test18485,"public void test18485() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""B:>]S[=_Pv8oQ"");
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test18492,"public void test18492() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""B:>]S[=_Pv8oQ"");
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test18493,"public void test18493() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""B:>]S[=_Pv8oQ"");
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test18494,"public void test18494() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""B:>]S[=_Pv8oQ"");
    StringBuffer stringBuffer1 = fastDateFormat0.applyRules(calendar0, stringBuffer0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test19514,"public void test19514() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    int[] intArray0 = new int[5];
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken("""", intArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",0,
project,0,test20515,"public void test20515() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test20520,"public void test20520() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test20521,"public void test20521() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test20522,"public void test20522() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test20523,"public void test20523() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    int[] intArray0 = new int[6];
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken((String) null, intArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test21532,"public void test21532() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[0];
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken(""u+drihRG.lY\""~6"", intArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test22546,"public void test22546() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test22562,"public void test22562() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test22563,"public void test22563() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test22564,"public void test22564() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test22565,"public void test22565() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", simpleTimeZone0, locale0);
    // Undeclared exception!
    try {
        fastDateFormat0.parseObject(""2;Og@Nt"", (ParsePosition) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test23572,"public void test23572() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3673, """");
    // Undeclared exception!
    try {
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 3673, (Locale) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"", e);
    }
}",0,
project,0,test24586,"public void test24586() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDateFormat$TextField"");
    Locale locale0 = Locale.KOREA;
    // Undeclared exception!
    try {
        FastDateFormat.getTimeZoneDisplay(simpleTimeZone0, true, 122, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal style: 122
        //
        verifyException(""java.util.TimeZone"", e);
    }
}",0,
project,0,test25589,"public void test25589() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(1390, timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 1390
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test26590,"public void test26590() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(518, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 518
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test27591,"public void test27591() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance((-438));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style -438
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test28592,"public void test28592() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(276, 276, (TimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 276
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test29600,"public void test29600() throws Throwable {
    Locale locale0 = Locale.CANADA;
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance((-750), (-750), locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style -750
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test30601,"public void test30601() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(11, 3);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 11
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test31604,"public void test31604() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance((-2650), timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style -2650
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test32612,"public void test32612() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(43, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 43
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test33613,"public void test33613() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(1559);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 1559
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test34614,"public void test34614() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test34619,"public void test34619() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test34620,"public void test34620() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test34621,"public void test34621() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test34622,"public void test34622() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    // Undeclared exception!
    try {
        fastDateFormat0.format((Date) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Calendar"", e);
    }
}",0,
project,0,test35630,"public void test35630() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test35641,"public void test35641() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test35642,"public void test35642() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertEquals(""9]Y~%Db~VyH"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test35643,"public void test35643() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test35645,"public void test35645() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat(""9]Y~%Db~VyH"", (TimeZone) null, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 0, 0, 3);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test36653,"public void test36653() throws Throwable {
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test36664,"public void test36664() throws Throwable {
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test36665,"public void test36665() throws Throwable {
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test36666,"public void test36666() throws Throwable {
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test36667,"public void test36667() throws Throwable {
    Locale locale0 = Locale.ROOT;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((-2437L), (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat$TextField"", e);
    }
}",0,
project,0,test37676,"public void test37676() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test37681,"public void test37681() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test37682,"public void test37682() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test37683,"public void test37683() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test38723,"public void test38723() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test38731,"public void test38731() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test38732,"public void test38732() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test38733,"public void test38733() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test38737,"public void test38737() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, (-2177), 0, 0, 54);
    char[] charArray0 = new char[4];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62352892746000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=7,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=54,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test39756,"public void test39756() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39762,"public void test39762() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test39763,"public void test39763() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    assertEquals(""k"", fastDateFormat0.getPattern());
}",0,
project,0,test39764,"public void test39764() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test39785,"public void test39785() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39791,"public void test39791() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test39792,"public void test39792() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    assertEquals(""k"", fastDateFormat0.getPattern());
}",0,
project,0,test39793,"public void test39793() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test39804,"public void test39804() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test39817,"public void test39817() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test39818,"public void test39818() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertEquals(27, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test39819,"public void test39819() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertEquals(""dd/MM/yy h:mm:ss z a"", fastDateFormat1.getPattern());
}",0,assertNotNull(fastDateFormat1.getPattern())
project,0,test39821,"public void test39821() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test39822,"public void test39822() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39830,"public void test39830() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test39831,"public void test39831() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertEquals(""k"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test39832,"public void test39832() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test39833,"public void test39833() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test39835,"public void test39835() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39844,"public void test39844() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test39845,"public void test39845() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(""k"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test39846,"public void test39846() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test39848,"public void test39848() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test39849,"public void test39849() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39858,"public void test39858() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(""M/d/yy"", fastDateFormat2.getPattern());
}",0,assertNotNull(fastDateFormat2.getPattern())
project,0,test39859,"public void test39859() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    assertEquals(10, fastDateFormat2.getMaxLengthEstimate());
}",0,
project,0,test39860,"public void test39860() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    assertTrue(fastDateFormat2.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat2.getTimeZoneOverridesCalendar())
project,0,test39861,"public void test39861() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
}",0,
project,0,test39862,"public void test39862() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
}",0,
project,0,test39867,"public void test39867() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test39881,"public void test39881() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test39882,"public void test39882() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    assertEquals(27, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test39883,"public void test39883() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    assertEquals(""dd/MM/yy h:mm:ss z a"", fastDateFormat1.getPattern());
}",0,
project,0,test39888,"public void test39888() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test39889,"public void test39889() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat2));
}",0,
project,0,test39924,"public void test39924() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test39937,"public void test39937() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test39938,"public void test39938() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""k"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test39939,"public void test39939() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test39942,"public void test39942() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""Sat Feb 01 12:12:00 GMT 1902"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test39943,"public void test39943() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test39944,"public void test39944() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
}",0,
project,0,test39962,"public void test39962() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test39963,"public void test39963() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    assertEquals(""k"", fastDateFormat0.getPattern());
}",0,
project,0,test39964,"public void test39964() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test39969,"public void test39969() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    assertEquals(""Sat Feb 01 12:12:00 GMT 1902"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test39970,"public void test39970() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test39971,"public void test39971() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
}",0,
project,0,test391014,"public void test391014() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test391015,"public void test391015() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    assertEquals(""k"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test391016,"public void test391016() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test391025,"public void test391025() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    assertEquals(""Sat Feb 01 12:12:00 GMT 1902"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test391026,"public void test391026() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test391027,"public void test391027() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
}",0,
project,0,test391072,"public void test391072() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test391073,"public void test391073() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    assertEquals(""k"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test391074,"public void test391074() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test391085,"public void test391085() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    assertEquals(""Sat Feb 01 12:12:00 GMT 1902"", mockDate0.toString());
}",0,
project,0,test391086,"public void test391086() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test391087,"public void test391087() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
}",0,
project,0,test391088,"public void test391088() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test391143,"public void test391143() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test391144,"public void test391144() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertEquals(""k"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test391145,"public void test391145() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertEquals(4, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test391162,"public void test391162() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test391163,"public void test391163() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertEquals(27, fastDateFormat1.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat1.getMaxLengthEstimate())"
project,0,test391164,"public void test391164() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertEquals(""dd/MM/yy h:mm:ss z a"", fastDateFormat1.getPattern());
}",0,assertNotNull(fastDateFormat1.getPattern())
project,0,test391165,"public void test391165() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertEquals(""Sat Feb 01 12:12:00 GMT 1902"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test391166,"public void test391166() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test391167,"public void test391167() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat2));
}",0,
project,0,test391169,"public void test391169() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test391170,"public void test391170() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""k"", timeZone0);
    Locale locale0 = Locale.CANADA;
    ZoneId zoneId0 = timeZone0.toZoneId();
    boolean boolean0 = timeZone0.observesDaylightTime();
    String string0 = timeZone0.getDisplayName(locale0);
    boolean boolean1 = fastDateFormat0.equals((Object) null);
    Locale locale1 = Locale.forLanguageTag("""");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 1, locale0);
    String string1 = fastDateFormat0.getPattern();
    TimeZone timeZone1 = fastDateFormat0.getTimeZone();
    FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(3, timeZone0);
    ParsePosition parsePosition0 = new ParsePosition((-888));
    Object object0 = fastDateFormat1.parseObject("""", parsePosition0);
    String string2 = locale1.getDisplayName();
    MockDate mockDate0 = new MockDate(2, 1, 2, 3, (-888), 0);
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    StringBuffer stringBuffer2 = stringBuffer1.append(0);
    FieldPosition fieldPosition0 = new FieldPosition(945);
    StringBuffer stringBuffer3 = decimalFormat0.format((-1837L), stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer4 = stringBuffer3.append(""%#AZm[miAtF$[5E-"");
    StringBuffer stringBuffer5 = fastDateFormat1.format((Date) mockDate0, stringBuffer3);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat2));
}",0,
project,0,test401183,"public void test401183() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), ""$(@RsifXZVY_3`"");
    Locale locale0 = new Locale(""0|@e(WN#v="", """", ""0|@e(WN#v="");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test401198,"public void test401198() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), ""$(@RsifXZVY_3`"");
    Locale locale0 = new Locale(""0|@e(WN#v="", """", ""0|@e(WN#v="");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test401199,"public void test401199() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), ""$(@RsifXZVY_3`"");
    Locale locale0 = new Locale(""0|@e(WN#v="", """", ""0|@e(WN#v="");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(55, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test401200,"public void test401200() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1907), ""$(@RsifXZVY_3`"");
    Locale locale0 = new Locale(""0|@e(WN#v="", """", ""0|@e(WN#v="");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test411208,"public void test411208() throws Throwable {
    Locale locale0 = Locale.CHINESE;
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(801, 2210, (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 2210
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test421211,"public void test421211() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""org.apache.commons.lang3.time.FastDateFormat$TimeZoneDisplayKey"");
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance((-978), timeZone0, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style -978
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test431221,"public void test431221() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test431233,"public void test431233() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test431234,"public void test431234() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test431235,"public void test431235() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test441236,"public void test441236() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(65, (TimeZone) null, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 65
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test451265,"public void test451265() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test451271,"public void test451271() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test451272,"public void test451272() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test451273,"public void test451273() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test451440,"public void test451440() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test451444,"public void test451444() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test451473,"public void test451473() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test451474,"public void test451474() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test451475,"public void test451475() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test451500,"public void test451500() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test451540,"public void test451540() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test451541,"public void test451541() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test451542,"public void test451542() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test451567,"public void test451567() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test451580,"public void test451580() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(10, fastDateFormat1.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat1.getMaxLengthEstimate())"
project,0,test451581,"public void test451581() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertEquals(""yyyy-MM-dd"", fastDateFormat1.getPattern());
}",0,
project,0,test451582,"public void test451582() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test451583,"public void test451583() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test451584,"public void test451584() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    TimeZone.setDefault(timeZone0);
    Locale locale0 = Locale.CANADA_FRENCH;
    String string0 = timeZone0.getDisplayName(false, 0, locale0);
    String string1 = timeZone0.getDisplayName(false, 0, locale0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
    Long long0 = new Long(1L);
    boolean boolean0 = timeZone0.observesDaylightTime();
    DecimalFormat decimalFormat0 = (DecimalFormat) NumberFormat.getPercentInstance(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""GMT"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = decimalFormat0.format(0.0, stringBuffer0, fieldPosition0);
    StringBuffer stringBuffer2 = stringBuffer0.append((CharSequence) ""GMT"");
    StringBuffer stringBuffer3 = stringBuffer1.insert(0, true);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
    StringBuffer stringBuffer4 = stringBuffer1.append((Object) mockGregorianCalendar0);
    StringBuffer stringBuffer5 = fastDateFormat0.format((Object) long0, stringBuffer1, fieldPosition0);
    StringBuffer stringBuffer6 = fastDateFormat0.format((Object) long0, stringBuffer5, fieldPosition0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2, timeZone0, locale0);
    String string2 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 1, locale0);
    assertNotNull(string2);
}",0,assertNotNull(string2)
project,0,test461601,"public void test461601() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test461611,"public void test461611() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test461612,"public void test461612() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test461613,"public void test461613() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test461621,"public void test461621() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test461631,"public void test461631() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test461632,"public void test461632() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test461633,"public void test461633() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test461644,"public void test461644() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test461658,"public void test461658() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test461659,"public void test461659() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test461660,"public void test461660() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test461665,"public void test461665() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test461674,"public void test461674() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test461675,"public void test461675() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test461676,"public void test461676() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test461708,"public void test461708() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test461719,"public void test461719() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    assertEquals(""M/d/yy h:mm:ss a z"", fastDateFormat1.getPattern());
}",0,assertNotNull(fastDateFormat1.getPattern())
project,0,test461720,"public void test461720() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test461721,"public void test461721() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    assertEquals(34, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test461722,"public void test461722() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test461731,"public void test461731() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test461739,"public void test461739() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    assertEquals(0, fastDateFormat2.getMaxLengthEstimate());
}",0,
project,0,test461740,"public void test461740() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    assertEquals("""", fastDateFormat2.getPattern());
}",0,assertNotNull(fastDateFormat2.getPattern())
project,0,test461741,"public void test461741() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    assertTrue(fastDateFormat2.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat2.getTimeZoneOverridesCalendar())
project,0,test461753,"public void test461753() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat1));
}",0,
project,0,test461754,"public void test461754() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    assertFalse(fastDateFormat2.equals((Object) fastDateFormat0));
}",0,
project,0,test461756,"public void test461756() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test461765,"public void test461765() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    assertEquals(17, fastDateFormat3.getMaxLengthEstimate());
}",0,
project,0,test461766,"public void test461766() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    assertEquals(""yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE"", fastDateFormat3.getPattern());
}",0,assertNotNull(fastDateFormat3.getPattern())
project,0,test461767,"public void test461767() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    assertFalse(fastDateFormat3.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat3.getTimeZoneOverridesCalendar())
project,0,test461774,"public void test461774() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat1));
}",0,
project,0,test461775,"public void test461775() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat0));
}",0,
project,0,test461776,"public void test461776() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat2));
}",0,
project,0,test461783,"public void test461783() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
    String string0 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test461793,"public void test461793() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
    String string0 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(17, fastDateFormat3.getMaxLengthEstimate());
}",0,
project,0,test461794,"public void test461794() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
    String string0 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(""yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE"", fastDateFormat3.getPattern());
}",0,assertNotNull(fastDateFormat3.getPattern())
project,0,test461795,"public void test461795() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
    String string0 = fastDateFormat3.format((Date) mockDate0);
    assertFalse(fastDateFormat3.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat3.getTimeZoneOverridesCalendar())
project,0,test461796,"public void test461796() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
    String string0 = fastDateFormat3.format((Date) mockDate0);
    assertEquals(""Sun May 03 15:56:00 GMT 1925"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test461803,"public void test461803() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
    String string0 = fastDateFormat3.format((Date) mockDate0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat1));
}",0,
project,0,test461804,"public void test461804() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
    String string0 = fastDateFormat3.format((Date) mockDate0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat0));
}",0,
project,0,test461805,"public void test461805() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
    String string0 = fastDateFormat3.format((Date) mockDate0);
    assertFalse(fastDateFormat3.equals((Object) fastDateFormat2));
}",0,
project,0,test461807,"public void test461807() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    Object object0 = fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    StringBuffer stringBuffer2 = fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedHashSet0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale locale2 = Locale.lookup(linkedList0, list0);
    FastDateFormat fastDateFormat2 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(0, locale1);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
    String string0 = fastDateFormat3.format((Date) mockDate0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Object) mockSimpleDateFormat0, stringBuffer1, fieldPosition0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test481824,"public void test481824() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test481835,"public void test481835() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z"", fastDateFormat0.getPattern());
}",0,
project,0,test481836,"public void test481836() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(58, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test481837,"public void test481837() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test491846,"public void test491846() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test491857,"public void test491857() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test491858,"public void test491858() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
    assertEquals(""yyyy'\u5E74'M'\u6708'd'\u65E5'"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test491859,"public void test491859() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
    assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test501888,"public void test501888() throws Throwable {
    String string0 = """";
    Locale locale0 = Locale.ENGLISH;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
    Locale locale1 = Locale.lookup(linkedList0, list0);
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test501894,"public void test501894() throws Throwable {
    String string0 = """";
    Locale locale0 = Locale.ENGLISH;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
    Locale locale1 = Locale.lookup(linkedList0, list0);
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
    assertEquals(""MMM d, yyyy h:mm:ss a"", fastDateFormat0.getPattern());
}",0,
project,0,test501895,"public void test501895() throws Throwable {
    String string0 = """";
    Locale locale0 = Locale.ENGLISH;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
    Locale locale1 = Locale.lookup(linkedList0, list0);
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test501896,"public void test501896() throws Throwable {
    String string0 = """";
    Locale locale0 = Locale.ENGLISH;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
    Locale locale1 = Locale.lookup(linkedList0, list0);
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
    assertEquals(28, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test501897,"public void test501897() throws Throwable {
    String string0 = """";
    Locale locale0 = Locale.ENGLISH;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
    List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
    Locale locale1 = Locale.lookup(linkedList0, list0);
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(2, 2, timeZone0);
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(73, timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 73
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test511898,"public void test511898() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""xY=@f&dA]Vt8U`&4|]"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: x
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test521899,"public void test521899() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""und"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: u
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test531907,"public void test531907() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""htC+iAsdS2#%*>BG"", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: t
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test541908,"public void test541908() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""@H(d*8qNRb\u0001$;g;eW"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: q
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test551918,"public void test551918() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.US;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""<null>"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: n
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test561926,"public void test561926() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""gl#+/t~.LgR_d%q"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: g
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test571940,"public void test571940() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(408, """");
    Locale locale0 = new Locale("""");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""];fP>%Q\""w"", (TimeZone) simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: f
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test581947,"public void test581947() throws Throwable {
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""cu+&Tf&53r^xfe!*`l@"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: c
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test591955,"public void test591955() throws Throwable {
    Locale locale0 = Locale.ROOT;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""-b>/gir%,"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: b
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test601956,"public void test601956() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""ZzBMHX.Xs,:pO[wVvQ"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: B
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test611964,"public void test611964() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""YW*-M"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: Y
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test621965,"public void test621965() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""#@:VG&p4("");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: V
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test631966,"public void test631966() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("":Uhxdjbv"", (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: U
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test641967,"public void test641967() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""Tis`#pMDw.`n~_g|U"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: T
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test651968,"public void test651968() throws Throwable {
    Locale locale0 = Locale.FRENCH;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""w$RV7HWI "", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: R
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test661969,"public void test661969() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""sP`u+I ,=U*"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: P
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test671970,"public void test671970() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""k"");
    Locale locale0 = Locale.CANADA;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("".L$D&HvPb"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: L
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test681971,"public void test681971() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("">WK6e]DBk"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: e
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test691972,"public void test691972() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""#%F=JFk6A5Dbi1LAQ"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: J
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test701973,"public void test701973() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""9GIgE-"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: I
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test711974,"public void test711974() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""G66}%5!O?u@7"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: O
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test721975,"public void test721975() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""z}FWDo."", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: o
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test731976,"public void test731976() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""C8Ktk@{OLOnR"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: C
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test741977,"public void test741977() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.ENGLISH;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""AL+YIJ6T*8\""x"", (TimeZone) simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: A
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test751978,"public void test751978() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The pattern must not be null
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test761979,"public void test761979() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    StringBuffer stringBuffer0 = new StringBuffer("""");
    ParsePosition parsePosition0 = new ParsePosition((-2803));
    fastDateFormat0.parseObject(""YW*-M"", parsePosition0);
    StringBuffer stringBuffer1 = stringBuffer0.append((Object) null);
    fastDateFormat0.format(45L, stringBuffer0);
    fastDateFormat0.hashCode();
    Locale locale0 = Locale.GERMANY;
    FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("""", locale0);
    Locale locale1 = Locale.CHINA;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
    LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
    FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    Locale.lookup(linkedList0, linkedList1);
    FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0, locale1);
    FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(2);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
    MockDate mockDate0 = new MockDate(1, 221, 2250, (-2050), 116);
    fastDateFormat1.format((Date) mockDate0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Object) mockSimpleDateFormat0, stringBuffer1, fieldPosition0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",1,
project,0,test771980,"public void test771980() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    String string0 = fastDateFormat0.format((-1796L));
    assertEquals(""12/31/69 11:59:58 PM GMT+00:00"", string0);
}",0,
project,0,test781981,"public void test781981() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""\""\""v!j.#"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: v
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat"", e);
    }
}",0,
project,0,test791982,"public void test791982() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test801983,"public void test801983() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat1.getMaxLengthEstimate())"
project,0,test801984,"public void test801984() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
    assertNotSame(fastDateFormat1, fastDateFormat0);
}",0,
project,0,test811986,"public void test811986() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(0, int0);
}",0,
project,0,test811987,"public void test811987() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test821988,"public void test821988() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    String string0 = fastDateFormat0.toString();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test821989,"public void test821989() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (Locale) null);
    String string0 = fastDateFormat0.toString();
    assertEquals(""FastDateFormat[]"", string0);
}",0,
project,0,test831990,"public void test831990() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2571), 1713, 1, 1, 20);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDateFormat$UnpaddedNumberField"", e);
    }
}",0,
project,0,test851992,"public void test851992() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, (TimeZone) null);
    assertEquals(""h:mm a"", fastDateFormat0.getPattern());
}",0,
