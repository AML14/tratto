project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0005,"public void test0005() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test0006,"public void test0006() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0007,"public void test0007() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test0008,"public void test0008() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    fastDateFormat0.init();
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test00012,"public void test00012() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    fastDateFormat0.init();
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test00013,"public void test00013() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    fastDateFormat0.init();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test00014,"public void test00014() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    fastDateFormat0.init();
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test00115,"public void test00115() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test00120,"public void test00120() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test00121,"public void test00121() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test00122,"public void test00122() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test00123,"public void test00123() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertEquals(""'#"", string0);
}",0,
project,0,test00129,"public void test00129() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test00130,"public void test00130() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test00131,"public void test00131() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    int[] intArray0 = new int[6];
    String string0 = fastDateFormat0.parseToken(""#fgg0XqGjy$K(D"", intArray0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test00244,"public void test00244() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",1,
project,0,test00256,"public void test00256() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test00257,"public void test00257() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test00258,"public void test00258() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test00259,"public void test00259() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test00271,"public void test00271() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test00272,"public void test00272() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test00273,"public void test00273() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test003101,"public void test003101() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test003113,"public void test003113() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test003114,"public void test003114() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test003115,"public void test003115() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.JAPANESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", timeZone0, locale0);
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test004126,"public void test004126() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.ENGLISH;
    String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);
    assertEquals(""GMT-18:00"", string0);
}",0,assertNotNull(string0)
project,0,test005141,"public void test005141() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test005151,"public void test005151() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test005152,"public void test005152() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test005153,"public void test005153() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test005154,"public void test005154() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test005164,"public void test005164() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(""EEEE, MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test005165,"public void test005165() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test005166,"public void test005166() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test005169,"public void test005169() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, ""0\""ED.Cahr1Cm/{Vt"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(""java.util.SimpleTimeZone[id=0\""ED.Cahr1Cm/{Vt,offset=2596,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]"", timeZone0.toString());
}",0,
project,0,test006180,"public void test006180() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test006190,"public void test006190() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test006191,"public void test006191() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test006192,"public void test006192() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test006193,"public void test006193() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test006203,"public void test006203() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test006204,"public void test006204() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test006205,"public void test006205() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test006209,"public void test006209() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    TimeZone timeZone0 = fastDateFormat0.getTimeZone();
    assertEquals(""java.util.SimpleTimeZone[id=IH2,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]"", timeZone0.toString());
}",0,
project,0,test007220,"public void test007220() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test007231,"public void test007231() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test007232,"public void test007232() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test007233,"public void test007233() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test007234,"public void test007234() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertEquals("""", string0);
}",0,
project,0,test007246,"public void test007246() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test007247,"public void test007247() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test007248,"public void test007248() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.getPattern();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test008256,"public void test008256() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test008267,"public void test008267() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test008268,"public void test008268() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test008269,"public void test008269() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test008270,"public void test008270() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(0, int0);
}",0,
project,0,test008281,"public void test008281() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test008282,"public void test008282() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test008283,"public void test008283() throws Throwable {
    Locale locale0 = Locale.CANADA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test009297,"public void test009297() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test009313,"public void test009313() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(46, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test009314,"public void test009314() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test009315,"public void test009315() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", (TimeZone) simpleTimeZone0, locale0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", fastDateFormat0.getPattern());
}",0,
project,0,test010316,"public void test010316() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test010321,"public void test010321() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test010322,"public void test010322() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test010323,"public void test010323() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test011331,"public void test011331() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test011342,"public void test011342() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test011343,"public void test011343() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertEquals(""'XETJC"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test011344,"public void test011344() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""'XETJC"", locale0);
    assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test012345,"public void test012345() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test012350,"public void test012350() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test012351,"public void test012351() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test012352,"public void test012352() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);
    assertEquals(""MMMM d, yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test013360,"public void test013360() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test013371,"public void test013371() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test013372,"public void test013372() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test013373,"public void test013373() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test013375,"public void test013375() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test013386,"public void test013386() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test013387,"public void test013387() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test013388,"public void test013388() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test013389,"public void test013389() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals(""Fri Feb 14 20:21:21 GMT 2014"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test014412,"public void test014412() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals("""", string0);
}",0,
project,0,test014424,"public void test014424() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test014425,"public void test014425() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test014426,"public void test014426() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test014427,"public void test014427() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""Fri Feb 14 20:21:21 GMT 2014"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test015436,"public void test015436() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Calendar calendar0 = MockCalendar.getInstance();
    assertNotNull(calendar0);
}",0,"assertEquals(fastDateFormat0, calendar0)"
project,0,test015444,"public void test015444() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Calendar calendar0 = MockCalendar.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test015449,"public void test015449() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Calendar calendar0 = MockCalendar.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test015450,"public void test015450() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Calendar calendar0 = MockCalendar.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test015451,"public void test015451() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Calendar calendar0 = MockCalendar.getInstance();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""A:="");
    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test016462,"public void test016462() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test016467,"public void test016467() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test016468,"public void test016468() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test016469,"public void test016469() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test016479,"public void test016479() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals("""", string0);
}",0,assertNotNull(string0)
project,0,test016485,"public void test016485() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test016486,"public void test016486() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test016487,"public void test016487() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test017502,"public void test017502() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test017513,"public void test017513() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test017514,"public void test017514() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test017515,"public void test017515() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test017516,"public void test017516() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertEquals("""", string0);
}",0,
project,0,test017528,"public void test017528() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test017529,"public void test017529() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test017530,"public void test017530() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", locale0);
    String string0 = fastDateFormat0.format(2480L);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test018538,"public void test018538() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test018549,"public void test018549() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test018550,"public void test018550() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE"", fastDateFormat0.getPattern());
}",0,
project,0,test018551,"public void test018551() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test018552,"public void test018552() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    int[] intArray0 = new int[3];
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken("""", intArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",0,
project,0,test019561,"public void test019561() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    // Undeclared exception!
    try {
        fastDateFormat0.parseToken("""", (int[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test020569,"public void test020569() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    // Undeclared exception!
    try {
        FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test021578,"public void test021578() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""n;P:<ffkD7dzT1_@'"");
    Locale locale0 = new Locale(""n;P:<ffkD7dzT1_@'"");
    // Undeclared exception!
    try {
        FastDateFormat.getTimeZoneDisplay(timeZone0, false, 13, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal style: 13
        //
        verifyException(""java.util.TimeZone"", e);
    }
}",0,
project,0,test022588,"public void test022588() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.forLanguageTag(""A:="");
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(2623, timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 2623
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test023595,"public void test023595() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(15, (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 15
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test024603,"public void test024603() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(739, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 739
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test025604,"public void test025604() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getTimeInstance(100);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 100
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test026607,"public void test026607() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""FastDateFormat["");
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(16, 1668, timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 1668
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test027608,"public void test027608() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(13, 31);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal time style 31
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test028615,"public void test028615() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-186), """");
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(1667, (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 1667
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test029622,"public void test029622() throws Throwable {
    Locale locale0 = new Locale(""elDq# !hTb"");
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(1502, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 1502
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test030623,"public void test030623() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance((-2289));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style -2289
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",1,
project,0,test031633,"public void test031633() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(10, 835, 0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField"", e);
    }
}",0,
project,0,test032642,"public void test032642() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    // Undeclared exception!
    try {
        fastDateFormat0.format((Date) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test033643,"public void test033643() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test033648,"public void test033648() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test033649,"public void test033649() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test033650,"public void test033650() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test033651,"public void test033651() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    // Undeclared exception!
    try {
        fastDateFormat0.format(0L, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField"", e);
    }
}",0,
project,0,test034661,"public void test034661() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test034673,"public void test034673() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test034674,"public void test034674() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test034675,"public void test034675() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test034676,"public void test034676() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDateFormat fastDateFormat0 = new FastDateFormat("""", timeZone0, locale0);
    // Undeclared exception!
    try {
        fastDateFormat0.format(0L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test035688,"public void test035688() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    StringBuffer stringBuffer0 = new StringBuffer(""No date time pattern for locale: "");
    // Undeclared exception!
    try {
        fastDateFormat0.applyRules((Calendar) null, stringBuffer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat$TextField"", e);
    }
}",0,
project,0,test036697,"public void test036697() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test036701,"public void test036701() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test036702,"public void test036702() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test036703,"public void test036703() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    fastDateFormat0.hashCode();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test037707,"public void test037707() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test037713,"public void test037713() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test037714,"public void test037714() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test037715,"public void test037715() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test037716,"public void test037716() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    fastDateFormat0.hashCode();
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test037721,"public void test037721() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    fastDateFormat0.hashCode();
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test037722,"public void test037722() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    fastDateFormat0.hashCode();
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test037723,"public void test037723() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    fastDateFormat0.hashCode();
    assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test038736,"public void test038736() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test038742,"public void test038742() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test038743,"public void test038743() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test038744,"public void test038744() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test039751,"public void test039751() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test039761,"public void test039761() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test039762,"public void test039762() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test039763,"public void test039763() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test039775,"public void test039775() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(0, FastDateFormat.FULL);
}",0,
project,0,test039785,"public void test039785() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test039786,"public void test039786() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,
project,0,test039787,"public void test039787() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test039794,"public void test039794() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) simpleTimeZone0);
    Locale locale0 = Locale.ITALY;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) """");
    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test040820,"public void test040820() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Locale locale0 = Locale.US;
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField"", e);
    }
}",0,
project,0,test041821,"public void test041821() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance((-1105), 0, (TimeZone) null, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style -1105
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test042831,"public void test042831() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test042843,"public void test042843() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h:mm:ss"", fastDateFormat0.getPattern());
}",0,
project,0,test042844,"public void test042844() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test042845,"public void test042845() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" 9JtTd.$cJi'MXwGE"");
    Locale locale0 = Locale.KOREA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);
    assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test043853,"public void test043853() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test043864,"public void test043864() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test043865,"public void test043865() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
    assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test043866,"public void test043866() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a"", fastDateFormat0.getPattern());
}",0,
project,0,test044880,"public void test044880() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test044896,"public void test044896() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(""ahh'\u65F6'mm'\u5206'ss'\u79D2' z"", fastDateFormat0.getPattern());
}",0,
project,0,test044897,"public void test044897() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test044898,"public void test044898() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 0, 0, 45, 0, 45, 0, 1);
    Locale locale0 = Locale.CHINA;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test045906,"public void test045906() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test045917,"public void test045917() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test045918,"public void test045918() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test045919,"public void test045919() throws Throwable {
    Locale locale0 = new Locale("""", """", """");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test046933,"public void test046933() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test046949,"public void test046949() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test046950,"public void test046950() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test046951,"public void test046951() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(""EEEE, d. MMMM yyyy"", fastDateFormat0.getPattern());
}",0,
project,0,test047952,"public void test047952() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateInstance(103, (TimeZone) null, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 103
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test048965,"public void test048965() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(1, (-1), (-416));
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test048970,"public void test048970() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(1, (-1), (-416));
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test048971,"public void test048971() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(1, (-1), (-416));
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test048972,"public void test048972() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(1, (-1), (-416));
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test048973,"public void test048973() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(1, (-1), (-416));
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""Tue Oct 10 00:00:00 GMT 1899"", mockDate0.toString());
}",0,assertNotNull(mockDate0.toString())
project,0,test049989,"public void test049989() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""1/1/70 12:00 AM"", string0);
}",0,
project,0,test049995,"public void test049995() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test049996,"public void test049996() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test049997,"public void test049997() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test049998,"public void test049998() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    MockDate mockDate0 = new MockDate(4120L);
    String string0 = fastDateFormat0.format((Date) mockDate0);
    assertEquals(""Thu Jan 01 00:00:04 GMT 1970"", mockDate0.toString());
}",0,
project,0,test050999,"public void test050999() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0501004,"public void test0501004() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0501005,"public void test0501005() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test0501006,"public void test0501006() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0501008,"public void test0501008() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(""Friday, February 28, 0122 11:59:00 PM GMT"", string0);
}",0,
project,0,test0501014,"public void test0501014() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0501015,"public void test0501015() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(""EEEE, MMMM d, yyyy h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test0501016,"public void test0501016() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0501017,"public void test0501017() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));
    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58312224060000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=122,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test0511024,"public void test0511024() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0511029,"public void test0511029() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertEquals(""sa"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0511030,"public void test0511030() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0511031,"public void test0511031() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0511032,"public void test0511032() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0511038,"public void test0511038() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test0511039,"public void test0511039() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    assertEquals(""sa"", fastDateFormat1.getPattern());
}",0,assertNotNull(fastDateFormat1.getPattern())
project,0,test0511040,"public void test0511040() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    assertEquals(6, fastDateFormat1.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat1.getMaxLengthEstimate())"
project,0,test0511042,"public void test0511042() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test0511043,"public void test0511043() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0511053,"public void test0511053() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(""sa"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0511054,"public void test0511054() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0511055,"public void test0511055() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0511056,"public void test0511056() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertTrue(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test0511057,"public void test0511057() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(""sa"", fastDateFormat1.getPattern());
}",0,assertNotNull(fastDateFormat1.getPattern())
project,0,test0511058,"public void test0511058() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(6, fastDateFormat1.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat1.getMaxLengthEstimate())"
project,0,test0511061,"public void test0511061() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test0511062,"public void test0511062() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""sa"");
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(""sa"", timeZone0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test0521078,"public void test0521078() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(3, FastDateFormat.SHORT);
}",0,
project,0,test0521089,"public void test0521089() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test0521090,"public void test0521090() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test0521091,"public void test0521091() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    assertEquals(""yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE"", fastDateFormat1.getPattern());
}",0,assertNotNull(fastDateFormat1.getPattern())
project,0,test0521093,"public void test0521093() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test0521094,"public void test0521094() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0521103,"public void test0521103() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(18, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test0521104,"public void test0521104() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0521105,"public void test0521105() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,
project,0,test0521112,"public void test0521112() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat1.getTimeZoneOverridesCalendar())
project,0,test0521113,"public void test0521113() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat1.getMaxLengthEstimate())"
project,0,test0521114,"public void test0521114() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertEquals(""yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE"", fastDateFormat1.getPattern());
}",0,assertNotNull(fastDateFormat1.getPattern())
project,0,test0521117,"public void test0521117() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(fastDateFormat0.equals((Object) fastDateFormat1));
}",0,
project,0,test0521118,"public void test0521118() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);
    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test0531140,"public void test0531140() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    boolean boolean0 = fastDateFormat0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0531151,"public void test0531151() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    boolean boolean0 = fastDateFormat0.equals((Object) null);
    assertEquals("""", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0531152,"public void test0531152() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    boolean boolean0 = fastDateFormat0.equals((Object) null);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,
project,0,test0531153,"public void test0531153() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""", (TimeZone) null, locale0);
    boolean boolean0 = fastDateFormat0.equals((Object) null);
    assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0541182,"public void test0541182() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(""8:21:21 PM GMT+00:00"", string0);
}",0,assertNotNull(string0)
project,0,test0541193,"public void test0541193() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0541194,"public void test0541194() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0541195,"public void test0541195() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""IH2"");
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);
    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
    String string0 = fastDateFormat0.format(calendar0);
    assertEquals(""h:mm:ss a z"", fastDateFormat0.getPattern());
}",0,assertNotNull(fastDateFormat0.getPattern())
project,0,test0551211,"public void test0551211() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Locale locale0 = fastDateFormat0.getLocale();
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0551216,"public void test0551216() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Locale locale0 = fastDateFormat0.getLocale();
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test0551217,"public void test0551217() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Locale locale0 = fastDateFormat0.getLocale();
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0551218,"public void test0551218() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Locale locale0 = fastDateFormat0.getLocale();
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0551232,"public void test0551232() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Locale locale0 = fastDateFormat0.getLocale();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Object) locale0, stringBuffer0, fieldPosition0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: java.util.Locale
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0561248,"public void test0561248() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long((-1150L));
    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0561249,"public void test0561249() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long((-1150L));
    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
    assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
}",0,
project,0,test0561250,"public void test0561250() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    Long long0 = new Long((-1150L));
    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);
    assertEquals(""M/d/yy h:mm a"", fastDateFormat0.getPattern());
}",0,
project,0,test0571263,"public void test0571263() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0571274,"public void test0571274() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0571275,"public void test0571275() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0571276,"public void test0571276() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", fastDateFormat0.getPattern());
}",0,
project,0,test0571285,"public void test0571285() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0571296,"public void test0571296() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0571297,"public void test0571297() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0571298,"public void test0571298() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(""yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE a h'\uC2DC' mm'\uBD84' ss'\uCD08' z"", fastDateFormat0.getPattern());
}",0,
project,0,test0571299,"public void test0571299() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61614000000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=196,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}",0,
project,0,test0581341,"public void test0581341() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT"");
    FieldPosition fieldPosition0 = new FieldPosition((-542));
    // Undeclared exception!
    try {
        fastDateFormat0.format((Object) null, stringBuffer0, fieldPosition0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: <null>
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0591361,"public void test0591361() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    ParsePosition parsePosition0 = new ParsePosition(1);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(2, FastDateFormat.MEDIUM);
}",0,
project,0,test0591377,"public void test0591377() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    ParsePosition parsePosition0 = new ParsePosition(1);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0591378,"public void test0591378() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    ParsePosition parsePosition0 = new ParsePosition(1);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0591379,"public void test0591379() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    ParsePosition parsePosition0 = new ParsePosition(1);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);
    assertEquals(""a h'\uC2DC' mm'\uBD84' ss'\uCD08'"", fastDateFormat0.getPattern());
}",0,
project,0,test0601380,"public void test0601380() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""HmEwv:<G%uK-&"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: v
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0611381,"public void test0611381() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""kv"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: v
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0621382,"public void test0621382() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""|~#+%|r<"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: r
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0631383,"public void test0631383() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("".hp7jH`/1_94X/S#"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: p
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0641390,"public void test0641390() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField"");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField"", (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: o
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0651391,"public void test0651391() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""<null>"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: n
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0661392,"public void test0661392() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""F|&l"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: l
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0671393,"public void test0671393() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""*y%[}sjm@y"", (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: j
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0681394,"public void test0681394() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""$h]hz[im+["", (TimeZone) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: i
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0691397,"public void test0691397() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("".y^g%D]]q!ZT"", timeZone0, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: g
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0701398,"public void test0701398() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""@ye"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: e
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0711406,"public void test0711406() throws Throwable {
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""&c+c"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: c
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",1,
project,0,test0721414,"public void test0721414() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""km\""=7X{|rJ"");
    Locale locale0 = new Locale(""4|<9 ,H| Do&/"", ""IUgG1T[MPmf6/yGLlvX"", ""km\""=7X{|rJ"");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""km\""=7X{|rJ"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: X
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0731419,"public void test0731419() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertEquals(1, FastDateFormat.LONG);
}",0,
project,0,test0731425,"public void test0731425() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
}",0,assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar())
project,0,test0731426,"public void test0731426() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
project,0,test0731427,"public void test0731427() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(""W9"", timeZone0);
    assertEquals(""W9"", fastDateFormat0.getPattern());
}",0,
project,0,test0741428,"public void test0741428() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("")?V4+K`M;J xIF"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: V
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0751436,"public void test0751436() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""-kU[P"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: U
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0761442,"public void test0761442() throws Throwable {
    Locale locale0 = new Locale(""No date time pattern for locale: "", ""S<qo?y0"");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""S<qo?y0"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: q
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0771445,"public void test0771445() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""{363RHP)"", timeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: R
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0781455,"public void test0781455() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("" at index: "");
    Locale locale0 = Locale.KOREA;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""Q\""~ejLg;=`mCF'-$"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: Q
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0791456,"public void test0791456() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""L"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: L
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0801464,"public void test0801464() throws Throwable {
    Locale locale0 = Locale.KOREA;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance("" 9JtTd.$cJi'MXwGE"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: J
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0811465,"public void test0811465() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""@I5wyU}+$"", (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: I
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0821466,"public void test0821466() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""\u4E0A\u534812\u65F600\u520600\u79D2 GMT+00:00"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: T
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0831473,"public void test0831473() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), """");
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]"", (TimeZone) simpleTimeZone0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: t
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0841474,"public void test0841474() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""C/"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: C
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0851475,"public void test0851475() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""B67F8w -"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: B
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0861476,"public void test0861476() throws Throwable {
    Locale locale0 = Locale.CHINA;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance((String) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The pattern must not be null
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0871478,"public void test0871478() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    assertNotNull(fastDateFormat1);
}",0,
project,0,test0871479,"public void test0871479() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    fastDateFormat0.getPattern();
    ParsePosition parsePosition0 = new ParsePosition(1);
    fastDateFormat1.parseObject("""", parsePosition0);
    fastDateFormat0.format((long) 0);
    String string0 = fastDateFormat0.format((long) 1);
    assertEquals(""1970\uB144 1\uC6D4 1\uC77C \uBAA9\uC694\uC77C \uC624\uC804 12\uC2DC 00\uBD84 00\uCD08 GMT"", string0);
}",0,assertNotNull(string0)
project,0,test0871480,"public void test0871480() throws Throwable {
    Locale locale0 = Locale.KOREAN;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
    List list0 = fastDateFormat0.parsePattern();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, """");
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);
    fastDateFormat0.getPattern();
    ParsePosition parsePosition0 = new ParsePosition(1);
    fastDateFormat1.parseObject("""", parsePosition0);
    fastDateFormat0.format((long) 0);
    String string0 = fastDateFormat0.format((long) 1);
    fastDateFormat1.getPattern();
    assertEquals(34, fastDateFormat1.getMaxLengthEstimate());
}",0,
project,0,test0881481,"public void test0881481() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    ZoneId.getAvailableZoneIds();
    timeZone0.setID(""sa"");
    zoneOffset0.getRules();
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""sa"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
    decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
    Locale locale0 = Locale.UK;
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);
    assertEquals(""HH:mm:ss 'o''clock' z"", fastDateFormat0.getPattern());
}",0,
project,0,test0891482,"public void test0891482() throws Throwable {
    FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    locale0.getUnicodeLocaleAttributes();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
    assertFalse(fastDateFormat1.equals((Object) fastDateFormat0));
}",0,
project,0,test0891483,"public void test0891483() throws Throwable {
    FastDateFormat.getTimeInstance(0);
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
    locale0.getUnicodeLocaleAttributes();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);
    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);
    assertEquals(""MMM d, yyyy"", fastDateFormat1.getPattern());
}",0,
project,0,test0901484,"public void test0901484() throws Throwable {
    Locale locale0 = Locale.CANADA_FRENCH;
    // Undeclared exception!
    try {
        FastDateFormat.getInstance(""`k>PoY=[]c2"", locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: P
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0911485,"public void test0911485() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
    assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat1.getMaxLengthEstimate())"
project,0,test0911486,"public void test0911486() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
    assertNotSame(fastDateFormat1, fastDateFormat0);
}",0,
project,0,test0921487,"public void test0921487() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);
    // Undeclared exception!
    try {
        fastDateFormat0.format((Calendar) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat$TextField"", e);
    }
}",0,
project,0,test0941490,"public void test0941490() throws Throwable {
    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("""");
    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0951491,"public void test0951491() throws Throwable {
    // Undeclared exception!
    try {
        FastDateFormat.getDateTimeInstance(1960, 0, (Locale) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal date style 1960
        //
        verifyException(""java.text.DateFormat"", e);
    }
}",0,
project,0,test0961492,"public void test0961492() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    String string0 = fastDateFormat0.toString();
    assertEquals(""FastDateFormat[h:mm:ss a z]"", string0);
}",0,assertNotNull(string0)
project,0,test0971493,"public void test0971493() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
    int int0 = fastDateFormat0.getMaxLengthEstimate();
    assertEquals(17, int0);
}",0,"assertEquals(0, int0)"
project,0,test0981494,"public void test0981494() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);
    // Undeclared exception!
    try {
        fastDateFormat0.parseObject(""\u683C\u6797\u5A01\u6CBB\u65F6\u95F4"", (ParsePosition) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.time.FastDateFormat"", e);
    }
}",0,
project,0,test0991495,"public void test0991495() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    ZoneOffset.ofHoursMinutes(0, 0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    ZoneId.getAvailableZoneIds();
    timeZone0.setID(""sa"");
    zoneOffset0.getRules();
    DecimalFormat decimalFormat0 = new DecimalFormat();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""sa"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
    decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);
    Locale locale0 = Locale.UK;
    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);
    assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
}",0,"assertEquals(0, fastDateFormat0.getMaxLengthEstimate())"
