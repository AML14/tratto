{
  "test0681394" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0681394() throws Throwable {\n    FastDateFormat.getInstance(\"$h]hz[im+[\", (TimeZone) null);\n}",
    "testName" : "test0681394"
  },
  "test046949" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046949() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test046949"
  },
  "test0551211" : {
    "methodSignature" : "public Locale getLocale()",
    "methodName" : "getLocale",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0551211() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Locale locale0 = fastDateFormat0.getLocale();\n}",
    "testName" : "test0551211"
  },
  "test0871480" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0871480() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    List list0 = fastDateFormat0.parsePattern();\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getPattern();\n    ParsePosition parsePosition0 = new ParsePosition(1);\n    fastDateFormat1.parseObject(\"\", parsePosition0);\n    fastDateFormat0.format((long) 0);\n    String string0 = fastDateFormat0.format((long) 1);\n    fastDateFormat1.getPattern();\n    fastDateFormat1.getMaxLengthEstimate();\n}",
    "testName" : "test0871480"
  },
  "test0005" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0005() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0005"
  },
  "test0000" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0000() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n}",
    "testName" : "test0000"
  },
  "test005166" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test005166() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test005166"
  },
  "test005164" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test005164() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test005164"
  },
  "test005165" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test005165() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test005165"
  },
  "test0006" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0006() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0006"
  },
  "test007220" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test007220() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n}",
    "testName" : "test007220"
  },
  "test044880" : {
    "methodSignature" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044880() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n}",
    "testName" : "test044880"
  },
  "test0007" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0007() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0007"
  },
  "test00012" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00012() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.init();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test00012"
  },
  "test0008" : {
    "methodSignature" : "protected void init()",
    "methodName" : "init",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0008() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.init();\n}",
    "testName" : "test0008"
  },
  "test00130" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00130() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    int[] intArray0 = new int[6];\n    String string0 = fastDateFormat0.parseToken(\"#fgg0XqGjy$K(D\", intArray0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test00130"
  },
  "test00131" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00131() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    int[] intArray0 = new int[6];\n    String string0 = fastDateFormat0.parseToken(\"#fgg0XqGjy$K(D\", intArray0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test00131"
  },
  "test00123" : {
    "methodSignature" : "protected String parseToken(String pattern, int[] indexRef)",
    "methodName" : "parseToken",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00123() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    int[] intArray0 = new int[6];\n    String string0 = fastDateFormat0.parseToken(\"#fgg0XqGjy$K(D\", intArray0);\n}",
    "testName" : "test00123"
  },
  "test00244" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00244() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n}",
    "testName" : "test00244"
  },
  "test00129" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00129() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    int[] intArray0 = new int[6];\n    String string0 = fastDateFormat0.parseToken(\"#fgg0XqGjy$K(D\", intArray0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test00129"
  },
  "test0521117" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521117() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat0.equals((Object) fastDateFormat1);\n}",
    "testName" : "test0521117"
  },
  "test0521118" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521118() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat1.equals((Object) fastDateFormat0);\n}",
    "testName" : "test0521118"
  },
  "test005169" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test005169() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    timeZone0.toString();\n}",
    "testName" : "test005169"
  },
  "test0871478" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0871478() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    List list0 = fastDateFormat0.parsePattern();\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test0871478"
  },
  "test0831473" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0831473() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), \"\");\n    FastDateFormat.getInstance(\"FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]\", (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test0831473"
  },
  "test0571298" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0571298() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);\n    StringBuffer stringBuffer0 = new StringBuffer(3);\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0571298"
  },
  "test0571299" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0571299() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);\n    StringBuffer stringBuffer0 = new StringBuffer(3);\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);\n    mockGregorianCalendar0.toString();\n}",
    "testName" : "test0571299"
  },
  "test0871479" : {
    "methodSignature" : "public String format(long millis)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0871479() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    List list0 = fastDateFormat0.parsePattern();\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getPattern();\n    ParsePosition parsePosition0 = new ParsePosition(1);\n    fastDateFormat1.parseObject(\"\", parsePosition0);\n    fastDateFormat0.format((long) 0);\n    String string0 = fastDateFormat0.format((long) 1);\n}",
    "testName" : "test0871479"
  },
  "test019561" : {
    "methodSignature" : "protected String parseToken(String pattern, int[] indexRef)",
    "methodName" : "parseToken",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test019561() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    fastDateFormat0.parseToken(\"\", (int[]) null);\n}",
    "testName" : "test019561"
  },
  "test020569" : {
    "methodSignature" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
    "methodName" : "getTimeZoneDisplay",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test020569() throws Throwable {\n    Locale locale0 = Locale.GERMAN;\n    FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);\n}",
    "testName" : "test020569"
  },
  "test014424" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014424() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test014424"
  },
  "test041821" : {
    "methodSignature" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test041821() throws Throwable {\n    FastDateFormat.getDateTimeInstance((-1105), 0, (TimeZone) null, (Locale) null);\n}",
    "testName" : "test041821"
  },
  "test014425" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014425() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test014425"
  },
  "test014426" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014426() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test014426"
  },
  "test044897" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044897() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test044897"
  },
  "test033643" : {
    "methodSignature" : "public static FastDateFormat getTimeInstance(int style)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033643() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n}",
    "testName" : "test033643"
  },
  "test044898" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044898() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test044898"
  },
  "test0951491" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0951491() throws Throwable {\n    FastDateFormat.getDateTimeInstance(1960, 0, (Locale) null);\n}",
    "testName" : "test0951491"
  },
  "test044896" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044896() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test044896"
  },
  "test005153" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test005153() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test005153"
  },
  "test046951" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046951() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test046951"
  },
  "test005154" : {
    "methodSignature" : "public TimeZone getTimeZone()",
    "methodName" : "getTimeZone",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test005154() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n}",
    "testName" : "test005154"
  },
  "test046950" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046950() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test046950"
  },
  "test050999" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test050999() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n}",
    "testName" : "test050999"
  },
  "test00121" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00121() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test00121"
  },
  "test005151" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test005151() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test005151"
  },
  "test014427" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014427() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    mockDate0.toString();\n}",
    "testName" : "test014427"
  },
  "test033648" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033648() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test033648"
  },
  "test00122" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00122() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test00122"
  },
  "test005152" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test005152() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test005152"
  },
  "test033649" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033649() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test033649"
  },
  "test00120" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00120() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test00120"
  },
  "test00115" : {
    "methodSignature" : "public static FastDateFormat getInstance()",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00115() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n}",
    "testName" : "test00115"
  },
  "test028615" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test028615() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-186), \"\");\n    FastDateFormat.getDateInstance(1667, (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test028615"
  },
  "test0741428" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0741428() throws Throwable {\n    FastDateFormat.getInstance(\")?V4+K`M;J xIF\");\n}",
    "testName" : "test0741428"
  },
  "test014412" : {
    "methodSignature" : "public String format(Date date)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test014412() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n}",
    "testName" : "test014412"
  },
  "test012352" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012352() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test012352"
  },
  "test012351" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012351() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test012351"
  },
  "test033650" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033650() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test033650"
  },
  "test033651" : {
    "methodSignature" : "public StringBuffer format(long millis, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033651() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    fastDateFormat0.format(0L, (StringBuffer) null);\n}",
    "testName" : "test033651"
  },
  "test0541193" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0541193() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0541193"
  },
  "test0541194" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0541194() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0541194"
  },
  "test0541195" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0541195() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0541195"
  },
  "test0521103" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521103() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0521103"
  },
  "test0521104" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521104() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0521104"
  },
  "test005141" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test005141() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test005141"
  },
  "test0911486" : {
    "methodSignature" : "public static FastDateFormat getInstance()",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911486() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();\n}",
    "testName" : "test0911486"
  },
  "test0611381" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0611381() throws Throwable {\n    FastDateFormat.getInstance(\"kv\");\n}",
    "testName" : "test0611381"
  },
  "test0911485" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0911485() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();\n    fastDateFormat1.getMaxLengthEstimate();\n}",
    "testName" : "test0911485"
  },
  "test0781455" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0781455() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\" at index: \");\n    Locale locale0 = Locale.KOREA;\n    FastDateFormat.getInstance(\"Q\\\"~ejLg;=`mCF'-$\", timeZone0, locale0);\n}",
    "testName" : "test0781455"
  },
  "test0531153" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0531153() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    boolean boolean0 = fastDateFormat0.equals((Object) null);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0531153"
  },
  "test0531151" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0531151() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    boolean boolean0 = fastDateFormat0.equals((Object) null);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0531151"
  },
  "test0531152" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0531152() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    boolean boolean0 = fastDateFormat0.equals((Object) null);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0531152"
  },
  "test012350" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012350() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test012350"
  },
  "test039751" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039751() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test039751"
  },
  "test009297" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test009297() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"yyyy'\\uB144' M'\\uC6D4' d'\\uC77C' EEEE a h'\\uC2DC' mm'\\uBD84' ss'\\uCD08' z\", (TimeZone) simpleTimeZone0, locale0);\n}",
    "testName" : "test009297"
  },
  "test039763" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039763() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test039763"
  },
  "test012345" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012345() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);\n}",
    "testName" : "test012345"
  },
  "test0541182" : {
    "methodSignature" : "public String format(Calendar calendar)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0541182() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n}",
    "testName" : "test0541182"
  },
  "test0521112" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521112() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat1.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0521112"
  },
  "test0591361" : {
    "methodSignature" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0591361() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    ParsePosition parsePosition0 = new ParsePosition(1);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);\n}",
    "testName" : "test0591361"
  },
  "test0521113" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521113() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat1.getMaxLengthEstimate();\n}",
    "testName" : "test0521113"
  },
  "test0521114" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521114() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat1.getPattern();\n}",
    "testName" : "test0521114"
  },
  "test0751436" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0751436() throws Throwable {\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat.getInstance(\"-kU[P\", locale0);\n}",
    "testName" : "test0751436"
  },
  "test0641390" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0641390() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField\");\n    FastDateFormat.getInstance(\"org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField\", (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test0641390"
  },
  "test0521105" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521105() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0521105"
  },
  "test0531140" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0531140() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    boolean boolean0 = fastDateFormat0.equals((Object) null);\n}",
    "testName" : "test0531140"
  },
  "test039762" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039762() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test039762"
  },
  "test039761" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039761() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test039761"
  },
  "test013389" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013389() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n    mockDate0.toString();\n}",
    "testName" : "test013389"
  },
  "test015449" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015449() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Calendar calendar0 = MockCalendar.getInstance();\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"A:=\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test015449"
  },
  "test013386" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013386() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test013386"
  },
  "test013387" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013387() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test013387"
  },
  "test017502" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017502() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n}",
    "testName" : "test017502"
  },
  "test013388" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013388() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test013388"
  },
  "test015444" : {
    "methodSignature" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015444() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Calendar calendar0 = MockCalendar.getInstance();\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"A:=\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);\n}",
    "testName" : "test015444"
  },
  "test0581341" : {
    "methodSignature" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0581341() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"1970\\uB144 1\\uC6D4 1\\uC77C \\uBAA9\\uC694\\uC77C \\uC624\\uC804 12\\uC2DC 00\\uBD84 00\\uCD08 GMT\");\n    FieldPosition fieldPosition0 = new FieldPosition((-542));\n    fastDateFormat0.format((Object) null, stringBuffer0, fieldPosition0);\n}",
    "testName" : "test0581341"
  },
  "test010316" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010316() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null);\n}",
    "testName" : "test010316"
  },
  "test0731419" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0731419() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"W9\", timeZone0);\n}",
    "testName" : "test0731419"
  },
  "test0691397" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0691397() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    FastDateFormat.getInstance(\".y^g%D]]q!ZT\", timeZone0, (Locale) null);\n}",
    "testName" : "test0691397"
  },
  "test023595" : {
    "methodSignature" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023595() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat.getTimeInstance(15, (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test023595"
  },
  "test049989" : {
    "methodSignature" : "public String format(Date date)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049989() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(4120L);\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n}",
    "testName" : "test049989"
  },
  "test003101" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test003101() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test003101"
  },
  "test0961492" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0961492() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    String string0 = fastDateFormat0.toString();\n}",
    "testName" : "test0961492"
  },
  "test015436" : {
    "methodSignature" : "public static FastDateFormat getInstance()",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015436() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Calendar calendar0 = MockCalendar.getInstance();\n}",
    "testName" : "test015436"
  },
  "test0801464" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0801464() throws Throwable {\n    Locale locale0 = Locale.KOREA;\n    FastDateFormat.getInstance(\" 9JtTd.$cJi'MXwGE\", locale0);\n}",
    "testName" : "test0801464"
  },
  "test013375" : {
    "methodSignature" : "public StringBuffer format(Date date, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013375() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n}",
    "testName" : "test013375"
  },
  "test038736" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038736() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);\n}",
    "testName" : "test038736"
  },
  "test009313" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test009313() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"yyyy'\\uB144' M'\\uC6D4' d'\\uC77C' EEEE a h'\\uC2DC' mm'\\uBD84' ss'\\uCD08' z\", (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test009313"
  },
  "test009314" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test009314() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"yyyy'\\uB144' M'\\uC6D4' d'\\uC77C' EEEE a h'\\uC2DC' mm'\\uBD84' ss'\\uCD08' z\", (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test009314"
  },
  "test0731425" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0731425() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"W9\", timeZone0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0731425"
  },
  "test0731426" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0731426() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"W9\", timeZone0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0731426"
  },
  "test0731427" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0731427() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"W9\", timeZone0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0731427"
  },
  "test0591379" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0591379() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    ParsePosition parsePosition0 = new ParsePosition(1);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0591379"
  },
  "test0591378" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0591378() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    ParsePosition parsePosition0 = new ParsePosition(1);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0591378"
  },
  "test0591377" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0591377() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    ParsePosition parsePosition0 = new ParsePosition(1);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0591377"
  },
  "test0861476" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0861476() throws Throwable {\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat.getInstance((String) null, locale0);\n}",
    "testName" : "test0861476"
  },
  "test009315" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test009315() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"yyyy'\\uB144' M'\\uC6D4' d'\\uC77C' EEEE a h'\\uC2DC' mm'\\uBD84' ss'\\uCD08' z\", (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test009315"
  },
  "test013371" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013371() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test013371"
  },
  "test013372" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013372() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test013372"
  },
  "test013373" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013373() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test013373"
  },
  "test027608" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test027608() throws Throwable {\n    FastDateFormat.getDateTimeInstance(13, 31);\n}",
    "testName" : "test027608"
  },
  "test038742" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038742() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test038742"
  },
  "test038743" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038743() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test038743"
  },
  "test040820" : {
    "methodSignature" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test040820() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Locale locale0 = Locale.US;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);\n}",
    "testName" : "test040820"
  },
  "test038744" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test038744() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test038744"
  },
  "test007246" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test007246() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.getPattern();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test007246"
  },
  "test0511061" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511061() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat0.equals((Object) fastDateFormat1);\n}",
    "testName" : "test0511061"
  },
  "test0511062" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511062() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat1.equals((Object) fastDateFormat0);\n}",
    "testName" : "test0511062"
  },
  "test007248" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test007248() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.getPattern();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test007248"
  },
  "test007247" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test007247() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.getPattern();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test007247"
  },
  "test032642" : {
    "methodSignature" : "public String format(Date date)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test032642() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.format((Date) null);\n}",
    "testName" : "test032642"
  },
  "test013360" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test013360() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n}",
    "testName" : "test013360"
  },
  "test0601380" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0601380() throws Throwable {\n    FastDateFormat.getInstance(\"HmEwv:<G%uK-&\");\n}",
    "testName" : "test0601380"
  },
  "test036697" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036697() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.hashCode();\n}",
    "testName" : "test036697"
  },
  "test0651391" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0651391() throws Throwable {\n    FastDateFormat.getInstance(\"<null>\");\n}",
    "testName" : "test0651391"
  },
  "test0791456" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0791456() throws Throwable {\n    FastDateFormat.getInstance(\"L\");\n}",
    "testName" : "test0791456"
  },
  "test046933" : {
    "methodSignature" : "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046933() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);\n}",
    "testName" : "test046933"
  },
  "test007234" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test007234() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.getPattern();\n}",
    "testName" : "test007234"
  },
  "test007233" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test007233() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test007233"
  },
  "test007232" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test007232() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test007232"
  },
  "test007231" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test007231() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test007231"
  },
  "test049996" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049996() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(4120L);\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test049996"
  },
  "test049995" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049995() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(4120L);\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test049995"
  },
  "test049998" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049998() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(4120L);\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    mockDate0.toString();\n}",
    "testName" : "test049998"
  },
  "test049997" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test049997() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(4120L);\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test049997"
  },
  "test0921487" : {
    "methodSignature" : "public String format(Calendar calendar)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0921487() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.format((Calendar) null);\n}",
    "testName" : "test0921487"
  },
  "test0721414" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0721414() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"km\\\"=7X{|rJ\");\n    Locale locale0 = new Locale(\"4|<9 ,H| Do&/\", \"IUgG1T[MPmf6/yGLlvX\", \"km\\\"=7X{|rJ\");\n    FastDateFormat.getInstance(\"km\\\"=7X{|rJ\", timeZone0, locale0);\n}",
    "testName" : "test0721414"
  },
  "test0851475" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0851475() throws Throwable {\n    FastDateFormat.getInstance(\"B67F8w -\");\n}",
    "testName" : "test0851475"
  },
  "test037713" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037713() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test037713"
  },
  "test037716" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037716() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    fastDateFormat0.hashCode();\n}",
    "testName" : "test037716"
  },
  "test037714" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037714() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test037714"
  },
  "test037715" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037715() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test037715"
  },
  "test008270" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008270() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    int int0 = fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test008270"
  },
  "test0521089" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521089() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    fastDateFormat1.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0521089"
  },
  "test048970" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048970() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(1, (-1), (-416));\n    StringBuffer stringBuffer0 = new StringBuffer();\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test048970"
  },
  "test048971" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048971() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(1, (-1), (-416));\n    StringBuffer stringBuffer0 = new StringBuffer();\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test048971"
  },
  "test0511042" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511042() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    fastDateFormat1.equals((Object) fastDateFormat0);\n}",
    "testName" : "test0511042"
  },
  "test048972" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048972() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(1, (-1), (-416));\n    StringBuffer stringBuffer0 = new StringBuffer();\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test048972"
  },
  "test048973" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048973() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(1, (-1), (-416));\n    StringBuffer stringBuffer0 = new StringBuffer();\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);\n    mockDate0.toString();\n}",
    "testName" : "test048973"
  },
  "test0511040" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511040() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    fastDateFormat1.getMaxLengthEstimate();\n}",
    "testName" : "test0511040"
  },
  "test022588" : {
    "methodSignature" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022588() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.forLanguageTag(\"A:=\");\n    FastDateFormat.getTimeInstance(2623, timeZone0, locale0);\n}",
    "testName" : "test022588"
  },
  "test0971493" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0971493() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    int int0 = fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0971493"
  },
  "test0661392" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0661392() throws Throwable {\n    FastDateFormat.getInstance(\"F|&l\");\n}",
    "testName" : "test0661392"
  },
  "test0811465" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0811465() throws Throwable {\n    FastDateFormat.getInstance(\"@I5wyU}+$\", (Locale) null);\n}",
    "testName" : "test0811465"
  },
  "test0511043" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511043() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n}",
    "testName" : "test0511043"
  },
  "test0521093" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521093() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    fastDateFormat1.equals((Object) fastDateFormat0);\n}",
    "testName" : "test0521093"
  },
  "test0521094" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521094() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n}",
    "testName" : "test0521094"
  },
  "test037723" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037723() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    fastDateFormat0.hashCode();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test037723"
  },
  "test008267" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008267() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test008267"
  },
  "test0521090" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521090() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    fastDateFormat1.getMaxLengthEstimate();\n}",
    "testName" : "test0521090"
  },
  "test008268" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008268() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test008268"
  },
  "test037721" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037721() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    fastDateFormat0.hashCode();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test037721"
  },
  "test0521091" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521091() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n    fastDateFormat1.getPattern();\n}",
    "testName" : "test0521091"
  },
  "test008269" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008269() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test008269"
  },
  "test037722" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037722() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    fastDateFormat0.hashCode();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test037722"
  },
  "test0511053" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511053() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0511053"
  },
  "test048965" : {
    "methodSignature" : "public StringBuffer format(Date date, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test048965() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(1, (-1), (-416));\n    StringBuffer stringBuffer0 = new StringBuffer();\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);\n}",
    "testName" : "test048965"
  },
  "test0511058" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511058() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat1.getMaxLengthEstimate();\n}",
    "testName" : "test0511058"
  },
  "test017530" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017530() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.format(2480L);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test017530"
  },
  "test0511056" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511056() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat1.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0511056"
  },
  "test0511057" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511057() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat1.getPattern();\n}",
    "testName" : "test0511057"
  },
  "test0511054" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511054() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0511054"
  },
  "test0511055" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511055() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0511055"
  },
  "test0621382" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0621382() throws Throwable {\n    FastDateFormat.getInstance(\"|~#+%|r<\");\n}",
    "testName" : "test0621382"
  },
  "test006193" : {
    "methodSignature" : "public TimeZone getTimeZone()",
    "methodName" : "getTimeZone",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test006193() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n}",
    "testName" : "test006193"
  },
  "test006192" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test006192() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test006192"
  },
  "test006191" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test006191() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test006191"
  },
  "test017528" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017528() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.format(2480L);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test017528"
  },
  "test006190" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test006190() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test006190"
  },
  "test0501014" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0501014() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));\n    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0501014"
  },
  "test0501015" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0501015() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));\n    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0501015"
  },
  "test008256" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008256() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n}",
    "testName" : "test008256"
  },
  "test0501016" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0501016() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));\n    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0501016"
  },
  "test0501017" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0501017() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));\n    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);\n    mockGregorianCalendar0.toString();\n}",
    "testName" : "test0501017"
  },
  "test043853" : {
    "methodSignature" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043853() throws Throwable {\n    Locale locale0 = new Locale(\"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);\n}",
    "testName" : "test043853"
  },
  "test017529" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017529() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.format(2480L);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test017529"
  },
  "test031633" : {
    "methodSignature" : "public StringBuffer format(Date date, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test031633() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(10, 835, 0);\n    fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n}",
    "testName" : "test031633"
  },
  "test026607" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test026607() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"FastDateFormat[\");\n    FastDateFormat.getDateTimeInstance(16, 1668, timeZone0);\n}",
    "testName" : "test026607"
  },
  "test0501008" : {
    "methodSignature" : "public String format(Calendar calendar)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0501008() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));\n    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);\n}",
    "testName" : "test0501008"
  },
  "test0701398" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0701398() throws Throwable {\n    FastDateFormat.getInstance(\"@ye\");\n}",
    "testName" : "test0701398"
  },
  "test0511024" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511024() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n}",
    "testName" : "test0511024"
  },
  "test045906" : {
    "methodSignature" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045906() throws Throwable {\n    Locale locale0 = new Locale(\"\", \"\", \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);\n}",
    "testName" : "test045906"
  },
  "test017515" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017515() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test017515"
  },
  "test017514" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017514() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test017514"
  },
  "test006180" : {
    "methodSignature" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test006180() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test006180"
  },
  "test017516" : {
    "methodSignature" : "public String format(long millis)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017516() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.format(2480L);\n}",
    "testName" : "test017516"
  },
  "test010322" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010322() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test010322"
  },
  "test043865" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043865() throws Throwable {\n    Locale locale0 = new Locale(\"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test043865"
  },
  "test0501004" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0501004() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0501004"
  },
  "test010323" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010323() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test010323"
  },
  "test043866" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043866() throws Throwable {\n    Locale locale0 = new Locale(\"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test043866"
  },
  "test0501005" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0501005() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0501005"
  },
  "test017513" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test017513() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test017513"
  },
  "test0501006" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0501006() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0501006"
  },
  "test0511029" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511029() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0511029"
  },
  "test010321" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test010321() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test010321"
  },
  "test035688" : {
    "methodSignature" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
    "methodName" : "applyRules",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035688() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    StringBuffer stringBuffer0 = new StringBuffer(\"No date time pattern for locale: \");\n    fastDateFormat0.applyRules((Calendar) null, stringBuffer0);\n}",
    "testName" : "test035688"
  },
  "test043864" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test043864() throws Throwable {\n    Locale locale0 = new Locale(\"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test043864"
  },
  "test0891483" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0891483() throws Throwable {\n    FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    locale0.getUnicodeLocaleAttributes();\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);\n    fastDateFormat1.getPattern();\n}",
    "testName" : "test0891483"
  },
  "test0891482" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0891482() throws Throwable {\n    FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    locale0.getUnicodeLocaleAttributes();\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(2);\n    fastDateFormat1.equals((Object) fastDateFormat0);\n}",
    "testName" : "test0891482"
  },
  "test0521078" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0521078() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, locale0);\n}",
    "testName" : "test0521078"
  },
  "test0511030" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511030() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0511030"
  },
  "test0511031" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511031() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0511031"
  },
  "test003115" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test003115() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test003115"
  },
  "test003113" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test003113() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test003113"
  },
  "test003114" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test003114() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test003114"
  },
  "test015450" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015450() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Calendar calendar0 = MockCalendar.getInstance();\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"A:=\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test015450"
  },
  "test0511038" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511038() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    fastDateFormat1.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0511038"
  },
  "test0511039" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511039() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n    fastDateFormat1.getPattern();\n}",
    "testName" : "test0511039"
  },
  "test015451" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test015451() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Calendar calendar0 = MockCalendar.getInstance();\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"A:=\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test015451"
  },
  "test045919" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045919() throws Throwable {\n    Locale locale0 = new Locale(\"\", \"\", \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test045919"
  },
  "test045918" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045918() throws Throwable {\n    Locale locale0 = new Locale(\"\", \"\", \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test045918"
  },
  "test0511032" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0511032() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(\"sa\", timeZone0);\n}",
    "testName" : "test0511032"
  },
  "test045917" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test045917() throws Throwable {\n    Locale locale0 = new Locale(\"\", \"\", \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test045917"
  },
  "test039775" : {
    "methodSignature" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039775() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    Locale locale0 = Locale.ITALY;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);\n}",
    "testName" : "test039775"
  },
  "test0571263" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0571263() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n}",
    "testName" : "test0571263"
  },
  "test036701" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036701() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.hashCode();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test036701"
  },
  "test0981494" : {
    "methodSignature" : "public Object parseObject(String source, ParsePosition pos)",
    "methodName" : "parseObject",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0981494() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);\n    fastDateFormat0.parseObject(\"\\u683C\\u6797\\u5A01\\u6CBB\\u65F6\\u95F4\", (ParsePosition) null);\n}",
    "testName" : "test0981494"
  },
  "test036703" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036703() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.hashCode();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test036703"
  },
  "test036702" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test036702() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.hashCode();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test036702"
  },
  "test0821466" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0821466() throws Throwable {\n    FastDateFormat.getInstance(\"\\u4E0A\\u534812\\u65F600\\u520600\\u79D2 GMT+00:00\");\n}",
    "testName" : "test0821466"
  },
  "test0711406" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0711406() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat.getInstance(\"&c+c\", locale0);\n}",
    "testName" : "test0711406"
  },
  "test0671393" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0671393() throws Throwable {\n    FastDateFormat.getInstance(\"*y%[}sjm@y\", (Locale) null);\n}",
    "testName" : "test0671393"
  },
  "test0841474" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0841474() throws Throwable {\n    FastDateFormat.getInstance(\"C/\");\n}",
    "testName" : "test0841474"
  },
  "test021578" : {
    "methodSignature" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
    "methodName" : "getTimeZoneDisplay",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test021578() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"n;P:<ffkD7dzT1_@'\");\n    Locale locale0 = new Locale(\"n;P:<ffkD7dzT1_@'\");\n    FastDateFormat.getTimeZoneDisplay(timeZone0, false, 13, locale0);\n}",
    "testName" : "test021578"
  },
  "test018551" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018551() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test018551"
  },
  "test018552" : {
    "methodSignature" : "protected String parseToken(String pattern, int[] indexRef)",
    "methodName" : "parseToken",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018552() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    int[] intArray0 = new int[3];\n    fastDateFormat0.parseToken(\"\", intArray0);\n}",
    "testName" : "test018552"
  },
  "test024603" : {
    "methodSignature" : "public static FastDateFormat getTimeInstance(int style, Locale locale)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test024603() throws Throwable {\n    Locale locale0 = Locale.GERMAN;\n    FastDateFormat.getTimeInstance(739, locale0);\n}",
    "testName" : "test024603"
  },
  "test018550" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018550() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test018550"
  },
  "test039787" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039787() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    Locale locale0 = Locale.ITALY;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test039787"
  },
  "test039786" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039786() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    Locale locale0 = Locale.ITALY;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test039786"
  },
  "test018549" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018549() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test018549"
  },
  "test039785" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039785() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    Locale locale0 = Locale.ITALY;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test039785"
  },
  "test042831" : {
    "methodSignature" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042831() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\" 9JtTd.$cJi'MXwGE\");\n    Locale locale0 = Locale.KOREA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);\n}",
    "testName" : "test042831"
  },
  "test0571274" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0571274() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0571274"
  },
  "test016487" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016487() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test016487"
  },
  "test0571275" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0571275() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0571275"
  },
  "test0771445" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0771445() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    FastDateFormat.getInstance(\"{363RHP)\", timeZone0);\n}",
    "testName" : "test0771445"
  },
  "test0631383" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0631383() throws Throwable {\n    FastDateFormat.getInstance(\".hp7jH`/1_94X/S#\");\n}",
    "testName" : "test0631383"
  },
  "test006209" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test006209() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    timeZone0.toString();\n}",
    "testName" : "test006209"
  },
  "test006205" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test006205() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test006205"
  },
  "test006204" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test006204() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test006204"
  },
  "test029622" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test029622() throws Throwable {\n    Locale locale0 = new Locale(\"elDq# !hTb\");\n    FastDateFormat.getDateInstance(1502, locale0);\n}",
    "testName" : "test029622"
  },
  "test047952" : {
    "methodSignature" : "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047952() throws Throwable {\n    FastDateFormat.getDateInstance(103, (TimeZone) null, (Locale) null);\n}",
    "testName" : "test047952"
  },
  "test006203" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test006203() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test006203"
  },
  "test0941490" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0941490() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0941490"
  },
  "test016486" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016486() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test016486"
  },
  "test016485" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016485() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test016485"
  },
  "test011342" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011342() throws Throwable {\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"'XETJC\", locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test011342"
  },
  "test0551232" : {
    "methodSignature" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0551232() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Locale locale0 = fastDateFormat0.getLocale();\n    StringBuffer stringBuffer0 = new StringBuffer(\"\");\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);\n    fastDateFormat0.format((Object) locale0, stringBuffer0, fieldPosition0);\n}",
    "testName" : "test0551232"
  },
  "test034661" : {
    "methodSignature" : "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "FastDateFormat",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034661() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = new FastDateFormat(\"\", timeZone0, locale0);\n}",
    "testName" : "test034661"
  },
  "test042844" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042844() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\" 9JtTd.$cJi'MXwGE\");\n    Locale locale0 = Locale.KOREA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test042844"
  },
  "test018538" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test018538() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n}",
    "testName" : "test018538"
  },
  "test042845" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042845() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\" 9JtTd.$cJi'MXwGE\");\n    Locale locale0 = Locale.KOREA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test042845"
  },
  "test0571285" : {
    "methodSignature" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0571285() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);\n    StringBuffer stringBuffer0 = new StringBuffer(3);\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);\n}",
    "testName" : "test0571285"
  },
  "test042843" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test042843() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\" 9JtTd.$cJi'MXwGE\");\n    Locale locale0 = Locale.KOREA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test042843"
  },
  "test011344" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011344() throws Throwable {\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"'XETJC\", locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test011344"
  },
  "test016479" : {
    "methodSignature" : "public String format(Calendar calendar)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016479() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n}",
    "testName" : "test016479"
  },
  "test011343" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011343() throws Throwable {\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"'XETJC\", locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test011343"
  },
  "test00271" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00271() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    List list0 = fastDateFormat0.parsePattern();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test00271"
  },
  "test00272" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00272() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    List list0 = fastDateFormat0.parsePattern();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test00272"
  },
  "test00273" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00273() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    List list0 = fastDateFormat0.parsePattern();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test00273"
  },
  "test030623" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test030623() throws Throwable {\n    FastDateFormat.getDateInstance((-2289));\n}",
    "testName" : "test030623"
  },
  "test0571276" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0571276() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0571276"
  },
  "test039794" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test039794() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    Locale locale0 = Locale.ITALY;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);\n    mockGregorianCalendar0.toString();\n}",
    "testName" : "test039794"
  },
  "test0901484" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0901484() throws Throwable {\n    Locale locale0 = Locale.CANADA_FRENCH;\n    FastDateFormat.getInstance(\"`k>PoY=[]c2\", locale0);\n}",
    "testName" : "test0901484"
  },
  "test011331" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011331() throws Throwable {\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"'XETJC\", locale0);\n}",
    "testName" : "test011331"
  },
  "test016469" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016469() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test016469"
  },
  "test034673" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034673() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = new FastDateFormat(\"\", timeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test034673"
  },
  "test034674" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034674() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = new FastDateFormat(\"\", timeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test034674"
  },
  "test0571296" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0571296() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);\n    StringBuffer stringBuffer0 = new StringBuffer(3);\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0571296"
  },
  "test034675" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034675() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = new FastDateFormat(\"\", timeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test034675"
  },
  "test0571297" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0571297() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);\n    StringBuffer stringBuffer0 = new StringBuffer(3);\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0571297"
  },
  "test016468" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016468() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test016468"
  },
  "test034676" : {
    "methodSignature" : "public String format(long millis)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034676() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = new FastDateFormat(\"\", timeZone0, locale0);\n    fastDateFormat0.format(0L);\n}",
    "testName" : "test034676"
  },
  "test016467" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016467() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test016467"
  },
  "test0561248" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0561248() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Long long0 = new Long((-1150L));\n    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0561248"
  },
  "test0761442" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0761442() throws Throwable {\n    Locale locale0 = new Locale(\"No date time pattern for locale: \", \"S<qo?y0\");\n    FastDateFormat.getInstance(\"S<qo?y0\", locale0);\n}",
    "testName" : "test0761442"
  },
  "test0561249" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0561249() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Long long0 = new Long((-1150L));\n    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0561249"
  },
  "test008281" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008281() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    int int0 = fastDateFormat0.getMaxLengthEstimate();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test008281"
  },
  "test008282" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008282() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    int int0 = fastDateFormat0.getMaxLengthEstimate();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test008282"
  },
  "test037707" : {
    "methodSignature" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test037707() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n}",
    "testName" : "test037707"
  },
  "test008283" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test008283() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    int int0 = fastDateFormat0.getMaxLengthEstimate();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test008283"
  },
  "test00257" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00257() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test00257"
  },
  "test00258" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00258() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test00258"
  },
  "test00013" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00013() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.init();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test00013"
  },
  "test00014" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00014() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.init();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test00014"
  },
  "test00256" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00256() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test00256"
  },
  "test004126" : {
    "methodSignature" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
    "methodName" : "getTimeZoneDisplay",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test004126() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.ENGLISH;\n    String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);\n}",
    "testName" : "test004126"
  },
  "test00259" : {
    "methodSignature" : "protected List parsePattern()",
    "methodName" : "parsePattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00259() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    List list0 = fastDateFormat0.parsePattern();\n}",
    "testName" : "test00259"
  },
  "test0561250" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0561250() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Long long0 = new Long((-1150L));\n    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0561250"
  },
  "test0991495" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0991495() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    ZoneId.getAvailableZoneIds();\n    timeZone0.setID(\"sa\");\n    zoneOffset0.getRules();\n    DecimalFormat decimalFormat0 = new DecimalFormat();\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"sa\");\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);\n    decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);\n    Locale locale0 = Locale.UK;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0991495"
  },
  "test016462" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test016462() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n}",
    "testName" : "test016462"
  },
  "test0551218" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0551218() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Locale locale0 = fastDateFormat0.getLocale();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0551218"
  },
  "test025604" : {
    "methodSignature" : "public static FastDateFormat getTimeInstance(int style)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test025604() throws Throwable {\n    FastDateFormat.getTimeInstance(100);\n}",
    "testName" : "test025604"
  },
  "test0551216" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0551216() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Locale locale0 = fastDateFormat0.getLocale();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0551216"
  },
  "test0551217" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0551217() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Locale locale0 = fastDateFormat0.getLocale();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0551217"
  },
  "test0881481" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0881481() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    ZoneId.getAvailableZoneIds();\n    timeZone0.setID(\"sa\");\n    zoneOffset0.getRules();\n    DecimalFormat decimalFormat0 = new DecimalFormat();\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"sa\");\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);\n    decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);\n    Locale locale0 = Locale.UK;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0881481"
  }
}