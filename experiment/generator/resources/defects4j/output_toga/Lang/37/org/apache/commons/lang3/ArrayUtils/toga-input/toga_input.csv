focal_method,test_prefix,docstring
"public static byte[] remove(byte[] array, int index) {
    return (byte[]) remove((Object) array, index);
}","public void test0000() throws Throwable {
    byte[] byteArray0 = new byte[5];
    // Undeclared exception!
    try {
        ArrayUtils.remove(byteArray0, (int) (byte) 5);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 5, Length: 5
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1], 0)          = []
 * ArrayUtils.remove([1, 0], 0)       = [0]
 * ArrayUtils.remove([1, 0], 1)       = [1]
 * ArrayUtils.remove([1, 0, 1], 1)    = [1, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test0011() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 0);
    assertEquals(1, booleanArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test0024() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    int int0 = ArrayUtils.indexOf(booleanArray0, true, Integer.MAX_VALUE);
    assertEquals(1, booleanArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code>
 *  array input
 */"
"public static int indexOf(float[] array, float valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test0037() throws Throwable {
    float[] floatArray0 = new float[8];
    int int0 = ArrayUtils.indexOf(floatArray0, (-1539.0F), 1352);
    assertEquals(8, floatArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    double min = valueToFind - tolerance;
    double max = valueToFind + tolerance;
    for (int i = startIndex; i >= 0; i--) {
        if (array[i] >= min && array[i] <= max) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test00410() throws Throwable {
    double[] doubleArray0 = new double[5];
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1985, 0.0);
    assertEquals(5, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.
 * This method will return the index of the last value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @param tolerance  search for value within plus/minus this amount
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test00513() throws Throwable {
    double[] doubleArray0 = new double[1];
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1.0, 1);
    assertEquals(1, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test00616() throws Throwable {
    double[] doubleArray0 = new double[3];
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0);
    assertEquals(3, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    double min = valueToFind - tolerance;
    double max = valueToFind + tolerance;
    for (int i = startIndex; i < array.length; i++) {
        if (array[i] >= min && array[i] <= max) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test00719() throws Throwable {
    double[] doubleArray0 = new double[4];
    int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, 3751, (-1.0));
    assertEquals(4, doubleArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.
 * This method will return the index of the first value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(byte[] array, byte valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test00822() throws Throwable {
    byte[] byteArray0 = new byte[9];
    int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-100), 2022);
    assertEquals(9, byteArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test00925() throws Throwable {
    char[] charArray0 = new char[6];
    charArray0[1] = 'u';
    int int0 = ArrayUtils.lastIndexOf(charArray0, '\""', 4586);
    assertEquals(6, charArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"public static boolean contains(char[] array, char valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test01028() throws Throwable {
    char[] charArray0 = new char[1];
    charArray0[0] = 'j';
    boolean boolean0 = ArrayUtils.contains(charArray0, '@');
    assertEquals(1, charArray0.length);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 * @since 2.1
 */"
"public static int indexOf(char[] array, char valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test01131() throws Throwable {
    char[] charArray0 = new char[1];
    int int0 = ArrayUtils.indexOf(charArray0, '+', 551);
    assertEquals(1, charArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"public static int lastIndexOf(short[] array, short valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test01234() throws Throwable {
    short[] shortArray0 = new short[7];
    shortArray0[2] = (short) 3693;
    int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 48);
    assertEquals(7, shortArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(int[] array, int valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test01337() throws Throwable {
    int[] intArray0 = new int[3];
    int int0 = ArrayUtils.indexOf(intArray0, 0, 3847);
    assertEquals(3, intArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static void reverse(boolean[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    boolean tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test01440() throws Throwable {
    boolean[] booleanArray0 = new boolean[7];
    ArrayUtils.reverse(booleanArray0);
    assertEquals(7, booleanArray0.length);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(float[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    float tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test01542() throws Throwable {
    float[] floatArray0 = new float[2];
    ArrayUtils.reverse(floatArray0);
    assertEquals(2, floatArray0.length);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(double[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    double tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test01644() throws Throwable {
    double[] doubleArray0 = new double[8];
    ArrayUtils.reverse(doubleArray0);
    assertEquals(8, doubleArray0.length);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(byte[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    byte tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test01746() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ArrayUtils.reverse(byteArray0);
    assertEquals(2, byteArray0.length);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(char[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    char tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test01848() throws Throwable {
    char[] charArray0 = new char[3];
    ArrayUtils.reverse(charArray0);
    assertEquals(3, charArray0.length);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(short[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    short tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test01950() throws Throwable {
    short[] shortArray0 = new short[0];
    ArrayUtils.reverse(shortArray0);
    assertEquals(0, shortArray0.length);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(int[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    int tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test02052() throws Throwable {
    int[] intArray0 = new int[0];
    ArrayUtils.reverse(intArray0);
    assertEquals(0, intArray0.length);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(long[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    long tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test02154() throws Throwable {
    long[] longArray0 = new long[3];
    ArrayUtils.reverse(longArray0);
    assertEquals(3, longArray0.length);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"// Reverse
//-----------------------------------------------------------------------
/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>There is no special handling for multi-dimensional arrays.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */
public static void reverse(Object[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    Object tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test02256() throws Throwable {
    Object[] objectArray0 = new Object[2];
    ArrayUtils.reverse(objectArray0);
    assertEquals(2, objectArray0.length);
}",""
"public static boolean isSameLength(boolean[] array1, boolean[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test02358() throws Throwable {
    boolean[] booleanArray0 = new boolean[6];
    boolean[] booleanArray1 = new boolean[8];
    boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
    assertEquals(6, booleanArray0.length);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static short[] toPrimitive(Short[] array, short valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_SHORT_ARRAY;
    }
    final short[] result = new short[array.length];
    for (int i = 0; i < array.length; i++) {
        Short b = array[i];
        result[i] = (b == null ? valueForNull : b.shortValue());
    }
    return result;
}","public void test02467() throws Throwable {
    short[] shortArray0 = new short[3];
    Short[] shortArray1 = new Short[5];
    short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
    assertEquals(5, shortArray1.length);
}","/**
 * <p>Converts an array of object Short to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Short</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>byte</code> array, <code>null</code> if null array input
 */"
"public static boolean isSameLength(short[] array1, short[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test02473() throws Throwable {
    short[] shortArray0 = new short[3];
    Short[] shortArray1 = new Short[5];
    short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
    boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray2);
    assertEquals(3, shortArray0.length);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_BOOLEAN_ARRAY;
    }
    boolean[] subarray = new boolean[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test02583() throws Throwable {
    boolean[] booleanArray0 = new boolean[2];
    boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 4, 4);
    assertEquals(2, booleanArray0.length);
}","/**
 * <p>Produces a new <code>boolean</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_BOOLEAN_ARRAY;
    }
    boolean[] subarray = new boolean[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test02691() throws Throwable {
    boolean[] booleanArray0 = new boolean[7];
    boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, 0);
    assertEquals(7, booleanArray0.length);
}","/**
 * <p>Produces a new <code>boolean</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    float[] subarray = new float[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test02799() throws Throwable {
    float[] floatArray0 = new float[1];
    float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, 0);
    assertEquals(1, floatArray0.length);
}","/**
 * <p>Produces a new <code>float</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_DOUBLE_ARRAY;
    }
    double[] subarray = new double[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test028107() throws Throwable {
    double[] doubleArray0 = new double[0];
    double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 0);
    assertEquals(0, doubleArray0.length);
}","/**
 * <p>Produces a new <code>double</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_DOUBLE_ARRAY;
    }
    double[] subarray = new double[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test029115() throws Throwable {
    double[] doubleArray0 = new double[3];
    double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);
    assertEquals(3, doubleArray0.length);
}","/**
 * <p>Produces a new <code>double</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_BYTE_ARRAY;
    }
    byte[] subarray = new byte[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test030125() throws Throwable {
    Short[] shortArray0 = new Short[5];
    Short short0 = new Short((short) 1588);
    shortArray0[0] = short0;
    short short1 = (short) 2;
    byte[] byteArray0 = new byte[2];
    byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) shortArray0[0], (int) short1);
    assertEquals(5, shortArray0.length);
}","/**
 * <p>Produces a new <code>byte</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_CHAR_ARRAY;
    }
    char[] subarray = new char[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test031134() throws Throwable {
    char[] charArray0 = new char[2];
    char[] charArray1 = ArrayUtils.subarray(charArray0, 831, 831);
    assertEquals(2, charArray0.length);
}","/**
 * <p>Produces a new <code>char</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_SHORT_ARRAY;
    }
    short[] subarray = new short[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test032142() throws Throwable {
    short[] shortArray0 = new short[0];
    short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (byte) (-46), 1123);
    assertEquals(0, shortArray0.length);
}","/**
 * <p>Produces a new <code>short</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_SHORT_ARRAY;
    }
    short[] subarray = new short[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test033150() throws Throwable {
    short[] shortArray0 = new short[8];
    short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, (-3540));
    assertEquals(8, shortArray0.length);
}","/**
 * <p>Produces a new <code>short</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_INT_ARRAY;
    }
    int[] subarray = new int[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test034158() throws Throwable {
    int[] intArray0 = new int[0];
    int[] intArray1 = ArrayUtils.subarray(intArray0, 0, (-181));
    assertEquals(0, intArray0.length);
}","/**
 * <p>Produces a new <code>int</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_LONG_ARRAY;
    }
    long[] subarray = new long[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test035166() throws Throwable {
    long[] longArray0 = new long[0];
    long[] longArray1 = ArrayUtils.subarray(longArray0, 0, 0);
    assertEquals(0, longArray0.length);
}","/**
 * <p>Produces a new <code>long</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"// Basic methods handling multi-dimensional arrays
//-----------------------------------------------------------------------
/**
 * <p>Outputs an array as a String, treating <code>null</code> as an empty array.</p>
 *
 * <p>Multi-dimensional arrays are handled correctly, including
 * multi-dimensional primitive arrays.</p>
 *
 * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
 *
 * @param array  the array to get a toString for, may be <code>null</code>
 * @return a String representation of the array, '{}' if null array input
 */
public static String toString(Object array) {
    return toString(array, ""{}"");
}","public void test036174() throws Throwable {
    String string0 = ArrayUtils.toString((Object) null);
    assertNotNull(string0);
}",""
"public static short[] removeElement(short[] array, short element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test037176() throws Throwable {
    short[] shortArray0 = new short[1];
    short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) 0);
    assertEquals(1, shortArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)      = null
 * ArrayUtils.removeElement([], 1)        = []
 * ArrayUtils.removeElement([1], 2)       = [1]
 * ArrayUtils.removeElement([1, 3], 1)    = [3]
 * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static <T> T[] removeElement(T[] array, Object element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test038185() throws Throwable {
    Object object0 = new Object();
    Object[] objectArray0 = ArrayUtils.removeElement((Object[]) null, object0);
    assertNull(objectArray0);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, ""a"")            = null
 * ArrayUtils.removeElement([], ""a"")              = []
 * ArrayUtils.removeElement([""a""], ""b"")           = [""a""]
 * ArrayUtils.removeElement([""a"", ""b""], ""a"")      = [""b""]
 * ArrayUtils.removeElement([""a"", ""b"", ""a""], ""a"") = [""b"", ""a""]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static long[] removeElement(long[] array, long element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test039186() throws Throwable {
    long[] longArray0 = new long[3];
    long[] longArray1 = ArrayUtils.removeElement(longArray0, 0L);
    assertEquals(3, longArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)      = null
 * ArrayUtils.removeElement([], 1)        = []
 * ArrayUtils.removeElement([1], 2)       = [1]
 * ArrayUtils.removeElement([1, 3], 1)    = [3]
 * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static int[] removeElement(int[] array, int element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test040194() throws Throwable {
    int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-159));
    assertNull(intArray0);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)      = null
 * ArrayUtils.removeElement([], 1)        = []
 * ArrayUtils.removeElement([1], 2)       = [1]
 * ArrayUtils.removeElement([1, 3], 1)    = [3]
 * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static int[] removeElement(int[] array, int element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test041195() throws Throwable {
    int[] intArray0 = new int[0];
    int[] intArray1 = ArrayUtils.removeElement(intArray0, (-416));
    assertEquals(0, intArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)      = null
 * ArrayUtils.removeElement([], 1)        = []
 * ArrayUtils.removeElement([1], 2)       = [1]
 * ArrayUtils.removeElement([1, 3], 1)    = [3]
 * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static float[] removeElement(float[] array, float element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test042203() throws Throwable {
    float[] floatArray0 = new float[0];
    float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (-4025.3044F));
    assertEquals(0, floatArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1.1)            = null
 * ArrayUtils.removeElement([], 1.1)              = []
 * ArrayUtils.removeElement([1.1], 1.2)           = [1.1]
 * ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]
 * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public ArrayUtils() {
    super();
}","public void test043211() throws Throwable {
    ArrayUtils arrayUtils0 = new ArrayUtils();
    assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND);
}","/**
 * <p>ArrayUtils instances should NOT be constructed in standard programming.
 * Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.</p>
 *
 * <p>This constructor is public to permit tools that require a JavaBean instance
 * to operate.</p>
 */"
"public static byte[] removeElement(byte[] array, byte element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test043213() throws Throwable {
    ArrayUtils arrayUtils0 = new ArrayUtils();
    byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-32));
    assertEquals(0, byteArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)        = null
 * ArrayUtils.removeElement([], 1)          = []
 * ArrayUtils.removeElement([1], 0)         = [1]
 * ArrayUtils.removeElement([1, 0], 0)      = [1]
 * ArrayUtils.removeElement([1, 0, 1], 1)   = [0, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static short[] remove(short[] array, int index) {
    return (short[]) remove((Object) array, index);
}","public void test044217() throws Throwable {
    short[] shortArray0 = new short[8];
    short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);
    assertEquals(8, shortArray0.length);
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1], 0)         = []
 * ArrayUtils.remove([2, 6], 0)      = [6]
 * ArrayUtils.remove([2, 6], 1)      = [2]
 * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static short[] remove(short[] array, int index) {
    return (short[]) remove((Object) array, index);
}","public void test045225() throws Throwable {
    short[] shortArray0 = new short[1];
    short[] shortArray1 = ArrayUtils.remove(shortArray0, (int) (byte) 0);
    assertEquals(1, shortArray0.length);
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1], 0)         = []
 * ArrayUtils.remove([2, 6], 0)      = [6]
 * ArrayUtils.remove([2, 6], 1)      = [2]
 * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"@SuppressWarnings(""unchecked"")
public static <T> T[] remove(T[] array, int index) {
    return (T[]) remove((Object) array, index);
}","public void test046233() throws Throwable {
    String[] stringArray0 = new String[6];
    String[] stringArray1 = ArrayUtils.remove(stringArray0, 0);
    assertEquals(6, stringArray0.length);
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([""a""], 0)           = []
 * ArrayUtils.remove([""a"", ""b""], 0)      = [""b""]
 * ArrayUtils.remove([""a"", ""b""], 1)      = [""a""]
 * ArrayUtils.remove([""a"", ""b"", ""c""], 1) = [""a"", ""c""]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static long[] remove(long[] array, int index) {
    return (long[]) remove((Object) array, index);
}","public void test047239() throws Throwable {
    long[] longArray0 = new long[4];
    long[] longArray1 = ArrayUtils.remove(longArray0, 0);
    assertEquals(4, longArray0.length);
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1], 0)         = []
 * ArrayUtils.remove([2, 6], 0)      = [6]
 * ArrayUtils.remove([2, 6], 1)      = [2]
 * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static int[] remove(int[] array, int index) {
    return (int[]) remove((Object) array, index);
}","public void test048247() throws Throwable {
    int[] intArray0 = new int[7];
    int[] intArray1 = ArrayUtils.remove(intArray0, 0);
    assertEquals(7, intArray0.length);
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1], 0)         = []
 * ArrayUtils.remove([2, 6], 0)      = [6]
 * ArrayUtils.remove([2, 6], 1)      = [2]
 * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static float[] remove(float[] array, int index) {
    return (float[]) remove((Object) array, index);
}","public void test049255() throws Throwable {
    float[] floatArray0 = new float[3];
    float[] floatArray1 = ArrayUtils.remove(floatArray0, 0);
    assertEquals(3, floatArray0.length);
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1.1], 0)           = []
 * ArrayUtils.remove([2.5, 6.0], 0)      = [6.0]
 * ArrayUtils.remove([2.5, 6.0], 1)      = [2.5]
 * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static double[] remove(double[] array, int index) {
    return (double[]) remove((Object) array, index);
}","public void test050263() throws Throwable {
    double[] doubleArray0 = new double[4];
    double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);
    assertEquals(4, doubleArray0.length);
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1.1], 0)           = []
 * ArrayUtils.remove([2.5, 6.0], 0)      = [6.0]
 * ArrayUtils.remove([2.5, 6.0], 1)      = [2.5]
 * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static char[] remove(char[] array, int index) {
    return (char[]) remove((Object) array, index);
}","public void test051271() throws Throwable {
    char[] charArray0 = new char[9];
    char[] charArray1 = ArrayUtils.remove(charArray0, 0);
    assertEquals(9, charArray0.length);
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove(['a'], 0)           = []
 * ArrayUtils.remove(['a', 'b'], 0)      = ['b']
 * ArrayUtils.remove(['a', 'b'], 1)      = ['a']
 * ArrayUtils.remove(['a', 'b', 'c'], 1) = ['a', 'c']
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static byte[] remove(byte[] array, int index) {
    return (byte[]) remove((Object) array, index);
}","public void test052279() throws Throwable {
    byte[] byteArray0 = new byte[8];
    byte[] byteArray1 = ArrayUtils.remove(byteArray0, 1);
    assertEquals(8, byteArray0.length);
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1], 0)          = []
 * ArrayUtils.remove([1, 0], 0)       = [0]
 * ArrayUtils.remove([1, 0], 1)       = [1]
 * ArrayUtils.remove([1, 0, 1], 1)    = [1, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test053287() throws Throwable {
    boolean[] booleanArray0 = new boolean[3];
    booleanArray0[1] = true;
    int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2341);
    assertEquals(3, booleanArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(boolean[] array, boolean valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test054290() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);
    assertEquals(1, booleanArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) if
 * <code>null</code> array input.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(short[] array, short valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test055293() throws Throwable {
    short[] shortArray0 = new short[3];
    shortArray0[0] = (short) 1019;
    int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 1019);
    assertEquals(3, shortArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i >= 0; i--) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test056296() throws Throwable {
    Object[] objectArray0 = new Object[8];
    objectArray0[1] = (Object) (-2312L);
    objectArray0[2] = (Object) (-2312L);
    objectArray0[3] = (Object) (-780L);
    objectArray0[4] = objectArray0[2];
    objectArray0[5] = (Object) (-2312L);
    objectArray0[6] = (Object) (-2312L);
    objectArray0[7] = (Object) (-780L);
    int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 3937);
    assertEquals(8, objectArray0.length);
}","/**
 * <p>Finds the last index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(Object[] array, Object objectToFind) {
    return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);
}","public void test057299() throws Throwable {
    Object[] objectArray0 = new Object[6];
    Object object0 = new Object();
    objectArray0[1] = object0;
    int int0 = ArrayUtils.lastIndexOf(objectArray0, object0);
    assertEquals(6, objectArray0.length);
}","/**
 * <p>Finds the last index of the given object within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @return the last index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(long[] array, long valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test058301() throws Throwable {
    long[] longArray0 = new long[6];
    longArray0[0] = (-2319L);
    int int0 = ArrayUtils.lastIndexOf(longArray0, (-2319L));
    assertEquals(6, longArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(long[] array, long valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test059304() throws Throwable {
    long[] longArray0 = new long[4];
    longArray0[1] = (-1L);
    int int0 = ArrayUtils.lastIndexOf(longArray0, (-1L));
    assertEquals(4, longArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test060307() throws Throwable {
    int[] intArray0 = new int[9];
    intArray0[7] = (-2032);
    int int0 = ArrayUtils.lastIndexOf(intArray0, (-2032), 792);
    assertEquals(9, intArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(int[] array, int valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test061310() throws Throwable {
    int[] intArray0 = new int[2];
    intArray0[1] = 2;
    int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
    assertEquals(2, intArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(int[] array, int valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test062313() throws Throwable {
    int[] intArray0 = new int[9];
    int int0 = ArrayUtils.lastIndexOf(intArray0, 96);
    assertEquals(9, intArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test063316() throws Throwable {
    float[] floatArray0 = new float[5];
    int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0, 0);
    assertEquals(5, floatArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(float[] array, float valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test064319() throws Throwable {
    float[] floatArray0 = new float[3];
    floatArray0[0] = (-1.0F);
    int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
    assertEquals(3, floatArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"//   Float array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Floats to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Float</code> array, may be <code>null</code>
 * @return a <code>float</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static float[] toPrimitive(Float[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    final float[] result = new float[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].floatValue();
    }
    return result;
}","public void test065324() throws Throwable {
    Float[] floatArray0 = new Float[4];
    Float float0 = new Float(0.0);
    floatArray0[0] = float0;
    floatArray0[1] = floatArray0[0];
    floatArray0[2] = floatArray0[1];
    floatArray0[3] = floatArray0[2];
    float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
    assertEquals(4, floatArray0.length);
}",""
"public static int lastIndexOf(float[] array, float valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test065328() throws Throwable {
    Float[] floatArray0 = new Float[4];
    Float float0 = new Float(0.0);
    floatArray0[0] = float0;
    floatArray0[1] = floatArray0[0];
    floatArray0[2] = floatArray0[1];
    floatArray0[3] = floatArray0[2];
    float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
    int int0 = ArrayUtils.lastIndexOf(floatArray1, (float) floatArray0[1]);
    assertEquals(4, floatArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    double min = valueToFind - tolerance;
    double max = valueToFind + tolerance;
    for (int i = startIndex; i >= 0; i--) {
        if (array[i] >= min && array[i] <= max) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test066332() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 3165.946;
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3165.946, 2169, 1241.77977461);
    assertEquals(2, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.
 * This method will return the index of the last value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @param tolerance  search for value within plus/minus this amount
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test067335() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[4] = (double) (short) 9;
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, 9.0, 1452);
    assertEquals(8, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, double tolerance) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);
}","public void test068338() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 3313;
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3313, 538.76239278);
    assertEquals(6, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value within a given tolerance in the array.
 * This method will return the index of the last value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, double tolerance) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);
}","public void test069341() throws Throwable {
    double[] doubleArray0 = new double[5];
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 2149.0);
    assertEquals(5, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value within a given tolerance in the array.
 * This method will return the index of the last value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test070344() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[1] = (-1.0);
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
    assertEquals(2, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test071347() throws Throwable {
    char[] charArray0 = new char[2];
    charArray0[1] = 'L';
    int int0 = ArrayUtils.lastIndexOf(charArray0, 'L', 808);
    assertEquals(2, charArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"public static int lastIndexOf(char[] array, char valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test072350() throws Throwable {
    char[] charArray0 = new char[4];
    charArray0[3] = 'S';
    int int0 = ArrayUtils.lastIndexOf(charArray0, 'S');
    assertEquals(4, charArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test073353() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[2] = (byte) 70;
    int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 70, (int) (byte) 42);
    assertEquals(4, byteArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(byte[] array, byte valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test074356() throws Throwable {
    byte[] byteArray0 = new byte[2];
    byteArray0[0] = (byte) (-66);
    int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-66));
    assertEquals(2, byteArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(byte[] array, byte valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test075359() throws Throwable {
    byte[] byteArray0 = new byte[8];
    byteArray0[6] = (byte) (-1);
    int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-1));
    assertEquals(8, byteArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static boolean isSameType(Object array1, Object array2) {
    if (array1 == null || array2 == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    }
    return array1.getClass().getName().equals(array2.getClass().getName());
}","public void test076362() throws Throwable {
    boolean boolean0 = ArrayUtils.isSameType(""MZ&P"", ""MZ&P"");
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same type taking into account
 * multi-dimensional arrays.</p>
 *
 * @param array1 the first array, must not be <code>null</code>
 * @param array2 the second array, must not be <code>null</code>
 * @return <code>true</code> if type of arrays matches
 * @throws IllegalArgumentException if either array is <code>null</code>
 */"
"public static boolean isEquals(Object array1, Object array2) {
    return new EqualsBuilder().append(array1, array2).isEquals();
}","public void test077365() throws Throwable {
    Integer integer0 = new Integer(57);
    boolean boolean0 = ArrayUtils.isEquals(integer0, (Object) null);
    assertFalse(boolean0);
}","/**
 * <p>Compares two arrays, using equals(), handling multi-dimensional arrays
 * correctly.</p>
 *
 * <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>
 *
 * @param array1  the left hand array to compare, may be <code>null</code>
 * @param array2  the right hand array to compare, may be <code>null</code>
 * @return <code>true</code> if the arrays are equal
 */"
"public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test078366() throws Throwable {
    boolean[] booleanArray0 = new boolean[9];
    int int0 = ArrayUtils.indexOf(booleanArray0, false, 1);
    assertEquals(9, booleanArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code>
 *  array input
 */"
"// boolean IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(boolean[] array, boolean valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test079369() throws Throwable {
    boolean[] booleanArray0 = new boolean[8];
    booleanArray0[0] = true;
    int int0 = ArrayUtils.indexOf(booleanArray0, false);
    assertEquals(8, booleanArray0.length);
}",""
"// boolean IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(boolean[] array, boolean valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test080372() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    booleanArray0[0] = true;
    int int0 = ArrayUtils.indexOf(booleanArray0, false);
    assertEquals(1, booleanArray0.length);
}",""
"public static int indexOf(short[] array, short valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test081375() throws Throwable {
    short[] shortArray0 = new short[7];
    shortArray0[0] = (short) (byte) (-24);
    int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-471));
    assertEquals(7, shortArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"// short IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(short[] array, short valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test082378() throws Throwable {
    short[] shortArray0 = new short[2];
    shortArray0[0] = (short) 2;
    int int0 = ArrayUtils.indexOf(shortArray0, (short) 2);
    assertEquals(2, shortArray0.length);
}",""
"// short IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(short[] array, short valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test083381() throws Throwable {
    short[] shortArray0 = new short[6];
    shortArray0[1] = (short) 3295;
    int int0 = ArrayUtils.indexOf(shortArray0, (short) 3295);
    assertEquals(6, shortArray0.length);
}",""
"public static int indexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i < array.length; i++) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i < array.length; i++) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test084385() throws Throwable {
    Object[] objectArray0 = new Object[5];
    Object object0 = new Object();
    objectArray0[1] = object0;
    int int0 = ArrayUtils.indexOf(objectArray0, object0, 0);
    assertEquals(5, objectArray0.length);
}","/**
 * <p>Finds the index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the index to start searching at
 * @return the index of the object within the array starting at the index,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"// IndexOf search
// ----------------------------------------------------------------------
// Object IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given object in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @return the index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(Object[] array, Object objectToFind) {
    return indexOf(array, objectToFind, 0);
}","public void test085387() throws Throwable {
    Object[] objectArray0 = new Object[1];
    int int0 = ArrayUtils.indexOf(objectArray0, (Object) """");
    assertEquals(1, objectArray0.length);
}",""
"public static int indexOf(long[] array, long valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test086389() throws Throwable {
    long[] longArray0 = new long[6];
    longArray0[3] = (long) Integer.MAX_VALUE;
    int int0 = ArrayUtils.indexOf(longArray0, (long) Integer.MAX_VALUE, (-1));
    assertEquals(6, longArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"// long IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(long[] array, long valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test087392() throws Throwable {
    long[] longArray0 = new long[5];
    longArray0[4] = 5314L;
    int int0 = ArrayUtils.indexOf(longArray0, 5314L);
    assertEquals(5, longArray0.length);
}",""
"// long IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(long[] array, long valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test088395() throws Throwable {
    int int0 = ArrayUtils.indexOf((long[]) null, 1L);
    assertEquals((-1), int0);
}",""
"public static int indexOf(int[] array, int valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test089396() throws Throwable {
    int[] intArray0 = new int[2];
    intArray0[0] = (-819);
    int int0 = ArrayUtils.indexOf(intArray0, (-819), 0);
    assertEquals(2, intArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"// int IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(int[] array, int valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test090399() throws Throwable {
    int[] intArray0 = new int[9];
    intArray0[3] = (-839);
    int int0 = ArrayUtils.indexOf(intArray0, (-839));
    assertEquals(9, intArray0.length);
}",""
"// int IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(int[] array, int valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test091402() throws Throwable {
    int[] intArray0 = new int[2];
    intArray0[0] = 3;
    intArray0[1] = 233;
    int int0 = ArrayUtils.indexOf(intArray0, 0);
    assertEquals(2, intArray0.length);
}",""
"public static int indexOf(float[] array, float valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test092405() throws Throwable {
    float[] floatArray0 = new float[7];
    floatArray0[0] = 2883.183F;
    int int0 = ArrayUtils.indexOf(floatArray0, 2883.183F, 0);
    assertEquals(7, floatArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"// float IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(float[] array, float valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test093408() throws Throwable {
    float[] floatArray0 = new float[5];
    floatArray0[4] = (-345.353F);
    int int0 = ArrayUtils.indexOf(floatArray0, (-345.353F));
    assertEquals(5, floatArray0.length);
}",""
"// float IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(float[] array, float valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test094411() throws Throwable {
    float[] floatArray0 = new float[3];
    floatArray0[0] = (float) (byte) (-92);
    floatArray0[1] = (float) (-1);
    floatArray0[2] = (float) (-1);
    int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);
    assertEquals(3, floatArray0.length);
}",""
"public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    double min = valueToFind - tolerance;
    double max = valueToFind + tolerance;
    for (int i = startIndex; i < array.length; i++) {
        if (array[i] >= min && array[i] <= max) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test095414() throws Throwable {
    double[] doubleArray0 = new double[2];
    int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, (-518), (double) Integer.MAX_VALUE);
    assertEquals(2, doubleArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.
 * This method will return the index of the first value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(double[] array, double valueToFind, double tolerance) {
    return indexOf(array, valueToFind, 0, tolerance);
}","public void test096417() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) (-860.273F);
    int int0 = ArrayUtils.indexOf(doubleArray0, (double) 0, (double) 0L);
    assertEquals(8, doubleArray0.length);
}","/**
 * <p>Finds the index of the given value within a given tolerance in the array.
 * This method will return the index of the first value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"// double IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(double[] array, double valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test097420() throws Throwable {
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = 1.0;
    int int0 = ArrayUtils.indexOf(doubleArray0, 1.0);
    assertEquals(3, doubleArray0.length);
}",""
"// double IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(double[] array, double valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test098423() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) (short) 57;
    int int0 = ArrayUtils.indexOf(doubleArray0, 0.0);
    assertEquals(6, doubleArray0.length);
}",""
"public static int indexOf(char[] array, char valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test099426() throws Throwable {
    char[] charArray0 = new char[9];
    charArray0[2] = 'C';
    int int0 = ArrayUtils.indexOf(charArray0, 'C', 0);
    assertEquals(9, charArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"// char IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */
public static int indexOf(char[] array, char valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test100429() throws Throwable {
    char[] charArray0 = new char[3];
    charArray0[0] = '.';
    int int0 = ArrayUtils.indexOf(charArray0, '.');
    assertEquals(3, charArray0.length);
}",""
"// char IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */
public static int indexOf(char[] array, char valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test101432() throws Throwable {
    char[] charArray0 = new char[9];
    charArray0[7] = 'h';
    int int0 = ArrayUtils.indexOf(charArray0, 'h');
    assertEquals(9, charArray0.length);
}",""
"public static void reverse(byte[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    byte tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test102435() throws Throwable {
    byte[] byteArray0 = new byte[5];
    byteArray0[4] = (byte) 120;
    ArrayUtils.reverse(byteArray0);
    assertEquals(5, byteArray0.length);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static int indexOf(byte[] array, byte valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test102437() throws Throwable {
    byte[] byteArray0 = new byte[5];
    byteArray0[4] = (byte) 120;
    ArrayUtils.reverse(byteArray0);
    int int0 = ArrayUtils.indexOf(byteArray0, (byte) 120, 0);
    assertEquals(5, byteArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"// byte IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(byte[] array, byte valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test103440() throws Throwable {
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) 49;
    int int0 = ArrayUtils.indexOf(byteArray0, (byte) 49);
    assertEquals(5, byteArray0.length);
}",""
"// byte IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(byte[] array, byte valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test104443() throws Throwable {
    byte[] byteArray0 = new byte[6];
    byteArray0[4] = (byte) (-56);
    int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-56));
    assertEquals(6, byteArray0.length);
}",""
"public static boolean[] clone(boolean[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test105446() throws Throwable {
    boolean[] booleanArray0 = new boolean[0];
    boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
    assertEquals(0, booleanArray0.length);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static short[] clone(short[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test106454() throws Throwable {
    short[] shortArray0 = new short[7];
    short[] shortArray1 = ArrayUtils.clone(shortArray0);
    assertEquals(7, shortArray0.length);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"// Clone
//-----------------------------------------------------------------------
/**
 * <p>Shallow clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>The objects in the array are not cloned, thus there is no special
 * handling for multi-dimensional arrays.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to shallow clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */
public static <T> T[] clone(T[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test107462() throws Throwable {
    Integer[] integerArray0 = new Integer[0];
    Integer[] integerArray1 = ArrayUtils.clone(integerArray0);
    assertEquals(0, integerArray0.length);
}",""
"public static long[] clone(long[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test108468() throws Throwable {
    long[] longArray0 = new long[8];
    long[] longArray1 = ArrayUtils.clone(longArray0);
    assertEquals(8, longArray0.length);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static int[] clone(int[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test109476() throws Throwable {
    int[] intArray0 = new int[2];
    int[] intArray1 = ArrayUtils.clone(intArray0);
    assertEquals(2, intArray0.length);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static char[] clone(char[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test110484() throws Throwable {
    char[] charArray0 = new char[7];
    char[] charArray1 = ArrayUtils.clone(charArray0);
    assertEquals(7, charArray0.length);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static byte[] clone(byte[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test111492() throws Throwable {
    byte[] byteArray0 = new byte[0];
    byte[] byteArray1 = ArrayUtils.clone(byteArray0);
    assertEquals(0, byteArray0.length);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static boolean[] addAll(boolean[] array1, boolean... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    boolean[] joinedArray = new boolean[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test112500() throws Throwable {
    boolean[] booleanArray0 = new boolean[0];
    boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
    assertEquals(0, booleanArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new boolean[] array.
 * @since 2.1
 */"
"public static short[] addAll(short[] array1, short... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    short[] joinedArray = new short[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test113508() throws Throwable {
    short[] shortArray0 = new short[0];
    short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
    assertEquals(0, shortArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new short[] array.
 * @since 2.1
 */"
"@SuppressWarnings(""unchecked"")
public static <T> T[] addAll(T[] array1, T... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    final Class<?> type1 = array1.getClass().getComponentType();
    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    // Check if problem is incompatible types
    return joinedArray;
}","public void test114516() throws Throwable {
    String[] stringArray0 = new String[0];
    String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
    assertEquals(0, stringArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(null, null)     = null
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * ArrayUtils.addAll([null], [null]) = [null, null]
 * ArrayUtils.addAll([""a"", ""b"", ""c""], [""1"", ""2"", ""3""]) = [""a"", ""b"", ""c"", ""1"", ""2"", ""3""]
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
 * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
 * @return The new array, <code>null</code> if both arrays are <code>null</code>.
 *      The type of the new array is the type of the first array,
 *      unless the first array is null, in which case the type is the same as the second array.
 * @since 2.1
 */"
"public static long[] addAll(long[] array1, long... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    long[] joinedArray = new long[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test115522() throws Throwable {
    long[] longArray0 = new long[0];
    long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
    assertEquals(0, longArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new long[] array.
 * @since 2.1
 */"
"public static int[] addAll(int[] array1, int... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    int[] joinedArray = new int[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test116530() throws Throwable {
    int[] intArray0 = new int[0];
    int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
    assertEquals(0, intArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new int[] array.
 * @since 2.1
 */"
"public static double[] addAll(double[] array1, double... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    double[] joinedArray = new double[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test117538() throws Throwable {
    double[] doubleArray0 = new double[0];
    double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
    assertEquals(0, doubleArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new double[] array.
 * @since 2.1
 */"
"public static byte[] addAll(byte[] array1, byte... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    byte[] joinedArray = new byte[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test118546() throws Throwable {
    byte[] byteArray0 = new byte[0];
    byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
    assertEquals(0, byteArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new byte[] array.
 * @since 2.1
 */"
"public static boolean[] add(boolean[] array, int index, boolean element) {
    return (boolean[]) add(array, index, Boolean.valueOf(element), Boolean.TYPE);
}","public void test119554() throws Throwable {
    boolean[] booleanArray0 = new boolean[2];
    boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true);
    assertEquals(2, booleanArray0.length);
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0, true)          = [true]
 * ArrayUtils.add([true], 0, false)       = [false, true]
 * ArrayUtils.add([false], 1, true)       = [false, true]
 * ArrayUtils.add([true, false], 1, true) = [true, true, false]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static long[] add(long[] array, int index, long element) {
    return (long[]) add(array, index, Long.valueOf(element), Long.TYPE);
}","public void test120562() throws Throwable {
    long[] longArray0 = new long[5];
    long[] longArray1 = ArrayUtils.add(longArray0, 1, (-1617L));
    assertEquals(5, longArray0.length);
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1L], 0, 2L)           = [2L, 1L]
 * ArrayUtils.add([2L, 6L], 2, 10L)      = [2L, 6L, 10L]
 * ArrayUtils.add([2L, 6L], 0, -4L)      = [-4L, 2L, 6L]
 * ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static float[] add(float[] array, int index, float element) {
    return (float[]) add(array, index, Float.valueOf(element), Float.TYPE);
}","public void test121570() throws Throwable {
    float[] floatArray0 = new float[5];
    float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 1088.0F);
    assertEquals(5, floatArray0.length);
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1.1f], 0, 2.2f)               = [2.2f, 1.1f]
 * ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        = [2.3f, 6.4f, 10.5f]
 * ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        = [-4.8f, 2.6f, 6.7f]
 * ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static char[] add(char[] array, int index, char element) {
    return (char[]) add(array, index, Character.valueOf(element), Character.TYPE);
}","public void test122578() throws Throwable {
    char[] charArray0 = new char[3];
    char[] charArray1 = ArrayUtils.add(charArray0, 2, 'g');
    assertEquals(3, charArray0.length);
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0, 'a')            = ['a']
 * ArrayUtils.add(['a'], 0, 'b')           = ['b', 'a']
 * ArrayUtils.add(['a', 'b'], 0, 'c')      = ['c', 'a', 'b']
 * ArrayUtils.add(['a', 'b'], 1, 'k')      = ['a', 'k', 'b']
 * ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c']
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static byte[] add(byte[] array, int index, byte element) {
    return (byte[]) add(array, index, Byte.valueOf(element), Byte.TYPE);
}","public void test123586() throws Throwable {
    byte[] byteArray0 = new byte[8];
    byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte) 3, (byte) 18);
    assertEquals(8, byteArray0.length);
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1], 0, 2)         = [2, 1]
 * ArrayUtils.add([2, 6], 2, 3)      = [2, 6, 3]
 * ArrayUtils.add([2, 6], 0, 1)      = [1, 2, 6]
 * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static boolean[] remove(boolean[] array, int index) {
    return (boolean[]) remove((Object) array, index);
}","public void test124594() throws Throwable {
    boolean[] booleanArray0 = new boolean[9];
    // Undeclared exception!
    try {
        ArrayUtils.remove(booleanArray0, (-2145610062));
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -2145610062, Length: 9
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([true], 0)              = []
 * ArrayUtils.remove([true, false], 0)       = [false]
 * ArrayUtils.remove([true, false], 1)       = [true]
 * ArrayUtils.remove([true, true, false], 1) = [true, false]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static int[] remove(int[] array, int index) {
    return (int[]) remove((Object) array, index);
}","public void test125595() throws Throwable {
    int[] intArray0 = new int[8];
    // Undeclared exception!
    try {
        ArrayUtils.remove(intArray0, 707);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 707, Length: 8
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1], 0)         = []
 * ArrayUtils.remove([2, 6], 0)      = [6]
 * ArrayUtils.remove([2, 6], 1)      = [2]
 * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static short[] add(short[] array, int index, short element) {
    return (short[]) add(array, index, Short.valueOf(element), Short.TYPE);
}","public void test126596() throws Throwable {
    short[] shortArray0 = new short[1];
    // Undeclared exception!
    try {
        ArrayUtils.add(shortArray0, (-3481), (short) 0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -3481, Length: 1
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1], 0, 2)         = [2, 1]
 * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]
 * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]
 * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static double[] add(double[] array, int index, double element) {
    return (double[]) add(array, index, Double.valueOf(element), Double.TYPE);
}","public void test127597() throws Throwable {
    double[] doubleArray0 = new double[3];
    // Undeclared exception!
    try {
        ArrayUtils.add(doubleArray0, (-1), 84.0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1, Length: 3
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1.1], 0, 2.2)              = [2.2, 1.1]
 * ArrayUtils.add([2.3, 6.4], 2, 10.5)        = [2.3, 6.4, 10.5]
 * ArrayUtils.add([2.6, 6.7], 0, -4.8)        = [-4.8, 2.6, 6.7]
 * ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static boolean isEmpty(boolean[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test128598() throws Throwable {
    boolean[] booleanArray0 = new boolean[0];
    boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
    assertEquals(0, booleanArray0.length);
}","/**
 * <p>Checks if an array of primitive booleans is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(boolean[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test129601() throws Throwable {
    boolean boolean0 = ArrayUtils.isEmpty((boolean[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks if an array of primitive booleans is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(boolean[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test130602() throws Throwable {
    boolean[] booleanArray0 = new boolean[3];
    boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);
    assertEquals(3, booleanArray0.length);
}","/**
 * <p>Checks if an array of primitive booleans is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(float[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test131605() throws Throwable {
    boolean boolean0 = ArrayUtils.isEmpty((float[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks if an array of primitive floats is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static float[] addAll(float[] array1, float... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    float[] joinedArray = new float[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test132606() throws Throwable {
    float[] floatArray0 = new float[0];
    float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
    assertEquals(0, floatArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new float[] array.
 * @since 2.1
 */"
"public static boolean isEmpty(float[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test132614() throws Throwable {
    float[] floatArray0 = new float[0];
    float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
    boolean boolean0 = ArrayUtils.isEmpty(floatArray1);
    assertEquals(0, floatArray0.length);
}","/**
 * <p>Checks if an array of primitive floats is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(float[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test133623() throws Throwable {
    float[] floatArray0 = new float[2];
    boolean boolean0 = ArrayUtils.isEmpty(floatArray0);
    assertEquals(2, floatArray0.length);
}","/**
 * <p>Checks if an array of primitive floats is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(double[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test134626() throws Throwable {
    double[] doubleArray0 = new double[0];
    boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
    assertEquals(0, doubleArray0.length);
}","/**
 * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(double[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test135629() throws Throwable {
    boolean boolean0 = ArrayUtils.isEmpty((double[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(double[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test136630() throws Throwable {
    double[] doubleArray0 = new double[4];
    boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);
    assertEquals(4, doubleArray0.length);
}","/**
 * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test137633() throws Throwable {
    boolean[] booleanArray0 = new boolean[3];
    booleanArray0[0] = true;
    int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 2341);
    assertEquals(3, booleanArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test138636() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    booleanArray0[0] = true;
    int int0 = ArrayUtils.indexOf(booleanArray0, true, (int) (byte) (-66));
    assertEquals(1, booleanArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code>
 *  array input
 */"
"public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test139639() throws Throwable {
    boolean[] booleanArray0 = new boolean[3];
    int int0 = ArrayUtils.indexOf(booleanArray0, true, 0);
    assertEquals(3, booleanArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code>
 *  array input
 */"
"public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test140642() throws Throwable {
    int int0 = ArrayUtils.indexOf((boolean[]) null, true, 2);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code>
 *  array input
 */"
"public static int indexOf(float[] array, float valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test141643() throws Throwable {
    float[] floatArray0 = new float[6];
    int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (int) (byte) 1);
    assertEquals(6, floatArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test142646() throws Throwable {
    double[] doubleArray0 = new double[1];
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1084.18), 556);
    assertEquals(1, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    double min = valueToFind - tolerance;
    double max = valueToFind + tolerance;
    for (int i = startIndex; i < array.length; i++) {
        if (array[i] >= min && array[i] <= max) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test143649() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[1] = 2046.087994;
    int int0 = ArrayUtils.indexOf(doubleArray0, 2878.4661, (-979), 963.0356);
    assertEquals(6, doubleArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.
 * This method will return the index of the first value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    double min = valueToFind - tolerance;
    double max = valueToFind + tolerance;
    for (int i = startIndex; i < array.length; i++) {
        if (array[i] >= min && array[i] <= max) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test144652() throws Throwable {
    double[] doubleArray0 = new double[8];
    int int0 = ArrayUtils.indexOf(doubleArray0, 343.0, 0, (double) 0);
    assertEquals(8, doubleArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.
 * This method will return the index of the first value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    double min = valueToFind - tolerance;
    double max = valueToFind + tolerance;
    for (int i = startIndex; i < array.length; i++) {
        if (array[i] >= min && array[i] <= max) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test145655() throws Throwable {
    int int0 = ArrayUtils.indexOf((double[]) null, (-1084.18), 0, (double) 0);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.
 * This method will return the index of the first value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(double[] array, double valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test146656() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[0] = (double) 'w';
    int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) 0, (int) (short) (-1289));
    assertEquals(6, doubleArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(double[] array, double valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test147659() throws Throwable {
    double[] doubleArray0 = new double[4];
    int int0 = ArrayUtils.indexOf(doubleArray0, (double) (byte) (-125), 474);
    assertEquals(4, doubleArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(double[] array, double valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test148662() throws Throwable {
    int int0 = ArrayUtils.indexOf((double[]) null, 630.736923883764, (-453));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test149663() throws Throwable {
    byte[] byteArray0 = new byte[4];
    int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 70, (int) (byte) 42);
    assertEquals(4, byteArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test150666() throws Throwable {
    int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) 127, (-1286));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(byte[] array, byte valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test151667() throws Throwable {
    byte[] byteArray0 = new byte[5];
    byteArray0[4] = (byte) 120;
    int int0 = ArrayUtils.indexOf(byteArray0, (byte) 120, 0);
    assertEquals(5, byteArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(byte[] array, byte valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test152670() throws Throwable {
    int int0 = ArrayUtils.indexOf((byte[]) null, (byte) 0, Integer.MAX_VALUE);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test153671() throws Throwable {
    char[] charArray0 = new char[1];
    charArray0[0] = 'j';
    int int0 = ArrayUtils.lastIndexOf(charArray0, 'j', 0);
    assertEquals(1, charArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"public static int indexOf(char[] array, char valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test154674() throws Throwable {
    char[] charArray0 = new char[3];
    charArray0[0] = 'E';
    int int0 = ArrayUtils.indexOf(charArray0, 'E', (int) (byte) (-24));
    assertEquals(3, charArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"public static int indexOf(char[] array, char valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test155677() throws Throwable {
    int int0 = ArrayUtils.indexOf((char[]) null, 'p', 0);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test156678() throws Throwable {
    short[] shortArray0 = new short[9];
    shortArray0[8] = (short) 4;
    int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 4, 2281);
    assertEquals(9, shortArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test157681() throws Throwable {
    short[] shortArray0 = new short[9];
    int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 4, 2281);
    assertEquals(9, shortArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(short[] array, short valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test158684() throws Throwable {
    short[] shortArray0 = new short[1];
    shortArray0[0] = (short) (byte) (-24);
    int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-458));
    assertEquals(1, shortArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(short[] array, short valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test159687() throws Throwable {
    short[] shortArray0 = new short[3];
    int int0 = ArrayUtils.indexOf(shortArray0, (short) 2944, 64);
    assertEquals(3, shortArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(int[] array, int valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test160690() throws Throwable {
    int[] intArray0 = new int[2];
    intArray0[1] = 1;
    int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
    assertEquals(2, intArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(int[] array, int valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test161693() throws Throwable {
    int[] intArray0 = new int[2];
    int int0 = ArrayUtils.indexOf(intArray0, 1, 1);
    assertEquals(2, intArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(int[] array, int valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test162696() throws Throwable {
    int int0 = ArrayUtils.indexOf((int[]) null, 258, 1);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test163697() throws Throwable {
    long[] longArray0 = new long[8];
    longArray0[0] = (long) 556;
    int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
    assertEquals(8, longArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test164700() throws Throwable {
    long[] longArray0 = new long[5];
    int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, (int) (short) 527);
    assertEquals(5, longArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(long[] array, long valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test165703() throws Throwable {
    long[] longArray0 = new long[4];
    longArray0[0] = 439L;
    int int0 = ArrayUtils.indexOf(longArray0, 439L, 0);
    assertEquals(4, longArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(long[] array, long valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test166706() throws Throwable {
    long[] longArray0 = new long[1];
    int int0 = ArrayUtils.indexOf(longArray0, (-3266L), 100);
    assertEquals(1, longArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i >= 0; i--) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test167709() throws Throwable {
    Object[] objectArray0 = new Object[8];
    objectArray0[5] = (Object) (-2312L);
    int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[5], 3937);
    assertEquals(8, objectArray0.length);
}","/**
 * <p>Finds the last index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static Boolean[] toObject(boolean[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BOOLEAN_OBJECT_ARRAY;
    }
    final Boolean[] result = new Boolean[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);
    }
    return result;
}","public void test168711() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
    assertEquals(1, booleanArray0.length);
}","/**
 * <p>Converts an array of primitive booleans to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>boolean</code> array
 * @return a <code>Boolean</code> array, <code>null</code> if null array input
 */"
"public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i >= 0; i--) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test168715() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
    int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray1, (Object) """", 31);
    assertEquals(1, booleanArray0.length);
}","/**
 * <p>Finds the last index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i < array.length; i++) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i < array.length; i++) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test169720() throws Throwable {
    Object[] objectArray0 = new Object[5];
    Object object0 = new Object();
    int int0 = ArrayUtils.indexOf(objectArray0, object0, 0);
    assertEquals(5, objectArray0.length);
}","/**
 * <p>Finds the index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the index to start searching at
 * @return the index of the object within the array starting at the index,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i < array.length; i++) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i < array.length; i++) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test170723() throws Throwable {
    Object[] objectArray0 = new Object[5];
    Object object0 = new Object();
    objectArray0[0] = object0;
    int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], 0);
    assertEquals(5, objectArray0.length);
}","/**
 * <p>Finds the index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the index to start searching at
 * @return the index of the object within the array starting at the index,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i < array.length; i++) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i < array.length; i++) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test171725() throws Throwable {
    Boolean[] booleanArray0 = new Boolean[3];
    int int0 = ArrayUtils.indexOf((Object[]) booleanArray0, (Object) ""', is neither of type Map.Entry nor an Array"", 64);
    assertEquals(3, booleanArray0.length);
}","/**
 * <p>Finds the index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the index to start searching at
 * @return the index of the object within the array starting at the index,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i < array.length; i++) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i < array.length; i++) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test172727() throws Throwable {
    Object[] objectArray0 = new Object[8];
    int int0 = ArrayUtils.indexOf(objectArray0, (Object) null, (int) (byte) 70);
    assertEquals(8, objectArray0.length);
}","/**
 * <p>Finds the index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the index to start searching at
 * @return the index of the object within the array starting at the index,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i < array.length; i++) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i < array.length; i++) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test173730() throws Throwable {
    Object[] objectArray0 = new Object[0];
    Object object0 = new Object();
    int int0 = ArrayUtils.indexOf(objectArray0, object0, 1406);
    assertEquals(0, objectArray0.length);
}","/**
 * <p>Finds the index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the index to start searching at
 * @return the index of the object within the array starting at the index,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i < array.length; i++) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i < array.length; i++) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test174732() throws Throwable {
    int int0 = ArrayUtils.indexOf((Object[]) null, (Object) ""java.lang.Integer"", (int) (short) (-1));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the index to start searching at
 * @return the index of the object within the array starting at the index,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"//-----------------------------------------------------------------------
/**
 * <p>Returns the length of the specified array.
 * This method can deal with <code>Object</code> arrays and with primitive arrays.</p>
 *
 * <p>If the input array is <code>null</code>, <code>0</code> is returned.</p>
 *
 * <pre>
 * ArrayUtils.getLength(null)            = 0
 * ArrayUtils.getLength([])              = 0
 * ArrayUtils.getLength([null])          = 1
 * ArrayUtils.getLength([true, false])   = 2
 * ArrayUtils.getLength([1, 2, 3])       = 3
 * ArrayUtils.getLength([""a"", ""b"", ""c""]) = 3
 * </pre>
 *
 * @param array  the array to retrieve the length from, may be null
 * @return The length of the array, or <code>0</code> if the array is <code>null</code>
 * @throws IllegalArgumentException if the object arguement is not an array.
 * @since 2.1
 */
public static int getLength(Object array) {
    if (array == null) {
        return 0;
    }
    return Array.getLength(array);
}","public void test175734() throws Throwable {
    Object object0 = new Object();
    // Undeclared exception!
    try {
        ArrayUtils.getLength(object0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Argument is not an array
        //
        verifyException(""java.lang.reflect.Array"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Returns the length of the specified array.
 * This method can deal with <code>Object</code> arrays and with primitive arrays.</p>
 *
 * <p>If the input array is <code>null</code>, <code>0</code> is returned.</p>
 *
 * <pre>
 * ArrayUtils.getLength(null)            = 0
 * ArrayUtils.getLength([])              = 0
 * ArrayUtils.getLength([null])          = 1
 * ArrayUtils.getLength([true, false])   = 2
 * ArrayUtils.getLength([1, 2, 3])       = 3
 * ArrayUtils.getLength([""a"", ""b"", ""c""]) = 3
 * </pre>
 *
 * @param array  the array to retrieve the length from, may be null
 * @return The length of the array, or <code>0</code> if the array is <code>null</code>
 * @throws IllegalArgumentException if the object arguement is not an array.
 * @since 2.1
 */
public static int getLength(Object array) {
    if (array == null) {
        return 0;
    }
    return Array.getLength(array);
}","public void test176735() throws Throwable {
    int int0 = ArrayUtils.getLength((Object) null);
    assertEquals(0, int0);
}",""
"public static boolean[] clone(boolean[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test177736() throws Throwable {
    boolean[] booleanArray0 = ArrayUtils.clone((boolean[]) null);
    assertNull(booleanArray0);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static boolean[] clone(boolean[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test178737() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);
    assertEquals(1, booleanArray0.length);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static double[] clone(double[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test179745() throws Throwable {
    double[] doubleArray0 = new double[5];
    double[] doubleArray1 = ArrayUtils.clone(doubleArray0);
    assertEquals(5, doubleArray0.length);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static byte[] clone(byte[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test180753() throws Throwable {
    byte[] byteArray0 = new byte[8];
    byte[] byteArray1 = ArrayUtils.clone(byteArray0);
    assertEquals(8, byteArray0.length);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static char[] clone(char[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test181761() throws Throwable {
    char[] charArray0 = ArrayUtils.clone((char[]) null);
    assertNull(charArray0);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static char[] clone(char[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test182762() throws Throwable {
    char[] charArray0 = new char[0];
    char[] charArray1 = ArrayUtils.clone(charArray0);
    assertEquals(0, charArray0.length);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static int[] clone(int[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test183770() throws Throwable {
    int[] intArray0 = new int[0];
    int[] intArray1 = ArrayUtils.clone(intArray0);
    assertEquals(0, intArray0.length);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static int[] clone(int[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test184778() throws Throwable {
    int[] intArray0 = ArrayUtils.clone((int[]) null);
    assertNull(intArray0);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"// Clone
//-----------------------------------------------------------------------
/**
 * <p>Shallow clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>The objects in the array are not cloned, thus there is no special
 * handling for multi-dimensional arrays.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to shallow clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */
public static <T> T[] clone(T[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test185783() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
    Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray1);
    assertEquals(1, booleanArray0.length);
}",""
"public static String toString(Object array, String stringIfNull) {
    if (array == null) {
        return stringIfNull;
    }
    return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();
}","public void test186790() throws Throwable {
    Object object0 = new Object();
    String string0 = ArrayUtils.toString(object0, ""sj[7zW`^LaSlQ"");
    assertNotNull(string0);
}","/**
 * <p>Outputs an array as a String handling <code>null</code>s.</p>
 *
 * <p>Multi-dimensional arrays are handled correctly, including
 * multi-dimensional primitive arrays.</p>
 *
 * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
 *
 * @param array  the array to get a toString for, may be <code>null</code>
 * @param stringIfNull  the String to return if the array is <code>null</code>
 * @return a String representation of the array
 */"
"// char IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */
public static int indexOf(char[] array, char valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test187791() throws Throwable {
    char[] charArray0 = new char[3];
    int int0 = ArrayUtils.indexOf(charArray0, '.');
    assertEquals(3, charArray0.length);
}",""
"// boolean IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(boolean[] array, boolean valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test188794() throws Throwable {
    boolean[] booleanArray0 = new boolean[8];
    int int0 = ArrayUtils.indexOf(booleanArray0, false);
    assertEquals(8, booleanArray0.length);
}",""
"// byte IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(byte[] array, byte valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test189797() throws Throwable {
    byte[] byteArray0 = new byte[7];
    int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1));
    assertEquals(7, byteArray0.length);
}",""
"public static int[] remove(int[] array, int index) {
    return (int[]) remove((Object) array, index);
}","public void test190800() throws Throwable {
    int[] intArray0 = new int[1];
    int[] intArray1 = ArrayUtils.remove(intArray0, 0);
    assertEquals(1, intArray0.length);
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1], 0)         = []
 * ArrayUtils.remove([2, 6], 0)      = [6]
 * ArrayUtils.remove([2, 6], 1)      = [2]
 * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"// int IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(int[] array, int valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test191808() throws Throwable {
    int[] intArray0 = new int[2];
    int int0 = ArrayUtils.indexOf(intArray0, 0);
    assertEquals(2, intArray0.length);
}",""
"public static short[] removeElement(short[] array, short element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test192811() throws Throwable {
    short[] shortArray0 = new short[6];
    shortArray0[3] = (short) (-468);
    short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-468));
    assertEquals(6, shortArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)      = null
 * ArrayUtils.removeElement([], 1)        = []
 * ArrayUtils.removeElement([1], 2)       = [1]
 * ArrayUtils.removeElement([1, 3], 1)    = [3]
 * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static long[] removeElement(long[] array, long element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test193819() throws Throwable {
    long[] longArray0 = ArrayUtils.removeElement((long[]) null, 1L);
    assertNull(longArray0);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)      = null
 * ArrayUtils.removeElement([], 1)        = []
 * ArrayUtils.removeElement([1], 2)       = [1]
 * ArrayUtils.removeElement([1, 3], 1)    = [3]
 * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static long[] removeElement(long[] array, long element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test194820() throws Throwable {
    long[] longArray0 = new long[1];
    longArray0[0] = (-1L);
    long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1L));
    assertEquals(1, longArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)      = null
 * ArrayUtils.removeElement([], 1)        = []
 * ArrayUtils.removeElement([1], 2)       = [1]
 * ArrayUtils.removeElement([1, 3], 1)    = [3]
 * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static float[] removeElement(float[] array, float element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test195828() throws Throwable {
    float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 2646.16F);
    assertNull(floatArray0);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1.1)            = null
 * ArrayUtils.removeElement([], 1.1)              = []
 * ArrayUtils.removeElement([1.1], 1.2)           = [1.1]
 * ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]
 * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static float[] removeElement(float[] array, float element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test196829() throws Throwable {
    float[] floatArray0 = new float[6];
    float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);
    assertEquals(6, floatArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1.1)            = null
 * ArrayUtils.removeElement([], 1.1)              = []
 * ArrayUtils.removeElement([1.1], 1.2)           = [1.1]
 * ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]
 * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static double[] removeElement(double[] array, double element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test197837() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = 1.0;
    double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1.0);
    assertEquals(2, doubleArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1.1)            = null
 * ArrayUtils.removeElement([], 1.1)              = []
 * ArrayUtils.removeElement([1.1], 1.2)           = [1.1]
 * ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]
 * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static char[] removeElement(char[] array, char element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test198845() throws Throwable {
    char[] charArray0 = new char[3];
    charArray0[0] = 'j';
    char[] charArray1 = ArrayUtils.removeElement(charArray0, 'j');
    assertEquals(3, charArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 'a')            = null
 * ArrayUtils.removeElement([], 'a')              = []
 * ArrayUtils.removeElement(['a'], 'b')           = ['a']
 * ArrayUtils.removeElement(['a', 'b'], 'a')      = ['b']
 * ArrayUtils.removeElement(['a', 'b', 'a'], 'a') = ['b', 'a']
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static boolean[] removeElement(boolean[] array, boolean element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test199853() throws Throwable {
    boolean[] booleanArray0 = new boolean[3];
    booleanArray0[0] = true;
    boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
    assertEquals(3, booleanArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, true)                = null
 * ArrayUtils.removeElement([], true)                  = []
 * ArrayUtils.removeElement([true], false)             = [true]
 * ArrayUtils.removeElement([true, false], false)      = [true]
 * ArrayUtils.removeElement([true, false, true], true) = [false, true]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static <T> T[] removeElement(T[] array, Object element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test200861() throws Throwable {
    String[] stringArray0 = new String[5];
    stringArray0[1] = ""user.name"";
    String[] stringArray1 = ArrayUtils.removeElement(stringArray0, (Object) ""user.name"");
    assertEquals(5, stringArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, ""a"")            = null
 * ArrayUtils.removeElement([], ""a"")              = []
 * ArrayUtils.removeElement([""a""], ""b"")           = [""a""]
 * ArrayUtils.removeElement([""a"", ""b""], ""a"")      = [""b""]
 * ArrayUtils.removeElement([""a"", ""b"", ""a""], ""a"") = [""b"", ""a""]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static int[] add(int[] array, int index, int element) {
    return (int[]) add(array, index, Integer.valueOf(element), Integer.TYPE);
}","public void test201869() throws Throwable {
    ArrayUtils arrayUtils0 = new ArrayUtils();
    int[] intArray0 = ArrayUtils.add(arrayUtils0.EMPTY_INT_ARRAY, 0, 0);
    assertEquals(1, intArray0.length);
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1], 0, 2)         = [2, 1]
 * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]
 * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]
 * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"@SuppressWarnings(""unchecked"")
public static <T> T[] add(T[] array, int index, T element) {
    Class<?> clss = null;
    if (array != null) {
        clss = array.getClass().getComponentType();
    } else if (element != null) {
        clss = element.getClass();
    } else {
        return (T[]) new Object[] { null };
    }
    return (T[]) add(array, index, element, clss);
}","public void test202873() throws Throwable {
    Object[] objectArray0 = ArrayUtils.add((Object[]) null, 64, (Object) null);
    assertEquals(1, objectArray0.length);
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0, null)      = [null]
 * ArrayUtils.add(null, 0, ""a"")       = [""a""]
 * ArrayUtils.add([""a""], 1, null)     = [""a"", null]
 * ArrayUtils.add([""a""], 1, ""b"")      = [""a"", ""b""]
 * ArrayUtils.add([""a"", ""b""], 3, ""c"") = [""a"", ""b"", ""c""]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"@SuppressWarnings(""unchecked"")
public static <T> T[] add(T[] array, int index, T element) {
    Class<?> clss = null;
    if (array != null) {
        clss = array.getClass().getComponentType();
    } else if (element != null) {
        clss = element.getClass();
    } else {
        return (T[]) new Object[] { null };
    }
    return (T[]) add(array, index, element, clss);
}","public void test203875() throws Throwable {
    String[] stringArray0 = new String[8];
    String[] stringArray1 = ArrayUtils.add(stringArray0, 0, """");
    assertEquals(8, stringArray0.length);
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0, null)      = [null]
 * ArrayUtils.add(null, 0, ""a"")       = [""a""]
 * ArrayUtils.add([""a""], 1, null)     = [""a"", null]
 * ArrayUtils.add([""a""], 1, ""b"")      = [""a"", ""b""]
 * ArrayUtils.add([""a"", ""b""], 3, ""c"") = [""a"", ""b"", ""c""]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"@SuppressWarnings(""unchecked"")
public static <T> T[] add(T[] array, int index, T element) {
    Class<?> clss = null;
    if (array != null) {
        clss = array.getClass().getComponentType();
    } else if (element != null) {
        clss = element.getClass();
    } else {
        return (T[]) new Object[] { null };
    }
    return (T[]) add(array, index, element, clss);
}","public void test204882() throws Throwable {
    Object object0 = new Object();
    // Undeclared exception!
    try {
        ArrayUtils.add((Object[]) null, (-1963), object0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1963, Length: 0
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0, null)      = [null]
 * ArrayUtils.add(null, 0, ""a"")       = [""a""]
 * ArrayUtils.add([""a""], 1, null)     = [""a"", null]
 * ArrayUtils.add([""a""], 1, ""b"")      = [""a"", ""b""]
 * ArrayUtils.add([""a"", ""b""], 3, ""c"") = [""a"", ""b"", ""c""]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"@SuppressWarnings(""unchecked"")
public static <T> T[] add(T[] array, T element) {
    Class<?> type = array != null ? array.getClass() : (element != null ? element.getClass() : Object.class);
    T[] newArray = (T[]) copyArrayGrow1(array, type);
    newArray[newArray.length - 1] = element;
    return newArray;
}","public void test205884() throws Throwable {
    Object object0 = new Object();
    Object[] objectArray0 = ArrayUtils.add((Object[]) null, object0);
    assertEquals(1, objectArray0.length);
}","/**
 * <p>Copies the given array and adds the given element at the end of the new array.</p>
 *
 * <p>The new array contains the same elements of the input
 * array plus the given element in the last position. The component type of
 * the new array is the same as that of the input array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element, unless the element itself is null,
 *  in which case the return type is Object[]</p>
 *
 * <pre>
 * ArrayUtils.add(null, null)      = [null]
 * ArrayUtils.add(null, ""a"")       = [""a""]
 * ArrayUtils.add([""a""], null)     = [""a"", null]
 * ArrayUtils.add([""a""], ""b"")      = [""a"", ""b""]
 * ArrayUtils.add([""a"", ""b""], ""c"") = [""a"", ""b"", ""c""]
 * </pre>
 *
 * @param array  the array to ""add"" the element to, may be <code>null</code>
 * @param element  the object to add
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */"
"public static double[] addAll(double[] array1, double... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    double[] joinedArray = new double[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test206886() throws Throwable {
    double[] doubleArray0 = new double[8];
    double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0);
    assertEquals(8, doubleArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new double[] array.
 * @since 2.1
 */"
"public static long[] addAll(long[] array1, long... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    long[] joinedArray = new long[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test207893() throws Throwable {
    long[] longArray0 = ArrayUtils.addAll((long[]) null, (long[]) null);
    assertNull(longArray0);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new long[] array.
 * @since 2.1
 */"
"public static long[] addAll(long[] array1, long... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    long[] joinedArray = new long[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test208894() throws Throwable {
    long[] longArray0 = new long[7];
    long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);
    assertEquals(7, longArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new long[] array.
 * @since 2.1
 */"
"public static int[] addAll(int[] array1, int... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    int[] joinedArray = new int[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test209901() throws Throwable {
    int[] intArray0 = new int[4];
    int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);
    assertEquals(4, intArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new int[] array.
 * @since 2.1
 */"
"public static short[] addAll(short[] array1, short... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    short[] joinedArray = new short[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test210909() throws Throwable {
    short[] shortArray0 = ArrayUtils.addAll((short[]) null, (short[]) null);
    assertNull(shortArray0);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new short[] array.
 * @since 2.1
 */"
"public static short[] addAll(short[] array1, short... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    short[] joinedArray = new short[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test211910() throws Throwable {
    short[] shortArray0 = new short[3];
    short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);
    assertEquals(3, shortArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new short[] array.
 * @since 2.1
 */"
"public static byte[] addAll(byte[] array1, byte... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    byte[] joinedArray = new byte[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test212918() throws Throwable {
    byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);
    assertNull(byteArray0);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new byte[] array.
 * @since 2.1
 */"
"public static byte[] addAll(byte[] array1, byte... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    byte[] joinedArray = new byte[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test213919() throws Throwable {
    byte[] byteArray0 = new byte[1];
    byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);
    assertEquals(1, byteArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new byte[] array.
 * @since 2.1
 */"
"public static char[] addAll(char[] array1, char... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    char[] joinedArray = new char[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test214927() throws Throwable {
    char[] charArray0 = new char[5];
    char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
    assertEquals(5, charArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new char[] array.
 * @since 2.1
 */"
"public static char[] addAll(char[] array1, char... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    char[] joinedArray = new char[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test215935() throws Throwable {
    char[] charArray0 = ArrayUtils.addAll((char[]) null, (char[]) null);
    assertNull(charArray0);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new char[] array.
 * @since 2.1
 */"
"public static boolean[] addAll(boolean[] array1, boolean... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    boolean[] joinedArray = new boolean[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test216936() throws Throwable {
    boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);
    assertNull(booleanArray0);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new boolean[] array.
 * @since 2.1
 */"
"public static boolean[] addAll(boolean[] array1, boolean... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    boolean[] joinedArray = new boolean[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test217937() throws Throwable {
    boolean[] booleanArray0 = new boolean[9];
    boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);
    assertEquals(9, booleanArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new boolean[] array.
 * @since 2.1
 */"
"@SuppressWarnings(""unchecked"")
public static <T> T[] addAll(T[] array1, T... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    final Class<?> type1 = array1.getClass().getComponentType();
    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    // Check if problem is incompatible types
    return joinedArray;
}","public void test218944() throws Throwable {
    String[] stringArray0 = new String[6];
    String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0);
    assertEquals(6, stringArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(null, null)     = null
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * ArrayUtils.addAll([null], [null]) = [null, null]
 * ArrayUtils.addAll([""a"", ""b"", ""c""], [""1"", ""2"", ""3""]) = [""a"", ""b"", ""c"", ""1"", ""2"", ""3""]
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array, may be <code>null</code>
 * @param array2  the second array whose elements are added to the new array, may be <code>null</code>
 * @return The new array, <code>null</code> if both arrays are <code>null</code>.
 *      The type of the new array is the type of the first array,
 *      unless the first array is null, in which case the type is the same as the second array.
 * @since 2.1
 */"
"public static boolean isEmpty(byte[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test219950() throws Throwable {
    byte[] byteArray0 = new byte[0];
    boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
    assertEquals(0, byteArray0.length);
}","/**
 * <p>Checks if an array of primitive bytes is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(byte[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test220953() throws Throwable {
    byte[] byteArray0 = new byte[5];
    boolean boolean0 = ArrayUtils.isEmpty(byteArray0);
    assertEquals(5, byteArray0.length);
}","/**
 * <p>Checks if an array of primitive bytes is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(byte[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test221956() throws Throwable {
    boolean boolean0 = ArrayUtils.isEmpty((byte[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks if an array of primitive bytes is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(char[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test222957() throws Throwable {
    char[] charArray0 = new char[0];
    boolean boolean0 = ArrayUtils.isEmpty(charArray0);
    assertEquals(0, charArray0.length);
}","/**
 * <p>Checks if an array of primitive chars is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(char[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test223960() throws Throwable {
    char[] charArray0 = new char[7];
    boolean boolean0 = ArrayUtils.isEmpty(charArray0);
    assertEquals(7, charArray0.length);
}","/**
 * <p>Checks if an array of primitive chars is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(char[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test224963() throws Throwable {
    boolean boolean0 = ArrayUtils.isEmpty((char[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks if an array of primitive chars is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(short[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test225964() throws Throwable {
    short[] shortArray0 = new short[0];
    boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
    assertEquals(0, shortArray0.length);
}","/**
 * <p>Checks if an array of primitive shorts is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(short[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test226967() throws Throwable {
    short[] shortArray0 = new short[6];
    boolean boolean0 = ArrayUtils.isEmpty(shortArray0);
    assertEquals(6, shortArray0.length);
}","/**
 * <p>Checks if an array of primitive shorts is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(short[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test227970() throws Throwable {
    boolean boolean0 = ArrayUtils.isEmpty((short[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks if an array of primitive shorts is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(int[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test228971() throws Throwable {
    int[] intArray0 = new int[0];
    boolean boolean0 = ArrayUtils.isEmpty(intArray0);
    assertEquals(0, intArray0.length);
}","/**
 * <p>Checks if an array of primitive ints is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(int[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test229974() throws Throwable {
    int[] intArray0 = new int[3];
    boolean boolean0 = ArrayUtils.isEmpty(intArray0);
    assertEquals(3, intArray0.length);
}","/**
 * <p>Checks if an array of primitive ints is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(int[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test230977() throws Throwable {
    boolean boolean0 = ArrayUtils.isEmpty((int[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks if an array of primitive ints is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(long[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test231978() throws Throwable {
    long[] longArray0 = new long[0];
    boolean boolean0 = ArrayUtils.isEmpty(longArray0);
    assertEquals(0, longArray0.length);
}","/**
 * <p>Checks if an array of primitive longs is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(long[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test232981() throws Throwable {
    long[] longArray0 = new long[2];
    boolean boolean0 = ArrayUtils.isEmpty(longArray0);
    assertEquals(2, longArray0.length);
}","/**
 * <p>Checks if an array of primitive longs is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"public static boolean isEmpty(long[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test233984() throws Throwable {
    boolean boolean0 = ArrayUtils.isEmpty((long[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks if an array of primitive longs is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */"
"// ----------------------------------------------------------------------
/**
 * <p>Checks if an array of Objects is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */
public static <T> boolean isEmpty(T[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test234985() throws Throwable {
    String[] stringArray0 = new String[5];
    boolean boolean0 = ArrayUtils.isEmpty(stringArray0);
    assertEquals(5, stringArray0.length);
}",""
"// ----------------------------------------------------------------------
/**
 * <p>Checks if an array of Objects is empty or <code>null</code>.</p>
 *
 * @param array  the array to test
 * @return <code>true</code> if the array is empty or <code>null</code>
 * @since 2.1
 */
public static <T> boolean isEmpty(T[] array) {
    if (array == null || array.length == 0) {
        return true;
    }
    return false;
}","public void test235987() throws Throwable {
    boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);
    assertTrue(boolean0);
}",""
"public static Boolean[] toObject(boolean[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BOOLEAN_OBJECT_ARRAY;
    }
    final Boolean[] result = new Boolean[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);
    }
    return result;
}","public void test236988() throws Throwable {
    boolean[] booleanArray0 = new boolean[6];
    booleanArray0[0] = true;
    Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
    assertEquals(6, booleanArray0.length);
}","/**
 * <p>Converts an array of primitive booleans to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>boolean</code> array
 * @return a <code>Boolean</code> array, <code>null</code> if null array input
 */"
"public static Boolean[] toObject(boolean[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BOOLEAN_OBJECT_ARRAY;
    }
    final Boolean[] result = new Boolean[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);
    }
    return result;
}","public void test237992() throws Throwable {
    Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);
    assertNull(booleanArray0);
}","/**
 * <p>Converts an array of primitive booleans to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>boolean</code> array
 * @return a <code>Boolean</code> array, <code>null</code> if null array input
 */"
"public static Boolean[] toObject(boolean[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BOOLEAN_OBJECT_ARRAY;
    }
    final Boolean[] result = new Boolean[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);
    }
    return result;
}","public void test238993() throws Throwable {
    boolean[] booleanArray0 = new boolean[6];
    Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
    assertEquals(6, booleanArray0.length);
}","/**
 * <p>Converts an array of primitive booleans to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>boolean</code> array
 * @return a <code>Boolean</code> array, <code>null</code> if null array input
 */"
"@SuppressWarnings(""unchecked"")
public static <T> T[] add(T[] array, T element) {
    Class<?> type = array != null ? array.getClass() : (element != null ? element.getClass() : Object.class);
    T[] newArray = (T[]) copyArrayGrow1(array, type);
    newArray[newArray.length - 1] = element;
    return newArray;
}","public void test238998() throws Throwable {
    boolean[] booleanArray0 = new boolean[6];
    Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);
    Object object0 = new Object();
    // Undeclared exception!
    try {
        ArrayUtils.add((Object[]) booleanArray1, object0);
        fail(""Expecting exception: ArrayStoreException"");
    } catch (ArrayStoreException e) {
        //
        // java.lang.Object
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Copies the given array and adds the given element at the end of the new array.</p>
 *
 * <p>The new array contains the same elements of the input
 * array plus the given element in the last position. The component type of
 * the new array is the same as that of the input array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element, unless the element itself is null,
 *  in which case the return type is Object[]</p>
 *
 * <pre>
 * ArrayUtils.add(null, null)      = [null]
 * ArrayUtils.add(null, ""a"")       = [""a""]
 * ArrayUtils.add([""a""], null)     = [""a"", null]
 * ArrayUtils.add([""a""], ""b"")      = [""a"", ""b""]
 * ArrayUtils.add([""a"", ""b""], ""c"") = [""a"", ""b"", ""c""]
 * </pre>
 *
 * @param array  the array to ""add"" the element to, may be <code>null</code>
 * @param element  the object to add
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */"
"public static boolean[] toPrimitive(Boolean[] array, boolean valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BOOLEAN_ARRAY;
    }
    final boolean[] result = new boolean[array.length];
    for (int i = 0; i < array.length; i++) {
        Boolean b = array[i];
        result[i] = (b == null ? valueForNull : b.booleanValue());
    }
    return result;
}","public void test239999() throws Throwable {
    Boolean[] booleanArray0 = new Boolean[11];
    booleanArray0[0] = (Boolean) false;
    boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
    assertEquals(11, booleanArray0.length);
}","/**
 * <p>Converts an array of object Booleans to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Boolean</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>boolean</code> array, <code>null</code> if null array input
 */"
"public static boolean[] toPrimitive(Boolean[] array, boolean valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BOOLEAN_ARRAY;
    }
    final boolean[] result = new boolean[array.length];
    for (int i = 0; i < array.length; i++) {
        Boolean b = array[i];
        result[i] = (b == null ? valueForNull : b.booleanValue());
    }
    return result;
}","public void test2401002() throws Throwable {
    Boolean[] booleanArray0 = new Boolean[0];
    boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, false);
    assertEquals(0, booleanArray0.length);
}","/**
 * <p>Converts an array of object Booleans to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Boolean</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>boolean</code> array, <code>null</code> if null array input
 */"
"public static boolean[] toPrimitive(Boolean[] array, boolean valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BOOLEAN_ARRAY;
    }
    final boolean[] result = new boolean[array.length];
    for (int i = 0; i < array.length; i++) {
        Boolean b = array[i];
        result[i] = (b == null ? valueForNull : b.booleanValue());
    }
    return result;
}","public void test2411006() throws Throwable {
    boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);
    assertNull(booleanArray0);
}","/**
 * <p>Converts an array of object Booleans to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Boolean</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>boolean</code> array, <code>null</code> if null array input
 */"
"// Boolean array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Booleans to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Boolean</code> array, may be <code>null</code>
 * @return a <code>boolean</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static boolean[] toPrimitive(Boolean[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BOOLEAN_ARRAY;
    }
    final boolean[] result = new boolean[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].booleanValue();
    }
    return result;
}","public void test2421009() throws Throwable {
    Boolean[] booleanArray0 = new Boolean[3];
    Boolean boolean0 = new Boolean(""', is neither of type Map.Entry nor an Array"");
    booleanArray0[0] = boolean0;
    booleanArray0[1] = booleanArray0[0];
    booleanArray0[2] = booleanArray0[0];
    boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
    assertEquals(3, booleanArray0.length);
}",""
"// Boolean array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Booleans to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Boolean</code> array, may be <code>null</code>
 * @return a <code>boolean</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static boolean[] toPrimitive(Boolean[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BOOLEAN_ARRAY;
    }
    final boolean[] result = new boolean[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].booleanValue();
    }
    return result;
}","public void test2431013() throws Throwable {
    Boolean[] booleanArray0 = new Boolean[0];
    boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);
    assertEquals(0, booleanArray0.length);
}",""
"// Boolean array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Booleans to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Boolean</code> array, may be <code>null</code>
 * @return a <code>boolean</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static boolean[] toPrimitive(Boolean[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BOOLEAN_ARRAY;
    }
    final boolean[] result = new boolean[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].booleanValue();
    }
    return result;
}","public void test2441017() throws Throwable {
    boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);
    assertNull(booleanArray0);
}",""
"// Boolean array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Booleans to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Boolean</code> array, may be <code>null</code>
 * @return a <code>boolean</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static boolean[] toPrimitive(Boolean[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BOOLEAN_ARRAY;
    }
    final boolean[] result = new boolean[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].booleanValue();
    }
    return result;
}","public void test2451018() throws Throwable {
    Boolean[] booleanArray0 = new Boolean[3];
    // Undeclared exception!
    try {
        ArrayUtils.toPrimitive(booleanArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}",""
"public static Float[] toObject(float[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_FLOAT_OBJECT_ARRAY;
    }
    final Float[] result = new Float[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Float.valueOf(array[i]);
    }
    return result;
}","public void test2461019() throws Throwable {
    Float[] floatArray0 = ArrayUtils.toObject((float[]) null);
    assertNull(floatArray0);
}","/**
 * <p>Converts an array of primitive floats to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>float</code> array
 * @return a <code>Float</code> array, <code>null</code> if null array input
 */"
"public static Float[] toObject(float[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_FLOAT_OBJECT_ARRAY;
    }
    final Float[] result = new Float[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Float.valueOf(array[i]);
    }
    return result;
}","public void test2471020() throws Throwable {
    float[] floatArray0 = new float[6];
    Float[] floatArray1 = ArrayUtils.toObject(floatArray0);
    assertEquals(6, floatArray0.length);
}","/**
 * <p>Converts an array of primitive floats to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>float</code> array
 * @return a <code>Float</code> array, <code>null</code> if null array input
 */"
"public static float[] toPrimitive(Float[] array, float valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    final float[] result = new float[array.length];
    for (int i = 0; i < array.length; i++) {
        Float b = array[i];
        result[i] = (b == null ? valueForNull : b.floatValue());
    }
    return result;
}","public void test2481026() throws Throwable {
    Float[] floatArray0 = new Float[1];
    Float float0 = new Float((double) (-1L));
    floatArray0[0] = float0;
    float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1611.1229F));
    assertEquals(1, floatArray0.length);
}","/**
 * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Float</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>float</code> array, <code>null</code> if null array input
 */"
"public static float[] toPrimitive(Float[] array, float valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    final float[] result = new float[array.length];
    for (int i = 0; i < array.length; i++) {
        Float b = array[i];
        result[i] = (b == null ? valueForNull : b.floatValue());
    }
    return result;
}","public void test2491030() throws Throwable {
    Float[] floatArray0 = new Float[1];
    float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 773.19F);
    assertEquals(1, floatArray0.length);
}","/**
 * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Float</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>float</code> array, <code>null</code> if null array input
 */"
"public static float[] toPrimitive(Float[] array, float valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    final float[] result = new float[array.length];
    for (int i = 0; i < array.length; i++) {
        Float b = array[i];
        result[i] = (b == null ? valueForNull : b.floatValue());
    }
    return result;
}","public void test2501034() throws Throwable {
    float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, 773.19F);
    assertNull(floatArray0);
}","/**
 * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Float</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>float</code> array, <code>null</code> if null array input
 */"
"//   Float array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Floats to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Float</code> array, may be <code>null</code>
 * @return a <code>float</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static float[] toPrimitive(Float[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    final float[] result = new float[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].floatValue();
    }
    return result;
}","public void test2511035() throws Throwable {
    Float[] floatArray0 = new Float[0];
    float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);
    assertEquals(0, floatArray0.length);
}",""
"//   Float array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Floats to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Float</code> array, may be <code>null</code>
 * @return a <code>float</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static float[] toPrimitive(Float[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    final float[] result = new float[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].floatValue();
    }
    return result;
}","public void test2521039() throws Throwable {
    float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null);
    assertNull(floatArray0);
}",""
"//   Float array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Floats to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Float</code> array, may be <code>null</code>
 * @return a <code>float</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static float[] toPrimitive(Float[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    final float[] result = new float[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].floatValue();
    }
    return result;
}","public void test2531040() throws Throwable {
    Float[] floatArray0 = new Float[7];
    // Undeclared exception!
    try {
        ArrayUtils.toPrimitive(floatArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}",""
"public static Double[] toObject(double[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_DOUBLE_OBJECT_ARRAY;
    }
    final Double[] result = new Double[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Double.valueOf(array[i]);
    }
    return result;
}","public void test2541041() throws Throwable {
    double[] doubleArray0 = new double[0];
    Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
    assertEquals(0, doubleArray0.length);
}","/**
 * <p>Converts an array of primitive doubles to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>double</code> array
 * @return a <code>Double</code> array, <code>null</code> if null array input
 */"
"public static <T> T[] removeElement(T[] array, Object element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test2541047() throws Throwable {
    double[] doubleArray0 = new double[0];
    Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
    Integer integer0 = new Integer(1);
    Object[] objectArray0 = ArrayUtils.removeElement((Object[]) doubleArray1, (Object) integer0);
    assertEquals(0, doubleArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, ""a"")            = null
 * ArrayUtils.removeElement([], ""a"")              = []
 * ArrayUtils.removeElement([""a""], ""b"")           = [""a""]
 * ArrayUtils.removeElement([""a"", ""b""], ""a"")      = [""b""]
 * ArrayUtils.removeElement([""a"", ""b"", ""a""], ""a"") = [""b"", ""a""]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static Double[] toObject(double[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_DOUBLE_OBJECT_ARRAY;
    }
    final Double[] result = new Double[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Double.valueOf(array[i]);
    }
    return result;
}","public void test2551053() throws Throwable {
    Double[] doubleArray0 = ArrayUtils.toObject((double[]) null);
    assertNull(doubleArray0);
}","/**
 * <p>Converts an array of primitive doubles to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>double</code> array
 * @return a <code>Double</code> array, <code>null</code> if null array input
 */"
"public static Double[] toObject(double[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_DOUBLE_OBJECT_ARRAY;
    }
    final Double[] result = new Double[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Double.valueOf(array[i]);
    }
    return result;
}","public void test2561054() throws Throwable {
    double[] doubleArray0 = new double[3];
    Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);
    assertEquals(3, doubleArray0.length);
}","/**
 * <p>Converts an array of primitive doubles to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>double</code> array
 * @return a <code>Double</code> array, <code>null</code> if null array input
 */"
"public static double[] toPrimitive(Double[] array, double valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_DOUBLE_ARRAY;
    }
    final double[] result = new double[array.length];
    for (int i = 0; i < array.length; i++) {
        Double b = array[i];
        result[i] = (b == null ? valueForNull : b.doubleValue());
    }
    return result;
}","public void test2571060() throws Throwable {
    Double[] doubleArray0 = new Double[6];
    Double double0 = new Double((-2688));
    doubleArray0[3] = double0;
    double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, (double) doubleArray0[3]);
    assertEquals(6, doubleArray0.length);
}","/**
 * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Double</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>double</code> array, <code>null</code> if null array input
 */"
"public static double[] toPrimitive(Double[] array, double valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_DOUBLE_ARRAY;
    }
    final double[] result = new double[array.length];
    for (int i = 0; i < array.length; i++) {
        Double b = array[i];
        result[i] = (b == null ? valueForNull : b.doubleValue());
    }
    return result;
}","public void test2581064() throws Throwable {
    double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null, (-170.08209677487));
    assertNull(doubleArray0);
}","/**
 * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Double</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>double</code> array, <code>null</code> if null array input
 */"
"// Double array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Doubles to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Double</code> array, may be <code>null</code>
 * @return a <code>double</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static double[] toPrimitive(Double[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_DOUBLE_ARRAY;
    }
    final double[] result = new double[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].doubleValue();
    }
    return result;
}","public void test2591067() throws Throwable {
    Double[] doubleArray0 = new Double[6];
    Double double0 = new Double(432.3);
    doubleArray0[0] = double0;
    doubleArray0[1] = double0;
    doubleArray0[2] = double0;
    doubleArray0[3] = doubleArray0[0];
    doubleArray0[4] = doubleArray0[0];
    doubleArray0[5] = doubleArray0[1];
    double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);
    assertEquals(6, doubleArray0.length);
}",""
"// Double array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Doubles to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Double</code> array, may be <code>null</code>
 * @return a <code>double</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static double[] toPrimitive(Double[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_DOUBLE_ARRAY;
    }
    final double[] result = new double[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].doubleValue();
    }
    return result;
}","public void test2601071() throws Throwable {
    double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);
    assertNull(doubleArray0);
}",""
"// Double array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Doubles to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Double</code> array, may be <code>null</code>
 * @return a <code>double</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static double[] toPrimitive(Double[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_DOUBLE_ARRAY;
    }
    final double[] result = new double[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].doubleValue();
    }
    return result;
}","public void test2611072() throws Throwable {
    Double[] doubleArray0 = new Double[6];
    // Undeclared exception!
    try {
        ArrayUtils.toPrimitive(doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}",""
"public static Byte[] toObject(byte[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BYTE_OBJECT_ARRAY;
    }
    final Byte[] result = new Byte[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Byte.valueOf(array[i]);
    }
    return result;
}","public void test2621073() throws Throwable {
    byte[] byteArray0 = new byte[7];
    Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
    assertEquals(7, byteArray0.length);
}","/**
 * <p>Converts an array of primitive bytes to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>byte</code> array
 * @return a <code>Byte</code> array, <code>null</code> if null array input
 */"
"public static Byte[] toObject(byte[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BYTE_OBJECT_ARRAY;
    }
    final Byte[] result = new Byte[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Byte.valueOf(array[i]);
    }
    return result;
}","public void test2631077() throws Throwable {
    Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);
    assertNull(byteArray0);
}","/**
 * <p>Converts an array of primitive bytes to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>byte</code> array
 * @return a <code>Byte</code> array, <code>null</code> if null array input
 */"
"public static Byte[] toObject(byte[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BYTE_OBJECT_ARRAY;
    }
    final Byte[] result = new Byte[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Byte.valueOf(array[i]);
    }
    return result;
}","public void test2641078() throws Throwable {
    byte[] byteArray0 = new byte[0];
    Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);
    assertEquals(0, byteArray0.length);
}","/**
 * <p>Converts an array of primitive bytes to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>byte</code> array
 * @return a <code>Byte</code> array, <code>null</code> if null array input
 */"
"public static byte[] toPrimitive(Byte[] array, byte valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BYTE_ARRAY;
    }
    final byte[] result = new byte[array.length];
    for (int i = 0; i < array.length; i++) {
        Byte b = array[i];
        result[i] = (b == null ? valueForNull : b.byteValue());
    }
    return result;
}","public void test2651085() throws Throwable {
    Byte[] byteArray0 = new Byte[1];
    byte byte0 = (byte) (-1);
    Byte byte1 = new Byte((byte) (-1));
    byteArray0[0] = byte1;
    byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
    assertEquals(1, byteArray0.length);
}","/**
 * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Byte</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>byte</code> array, <code>null</code> if null array input
 */"
"public static byte[] toPrimitive(Byte[] array, byte valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BYTE_ARRAY;
    }
    final byte[] result = new byte[array.length];
    for (int i = 0; i < array.length; i++) {
        Byte b = array[i];
        result[i] = (b == null ? valueForNull : b.byteValue());
    }
    return result;
}","public void test2661089() throws Throwable {
    Byte[] byteArray0 = new Byte[0];
    byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) 2);
    assertEquals(0, byteArray0.length);
}","/**
 * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Byte</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>byte</code> array, <code>null</code> if null array input
 */"
"public static byte[] toPrimitive(Byte[] array, byte valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BYTE_ARRAY;
    }
    final byte[] result = new byte[array.length];
    for (int i = 0; i < array.length; i++) {
        Byte b = array[i];
        result[i] = (b == null ? valueForNull : b.byteValue());
    }
    return result;
}","public void test2671093() throws Throwable {
    byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte) (-101));
    assertNull(byteArray0);
}","/**
 * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Byte</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>byte</code> array, <code>null</code> if null array input
 */"
"// Byte array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Bytes to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Byte</code> array, may be <code>null</code>
 * @return a <code>byte</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static byte[] toPrimitive(Byte[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BYTE_ARRAY;
    }
    final byte[] result = new byte[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].byteValue();
    }
    return result;
}","public void test2681096() throws Throwable {
    Byte[] byteArray0 = new Byte[6];
    Byte byte0 = new Byte((byte) (-16));
    byteArray0[0] = byte0;
    byteArray0[1] = byte0;
    byteArray0[2] = byteArray0[0];
    byteArray0[3] = byteArray0[1];
    byteArray0[4] = byteArray0[1];
    byteArray0[5] = byteArray0[1];
    byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
    assertEquals(6, byteArray0.length);
}",""
"// Byte array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Bytes to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Byte</code> array, may be <code>null</code>
 * @return a <code>byte</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static byte[] toPrimitive(Byte[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BYTE_ARRAY;
    }
    final byte[] result = new byte[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].byteValue();
    }
    return result;
}","public void test2691100() throws Throwable {
    Byte[] byteArray0 = new Byte[0];
    byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);
    assertEquals(0, byteArray0.length);
}",""
"// Byte array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Bytes to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Byte</code> array, may be <code>null</code>
 * @return a <code>byte</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static byte[] toPrimitive(Byte[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BYTE_ARRAY;
    }
    final byte[] result = new byte[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].byteValue();
    }
    return result;
}","public void test2701104() throws Throwable {
    byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);
    assertNull(byteArray0);
}",""
"// Byte array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Bytes to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Byte</code> array, may be <code>null</code>
 * @return a <code>byte</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static byte[] toPrimitive(Byte[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BYTE_ARRAY;
    }
    final byte[] result = new byte[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].byteValue();
    }
    return result;
}","public void test2711105() throws Throwable {
    Byte[] byteArray0 = new Byte[18];
    // Undeclared exception!
    try {
        ArrayUtils.toPrimitive(byteArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}",""
"public static Short[] toObject(short[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_SHORT_OBJECT_ARRAY;
    }
    final Short[] result = new Short[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Short.valueOf(array[i]);
    }
    return result;
}","public void test2721106() throws Throwable {
    Short[] shortArray0 = ArrayUtils.toObject((short[]) null);
    assertNull(shortArray0);
}","/**
 * <p>Converts an array of primitive shorts to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>short</code> array
 * @return a <code>Short</code> array, <code>null</code> if null array input
 */"
"public static Short[] toObject(short[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_SHORT_OBJECT_ARRAY;
    }
    final Short[] result = new Short[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Short.valueOf(array[i]);
    }
    return result;
}","public void test2731107() throws Throwable {
    short[] shortArray0 = new short[4];
    Short[] shortArray1 = ArrayUtils.toObject(shortArray0);
    assertEquals(4, shortArray0.length);
}","/**
 * <p>Converts an array of primitive shorts to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>short</code> array
 * @return a <code>Short</code> array, <code>null</code> if null array input
 */"
"public static short[] toPrimitive(Short[] array, short valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_SHORT_ARRAY;
    }
    final short[] result = new short[array.length];
    for (int i = 0; i < array.length; i++) {
        Short b = array[i];
        result[i] = (b == null ? valueForNull : b.shortValue());
    }
    return result;
}","public void test2741111() throws Throwable {
    short[] shortArray0 = new short[3];
    Short[] shortArray1 = new Short[5];
    shortArray1[0] = (Short) shortArray0[0];
    short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, (short) 0);
    assertEquals(5, shortArray1.length);
}","/**
 * <p>Converts an array of object Short to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Short</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>byte</code> array, <code>null</code> if null array input
 */"
"public static short[] toPrimitive(Short[] array, short valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_SHORT_ARRAY;
    }
    final short[] result = new short[array.length];
    for (int i = 0; i < array.length; i++) {
        Short b = array[i];
        result[i] = (b == null ? valueForNull : b.shortValue());
    }
    return result;
}","public void test2751117() throws Throwable {
    short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short) 1137);
    assertNull(shortArray0);
}","/**
 * <p>Converts an array of object Short to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Short</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>byte</code> array, <code>null</code> if null array input
 */"
"// Short array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Shorts to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Short</code> array, may be <code>null</code>
 * @return a <code>byte</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static short[] toPrimitive(Short[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_SHORT_ARRAY;
    }
    final short[] result = new short[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].shortValue();
    }
    return result;
}","public void test2761118() throws Throwable {
    Short[] shortArray0 = new Short[7];
    shortArray0[0] = (Short) (short) 524;
    shortArray0[1] = (Short) (short) 2;
    shortArray0[2] = (Short) (short) 524;
    shortArray0[3] = (Short) (short) 524;
    shortArray0[4] = (Short) (short) 2;
    shortArray0[5] = (Short) (short) 4027;
    shortArray0[6] = (Short) (short) 2;
    short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
    assertEquals(7, shortArray0.length);
}",""
"// Short array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Shorts to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Short</code> array, may be <code>null</code>
 * @return a <code>byte</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static short[] toPrimitive(Short[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_SHORT_ARRAY;
    }
    final short[] result = new short[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].shortValue();
    }
    return result;
}","public void test2771122() throws Throwable {
    Short[] shortArray0 = new Short[0];
    short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);
    assertEquals(0, shortArray0.length);
}",""
"// Short array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Shorts to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Short</code> array, may be <code>null</code>
 * @return a <code>byte</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static short[] toPrimitive(Short[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_SHORT_ARRAY;
    }
    final short[] result = new short[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].shortValue();
    }
    return result;
}","public void test2781126() throws Throwable {
    short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);
    assertNull(shortArray0);
}",""
"// Short array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Shorts to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Short</code> array, may be <code>null</code>
 * @return a <code>byte</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static short[] toPrimitive(Short[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_SHORT_ARRAY;
    }
    final short[] result = new short[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].shortValue();
    }
    return result;
}","public void test2791127() throws Throwable {
    Short[] shortArray0 = new Short[7];
    // Undeclared exception!
    try {
        ArrayUtils.toPrimitive(shortArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}",""
"public static Integer[] toObject(int[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_INTEGER_OBJECT_ARRAY;
    }
    final Integer[] result = new Integer[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Integer.valueOf(array[i]);
    }
    return result;
}","public void test2801128() throws Throwable {
    Integer[] integerArray0 = ArrayUtils.toObject((int[]) null);
    assertNull(integerArray0);
}","/**
 * <p>Converts an array of primitive ints to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  an <code>int</code> array
 * @return an <code>Integer</code> array, <code>null</code> if null array input
 */"
"public static Integer[] toObject(int[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_INTEGER_OBJECT_ARRAY;
    }
    final Integer[] result = new Integer[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Integer.valueOf(array[i]);
    }
    return result;
}","public void test2811129() throws Throwable {
    int[] intArray0 = new int[5];
    Integer[] integerArray0 = ArrayUtils.toObject(intArray0);
    assertEquals(5, intArray0.length);
}","/**
 * <p>Converts an array of primitive ints to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  an <code>int</code> array
 * @return an <code>Integer</code> array, <code>null</code> if null array input
 */"
"// double IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(double[] array, double valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test2821133() throws Throwable {
    double[] doubleArray0 = new double[3];
    int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
    assertEquals(3, doubleArray0.length);
}",""
"public static int[] toPrimitive(Integer[] array, int valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_INT_ARRAY;
    }
    final int[] result = new int[array.length];
    for (int i = 0; i < array.length; i++) {
        Integer b = array[i];
        result[i] = (b == null ? valueForNull : b.intValue());
    }
    return result;
}","public void test2821139() throws Throwable {
    double[] doubleArray0 = new double[3];
    int int0 = ArrayUtils.indexOf(doubleArray0, (-16.343852347137574));
    Integer[] integerArray0 = new Integer[8];
    Integer integer0 = new Integer((-3575));
    integerArray0[0] = integer0;
    int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, int0);
    assertEquals(3, doubleArray0.length);
}","/**
 * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Integer</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return an <code>int</code> array, <code>null</code> if null array input
 */"
"public static int[] toPrimitive(Integer[] array, int valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_INT_ARRAY;
    }
    final int[] result = new int[array.length];
    for (int i = 0; i < array.length; i++) {
        Integer b = array[i];
        result[i] = (b == null ? valueForNull : b.intValue());
    }
    return result;
}","public void test2831145() throws Throwable {
    Integer[] integerArray0 = new Integer[0];
    int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (-2398));
    assertEquals(0, integerArray0.length);
}","/**
 * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Integer</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return an <code>int</code> array, <code>null</code> if null array input
 */"
"public static int[] toPrimitive(Integer[] array, int valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_INT_ARRAY;
    }
    final int[] result = new int[array.length];
    for (int i = 0; i < array.length; i++) {
        Integer b = array[i];
        result[i] = (b == null ? valueForNull : b.intValue());
    }
    return result;
}","public void test2841149() throws Throwable {
    int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 0);
    assertNull(intArray0);
}","/**
 * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Integer</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return an <code>int</code> array, <code>null</code> if null array input
 */"
"// Int array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Integers to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Integer</code> array, may be <code>null</code>
 * @return an <code>int</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static int[] toPrimitive(Integer[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_INT_ARRAY;
    }
    final int[] result = new int[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].intValue();
    }
    return result;
}","public void test2851150() throws Throwable {
    Integer[] integerArray0 = new Integer[6];
    // Undeclared exception!
    try {
        ArrayUtils.toPrimitive(integerArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}",""
"// Int array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Integers to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Integer</code> array, may be <code>null</code>
 * @return an <code>int</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static int[] toPrimitive(Integer[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_INT_ARRAY;
    }
    final int[] result = new int[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].intValue();
    }
    return result;
}","public void test2861151() throws Throwable {
    int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);
    assertNull(intArray0);
}",""
"// Int array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Integers to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Integer</code> array, may be <code>null</code>
 * @return an <code>int</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static int[] toPrimitive(Integer[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_INT_ARRAY;
    }
    final int[] result = new int[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].intValue();
    }
    return result;
}","public void test2871152() throws Throwable {
    Integer[] integerArray0 = new Integer[0];
    int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
    assertEquals(0, integerArray0.length);
}",""
"public static Long[] toObject(long[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_LONG_OBJECT_ARRAY;
    }
    final Long[] result = new Long[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Long.valueOf(array[i]);
    }
    return result;
}","public void test2881156() throws Throwable {
    Long[] longArray0 = ArrayUtils.toObject((long[]) null);
    assertNull(longArray0);
}","/**
 * <p>Converts an array of primitive longs to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>long</code> array
 * @return a <code>Long</code> array, <code>null</code> if null array input
 */"
"public static long[] toPrimitive(Long[] array, long valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_LONG_ARRAY;
    }
    final long[] result = new long[array.length];
    for (int i = 0; i < array.length; i++) {
        Long b = array[i];
        result[i] = (b == null ? valueForNull : b.longValue());
    }
    return result;
}","public void test2891157() throws Throwable {
    Long[] longArray0 = new Long[9];
    longArray0[0] = (Long) 0L;
    long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 411L);
    assertEquals(9, longArray0.length);
}","/**
 * <p>Converts an array of object Long to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Long</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>long</code> array, <code>null</code> if null array input
 */"
"public static long[] toPrimitive(Long[] array, long valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_LONG_ARRAY;
    }
    final long[] result = new long[array.length];
    for (int i = 0; i < array.length; i++) {
        Long b = array[i];
        result[i] = (b == null ? valueForNull : b.longValue());
    }
    return result;
}","public void test2901161() throws Throwable {
    long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, (-3214L));
    assertNull(longArray0);
}","/**
 * <p>Converts an array of object Long to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Long</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>long</code> array, <code>null</code> if null array input
 */"
"public static long[] toPrimitive(Long[] array, long valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_LONG_ARRAY;
    }
    final long[] result = new long[array.length];
    for (int i = 0; i < array.length; i++) {
        Long b = array[i];
        result[i] = (b == null ? valueForNull : b.longValue());
    }
    return result;
}","public void test2911162() throws Throwable {
    Long[] longArray0 = new Long[0];
    long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 3609L);
    assertEquals(0, longArray0.length);
}","/**
 * <p>Converts an array of object Long to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Long</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>long</code> array, <code>null</code> if null array input
 */"
"// Long array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Longs to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Long</code> array, may be <code>null</code>
 * @return a <code>long</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static long[] toPrimitive(Long[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_LONG_ARRAY;
    }
    final long[] result = new long[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].longValue();
    }
    return result;
}","public void test2921168() throws Throwable {
    Long[] longArray0 = new Long[4];
    Long long0 = new Long(0);
    longArray0[0] = long0;
    longArray0[1] = longArray0[0];
    longArray0[2] = long0;
    longArray0[3] = long0;
    long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
    assertEquals(4, longArray0.length);
}",""
"// Long array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Longs to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Long</code> array, may be <code>null</code>
 * @return a <code>long</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static long[] toPrimitive(Long[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_LONG_ARRAY;
    }
    final long[] result = new long[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].longValue();
    }
    return result;
}","public void test2931172() throws Throwable {
    Long[] longArray0 = new Long[5];
    // Undeclared exception!
    try {
        ArrayUtils.toPrimitive(longArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}",""
"// Long array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Longs to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Long</code> array, may be <code>null</code>
 * @return a <code>long</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static long[] toPrimitive(Long[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_LONG_ARRAY;
    }
    final long[] result = new long[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].longValue();
    }
    return result;
}","public void test2941173() throws Throwable {
    long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null);
    assertNull(longArray0);
}",""
"// Long array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Longs to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Long</code> array, may be <code>null</code>
 * @return a <code>long</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static long[] toPrimitive(Long[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_LONG_ARRAY;
    }
    final long[] result = new long[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].longValue();
    }
    return result;
}","public void test2951174() throws Throwable {
    Long[] longArray0 = new Long[0];
    long[] longArray1 = ArrayUtils.toPrimitive(longArray0);
    assertEquals(0, longArray0.length);
}",""
"public static Character[] toObject(char[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_CHARACTER_OBJECT_ARRAY;
    }
    final Character[] result = new Character[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Character.valueOf(array[i]);
    }
    return result;
}","public void test2961178() throws Throwable {
    char[] charArray0 = new char[0];
    Character[] characterArray0 = ArrayUtils.toObject(charArray0);
    assertEquals(0, charArray0.length);
}","/**
 * <p>Converts an array of primitive chars to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array a <code>char</code> array
 * @return a <code>Character</code> array, <code>null</code> if null array input
 */"
"public static Character[] toObject(char[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_CHARACTER_OBJECT_ARRAY;
    }
    final Character[] result = new Character[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Character.valueOf(array[i]);
    }
    return result;
}","public void test2971182() throws Throwable {
    Character[] characterArray0 = ArrayUtils.toObject((char[]) null);
    assertNull(characterArray0);
}","/**
 * <p>Converts an array of primitive chars to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array a <code>char</code> array
 * @return a <code>Character</code> array, <code>null</code> if null array input
 */"
"public static Character[] toObject(char[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_CHARACTER_OBJECT_ARRAY;
    }
    final Character[] result = new Character[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Character.valueOf(array[i]);
    }
    return result;
}","public void test2981183() throws Throwable {
    char[] charArray0 = new char[4];
    Character[] characterArray0 = ArrayUtils.toObject(charArray0);
    assertEquals(4, charArray0.length);
}","/**
 * <p>Converts an array of primitive chars to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array a <code>char</code> array
 * @return a <code>Character</code> array, <code>null</code> if null array input
 */"
"public static char[] toPrimitive(Character[] array, char valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_CHAR_ARRAY;
    }
    final char[] result = new char[array.length];
    for (int i = 0; i < array.length; i++) {
        Character b = array[i];
        result[i] = (b == null ? valueForNull : b.charValue());
    }
    return result;
}","public void test2991187() throws Throwable {
    char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null, '(');
    assertNull(charArray0);
}","/**
 * <p>Converts an array of object Character to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Character</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>char</code> array, <code>null</code> if null array input
 */"
"public static char[] toPrimitive(Character[] array, char valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_CHAR_ARRAY;
    }
    final char[] result = new char[array.length];
    for (int i = 0; i < array.length; i++) {
        Character b = array[i];
        result[i] = (b == null ? valueForNull : b.charValue());
    }
    return result;
}","public void test3001190() throws Throwable {
    Character[] characterArray0 = new Character[6];
    Character character0 = new Character('+');
    characterArray0[3] = character0;
    char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, (char) characterArray0[3]);
    assertEquals(6, characterArray0.length);
}","/**
 * <p>Converts an array of object Character to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Character</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>char</code> array, <code>null</code> if null array input
 */"
"// Primitive/Object array converters
// ----------------------------------------------------------------------
// Character array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Characters to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Character</code> array, may be <code>null</code>
 * @return a <code>char</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static char[] toPrimitive(Character[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_CHAR_ARRAY;
    }
    final char[] result = new char[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].charValue();
    }
    return result;
}","public void test3011196() throws Throwable {
    Character[] characterArray0 = new Character[1];
    Character character0 = new Character('X');
    characterArray0[0] = character0;
    char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
    assertEquals(1, characterArray0.length);
}",""
"// Primitive/Object array converters
// ----------------------------------------------------------------------
// Character array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Characters to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Character</code> array, may be <code>null</code>
 * @return a <code>char</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static char[] toPrimitive(Character[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_CHAR_ARRAY;
    }
    final char[] result = new char[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].charValue();
    }
    return result;
}","public void test3021200() throws Throwable {
    Character[] characterArray0 = new Character[0];
    char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
    assertEquals(0, characterArray0.length);
}",""
"public static char[] addAll(char[] array1, char... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    char[] joinedArray = new char[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test3021204() throws Throwable {
    Character[] characterArray0 = new Character[0];
    char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);
    char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);
    assertEquals(0, characterArray0.length);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new char[] array.
 * @since 2.1
 */"
"// Primitive/Object array converters
// ----------------------------------------------------------------------
// Character array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Characters to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Character</code> array, may be <code>null</code>
 * @return a <code>char</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static char[] toPrimitive(Character[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_CHAR_ARRAY;
    }
    final char[] result = new char[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].charValue();
    }
    return result;
}","public void test3031213() throws Throwable {
    Character[] characterArray0 = new Character[4];
    // Undeclared exception!
    try {
        ArrayUtils.toPrimitive(characterArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}",""
"public static boolean contains(boolean[] array, boolean valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3041214() throws Throwable {
    boolean[] booleanArray0 = new boolean[0];
    boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
    assertEquals(0, booleanArray0.length);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static int lastIndexOf(boolean[] array, boolean valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test3051217() throws Throwable {
    boolean[] booleanArray0 = new boolean[9];
    booleanArray0[1] = true;
    int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
    assertEquals(9, booleanArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) if
 * <code>null</code> array input.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3061220() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1976));
    assertEquals(1, booleanArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3071223() throws Throwable {
    int int0 = ArrayUtils.lastIndexOf((boolean[]) null, false, (-921));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static boolean contains(float[] array, float valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3081224() throws Throwable {
    float[] floatArray0 = new float[7];
    floatArray0[5] = (float) (-1);
    boolean boolean0 = ArrayUtils.contains(floatArray0, (float) (byte) (-1));
    assertEquals(7, floatArray0.length);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3091227() throws Throwable {
    float[] floatArray0 = new float[9];
    floatArray0[1] = (-2418.9207F);
    int int0 = ArrayUtils.lastIndexOf(floatArray0, (-2418.9207F), 1431655765);
    assertEquals(9, floatArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3101230() throws Throwable {
    float[] floatArray0 = new float[2];
    int int0 = ArrayUtils.lastIndexOf(floatArray0, 2016.2957F, 0);
    assertEquals(2, floatArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3111233() throws Throwable {
    float[] floatArray0 = new float[9];
    int int0 = ArrayUtils.lastIndexOf(floatArray0, 3137.0F, (-3040));
    assertEquals(9, floatArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3121236() throws Throwable {
    int int0 = ArrayUtils.lastIndexOf((float[]) null, (float) (-1), (-1));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"// float IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(float[] array, float valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test3131237() throws Throwable {
    float[] floatArray0 = new float[1];
    floatArray0[0] = (-860.273F);
    int int0 = ArrayUtils.indexOf(floatArray0, (-860.273F));
    assertEquals(1, floatArray0.length);
}",""
"public static int indexOf(float[] array, float valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3141240() throws Throwable {
    float[] floatArray0 = new float[9];
    int int0 = ArrayUtils.indexOf(floatArray0, (-1527.7157F), (-171));
    assertEquals(9, floatArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(float[] array, float valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3151243() throws Throwable {
    float[] floatArray0 = new float[0];
    int int0 = ArrayUtils.indexOf(floatArray0, (float) Integer.MAX_VALUE, 0);
    assertEquals(0, floatArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static boolean contains(double[] array, double valueToFind, double tolerance) {
    return indexOf(array, valueToFind, 0, tolerance) != INDEX_NOT_FOUND;
}","public void test3161246() throws Throwable {
    double[] doubleArray0 = new double[6];
    boolean boolean0 = ArrayUtils.contains(doubleArray0, 852.61459120328, 2918.5301702262213);
    assertEquals(6, doubleArray0.length);
}","/**
 * <p>Checks if a value falling within the given tolerance is in the
 * given array.  If the array contains a value within the inclusive range
 * defined by (value - tolerance) to (value + tolerance).</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array
 * is passed in.</p>
 *
 * @param array  the array to search
 * @param valueToFind  the value to find
 * @param tolerance  the array contains the tolerance of the search
 * @return true if value falling within tolerance is in array
 */"
"public static boolean contains(double[] array, double valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3171249() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[6] = (double) 1;
    boolean boolean0 = ArrayUtils.contains(doubleArray0, (double) (short) 1);
    assertEquals(7, doubleArray0.length);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static boolean contains(double[] array, double valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3181252() throws Throwable {
    double[] doubleArray0 = new double[5];
    boolean boolean0 = ArrayUtils.contains(doubleArray0, (-1508.771535));
    assertEquals(5, doubleArray0.length);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    double min = valueToFind - tolerance;
    double max = valueToFind + tolerance;
    for (int i = startIndex; i >= 0; i--) {
        if (array[i] >= min && array[i] <= max) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3191255() throws Throwable {
    double[] doubleArray0 = new double[6];
    doubleArray0[5] = 6485.40117429313;
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1747.7, 7009, (-467.02517183));
    assertEquals(6, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.
 * This method will return the index of the last value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @param tolerance  search for value within plus/minus this amount
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    double min = valueToFind - tolerance;
    double max = valueToFind + tolerance;
    for (int i = startIndex; i >= 0; i--) {
        if (array[i] >= min && array[i] <= max) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3201258() throws Throwable {
    double[] doubleArray0 = new double[8];
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2900.31171079269, (-2481), (-1466.0));
    assertEquals(8, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.
 * This method will return the index of the last value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @param tolerance  search for value within plus/minus this amount
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    double min = valueToFind - tolerance;
    double max = valueToFind + tolerance;
    for (int i = startIndex; i >= 0; i--) {
        if (array[i] >= min && array[i] <= max) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3211264() throws Throwable {
    double[] doubleArray0 = ArrayUtils.EMPTY_DOUBLE_ARRAY;
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-449.04364), 2169, 2763.752662583577);
    assertEquals(0, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.
 * This method will return the index of the last value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @param tolerance  search for value within plus/minus this amount
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test3221267() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (-1.0);
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
    assertEquals(2, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3231270() throws Throwable {
    double[] doubleArray0 = new double[8];
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, 2185.793, (-1));
    assertEquals(8, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3241273() throws Throwable {
    double[] doubleArray0 = new double[0];
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-532.94708536686), 2507);
    assertEquals(0, doubleArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    double min = valueToFind - tolerance;
    double max = valueToFind + tolerance;
    for (int i = startIndex; i < array.length; i++) {
        if (array[i] >= min && array[i] <= max) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3251276() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 2921.217853;
    int int0 = ArrayUtils.indexOf(doubleArray0, (double) 104.5F, (-1), (double) (-1118.4F));
    assertEquals(1, doubleArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.
 * This method will return the index of the first value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(double[] array, double valueToFind, double tolerance) {
    return indexOf(array, valueToFind, 0, tolerance);
}","public void test3261279() throws Throwable {
    double[] doubleArray0 = new double[8];
    int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 573.260065281386);
    assertEquals(8, doubleArray0.length);
}","/**
 * <p>Finds the index of the given value within a given tolerance in the array.
 * This method will return the index of the first value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static boolean contains(double[] array, double valueToFind, double tolerance) {
    return indexOf(array, valueToFind, 0, tolerance) != INDEX_NOT_FOUND;
}","public void test3271282() throws Throwable {
    double[] doubleArray0 = new double[3];
    boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.5, 0.0);
    assertEquals(3, doubleArray0.length);
}","/**
 * <p>Checks if a value falling within the given tolerance is in the
 * given array.  If the array contains a value within the inclusive range
 * defined by (value - tolerance) to (value + tolerance).</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array
 * is passed in.</p>
 *
 * @param array  the array to search
 * @param valueToFind  the value to find
 * @param tolerance  the array contains the tolerance of the search
 * @return true if value falling within tolerance is in array
 */"
"public static int indexOf(double[] array, double valueToFind, int startIndex) {
    if (ArrayUtils.isEmpty(array)) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3281285() throws Throwable {
    double[] doubleArray0 = new double[6];
    int int0 = ArrayUtils.indexOf(doubleArray0, (double) (short) 0, (int) (short) (-1289));
    assertEquals(6, doubleArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static double[] removeElement(double[] array, double element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test3291288() throws Throwable {
    double[] doubleArray0 = new double[0];
    double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1947.0465044889506);
    assertEquals(0, doubleArray0.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1.1)            = null
 * ArrayUtils.removeElement([], 1.1)              = []
 * ArrayUtils.removeElement([1.1], 1.2)           = [1.1]
 * ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]
 * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static boolean contains(byte[] array, byte valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3301296() throws Throwable {
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 55;
    boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) 55);
    assertEquals(3, byteArray0.length);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3311299() throws Throwable {
    byte[] byteArray0 = new byte[9];
    int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) 0, (int) (byte) 0);
    assertEquals(9, byteArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3321302() throws Throwable {
    byte[] byteArray0 = new byte[3];
    int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-38), (int) (byte) (-119));
    assertEquals(3, byteArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(byte[] array, byte valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test3331305() throws Throwable {
    int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte) (-1));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static byte[] toPrimitive(Byte[] array, byte valueForNull) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_BYTE_ARRAY;
    }
    final byte[] result = new byte[array.length];
    for (int i = 0; i < array.length; i++) {
        Byte b = array[i];
        result[i] = (b == null ? valueForNull : b.byteValue());
    }
    return result;
}","public void test3341306() throws Throwable {
    Byte[] byteArray0 = new Byte[1];
    byte byte0 = (byte) (-1);
    byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
    assertEquals(1, byteArray0.length);
}","/**
 * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Byte</code> array, may be <code>null</code>
 * @param valueForNull  the value to insert if <code>null</code> found
 * @return a <code>byte</code> array, <code>null</code> if null array input
 */"
"public static int indexOf(byte[] array, byte valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3341310() throws Throwable {
    Byte[] byteArray0 = new Byte[1];
    byte byte0 = (byte) (-1);
    byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);
    int int0 = ArrayUtils.indexOf(byteArray1, (byte) (-68), (int) (byte) (-127));
    assertEquals(1, byteArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static boolean contains(byte[] array, byte valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3351314() throws Throwable {
    boolean boolean0 = ArrayUtils.contains((byte[]) null, (byte) (-57));
    assertFalse(boolean0);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static int lastIndexOf(char[] array, char valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test3361315() throws Throwable {
    char[] charArray0 = new char[1];
    charArray0[0] = 'j';
    int int0 = ArrayUtils.lastIndexOf(charArray0, 'j');
    assertEquals(1, charArray0.length);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3371318() throws Throwable {
    char[] charArray0 = new char[4];
    int int0 = ArrayUtils.lastIndexOf(charArray0, 'N', (int) (byte) (-123));
    assertEquals(4, charArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3381321() throws Throwable {
    int int0 = ArrayUtils.lastIndexOf((char[]) null, 'A', (int) (byte) (-124));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"public static boolean contains(char[] array, char valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3391322() throws Throwable {
    char[] charArray0 = new char[4];
    charArray0[1] = 'n';
    boolean boolean0 = ArrayUtils.contains(charArray0, 'n');
    assertEquals(4, charArray0.length);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 * @since 2.1
 */"
"public static boolean contains(short[] array, short valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3401325() throws Throwable {
    short[] shortArray0 = new short[7];
    shortArray0[1] = (short) 408;
    boolean boolean0 = ArrayUtils.contains(shortArray0, (short) 408);
    assertEquals(7, shortArray0.length);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static boolean contains(short[] array, short valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3411328() throws Throwable {
    short[] shortArray0 = new short[9];
    boolean boolean0 = ArrayUtils.contains(shortArray0, (short) (-997));
    assertEquals(9, shortArray0.length);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3421331() throws Throwable {
    short[] shortArray0 = new short[1];
    int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 1, (int) (short) 0);
    assertEquals(1, shortArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3431334() throws Throwable {
    short[] shortArray0 = new short[3];
    int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2595), (int) (short) (-922));
    assertEquals(3, shortArray0.length);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3441337() throws Throwable {
    int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) 21845, 2103657451);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"// Int array converters
// ----------------------------------------------------------------------
/**
 * <p>Converts an array of object Integers to primitives.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>Integer</code> array, may be <code>null</code>
 * @return an <code>int</code> array, <code>null</code> if null array input
 * @throws NullPointerException if array content is <code>null</code>
 */
public static int[] toPrimitive(Integer[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_INT_ARRAY;
    }
    final int[] result = new int[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = array[i].intValue();
    }
    return result;
}","public void test3441338() throws Throwable {
    int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) 21845, 2103657451);
    Integer[] integerArray0 = new Integer[6];
    integerArray0[0] = (Integer) 21845;
    integerArray0[1] = (Integer) 2103657451;
    integerArray0[2] = (Integer) int0;
    integerArray0[3] = (Integer) 21845;
    integerArray0[4] = (Integer) 21845;
    integerArray0[5] = (Integer) 2103657451;
    int[] intArray0 = ArrayUtils.toPrimitive(integerArray0);
    assertEquals(6, integerArray0.length);
}",""
"public static int indexOf(short[] array, short valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3451342() throws Throwable {
    short[] shortArray0 = new short[1];
    int int0 = ArrayUtils.indexOf(shortArray0, (short) (byte) 0, (-471));
    assertEquals(1, shortArray0.length);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static boolean contains(int[] array, int valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3461345() throws Throwable {
    int[] intArray0 = new int[6];
    intArray0[4] = (int) (short) 21845;
    boolean boolean0 = ArrayUtils.contains(intArray0, (int) (short) 21845);
    assertEquals(6, intArray0.length);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3471348() throws Throwable {
    int[] intArray0 = new int[5];
    int int0 = ArrayUtils.lastIndexOf(intArray0, 4, 63);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3481349() throws Throwable {
    int[] intArray0 = new int[3];
    int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0);
    assertEquals(0, int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3491350() throws Throwable {
    int[] intArray0 = new int[8];
    int int0 = ArrayUtils.lastIndexOf(intArray0, (-2283), (-4388));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3501351() throws Throwable {
    int int0 = ArrayUtils.lastIndexOf((int[]) null, (-1), Integer.MAX_VALUE);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(int[] array, int valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3511352() throws Throwable {
    int[] intArray0 = new int[9];
    int int0 = ArrayUtils.indexOf(intArray0, 690, (-3296));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static boolean contains(int[] array, int valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3521353() throws Throwable {
    boolean boolean0 = ArrayUtils.contains((int[]) null, (-3259));
    assertFalse(boolean0);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static boolean contains(long[] array, long valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test3531354() throws Throwable {
    long[] longArray0 = new long[2];
    longArray0[0] = 2L;
    boolean boolean0 = ArrayUtils.contains(longArray0, 2L);
    assertTrue(boolean0);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3541355() throws Throwable {
    long[] longArray0 = new long[7];
    int int0 = ArrayUtils.lastIndexOf(longArray0, 0L, 0);
    assertEquals(0, int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3551356() throws Throwable {
    long[] longArray0 = new long[6];
    int int0 = ArrayUtils.lastIndexOf(longArray0, (-36L), (-2144778109));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3561357() throws Throwable {
    int int0 = ArrayUtils.lastIndexOf((long[]) null, 184L, (-89));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the
 * array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"// long IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(long[] array, long valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test3571358() throws Throwable {
    long[] longArray0 = new long[8];
    longArray0[0] = (long) (short) (-1480);
    int int0 = ArrayUtils.indexOf(longArray0, (-1480L));
    assertEquals(0, int0);
}",""
"public static int indexOf(long[] array, long valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3581359() throws Throwable {
    long[] longArray0 = new long[6];
    int int0 = ArrayUtils.indexOf(longArray0, (long) Integer.MAX_VALUE, (-1));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(long[] array, long valueToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    for (int i = startIndex; i < array.length; i++) {
        if (valueToFind == array[i]) {
            return i;
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3591360() throws Throwable {
    int int0 = ArrayUtils.indexOf((long[]) null, (long) (byte) (-109), (-1));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the index of the given value in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param startIndex  the index to start searching at
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static boolean contains(Object[] array, Object objectToFind) {
    return indexOf(array, objectToFind) != INDEX_NOT_FOUND;
}","public void test3601361() throws Throwable {
    Object[] objectArray0 = new Object[4];
    boolean boolean0 = ArrayUtils.contains(objectArray0, objectArray0[1]);
    assertTrue(boolean0);
}","/**
 * <p>Checks if the object is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param objectToFind  the object to find
 * @return <code>true</code> if the array contains the object
 */"
"public static int lastIndexOf(Object[] array, Object objectToFind) {
    return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);
}","public void test3611362() throws Throwable {
    Object[] objectArray0 = new Object[4];
    objectArray0[0] = (Object) (-221.0F);
    int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[0]);
    assertEquals(0, int0);
}","/**
 * <p>Finds the last index of the given object within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @return the last index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i >= 0; i--) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3621363() throws Throwable {
    Object[] objectArray0 = new Object[8];
    objectArray0[0] = (Object) (-2312L);
    objectArray0[1] = (Object) (-2312L);
    objectArray0[2] = (Object) (-2312L);
    objectArray0[3] = (Object) (-780L);
    objectArray0[4] = objectArray0[2];
    objectArray0[5] = (Object) (-2312L);
    objectArray0[6] = (Object) (-2312L);
    objectArray0[7] = (Object) (-780L);
    int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null, 3937);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i >= 0; i--) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3631364() throws Throwable {
    Object[] objectArray0 = new Object[1];
    int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) ""e$VCh]x"", 0);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i >= 0; i--) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3641365() throws Throwable {
    Boolean[] booleanArray0 = new Boolean[3];
    int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) ""', is neither of type Map.Entry nor an Array"", (-44));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        return INDEX_NOT_FOUND;
    } else if (startIndex >= array.length) {
        startIndex = array.length - 1;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i >= 0; i--) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i >= 0; i--) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3651366() throws Throwable {
    int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) ""MZ&P"", 36);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than
 * the array length will search from the end of the array.</p>
 *
 * @param array  the array to traverse for looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the start index to travers backwards from
 * @return the last index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"// IndexOf search
// ----------------------------------------------------------------------
// Object IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given object in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @return the index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(Object[] array, Object objectToFind) {
    return indexOf(array, objectToFind, 0);
}","public void test3661367() throws Throwable {
    Object[] objectArray0 = new Object[9];
    objectArray0[2] = (Object) 'n';
    int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2]);
    assertEquals(2, int0);
}",""
"public static boolean contains(Object[] array, Object objectToFind) {
    return indexOf(array, objectToFind) != INDEX_NOT_FOUND;
}","public void test3671368() throws Throwable {
    Object[] objectArray0 = new Object[0];
    Object object0 = new Object();
    boolean boolean0 = ArrayUtils.contains(objectArray0, object0);
    assertFalse(boolean0);
}","/**
 * <p>Checks if the object is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param objectToFind  the object to find
 * @return <code>true</code> if the array contains the object
 */"
"public static <T> T[] removeElement(T[] array, Object element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test3681369() throws Throwable {
    Object[] objectArray0 = new Object[1];
    objectArray0[0] = (Object) false;
    Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, (Object) null);
    assertEquals(1, objectArray1.length);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, ""a"")            = null
 * ArrayUtils.removeElement([], ""a"")              = []
 * ArrayUtils.removeElement([""a""], ""b"")           = [""a""]
 * ArrayUtils.removeElement([""a"", ""b""], ""a"")      = [""b""]
 * ArrayUtils.removeElement([""a"", ""b"", ""a""], ""a"") = [""b"", ""a""]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static int indexOf(Object[] array, Object objectToFind, int startIndex) {
    if (array == null) {
        return INDEX_NOT_FOUND;
    }
    if (startIndex < 0) {
        startIndex = 0;
    }
    if (objectToFind == null) {
        for (int i = startIndex; i < array.length; i++) {
            if (array[i] == null) {
                return i;
            }
        }
    } else if (array.getClass().getComponentType().isInstance(objectToFind)) {
        for (int i = startIndex; i < array.length; i++) {
            if (objectToFind.equals(array[i])) {
                return i;
            }
        }
    }
    return INDEX_NOT_FOUND;
}","public void test3691370() throws Throwable {
    Object[] objectArray0 = new Object[2];
    int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (-922));
    assertEquals(0, int0);
}","/**
 * <p>Finds the index of the given object in the array starting at the given index.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * <p>A negative startIndex is treated as zero. A startIndex larger than the array
 * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @param startIndex  the index to start searching at
 * @return the index of the object within the array starting at the index,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static void reverse(boolean[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    boolean tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3701371() throws Throwable {
    ArrayUtils.reverse((boolean[]) null);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(float[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    float tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3721373() throws Throwable {
    ArrayUtils.reverse((float[]) null);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(float[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    float tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3731374() throws Throwable {
    float[] floatArray0 = new float[9];
    ArrayUtils.reverse(floatArray0);
    assertArrayEquals(new float[] { 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F }, floatArray0, 0.01F);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(double[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    double tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3741375() throws Throwable {
    ArrayUtils.reverse((double[]) null);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(double[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    double tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3751376() throws Throwable {
    double[] doubleArray0 = new double[3];
    ArrayUtils.reverse(doubleArray0);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0 }, doubleArray0, 0.01);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(byte[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    byte tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3761377() throws Throwable {
    ArrayUtils.reverse((byte[]) null);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(char[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    char tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3771378() throws Throwable {
    ArrayUtils.reverse((char[]) null);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(char[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    char tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3781379() throws Throwable {
    char[] charArray0 = new char[4];
    ArrayUtils.reverse(charArray0);
    assertArrayEquals(new char[] { '\u0000', '\u0000', '\u0000', '\u0000' }, charArray0);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(short[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    short tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3791380() throws Throwable {
    ArrayUtils.reverse((short[]) null);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(short[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    short tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3801381() throws Throwable {
    short[] shortArray0 = new short[3];
    ArrayUtils.reverse(shortArray0);
    assertArrayEquals(new short[] { (short) 0, (short) 0, (short) 0 }, shortArray0);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(int[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    int tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3811382() throws Throwable {
    ArrayUtils.reverse((int[]) null);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(int[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    int tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3821383() throws Throwable {
    int[] intArray0 = new int[3];
    ArrayUtils.reverse(intArray0);
    assertArrayEquals(new int[] { 0, 0, 0 }, intArray0);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(long[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    long tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3831384() throws Throwable {
    ArrayUtils.reverse((long[]) null);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"public static void reverse(long[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    long tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3841385() throws Throwable {
    long[] longArray0 = new long[2];
    ArrayUtils.reverse(longArray0);
    assertArrayEquals(new long[] { 0L, 0L }, longArray0);
}","/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */"
"// Reverse
//-----------------------------------------------------------------------
/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>There is no special handling for multi-dimensional arrays.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */
public static void reverse(Object[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    Object tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3851386() throws Throwable {
    ArrayUtils.reverse((Object[]) null);
}",""
"// Reverse
//-----------------------------------------------------------------------
/**
 * <p>Reverses the order of the given array.</p>
 *
 * <p>There is no special handling for multi-dimensional arrays.</p>
 *
 * <p>This method does nothing for a <code>null</code> input array.</p>
 *
 * @param array  the array to reverse, may be <code>null</code>
 */
public static void reverse(Object[] array) {
    if (array == null) {
        return;
    }
    int i = 0;
    int j = array.length - 1;
    Object tmp;
    while (j > i) {
        tmp = array[j];
        array[j] = array[i];
        array[i] = tmp;
        j--;
        i++;
    }
}","public void test3861387() throws Throwable {
    Object[] objectArray0 = new Object[5];
    ArrayUtils.reverse(objectArray0);
    assertEquals(5, objectArray0.length);
}",""
"public static boolean isSameType(Object array1, Object array2) {
    if (array1 == null || array2 == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    }
    return array1.getClass().getName().equals(array2.getClass().getName());
}","public void test3871388() throws Throwable {
    Object object0 = new Object();
    boolean boolean0 = ArrayUtils.isSameType(object0, ""Mac"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether two arrays are the same type taking into account
 * multi-dimensional arrays.</p>
 *
 * @param array1 the first array, must not be <code>null</code>
 * @param array2 the second array, must not be <code>null</code>
 * @return <code>true</code> if type of arrays matches
 * @throws IllegalArgumentException if either array is <code>null</code>
 */"
"public static boolean isSameType(Object array1, Object array2) {
    if (array1 == null || array2 == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    }
    return array1.getClass().getName().equals(array2.getClass().getName());
}","public void test3881389() throws Throwable {
    // Undeclared exception!
    try {
        ArrayUtils.isSameType((Object) null, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Array must not be null
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Checks whether two arrays are the same type taking into account
 * multi-dimensional arrays.</p>
 *
 * @param array1 the first array, must not be <code>null</code>
 * @param array2 the second array, must not be <code>null</code>
 * @return <code>true</code> if type of arrays matches
 * @throws IllegalArgumentException if either array is <code>null</code>
 */"
"public static boolean isSameLength(boolean[] array1, boolean[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test3891390() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    boolean[] booleanArray1 = new boolean[0];
    boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);
    assertFalse(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(boolean[] array1, boolean[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test3901391() throws Throwable {
    boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(boolean[] array1, boolean[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test3911392() throws Throwable {
    boolean[] booleanArray0 = new boolean[1];
    boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(float[] array1, float[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test3921393() throws Throwable {
    float[] floatArray0 = new float[9];
    float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);
    boolean boolean0 = ArrayUtils.isSameLength(floatArray1, floatArray0);
    assertFalse(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(float[] array1, float[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test3931395() throws Throwable {
    boolean boolean0 = ArrayUtils.isSameLength((float[]) null, (float[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(float[] array1, float[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test3941396() throws Throwable {
    float[] floatArray0 = new float[0];
    boolean boolean0 = ArrayUtils.isSameLength((float[]) null, floatArray0);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(float[] array1, float[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test3951397() throws Throwable {
    float[] floatArray0 = new float[7];
    boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(double[] array1, double[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test3961398() throws Throwable {
    double[] doubleArray0 = new double[0];
    boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, (double[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(double[] array1, double[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test3971399() throws Throwable {
    boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(double[] array1, double[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test3981400() throws Throwable {
    double[] doubleArray0 = new double[1];
    boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(byte[] array1, byte[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test3991401() throws Throwable {
    byte[] byteArray0 = new byte[0];
    byte[] byteArray1 = new byte[4];
    boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray1);
    assertFalse(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(byte[] array1, byte[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4001402() throws Throwable {
    boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(byte[] array1, byte[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4011403() throws Throwable {
    byte[] byteArray0 = new byte[6];
    boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(char[] array1, char[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4021404() throws Throwable {
    char[] charArray0 = new char[0];
    char[] charArray1 = new char[4];
    boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);
    assertFalse(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(char[] array1, char[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4031405() throws Throwable {
    char[] charArray0 = new char[2];
    boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);
    assertFalse(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(char[] array1, char[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4041406() throws Throwable {
    boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(char[] array1, char[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4051407() throws Throwable {
    char[] charArray0 = new char[2];
    boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(short[] array1, short[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4061408() throws Throwable {
    short[] shortArray0 = new short[9];
    short[] shortArray1 = new short[2];
    boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray1);
    assertFalse(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(short[] array1, short[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4071409() throws Throwable {
    boolean boolean0 = ArrayUtils.isSameLength((short[]) null, (short[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(short[] array1, short[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4081410() throws Throwable {
    short[] shortArray0 = new short[3];
    boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(int[] array1, int[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4091411() throws Throwable {
    int[] intArray0 = new int[3];
    boolean boolean0 = ArrayUtils.isSameLength((int[]) null, intArray0);
    assertFalse(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(int[] array1, int[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4101412() throws Throwable {
    boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(int[] array1, int[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4111413() throws Throwable {
    int[] intArray0 = new int[5];
    boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(long[] array1, long[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4121414() throws Throwable {
    long[] longArray0 = new long[4];
    long[] longArray1 = new long[2];
    boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);
    assertFalse(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(long[] array1, long[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4131415() throws Throwable {
    boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"public static boolean isSameLength(long[] array1, long[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4141416() throws Throwable {
    long[] longArray0 = new long[0];
    boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);
    assertTrue(boolean0);
}","/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */"
"// Is same length
//-----------------------------------------------------------------------
/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.
 *
 * <p>Any multi-dimensional aspects of the arrays are ignored.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */
public static boolean isSameLength(Object[] array1, Object[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4151417() throws Throwable {
    Object[] objectArray0 = new Object[7];
    Object[] objectArray1 = new Object[2];
    boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1);
    assertFalse(boolean0);
}",""
"// Is same length
//-----------------------------------------------------------------------
/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.
 *
 * <p>Any multi-dimensional aspects of the arrays are ignored.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */
public static boolean isSameLength(Object[] array1, Object[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4161418() throws Throwable {
    boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);
    assertTrue(boolean0);
}",""
"// Is same length
//-----------------------------------------------------------------------
/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.
 *
 * <p>Any multi-dimensional aspects of the arrays are ignored.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */
public static boolean isSameLength(Object[] array1, Object[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4171419() throws Throwable {
    Object[] objectArray0 = new Object[5];
    boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, objectArray0);
    assertFalse(boolean0);
}",""
"public static Long[] toObject(long[] array) {
    if (array == null) {
        return null;
    } else if (array.length == 0) {
        return EMPTY_LONG_OBJECT_ARRAY;
    }
    final Long[] result = new Long[array.length];
    for (int i = 0; i < array.length; i++) {
        result[i] = Long.valueOf(array[i]);
    }
    return result;
}","public void test4181420() throws Throwable {
    long[] longArray0 = new long[3];
    Long[] longArray1 = ArrayUtils.toObject(longArray0);
    assertNotNull(longArray1);
}","/**
 * <p>Converts an array of primitive longs to objects.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  a <code>long</code> array
 * @return a <code>Long</code> array, <code>null</code> if null array input
 */"
"// Is same length
//-----------------------------------------------------------------------
/**
 * <p>Checks whether two arrays are the same length, treating
 * <code>null</code> arrays as length <code>0</code>.
 *
 * <p>Any multi-dimensional aspects of the arrays are ignored.</p>
 *
 * @param array1 the first array, may be <code>null</code>
 * @param array2 the second array, may be <code>null</code>
 * @return <code>true</code> if length of arrays matches, treating
 *  <code>null</code> as an empty array
 */
public static boolean isSameLength(Object[] array1, Object[] array2) {
    if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {
        return false;
    }
    return true;
}","public void test4181421() throws Throwable {
    long[] longArray0 = new long[3];
    Long[] longArray1 = ArrayUtils.toObject(longArray0);
    boolean boolean0 = ArrayUtils.isSameLength((Object[]) longArray1, (Object[]) longArray1);
    assertEquals(3, longArray1.length);
}",""
"public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_BOOLEAN_ARRAY;
    }
    boolean[] subarray = new boolean[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4191423() throws Throwable {
    boolean[] booleanArray0 = new boolean[2];
    boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 1, 2607);
    assertEquals(1, booleanArray1.length);
}","/**
 * <p>Produces a new <code>boolean</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_BOOLEAN_ARRAY;
    }
    boolean[] subarray = new boolean[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4201424() throws Throwable {
    boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, 1, 7);
    assertNull(booleanArray0);
}","/**
 * <p>Produces a new <code>boolean</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    float[] subarray = new float[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4221426() throws Throwable {
    float[] floatArray0 = new float[4];
    float[] floatArray1 = ArrayUtils.subarray(floatArray0, 0, Integer.MAX_VALUE);
    assertNotSame(floatArray1, floatArray0);
}","/**
 * <p>Produces a new <code>float</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    float[] subarray = new float[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4231428() throws Throwable {
    float[] floatArray0 = new float[7];
    float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2147), (-2147));
    assertEquals(0, floatArray1.length);
}","/**
 * <p>Produces a new <code>float</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    float[] subarray = new float[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4241429() throws Throwable {
    float[] floatArray0 = ArrayUtils.subarray((float[]) null, 2, 2);
    assertNull(floatArray0);
}","/**
 * <p>Produces a new <code>float</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_FLOAT_ARRAY;
    }
    float[] subarray = new float[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4251430() throws Throwable {
    float[] floatArray0 = new float[6];
    float[] floatArray1 = ArrayUtils.subarray(floatArray0, 57, (-416));
    assertNotSame(floatArray0, floatArray1);
}","/**
 * <p>Produces a new <code>float</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_DOUBLE_ARRAY;
    }
    double[] subarray = new double[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4261431() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 1472, (-1));
    assertArrayEquals(new double[] {}, doubleArray1, 0.01);
}","/**
 * <p>Produces a new <code>double</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_DOUBLE_ARRAY;
    }
    double[] subarray = new double[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4271432() throws Throwable {
    double[] doubleArray0 = ArrayUtils.subarray((double[]) null, 2303, 3575);
    assertNull(doubleArray0);
}","/**
 * <p>Produces a new <code>double</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_DOUBLE_ARRAY;
    }
    double[] subarray = new double[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4281433() throws Throwable {
    double[] doubleArray0 = new double[2];
    double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1), 1472);
    assertNotNull(doubleArray1);
}","/**
 * <p>Produces a new <code>double</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_BYTE_ARRAY;
    }
    byte[] subarray = new byte[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4291436() throws Throwable {
    Short[] shortArray0 = new Short[5];
    Short short0 = new Short((short) 1588);
    shortArray0[0] = short0;
    shortArray0[1] = shortArray0[0];
    short short1 = (short) (-16);
    byte[] byteArray0 = new byte[2];
    byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) short1, (int) shortArray0[1]);
    assertNotSame(byteArray1, byteArray0);
}","/**
 * <p>Produces a new <code>byte</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_BYTE_ARRAY;
    }
    byte[] subarray = new byte[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4301438() throws Throwable {
    ArrayUtils arrayUtils0 = new ArrayUtils();
    byte[] byteArray0 = ArrayUtils.subarray(arrayUtils0.EMPTY_BYTE_ARRAY, 0, 1285);
    assertArrayEquals(new byte[] {}, byteArray0);
}","/**
 * <p>Produces a new <code>byte</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_BYTE_ARRAY;
    }
    byte[] subarray = new byte[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4311439() throws Throwable {
    byte[] byteArray0 = new byte[5];
    byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (byte) 1, (-1));
    assertEquals(0, byteArray1.length);
}","/**
 * <p>Produces a new <code>byte</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_BYTE_ARRAY;
    }
    byte[] subarray = new byte[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4321440() throws Throwable {
    byte[] byteArray0 = ArrayUtils.subarray((byte[]) null, (-918), 672);
    assertNull(byteArray0);
}","/**
 * <p>Produces a new <code>byte</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_CHAR_ARRAY;
    }
    char[] subarray = new char[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4331441() throws Throwable {
    char[] charArray0 = new char[1];
    char[] charArray1 = ArrayUtils.subarray(charArray0, (-2083), Integer.MAX_VALUE);
    assertNotSame(charArray1, charArray0);
}","/**
 * <p>Produces a new <code>char</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_CHAR_ARRAY;
    }
    char[] subarray = new char[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4341443() throws Throwable {
    char[] charArray0 = new char[4];
    char[] charArray1 = ArrayUtils.subarray(charArray0, (-3033), (int) (byte) 2);
    assertEquals(2, charArray1.length);
}","/**
 * <p>Produces a new <code>char</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_CHAR_ARRAY;
    }
    char[] subarray = new char[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4351444() throws Throwable {
    char[] charArray0 = ArrayUtils.subarray((char[]) null, 3313, 1);
    assertNull(charArray0);
}","/**
 * <p>Produces a new <code>char</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_CHAR_ARRAY;
    }
    char[] subarray = new char[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4361445() throws Throwable {
    char[] charArray0 = new char[4];
    char[] charArray1 = ArrayUtils.subarray(charArray0, 0, 0);
    assertNotNull(charArray1);
}","/**
 * <p>Produces a new <code>char</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_SHORT_ARRAY;
    }
    short[] subarray = new short[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4371447() throws Throwable {
    short[] shortArray0 = ArrayUtils.subarray((short[]) null, 1, (-93));
    assertNull(shortArray0);
}","/**
 * <p>Produces a new <code>short</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_SHORT_ARRAY;
    }
    short[] subarray = new short[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4381448() throws Throwable {
    short[] shortArray0 = new short[5];
    short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) 1, 2197);
    assertNotNull(shortArray1);
}","/**
 * <p>Produces a new <code>short</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_INT_ARRAY;
    }
    int[] subarray = new int[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4391450() throws Throwable {
    int[] intArray0 = new int[9];
    int[] intArray1 = ArrayUtils.subarray(intArray0, (-942), 0);
    assertEquals(0, intArray1.length);
}","/**
 * <p>Produces a new <code>int</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_INT_ARRAY;
    }
    int[] subarray = new int[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4401451() throws Throwable {
    int[] intArray0 = new int[3];
    int[] intArray1 = ArrayUtils.subarray(intArray0, 297, 2146540524);
    assertEquals(0, intArray1.length);
}","/**
 * <p>Produces a new <code>int</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_INT_ARRAY;
    }
    int[] subarray = new int[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4411452() throws Throwable {
    int[] intArray0 = ArrayUtils.subarray((int[]) null, 971, (-1525));
    assertNull(intArray0);
}","/**
 * <p>Produces a new <code>int</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_INT_ARRAY;
    }
    int[] subarray = new int[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4421453() throws Throwable {
    int[] intArray0 = new int[6];
    int[] intArray1 = ArrayUtils.subarray(intArray0, (-785), 2660);
    assertNotSame(intArray1, intArray0);
}","/**
 * <p>Produces a new <code>int</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_LONG_ARRAY;
    }
    long[] subarray = new long[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4431456() throws Throwable {
    long[] longArray0 = new long[1];
    long[] longArray1 = ArrayUtils.subarray(longArray0, (-1), (int) (short) (-2204));
    assertEquals(0, longArray1.length);
}","/**
 * <p>Produces a new <code>long</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_LONG_ARRAY;
    }
    long[] subarray = new long[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4441457() throws Throwable {
    long[] longArray0 = new long[6];
    long[] longArray1 = ArrayUtils.subarray(longArray0, 2146214317, 2146214317);
    assertEquals(0, longArray1.length);
}","/**
 * <p>Produces a new <code>long</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_LONG_ARRAY;
    }
    long[] subarray = new long[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4451458() throws Throwable {
    long[] longArray0 = ArrayUtils.subarray((long[]) null, 57, 2527);
    assertNull(longArray0);
}","/**
 * <p>Produces a new <code>long</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    if (newSize <= 0) {
        return EMPTY_LONG_ARRAY;
    }
    long[] subarray = new long[newSize];
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4461459() throws Throwable {
    long[] longArray0 = new long[6];
    long[] longArray1 = ArrayUtils.subarray(longArray0, (-416), 1264);
    assertEquals(6, longArray1.length);
}","/**
 * <p>Produces a new <code>long</code> array containing the elements
 * between the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */"
"// Subarrays
//-----------------------------------------------------------------------
/**
 * <p>Produces a new array containing the elements between
 * the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * <p>The component type of the subarray is always the same as
 * that of the input array. Thus, if the input is an array of type
 * <code>Date</code>, the following usage is envisaged:</p>
 *
 * <pre>
 * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);
 * </pre>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */
@SuppressWarnings(""unchecked"")
public static <T> T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    Class<?> type = array.getClass().getComponentType();
    if (newSize <= 0) {
        return (T[]) Array.newInstance(type, 0);
    }
    T[] subarray = (T[]) Array.newInstance(type, newSize);
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4471462() throws Throwable {
    short[] shortArray0 = new short[3];
    Integer[] integerArray0 = new Integer[2];
    Integer[] integerArray1 = ArrayUtils.subarray(integerArray0, (int) shortArray0[0], (int) 0);
    assertEquals(0, integerArray1.length);
}",""
"// Subarrays
//-----------------------------------------------------------------------
/**
 * <p>Produces a new array containing the elements between
 * the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * <p>The component type of the subarray is always the same as
 * that of the input array. Thus, if the input is an array of type
 * <code>Date</code>, the following usage is envisaged:</p>
 *
 * <pre>
 * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);
 * </pre>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */
@SuppressWarnings(""unchecked"")
public static <T> T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    Class<?> type = array.getClass().getComponentType();
    if (newSize <= 0) {
        return (T[]) Array.newInstance(type, 0);
    }
    T[] subarray = (T[]) Array.newInstance(type, newSize);
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4481463() throws Throwable {
    String[] stringArray0 = new String[5];
    String[] stringArray1 = ArrayUtils.subarray(stringArray0, 2169, 1731);
    assertEquals(0, stringArray1.length);
}",""
"// Subarrays
//-----------------------------------------------------------------------
/**
 * <p>Produces a new array containing the elements between
 * the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * <p>The component type of the subarray is always the same as
 * that of the input array. Thus, if the input is an array of type
 * <code>Date</code>, the following usage is envisaged:</p>
 *
 * <pre>
 * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);
 * </pre>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */
@SuppressWarnings(""unchecked"")
public static <T> T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    Class<?> type = array.getClass().getComponentType();
    if (newSize <= 0) {
        return (T[]) Array.newInstance(type, 0);
    }
    T[] subarray = (T[]) Array.newInstance(type, newSize);
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4491464() throws Throwable {
    AbstractMap.SimpleImmutableEntry<String, Object>[] abstractMap_SimpleImmutableEntryArray0 = ArrayUtils.subarray((AbstractMap.SimpleImmutableEntry<String, Object>[]) null, (int) 2, 1);
    assertNull(abstractMap_SimpleImmutableEntryArray0);
}",""
"// Subarrays
//-----------------------------------------------------------------------
/**
 * <p>Produces a new array containing the elements between
 * the start and end indices.</p>
 *
 * <p>The start index is inclusive, the end index exclusive.
 * Null array input produces null output.</p>
 *
 * <p>The component type of the subarray is always the same as
 * that of the input array. Thus, if the input is an array of type
 * <code>Date</code>, the following usage is envisaged:</p>
 *
 * <pre>
 * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);
 * </pre>
 *
 * @param array  the array
 * @param startIndexInclusive  the starting index. Undervalue (&lt;0)
 *      is promoted to 0, overvalue (&gt;array.length) results
 *      in an empty array.
 * @param endIndexExclusive  elements up to endIndex-1 are present in the
 *      returned subarray. Undervalue (&lt; startIndex) produces
 *      empty array, overvalue (&gt;array.length) is demoted to
 *      array length.
 * @return a new array containing the elements between
 *      the start and end indices.
 * @since 2.1
 */
@SuppressWarnings(""unchecked"")
public static <T> T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive) {
    if (array == null) {
        return null;
    }
    if (startIndexInclusive < 0) {
        startIndexInclusive = 0;
    }
    if (endIndexExclusive > array.length) {
        endIndexExclusive = array.length;
    }
    int newSize = endIndexExclusive - startIndexInclusive;
    Class<?> type = array.getClass().getComponentType();
    if (newSize <= 0) {
        return (T[]) Array.newInstance(type, 0);
    }
    T[] subarray = (T[]) Array.newInstance(type, newSize);
    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
    return subarray;
}","public void test4501465() throws Throwable {
    AbstractMap.SimpleEntry<Integer, String>[] abstractMap_SimpleEntryArray0 = (AbstractMap.SimpleEntry<Integer, String>[]) Array.newInstance(AbstractMap.SimpleEntry.class, 7);
    AbstractMap.SimpleEntry<Integer, String>[] abstractMap_SimpleEntryArray1 = ArrayUtils.subarray(abstractMap_SimpleEntryArray0, (int) (-101), 3475);
    assertNotNull(abstractMap_SimpleEntryArray1);
}",""
"public static boolean[] removeElement(boolean[] array, boolean element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test4511468() throws Throwable {
    boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);
    assertNull(booleanArray0);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, true)                = null
 * ArrayUtils.removeElement([], true)                  = []
 * ArrayUtils.removeElement([true], false)             = [true]
 * ArrayUtils.removeElement([true, false], false)      = [true]
 * ArrayUtils.removeElement([true, false, true], true) = [false, true]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static boolean[] removeElement(boolean[] array, boolean element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test4521469() throws Throwable {
    boolean[] booleanArray0 = new boolean[0];
    boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true);
    assertNotSame(booleanArray0, booleanArray1);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, true)                = null
 * ArrayUtils.removeElement([], true)                  = []
 * ArrayUtils.removeElement([true], false)             = [true]
 * ArrayUtils.removeElement([true, false], false)      = [true]
 * ArrayUtils.removeElement([true, false, true], true) = [false, true]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static float[] addAll(float[] array1, float... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    float[] joinedArray = new float[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test4531470() throws Throwable {
    float[] floatArray0 = ArrayUtils.addAll((float[]) null, (float[]) null);
    assertNull(floatArray0);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new float[] array.
 * @since 2.1
 */"
"public static float[] clone(float[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test4541471() throws Throwable {
    float[] floatArray0 = new float[3];
    float[] floatArray1 = ArrayUtils.clone(floatArray0);
    assertNotNull(floatArray1);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static double[] addAll(double[] array1, double... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    double[] joinedArray = new double[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test4551473() throws Throwable {
    double[] doubleArray0 = ArrayUtils.addAll((double[]) null, (double[]) null);
    assertNull(doubleArray0);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new double[] array.
 * @since 2.1
 */"
"public static byte[] clone(byte[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test4561474() throws Throwable {
    byte[] byteArray0 = ArrayUtils.clone((byte[]) null);
    assertNull(byteArray0);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static short[] removeElement(short[] array, short element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test4571475() throws Throwable {
    short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) 0);
    assertNull(shortArray0);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)      = null
 * ArrayUtils.removeElement([], 1)        = []
 * ArrayUtils.removeElement([1], 2)       = [1]
 * ArrayUtils.removeElement([1, 3], 1)    = [3]
 * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static short[] clone(short[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test4581476() throws Throwable {
    short[] shortArray0 = new short[0];
    short[] shortArray1 = ArrayUtils.clone(shortArray0);
    assertNotSame(shortArray1, shortArray0);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static int[] addAll(int[] array1, int... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    int[] joinedArray = new int[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test4591477() throws Throwable {
    int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null);
    assertNull(intArray0);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new int[] array.
 * @since 2.1
 */"
"public static int[] removeElement(int[] array, int element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test4601478() throws Throwable {
    int[] intArray0 = new int[4];
    int[] intArray1 = ArrayUtils.removeElement(intArray0, (-951));
    assertNotNull(intArray1);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)      = null
 * ArrayUtils.removeElement([], 1)        = []
 * ArrayUtils.removeElement([1], 2)       = [1]
 * ArrayUtils.removeElement([1, 3], 1)    = [3]
 * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static long[] clone(long[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test4611480() throws Throwable {
    long[] longArray0 = ArrayUtils.clone((long[]) null);
    assertNull(longArray0);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"public static long[] clone(long[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test4621481() throws Throwable {
    long[] longArray0 = new long[0];
    long[] longArray1 = ArrayUtils.clone(longArray0);
    assertNotSame(longArray1, longArray0);
}","/**
 * <p>Clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */"
"// Clone
//-----------------------------------------------------------------------
/**
 * <p>Shallow clones an array returning a typecast result and handling
 * <code>null</code>.</p>
 *
 * <p>The objects in the array are not cloned, thus there is no special
 * handling for multi-dimensional arrays.</p>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  the array to shallow clone, may be <code>null</code>
 * @return the cloned array, <code>null</code> if <code>null</code> input
 */
public static <T> T[] clone(T[] array) {
    if (array == null) {
        return null;
    }
    return array.clone();
}","public void test4631482() throws Throwable {
    Object[] objectArray0 = ArrayUtils.clone((Object[]) null);
    assertNull(objectArray0);
}",""
"// To map
//-----------------------------------------------------------------------
/**
 * <p>Converts the given array into a {@link java.util.Map}. Each element of the array
 * must be either a {@link java.util.Map.Entry} or an Array, containing at least two
 * elements, where the first element is used as key and the second as
 * value.</p>
 *
 * <p>This method can be used to initialize:</p>
 * <pre>
 * // Create a Map mapping colors.
 * Map colorMap = MapUtils.toMap(new String[][] {{
 *     {""RED"", ""#FF0000""},
 *     {""GREEN"", ""#00FF00""},
 *     {""BLUE"", ""#0000FF""}});
 * </pre>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  an array whose elements are either a {@link java.util.Map.Entry} or
 *  an Array containing at least two elements, may be <code>null</code>
 * @return a <code>Map</code> that was created from the array
 * @throws IllegalArgumentException  if one element of this Array is
 *  itself an Array containing less then two elements
 * @throws IllegalArgumentException  if the array contains elements other
 *  than {@link java.util.Map.Entry} and an Array
 */
public static Map<Object, Object> toMap(Object[] array) {
    if (array == null) {
        return null;
    }
    final Map<Object, Object> map = new HashMap<Object, Object>((int) (array.length * 1.5));
    for (int i = 0; i < array.length; i++) {
        Object object = array[i];
        if (object instanceof Map.Entry<?, ?>) {
            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) object;
            map.put(entry.getKey(), entry.getValue());
        } else if (object instanceof Object[]) {
            Object[] entry = (Object[]) object;
            if (entry.length < 2) {
                throw new IllegalArgumentException(""Array element "" + i + "", '"" + object + ""', has a length less than 2"");
            }
            map.put(entry[0], entry[1]);
        } else {
            throw new IllegalArgumentException(""Array element "" + i + "", '"" + object + ""', is neither of type Map.Entry nor an Array"");
        }
    }
    return map;
}","public void test4641483() throws Throwable {
    Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null);
    assertNull(map0);
}",""
"// To map
//-----------------------------------------------------------------------
/**
 * <p>Converts the given array into a {@link java.util.Map}. Each element of the array
 * must be either a {@link java.util.Map.Entry} or an Array, containing at least two
 * elements, where the first element is used as key and the second as
 * value.</p>
 *
 * <p>This method can be used to initialize:</p>
 * <pre>
 * // Create a Map mapping colors.
 * Map colorMap = MapUtils.toMap(new String[][] {{
 *     {""RED"", ""#FF0000""},
 *     {""GREEN"", ""#00FF00""},
 *     {""BLUE"", ""#0000FF""}});
 * </pre>
 *
 * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>
 *
 * @param array  an array whose elements are either a {@link java.util.Map.Entry} or
 *  an Array containing at least two elements, may be <code>null</code>
 * @return a <code>Map</code> that was created from the array
 * @throws IllegalArgumentException  if one element of this Array is
 *  itself an Array containing less then two elements
 * @throws IllegalArgumentException  if the array contains elements other
 *  than {@link java.util.Map.Entry} and an Array
 */
public static Map<Object, Object> toMap(Object[] array) {
    if (array == null) {
        return null;
    }
    final Map<Object, Object> map = new HashMap<Object, Object>((int) (array.length * 1.5));
    for (int i = 0; i < array.length; i++) {
        Object object = array[i];
        if (object instanceof Map.Entry<?, ?>) {
            Map.Entry<?, ?> entry = (Map.Entry<?, ?>) object;
            map.put(entry.getKey(), entry.getValue());
        } else if (object instanceof Object[]) {
            Object[] entry = (Object[]) object;
            if (entry.length < 2) {
                throw new IllegalArgumentException(""Array element "" + i + "", '"" + object + ""', has a length less than 2"");
            }
            map.put(entry[0], entry[1]);
        } else {
            throw new IllegalArgumentException(""Array element "" + i + "", '"" + object + ""', is neither of type Map.Entry nor an Array"");
        }
    }
    return map;
}","public void test4651484() throws Throwable {
    Object[] objectArray0 = new Object[7];
    // Undeclared exception!
    try {
        ArrayUtils.toMap(objectArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Array element 0, 'null', is neither of type Map.Entry nor an Array
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}",""
"public static String toString(Object array, String stringIfNull) {
    if (array == null) {
        return stringIfNull;
    }
    return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();
}","public void test4661485() throws Throwable {
    String string0 = ArrayUtils.toString((Object) null, (String) null);
    assertNull(string0);
}","/**
 * <p>Outputs an array as a String handling <code>null</code>s.</p>
 *
 * <p>Multi-dimensional arrays are handled correctly, including
 * multi-dimensional primitive arrays.</p>
 *
 * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
 *
 * @param array  the array to get a toString for, may be <code>null</code>
 * @param stringIfNull  the String to return if the array is <code>null</code>
 * @return a String representation of the array
 */"
"public static short[] add(short[] array, int index, short element) {
    return (short[]) add(array, index, Short.valueOf(element), Short.TYPE);
}","public void test4671486() throws Throwable {
    short[] shortArray0 = new short[2];
    short[] shortArray1 = ArrayUtils.add(shortArray0, 1, (short) 3);
    assertArrayEquals(new short[] { (short) 0, (short) 3, (short) 0 }, shortArray1);
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1], 0, 2)         = [2, 1]
 * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]
 * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]
 * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static float[] remove(float[] array, int index) {
    return (float[]) remove((Object) array, index);
}","public void test4681487() throws Throwable {
    Float[] floatArray0 = new Float[0];
    float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, 773.19F);
    // Undeclared exception!
    try {
        ArrayUtils.remove(floatArray1, (-5583));
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -5583, Length: 0
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1.1], 0)           = []
 * ArrayUtils.remove([2.5, 6.0], 0)      = [6.0]
 * ArrayUtils.remove([2.5, 6.0], 1)      = [2.5]
 * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static byte[] removeElement(byte[] array, byte element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test4691488() throws Throwable {
    byte[] byteArray0 = new byte[4];
    byteArray0[1] = (byte) 48;
    byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte) 48);
    assertArrayEquals(new byte[] { (byte) 0, (byte) 0, (byte) 0 }, byteArray1);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)        = null
 * ArrayUtils.removeElement([], 1)          = []
 * ArrayUtils.removeElement([1], 0)         = [1]
 * ArrayUtils.removeElement([1, 0], 0)      = [1]
 * ArrayUtils.removeElement([1, 0, 1], 1)   = [0, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"@SuppressWarnings(""unchecked"")
public static <T> T[] remove(T[] array, int index) {
    return (T[]) remove((Object) array, index);
}","public void test4701490() throws Throwable {
    String[] stringArray0 = new String[0];
    // Undeclared exception!
    try {
        ArrayUtils.remove(stringArray0, (-1));
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1, Length: 0
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([""a""], 0)           = []
 * ArrayUtils.remove([""a"", ""b""], 0)      = [""b""]
 * ArrayUtils.remove([""a"", ""b""], 1)      = [""a""]
 * ArrayUtils.remove([""a"", ""b"", ""c""], 1) = [""a"", ""c""]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static double[] add(double[] array, double element) {
    double[] newArray = (double[]) copyArrayGrow1(array, Double.TYPE);
    newArray[newArray.length - 1] = element;
    return newArray;
}","public void test4711491() throws Throwable {
    double[] doubleArray0 = new double[3];
    double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-1.0));
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, (-1.0) }, doubleArray1, 0.01);
}","/**
 * <p>Copies the given array and adds the given element at the end of the new array.</p>
 *
 * <p>The new array contains the same elements of the input
 * array plus the given element in the last position. The component type of
 * the new array is the same as that of the input array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0)   = [0]
 * ArrayUtils.add([1], 0)    = [1, 0]
 * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
 * </pre>
 *
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */"
"public static boolean isEquals(Object array1, Object array2) {
    return new EqualsBuilder().append(array1, array2).isEquals();
}","public void test4721492() throws Throwable {
    Integer integer0 = new Integer((byte) 0);
    boolean boolean0 = ArrayUtils.isEquals(integer0, integer0);
    assertTrue(boolean0);
}","/**
 * <p>Compares two arrays, using equals(), handling multi-dimensional arrays
 * correctly.</p>
 *
 * <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>
 *
 * @param array1  the left hand array to compare, may be <code>null</code>
 * @param array2  the right hand array to compare, may be <code>null</code>
 * @return <code>true</code> if the arrays are equal
 */"
"public static byte[] add(byte[] array, int index, byte element) {
    return (byte[]) add(array, index, Byte.valueOf(element), Byte.TYPE);
}","public void test4731493() throws Throwable {
    byte[] byteArray0 = new byte[2];
    // Undeclared exception!
    try {
        ArrayUtils.add(byteArray0, (int) (byte) 6, (byte) 116);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 6, Length: 2
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1], 0, 2)         = [2, 1]
 * ArrayUtils.add([2, 6], 2, 3)      = [2, 6, 3]
 * ArrayUtils.add([2, 6], 0, 1)      = [1, 2, 6]
 * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static char[] add(char[] array, int index, char element) {
    return (char[]) add(array, index, Character.valueOf(element), Character.TYPE);
}","public void test4741494() throws Throwable {
    char[] charArray0 = new char[9];
    // Undeclared exception!
    try {
        ArrayUtils.add(charArray0, (-1), 'i');
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1, Length: 9
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0, 'a')            = ['a']
 * ArrayUtils.add(['a'], 0, 'b')           = ['b', 'a']
 * ArrayUtils.add(['a', 'b'], 0, 'c')      = ['c', 'a', 'b']
 * ArrayUtils.add(['a', 'b'], 1, 'k')      = ['a', 'k', 'b']
 * ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c']
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static int[] add(int[] array, int index, int element) {
    return (int[]) add(array, index, Integer.valueOf(element), Integer.TYPE);
}","public void test4751495() throws Throwable {
    int[] intArray0 = new int[7];
    // Undeclared exception!
    try {
        ArrayUtils.add(intArray0, (-1), (-1));
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1, Length: 7
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1], 0, 2)         = [2, 1]
 * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]
 * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]
 * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static short[] add(short[] array, short element) {
    short[] newArray = (short[]) copyArrayGrow1(array, Short.TYPE);
    newArray[newArray.length - 1] = element;
    return newArray;
}","public void test4761496() throws Throwable {
    short[] shortArray0 = ArrayUtils.add((short[]) null, (short) 365);
    assertNotNull(shortArray0);
}","/**
 * <p>Copies the given array and adds the given element at the end of the new array.</p>
 *
 * <p>The new array contains the same elements of the input
 * array plus the given element in the last position. The component type of
 * the new array is the same as that of the input array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0)   = [0]
 * ArrayUtils.add([1], 0)    = [1, 0]
 * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
 * </pre>
 *
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */"
"public static int[] removeElement(int[] array, int element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test4771498() throws Throwable {
    int[] intArray0 = new int[9];
    intArray0[1] = (int) '0';
    int[] intArray1 = ArrayUtils.removeElement(intArray0, 48);
    assertArrayEquals(new int[] { 0, 48, 0, 0, 0, 0, 0, 0, 0 }, intArray0);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 1)      = null
 * ArrayUtils.removeElement([], 1)        = []
 * ArrayUtils.removeElement([1], 2)       = [1]
 * ArrayUtils.removeElement([1, 3], 1)    = [3]
 * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"public static boolean[] add(boolean[] array, int index, boolean element) {
    return (boolean[]) add(array, index, Boolean.valueOf(element), Boolean.TYPE);
}","public void test4781500() throws Throwable {
    // Undeclared exception!
    try {
        ArrayUtils.add((boolean[]) null, 416, true);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 416, Length: 0
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0, true)          = [true]
 * ArrayUtils.add([true], 0, false)       = [false, true]
 * ArrayUtils.add([false], 1, true)       = [false, true]
 * ArrayUtils.add([true, false], 1, true) = [true, true, false]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static int lastIndexOf(boolean[] array, boolean valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test4791501() throws Throwable {
    boolean[] booleanArray0 = new boolean[9];
    int int0 = ArrayUtils.lastIndexOf(booleanArray0, true);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) if
 * <code>null</code> array input.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static char[] removeElement(char[] array, char element) {
    int index = indexOf(array, element);
    if (index == INDEX_NOT_FOUND) {
        return clone(array);
    }
    return remove(array, index);
}","public void test4801502() throws Throwable {
    char[] charArray0 = ArrayUtils.removeElement((char[]) null, ')');
    assertNull(charArray0);
}","/**
 * <p>Removes the first occurrence of the specified element from the
 * specified array. All subsequent elements are shifted to the left
 * (substracts one from their indices). If the array doesn't contains
 * such an element, no elements are removed from the array.</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the first occurrence of the specified element. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <pre>
 * ArrayUtils.removeElement(null, 'a')            = null
 * ArrayUtils.removeElement([], 'a')              = []
 * ArrayUtils.removeElement(['a'], 'b')           = ['a']
 * ArrayUtils.removeElement(['a', 'b'], 'a')      = ['b']
 * ArrayUtils.removeElement(['a', 'b', 'a'], 'a') = ['b', 'a']
 * </pre>
 *
 * @param array  the array to remove the element from, may be <code>null</code>
 * @param element  the element to be removed
 * @return A new array containing the existing elements except the first
 *         occurrence of the specified element.
 * @since 2.1
 */"
"// Basic methods handling multi-dimensional arrays
//-----------------------------------------------------------------------
/**
 * <p>Outputs an array as a String, treating <code>null</code> as an empty array.</p>
 *
 * <p>Multi-dimensional arrays are handled correctly, including
 * multi-dimensional primitive arrays.</p>
 *
 * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>
 *
 * @param array  the array to get a toString for, may be <code>null</code>
 * @return a String representation of the array, '{}' if null array input
 */
public static String toString(Object array) {
    return toString(array, ""{}"");
}","public void test4811503() throws Throwable {
    String string0 = ArrayUtils.toString((Object) """");
    assertEquals("""", string0);
}",""
"// short IndexOf
//-----------------------------------------------------------------------
/**
 * <p>Finds the index of the given value in the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */
public static int indexOf(short[] array, short valueToFind) {
    return indexOf(array, valueToFind, 0);
}","public void test4821504() throws Throwable {
    short[] shortArray0 = new short[2];
    int int0 = ArrayUtils.indexOf(shortArray0, (short) 2);
    assertEquals((-1), int0);
}",""
"public static int lastIndexOf(long[] array, long valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test4831505() throws Throwable {
    long[] longArray0 = new long[9];
    int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short) 3);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static long[] remove(long[] array, int index) {
    return (long[]) remove((Object) array, index);
}","public void test4841506() throws Throwable {
    // Undeclared exception!
    try {
        ArrayUtils.remove((long[]) null, 2147042647);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2147042647, Length: 0
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1], 0)         = []
 * ArrayUtils.remove([2, 6], 0)      = [6]
 * ArrayUtils.remove([2, 6], 1)      = [2]
 * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static int lastIndexOf(double[] array, double valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test4851507() throws Throwable {
    double[] doubleArray0 = new double[2];
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static boolean[] remove(boolean[] array, int index) {
    return (boolean[]) remove((Object) array, index);
}","public void test4861508() throws Throwable {
    boolean[] booleanArray0 = new boolean[3];
    boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);
    assertEquals(2, booleanArray1.length);
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([true], 0)              = []
 * ArrayUtils.remove([true, false], 0)       = [false]
 * ArrayUtils.remove([true, false], 1)       = [true]
 * ArrayUtils.remove([true, true, false], 1) = [true, false]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static int lastIndexOf(float[] array, float valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test4871509() throws Throwable {
    float[] floatArray0 = new float[3];
    int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F));
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static double[] remove(double[] array, int index) {
    return (double[]) remove((Object) array, index);
}","public void test4881510() throws Throwable {
    double[] doubleArray0 = new double[2];
    // Undeclared exception!
    try {
        ArrayUtils.remove(doubleArray0, 1742);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1742, Length: 2
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1.1], 0)           = []
 * ArrayUtils.remove([2.5, 6.0], 0)      = [6.0]
 * ArrayUtils.remove([2.5, 6.0], 1)      = [2.5]
 * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static long[] add(long[] array, long element) {
    long[] newArray = (long[]) copyArrayGrow1(array, Long.TYPE);
    newArray[newArray.length - 1] = element;
    return newArray;
}","public void test4891511() throws Throwable {
    long[] longArray0 = new long[2];
    long[] longArray1 = ArrayUtils.add(longArray0, (long) (short) 0);
    assertEquals(3, longArray1.length);
}","/**
 * <p>Copies the given array and adds the given element at the end of the new array.</p>
 *
 * <p>The new array contains the same elements of the input
 * array plus the given element in the last position. The component type of
 * the new array is the same as that of the input array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0)   = [0]
 * ArrayUtils.add([1], 0)    = [1, 0]
 * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
 * </pre>
 *
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */"
"public static int lastIndexOf(double[] array, double valueToFind, double tolerance) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);
}","public void test4901512() throws Throwable {
    double[] doubleArray0 = new double[6];
    int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 3313, 538.76239278);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value within a given tolerance in the array.
 * This method will return the index of the last value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static float[] add(float[] array, int index, float element) {
    return (float[]) add(array, index, Float.valueOf(element), Float.TYPE);
}","public void test4911513() throws Throwable {
    float[] floatArray0 = new float[1];
    // Undeclared exception!
    try {
        ArrayUtils.add(floatArray0, (-1278), 0.0F);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -1278, Length: 1
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1.1f], 0, 2.2f)               = [2.2f, 1.1f]
 * ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        = [2.3f, 6.4f, 10.5f]
 * ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        = [-4.8f, 2.6f, 6.7f]
 * ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static byte[] add(byte[] array, byte element) {
    byte[] newArray = (byte[]) copyArrayGrow1(array, Byte.TYPE);
    newArray[newArray.length - 1] = element;
    return newArray;
}","public void test4921514() throws Throwable {
    byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte) (-3));
    assertArrayEquals(new byte[] { (byte) (-3) }, byteArray0);
}","/**
 * <p>Copies the given array and adds the given element at the end of the new array.</p>
 *
 * <p>The new array contains the same elements of the input
 * array plus the given element in the last position. The component type of
 * the new array is the same as that of the input array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0)   = [0]
 * ArrayUtils.add([1], 0)    = [1, 0]
 * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
 * </pre>
 *
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */"
"public static double[] add(double[] array, int index, double element) {
    return (double[]) add(array, index, Double.valueOf(element), Double.TYPE);
}","public void test4941517() throws Throwable {
    double[] doubleArray0 = new double[3];
    double[] doubleArray1 = ArrayUtils.add(doubleArray0, 2, 0.0);
    assertArrayEquals(new double[] { 0.0, 0.0, 0.0, 0.0 }, doubleArray1, 0.01);
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1.1], 0, 2.2)              = [2.2, 1.1]
 * ArrayUtils.add([2.3, 6.4], 2, 10.5)        = [2.3, 6.4, 10.5]
 * ArrayUtils.add([2.6, 6.7], 0, -4.8)        = [-4.8, 2.6, 6.7]
 * ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static char[] remove(char[] array, int index) {
    return (char[]) remove((Object) array, index);
}","public void test4951518() throws Throwable {
    char[] charArray0 = new char[9];
    // Undeclared exception!
    try {
        ArrayUtils.remove(charArray0, (-2879));
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -2879, Length: 9
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove(['a'], 0)           = []
 * ArrayUtils.remove(['a', 'b'], 0)      = ['b']
 * ArrayUtils.remove(['a', 'b'], 1)      = ['a']
 * ArrayUtils.remove(['a', 'b', 'c'], 1) = ['a', 'c']
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static int lastIndexOf(short[] array, short valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test4961519() throws Throwable {
    short[] shortArray0 = new short[3];
    int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) 0);
    assertEquals(2, int0);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static boolean contains(long[] array, long valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test4971520() throws Throwable {
    long[] longArray0 = new long[2];
    boolean boolean0 = ArrayUtils.contains(longArray0, (long) (-1));
    assertFalse(boolean0);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static int lastIndexOf(Object[] array, Object objectToFind) {
    return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);
}","public void test4981521() throws Throwable {
    Boolean[] booleanArray0 = new Boolean[3];
    int int0 = ArrayUtils.lastIndexOf((Object[]) booleanArray0, (Object) ""', is neither of type Map.Entry nor an Array"");
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given object within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param objectToFind  the object to find, may be <code>null</code>
 * @return the last index of the object within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static short[] remove(short[] array, int index) {
    return (short[]) remove((Object) array, index);
}","public void test5001523() throws Throwable {
    // Undeclared exception!
    try {
        ArrayUtils.remove((short[]) null, (int) (short) (-467));
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -467, Length: 0
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Removes the element at the specified position from the specified array.
 * All subsequent elements are shifted to the left (substracts one from
 * their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array except the element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException
 * will be thrown, because in that case no valid index can be specified.</p>
 *
 * <pre>
 * ArrayUtils.remove([1], 0)         = []
 * ArrayUtils.remove([2, 6], 0)      = [6]
 * ArrayUtils.remove([2, 6], 1)      = [2]
 * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]
 * </pre>
 *
 * @param array  the array to remove the element from, may not be <code>null</code>
 * @param index  the position of the element to be removed
 * @return A new array containing the existing elements except the element
 *         at the specified position.
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index >= array.length), or if the array is <code>null</code>.
 * @since 2.1
 */"
"public static int[] add(int[] array, int element) {
    int[] newArray = (int[]) copyArrayGrow1(array, Integer.TYPE);
    newArray[newArray.length - 1] = element;
    return newArray;
}","public void test5011524() throws Throwable {
    int[] intArray0 = new int[7];
    int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte) (-121));
    assertArrayEquals(new int[] { 0, 0, 0, 0, 0, 0, 0, (-121) }, intArray1);
}","/**
 * <p>Copies the given array and adds the given element at the end of the new array.</p>
 *
 * <p>The new array contains the same elements of the input
 * array plus the given element in the last position. The component type of
 * the new array is the same as that of the input array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0)   = [0]
 * ArrayUtils.add([1], 0)    = [1, 0]
 * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
 * </pre>
 *
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */"
"public static long[] add(long[] array, int index, long element) {
    return (long[]) add(array, index, Long.valueOf(element), Long.TYPE);
}","public void test5021525() throws Throwable {
    long[] longArray0 = new long[0];
    // Undeclared exception!
    try {
        ArrayUtils.add(longArray0, 2790, (-1L));
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2790, Length: 0
        //
        verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
    }
}","/**
 * <p>Inserts the specified element at the specified position in the array.
 * Shifts the element currently at that position (if any) and any subsequent
 * elements to the right (adds one to their indices).</p>
 *
 * <p>This method returns a new array with the same elements of the input
 * array plus the given element on the specified position. The component
 * type of the returned array is always the same as that of the input
 * array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add([1L], 0, 2L)           = [2L, 1L]
 * ArrayUtils.add([2L, 6L], 2, 10L)      = [2L, 6L, 10L]
 * ArrayUtils.add([2L, 6L], 0, -4L)      = [-4L, 2L, 6L]
 * ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L]
 * </pre>
 *
 * @param array  the array to add the element to, may be <code>null</code>
 * @param index  the position of the new object
 * @param element  the object to add
 * @return A new array containing the existing elements and the new element
 * @throws IndexOutOfBoundsException if the index is out of range
 * (index < 0 || index > array.length).
 */"
"public static boolean contains(float[] array, float valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test5031526() throws Throwable {
    float[] floatArray0 = new float[1];
    boolean boolean0 = ArrayUtils.contains(floatArray0, (-1372.3595F));
    assertFalse(boolean0);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static char[] addAll(char[] array1, char... array2) {
    if (array1 == null) {
        return clone(array2);
    } else if (array2 == null) {
        return clone(array1);
    }
    char[] joinedArray = new char[array1.length + array2.length];
    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
    return joinedArray;
}","public void test5041527() throws Throwable {
    char[] charArray0 = ArrayUtils.add((char[]) null, 'D');
    char[] charArray1 = ArrayUtils.addAll(charArray0, (char[]) null);
    assertArrayEquals(new char[] { 'D' }, charArray1);
}","/**
 * <p>Adds all the elements of the given arrays into a new array.</p>
 * <p>The new array contains all of the element of <code>array1</code> followed
 * by all of the elements <code>array2</code>. When an array is returned, it is always
 * a new array.</p>
 *
 * <pre>
 * ArrayUtils.addAll(array1, null)   = cloned copy of array1
 * ArrayUtils.addAll(null, array2)   = cloned copy of array2
 * ArrayUtils.addAll([], [])         = []
 * </pre>
 *
 * @param array1  the first array whose elements are added to the new array.
 * @param array2  the second array whose elements are added to the new array.
 * @return The new char[] array.
 * @since 2.1
 */"
"public static boolean contains(boolean[] array, boolean valueToFind) {
    return indexOf(array, valueToFind) != INDEX_NOT_FOUND;
}","public void test5051529() throws Throwable {
    boolean[] booleanArray0 = new boolean[4];
    boolean boolean0 = ArrayUtils.contains(booleanArray0, false);
    assertTrue(boolean0);
}","/**
 * <p>Checks if the value is in the given array.</p>
 *
 * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>
 *
 * @param array  the array to search through
 * @param valueToFind  the value to find
 * @return <code>true</code> if the array contains the object
 */"
"public static int lastIndexOf(char[] array, char valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test5061530() throws Throwable {
    char[] charArray0 = new char[1];
    int int0 = ArrayUtils.lastIndexOf(charArray0, 'j');
    assertEquals((-1), int0);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 * @since 2.1
 */"
"public static float[] add(float[] array, float element) {
    float[] newArray = (float[]) copyArrayGrow1(array, Float.TYPE);
    newArray[newArray.length - 1] = element;
    return newArray;
}","public void test5071531() throws Throwable {
    float[] floatArray0 = new float[0];
    float[] floatArray1 = ArrayUtils.add(floatArray0, (float) (-1));
    assertArrayEquals(new float[] { (-1.0F) }, floatArray1, 0.01F);
}","/**
 * <p>Copies the given array and adds the given element at the end of the new array.</p>
 *
 * <p>The new array contains the same elements of the input
 * array plus the given element in the last position. The component type of
 * the new array is the same as that of the input array.</p>
 *
 * <p>If the input array is <code>null</code>, a new one element array is returned
 *  whose component type is the same as the element.</p>
 *
 * <pre>
 * ArrayUtils.add(null, 0)   = [0]
 * ArrayUtils.add([1], 0)    = [1, 0]
 * ArrayUtils.add([1, 0], 1) = [1, 0, 1]
 * </pre>
 *
 * @param array  the array to copy and add the element to, may be <code>null</code>
 * @param element  the object to add at the last index of the new array
 * @return A new array containing the existing elements plus the new element
 * @since 2.1
 */"
"public static int lastIndexOf(int[] array, int valueToFind) {
    return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
}","public void test5081532() throws Throwable {
    int[] intArray0 = new int[2];
    int int0 = ArrayUtils.lastIndexOf(intArray0, 0);
    assertEquals(1, int0);
}","/**
 * <p>Finds the last index of the given value within the array.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to travers backwords looking for the object, may be <code>null</code>
 * @param valueToFind  the object to find
 * @return the last index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
"public static int indexOf(double[] array, double valueToFind, double tolerance) {
    return indexOf(array, valueToFind, 0, tolerance);
}","public void test5091533() throws Throwable {
    int int0 = ArrayUtils.indexOf((double[]) null, 1.0, (double) (short) 0);
    assertEquals((-1), int0);
}","/**
 * <p>Finds the index of the given value within a given tolerance in the array.
 * This method will return the index of the first value which falls between the region
 * defined by valueToFind - tolerance and valueToFind + tolerance.</p>
 *
 * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>
 *
 * @param array  the array to search through for the object, may be <code>null</code>
 * @param valueToFind  the value to find
 * @param tolerance tolerance of the search
 * @return the index of the value within the array,
 *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input
 */"
