focal_method,test_prefix,docstring
"public boolean equals(StrBuilder other) {
    if (this == other) {
        return true;
    }
    if (this.size != other.size) {
        return false;
    }
    char[] thisBuf = this.buffer;
    char[] otherBuf = other.buffer;
    for (int i = size - 1; i >= 0; i--) {
        if (thisBuf[i] != otherBuf[i]) {
            return false;
        }
    }
    return true;
}","public void test0022() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = new StrBuilder("""");
    strBuilder1.append((Object) strBuilder0);
    strBuilder0.equals(strBuilder1);
}","/**
 * Checks the contents of this builder against another to see if they
 * contain the same character content.
 *
 * @param other  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */"
"public int indexOf(String str, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (str == null || startIndex >= size) {
        return -1;
    }
    int strLen = str.length();
    if (strLen == 1) {
        return indexOf(str.charAt(0), startIndex);
    }
    if (strLen == 0) {
        return startIndex;
    }
    if (strLen > size) {
        return -1;
    }
    char[] thisBuf = buffer;
    int len = size - strLen + 1;
    outer: for (int i = startIndex; i < len; i++) {
        for (int j = 0; j < strLen; j++) {
            if (str.charAt(j) != thisBuf[i + j]) {
                continue outer;
            }
        }
        return i;
    }
    return -1;
}","public void test0033() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1263));
    strBuilder0.indexOf("""", 3178);
}","/**
 * Searches the string builder to find the first reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the string, or -1 if not found
 */"
"public String midString(int index, int length) {
    if (index < 0) {
        index = 0;
    }
    if (length <= 0 || index >= size) {
        return """";
    }
    if (size <= index + length) {
        return new String(buffer, index, size - index);
    } else {
        return new String(buffer, index, length);
    }
}","public void test0044() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.appendPadding(1, 'e');
    strBuilder1.midString(1, 1);
}","/**
 * Extracts some characters from the middle of the string builder without
 * throwing an exception.
 * <p>
 * This method extracts <code>length</code> characters from the builder
 * at the specified index.
 * If the index is negative it is treated as zero.
 * If the index is greater than the builder size, it is treated as the builder size.
 * If the length is negative, the empty string is returned.
 * If insufficient characters are available in the builder, as much as possible is returned.
 * Thus the returned string may be shorter than the length requested.
 *
 * @param index  the index to start at, negative means zero
 * @param length  the number of characters to extract, negative returns empty string
 * @return the new string
 */"
"public String midString(int index, int length) {
    if (index < 0) {
        index = 0;
    }
    if (length <= 0 || index >= size) {
        return """";
    }
    if (size <= index + length) {
        return new String(buffer, index, size - index);
    } else {
        return new String(buffer, index, length);
    }
}","public void test0055() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    strBuilder0.midString((-3277), 0);
}","/**
 * Extracts some characters from the middle of the string builder without
 * throwing an exception.
 * <p>
 * This method extracts <code>length</code> characters from the builder
 * at the specified index.
 * If the index is negative it is treated as zero.
 * If the index is greater than the builder size, it is treated as the builder size.
 * If the length is negative, the empty string is returned.
 * If insufficient characters are available in the builder, as much as possible is returned.
 * Thus the returned string may be shorter than the length requested.
 *
 * @param index  the index to start at, negative means zero
 * @param length  the number of characters to extract, negative returns empty string
 * @return the new string
 */"
"public String midString(int index, int length) {
    if (index < 0) {
        index = 0;
    }
    if (length <= 0 || index >= size) {
        return """";
    }
    if (size <= index + length) {
        return new String(buffer, index, size - index);
    } else {
        return new String(buffer, index, length);
    }
}","public void test0066() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    strBuilder0.midString(0, 44);
}","/**
 * Extracts some characters from the middle of the string builder without
 * throwing an exception.
 * <p>
 * This method extracts <code>length</code> characters from the builder
 * at the specified index.
 * If the index is negative it is treated as zero.
 * If the index is greater than the builder size, it is treated as the builder size.
 * If the length is negative, the empty string is returned.
 * If insufficient characters are available in the builder, as much as possible is returned.
 * Thus the returned string may be shorter than the length requested.
 *
 * @param index  the index to start at, negative means zero
 * @param length  the number of characters to extract, negative returns empty string
 * @return the new string
 */"
"public String rightString(int length) {
    if (length <= 0) {
        return """";
    } else if (length >= size) {
        return new String(buffer, 0, size);
    } else {
        return new String(buffer, size - length, length);
    }
}","public void test0077() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.rightString(0);
}","/**
 * Extracts the rightmost characters from the string builder without
 * throwing an exception.
 * <p>
 * This method extracts the right <code>length</code> characters from
 * the builder. If this many characters are not available, the whole
 * builder is returned. Thus the returned string may be shorter than the
 * length requested.
 *
 * @param length  the number of characters to extract, negative returns empty string
 * @return the new string
 */"
"public String leftString(int length) {
    if (length <= 0) {
        return """";
    } else if (length >= size) {
        return new String(buffer, 0, size);
    } else {
        return new String(buffer, 0, length);
    }
}","public void test0088() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-284));
    strBuilder0.leftString((-284));
}","/**
 * Extracts the leftmost characters from the string builder without
 * throwing an exception.
 * <p>
 * This method extracts the left <code>length</code> characters from
 * the builder. If this many characters are not available, the whole
 * builder is returned. Thus the returned string may be shorter than the
 * length requested.
 *
 * @param length  the number of characters to extract, negative returns empty string
 * @return the new string
 */"
"public boolean endsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    int pos = size - len;
    for (int i = 0; i < len; i++, pos++) {
        if (buffer[pos] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test0099() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1263));
    StrBuilder strBuilder1 = strBuilder0.setLength(102);
    strBuilder1.append((float) (-1263));
    strBuilder1.insert(102, ""I3^JHS%Udtz(zIvr"");
    strBuilder0.endsWith(""I3^JHS%Udtz(zIvr"");
}","/**
 * Checks whether this builder ends with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder ends with the string
 */"
"//-----------------------------------------------------------------------
/**
 * Checks whether this builder starts with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder starts with the string
 */
public boolean startsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    for (int i = 0; i < len; i++) {
        if (buffer[i] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test01010() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""*mn;Z\""Up|q4!4`*<C<"");
    strBuilder0.startsWith(""{"");
}",""
"public StrBuilder replaceFirst(String searchStr, String replaceStr) {
    int searchLen = (searchStr == null ? 0 : searchStr.length());
    if (searchLen > 0) {
        int index = indexOf(searchStr, 0);
        if (index >= 0) {
            int replaceLen = (replaceStr == null ? 0 : replaceStr.length());
            replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);
        }
    }
    return this;
}","public void test01111() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    Integer integer0 = new Integer(3);
    StrBuilder strBuilder1 = strBuilder0.append((Object) integer0);
    strBuilder0.appendNewLine();
    StrBuilder strBuilder2 = strBuilder0.reverse();
    strBuilder1.append(strBuilder2, 3, 3);
    strBuilder1.replaceFirst(""2000000000@regetnI.gnal.avaj000"", ""}x"");
}","/**
 * Replaces the first instance of the search string with the replace string.
 *
 * @param searchStr  the search string, null causes no action to occur
 * @param replaceStr  the replace string, null is equivalent to an empty string
 * @return this, to enable chaining
 */"
"public StrBuilder replaceFirst(char search, char replace) {
    if (search != replace) {
        for (int i = 0; i < size; i++) {
            if (buffer[i] == search) {
                buffer[i] = replace;
                break;
            }
        }
    }
    return this;
}","public void test01212() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.replaceFirst('F', 'H');
}","/**
 * Replaces the first instance of the search character with the
 * replace character in the builder.
 *
 * @param search  the search character
 * @param replace  the replace character
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Replaces the search character with the replace character
 * throughout the builder.
 *
 * @param search  the search character
 * @param replace  the replace character
 * @return this, to enable chaining
 */
public StrBuilder replaceAll(char search, char replace) {
    if (search != replace) {
        for (int i = 0; i < size; i++) {
            if (buffer[i] == search) {
                buffer[i] = replace;
            }
        }
    }
    return this;
}","public void test01313() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    strBuilder0.replaceAll('q', '^');
}",""
"public StrBuilder deleteFirst(String str) {
    int len = (str == null ? 0 : str.length());
    if (len > 0) {
        int index = indexOf(str, 0);
        if (index >= 0) {
            deleteImpl(index, index + len, len);
        }
    }
    return this;
}","public void test01414() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    Integer integer0 = new Integer(3);
    strBuilder0.append((Object) integer0);
    Object[] objectArray0 = new Object[6];
    strBuilder0.appendWithSeparators(objectArray0, ""o8<._Rve7ba"");
    strBuilder0.deleteFirst(""o8<._Rve7ba"");
}","/**
 * Deletes the string wherever it occurs in the builder.
 *
 * @param str  the string to delete, null causes no action
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Deletes the string wherever it occurs in the builder.
 *
 * @param str  the string to delete, null causes no action
 * @return this, to enable chaining
 */
public StrBuilder deleteAll(String str) {
    int len = (str == null ? 0 : str.length());
    if (len > 0) {
        int index = indexOf(str, 0);
        while (index >= 0) {
            deleteImpl(index, index + len, len);
            index = indexOf(str, index);
        }
    }
    return this;
}","public void test01515() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""1B1/lA%8;b"");
    strBuilder0.deleteAll(""/"");
}",""
"public StrBuilder insert(int index, char[] chars, int offset, int length) {
    validateIndex(index);
    if (chars == null) {
        return insert(index, nullText);
    }
    if (offset < 0 || offset > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid offset: "" + offset);
    }
    if (length < 0 || offset + length > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);
    }
    if (length > 0) {
        ensureCapacity(size + length);
        System.arraycopy(buffer, index, buffer, index + length, size - index);
        System.arraycopy(chars, offset, buffer, index, length);
        size += length;
    }
    return this;
}","public void test01616() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[0];
    strBuilder0.insert(0, charArray0, 0, 0);
}","/**
 * Inserts part of the character array into this builder.
 * Inserting null will use the stored null text value.
 *
 * @param index  the index to add at, must be valid
 * @param chars  the char array to insert
 * @param offset  the offset into the character array to start at, must be valid
 * @param length  the length of the character array part to copy, must be positive
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if any index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Appends the pad character to the builder the specified number of times.
 *
 * @param length  the length to append, negative means no append
 * @param padChar  the character to append
 * @return this, to enable chaining
 */
public StrBuilder appendPadding(int length, char padChar) {
    if (length >= 0) {
        ensureCapacity(size + length);
        for (int i = 0; i < length; i++) {
            buffer[size++] = padChar;
        }
    }
    return this;
}","public void test01717() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    strBuilder0.appendPadding(0, 'A');
}",""
"public StrBuilder append(char[] chars, int startIndex, int length) {
    if (chars == null) {
        return appendNull();
    }
    if (startIndex < 0 || startIndex > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid startIndex: "" + length);
    }
    if (length < 0 || (startIndex + length) > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);
    }
    if (length > 0) {
        int len = length();
        ensureCapacity(len + length);
        System.arraycopy(chars, startIndex, buffer, len, length);
        size += length;
    }
    return this;
}","public void test01818() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("")P2?~ !DCD)@"");
    char[] charArray0 = new char[5];
    // Undeclared exception!
    try {
        strBuilder0.append(charArray0, 5, 5);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // Invalid length: 5
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends a char array to the string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param chars  the char array to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */"
"public char[] getChars(char[] destination) {
    int len = length();
    if (destination == null || destination.length < len) {
        destination = new char[len];
    }
    System.arraycopy(buffer, 0, destination, 0, len);
    return destination;
}","public void test01919() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[0];
    strBuilder0.getChars(charArray0);
}","/**
 * Copies the character array into the specified array.
 *
 * @param destination  the destination array, null will cause an array to be created
 * @return the input array, unless that was null or too small
 */"
"public StrBuilder deleteCharAt(int index) {
    if (index < 0 || index >= size) {
        throw new StringIndexOutOfBoundsException(index);
    }
    deleteImpl(index, index + 1, 1);
    return this;
}","public void test02020() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    // Undeclared exception!
    try {
        strBuilder0.deleteCharAt(2);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 2
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Deletes the character at the specified index.
 *
 * @see #charAt(int)
 * @see #setCharAt(int, char)
 * @param index  the index to delete
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StrBuilder setCharAt(int index, char ch) {
    if (index < 0 || index >= length()) {
        throw new StringIndexOutOfBoundsException(index);
    }
    buffer[index] = ch;
    return this;
}","public void test02121() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    // Undeclared exception!
    try {
        strBuilder0.setCharAt(0, '8');
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 0
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Sets the character at the specified index.
 *
 * @see #charAt(int)
 * @see #deleteCharAt(int)
 * @param index  the index to set
 * @param ch  the new character
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the character at the specified index.
 *
 * @see #setCharAt(int, char)
 * @see #deleteCharAt(int)
 * @param index  the index to retrieve, must be valid
 * @return the character at the index
 * @throws IndexOutOfBoundsException if the index is invalid
 */
public char charAt(int index) {
    if (index < 0 || index >= length()) {
        throw new StringIndexOutOfBoundsException(index);
    }
    return buffer[index];
}","public void test02222() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    // Undeclared exception!
    try {
        strBuilder0.charAt(0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 0
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}",""
"public StrBuilder minimizeCapacity() {
    if (buffer.length > length()) {
        char[] old = buffer;
        buffer = new char[length()];
        System.arraycopy(old, 0, buffer, 0, size);
    }
    return this;
}","public void test02323() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""sae|Wpu)I8nn#Y'#/"");
    StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null);
    strBuilder1.size = 2382;
    strBuilder1.minimizeCapacity();
}","/**
 * Minimizes the capacity to the actual length of the string.
 *
 * @return this, to enable chaining
 */"
"protected void validateIndex(int index) {
    if (index < 0 || index > size) {
        throw new StringIndexOutOfBoundsException(index);
    }
}","public void test02525() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.appendPadding(1, 'e');
    strBuilder1.validateIndex(1);
}","/**
 * Validates parameters defining a single index in the builder.
 *
 * @param index  the index, must be valid
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public void getChars(int startIndex, int endIndex, char[] destination, int destinationIndex) {
    if (startIndex < 0) {
        throw new StringIndexOutOfBoundsException(startIndex);
    }
    if (endIndex < 0 || endIndex > length()) {
        throw new StringIndexOutOfBoundsException(endIndex);
    }
    if (startIndex > endIndex) {
        throw new StringIndexOutOfBoundsException(""end < start"");
    }
    System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);
}","public void test02626() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Mi-"");
    char[] charArray0 = new char[7];
    strBuilder0.getChars(0, 0, charArray0, 2);
}","/**
 * Copies the character array into the specified array.
 *
 * @param startIndex  first index to copy, inclusive, must be valid
 * @param endIndex  last index, exclusive, must be valid
 * @param destination  the destination array, must not be null or too small
 * @param destinationIndex  the index to start copying in destination
 * @throws NullPointerException if the array is null
 * @throws IndexOutOfBoundsException if any index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Validates parameters defining a range of the builder.
 *
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */
protected int validateRange(int startIndex, int endIndex) {
    if (startIndex < 0) {
        throw new StringIndexOutOfBoundsException(startIndex);
    }
    if (endIndex > size) {
        endIndex = size;
    }
    if (startIndex > endIndex) {
        throw new StringIndexOutOfBoundsException(""end < start"");
    }
    return endIndex;
}","public void test03131() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrMatcher$CharMatcher"");
    strBuilder0.validateRange(0, 0);
}",""
"//-----------------------------------------------------------------------
/**
 * Validates parameters defining a range of the builder.
 *
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */
protected int validateRange(int startIndex, int endIndex) {
    if (startIndex < 0) {
        throw new StringIndexOutOfBoundsException(startIndex);
    }
    if (endIndex > size) {
        endIndex = size;
    }
    if (startIndex > endIndex) {
        throw new StringIndexOutOfBoundsException(""end < start"");
    }
    return endIndex;
}","public void test03232() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.insert(0, 'y');
    strBuilder1.validateRange(0, 115);
}",""
"public StringBuffer toStringBuffer() {
    return new StringBuffer(size).append(buffer, 0, size);
}","public void test03333() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""K0#v9;k<Xe$f"");
    StrBuilder strBuilder1 = strBuilder0.clear();
    strBuilder1.toStringBuffer();
}","/**
 * Gets a StringBuffer version of the string builder, creating a
 * new instance each time the method is called.
 *
 * @return the builder as a StringBuffer
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a String version of the string builder, creating a new instance
 * each time the method is called.
 * <p>
 * Note that unlike StringBuffer, the string version returned is
 * independent of the string builder.
 *
 * @return the builder as a String
 */
public String toString() {
    return new String(buffer, 0, size);
}","public void test03434() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Object[] objectArray0 = new Object[7];
    objectArray0[1] = (Object) stringBuffer0;
    strBuilder0.appendWithSeparators(objectArray0, """");
    strBuilder0.toString();
}",""
"public String substring(int startIndex, int endIndex) {
    endIndex = validateRange(startIndex, endIndex);
    return new String(buffer, startIndex, endIndex - startIndex);
}","public void test03535() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""user.home"");
    strBuilder0.substring(3, 3786);
}","/**
 * Extracts a portion of this string builder as a string.
 * <p>
 * Note: This method treats an endIndex greater than the length of the
 * builder as equal to the length of the builder, and continues
 * without error, unlike StringBuffer or String.
 *
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public String substring(int startIndex, int endIndex) {
    endIndex = validateRange(startIndex, endIndex);
    return new String(buffer, startIndex, endIndex - startIndex);
}","public void test03636() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    strBuilder0.substring(0, 0);
}","/**
 * Extracts a portion of this string builder as a string.
 * <p>
 * Note: This method treats an endIndex greater than the length of the
 * builder as equal to the length of the builder, and continues
 * without error, unlike StringBuffer or String.
 *
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Extracts a portion of this string builder as a string.
 *
 * @param start  the start index, inclusive, must be valid
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */
public String substring(int start) {
    return substring(start, size);
}","public void test03737() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    strBuilder0.appendNewLine();
    strBuilder0.substring(0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test03838() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    strBuilder0.append((float) 0);
    strBuilder0.size();
}",""
"public StrBuilder setNullText(String nullText) {
    if (nullText != null && nullText.length() == 0) {
        nullText = null;
    }
    this.nullText = nullText;
    return this;
}","public void test03939() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""_"");
    char[] charArray0 = new char[0];
    strBuilder0.buffer = charArray0;
    strBuilder0.setNullText((String) null);
}","/**
 * Sets the text to be appended when null is added.
 *
 * @param nullText  the null text, null means no append
 * @return this, to enable chaining
 */"
"public StrBuilder setNewLineText(String newLine) {
    this.newLine = newLine;
    return this;
}","public void test04040() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""_"");
    char[] charArray0 = new char[0];
    strBuilder0.buffer = charArray0;
    strBuilder0.setNewLineText(""_"");
}","/**
 * Sets the text to be appended when a new line is added.
 *
 * @param newLine  the new line text, null means use system default
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Reverses the string builder placing each character in the opposite index.
 *
 * @return this, to enable chaining
 */
public StrBuilder reverse() {
    if (size == 0) {
        return this;
    }
    int half = size / 2;
    char[] buf = buffer;
    for (int leftIdx = 0, rightIdx = size - 1; leftIdx < half; leftIdx++, rightIdx--) {
        char swap = buf[leftIdx];
        buf[leftIdx] = buf[rightIdx];
        buf[rightIdx] = swap;
    }
    return this;
}","public void test04141() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    strBuilder0.minimizeCapacity();
    strBuilder0.reverse();
}",""
"public StrBuilder replaceFirst(char search, char replace) {
    if (search != replace) {
        for (int i = 0; i < size; i++) {
            if (buffer[i] == search) {
                buffer[i] = replace;
                break;
            }
        }
    }
    return this;
}","public void test04242() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
    strBuilder1.replaceFirst('I', 'G');
}","/**
 * Replaces the first instance of the search character with the
 * replace character in the builder.
 *
 * @param search  the search character
 * @param replace  the replace character
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Replaces all matches within the builder with the replace string.
 * <p>
 * Matchers can be used to perform advanced replace behaviour.
 * For example you could write a matcher to replace all occurances
 * where the character 'a' is followed by a number.
 *
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @param replaceStr  the replace string, null is equivalent to an empty string
 * @return this, to enable chaining
 */
public StrBuilder replaceAll(StrMatcher matcher, String replaceStr) {
    return replace(matcher, replaceStr, 0, size, -1);
}","public void test04343() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrMatcher strMatcher0 = StrMatcher.commaMatcher();
    StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
    strBuilder1.replaceAll(strMatcher0, ""HPYnN(^s5.lmA@"");
}",""
"// -----------------------------------------------------------------------
/**
 * Advanced search and replaces within the builder using a matcher.
 * <p>
 * Matchers can be used to perform advanced behaviour.
 * For example you could write a matcher to delete all occurances
 * where the character 'a' is followed by a number.
 *
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @param replaceStr  the string to replace the match with, null is a delete
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @param replaceCount  the number of times to replace, -1 for replace all
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if start index is invalid
 */
public StrBuilder replace(StrMatcher matcher, String replaceStr, int startIndex, int endIndex, int replaceCount) {
    endIndex = validateRange(startIndex, endIndex);
    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);
}","public void test04444() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1281));
    strBuilder0.setLength(1394);
    StrMatcher strMatcher0 = StrMatcher.spaceMatcher();
    strBuilder0.replace(strMatcher0, ""~t%,V7haV&N~FI"", 55, 1394, 55);
}",""
"// -----------------------------------------------------------------------
/**
 * Advanced search and replaces within the builder using a matcher.
 * <p>
 * Matchers can be used to perform advanced behaviour.
 * For example you could write a matcher to delete all occurances
 * where the character 'a' is followed by a number.
 *
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @param replaceStr  the string to replace the match with, null is a delete
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @param replaceCount  the number of times to replace, -1 for replace all
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if start index is invalid
 */
public StrBuilder replace(StrMatcher matcher, String replaceStr, int startIndex, int endIndex, int replaceCount) {
    endIndex = validateRange(startIndex, endIndex);
    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);
}","public void test04545() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrMatcher strMatcher0 = StrMatcher.tabMatcher();
    strBuilder0.minimizeCapacity();
    strBuilder0.replace(strMatcher0, """", 0, 1459, 0);
}",""
"public StrBuilder replace(int startIndex, int endIndex, String replaceStr) {
    endIndex = validateRange(startIndex, endIndex);
    int insertLen = (replaceStr == null ? 0 : replaceStr.length());
    replaceImpl(startIndex, endIndex, endIndex - startIndex, replaceStr, insertLen);
    return this;
}","public void test04646() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    strBuilder0.replace(0, 0, """");
}","/**
 * Replaces a portion of the string builder with another string.
 * The length of the inserted string does not have to match the removed length.
 *
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @param replaceStr  the string to replace with, null means delete range
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test04747() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""$CRTi8}l)"");
    strBuilder0.length();
}",""
"public int lastIndexOf(String str) {
    return lastIndexOf(str, size - 1);
}","public void test04848() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    char[] charArray0 = new char[5];
    strBuilder0.insert(0, charArray0);
    strBuilder0.lastIndexOf("""");
}","/**
 * Searches the string builder to find the last reference to the specified string.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @return the last index of the string, or -1 if not found
 */"
"public StrBuilder insert(int index, long value) {
    return insert(index, String.valueOf(value));
}","public void test04949() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.append(""F]L0WvI+um]W6"");
    strBuilder0.insert(2, 1L);
}","/**
 * Inserts the value into this builder.
 *
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StrBuilder insert(int index, float value) {
    return insert(index, String.valueOf(value));
}","public void test05050() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1298));
    strBuilder0.appendNewLine();
    strBuilder0.insert(1, (float) 1);
}","/**
 * Inserts the value into this builder.
 *
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public int indexOf(StrMatcher matcher, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (matcher == null || startIndex >= size) {
        return -1;
    }
    int len = size;
    char[] buf = buffer;
    for (int i = startIndex; i < len; i++) {
        if (matcher.isMatch(buf, i, startIndex, len) > 0) {
            return i;
        }
    }
    return -1;
}","public void test05151() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
    StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('w');
    strBuilder1.indexOf((StrMatcher) strMatcher_CharMatcher0, (-446));
}","/**
 * Searches the string builder using the matcher to find the first
 * match searching from the given index.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index matched, or -1 if not found
 */"
"public int indexOf(StrMatcher matcher) {
    return indexOf(matcher, 0);
}","public void test05252() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    strBuilder0.appendNewLine();
    StrMatcher strMatcher0 = StrMatcher.splitMatcher();
    strBuilder0.indexOf(strMatcher0);
}","/**
 * Searches the string builder using the matcher to find the first match.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @return the first index matched, or -1 if not found
 */"
"public int indexOf(StrMatcher matcher) {
    return indexOf(matcher, 0);
}","public void test05353() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Windows 9"");
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
    strBuilder0.indexOf(strMatcher0);
}","/**
 * Searches the string builder using the matcher to find the first match.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @return the first index matched, or -1 if not found
 */"
"public int indexOf(String str, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (str == null || startIndex >= size) {
        return -1;
    }
    int strLen = str.length();
    if (strLen == 1) {
        return indexOf(str.charAt(0), startIndex);
    }
    if (strLen == 0) {
        return startIndex;
    }
    if (strLen > size) {
        return -1;
    }
    char[] thisBuf = buffer;
    int len = size - strLen + 1;
    outer: for (int i = startIndex; i < len; i++) {
        for (int j = 0; j < strLen; j++) {
            if (str.charAt(j) != thisBuf[i + j]) {
                continue outer;
            }
        }
        return i;
    }
    return -1;
}","public void test05454() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid startIndex: "");
    strBuilder0.insert(0, (double) 0);
    strBuilder0.indexOf(""Invalid startIndex: "", (-872));
}","/**
 * Searches the string builder to find the first reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the string, or -1 if not found
 */"
"public int indexOf(String str) {
    return indexOf(str, 0);
}","public void test05555() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    Object[] objectArray0 = new Object[5];
    objectArray0[0] = (Object) strBuilder0;
    strBuilder0.appendWithSeparators(objectArray0, ""Mac OS X"");
    strBuilder0.indexOf(""Mac OS X"");
}","/**
 * Searches the string builder to find the first reference to the specified string.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @return the first index of the string, or -1 if not found
 */"
"public int indexOf(String str) {
    return indexOf(str, 0);
}","public void test05656() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.indexOf("""");
}","/**
 * Searches the string builder to find the first reference to the specified string.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @return the first index of the string, or -1 if not found
 */"
"public int indexOf(char ch, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (startIndex >= size) {
        return -1;
    }
    char[] thisBuf = buffer;
    for (int i = startIndex; i < size; i++) {
        if (thisBuf[i] == ch) {
            return i;
        }
    }
    return -1;
}","public void test05757() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    strBuilder0.indexOf('q', 0);
}","/**
 * Searches the string builder to find the first reference to the specified char.
 *
 * @param ch  the character to find
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the character, or -1 if not found
 */"
"public StrBuilder ensureCapacity(int capacity) {
    if (capacity > buffer.length) {
        char[] old = buffer;
        buffer = new char[capacity];
        System.arraycopy(old, 0, buffer, 0, size);
    }
    return this;
}","public void test05858() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.minimizeCapacity();
    strBuilder0.ensureCapacity(0);
}","/**
 * Checks the capacity and ensures that it is at least the size specified.
 *
 * @param capacity  the capacity to ensure
 * @return this, to enable chaining
 */"
"public StrBuilder deleteFirst(StrMatcher matcher) {
    return replace(matcher, null, 0, size, 1);
}","public void test05959() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
    StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
    strBuilder1.deleteFirst(strMatcher0);
}","/**
 * Deletes the first match within the builder using the specified matcher.
 * <p>
 * Matchers can be used to perform advanced deletion behaviour.
 * For example you could write a matcher to delete
 * where the character 'a' is followed by a number.
 *
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test06060() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    Object[] objectArray0 = new Object[7];
    objectArray0[1] = (Object) stringBuffer0;
    strBuilder0.appendWithSeparators(objectArray0, """");
    strBuilder0.deleteFirst((String) null);
    assertEquals(33, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test06161() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test06162() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.minimizeCapacity();
    strBuilder0.deleteFirst("""");
    assertEquals(0, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test06263() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.size = (-3018);
    StrBuilder strBuilder1 = strBuilder0.deleteFirst('=');
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test06364() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test06365() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrMatcher strMatcher0 = StrMatcher.charMatcher('i');
    strBuilder0.minimizeCapacity();
    StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
    assertEquals(0, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test06466() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""*lh#f>4"");
    StrBuilder strBuilder1 = strBuilder0.deleteAll(""5kI"");
    assertEquals(39, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test06467() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""*lh#f>4"");
    StrBuilder strBuilder1 = strBuilder0.deleteAll(""5kI"");
    assertEquals(7, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test06569() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
    StrBuilder strBuilder2 = strBuilder1.deleteAll("" ;Xw%#c{@u7-q"");
    assertEquals(0, strBuilder2.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test06671() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.minimizeCapacity();
    strBuilder0.clear();
    assertEquals(0, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test06772() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4"");
    char char0 = strBuilder0.charAt(0);
    assertEquals(1, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test06773() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4"");
    char char0 = strBuilder0.charAt(0);
    assertEquals(33, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the character at the specified index.
 *
 * @see #setCharAt(int, char)
 * @see #deleteCharAt(int)
 * @param index  the index to retrieve, must be valid
 * @return the character at the index
 * @throws IndexOutOfBoundsException if the index is invalid
 */
public char charAt(int index) {
    if (index < 0 || index >= length()) {
        throw new StringIndexOutOfBoundsException(index);
    }
    return buffer[index];
}","public void test06774() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4"");
    char char0 = strBuilder0.charAt(0);
    assertEquals('4', char0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the character at the specified index.
 *
 * @see #setCharAt(int, char)
 * @see #deleteCharAt(int)
 * @param index  the index to retrieve, must be valid
 * @return the character at the index
 * @throws IndexOutOfBoundsException if the index is invalid
 */
public char charAt(int index) {
    if (index < 0 || index >= length()) {
        throw new StringIndexOutOfBoundsException(index);
    }
    return buffer[index];
}","public void test06875() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""$>G*(EL"");
    char char0 = strBuilder0.charAt(2);
    assertEquals('G', char0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test06876() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""$>G*(EL"");
    char char0 = strBuilder0.charAt(2);
    assertEquals(39, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test06877() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""$>G*(EL"");
    char char0 = strBuilder0.charAt(2);
    assertEquals(7, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test06978() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""_"");
    assertEquals(33, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test06979() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""_"");
    char[] charArray0 = new char[0];
    strBuilder0.buffer = charArray0;
    strBuilder0.capacity();
    assertEquals(1, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test07081() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
    strBuilder1.appendFixedWidthPadRight((-2395), (-2395), 'y');
    assertEquals(0, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test07082() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
    strBuilder1.appendFixedWidthPadRight((-2395), (-2395), 'y');
    assertEquals(0, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test07183() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, ""'\"""");
    strBuilder1.size = (-1794);
    strBuilder0.appendFixedWidthPadLeft((Object) "".8 3T([*>{`y$Z"", (-1093), '_');
    assertEquals((-1794), strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test07284() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 0, '/');
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test07385() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-711));
    StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(1148, 0, 't');
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test07386() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-711));
    StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(1148, 0, 't');
    assertEquals(0, strBuilder1.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test07488() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.minimizeCapacity();
    strBuilder0.append((char[]) null);
    assertEquals(0, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test07590() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
    StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
    assertEquals(0, strBuilder2.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test07691() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""StrTokenizer[not tokenized yet]"");
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""n&^*_N,]XwD[Z"");
    StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
    assertEquals(31, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test07692() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""StrTokenizer[not tokenized yet]"");
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""n&^*_N,]XwD[Z"");
    StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
    assertEquals(63, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test07793() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test07794() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
    StrBuilder strBuilder2 = strBuilder1.append("""");
    assertEquals(0, strBuilder2.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test07895() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    StrBuilder strBuilder1 = strBuilder0.append((Object) null);
    assertEquals(3, strBuilder1.capacity());
}",""
"protected void validateIndex(int index) {
    if (index < 0 || index > size) {
        throw new StringIndexOutOfBoundsException(index);
    }
}","public void test07996() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""*mn;Z\""Up|q4!4`*<C<"");
    // Undeclared exception!
    try {
        strBuilder0.validateIndex((-1));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -1
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Validates parameters defining a single index in the builder.
 *
 * @param index  the index, must be valid
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StringBuffer toStringBuffer() {
    return new StringBuffer(size).append(buffer, 0, size);
}","public void test08097() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((String) null);
    strBuilder0.size = 52;
    // Undeclared exception!
    try {
        strBuilder0.toStringBuffer();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.lang.AbstractStringBuilder"", e);
    }
}","/**
 * Gets a StringBuffer version of the string builder, creating a
 * new instance each time the method is called.
 *
 * @return the builder as a StringBuffer
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a String version of the string builder, creating a new instance
 * each time the method is called.
 * <p>
 * Note that unlike StringBuffer, the string version returned is
 * independent of the string builder.
 *
 * @return the builder as a String
 */
public String toString() {
    return new String(buffer, 0, size);
}","public void test08198() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.appendPadding('*', '*');
    strBuilder1.size = 105;
    // Undeclared exception!
    try {
        strBuilder1.toString();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"public char[] toCharArray(int startIndex, int endIndex) {
    endIndex = validateRange(startIndex, endIndex);
    int len = endIndex - startIndex;
    if (len == 0) {
        return ArrayUtils.EMPTY_CHAR_ARRAY;
    }
    char[] chars = new char[len];
    System.arraycopy(buffer, startIndex, chars, 0, len);
    return chars;
}","public void test08299() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    // Undeclared exception!
    try {
        strBuilder0.toCharArray(6, (-1267));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // end < start
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Copies part of the builder's character array into a new character array.
 *
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except that
 *  if too large it is treated as end of string
 * @return a new array that holds part of the contents of the builder
 * @throws IndexOutOfBoundsException if startIndex is invalid,
 *  or if endIndex is invalid (but endIndex greater than size is valid)
 */"
"//-----------------------------------------------------------------------
/**
 * Extracts a portion of this string builder as a string.
 *
 * @param start  the start index, inclusive, must be valid
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */
public String substring(int start) {
    return substring(start, size);
}","public void test083100() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    // Undeclared exception!
    try {
        strBuilder0.substring(32);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // end < start
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}",""
"public StrBuilder setLength(int length) {
    if (length < 0) {
        throw new StringIndexOutOfBoundsException(length);
    }
    if (length < size) {
        size = length;
    } else if (length > size) {
        ensureCapacity(length);
        int oldEnd = size;
        int newEnd = length;
        size = length;
        for (int i = oldEnd; i < newEnd; i++) {
            buffer[i] = '\0';
        }
    }
    return this;
}","public void test084101() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1281));
    strBuilder0.size = 78;
    // Undeclared exception!
    try {
        strBuilder0.setLength(1394);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Updates the length of the builder by either dropping the last characters
 * or adding filler of unicode zero.
 *
 * @param length  the length to set to, must be zero or positive
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the length is negative
 */"
"//-----------------------------------------------------------------------
/**
 * Replaces all matches within the builder with the replace string.
 * <p>
 * Matchers can be used to perform advanced replace behaviour.
 * For example you could write a matcher to replace all occurances
 * where the character 'a' is followed by a number.
 *
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @param replaceStr  the replace string, null is equivalent to an empty string
 * @return this, to enable chaining
 */
public StrBuilder replaceAll(StrMatcher matcher, String replaceStr) {
    return replace(matcher, replaceStr, 0, size, -1);
}","public void test085102() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid length: "");
    StrMatcher strMatcher0 = StrMatcher.charSetMatcher(""Invalid length: "");
    // Undeclared exception!
    try {
        strBuilder0.replaceAll(strMatcher0, ""Invalid length: "");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"// -----------------------------------------------------------------------
/**
 * Advanced search and replaces within the builder using a matcher.
 * <p>
 * Matchers can be used to perform advanced behaviour.
 * For example you could write a matcher to delete all occurances
 * where the character 'a' is followed by a number.
 *
 * @param matcher  the matcher to use to find the deletion, null causes no action
 * @param replaceStr  the string to replace the match with, null is a delete
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @param replaceCount  the number of times to replace, -1 for replace all
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if start index is invalid
 */
public StrBuilder replace(StrMatcher matcher, String replaceStr, int startIndex, int endIndex, int replaceCount) {
    endIndex = validateRange(startIndex, endIndex);
    return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);
}","public void test086103() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
    // Undeclared exception!
    try {
        strBuilder0.replace(strMatcher0, ""X%uArmufCYl"", (-1), (-1), (-1));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -1
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}",""
"public StrBuilder replace(int startIndex, int endIndex, String replaceStr) {
    endIndex = validateRange(startIndex, endIndex);
    int insertLen = (replaceStr == null ? 0 : replaceStr.length());
    replaceImpl(startIndex, endIndex, endIndex - startIndex, replaceStr, insertLen);
    return this;
}","public void test087104() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1298));
    // Undeclared exception!
    try {
        strBuilder0.replace(2796, 59, """");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // end < start
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Replaces a portion of the string builder with another string.
 * The length of the inserted string does not have to match the removed length.
 *
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @param replaceStr  the string to replace with, null means delete range
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StrBuilder insert(int index, char[] chars) {
    validateIndex(index);
    if (chars == null) {
        return insert(index, nullText);
    }
    int len = chars.length;
    if (len > 0) {
        ensureCapacity(size + len);
        System.arraycopy(buffer, index, buffer, index + len, size - index);
        System.arraycopy(chars, 0, buffer, index, len);
        size += len;
    }
    return this;
}","public void test088105() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    char[] charArray0 = new char[3];
    // Undeclared exception!
    try {
        strBuilder0.insert((-694), charArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -694
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts the character array into this builder.
 * Inserting null will use the stored null text value.
 *
 * @param index  the index to add at, must be valid
 * @param chars  the char array to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StrBuilder insert(int index, boolean value) {
    validateIndex(index);
    if (value) {
        ensureCapacity(size + 4);
        System.arraycopy(buffer, index, buffer, index + 4, size - index);
        buffer[index++] = 't';
        buffer[index++] = 'r';
        buffer[index++] = 'u';
        buffer[index] = 'e';
        size += 4;
    } else {
        ensureCapacity(size + 5);
        System.arraycopy(buffer, index, buffer, index + 5, size - index);
        buffer[index++] = 'f';
        buffer[index++] = 'a';
        buffer[index++] = 'l';
        buffer[index++] = 's';
        buffer[index] = 'e';
        size += 5;
    }
    return this;
}","public void test089106() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    // Undeclared exception!
    try {
        strBuilder0.insert(4, true);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 4
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts the value into this builder.
 *
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StrBuilder insert(int index, String str) {
    validateIndex(index);
    if (str == null) {
        str = nullText;
    }
    int strLen = (str == null ? 0 : str.length());
    if (strLen > 0) {
        int newSize = size + strLen;
        ensureCapacity(newSize);
        System.arraycopy(buffer, index, buffer, index + strLen, size - index);
        size = newSize;
        str.getChars(0, strLen, buffer, index);
    }
    return this;
}","public void test090107() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    // Undeclared exception!
    try {
        strBuilder0.insert(114, ""8?Ffx"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 114
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts the string into this builder.
 * Inserting null will use the stored null text value.
 *
 * @param index  the index to add at, must be valid
 * @param str  the string to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StrBuilder insert(int index, double value) {
    return insert(index, String.valueOf(value));
}","public void test091108() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4"");
    // Undeclared exception!
    try {
        strBuilder0.insert((-2578), (-3018.0155));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -2578
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts the value into this builder.
 *
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StrBuilder insert(int index, char value) {
    validateIndex(index);
    ensureCapacity(size + 1);
    System.arraycopy(buffer, index, buffer, index + 1, size - index);
    buffer[index] = value;
    size++;
    return this;
}","public void test092109() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-4612));
    // Undeclared exception!
    try {
        strBuilder0.insert(1123, 'l');
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 1123
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts the value into this builder.
 *
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public char[] getChars(char[] destination) {
    int len = length();
    if (destination == null || destination.length < len) {
        destination = new char[len];
    }
    System.arraycopy(buffer, 0, destination, 0, len);
    return destination;
}","public void test093110() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.size = (-3018);
    char[] charArray0 = new char[0];
    // Undeclared exception!
    try {
        strBuilder0.getChars(charArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Copies the character array into the specified array.
 *
 * @param destination  the destination array, null will cause an array to be created
 * @return the input array, unless that was null or too small
 */"
"public boolean equals(StrBuilder other) {
    if (this == other) {
        return true;
    }
    if (this.size != other.size) {
        return false;
    }
    char[] thisBuf = this.buffer;
    char[] otherBuf = other.buffer;
    for (int i = size - 1; i >= 0; i--) {
        if (thisBuf[i] != otherBuf[i]) {
            return false;
        }
    }
    return true;
}","public void test094111() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    // Undeclared exception!
    try {
        strBuilder0.equals((StrBuilder) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Checks the contents of this builder against another to see if they
 * contain the same character content.
 *
 * @param other  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */"
"public StrBuilder delete(int startIndex, int endIndex) {
    endIndex = validateRange(startIndex, endIndex);
    int len = endIndex - startIndex;
    if (len > 0) {
        deleteImpl(startIndex, endIndex, len);
    }
    return this;
}","public void test095112() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    // Undeclared exception!
    try {
        strBuilder0.delete((-853), (-853));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -853
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Deletes the characters between the two specified indices.
 *
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the character at the specified index.
 *
 * @see #setCharAt(int, char)
 * @see #deleteCharAt(int)
 * @param index  the index to retrieve, must be valid
 * @return the character at the index
 * @throws IndexOutOfBoundsException if the index is invalid
 */
public char charAt(int index) {
    if (index < 0 || index >= length()) {
        throw new StringIndexOutOfBoundsException(index);
    }
    return buffer[index];
}","public void test096113() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""w{@?n"");
    char[] charArray0 = new char[0];
    strBuilder0.buffer = charArray0;
    // Undeclared exception!
    try {
        strBuilder0.charAt(0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * Appends an array placing separators between each value, but
 * not before the first or after the last.
 * Appending a null array will have no effect.
 * Each object is appended using {@link #append(Object)}.
 *
 * @param array  the array to append
 * @param separator  the separator to use, null means no separator
 * @return this, to enable chaining
 */
public StrBuilder appendWithSeparators(Object[] array, String separator) {
    if (array != null && array.length > 0) {
        separator = (separator == null ? """" : separator);
        append(array[0]);
        for (int i = 1; i < array.length; i++) {
            append(separator);
            append(array[i]);
        }
    }
    return this;
}","public void test097114() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    Object[] objectArray0 = new Object[2];
    strBuilder0.size = 1909;
    objectArray0[0] = (Object) ""<r[Y9y7;Zxf$2.^`So"";
    // Undeclared exception!
    try {
        strBuilder0.appendWithSeparators(objectArray0, (String) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}",""
"public StrBuilder appendWithSeparators(Iterator it, String separator) {
    if (it != null) {
        separator = (separator == null ? """" : separator);
        while (it.hasNext()) {
            append(it.next());
            if (it.hasNext()) {
                append(separator);
            }
        }
    }
    return this;
}","public void test098115() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Af1D>yz|[>VCfcld=-,"");
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    ListIterator<Integer> listIterator0 = linkedList0.listIterator(0);
    Integer integer0 = new Integer(0);
    linkedList0.add(integer0);
    // Undeclared exception!
    try {
        strBuilder0.appendWithSeparators((Iterator) listIterator0, ""Invalid length: "");
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList$ListItr"", e);
    }
}","/**
 * Appends an iterator placing separators between each value, but
 * not before the first or after the last.
 * Appending a null iterator will have no effect.
 * Each object is appended using {@link #append(Object)}.
 *
 * @param it  the iterator to append
 * @param separator  the separator to use, null means no separator
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Appends the new line string to this string builder.
 * <p>
 * The new line string can be altered using {@link #setNewLineText(String)}.
 * This might be used to force the output to always use Unix line endings
 * even when on Windows.
 *
 * @return this, to enable chaining
 */
public StrBuilder appendNewLine() {
    if (newLine == null) {
        append(SystemUtils.LINE_SEPARATOR);
        return this;
    }
    return append(newLine);
}","public void test099116() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""_"");
    char[] charArray0 = new char[0];
    strBuilder0.buffer = charArray0;
    // Undeclared exception!
    try {
        strBuilder0.appendNewLine();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}",""
"public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
    if (width > 0) {
        ensureCapacity(size + width);
        String str = (obj == null ? getNullText() : obj.toString());
        int strLen = str.length();
        if (strLen >= width) {
            str.getChars(0, strLen, buffer, size);
        } else {
            int padLen = width - strLen;
            str.getChars(0, strLen, buffer, size);
            for (int i = 0; i < padLen; i++) {
                buffer[size + strLen + i] = padChar;
            }
        }
        size += width;
    }
    return this;
}","public void test100117() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    // Undeclared exception!
    try {
        strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, 3, 's');
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Appends an object to the builder padding on the right to a fixed length.
 * The <code>toString</code> of the object is used.
 * If the object is larger than the length, the right hand side is lost.
 * If the object is null, null text value is used.
 *
 * @param obj  the object to append, null uses null text
 * @param width  the fixed field width, zero or negative has no effect
 * @param padChar  the pad character to use
 * @return this, to enable chaining
 */"
"public StrBuilder appendFixedWidthPadRight(int value, int width, char padChar) {
    return appendFixedWidthPadRight(String.valueOf(value), width, padChar);
}","public void test101118() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    // Undeclared exception!
    try {
        strBuilder0.appendFixedWidthPadRight(101, 2, 'e');
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Appends an object to the builder padding on the right to a fixed length.
 * The <code>String.valueOf</code> of the <code>int</code> value is used.
 * If the object is larger than the length, the right hand side is lost.
 *
 * @param value  the value to append
 * @param width  the fixed field width, zero or negative has no effect
 * @param padChar  the pad character to use
 * @return this, to enable chaining
 */"
"public StrBuilder append(boolean value) {
    if (value) {
        ensureCapacity(size + 4);
        buffer[size++] = 't';
        buffer[size++] = 'r';
        buffer[size++] = 'u';
        buffer[size++] = 'e';
    } else {
        ensureCapacity(size + 5);
        buffer[size++] = 'f';
        buffer[size++] = 'a';
        buffer[size++] = 'l';
        buffer[size++] = 's';
        buffer[size++] = 'e';
    }
    return this;
}","public void test102119() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1281));
    strBuilder0.size = 78;
    // Undeclared exception!
    try {
        strBuilder0.append(false);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends a boolean value to the string builder.
 *
 * @param value  the value to append
 * @return this, to enable chaining
 */"
"public int lastIndexOf(StrMatcher matcher, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (matcher == null || startIndex < 0) {
        return -1;
    }
    char[] buf = buffer;
    int endIndex = startIndex + 1;
    for (int i = startIndex; i >= 0; i--) {
        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {
            return i;
        }
    }
    return -1;
}","public void test103120() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('<');
    int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, 0);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder using the matcher to find the last
 * match searching from the given index.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index matched, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test103121() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('<');
    int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, 0);
    assertEquals(32, strBuilder0.capacity());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test104122() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.append(true);
    int int0 = strBuilder1.lastIndexOf('>', 115);
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"public int lastIndexOf(char ch, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (startIndex < 0) {
        return -1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (buffer[i] == ch) {
            return i;
        }
    }
    return -1;
}","public void test104123() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.append(true);
    int int0 = strBuilder1.lastIndexOf('>', 115);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the last reference to the specified char.
 *
 * @param ch  the character to find
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index of the character, or -1 if not found
 */"
"public int lastIndexOf(char ch, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (startIndex < 0) {
        return -1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (buffer[i] == ch) {
            return i;
        }
    }
    return -1;
}","public void test105124() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(108);
    int int0 = strBuilder0.lastIndexOf('\\', (-131));
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the last reference to the specified char.
 *
 * @param ch  the character to find
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index of the character, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test105125() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(108);
    int int0 = strBuilder0.lastIndexOf('\\', (-131));
    assertEquals(108, strBuilder0.capacity());
}",""
"public int indexOf(StrMatcher matcher, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (matcher == null || startIndex >= size) {
        return -1;
    }
    int len = size;
    char[] buf = buffer;
    for (int i = startIndex; i < len; i++) {
        if (matcher.isMatch(buf, i, startIndex, len) > 0) {
            return i;
        }
    }
    return -1;
}","public void test106126() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid length: "");
    StrMatcher strMatcher0 = StrMatcher.charSetMatcher(""Invalid length: "");
    int int0 = strBuilder0.indexOf(strMatcher0, (-1191));
    assertEquals(0, int0);
}","/**
 * Searches the string builder using the matcher to find the first
 * match searching from the given index.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index matched, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test106127() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid length: "");
    StrMatcher strMatcher0 = StrMatcher.charSetMatcher(""Invalid length: "");
    int int0 = strBuilder0.indexOf(strMatcher0, (-1191));
    assertEquals(48, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test106128() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid length: "");
    StrMatcher strMatcher0 = StrMatcher.charSetMatcher(""Invalid length: "");
    int int0 = strBuilder0.indexOf(strMatcher0, (-1191));
    assertEquals(16, strBuilder0.size());
}",""
"public int indexOf(StrMatcher matcher, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (matcher == null || startIndex >= size) {
        return -1;
    }
    int len = size;
    char[] buf = buffer;
    for (int i = startIndex; i < len; i++) {
        if (matcher.isMatch(buf, i, startIndex, len) > 0) {
            return i;
        }
    }
    return -1;
}","public void test107129() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""=6zG`s@-nIovl?u"");
    int int0 = strBuilder0.indexOf((StrMatcher) null, (-2252));
    assertEquals((-1), int0);
}","/**
 * Searches the string builder using the matcher to find the first
 * match searching from the given index.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index matched, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test107130() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""=6zG`s@-nIovl?u"");
    int int0 = strBuilder0.indexOf((StrMatcher) null, (-2252));
    assertEquals(48, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test107131() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""=6zG`s@-nIovl?u"");
    int int0 = strBuilder0.indexOf((StrMatcher) null, (-2252));
    assertEquals(16, strBuilder0.length());
}",""
"public int indexOf(StrMatcher matcher, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (matcher == null || startIndex >= size) {
        return -1;
    }
    int len = size;
    char[] buf = buffer;
    for (int i = startIndex; i < len; i++) {
        if (matcher.isMatch(buf, i, startIndex, len) > 0) {
            return i;
        }
    }
    return -1;
}","public void test108132() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""$>G*(EL"");
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
    int int0 = strBuilder0.indexOf(strMatcher0, 5);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder using the matcher to find the first
 * match searching from the given index.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index matched, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test108133() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""$>G*(EL"");
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
    int int0 = strBuilder0.indexOf(strMatcher0, 5);
    assertEquals(7, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test108134() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""$>G*(EL"");
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
    int int0 = strBuilder0.indexOf(strMatcher0, 5);
    assertEquals(39, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test109135() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    int int0 = strBuilder0.indexOf(""Caught a SecurityException reading the system property '"", (-1655));
    assertEquals(88, strBuilder0.capacity());
}",""
"public int indexOf(String str, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (str == null || startIndex >= size) {
        return -1;
    }
    int strLen = str.length();
    if (strLen == 1) {
        return indexOf(str.charAt(0), startIndex);
    }
    if (strLen == 0) {
        return startIndex;
    }
    if (strLen > size) {
        return -1;
    }
    char[] thisBuf = buffer;
    int len = size - strLen + 1;
    outer: for (int i = startIndex; i < len; i++) {
        for (int j = 0; j < strLen; j++) {
            if (str.charAt(j) != thisBuf[i + j]) {
                continue outer;
            }
        }
        return i;
    }
    return -1;
}","public void test109136() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    int int0 = strBuilder0.indexOf(""Caught a SecurityException reading the system property '"", (-1655));
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the first reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the string, or -1 if not found
 */"
"public boolean isEmpty() {
    return size == 0;
}","public void test110137() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, 31, 'w');
    int int0 = strBuilder0.indexOf('w', (-1));
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"public int indexOf(char ch, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (startIndex >= size) {
        return -1;
    }
    char[] thisBuf = buffer;
    for (int i = startIndex; i < size; i++) {
        if (thisBuf[i] == ch) {
            return i;
        }
    }
    return -1;
}","public void test110138() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, 31, 'w');
    int int0 = strBuilder0.indexOf('w', (-1));
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the first reference to the specified char.
 *
 * @param ch  the character to find
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the character, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test111139() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    int int0 = strBuilder0.indexOf('[', 0);
    assertEquals(15, strBuilder0.length());
}",""
"public int indexOf(char ch, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (startIndex >= size) {
        return -1;
    }
    char[] thisBuf = buffer;
    for (int i = startIndex; i < size; i++) {
        if (thisBuf[i] == ch) {
            return i;
        }
    }
    return -1;
}","public void test111140() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    int int0 = strBuilder0.indexOf('[', 0);
    assertEquals(0, int0);
}","/**
 * Searches the string builder to find the first reference to the specified char.
 *
 * @param ch  the character to find
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the character, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test111141() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    int int0 = strBuilder0.indexOf('[', 0);
    assertEquals(47, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test112142() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    int int0 = strBuilder0.indexOf('@', 969);
    assertEquals(32, strBuilder0.capacity());
}",""
"public int indexOf(char ch, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (startIndex >= size) {
        return -1;
    }
    char[] thisBuf = buffer;
    for (int i = startIndex; i < size; i++) {
        if (thisBuf[i] == ch) {
            return i;
        }
    }
    return -1;
}","public void test112143() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    int int0 = strBuilder0.indexOf('@', 969);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the first reference to the specified char.
 *
 * @param ch  the character to find
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the character, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test113144() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
    strBuilder0.delete(102, Integer.MAX_VALUE);
    assertEquals(117, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test114145() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.insert(0, """");
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test115146() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""StrTokenizer[not tokenized yet]"");
    strBuilder0.appendFixedWidthPadRight((Object) ""n&^*_N,]XwD[Z"", 2928, '(');
    assertEquals(2959, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test116147() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1281));
    StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, (-1281), '/');
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test117148() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    strBuilder0.appendFixedWidthPadLeft((Object) strBuilder0, 115, 'w');
    strBuilder0.insert(115, 1918);
    assertEquals(122, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test118149() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    char[] charArray0 = new char[9];
    StrBuilder strBuilder1 = strBuilder0.append(charArray0, 0, 0);
    assertEquals(32, strBuilder1.capacity());
}",""
"public void getChars(int startIndex, int endIndex, char[] destination, int destinationIndex) {
    if (startIndex < 0) {
        throw new StringIndexOutOfBoundsException(startIndex);
    }
    if (endIndex < 0 || endIndex > length()) {
        throw new StringIndexOutOfBoundsException(endIndex);
    }
    if (startIndex > endIndex) {
        throw new StringIndexOutOfBoundsException(""end < start"");
    }
    System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);
}","public void test119150() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Mi-"");
    StrMatcher strMatcher0 = StrMatcher.tabMatcher();
    StrBuilder strBuilder1 = strBuilder0.append((Object) strMatcher0);
    char[] charArray0 = new char[7];
    // Undeclared exception!
    try {
        strBuilder1.getChars(0, 48, charArray0, 2);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 * Copies the character array into the specified array.
 *
 * @param startIndex  first index to copy, inclusive, must be valid
 * @param endIndex  last index, exclusive, must be valid
 * @param destination  the destination array, must not be null or too small
 * @param destinationIndex  the index to start copying in destination
 * @throws NullPointerException if the array is null
 * @throws IndexOutOfBoundsException if any index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test120151() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""'H]t,2vFypKA%nhMf="");
    StrBuilder strBuilder1 = strBuilder0.ensureCapacity(27);
    assertEquals(19, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test120152() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""'H]t,2vFypKA%nhMf="");
    StrBuilder strBuilder1 = strBuilder0.ensureCapacity(27);
    assertEquals(51, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test121153() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    strBuilder0.ensureCapacity(684);
    assertEquals(684, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test122154() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    int int0 = strBuilder0.length();
    assertEquals(0, int0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test122155() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    int int0 = strBuilder0.length();
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test123156() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    int int0 = strBuilder0.size();
    assertEquals(0, int0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test123157() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    int int0 = strBuilder0.size();
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test124158() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""$>G*(EL"");
    strBuilder0.clear();
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
    int int0 = strBuilder0.indexOf(strMatcher0, 5);
    assertEquals(0, strBuilder0.size());
}",""
"public int indexOf(StrMatcher matcher, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (matcher == null || startIndex >= size) {
        return -1;
    }
    int len = size;
    char[] buf = buffer;
    for (int i = startIndex; i < len; i++) {
        if (matcher.isMatch(buf, i, startIndex, len) > 0) {
            return i;
        }
    }
    return -1;
}","public void test124159() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""$>G*(EL"");
    strBuilder0.clear();
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher();
    int int0 = strBuilder0.indexOf(strMatcher0, 5);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder using the matcher to find the first
 * match searching from the given index.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index matched, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test125160() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.getNullText();
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test126161() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    long long0 = strBuilder_StrBuilderReader0.skip((-1L));
    assertEquals(0, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test126163() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    long long0 = strBuilder_StrBuilderReader0.skip((-1L));
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test127164() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    long long0 = strBuilder_StrBuilderReader0.skip(33L);
    assertEquals(0, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test127166() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    long long0 = strBuilder_StrBuilderReader0.skip(33L);
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test128169() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    strBuilder_StrBuilderReader0.skip(0L);
    assertEquals(0, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test128170() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    strBuilder_StrBuilderReader0.skip(0L);
    assertEquals(32, strBuilder0.capacity());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test129171() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    char[] charArray0 = new char[8];
    strBuilder0.appendFixedWidthPadRight(69, 242, 'W');
    int int0 = strBuilder_StrBuilderReader0.read(charArray0, 2, 2);
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test130173() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    char[] charArray0 = new char[6];
    strBuilder0.append(""^^"");
    int int0 = strBuilder_StrBuilderReader0.read(charArray0);
    assertEquals(2, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test134178() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    char[] charArray0 = new char[6];
    int int0 = strBuilder_StrBuilderReader0.read(charArray0);
    assertEquals(2, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test134179() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    char[] charArray0 = new char[6];
    int int0 = strBuilder_StrBuilderReader0.read(charArray0);
    assertEquals(0, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test136183() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    int int0 = strBuilder_StrBuilderReader0.read();
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test136185() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    int int0 = strBuilder_StrBuilderReader0.read();
    assertEquals(0, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test137186() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    strBuilder0.append((float) 0);
    Reader reader0 = strBuilder0.asReader();
    int int0 = reader0.read();
    assertEquals(3, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test138189() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    String string0 = strBuilder_StrBuilderTokenizer0.getContent();
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test139191() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    strBuilder_StrBuilderTokenizer0.reset(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    strBuilder_StrBuilderTokenizer0.getContent();
    assertEquals(88, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test139192() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    strBuilder_StrBuilderTokenizer0.reset(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    strBuilder_StrBuilderTokenizer0.getContent();
    assertEquals(56, strBuilder0.length());
}",""
"public StrBuilder insert(int index, char[] chars, int offset, int length) {
    validateIndex(index);
    if (chars == null) {
        return insert(index, nullText);
    }
    if (offset < 0 || offset > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid offset: "" + offset);
    }
    if (length < 0 || offset + length > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);
    }
    if (length > 0) {
        ensureCapacity(size + length);
        System.arraycopy(buffer, index, buffer, index + length, size - index);
        System.arraycopy(chars, offset, buffer, index, length);
        size += length;
    }
    return this;
}","public void test140193() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[3];
    // Undeclared exception!
    try {
        strBuilder0.insert((-1650), charArray0, (-302), (-2387));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -1650
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts part of the character array into this builder.
 * Inserting null will use the stored null text value.
 *
 * @param index  the index to add at, must be valid
 * @param chars  the char array to insert
 * @param offset  the offset into the character array to start at, must be valid
 * @param length  the length of the character array part to copy, must be positive
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if any index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Validates parameters defining a range of the builder.
 *
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */
protected int validateRange(int startIndex, int endIndex) {
    if (startIndex < 0) {
        throw new StringIndexOutOfBoundsException(startIndex);
    }
    if (endIndex > size) {
        endIndex = size;
    }
    if (startIndex > endIndex) {
        throw new StringIndexOutOfBoundsException(""end < start"");
    }
    return endIndex;
}","public void test141194() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    // Undeclared exception!
    try {
        strBuilder0.validateRange(100, (-2094));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // end < start
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}",""
"public String substring(int startIndex, int endIndex) {
    endIndex = validateRange(startIndex, endIndex);
    return new String(buffer, startIndex, endIndex - startIndex);
}","public void test142195() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    // Undeclared exception!
    try {
        strBuilder0.substring((-1142), (-1772));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -1142
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Extracts a portion of this string builder as a string.
 * <p>
 * Note: This method treats an endIndex greater than the length of the
 * builder as equal to the length of the builder, and continues
 * without error, unlike StringBuffer or String.
 *
 * @param startIndex  the start index, inclusive, must be valid
 * @param endIndex  the end index, exclusive, must be valid except
 *  that if too large it is treated as end of string
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public boolean isEmpty() {
    return size == 0;
}","public void test143196() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[7];
    strBuilder0.append(charArray0);
    strBuilder0.hashCode();
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test144197() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
    assertEquals(32, strBuilder0.capacity());
}",""
"public boolean equals(Object obj) {
    if (obj instanceof StrBuilder) {
        return equals((StrBuilder) obj);
    }
    return false;
}","public void test144198() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
    assertTrue(boolean0);
}","/**
 * Checks the contents of this builder against another to see if they
 * contain the same character content.
 *
 * @param obj  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */"
"public boolean equals(Object obj) {
    if (obj instanceof StrBuilder) {
        return equals((StrBuilder) obj);
    }
    return false;
}","public void test145199() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    boolean boolean0 = strBuilder0.equals((Object) ""QLFd,MHQ"");
    assertFalse(boolean0);
}","/**
 * Checks the contents of this builder against another to see if they
 * contain the same character content.
 *
 * @param obj  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test145200() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    boolean boolean0 = strBuilder0.equals((Object) ""QLFd,MHQ"");
    assertEquals(32, strBuilder0.capacity());
}",""
"public boolean equals(StrBuilder other) {
    if (this == other) {
        return true;
    }
    if (this.size != other.size) {
        return false;
    }
    char[] thisBuf = this.buffer;
    char[] otherBuf = other.buffer;
    for (int i = size - 1; i >= 0; i--) {
        if (thisBuf[i] != otherBuf[i]) {
            return false;
        }
    }
    return true;
}","public void test146201() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = new StrBuilder();
    boolean boolean0 = strBuilder0.equals(strBuilder1);
    assertTrue(boolean0);
}","/**
 * Checks the contents of this builder against another to see if they
 * contain the same character content.
 *
 * @param other  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test146202() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = new StrBuilder();
    boolean boolean0 = strBuilder0.equals(strBuilder1);
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test147203() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = new StrBuilder();
    boolean boolean0 = strBuilder0.equals(strBuilder1);
    assertEquals(47, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test147204() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = new StrBuilder();
    boolean boolean0 = strBuilder0.equals(strBuilder1);
    assertEquals(15, strBuilder0.length());
}",""
"public boolean equals(Object obj) {
    if (obj instanceof StrBuilder) {
        return equals((StrBuilder) obj);
    }
    return false;
}","public void test147205() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = new StrBuilder();
    boolean boolean0 = strBuilder0.equals(strBuilder1);
    assertFalse(strBuilder1.equals((Object) strBuilder0));
}","/**
 * Checks the contents of this builder against another to see if they
 * contain the same character content.
 *
 * @param obj  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test147206() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = new StrBuilder();
    boolean boolean0 = strBuilder0.equals(strBuilder1);
    assertEquals(32, strBuilder1.capacity());
}",""
"public boolean equals(StrBuilder other) {
    if (this == other) {
        return true;
    }
    if (this.size != other.size) {
        return false;
    }
    char[] thisBuf = this.buffer;
    char[] otherBuf = other.buffer;
    for (int i = size - 1; i >= 0; i--) {
        if (thisBuf[i] != otherBuf[i]) {
            return false;
        }
    }
    return true;
}","public void test147207() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = new StrBuilder();
    boolean boolean0 = strBuilder0.equals(strBuilder1);
    assertFalse(boolean0);
}","/**
 * Checks the contents of this builder against another to see if they
 * contain the same character content.
 *
 * @param other  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test148208() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
    assertEquals(34, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
//    /**
//     * Gets a String version of the string builder by calling the internal
//     * constructor of String by reflection.
//     * <p>
//     * WARNING: You must not use the StrBuilder after calling this method
//     * as the buffer is now shared with the String object. To ensure this,
//     * the internal character array is set to null, so you will get
//     * NullPointerExceptions on all method calls.
//     *
//     * @return the builder as a String
//     */
//    public String toSharedString() {
//        try {
//            Constructor con = String.class.getDeclaredConstructor(
//                new Class[] {int.class, int.class, char[].class});
//            con.setAccessible(true);
//            char[] buffer = buf;
//            buf = null;
//            size = -1;
//            nullText = null;
//            return (String) con.newInstance(
//                new Object[] {new Integer(0), new Integer(size), buffer});
//
//        } catch (Exception ex) {
//            ex.printStackTrace();
//            throw new UnsupportedOperationException(""StrBuilder.toSharedString is unsupported: "" + ex.getMessage());
//        }
//    }
//-----------------------------------------------------------------------
/**
 * Checks the contents of this builder against another to see if they
 * contain the same character content ignoring case.
 *
 * @param other  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */
public boolean equalsIgnoreCase(StrBuilder other) {
    if (this == other) {
        return true;
    }
    if (this.size != other.size) {
        return false;
    }
    char[] thisBuf = this.buffer;
    char[] otherBuf = other.buffer;
    for (int i = size - 1; i >= 0; i--) {
        char c1 = thisBuf[i];
        char c2 = otherBuf[i];
        if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {
            return false;
        }
    }
    return true;
}","public void test148209() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
    assertTrue(boolean0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test148210() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
    assertEquals(2, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
//    /**
//     * Gets a String version of the string builder by calling the internal
//     * constructor of String by reflection.
//     * <p>
//     * WARNING: You must not use the StrBuilder after calling this method
//     * as the buffer is now shared with the String object. To ensure this,
//     * the internal character array is set to null, so you will get
//     * NullPointerExceptions on all method calls.
//     *
//     * @return the builder as a String
//     */
//    public String toSharedString() {
//        try {
//            Constructor con = String.class.getDeclaredConstructor(
//                new Class[] {int.class, int.class, char[].class});
//            con.setAccessible(true);
//            char[] buffer = buf;
//            buf = null;
//            size = -1;
//            nullText = null;
//            return (String) con.newInstance(
//                new Object[] {new Integer(0), new Integer(size), buffer});
//
//        } catch (Exception ex) {
//            ex.printStackTrace();
//            throw new UnsupportedOperationException(""StrBuilder.toSharedString is unsupported: "" + ex.getMessage());
//        }
//    }
//-----------------------------------------------------------------------
/**
 * Checks the contents of this builder against another to see if they
 * contain the same character content ignoring case.
 *
 * @param other  the object to check, null returns false
 * @return true if the builders contain the same characters in the same order
 */
public boolean equalsIgnoreCase(StrBuilder other) {
    if (this == other) {
        return true;
    }
    if (this.size != other.size) {
        return false;
    }
    char[] thisBuf = this.buffer;
    char[] otherBuf = other.buffer;
    for (int i = size - 1; i >= 0; i--) {
        char c1 = thisBuf[i];
        char c2 = otherBuf[i];
        if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {
            return false;
        }
    }
    return true;
}","public void test149211() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = new StrBuilder(""0n39 "");
    boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
    assertFalse(boolean0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test149212() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = new StrBuilder(""0n39 "");
    boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
    assertEquals(37, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test149213() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = new StrBuilder(""0n39 "");
    boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
    assertEquals(5, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test149214() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = new StrBuilder(""0n39 "");
    boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
    assertEquals(32, strBuilder0.capacity());
}",""
"public int lastIndexOf(StrMatcher matcher, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (matcher == null || startIndex < 0) {
        return -1;
    }
    char[] buf = buffer;
    int endIndex = startIndex + 1;
    for (int i = startIndex; i >= 0; i--) {
        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {
            return i;
        }
    }
    return -1;
}","public void test150215() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""startIndex must be valid"");
    StrMatcher strMatcher0 = StrMatcher.splitMatcher();
    int int0 = strBuilder0.lastIndexOf(strMatcher0, 342);
    assertEquals(18, int0);
}","/**
 * Searches the string builder using the matcher to find the last
 * match searching from the given index.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index matched, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test150216() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""startIndex must be valid"");
    StrMatcher strMatcher0 = StrMatcher.splitMatcher();
    int int0 = strBuilder0.lastIndexOf(strMatcher0, 342);
    assertEquals(56, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test150217() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""startIndex must be valid"");
    StrMatcher strMatcher0 = StrMatcher.splitMatcher();
    int int0 = strBuilder0.lastIndexOf(strMatcher0, 342);
    assertEquals(24, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test151218() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    int int0 = strBuilder0.lastIndexOf((StrMatcher) null, 186);
    assertEquals(32, strBuilder0.capacity());
}",""
"public int lastIndexOf(StrMatcher matcher, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (matcher == null || startIndex < 0) {
        return -1;
    }
    char[] buf = buffer;
    int endIndex = startIndex + 1;
    for (int i = startIndex; i >= 0; i--) {
        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {
            return i;
        }
    }
    return -1;
}","public void test151219() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    int int0 = strBuilder0.lastIndexOf((StrMatcher) null, 186);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder using the matcher to find the last
 * match searching from the given index.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index matched, or -1 if not found
 */"
"public boolean isEmpty() {
    return size == 0;
}","public void test152220() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
    strBuilder0.append('9');
    int int0 = strBuilder0.lastIndexOf(strMatcher0, 0);
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"public int lastIndexOf(StrMatcher matcher, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (matcher == null || startIndex < 0) {
        return -1;
    }
    char[] buf = buffer;
    int endIndex = startIndex + 1;
    for (int i = startIndex; i >= 0; i--) {
        if (matcher.isMatch(buf, i, 0, endIndex) > 0) {
            return i;
        }
    }
    return -1;
}","public void test152221() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
    strBuilder0.append('9');
    int int0 = strBuilder0.lastIndexOf(strMatcher0, 0);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder using the matcher to find the last
 * match searching from the given index.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index matched, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test153222() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.setLength(4621);
    int int0 = strBuilder0.lastIndexOf(""`?d^=c@jraB?~;tI"");
    assertEquals(4621, strBuilder0.size());
}",""
"public int lastIndexOf(String str) {
    return lastIndexOf(str, size - 1);
}","public void test153223() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.setLength(4621);
    int int0 = strBuilder0.lastIndexOf(""`?d^=c@jraB?~;tI"");
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the last reference to the specified string.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @return the last index of the string, or -1 if not found
 */"
"public int lastIndexOf(String str) {
    return lastIndexOf(str, size - 1);
}","public void test154224() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""K0#v9;k<Xe$f"");
    int int0 = strBuilder0.lastIndexOf(""K0#v9;k<Xe$f"");
    assertEquals(0, int0);
}","/**
 * Searches the string builder to find the last reference to the specified string.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @return the last index of the string, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test154225() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""K0#v9;k<Xe$f"");
    int int0 = strBuilder0.lastIndexOf(""K0#v9;k<Xe$f"");
    assertEquals(44, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test155226() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    int int0 = strBuilder0.lastIndexOf(""O"", 15);
    assertEquals(15, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test155227() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    int int0 = strBuilder0.lastIndexOf(""O"", 15);
    assertEquals(47, strBuilder0.capacity());
}",""
"public int lastIndexOf(String str, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (str == null || startIndex < 0) {
        return -1;
    }
    int strLen = str.length();
    if (strLen > 0 && strLen <= size) {
        if (strLen == 1) {
            return lastIndexOf(str.charAt(0), startIndex);
        }
        outer: for (int i = startIndex - strLen + 1; i >= 0; i--) {
            for (int j = 0; j < strLen; j++) {
                if (str.charAt(j) != buffer[i + j]) {
                    continue outer;
                }
            }
            return i;
        }
    } else if (strLen == 0) {
        return startIndex;
    }
    return -1;
}","public void test155228() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    int int0 = strBuilder0.lastIndexOf(""O"", 15);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the last reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index of the string, or -1 if not found
 */"
"public boolean isEmpty() {
    return size == 0;
}","public void test156229() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((String) null);
    strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
    int int0 = strBuilder0.lastIndexOf("""", 32);
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"public int lastIndexOf(String str, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (str == null || startIndex < 0) {
        return -1;
    }
    int strLen = str.length();
    if (strLen > 0 && strLen <= size) {
        if (strLen == 1) {
            return lastIndexOf(str.charAt(0), startIndex);
        }
        outer: for (int i = startIndex - strLen + 1; i >= 0; i--) {
            for (int j = 0; j < strLen; j++) {
                if (str.charAt(j) != buffer[i + j]) {
                    continue outer;
                }
            }
            return i;
        }
    } else if (strLen == 0) {
        return startIndex;
    }
    return -1;
}","public void test156230() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((String) null);
    strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
    int int0 = strBuilder0.lastIndexOf("""", 32);
    assertEquals(32, int0);
}","/**
 * Searches the string builder to find the last reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index of the string, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test157231() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""z:RKeWBf4a"");
    int int0 = strBuilder0.lastIndexOf(""z:RKeWBf4a"", 4);
    assertEquals(42, strBuilder0.capacity());
}",""
"public int lastIndexOf(String str, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (str == null || startIndex < 0) {
        return -1;
    }
    int strLen = str.length();
    if (strLen > 0 && strLen <= size) {
        if (strLen == 1) {
            return lastIndexOf(str.charAt(0), startIndex);
        }
        outer: for (int i = startIndex - strLen + 1; i >= 0; i--) {
            for (int j = 0; j < strLen; j++) {
                if (str.charAt(j) != buffer[i + j]) {
                    continue outer;
                }
            }
            return i;
        }
    } else if (strLen == 0) {
        return startIndex;
    }
    return -1;
}","public void test157232() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""z:RKeWBf4a"");
    int int0 = strBuilder0.lastIndexOf(""z:RKeWBf4a"", 4);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the last reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index of the string, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test157233() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""z:RKeWBf4a"");
    int int0 = strBuilder0.lastIndexOf(""z:RKeWBf4a"", 4);
    assertEquals(10, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test158234() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2784);
    int int0 = strBuilder0.lastIndexOf(""AN,?_"", 17);
    assertEquals(2784, strBuilder0.capacity());
}",""
"public int lastIndexOf(String str, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (str == null || startIndex < 0) {
        return -1;
    }
    int strLen = str.length();
    if (strLen > 0 && strLen <= size) {
        if (strLen == 1) {
            return lastIndexOf(str.charAt(0), startIndex);
        }
        outer: for (int i = startIndex - strLen + 1; i >= 0; i--) {
            for (int j = 0; j < strLen; j++) {
                if (str.charAt(j) != buffer[i + j]) {
                    continue outer;
                }
            }
            return i;
        }
    } else if (strLen == 0) {
        return startIndex;
    }
    return -1;
}","public void test158235() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2784);
    int int0 = strBuilder0.lastIndexOf(""AN,?_"", 17);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the last reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index of the string, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test159236() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1263));
    StrBuilder strBuilder1 = strBuilder0.setLength(102);
    int int0 = strBuilder1.lastIndexOf('f');
    assertEquals(102, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Searches the string builder to find the last reference to the specified char.
 *
 * @param ch  the character to find
 * @return the last index of the character, or -1 if not found
 */
public int lastIndexOf(char ch) {
    return lastIndexOf(ch, size - 1);
}","public void test159237() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1263));
    StrBuilder strBuilder1 = strBuilder0.setLength(102);
    int int0 = strBuilder1.lastIndexOf('f');
    assertEquals((-1), int0);
}",""
"public int lastIndexOf(char ch, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (startIndex < 0) {
        return -1;
    }
    for (int i = startIndex; i >= 0; i--) {
        if (buffer[i] == ch) {
            return i;
        }
    }
    return -1;
}","public void test160238() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    int int0 = strBuilder0.lastIndexOf('}', 0);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the last reference to the specified char.
 *
 * @param ch  the character to find
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index of the character, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test160239() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    int int0 = strBuilder0.lastIndexOf('}', 0);
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test161240() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrMatcher strMatcher0 = StrMatcher.splitMatcher();
    boolean boolean0 = strBuilder0.contains(strMatcher0);
    assertEquals(32, strBuilder0.capacity());
}",""
"public boolean contains(StrMatcher matcher) {
    return indexOf(matcher, 0) >= 0;
}","public void test161241() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrMatcher strMatcher0 = StrMatcher.splitMatcher();
    boolean boolean0 = strBuilder0.contains(strMatcher0);
    assertFalse(boolean0);
}","/**
 * Checks if the string builder contains a string matched using the
 * specified matcher.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to search for the character
 * 'a' followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @return true if the matcher finds a match in the builder
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test162242() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    int int0 = strBuilder0.indexOf(""length must be valid"", 0);
    assertEquals(35, strBuilder0.capacity());
}",""
"public int indexOf(String str, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (str == null || startIndex >= size) {
        return -1;
    }
    int strLen = str.length();
    if (strLen == 1) {
        return indexOf(str.charAt(0), startIndex);
    }
    if (strLen == 0) {
        return startIndex;
    }
    if (strLen > size) {
        return -1;
    }
    char[] thisBuf = buffer;
    int len = size - strLen + 1;
    outer: for (int i = startIndex; i < len; i++) {
        for (int j = 0; j < strLen; j++) {
            if (str.charAt(j) != thisBuf[i + j]) {
                continue outer;
            }
        }
        return i;
    }
    return -1;
}","public void test162243() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    int int0 = strBuilder0.indexOf(""length must be valid"", 0);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the first reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the string, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test162244() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    int int0 = strBuilder0.indexOf(""length must be valid"", 0);
    assertEquals(3, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test163245() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    int int0 = strBuilder0.indexOf("""", 0);
    assertEquals(15, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test163246() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    int int0 = strBuilder0.indexOf("""", 0);
    assertEquals(47, strBuilder0.capacity());
}",""
"public int indexOf(String str, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (str == null || startIndex >= size) {
        return -1;
    }
    int strLen = str.length();
    if (strLen == 1) {
        return indexOf(str.charAt(0), startIndex);
    }
    if (strLen == 0) {
        return startIndex;
    }
    if (strLen > size) {
        return -1;
    }
    char[] thisBuf = buffer;
    int len = size - strLen + 1;
    outer: for (int i = startIndex; i < len; i++) {
        for (int j = 0; j < strLen; j++) {
            if (str.charAt(j) != thisBuf[i + j]) {
                continue outer;
            }
        }
        return i;
    }
    return -1;
}","public void test163247() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    int int0 = strBuilder0.indexOf("""", 0);
    assertEquals(0, int0);
}","/**
 * Searches the string builder to find the first reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the string, or -1 if not found
 */"
"public int indexOf(String str, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (str == null || startIndex >= size) {
        return -1;
    }
    int strLen = str.length();
    if (strLen == 1) {
        return indexOf(str.charAt(0), startIndex);
    }
    if (strLen == 0) {
        return startIndex;
    }
    if (strLen > size) {
        return -1;
    }
    char[] thisBuf = buffer;
    int len = size - strLen + 1;
    outer: for (int i = startIndex; i < len; i++) {
        for (int j = 0; j < strLen; j++) {
            if (str.charAt(j) != thisBuf[i + j]) {
                continue outer;
            }
        }
        return i;
    }
    return -1;
}","public void test164248() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    int int0 = strBuilder0.indexOf((String) null, 54);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the first reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the string, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test164249() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    int int0 = strBuilder0.indexOf((String) null, 54);
    assertEquals(3, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test164250() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    int int0 = strBuilder0.indexOf((String) null, 54);
    assertEquals(35, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test165251() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    int int0 = strBuilder0.indexOf(""E"", 0);
    assertEquals(47, strBuilder0.capacity());
}",""
"public int indexOf(String str, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (str == null || startIndex >= size) {
        return -1;
    }
    int strLen = str.length();
    if (strLen == 1) {
        return indexOf(str.charAt(0), startIndex);
    }
    if (strLen == 0) {
        return startIndex;
    }
    if (strLen > size) {
        return -1;
    }
    char[] thisBuf = buffer;
    int len = size - strLen + 1;
    outer: for (int i = startIndex; i < len; i++) {
        for (int j = 0; j < strLen; j++) {
            if (str.charAt(j) != thisBuf[i + j]) {
                continue outer;
            }
        }
        return i;
    }
    return -1;
}","public void test165252() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    int int0 = strBuilder0.indexOf(""E"", 0);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the first reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the string, or -1 if not found
 */"
"public int indexOf(char ch, int startIndex) {
    startIndex = (startIndex < 0 ? 0 : startIndex);
    if (startIndex >= size) {
        return -1;
    }
    char[] thisBuf = buffer;
    for (int i = startIndex; i < size; i++) {
        if (thisBuf[i] == ch) {
            return i;
        }
    }
    return -1;
}","public void test166253() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    int int0 = strBuilder0.indexOf('w', (-1));
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the first reference to the specified char.
 *
 * @param ch  the character to find
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the first index of the character, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test166254() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    int int0 = strBuilder0.indexOf('w', (-1));
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test167255() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid olength: "");
    StrMatcher strMatcher0 = StrMatcher.charSetMatcher(""Invalid olength: "");
    boolean boolean0 = strBuilder0.contains(strMatcher0);
    assertEquals(49, strBuilder0.capacity());
}",""
"public boolean contains(StrMatcher matcher) {
    return indexOf(matcher, 0) >= 0;
}","public void test167256() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid olength: "");
    StrMatcher strMatcher0 = StrMatcher.charSetMatcher(""Invalid olength: "");
    boolean boolean0 = strBuilder0.contains(strMatcher0);
    assertTrue(boolean0);
}","/**
 * Checks if the string builder contains a string matched using the
 * specified matcher.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to search for the character
 * 'a' followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @return true if the matcher finds a match in the builder
 */"
"public boolean contains(String str) {
    return indexOf(str, 0) >= 0;
}","public void test168257() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""*"");
    boolean boolean0 = strBuilder0.contains(""*"");
    assertTrue(boolean0);
}","/**
 * Checks if the string builder contains the specified string.
 *
 * @param str  the string to find
 * @return true if the builder contains the string
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test168258() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""*"");
    boolean boolean0 = strBuilder0.contains(""*"");
    assertEquals(33, strBuilder0.capacity());
}",""
"public boolean contains(String str) {
    return indexOf(str, 0) >= 0;
}","public void test169259() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    boolean boolean0 = strBuilder0.contains(""Invalid offset: "");
    assertFalse(boolean0);
}","/**
 * Checks if the string builder contains the specified string.
 *
 * @param str  the string to find
 * @return true if the builder contains the string
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test169260() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    boolean boolean0 = strBuilder0.contains(""Invalid offset: "");
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test170261() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.appendPadding(1, 'e');
    boolean boolean0 = strBuilder1.contains('S');
    assertEquals(1, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Checks if the string builder contains the specified char.
 *
 * @param ch  the character to find
 * @return true if the builder contains the character
 */
public boolean contains(char ch) {
    char[] thisBuf = buffer;
    for (int i = 0; i < this.size; i++) {
        if (thisBuf[i] == ch) {
            return true;
        }
    }
    return false;
}","public void test170262() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.appendPadding(1, 'e');
    boolean boolean0 = strBuilder1.contains('S');
    assertFalse(boolean0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test171263() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1281));
    strBuilder0.setLength(1394);
    strBuilder0.midString((-1), 31);
    assertEquals(1394, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test172264() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1298));
    strBuilder0.midString(2796, 2796);
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test173265() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.midString((-1241), (-1241));
    assertEquals(32, strBuilder0.capacity());
}",""
"public String rightString(int length) {
    if (length <= 0) {
        return """";
    } else if (length >= size) {
        return new String(buffer, 0, size);
    } else {
        return new String(buffer, size - length, length);
    }
}","public void test174266() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""_"");
    String string0 = strBuilder0.rightString(108);
    assertEquals(""_"", string0);
}","/**
 * Extracts the rightmost characters from the string builder without
 * throwing an exception.
 * <p>
 * This method extracts the right <code>length</code> characters from
 * the builder. If this many characters are not available, the whole
 * builder is returned. Thus the returned string may be shorter than the
 * length requested.
 *
 * @param length  the number of characters to extract, negative returns empty string
 * @return the new string
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test174267() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""_"");
    String string0 = strBuilder0.rightString(108);
    assertEquals(33, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test175268() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.rightString((-2395));
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test176269() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    String string0 = strBuilder0.rightString(1);
    assertEquals(47, strBuilder0.capacity());
}",""
"public String rightString(int length) {
    if (length <= 0) {
        return """";
    } else if (length >= size) {
        return new String(buffer, 0, size);
    } else {
        return new String(buffer, size - length, length);
    }
}","public void test176270() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    String string0 = strBuilder0.rightString(1);
    assertEquals(""q"", string0);
}","/**
 * Extracts the rightmost characters from the string builder without
 * throwing an exception.
 * <p>
 * This method extracts the right <code>length</code> characters from
 * the builder. If this many characters are not available, the whole
 * builder is returned. Thus the returned string may be shorter than the
 * length requested.
 *
 * @param length  the number of characters to extract, negative returns empty string
 * @return the new string
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test177271() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid olength: "");
    strBuilder0.append((Object) strBuilder0);
    strBuilder0.leftString(32);
    assertEquals(67, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test178272() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    strBuilder0.leftString(0);
    assertEquals(2, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test179273() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid olength: "");
    String string0 = strBuilder0.leftString(32);
    assertEquals(49, strBuilder0.capacity());
}",""
"public String leftString(int length) {
    if (length <= 0) {
        return """";
    } else if (length >= size) {
        return new String(buffer, 0, size);
    } else {
        return new String(buffer, 0, length);
    }
}","public void test179274() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid olength: "");
    String string0 = strBuilder0.leftString(32);
    assertEquals(""Invalid olength: "", string0);
}","/**
 * Extracts the leftmost characters from the string builder without
 * throwing an exception.
 * <p>
 * This method extracts the left <code>length</code> characters from
 * the builder. If this many characters are not available, the whole
 * builder is returned. Thus the returned string may be shorter than the
 * length requested.
 *
 * @param length  the number of characters to extract, negative returns empty string
 * @return the new string
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test180275() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1263));
    strBuilder0.setLength(102);
    boolean boolean0 = strBuilder0.endsWith(""z&wf@BX+i{[9~T"");
    assertEquals(102, strBuilder0.capacity());
}",""
"public boolean endsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    int pos = size - len;
    for (int i = 0; i < len; i++, pos++) {
        if (buffer[pos] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test180276() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1263));
    strBuilder0.setLength(102);
    boolean boolean0 = strBuilder0.endsWith(""z&wf@BX+i{[9~T"");
    assertFalse(boolean0);
}","/**
 * Checks whether this builder ends with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder ends with the string
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test181277() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    boolean boolean0 = strBuilder0.endsWith("",qL"");
    assertEquals(32, strBuilder0.capacity());
}",""
"public boolean endsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    int pos = size - len;
    for (int i = 0; i < len; i++, pos++) {
        if (buffer[pos] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test181278() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    boolean boolean0 = strBuilder0.endsWith("",qL"");
    assertFalse(boolean0);
}","/**
 * Checks whether this builder ends with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder ends with the string
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test182279() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(108);
    boolean boolean0 = strBuilder0.endsWith("""");
    assertEquals(108, strBuilder0.capacity());
}",""
"public boolean endsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    int pos = size - len;
    for (int i = 0; i < len; i++, pos++) {
        if (buffer[pos] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test182280() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(108);
    boolean boolean0 = strBuilder0.endsWith("""");
    assertTrue(boolean0);
}","/**
 * Checks whether this builder ends with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder ends with the string
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test183281() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    boolean boolean0 = strBuilder0.endsWith((String) null);
    assertEquals(2, strBuilder0.capacity());
}",""
"public boolean endsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    int pos = size - len;
    for (int i = 0; i < len; i++, pos++) {
        if (buffer[pos] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test183282() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    boolean boolean0 = strBuilder0.endsWith((String) null);
    assertFalse(boolean0);
}","/**
 * Checks whether this builder ends with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder ends with the string
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test184283() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid startIndex: "");
    boolean boolean0 = strBuilder0.endsWith(""Invalid startIndex: "");
    assertEquals(52, strBuilder0.capacity());
}",""
"public boolean endsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    int pos = size - len;
    for (int i = 0; i < len; i++, pos++) {
        if (buffer[pos] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test184284() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid startIndex: "");
    boolean boolean0 = strBuilder0.endsWith(""Invalid startIndex: "");
    assertTrue(boolean0);
}","/**
 * Checks whether this builder ends with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder ends with the string
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test185285() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    strBuilder0.insert(0, (-1.0));
    boolean boolean0 = strBuilder0.startsWith(""(%"");
    assertEquals(6, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Checks whether this builder starts with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder starts with the string
 */
public boolean startsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    for (int i = 0; i < len; i++) {
        if (buffer[i] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test185286() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    strBuilder0.insert(0, (-1.0));
    boolean boolean0 = strBuilder0.startsWith(""(%"");
    assertFalse(boolean0);
}",""
"//-----------------------------------------------------------------------
/**
 * Checks whether this builder starts with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder starts with the string
 */
public boolean startsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    for (int i = 0; i < len; i++) {
        if (buffer[i] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test186287() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    boolean boolean0 = strBuilder0.startsWith(""(%"");
    assertFalse(boolean0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test186288() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    boolean boolean0 = strBuilder0.startsWith(""(%"");
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test187289() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    boolean boolean0 = strBuilder0.startsWith("""");
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Checks whether this builder starts with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder starts with the string
 */
public boolean startsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    for (int i = 0; i < len; i++) {
        if (buffer[i] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test187290() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    boolean boolean0 = strBuilder0.startsWith("""");
    assertTrue(boolean0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test188291() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    boolean boolean0 = strBuilder0.startsWith((String) null);
    assertEquals(34, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test188292() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    boolean boolean0 = strBuilder0.startsWith((String) null);
    assertEquals(2, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Checks whether this builder starts with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder starts with the string
 */
public boolean startsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    for (int i = 0; i < len; i++) {
        if (buffer[i] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test188293() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    boolean boolean0 = strBuilder0.startsWith((String) null);
    assertFalse(boolean0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test189294() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    boolean boolean0 = strBuilder0.startsWith(""(%"");
    assertEquals(34, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Checks whether this builder starts with the specified string.
 * <p>
 * Note that this method handles null input quietly, unlike String.
 *
 * @param str  the string to search for, null returns false
 * @return true if the builder starts with the string
 */
public boolean startsWith(String str) {
    if (str == null) {
        return false;
    }
    int len = str.length();
    if (len == 0) {
        return true;
    }
    if (len > size) {
        return false;
    }
    for (int i = 0; i < len; i++) {
        if (buffer[i] != str.charAt(i)) {
            return false;
        }
    }
    return true;
}","public void test189295() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    boolean boolean0 = strBuilder0.startsWith(""(%"");
    assertTrue(boolean0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test190296() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.trim();
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test191297() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.append('\""');
    assertEquals(1, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test191298() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.append('\""');
    StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
    strBuilder1.deleteAll(strMatcher0);
    assertEquals(0, strBuilder0.length());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test192299() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((String) null);
    strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
    StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('w');
    strBuilder0.deleteFirst((StrMatcher) strMatcher_CharMatcher0);
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test193300() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    StrMatcher strMatcher0 = StrMatcher.charMatcher('|');
    StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, (String) null);
    assertEquals(2, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test194301() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2818);
    StrBuilder strBuilder1 = strBuilder0.append(""z5)lw!g6"");
    strBuilder1.replaceFirst(""z5)lw!g6"", ""z5)lw!g6"");
    assertEquals(8, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test194302() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2818);
    StrBuilder strBuilder1 = strBuilder0.append(""z5)lw!g6"");
    strBuilder1.replaceFirst(""z5)lw!g6"", ""z5)lw!g6"");
    assertEquals(8, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test195303() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test196304() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(5);
    StrBuilder strBuilder1 = strBuilder0.replaceFirst(""gs!hQyV9Uz>>&U"", """");
    assertEquals(5, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test197305() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = strBuilder0.replaceAll(""Fz<x#p+1cWz:uyr"", (String) null);
    assertEquals(47, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test197306() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = strBuilder0.replaceAll(""Fz<x#p+1cWz:uyr"", (String) null);
    assertEquals(15, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test198307() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, ""file.encoding"");
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test199308() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
    StrBuilder strBuilder1 = strBuilder0.replaceFirst('w', 'm');
    int int0 = strBuilder1.lastIndexOf('m');
    assertEquals(117, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Searches the string builder to find the last reference to the specified char.
 *
 * @param ch  the character to find
 * @return the last index of the character, or -1 if not found
 */
public int lastIndexOf(char ch) {
    return lastIndexOf(ch, size - 1);
}","public void test199309() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
    StrBuilder strBuilder1 = strBuilder0.replaceFirst('w', 'm');
    int int0 = strBuilder1.lastIndexOf('m');
    assertEquals(15, int0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test200310() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    StrBuilder strBuilder1 = strBuilder0.replaceFirst('E', 'E');
    assertEquals(3, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test201311() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = strBuilder0.replaceAll('[', '^');
    assertEquals(47, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test201312() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = strBuilder0.replaceAll('[', '^');
    assertEquals(15, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test202313() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2855);
    StrBuilder strBuilder1 = strBuilder0.replaceAll('V', 'V');
    assertEquals(2855, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test203314() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(1379);
    strBuilder0.replace(0, 1379, ""!cKI+| >S2,wSPL1]%"");
    assertEquals(19, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test204315() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    strBuilder0.replaceAll(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"", ""Nx"");
    assertEquals(2, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test205316() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.deleteFirst(""length must be valid"");
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test206317() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    strBuilder0.append(""^^"");
    strBuilder0.deleteAll(""^^"");
    assertEquals(0, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test207318() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((String) null);
    StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test208319() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    strBuilder0.deleteFirst('A');
    assertEquals(14, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test209320() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    StrBuilder strBuilder1 = strBuilder0.deleteFirst('A');
    assertEquals(2, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test210321() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    Integer integer0 = new Integer(3);
    StrBuilder strBuilder1 = strBuilder0.append((Object) integer0);
    strBuilder1.deleteAll('.');
    assertEquals(28, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test210322() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    Integer integer0 = new Integer(3);
    StrBuilder strBuilder1 = strBuilder0.append((Object) integer0);
    strBuilder1.deleteAll('.');
    assertEquals(26, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test211323() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    Integer integer0 = new Integer(3);
    StrBuilder strBuilder1 = strBuilder0.append((Object) integer0);
    strBuilder1.deleteAll('E');
    assertEquals(28, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test211324() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    Integer integer0 = new Integer(3);
    StrBuilder strBuilder1 = strBuilder0.append((Object) integer0);
    strBuilder1.deleteAll('E');
    assertEquals(28, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test212325() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    StrBuilder strBuilder1 = strBuilder0.deleteAll('E');
    assertEquals(3, strBuilder1.capacity());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test213326() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.appendNewLine();
    strBuilder0.trim();
    assertTrue(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test214327() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.appendPadding('*', '/');
    strBuilder1.delete(3, 3);
    assertEquals(42, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test214328() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.appendPadding('*', '/');
    strBuilder1.delete(3, 3);
    assertEquals(42, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test215329() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    strBuilder0.insert(3, true);
    assertEquals(60, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test216330() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    strBuilder0.insert(3, false);
    assertEquals(61, strBuilder0.size());
}",""
"public StrBuilder insert(int index, char[] chars, int offset, int length) {
    validateIndex(index);
    if (chars == null) {
        return insert(index, nullText);
    }
    if (offset < 0 || offset > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid offset: "" + offset);
    }
    if (length < 0 || offset + length > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);
    }
    if (length > 0) {
        ensureCapacity(size + length);
        System.arraycopy(buffer, index, buffer, index + length, size - index);
        System.arraycopy(chars, offset, buffer, index, length);
        size += length;
    }
    return this;
}","public void test217331() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    char[] charArray0 = new char[7];
    // Undeclared exception!
    try {
        strBuilder0.insert(0, charArray0, 0, 108);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // Invalid length: 108
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts part of the character array into this builder.
 * Inserting null will use the stored null text value.
 *
 * @param index  the index to add at, must be valid
 * @param chars  the char array to insert
 * @param offset  the offset into the character array to start at, must be valid
 * @param length  the length of the character array part to copy, must be positive
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if any index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test218332() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[8];
    StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test218333() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[8];
    StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
    assertEquals(0, strBuilder1.length());
}",""
"public StrBuilder insert(int index, char[] chars, int offset, int length) {
    validateIndex(index);
    if (chars == null) {
        return insert(index, nullText);
    }
    if (offset < 0 || offset > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid offset: "" + offset);
    }
    if (length < 0 || offset + length > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);
    }
    if (length > 0) {
        ensureCapacity(size + length);
        System.arraycopy(buffer, index, buffer, index + length, size - index);
        System.arraycopy(chars, offset, buffer, index, length);
        size += length;
    }
    return this;
}","public void test219334() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[1];
    // Undeclared exception!
    try {
        strBuilder0.insert(0, charArray0, 0, (-1435));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // Invalid length: -1435
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts part of the character array into this builder.
 * Inserting null will use the stored null text value.
 *
 * @param index  the index to add at, must be valid
 * @param chars  the char array to insert
 * @param offset  the offset into the character array to start at, must be valid
 * @param length  the length of the character array part to copy, must be positive
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if any index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test220335() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1298));
    StrBuilder strBuilder1 = strBuilder0.appendNewLine();
    strBuilder1.insert(1, (char[]) null, 11, 11);
    assertEquals(1, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test220336() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1298));
    StrBuilder strBuilder1 = strBuilder0.appendNewLine();
    strBuilder1.insert(1, (char[]) null, 11, 11);
    assertEquals(32, strBuilder0.capacity());
}",""
"public StrBuilder insert(int index, char[] chars, int offset, int length) {
    validateIndex(index);
    if (chars == null) {
        return insert(index, nullText);
    }
    if (offset < 0 || offset > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid offset: "" + offset);
    }
    if (length < 0 || offset + length > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);
    }
    if (length > 0) {
        ensureCapacity(size + length);
        System.arraycopy(buffer, index, buffer, index + length, size - index);
        System.arraycopy(chars, offset, buffer, index, length);
        size += length;
    }
    return this;
}","public void test221337() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    char[] charArray0 = new char[5];
    // Undeclared exception!
    try {
        strBuilder0.insert(0, charArray0, 89, 1061);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // Invalid offset: 89
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts part of the character array into this builder.
 * Inserting null will use the stored null text value.
 *
 * @param index  the index to add at, must be valid
 * @param chars  the char array to insert
 * @param offset  the offset into the character array to start at, must be valid
 * @param length  the length of the character array part to copy, must be positive
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if any index is invalid
 */"
"public StrBuilder append(char[] chars) {
    if (chars == null) {
        return appendNull();
    }
    int strLen = chars.length;
    if (strLen > 0) {
        int len = length();
        ensureCapacity(len + strLen);
        System.arraycopy(chars, 0, buffer, len, strLen);
        size += strLen;
    }
    return this;
}","public void test222338() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""sae|Wpu)I8nn#Y'#/"");
    StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null);
    strBuilder1.size = 2382;
    char[] charArray0 = new char[8];
    // Undeclared exception!
    try {
        strBuilder0.append(charArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends a char array to the string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param chars  the char array to append
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Inserts the string representation of an object into this builder.
 * Inserting null will use the stored null text value.
 *
 * @param index  the index to add at, must be valid
 * @param obj  the object to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */
public StrBuilder insert(int index, Object obj) {
    if (obj == null) {
        return insert(index, nullText);
    }
    return insert(index, obj.toString());
}","public void test223339() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1324));
    // Undeclared exception!
    try {
        strBuilder0.insert(2, (Object) null);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 2
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test224340() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    StrMatcher strMatcher0 = StrMatcher.commaMatcher();
    strBuilder0.insert(0, (Object) strMatcher0);
    assertEquals(65, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test225341() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(2, 0, 'F');
    assertEquals(2, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Appends an object to the builder padding on the left to a fixed width.
 * The <code>toString</code> of the object is used.
 * If the object is larger than the length, the left hand side is lost.
 * If the object is null, the null text value is used.
 *
 * @param obj  the object to append, null uses null text
 * @param width  the fixed field width, zero or negative has no effect
 * @param padChar  the pad character to use
 * @return this, to enable chaining
 */
public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) {
    if (width > 0) {
        ensureCapacity(size + width);
        String str = (obj == null ? getNullText() : obj.toString());
        int strLen = str.length();
        if (strLen >= width) {
            str.getChars(strLen - width, strLen, buffer, size);
        } else {
            int padLen = width - strLen;
            for (int i = 0; i < padLen; i++) {
                buffer[size + i] = padChar;
            }
            str.getChars(0, strLen, buffer, size + padLen);
        }
        size += width;
    }
    return this;
}","public void test226342() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(32);
    // Undeclared exception!
    try {
        strBuilder0.appendFixedWidthPadLeft((Object) null, 32, 'M');
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test227343() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.appendPadding((-1272), '<');
    assertEquals(32, strBuilder1.capacity());
}",""
"public int nextIndex() {
    return tokenPos;
}","public void test228344() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, (String) null);
    assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
}","/**
 * Gets the index of the next token to return.
 *
 * @return the next token index
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test228345() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, (String) null);
    assertEquals(30, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test229346() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(5);
    StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, """");
    assertEquals(5, strBuilder1.capacity());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test230347() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(1584);
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    Integer integer0 = new Integer(1584);
    linkedList0.add(integer0);
    linkedList0.add(integer0);
    strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test231348() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(1584);
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    Integer integer0 = new Integer(1584);
    linkedList0.add(integer0);
    StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
    char[] charArray0 = new char[3];
    StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
    StrBuilder strBuilder2 = strBuilder1.append(charArray0);
    boolean boolean0 = strBuilder2.contains(strMatcher0);
    assertEquals(31, strBuilder1.length());
}",""
"public boolean contains(StrMatcher matcher) {
    return indexOf(matcher, 0) >= 0;
}","public void test231349() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(1584);
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    Integer integer0 = new Integer(1584);
    linkedList0.add(integer0);
    StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
    char[] charArray0 = new char[3];
    StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
    StrBuilder strBuilder2 = strBuilder1.append(charArray0);
    boolean boolean0 = strBuilder2.contains(strMatcher0);
    assertTrue(boolean0);
}","/**
 * Checks if the string builder contains a string matched using the
 * specified matcher.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to search for the character
 * 'a' followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @return true if the matcher finds a match in the builder
 */"
"public boolean isEmpty() {
    return size == 0;
}","public void test232350() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(105);
    LinkedList<Object> linkedList0 = new LinkedList<Object>();
    linkedList0.add((Object) strBuilder0);
    strBuilder0.appendWithSeparators((Collection) linkedList0, ""java.specification.version"");
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test233351() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
    StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, ""t"");
    assertEquals(2, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test234352() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Af1D>yz|[>VCfcld=-,"");
    StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, ""<m(ro>)wKc"");
    assertEquals(51, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test234353() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Af1D>yz|[>VCfcld=-,"");
    StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, ""<m(ro>)wKc"");
    assertEquals(19, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test235354() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""$>G*(EL"");
    Object[] objectArray0 = new Object[0];
    StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, ""(a&dT[5.S6}[x~"");
    assertEquals(7, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test235355() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""$>G*(EL"");
    Object[] objectArray0 = new Object[0];
    StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, ""(a&dT[5.S6}[x~"");
    assertEquals(39, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test236356() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, """");
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test237357() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""'SM }A"");
    strBuilder0.append(false);
    assertEquals(11, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test238358() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    char[] charArray0 = new char[6];
    strBuilder0.append(charArray0, 3, 3);
    assertEquals(3, strBuilder0.size());
}",""
"public StrBuilder append(char[] chars, int startIndex, int length) {
    if (chars == null) {
        return appendNull();
    }
    if (startIndex < 0 || startIndex > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid startIndex: "" + length);
    }
    if (length < 0 || (startIndex + length) > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);
    }
    if (length > 0) {
        int len = length();
        ensureCapacity(len + length);
        System.arraycopy(chars, startIndex, buffer, len, length);
        size += length;
    }
    return this;
}","public void test240360() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[2];
    // Undeclared exception!
    try {
        strBuilder0.append(charArray0, 60, 60);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // Invalid startIndex: 60
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends a char array to the string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param chars  the char array to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */"
"public StrBuilder append(char[] chars, int startIndex, int length) {
    if (chars == null) {
        return appendNull();
    }
    if (startIndex < 0 || startIndex > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid startIndex: "" + length);
    }
    if (length < 0 || (startIndex + length) > chars.length) {
        throw new StringIndexOutOfBoundsException(""Invalid length: "" + length);
    }
    if (length > 0) {
        int len = length();
        ensureCapacity(len + length);
        System.arraycopy(chars, startIndex, buffer, len, length);
        size += length;
    }
    return this;
}","public void test241361() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    char[] charArray0 = new char[9];
    // Undeclared exception!
    try {
        strBuilder0.append(charArray0, (-3787), 0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // Invalid startIndex: 0
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends a char array to the string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param chars  the char array to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test242362() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.append((char[]) null, 0, 0);
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test243363() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    char[] charArray0 = new char[0];
    StrBuilder strBuilder1 = strBuilder0.append(charArray0);
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test244364() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(116);
    StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
    assertEquals(116, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test244365() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(116);
    StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
    assertEquals(0, strBuilder1.length());
}",""
"public StrBuilder append(StrBuilder str, int startIndex, int length) {
    if (str == null) {
        return appendNull();
    }
    if (startIndex < 0 || startIndex > str.length()) {
        throw new StringIndexOutOfBoundsException(""startIndex must be valid"");
    }
    if (length < 0 || (startIndex + length) > str.length()) {
        throw new StringIndexOutOfBoundsException(""length must be valid"");
    }
    if (length > 0) {
        int len = length();
        ensureCapacity(len + length);
        str.getChars(startIndex, startIndex + length, buffer, len);
        size += length;
    }
    return this;
}","public void test245366() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    // Undeclared exception!
    try {
        strBuilder0.append(strBuilder0, 0, 1230);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // length must be valid
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends part of a string builder to this string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */"
"public StrBuilder append(StrBuilder str, int startIndex, int length) {
    if (str == null) {
        return appendNull();
    }
    if (startIndex < 0 || startIndex > str.length()) {
        throw new StringIndexOutOfBoundsException(""startIndex must be valid"");
    }
    if (length < 0 || (startIndex + length) > str.length()) {
        throw new StringIndexOutOfBoundsException(""length must be valid"");
    }
    if (length > 0) {
        int len = length();
        ensureCapacity(len + length);
        str.getChars(startIndex, startIndex + length, buffer, len);
        size += length;
    }
    return this;
}","public void test246367() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Q\"""");
    // Undeclared exception!
    try {
        strBuilder0.append(strBuilder0, 2903, 112);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // startIndex must be valid
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends part of a string builder to this string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */"
"public StrBuilder append(StrBuilder str, int startIndex, int length) {
    if (str == null) {
        return appendNull();
    }
    if (startIndex < 0 || startIndex > str.length()) {
        throw new StringIndexOutOfBoundsException(""startIndex must be valid"");
    }
    if (length < 0 || (startIndex + length) > str.length()) {
        throw new StringIndexOutOfBoundsException(""length must be valid"");
    }
    if (length > 0) {
        int len = length();
        ensureCapacity(len + length);
        str.getChars(startIndex, startIndex + length, buffer, len);
        size += length;
    }
    return this;
}","public void test247368() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-533));
    // Undeclared exception!
    try {
        strBuilder0.append(strBuilder0, (-1289), 97);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // startIndex must be valid
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends part of a string builder to this string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test248369() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-284));
    StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, (-284), (-284));
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test249370() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    StrBuilder strBuilder1 = new StrBuilder((-1));
    StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
    assertEquals(3, strBuilder2.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test249371() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    StrBuilder strBuilder1 = new StrBuilder((-1));
    StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test249372() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    StrBuilder strBuilder1 = new StrBuilder((-1));
    StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
    assertEquals(35, strBuilder2.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test250373() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    strBuilder0.append(strBuilder0);
    assertEquals(6, strBuilder0.length());
}",""
"public StrBuilder append(StringBuffer str, int startIndex, int length) {
    if (str == null) {
        return appendNull();
    }
    if (startIndex < 0 || startIndex > str.length()) {
        throw new StringIndexOutOfBoundsException(""startIndex must be valid"");
    }
    if (length < 0 || (startIndex + length) > str.length()) {
        throw new StringIndexOutOfBoundsException(""length must be valid"");
    }
    if (length > 0) {
        int len = length();
        ensureCapacity(len + length);
        str.getChars(startIndex, startIndex + length, buffer, len);
        size += length;
    }
    return this;
}","public void test251374() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StringBuffer stringBuffer0 = new StringBuffer();
    // Undeclared exception!
    try {
        strBuilder0.append(stringBuffer0, 0, 33);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // length must be valid
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends part of a string buffer to this string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test252375() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StringBuffer stringBuffer0 = new StringBuffer();
    StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
    assertEquals(32, strBuilder1.capacity());
}",""
"public StrBuilder append(StringBuffer str, int startIndex, int length) {
    if (str == null) {
        return appendNull();
    }
    if (startIndex < 0 || startIndex > str.length()) {
        throw new StringIndexOutOfBoundsException(""startIndex must be valid"");
    }
    if (length < 0 || (startIndex + length) > str.length()) {
        throw new StringIndexOutOfBoundsException(""length must be valid"");
    }
    if (length > 0) {
        int len = length();
        ensureCapacity(len + length);
        str.getChars(startIndex, startIndex + length, buffer, len);
        size += length;
    }
    return this;
}","public void test253376() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""1B1/lA%8;b"");
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""1B1/lA%8;b"");
    // Undeclared exception!
    try {
        strBuilder0.append(stringBuffer0, (-2286), (-2286));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // startIndex must be valid
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends part of a string buffer to this string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test254377() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 9, 0);
    assertEquals(32, strBuilder1.capacity());
}",""
"public StrBuilder append(StringBuffer str, int startIndex, int length) {
    if (str == null) {
        return appendNull();
    }
    if (startIndex < 0 || startIndex > str.length()) {
        throw new StringIndexOutOfBoundsException(""startIndex must be valid"");
    }
    if (length < 0 || (startIndex + length) > str.length()) {
        throw new StringIndexOutOfBoundsException(""length must be valid"");
    }
    if (length > 0) {
        int len = length();
        ensureCapacity(len + length);
        str.getChars(startIndex, startIndex + length, buffer, len);
        size += length;
    }
    return this;
}","public void test255378() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    // Undeclared exception!
    try {
        strBuilder0.append(stringBuffer0, 2, 2);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // startIndex must be valid
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends part of a string buffer to this string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test256379() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StringBuffer stringBuffer0 = new StringBuffer();
    StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test257380() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(9);
    StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
    assertEquals(9, strBuilder1.capacity());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test258381() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StringBuffer stringBuffer0 = new StringBuffer(""V13;0hu5L-%"");
    strBuilder0.append(stringBuffer0);
    int int0 = strBuilder0.lastIndexOf(""org.apache.commons.lang.text.StrBuilder"", 0);
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"public int lastIndexOf(String str, int startIndex) {
    startIndex = (startIndex >= size ? size - 1 : startIndex);
    if (str == null || startIndex < 0) {
        return -1;
    }
    int strLen = str.length();
    if (strLen > 0 && strLen <= size) {
        if (strLen == 1) {
            return lastIndexOf(str.charAt(0), startIndex);
        }
        outer: for (int i = startIndex - strLen + 1; i >= 0; i--) {
            for (int j = 0; j < strLen; j++) {
                if (str.charAt(j) != buffer[i + j]) {
                    continue outer;
                }
            }
            return i;
        }
    } else if (strLen == 0) {
        return startIndex;
    }
    return -1;
}","public void test258382() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StringBuffer stringBuffer0 = new StringBuffer(""V13;0hu5L-%"");
    strBuilder0.append(stringBuffer0);
    int int0 = strBuilder0.lastIndexOf(""org.apache.commons.lang.text.StrBuilder"", 0);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder to find the last reference to the specified
 * string starting searching from the given index.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @param startIndex  the index to start at, invalid index rounded to edge
 * @return the last index of the string, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test259383() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.append(""9Ay"", 0, 0);
    assertEquals(32, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test259384() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.append(""9Ay"", 0, 0);
    assertEquals(0, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test260385() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    strBuilder0.append(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"", 1, 1);
    assertEquals(57, strBuilder0.size());
}",""
"public StrBuilder append(String str, int startIndex, int length) {
    if (str == null) {
        return appendNull();
    }
    if (startIndex < 0 || startIndex > str.length()) {
        throw new StringIndexOutOfBoundsException(""startIndex must be valid"");
    }
    if (length < 0 || (startIndex + length) > str.length()) {
        throw new StringIndexOutOfBoundsException(""length must be valid"");
    }
    if (length > 0) {
        int len = length();
        ensureCapacity(len + length);
        str.getChars(startIndex, startIndex + length, buffer, len);
        size += length;
    }
    return this;
}","public void test261386() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""user.home"");
    // Undeclared exception!
    try {
        strBuilder0.append(""java.vendor.url"", 3786, 5012);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // startIndex must be valid
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends part of a string to this string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */"
"public StrBuilder append(String str, int startIndex, int length) {
    if (str == null) {
        return appendNull();
    }
    if (startIndex < 0 || startIndex > str.length()) {
        throw new StringIndexOutOfBoundsException(""startIndex must be valid"");
    }
    if (length < 0 || (startIndex + length) > str.length()) {
        throw new StringIndexOutOfBoundsException(""length must be valid"");
    }
    if (length > 0) {
        int len = length();
        ensureCapacity(len + length);
        str.getChars(startIndex, startIndex + length, buffer, len);
        size += length;
    }
    return this;
}","public void test262387() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-2281));
    // Undeclared exception!
    try {
        strBuilder0.append(""startIndex must be valid"", (-2281), (-2281));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // startIndex must be valid
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Appends part of a string to this string builder.
 * Appending null will call {@link #appendNull()}.
 *
 * @param str  the string to append
 * @param startIndex  the start index, inclusive, must be valid
 * @param length  the length to append, must be valid
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test263388() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(1584);
    StrBuilder strBuilder1 = strBuilder0.append((String) null, 3032, (-5670));
    assertEquals(1584, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test264389() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    StrBuilder strBuilder1 = strBuilder0.append((String) null);
    assertEquals(2, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test265390() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    StrBuilder strBuilder1 = strBuilder0.appendNull();
    assertEquals(2, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test266391() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrBuilder strBuilder1 = strBuilder0.setNewLineText("" \t\n\r\f"");
    strBuilder1.appendNewLine();
    assertEquals(5, strBuilder1.size());
}",""
"public void getChars(int startIndex, int endIndex, char[] destination, int destinationIndex) {
    if (startIndex < 0) {
        throw new StringIndexOutOfBoundsException(startIndex);
    }
    if (endIndex < 0 || endIndex > length()) {
        throw new StringIndexOutOfBoundsException(endIndex);
    }
    if (startIndex > endIndex) {
        throw new StringIndexOutOfBoundsException(""end < start"");
    }
    System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);
}","public void test267392() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Mi-"");
    StrMatcher strMatcher0 = StrMatcher.tabMatcher();
    StrBuilder strBuilder1 = strBuilder0.append((Object) strMatcher0);
    char[] charArray0 = new char[7];
    // Undeclared exception!
    try {
        strBuilder1.getChars(2365, 48, charArray0, 2);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // end < start
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Copies the character array into the specified array.
 *
 * @param startIndex  first index to copy, inclusive, must be valid
 * @param endIndex  last index, exclusive, must be valid
 * @param destination  the destination array, must not be null or too small
 * @param destinationIndex  the index to start copying in destination
 * @throws NullPointerException if the array is null
 * @throws IndexOutOfBoundsException if any index is invalid
 */"
"public void getChars(int startIndex, int endIndex, char[] destination, int destinationIndex) {
    if (startIndex < 0) {
        throw new StringIndexOutOfBoundsException(startIndex);
    }
    if (endIndex < 0 || endIndex > length()) {
        throw new StringIndexOutOfBoundsException(endIndex);
    }
    if (startIndex > endIndex) {
        throw new StringIndexOutOfBoundsException(""end < start"");
    }
    System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);
}","public void test268393() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    char[] charArray0 = new char[3];
    // Undeclared exception!
    try {
        strBuilder0.getChars(0, 48, charArray0, (-750));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 48
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Copies the character array into the specified array.
 *
 * @param startIndex  first index to copy, inclusive, must be valid
 * @param endIndex  last index, exclusive, must be valid
 * @param destination  the destination array, must not be null or too small
 * @param destinationIndex  the index to start copying in destination
 * @throws NullPointerException if the array is null
 * @throws IndexOutOfBoundsException if any index is invalid
 */"
"public void getChars(int startIndex, int endIndex, char[] destination, int destinationIndex) {
    if (startIndex < 0) {
        throw new StringIndexOutOfBoundsException(startIndex);
    }
    if (endIndex < 0 || endIndex > length()) {
        throw new StringIndexOutOfBoundsException(endIndex);
    }
    if (startIndex > endIndex) {
        throw new StringIndexOutOfBoundsException(""end < start"");
    }
    System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);
}","public void test269394() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""*lh#f>4"");
    // Undeclared exception!
    try {
        strBuilder0.getChars(3, (-611), (char[]) null, 3);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -611
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Copies the character array into the specified array.
 *
 * @param startIndex  first index to copy, inclusive, must be valid
 * @param endIndex  last index, exclusive, must be valid
 * @param destination  the destination array, must not be null or too small
 * @param destinationIndex  the index to start copying in destination
 * @throws NullPointerException if the array is null
 * @throws IndexOutOfBoundsException if any index is invalid
 */"
"public void getChars(int startIndex, int endIndex, char[] destination, int destinationIndex) {
    if (startIndex < 0) {
        throw new StringIndexOutOfBoundsException(startIndex);
    }
    if (endIndex < 0 || endIndex > length()) {
        throw new StringIndexOutOfBoundsException(endIndex);
    }
    if (startIndex > endIndex) {
        throw new StringIndexOutOfBoundsException(""end < start"");
    }
    System.arraycopy(buffer, startIndex, destination, destinationIndex, endIndex - startIndex);
}","public void test270395() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid startIndex: "");
    char[] charArray0 = new char[2];
    // Undeclared exception!
    try {
        strBuilder0.getChars((-872), 522, charArray0, 3);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -872
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Copies the character array into the specified array.
 *
 * @param startIndex  first index to copy, inclusive, must be valid
 * @param endIndex  last index, exclusive, must be valid
 * @param destination  the destination array, must not be null or too small
 * @param destinationIndex  the index to start copying in destination
 * @throws NullPointerException if the array is null
 * @throws IndexOutOfBoundsException if any index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test271396() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[4];
    char[] charArray1 = strBuilder0.getChars(charArray0);
    assertEquals(0, strBuilder0.length());
}",""
"public char[] getChars(char[] destination) {
    int len = length();
    if (destination == null || destination.length < len) {
        destination = new char[len];
    }
    System.arraycopy(buffer, 0, destination, 0, len);
    return destination;
}","public void test271397() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[4];
    char[] charArray1 = strBuilder0.getChars(charArray0);
    assertEquals(4, charArray1.length);
}","/**
 * Copies the character array into the specified array.
 *
 * @param destination  the destination array, null will cause an array to be created
 * @return the input array, unless that was null or too small
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test271398() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[4];
    char[] charArray1 = strBuilder0.getChars(charArray0);
    assertEquals(32, strBuilder0.capacity());
}",""
"public char[] getChars(char[] destination) {
    int len = length();
    if (destination == null || destination.length < len) {
        destination = new char[len];
    }
    System.arraycopy(buffer, 0, destination, 0, len);
    return destination;
}","public void test272399() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""java.awt.headless"");
    char[] charArray0 = new char[8];
    char[] charArray1 = strBuilder0.getChars(charArray0);
    assertEquals(17, charArray1.length);
}","/**
 * Copies the character array into the specified array.
 *
 * @param destination  the destination array, null will cause an array to be created
 * @return the input array, unless that was null or too small
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test272400() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""java.awt.headless"");
    char[] charArray0 = new char[8];
    char[] charArray1 = strBuilder0.getChars(charArray0);
    assertEquals(49, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test273401() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = strBuilder0.getChars((char[]) null);
    assertEquals(32, strBuilder0.capacity());
}",""
"public char[] getChars(char[] destination) {
    int len = length();
    if (destination == null || destination.length < len) {
        destination = new char[len];
    }
    System.arraycopy(buffer, 0, destination, 0, len);
    return destination;
}","public void test273402() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = strBuilder0.getChars((char[]) null);
    assertEquals(0, charArray0.length);
}","/**
 * Copies the character array into the specified array.
 *
 * @param destination  the destination array, null will cause an array to be created
 * @return the input array, unless that was null or too small
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test274403() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    Integer integer0 = new Integer(3);
    strBuilder0.append((Object) integer0);
    strBuilder0.toCharArray(3, 3);
    assertEquals(28, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test275404() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    strBuilder0.appendNewLine();
    strBuilder0.toCharArray(0, 51);
    assertEquals(1, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test276405() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.toCharArray();
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test277406() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    char[] charArray0 = strBuilder0.toCharArray();
    assertEquals(15, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Copies the builder's character array into a new character array.
 *
 * @return a new array that represents the contents of the builder
 */
public char[] toCharArray() {
    if (size == 0) {
        return ArrayUtils.EMPTY_CHAR_ARRAY;
    }
    char[] chars = new char[size];
    System.arraycopy(buffer, 0, chars, 0, size);
    return chars;
}","public void test277407() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    char[] charArray0 = strBuilder0.toCharArray();
    assertEquals(15, charArray0.length);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test277408() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    char[] charArray0 = strBuilder0.toCharArray();
    assertEquals(47, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test278409() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(113);
    strBuilder0.setLength(6);
    strBuilder0.deleteCharAt(4);
    assertEquals(5, strBuilder0.length());
}",""
"public StrBuilder deleteCharAt(int index) {
    if (index < 0 || index >= size) {
        throw new StringIndexOutOfBoundsException(index);
    }
    deleteImpl(index, index + 1, 1);
    return this;
}","public void test279410() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    // Undeclared exception!
    try {
        strBuilder0.deleteCharAt(0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 0
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Deletes the character at the specified index.
 *
 * @see #charAt(int)
 * @see #setCharAt(int, char)
 * @param index  the index to delete
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StrBuilder setCharAt(int index, char ch) {
    if (index < 0 || index >= length()) {
        throw new StringIndexOutOfBoundsException(index);
    }
    buffer[index] = ch;
    return this;
}","public void test280411() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    // Undeclared exception!
    try {
        strBuilder0.setCharAt(1830, 'N');
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 1830
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Sets the character at the specified index.
 *
 * @see #charAt(int)
 * @see #deleteCharAt(int)
 * @param index  the index to set
 * @param ch  the new character
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test281412() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    StrBuilder strBuilder1 = strBuilder0.setCharAt(1, 'X');
    assertEquals(56, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test281413() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""org.apache.commons.lang.text.StrBuilder$StrBuilderReader"");
    StrBuilder strBuilder1 = strBuilder0.setCharAt(1, 'X');
    assertEquals(88, strBuilder1.capacity());
}",""
"public StrBuilder setCharAt(int index, char ch) {
    if (index < 0 || index >= length()) {
        throw new StringIndexOutOfBoundsException(index);
    }
    buffer[index] = ch;
    return this;
}","public void test282414() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""3Le_A+48kMV_"");
    // Undeclared exception!
    try {
        strBuilder0.setCharAt((-1169), '8');
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -1169
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Sets the character at the specified index.
 *
 * @see #charAt(int)
 * @see #deleteCharAt(int)
 * @param index  the index to set
 * @param ch  the new character
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the character at the specified index.
 *
 * @see #setCharAt(int, char)
 * @see #deleteCharAt(int)
 * @param index  the index to retrieve, must be valid
 * @return the character at the index
 * @throws IndexOutOfBoundsException if the index is invalid
 */
public char charAt(int index) {
    if (index < 0 || index >= length()) {
        throw new StringIndexOutOfBoundsException(index);
    }
    return buffer[index];
}","public void test283415() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(5);
    // Undeclared exception!
    try {
        strBuilder0.charAt(1043);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 1043
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test284416() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    char char0 = strBuilder0.charAt(0);
    assertEquals(15, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the character at the specified index.
 *
 * @see #setCharAt(int, char)
 * @see #deleteCharAt(int)
 * @param index  the index to retrieve, must be valid
 * @return the character at the index
 * @throws IndexOutOfBoundsException if the index is invalid
 */
public char charAt(int index) {
    if (index < 0 || index >= length()) {
        throw new StringIndexOutOfBoundsException(index);
    }
    return buffer[index];
}","public void test284417() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    char char0 = strBuilder0.charAt(0);
    assertEquals('[', char0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test284418() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    char char0 = strBuilder0.charAt(0);
    assertEquals(47, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the character at the specified index.
 *
 * @see #setCharAt(int, char)
 * @see #deleteCharAt(int)
 * @param index  the index to retrieve, must be valid
 * @return the character at the index
 * @throws IndexOutOfBoundsException if the index is invalid
 */
public char charAt(int index) {
    if (index < 0 || index >= length()) {
        throw new StringIndexOutOfBoundsException(index);
    }
    return buffer[index];
}","public void test285419() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""<r[Y9y7;Zxf$2.^`So"");
    // Undeclared exception!
    try {
        strBuilder0.charAt((-1838));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -1838
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test286420() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    boolean boolean0 = strBuilder0.isEmpty();
    assertEquals(32, strBuilder0.capacity());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test286421() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    boolean boolean0 = strBuilder0.isEmpty();
    assertTrue(boolean0);
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test287422() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Mi-"");
    boolean boolean0 = strBuilder0.isEmpty();
    assertEquals(35, strBuilder0.capacity());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test287423() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Mi-"");
    boolean boolean0 = strBuilder0.isEmpty();
    assertFalse(boolean0);
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test287424() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Mi-"");
    boolean boolean0 = strBuilder0.isEmpty();
    assertEquals(3, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test288426() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.minimizeCapacity();
    StringBuffer stringBuffer0 = new StringBuffer();
    strBuilder0.append(stringBuffer0);
    assertEquals(0, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test289427() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid olength: "");
    strBuilder0.append((Object) strBuilder0);
    strBuilder0.minimizeCapacity();
    assertEquals(67, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test290428() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1263));
    StrBuilder strBuilder1 = strBuilder0.setLength(102);
    strBuilder1.insert(102, (String) null);
    assertEquals(102, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test290429() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1263));
    StrBuilder strBuilder1 = strBuilder0.setLength(102);
    strBuilder1.insert(102, (String) null);
    assertEquals(102, strBuilder0.size());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test291430() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.setLength(0);
    assertTrue(strBuilder1.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test291431() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.setLength(0);
    assertEquals(32, strBuilder1.capacity());
}",""
"public StrBuilder setLength(int length) {
    if (length < 0) {
        throw new StringIndexOutOfBoundsException(length);
    }
    if (length < size) {
        size = length;
    } else if (length > size) {
        ensureCapacity(length);
        int oldEnd = size;
        int newEnd = length;
        size = length;
        for (int i = oldEnd; i < newEnd; i++) {
            buffer[i] = '\0';
        }
    }
    return this;
}","public void test292432() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    // Undeclared exception!
    try {
        strBuilder0.setLength((-128));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -128
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Updates the length of the builder by either dropping the last characters
 * or adding filler of unicode zero.
 *
 * @param length  the length to set to, must be zero or positive
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the length is negative
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test293433() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    assertEquals(2, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test293434() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    strBuilder0.setLength(0);
    assertEquals(0, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test294435() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.setNullText("""");
    assertEquals(32, strBuilder1.capacity());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test295436() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder strBuilder1 = strBuilder0.setNullText(""baA"");
    strBuilder1.appendNull();
    assertFalse(strBuilder1.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"public StrBuilder deleteCharAt(int index) {
    if (index < 0 || index >= size) {
        throw new StringIndexOutOfBoundsException(index);
    }
    deleteImpl(index, index + 1, 1);
    return this;
}","public void test296437() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((String) null);
    // Undeclared exception!
    try {
        strBuilder0.deleteCharAt((-1));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: -1
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Deletes the character at the specified index.
 *
 * @see #charAt(int)
 * @see #setCharAt(int, char)
 * @param index  the index to delete
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test298439() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[4];
    StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
    strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test298440() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    char[] charArray0 = new char[4];
    StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
    strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
    assertEquals(0, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test299441() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid startIndex: "");
    StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
    strBuilder_StrBuilderWriter0.flush();
    assertEquals(52, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test299442() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid startIndex: "");
    StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
    strBuilder_StrBuilderWriter0.flush();
    assertEquals(20, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test299443() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Invalid startIndex: "");
    StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
    strBuilder_StrBuilderWriter0.flush();
    assertEquals(20, strBuilder0.size());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test300444() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
    char[] charArray0 = new char[1];
    strBuilder_StrBuilderWriter0.write(charArray0);
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test300445() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
    char[] charArray0 = new char[1];
    strBuilder_StrBuilderWriter0.write(charArray0);
    assertEquals(1, strBuilder0.size());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test301446() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
    strBuilder_StrBuilderWriter0.write((-2057));
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test301447() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
    strBuilder_StrBuilderWriter0.write((-2057));
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test302448() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""*lh#f>4"");
    StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
    strBuilder_StrBuilderWriter0.close();
    assertEquals(39, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test302449() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""*lh#f>4"");
    StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
    strBuilder_StrBuilderWriter0.close();
    assertEquals(7, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test303450() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(0);
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    strBuilder_StrBuilderReader0.mark(1860);
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test304452() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3);
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
    assertEquals(3, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test305453() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(2);
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    strBuilder_StrBuilderReader0.reset();
    assertEquals(2, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test306455() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4"");
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    strBuilder_StrBuilderReader0.close();
    assertEquals(1, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test306456() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4"");
    StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
    strBuilder_StrBuilderReader0.close();
    assertEquals(33, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test307457() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    strBuilder0.append(1.0);
    assertEquals(3, strBuilder0.length());
}",""
"public StrBuilder deleteFirst(char ch) {
    for (int i = 0; i < size; i++) {
        if (buffer[i] == ch) {
            deleteImpl(i, i + 1, 1);
            break;
        }
    }
    return this;
}","public void test308458() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = strBuilder0.append((float) 0);
    char[] charArray0 = new char[8];
    strBuilder1.buffer = charArray0;
    // Undeclared exception!
    try {
        strBuilder1.deleteFirst('A');
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 8
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Deletes the character wherever it occurs in the builder.
 *
 * @param ch  the character to delete
 * @return this, to enable chaining
 */"
"public StrBuilder insert(int index, float value) {
    return insert(index, String.valueOf(value));
}","public void test309459() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder((-1298));
    // Undeclared exception!
    try {
        strBuilder0.insert(1, (float) 1);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 1
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts the value into this builder.
 *
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StrBuilder insert(int index, int value) {
    return insert(index, String.valueOf(value));
}","public void test310460() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    // Undeclared exception!
    try {
        strBuilder0.insert(115, 1918);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 115
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts the value into this builder.
 *
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StrBuilder insert(int index, long value) {
    return insert(index, String.valueOf(value));
}","public void test311461() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""'H]t,2vFypKA%nhMf="");
    // Undeclared exception!
    try {
        strBuilder0.insert(27, (-1L));
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
        //
        // String index out of range: 27
        //
        verifyException(""org.apache.commons.lang.text.StrBuilder"", e);
    }
}","/**
 * Inserts the value into this builder.
 *
 * @param index  the index to add at, must be valid
 * @param value  the value to insert
 * @return this, to enable chaining
 * @throws IndexOutOfBoundsException if the index is invalid
 */"
"public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {
    if (width > 0) {
        ensureCapacity(size + width);
        String str = (obj == null ? getNullText() : obj.toString());
        int strLen = str.length();
        if (strLen >= width) {
            str.getChars(0, strLen, buffer, size);
        } else {
            int padLen = width - strLen;
            str.getChars(0, strLen, buffer, size);
            for (int i = 0; i < padLen; i++) {
                buffer[size + strLen + i] = padChar;
            }
        }
        size += width;
    }
    return this;
}","public void test312462() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    // Undeclared exception!
    try {
        strBuilder0.appendFixedWidthPadRight((Object) null, 108, 'Z');
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Appends an object to the builder padding on the right to a fixed length.
 * The <code>toString</code> of the object is used.
 * If the object is larger than the length, the right hand side is lost.
 * If the object is null, null text value is used.
 *
 * @param obj  the object to append, null uses null text
 * @param width  the fixed field width, zero or negative has no effect
 * @param padChar  the pad character to use
 * @return this, to enable chaining
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test313463() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""sae|Wpu)I8nn#Y'#/"");
    strBuilder0.asTokenizer();
    assertEquals(49, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test313464() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""sae|Wpu)I8nn#Y'#/"");
    strBuilder0.asTokenizer();
    assertEquals(17, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test314465() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrMatcher strMatcher0 = StrMatcher.commaMatcher();
    StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
    assertEquals(15, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test314466() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrMatcher strMatcher0 = StrMatcher.commaMatcher();
    StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
    assertEquals(47, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test315467() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    strBuilder0.append((-1L));
    strBuilder0.trim();
    assertEquals(2, strBuilder0.length());
}",""
"public boolean isEmpty() {
    return size == 0;
}","public void test316468() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(3644);
    strBuilder0.append(3644);
    assertFalse(strBuilder0.isEmpty());
}","/**
 * Checks is the string builder is empty (convenience Collections API style method).
 * <p>
 * This method is the same as checking {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return <code>true</code> if the size is <code>0</code>.
 */"
"public int indexOf(String str) {
    return indexOf(str, 0);
}","public void test317469() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    int int0 = strBuilder0.indexOf(""(%"");
    assertEquals(0, int0);
}","/**
 * Searches the string builder to find the first reference to the specified string.
 * <p>
 * Note that a null input string will return -1, whereas the JDK throws an exception.
 *
 * @param str  the string to find, null returns -1
 * @return the first index of the string, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test317470() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    int int0 = strBuilder0.indexOf(""(%"");
    assertEquals(34, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test317471() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    int int0 = strBuilder0.indexOf(""(%"");
    assertEquals(2, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test318472() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) null, ""(%"");
    assertEquals(2, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test318473() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""(%"");
    StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) null, ""(%"");
    assertEquals(34, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test319474() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
    strBuilder1.replace(102, 102, (String) null);
    assertEquals(117, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test319475() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(102, 102, 'w');
    strBuilder1.replace(102, 102, (String) null);
    assertEquals(117, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test320476() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.appendPadding(1, 'e');
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    strBuilder1.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, """");
    boolean boolean0 = strBuilder1.contains('S');
    assertEquals(28, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Checks if the string builder contains the specified char.
 *
 * @param ch  the character to find
 * @return true if the builder contains the character
 */
public boolean contains(char ch) {
    char[] thisBuf = buffer;
    for (int i = 0; i < this.size; i++) {
        if (thisBuf[i] == ch) {
            return true;
        }
    }
    return false;
}","public void test320477() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrBuilder strBuilder1 = strBuilder0.appendPadding(1, 'e');
    StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
    strBuilder1.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, """");
    boolean boolean0 = strBuilder1.contains('S');
    assertTrue(boolean0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test321478() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    int int0 = strBuilder0.indexOf((StrMatcher) null);
    assertEquals(32, strBuilder0.capacity());
}",""
"public int indexOf(StrMatcher matcher) {
    return indexOf(matcher, 0);
}","public void test321479() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    int int0 = strBuilder0.indexOf((StrMatcher) null);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder using the matcher to find the first match.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @return the first index matched, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a String version of the string builder, creating a new instance
 * each time the method is called.
 * <p>
 * Note that unlike StringBuffer, the string version returned is
 * independent of the string builder.
 *
 * @return the builder as a String
 */
public String toString() {
    return new String(buffer, 0, size);
}","public void test322480() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    String string0 = strBuilder0.toString();
    assertEquals("""", string0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test322481() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    String string0 = strBuilder0.toString();
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test323482() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    String string0 = strBuilder0.substring(0);
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Extracts a portion of this string builder as a string.
 *
 * @param start  the start index, inclusive, must be valid
 * @return the new string
 * @throws IndexOutOfBoundsException if the index is invalid
 */
public String substring(int start) {
    return substring(start, size);
}","public void test323483() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    String string0 = strBuilder0.substring(0);
    assertEquals("""", string0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test324484() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    strBuilder0.asWriter();
    assertEquals(35, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test324485() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""4.0"");
    strBuilder0.asWriter();
    assertEquals(3, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Searches the string builder to find the first reference to the specified char.
 *
 * @param ch  the character to find
 * @return the first index of the character, or -1 if not found
 */
public int indexOf(char ch) {
    return indexOf(ch, 0);
}","public void test325486() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    int int0 = strBuilder0.indexOf('t');
    assertEquals((-1), int0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test325487() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    int int0 = strBuilder0.indexOf('t');
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test326488() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder();
    strBuilder0.getNewLineText();
    assertEquals(32, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test327489() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(105);
    int int0 = strBuilder0.capacity();
    assertEquals(105, int0);
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test328490() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrMatcher strMatcher0 = StrMatcher.commaMatcher();
    StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, """");
    assertEquals(47, strBuilder1.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test328491() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StrMatcher strMatcher0 = StrMatcher.commaMatcher();
    StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, """");
    assertEquals(15, strBuilder1.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test329492() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
    int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0);
    assertEquals(32, strBuilder0.capacity());
}",""
"public int lastIndexOf(StrMatcher matcher) {
    return lastIndexOf(matcher, size);
}","public void test329493() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder("""");
    StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();
    int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0);
    assertEquals((-1), int0);
}","/**
 * Searches the string builder using the matcher to find the last match.
 * <p>
 * Matchers can be used to perform advanced searching behaviour.
 * For example you could write a matcher to find the character 'a'
 * followed by a number.
 *
 * @param matcher  the matcher to use, null returns -1
 * @return the last index matched, or -1 if not found
 */"
"//-----------------------------------------------------------------------
/**
 * Gets the current size of the internal character array buffer.
 *
 * @return the capacity
 */
public int capacity() {
    return buffer.length;
}","public void test330495() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
    assertEquals(47, strBuilder0.capacity());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 *
 * @return the length
 */
public int length() {
    return size;
}","public void test330496() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""[q9vDLA7X}qlQLq"");
    StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
    assertEquals(15, strBuilder0.length());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test331497() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Mi-"");
    assertEquals(3, strBuilder0.size());
}",""
"//-----------------------------------------------------------------------
/**
 * Gets the length of the string builder.
 * <p>
 * This method is the same as {@link #length()} and is provided to match the
 * API of Collections.
 *
 * @return the length
 */
public int size() {
    return size;
}","public void test331498() throws Throwable {
    StrBuilder strBuilder0 = new StrBuilder(""Mi-"");
    strBuilder0.deleteFirst(""Mi-"");
    assertEquals(0, strBuilder0.size());
}",""
