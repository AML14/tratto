focal_method,test_prefix,docstring
"public String unescape(String str) {
    int firstAmp = str.indexOf('&');
    if (firstAmp < 0) {
        return str;
    } else {
        StringWriter stringWriter = createStringWriter(str);
        try {
            this.doUnescape(stringWriter, str, firstAmp);
        } catch (IOException e) {
            // This should never happen because ALL the StringWriter methods called by #escape(Writer, String)
            // do not throw IOExceptions.
            throw new UnhandledException(e);
        }
        return stringWriter.toString();
    }
}","public void test000() throws Throwable {
    Entities entities0 = Entities.HTML32;
    String string0 = entities0.unescape(""KS!!0%&{&8{b(W'LqVf"");
    assertEquals(""KS!!0%&{&8{b(W'LqVf"", string0);
}","/**
 * <p>
 * Unescapes the entities in a <code>String</code>.
 * </p>
 *
 * <p>
 * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), unescape(&quot;&amp;foo;&quot;) will return
 * &quot;\u00A1&quot;
 * </p>
 *
 * @param str
 *            The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */"
"public String unescape(String str) {
    int firstAmp = str.indexOf('&');
    if (firstAmp < 0) {
        return str;
    } else {
        StringWriter stringWriter = createStringWriter(str);
        try {
            this.doUnescape(stringWriter, str, firstAmp);
        } catch (IOException e) {
            // This should never happen because ALL the StringWriter methods called by #escape(Writer, String)
            // do not throw IOExceptions.
            throw new UnhandledException(e);
        }
        return stringWriter.toString();
    }
}","public void test011() throws Throwable {
    Entities entities0 = new Entities();
    String string0 = entities0.unescape(""&"");
    assertEquals(""&"", string0);
}","/**
 * <p>
 * Unescapes the entities in a <code>String</code>.
 * </p>
 *
 * <p>
 * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), unescape(&quot;&amp;foo;&quot;) will return
 * &quot;\u00A1&quot;
 * </p>
 *
 * @param str
 *            The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */"
"public String entityName(int value) {
    return map.name(value);
}","public void test066() throws Throwable {
    Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
    entities_ArrayEntityMap0.value("""");
    entities_ArrayEntityMap0.add("""", (-1));
    Entities entities0 = Entities.HTML32;
    String string0 = entities0.entityName(2059);
    assertNull(string0);
}","/**
 * <p>
 * Returns the name of the entity identified by the specified value.
 * </p>
 *
 * @param value
 *            the value to locate
 * @return entity name associated with the specified value
 */"
"public String escape(String str) {
    StringWriter stringWriter = createStringWriter(str);
    try {
        this.escape(stringWriter, str);
    } catch (IOException e) {
        // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not
        // throw IOExceptions.
        throw new UnhandledException(e);
    }
    return stringWriter.toString();
}","public void test1313() throws Throwable {
    Entities entities0 = new Entities();
    String string0 = entities0.escape("""");
    assertEquals("""", string0);
}","/**
 * <p>
 * Escapes the characters in a <code>String</code>.
 * </p>
 *
 * <p>
 * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), escape(&quot;\u00A1&quot;) will return
 * &quot;&amp;foo;&quot;
 * </p>
 *
 * @param str
 *            The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */"
"public int entityValue(String name) {
    return map.value(name);
}","public void test1414() throws Throwable {
    Entities entities0 = Entities.HTML40;
    int int0 = entities0.entityValue(""igrave"");
    assertEquals(236, int0);
}","/**
 * <p>
 * Returns the value of the entity identified by the specified name.
 * </p>
 *
 * @param name
 *            the name to locate
 * @return entity value associated with the specified name
 */"
"public String entityName(int value) {
    return map.name(value);
}","public void test1515() throws Throwable {
    Entities entities0 = new Entities();
    Entities.fillWithHtml40Entities(entities0);
    String string0 = entities0.entityName(34);
    assertEquals(""quot"", string0);
}","/**
 * <p>
 * Returns the name of the entity identified by the specified value.
 * </p>
 *
 * @param value
 *            the value to locate
 * @return entity name associated with the specified value
 */"
"public String unescape(String str) {
    int firstAmp = str.indexOf('&');
    if (firstAmp < 0) {
        return str;
    } else {
        StringWriter stringWriter = createStringWriter(str);
        try {
            this.doUnescape(stringWriter, str, firstAmp);
        } catch (IOException e) {
            // This should never happen because ALL the StringWriter methods called by #escape(Writer, String)
            // do not throw IOExceptions.
            throw new UnhandledException(e);
        }
        return stringWriter.toString();
    }
}","public void test1617() throws Throwable {
    Entities entities0 = Entities.HTML40;
    // Undeclared exception!
    try {
        entities0.unescape((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.Entities"", e);
    }
}","/**
 * <p>
 * Unescapes the entities in a <code>String</code>.
 * </p>
 *
 * <p>
 * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), unescape(&quot;&amp;foo;&quot;) will return
 * &quot;\u00A1&quot;
 * </p>
 *
 * @param str
 *            The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */"
"public void unescape(Writer writer, String str) throws IOException {
    int firstAmp = str.indexOf('&');
    if (firstAmp < 0) {
        writer.write(str);
        return;
    } else {
        doUnescape(writer, str, firstAmp);
    }
}","public void test1718() throws Throwable {
    Entities entities0 = Entities.HTML40;
    // Undeclared exception!
    try {
        entities0.HTML32.unescape((Writer) null, (String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.Entities"", e);
    }
}","/**
 * <p>
 * Unescapes the escaped entities in the <code>String</code> passed and writes the result to the
 * <code>Writer</code> passed.
 * </p>
 *
 * @param writer
 *            The <code>Writer</code> to write the results to; assumed to be non-null.
 * @param str
 *            The source <code>String</code> to unescape; assumed to be non-null.
 * @throws IOException
 *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
 *             methods.
 *
 * @see #escape(String)
 * @see Writer
 */"
"static void fillWithHtml40Entities(Entities entities) {
    entities.addEntities(BASIC_ARRAY);
    entities.addEntities(ISO8859_1_ARRAY);
    entities.addEntities(HTML40_ARRAY);
}","public void test1819() throws Throwable {
    // Undeclared exception!
    try {
        Entities.fillWithHtml40Entities((Entities) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.Entities"", e);
    }
}","/**
 * <p>
 * Fills the specified entities instance with HTML 40 entities.
 * </p>
 *
 * @param entities
 *            the instance to be filled.
 */"
"public String escape(String str) {
    StringWriter stringWriter = createStringWriter(str);
    try {
        this.escape(stringWriter, str);
    } catch (IOException e) {
        // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not
        // throw IOExceptions.
        throw new UnhandledException(e);
    }
    return stringWriter.toString();
}","public void test1920() throws Throwable {
    Entities entities0 = Entities.HTML40;
    // Undeclared exception!
    try {
        entities0.escape((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.Entities"", e);
    }
}","/**
 * <p>
 * Escapes the characters in a <code>String</code>.
 * </p>
 *
 * <p>
 * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), escape(&quot;\u00A1&quot;) will return
 * &quot;&amp;foo;&quot;
 * </p>
 *
 * @param str
 *            The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */"
"public void escape(Writer writer, String str) throws IOException {
    int len = str.length();
    for (int i = 0; i < len; i++) {
        char c = str.charAt(i);
        String entityName = this.entityName(c);
        if (entityName == null) {
            if (c > 0x7F) {
                writer.write(""&#"");
                writer.write(Integer.toString(c, 10));
                writer.write(';');
            } else {
                writer.write(c);
            }
        } else {
            writer.write('&');
            writer.write(entityName);
            writer.write(';');
        }
    }
}","public void test2021() throws Throwable {
    Entities entities0 = Entities.HTML32;
    // Undeclared exception!
    try {
        entities0.HTML32.escape((Writer) null, ""loz"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.Entities"", e);
    }
}","/**
 * <p>
 * Escapes the characters in the <code>String</code> passed and writes the result to the <code>Writer</code>
 * passed.
 * </p>
 *
 * @param writer
 *            The <code>Writer</code> to write the results of the escaping to. Assumed to be a non-null value.
 * @param str
 *            The <code>String</code> to escape. Assumed to be a non-null value.
 * @throws IOException
 *             when <code>Writer</code> passed throws the exception from calls to the {@link Writer#write(int)}
 *             methods.
 *
 * @see #escape(String)
 * @see Writer
 */"
"public int entityValue(String name) {
    return map.value(name);
}","public void test2122() throws Throwable {
    Entities entities0 = Entities.XML;
    Entities entities1 = Entities.HTML32;
    Entities.fillWithHtml40Entities(entities1);
    Entities entities2 = Entities.XML;
    Entities.fillWithHtml40Entities(entities2);
    entities0.HTML40.addEntity(""org.apache.commons.lang.Entities$LookupEntityMap"", 0);
    Entities.fillWithHtml40Entities(entities0);
    entities0.XML.map = null;
    entities0.HTML32.unescape(""1A-%<\""'"");
    // Undeclared exception!
    try {
        entities0.entityValue(""]s:E5`o@)+^4vaKA$r"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.Entities"", e);
    }
}","/**
 * <p>
 * Returns the value of the entity identified by the specified name.
 * </p>
 *
 * @param name
 *            the name to locate
 * @return entity value associated with the specified name
 */"
"public String entityName(int value) {
    return map.name(value);
}","public void test2223() throws Throwable {
    Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(703);
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""loz"";
    stringArray0[1] = ""8225"";
    entities_BinaryEntityMap0.names = stringArray0;
    int[] intArray0 = new int[9];
    intArray0[0] = 703;
    intArray0[1] = 703;
    intArray0[2] = 703;
    intArray0[3] = 703;
    intArray0[4] = 703;
    intArray0[6] = 703;
    intArray0[7] = 703;
    intArray0[8] = 703;
    entities_BinaryEntityMap0.ensureCapacity(0);
    entities_BinaryEntityMap0.values = intArray0;
    entities_BinaryEntityMap0.ensureCapacity(703);
    entities_BinaryEntityMap0.name((-870));
    Entities entities0 = Entities.XML;
    // Undeclared exception!
    try {
        entities0.entityName(703);
        //  fail(""Expecting exception: NullPointerException"");
        // Unstable assertion
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.Entities"", e);
    }
}","/**
 * <p>
 * Returns the name of the entity identified by the specified value.
 * </p>
 *
 * @param value
 *            the value to locate
 * @return entity name associated with the specified value
 */"
"public void addEntity(String name, int value) {
    map.add(name, value);
}","public void test2324() throws Throwable {
    Entities entities0 = new Entities();
    entities0.HTML32.addEntity("""", 217);
}","/**
 * <p>
 * Add an entity to this entity.
 * </p>
 *
 * @param name
 *            name of the entity
 * @param value
 *            vale of the entity
 */"
"public void addEntities(String[][] entityArray) {
    for (int i = 0; i < entityArray.length; ++i) {
        addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));
    }
}","public void test2425() throws Throwable {
    Entities entities0 = Entities.XML;
    // Undeclared exception!
    try {
        entities0.HTML40.addEntities((String[][]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>
 * Adds entities to this entity.
 * </p>
 *
 * @param entityArray
 *            array of entities to be added
 */"
"public void addEntities(String[][] entityArray) {
    for (int i = 0; i < entityArray.length; ++i) {
        addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));
    }
}","public void test2526() throws Throwable {
    Entities entities0 = Entities.HTML40;
    String[][] stringArray0 = new String[5][0];
    // Undeclared exception!
    try {
        entities0.XML.addEntities(stringArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>
 * Adds entities to this entity.
 * </p>
 *
 * @param entityArray
 *            array of entities to be added
 */"
"public void addEntities(String[][] entityArray) {
    for (int i = 0; i < entityArray.length; ++i) {
        addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));
    }
}","public void test2627() throws Throwable {
    Entities entities0 = new Entities();
    String[][] stringArray0 = new String[0][3];
    entities0.XML.addEntities(stringArray0);
    assertEquals(0, stringArray0.length);
}","/**
 * <p>
 * Adds entities to this entity.
 * </p>
 *
 * @param entityArray
 *            array of entities to be added
 */"
"public void addEntities(String[][] entityArray) {
    for (int i = 0; i < entityArray.length; ++i) {
        addEntity(entityArray[i][0], Integer.parseInt(entityArray[i][1]));
    }
}","public void test2728() throws Throwable {
    Entities entities0 = new Entities();
    String[][] stringArray0 = new String[5][2];
    // Undeclared exception!
    try {
        entities0.addEntities(stringArray0);
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // null
        //
        verifyException(""java.lang.Integer"", e);
    }
}","/**
 * <p>
 * Adds entities to this entity.
 * </p>
 *
 * @param entityArray
 *            array of entities to be added
 */"
"public String unescape(String str) {
    int firstAmp = str.indexOf('&');
    if (firstAmp < 0) {
        return str;
    } else {
        StringWriter stringWriter = createStringWriter(str);
        try {
            this.doUnescape(stringWriter, str, firstAmp);
        } catch (IOException e) {
            // This should never happen because ALL the StringWriter methods called by #escape(Writer, String)
            // do not throw IOExceptions.
            throw new UnhandledException(e);
        }
        return stringWriter.toString();
    }
}","public void test2930() throws Throwable {
    Entities entities0 = Entities.HTML32;
    String string0 = entities0.unescape("""");
    assertEquals("""", string0);
}","/**
 * <p>
 * Unescapes the entities in a <code>String</code>.
 * </p>
 *
 * <p>
 * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), unescape(&quot;&amp;foo;&quot;) will return
 * &quot;\u00A1&quot;
 * </p>
 *
 * @param str
 *            The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */"
"public String unescape(String str) {
    int firstAmp = str.indexOf('&');
    if (firstAmp < 0) {
        return str;
    } else {
        StringWriter stringWriter = createStringWriter(str);
        try {
            this.doUnescape(stringWriter, str, firstAmp);
        } catch (IOException e) {
            // This should never happen because ALL the StringWriter methods called by #escape(Writer, String)
            // do not throw IOExceptions.
            throw new UnhandledException(e);
        }
        return stringWriter.toString();
    }
}","public void test3031() throws Throwable {
    Entities entities0 = new Entities();
    String string0 = entities0.unescape(""$+kkY&NC1%.#"");
    assertEquals(""$+kkY&NC1%.#"", string0);
}","/**
 * <p>
 * Unescapes the entities in a <code>String</code>.
 * </p>
 *
 * <p>
 * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), unescape(&quot;&amp;foo;&quot;) will return
 * &quot;\u00A1&quot;
 * </p>
 *
 * @param str
 *            The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */"
"public int entityValue(String name) {
    return map.value(name);
}","public void test3233() throws Throwable {
    Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
    String[] stringArray0 = new String[4];
    stringArray0[0] = ""M)er1y"";
    stringArray0[1] = ""org.apache.commons.lang.IntHashMap"";
    stringArray0[2] = ""org.apache.commons.lang.IntHashMap"";
    stringArray0[3] = ""t},&&A~7>3MM8.kKeF"";
    entities_BinaryEntityMap0.names = stringArray0;
    entities_BinaryEntityMap0.ensureCapacity((-958));
    Entities entities0 = Entities.XML;
    Entities.fillWithHtml40Entities(entities0);
    Entities entities1 = Entities.XML;
    StringWriter stringWriter0 = new StringWriter();
    entities1.escape((Writer) stringWriter0, """");
    entities1.unescape((Writer) stringWriter0, """");
    Entities.fillWithHtml40Entities(entities1);
    entities0.addEntity(""org.apache.commons.lang.exception.NestableRuntimeException"", (-958));
    entities0.HTML32.escape((Writer) stringWriter0, ""org.apache.commons.lang.exception.NestableRuntimeException"");
    entities_BinaryEntityMap0.add("""", 1437);
    int int0 = entities0.entityValue("""");
    assertEquals((-1), int0);
}","/**
 * <p>
 * Returns the value of the entity identified by the specified name.
 * </p>
 *
 * @param name
 *            the name to locate
 * @return entity value associated with the specified name
 */"
"public String escape(String str) {
    StringWriter stringWriter = createStringWriter(str);
    try {
        this.escape(stringWriter, str);
    } catch (IOException e) {
        // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not
        // throw IOExceptions.
        throw new UnhandledException(e);
    }
    return stringWriter.toString();
}","public void test3334() throws Throwable {
    Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
    Entities entities0 = new Entities();
    entities_BinaryEntityMap0.size = 116;
    entities0.map = (Entities.EntityMap) entities_BinaryEntityMap0;
    // Undeclared exception!
    try {
        entities0.escape(""H3A"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>
 * Escapes the characters in a <code>String</code>.
 * </p>
 *
 * <p>
 * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), escape(&quot;\u00A1&quot;) will return
 * &quot;&amp;foo;&quot;
 * </p>
 *
 * @param str
 *            The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */"
"public String escape(String str) {
    StringWriter stringWriter = createStringWriter(str);
    try {
        this.escape(stringWriter, str);
    } catch (IOException e) {
        // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not
        // throw IOExceptions.
        throw new UnhandledException(e);
    }
    return stringWriter.toString();
}","public void test3435() throws Throwable {
    Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
    entities_BinaryEntityMap0.add(""$+kkY&NC1%#"", 116);
    Entities entities0 = new Entities();
    entities0.map = (Entities.EntityMap) entities_BinaryEntityMap0;
    String string0 = entities0.escape(""H3A"");
    assertEquals(""H3A"", string0);
}","/**
 * <p>
 * Escapes the characters in a <code>String</code>.
 * </p>
 *
 * <p>
 * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), escape(&quot;\u00A1&quot;) will return
 * &quot;&amp;foo;&quot;
 * </p>
 *
 * @param str
 *            The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */"
"public int entityValue(String name) {
    return map.value(name);
}","public void test3536() throws Throwable {
    Entities entities0 = Entities.HTML32;
    int int0 = entities0.entityValue((String) null);
    assertEquals((-1), int0);
}","/**
 * <p>
 * Returns the value of the entity identified by the specified name.
 * </p>
 *
 * @param name
 *            the name to locate
 * @return entity value associated with the specified name
 */"
"public String entityName(int value) {
    return map.name(value);
}","public void test3637() throws Throwable {
    Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
    entities_ArrayEntityMap0.value("""");
    entities_ArrayEntityMap0.add("""", (-1));
    Entities entities0 = Entities.HTML32;
    // Undeclared exception!
    try {
        entities0.entityName((-1));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.apache.commons.lang.Entities$LookupEntityMap"", e);
    }
}","/**
 * <p>
 * Returns the name of the entity identified by the specified value.
 * </p>
 *
 * @param value
 *            the value to locate
 * @return entity name associated with the specified value
 */"
"public String entityName(int value) {
    return map.name(value);
}","public void test3738() throws Throwable {
    Entities entities0 = Entities.HTML32;
    // Undeclared exception!
    try {
        entities0.HTML32.entityName((-854));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -854
        //
        verifyException(""org.apache.commons.lang.Entities$LookupEntityMap"", e);
    }
}","/**
 * <p>
 * Returns the name of the entity identified by the specified value.
 * </p>
 *
 * @param value
 *            the value to locate
 * @return entity name associated with the specified value
 */"
"public String escape(String str) {
    StringWriter stringWriter = createStringWriter(str);
    try {
        this.escape(stringWriter, str);
    } catch (IOException e) {
        // This should never happen because ALL the StringWriter methods called by #escape(Writer, String) do not
        // throw IOExceptions.
        throw new UnhandledException(e);
    }
    return stringWriter.toString();
}","public void test4041() throws Throwable {
    Entities entities0 = Entities.HTML40;
    Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
    String string0 = entities0.escape(""951"");
    assertEquals(""951"", string0);
}","/**
 * <p>
 * Escapes the characters in a <code>String</code>.
 * </p>
 *
 * <p>
 * For example, if you have called addEntity(&quot;foo&quot;, 0xA1), escape(&quot;\u00A1&quot;) will return
 * &quot;&amp;foo;&quot;
 * </p>
 *
 * @param str
 *            The <code>String</code> to escape.
 * @return A new escaped <code>String</code>.
 */"
"static void fillWithHtml40Entities(Entities entities) {
    entities.addEntities(BASIC_ARRAY);
    entities.addEntities(ISO8859_1_ARRAY);
    entities.addEntities(HTML40_ARRAY);
}","public void test4445() throws Throwable {
    Entities entities0 = Entities.HTML32;
    Entities.fillWithHtml40Entities(entities0);
}","/**
 * <p>
 * Fills the specified entities instance with HTML 40 entities.
 * </p>
 *
 * @param entities
 *            the instance to be filled.
 */"
