{
  "test551255" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test551255() throws Throwable {\n    FastDateFormat.getInstance(\"HmEwv:<G%uK-&\");\n}",
    "testName" : "test551255"
  },
  "test911386" : {
    "methodSignature" : "public String format(long millis)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test911386() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    String string0 = fastDateFormat0.format((long) 0);\n}",
    "testName" : "test911386"
  },
  "test701326" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test701326() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    FastDateFormat.getInstance(\"{363RHP)\", timeZone0);\n}",
    "testName" : "test701326"
  },
  "test45955" : {
    "methodSignature" : "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test45955() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);\n}",
    "testName" : "test45955"
  },
  "test0129" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0129() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0129"
  },
  "test27728" : {
    "methodSignature" : "public static FastDateFormat getTimeInstance(int style, Locale locale)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test27728() throws Throwable {\n    Locale locale0 = Locale.GERMAN;\n    FastDateFormat.getTimeInstance(739, locale0);\n}",
    "testName" : "test27728"
  },
  "test781361" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test781361() throws Throwable {\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat.getInstance(\"@AwdO6>Z*\", locale0);\n}",
    "testName" : "test781361"
  },
  "test691323" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test691323() throws Throwable {\n    Locale locale0 = new Locale(\"No date time pattern for locale: \", \"S<qo?y0\");\n    FastDateFormat.getInstance(\"S<qo?y0\", locale0);\n}",
    "testName" : "test691323"
  },
  "test17495" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test17495() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test17495"
  },
  "test17496" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test17496() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test17496"
  },
  "test19553" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test19553() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test19553"
  },
  "test17497" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test17497() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test17497"
  },
  "test19554" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test19554() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test19554"
  },
  "test39843" : {
    "methodSignature" : "public String format(Calendar calendar)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test39843() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n}",
    "testName" : "test39843"
  },
  "test17498" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test17498() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n    mockDate0.toString();\n}",
    "testName" : "test17498"
  },
  "test19555" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test19555() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test19555"
  },
  "test0130" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0130() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0130"
  },
  "test09294" : {
    "methodSignature" : "public TimeZone getTimeZone()",
    "methodName" : "getTimeZone",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09294() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n}",
    "testName" : "test09294"
  },
  "test0010" : {
    "methodSignature" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
    "methodName" : "getTimeZoneDisplay",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0010() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.UK;\n    FastDateFormat.getTimeZoneDisplay(timeZone0, true, (-764), locale0);\n}",
    "testName" : "test0010"
  },
  "test0131" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0131() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0131"
  },
  "test09292" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09292() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test09292"
  },
  "test09293" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09293() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test09293"
  },
  "test21636" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test21636() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n}",
    "testName" : "test21636"
  },
  "test511107" : {
    "methodSignature" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test511107() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    Calendar calendar0 = MockCalendar.getInstance(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\\u4E0A\\u534812\\u65F600\\u520600\\u79D2 GMT+00:00\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);\n}",
    "testName" : "test511107"
  },
  "test19567" : {
    "methodSignature" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test19567() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    Locale locale0 = Locale.ITALY;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);\n}",
    "testName" : "test19567"
  },
  "test831376" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test831376() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    ZoneId.getAvailableZoneIds();\n    timeZone0.setID(\"sa\");\n    zoneOffset0.getRules();\n    DecimalFormat decimalFormat0 = new DecimalFormat();\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"sa\");\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);\n    decimalFormat0.format((long) 1, stringBuffer0, fieldPosition0);\n    Locale locale0 = Locale.UK;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test831376"
  },
  "test09291" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09291() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test09291"
  },
  "test591265" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test591265() throws Throwable {\n    FastDateFormat.getInstance(\"<null>\");\n}",
    "testName" : "test591265"
  },
  "test14432" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test14432() throws Throwable {\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"'XETJC\", locale0);\n}",
    "testName" : "test14432"
  },
  "test39856" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test39856() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test39856"
  },
  "test37799" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test37799() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = new FastDateFormat(\"\", timeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test37799"
  },
  "test39855" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test39855() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test39855"
  },
  "test0147" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0147() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);\n    Date date0 = mockGregorianCalendar0.getGregorianChange();\n    mockGregorianCalendar0.toString();\n}",
    "testName" : "test0147"
  },
  "test871382" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test871382() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    ParsePosition parsePosition0 = new ParsePosition(1);\n    fastDateFormat0.parseObject(\"\", parsePosition0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test871382"
  },
  "test21649" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test21649() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test21649"
  },
  "test09281" : {
    "methodSignature" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09281() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test09281"
  },
  "test21648" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test21648() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test21648"
  },
  "test21647" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test21647() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test21647"
  },
  "test04156" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04156() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    List list0 = fastDateFormat0.parsePattern();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test04156"
  },
  "test06214" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06214() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test06214"
  },
  "test06216" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06216() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test06216"
  },
  "test06215" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06215() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test06215"
  },
  "test45972" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test45972() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test45972"
  },
  "test45971" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test45971() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test45971"
  },
  "test04154" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04154() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    List list0 = fastDateFormat0.parsePattern();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test04154"
  },
  "test04155" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04155() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    List list0 = fastDateFormat0.parsePattern();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test04155"
  },
  "test45973" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test45973() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 7, 2, 3, (-424), 0, 3, 1102, 7, 118);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test45973"
  },
  "test33749" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33749() throws Throwable {\n    FastDateFormat.getDateInstance((-2289));\n}",
    "testName" : "test33749"
  },
  "test671295" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test671295() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"W9\", timeZone0);\n}",
    "testName" : "test671295"
  },
  "test641272" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test641272() throws Throwable {\n    FastDateFormat.getInstance(\"*#m(F_fi<WsDs3\");\n}",
    "testName" : "test641272"
  },
  "test19579" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test19579() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    Locale locale0 = Locale.ITALY;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test19579"
  },
  "test14443" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test14443() throws Throwable {\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"'XETJC\", locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test14443"
  },
  "test14444" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test14444() throws Throwable {\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"'XETJC\", locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test14444"
  },
  "test0398" : {
    "methodSignature" : "public static FastDateFormat getInstance()",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0398() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n}",
    "testName" : "test0398"
  },
  "test37787" : {
    "methodSignature" : "protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "FastDateFormat",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test37787() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = new FastDateFormat(\"\", timeZone0, locale0);\n}",
    "testName" : "test37787"
  },
  "test14445" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test14445() throws Throwable {\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"'XETJC\", locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test14445"
  },
  "test04140" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04140() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test04140"
  },
  "test0153" : {
    "methodSignature" : "public StringBuffer format(Date date, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0153() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);\n    Date date0 = mockGregorianCalendar0.getGregorianChange();\n    StringBuffer stringBuffer0 = new StringBuffer(\"1970\\uB144 1\\uC6D4 1\\uC77C \\uBAA9\\uC694\\uC77C\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);\n}",
    "testName" : "test0153"
  },
  "test06202" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test06202() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test06202"
  },
  "test04141" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04141() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test04141"
  },
  "test04142" : {
    "methodSignature" : "protected List parsePattern()",
    "methodName" : "parsePattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04142() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    List list0 = fastDateFormat0.parsePattern();\n}",
    "testName" : "test04142"
  },
  "test21650" : {
    "methodSignature" : "public String format(long millis)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test21650() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.format(2480L);\n}",
    "testName" : "test21650"
  },
  "test19581" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test19581() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    Locale locale0 = Locale.ITALY;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test19581"
  },
  "test731336" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test731336() throws Throwable {\n    FastDateFormat.getInstance(\"IWw|\");\n}",
    "testName" : "test731336"
  },
  "test28729" : {
    "methodSignature" : "public static FastDateFormat getTimeInstance(int style)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test28729() throws Throwable {\n    FastDateFormat.getTimeInstance(100);\n}",
    "testName" : "test28729"
  },
  "test04139" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04139() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test04139"
  },
  "test19580" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test19580() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    Locale locale0 = Locale.ITALY;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test19580"
  },
  "test19589" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test19589() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n    Locale locale0 = Locale.ITALY;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);\n    mockGregorianCalendar0.toString();\n}",
    "testName" : "test19589"
  },
  "test12398" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test12398() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"yyyy'\\uB144' M'\\uC6D4' d'\\uC77C' EEEE a h'\\uC2DC' mm'\\uBD84' ss'\\uCD08' z\", (TimeZone) simpleTimeZone0, locale0);\n}",
    "testName" : "test12398"
  },
  "test39854" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test39854() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test39854"
  },
  "test531206" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test531206() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);\n    StringBuffer stringBuffer0 = new StringBuffer(3);\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);\n    mockGregorianCalendar0.toString();\n}",
    "testName" : "test531206"
  },
  "test531203" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test531203() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);\n    StringBuffer stringBuffer0 = new StringBuffer(3);\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test531203"
  },
  "test531202" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test531202() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);\n    StringBuffer stringBuffer0 = new StringBuffer(3);\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test531202"
  },
  "test531201" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test531201() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);\n    StringBuffer stringBuffer0 = new StringBuffer(3);\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test531201"
  },
  "test581264" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test581264() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField\");\n    FastDateFormat.getInstance(\"org.apache.commons.lang.time.FastDateFormat$TwoDigitMonthField\", (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test581264"
  },
  "test21664" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test21664() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.format(2480L);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test21664"
  },
  "test791369" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test791369() throws Throwable {\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat.getInstance((String) null, locale0);\n}",
    "testName" : "test791369"
  },
  "test21663" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test21663() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.format(2480L);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test21663"
  },
  "test21662" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test21662() throws Throwable {\n    Locale locale0 = Locale.FRANCE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.format(2480L);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test21662"
  },
  "test681317" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test681317() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat.getInstance(\"Unknown class: \", (TimeZone) simpleTimeZone0, locale0);\n}",
    "testName" : "test681317"
  },
  "test751344" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test751344() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2446), \"\");\n    FastDateFormat.getInstance(\"FastDateFormat[EEEE, MMMM d, yyyy h:mm:ss a z]\", (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test751344"
  },
  "test921387" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test921387() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test921387"
  },
  "test04127" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test04127() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.JAPANESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", timeZone0, locale0);\n}",
    "testName" : "test04127"
  },
  "test541254" : {
    "methodSignature" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test541254() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\\u4E0A\\u534812\\u65F600\\u520600\\u79D2 GMT+00:00\");\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);\n    fastDateFormat0.format((Object) \"\", stringBuffer0, fieldPosition0);\n}",
    "testName" : "test541254"
  },
  "test481020" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test481020() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(4120L);\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    mockDate0.toString();\n}",
    "testName" : "test481020"
  },
  "test821375" : {
    "methodSignature" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test821375() throws Throwable {\n    Locale locale0 = new Locale(\"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, (TimeZone) null, locale0);\n}",
    "testName" : "test821375"
  },
  "test501060" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test501060() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate();\n    boolean boolean0 = fastDateFormat0.equals(mockDate0);\n    mockDate0.toString();\n}",
    "testName" : "test501060"
  },
  "test481017" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test481017() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(4120L);\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test481017"
  },
  "test481019" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test481019() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(4120L);\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test481019"
  },
  "test481018" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test481018() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(4120L);\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test481018"
  },
  "test24703" : {
    "methodSignature" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
    "methodName" : "getTimeZoneDisplay",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test24703() throws Throwable {\n    Locale locale0 = Locale.GERMAN;\n    FastDateFormat.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);\n}",
    "testName" : "test24703"
  },
  "test481011" : {
    "methodSignature" : "public String format(Date date)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test481011() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(4120L);\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n}",
    "testName" : "test481011"
  },
  "test501058" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test501058() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate();\n    boolean boolean0 = fastDateFormat0.equals(mockDate0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test501058"
  },
  "test651280" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test651280() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat.getInstance(\"&c+c\", locale0);\n}",
    "testName" : "test651280"
  },
  "test08274" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08274() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    timeZone0.toString();\n}",
    "testName" : "test08274"
  },
  "test15446" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test15446() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n}",
    "testName" : "test15446"
  },
  "test43918" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test43918() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\" 9JtTd.$cJi'MXwGE\");\n    Locale locale0 = Locale.KOREA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test43918"
  },
  "test501057" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test501057() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate();\n    boolean boolean0 = fastDateFormat0.equals(mockDate0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test501057"
  },
  "test501052" : {
    "methodSignature" : "public boolean equals(Object obj)",
    "methodName" : "equals",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test501052() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate();\n    boolean boolean0 = fastDateFormat0.equals(mockDate0);\n}",
    "testName" : "test501052"
  },
  "test861380" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test861380() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.getLocale();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test861380"
  },
  "test20596" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test20596() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n}",
    "testName" : "test20596"
  },
  "test29732" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test29732() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    FastDateFormat.getDateTimeInstance((-339), (-339), timeZone0);\n}",
    "testName" : "test29732"
  },
  "test601266" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test601266() throws Throwable {\n    FastDateFormat.getInstance(\"F|&l\");\n}",
    "testName" : "test601266"
  },
  "test971393" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test971393() throws Throwable {\n    Locale locale0 = Locale.CANADA_FRENCH;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, locale0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 3, 3, 337);\n    StringBuffer stringBuffer0 = new StringBuffer();\n    fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);\n    mockGregorianCalendar0.toString();\n}",
    "testName" : "test971393"
  },
  "test34759" : {
    "methodSignature" : "public StringBuffer format(Date date, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test34759() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(10, 835, 0);\n    fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n}",
    "testName" : "test34759"
  },
  "test15452" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test15452() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test15452"
  },
  "test15451" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test15451() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test15451"
  },
  "test43919" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test43919() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\" 9JtTd.$cJi'MXwGE\");\n    Locale locale0 = Locale.KOREA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test43919"
  },
  "test511093" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test511093() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    Calendar calendar0 = MockCalendar.getInstance(locale0);\n}",
    "testName" : "test511093"
  },
  "test501059" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test501059() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate();\n    boolean boolean0 = fastDateFormat0.equals(mockDate0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test501059"
  },
  "test511092" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test511092() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test511092"
  },
  "test511091" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test511091() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test511091"
  },
  "test15453" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test15453() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"sa\");\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test15453"
  },
  "test511090" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test511090() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test511090"
  },
  "test40878" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test40878() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.hashCode();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test40878"
  },
  "test10321" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test10321() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n}",
    "testName" : "test10321"
  },
  "test40877" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test40877() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.hashCode();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test40877"
  },
  "test40876" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test40876() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.hashCode();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test40876"
  },
  "test43906" : {
    "methodSignature" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test43906() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\" 9JtTd.$cJi'MXwGE\");\n    Locale locale0 = Locale.KOREA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);\n}",
    "testName" : "test43906"
  },
  "test08268" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08268() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test08268"
  },
  "test08269" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08269() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test08269"
  },
  "test0118" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0118() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n}",
    "testName" : "test0118"
  },
  "test40872" : {
    "methodSignature" : "public int hashCode()",
    "methodName" : "hashCode",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test40872() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.hashCode();\n}",
    "testName" : "test40872"
  },
  "test08267" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08267() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test08267"
  },
  "test46974" : {
    "methodSignature" : "public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test46974() throws Throwable {\n    FastDateFormat.getDateInstance(103, (TimeZone) null, (Locale) null);\n}",
    "testName" : "test46974"
  },
  "test671301" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test671301() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"W9\", timeZone0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test671301"
  },
  "test671302" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test671302() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"W9\", timeZone0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test671302"
  },
  "test741337" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test741337() throws Throwable {\n    FastDateFormat.getInstance(\"\\u4E0A\\u534812\\u65F600\\u520600\\u79D2 GMT+00:00\");\n}",
    "testName" : "test741337"
  },
  "test671303" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test671303() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"W9\", timeZone0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test671303"
  },
  "test08253" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08253() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test08253"
  },
  "test08254" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08254() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test08254"
  },
  "test10332" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test10332() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test10332"
  },
  "test10333" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test10333() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test10333"
  },
  "test491021" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test491021() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n}",
    "testName" : "test491021"
  },
  "test721335" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test721335() throws Throwable {\n    Locale locale0 = Locale.KOREA;\n    FastDateFormat.getInstance(\" 9JtTd.$cJi'MXwGE\", locale0);\n}",
    "testName" : "test721335"
  },
  "test08252" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08252() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test08252"
  },
  "test10334" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test10334() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test10334"
  },
  "test10335" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test10335() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.getPattern();\n}",
    "testName" : "test10335"
  },
  "test491028" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test491028() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test491028"
  },
  "test491027" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test491027() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test491027"
  },
  "test491026" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test491026() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test491026"
  },
  "test08255" : {
    "methodSignature" : "public TimeZone getTimeZone()",
    "methodName" : "getTimeZone",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08255() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n}",
    "testName" : "test08255"
  },
  "test511074" : {
    "methodSignature" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test511074() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n}",
    "testName" : "test511074"
  },
  "test03115" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03115() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    int[] intArray0 = new int[6];\n    String string0 = fastDateFormat0.parseToken(\"#fgg0XqGjy$K(D\", intArray0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test03115"
  },
  "test03116" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03116() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    int[] intArray0 = new int[6];\n    String string0 = fastDateFormat0.parseToken(\"#fgg0XqGjy$K(D\", intArray0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test03116"
  },
  "test30733" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test30733() throws Throwable {\n    FastDateFormat.getDateTimeInstance(13, 31);\n}",
    "testName" : "test30733"
  },
  "test08242" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test08242() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2596, \"0\\\"ED.Cahr1Cm/{Vt\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test08242"
  },
  "test37800" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test37800() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = new FastDateFormat(\"\", timeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test37800"
  },
  "test37801" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test37801() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = new FastDateFormat(\"\", timeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test37801"
  },
  "test37802" : {
    "methodSignature" : "public String format(long millis)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test37802() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.ITALIAN;\n    FastDateFormat fastDateFormat0 = new FastDateFormat(\"\", timeZone0, locale0);\n    fastDateFormat0.format(0L);\n}",
    "testName" : "test37802"
  },
  "test10347" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test10347() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.getPattern();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test10347"
  },
  "test931388" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test931388() throws Throwable {\n    FastDateFormat.getDateTimeInstance(1960, 0, (Locale) null);\n}",
    "testName" : "test931388"
  },
  "test10348" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test10348() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.getPattern();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test10348"
  },
  "test10349" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test10349() throws Throwable {\n    Locale locale0 = Locale.GERMANY;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    String string0 = fastDateFormat0.getPattern();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test10349"
  },
  "test43920" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test43920() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\" 9JtTd.$cJi'MXwGE\");\n    Locale locale0 = Locale.KOREA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 2, timeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test43920"
  },
  "test03114" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03114() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    int[] intArray0 = new int[6];\n    String string0 = fastDateFormat0.parseToken(\"#fgg0XqGjy$K(D\", intArray0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test03114"
  },
  "test22686" : {
    "methodSignature" : "protected String parseToken(String pattern, int[] indexRef)",
    "methodName" : "parseToken",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22686() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    int[] intArray0 = new int[3];\n    fastDateFormat0.parseToken(\"\", intArray0);\n}",
    "testName" : "test22686"
  },
  "test03104" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03104() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test03104"
  },
  "test03105" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03105() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test03105"
  },
  "test25713" : {
    "methodSignature" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test25713() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"\");\n    Locale locale0 = Locale.forLanguageTag(\"A:=\");\n    FastDateFormat.getTimeInstance(2623, timeZone0, locale0);\n}",
    "testName" : "test25713"
  },
  "test03106" : {
    "methodSignature" : "protected String parseToken(String pattern, int[] indexRef)",
    "methodName" : "parseToken",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03106() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    int[] intArray0 = new int[6];\n    String string0 = fastDateFormat0.parseToken(\"#fgg0XqGjy$K(D\", intArray0);\n}",
    "testName" : "test03106"
  },
  "test661290" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test661290() throws Throwable {\n    ZoneId zoneId0 = ZoneId.systemDefault();\n    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);\n    Locale locale0 = new Locale(\"\", \"4Yaav@[swc8|\");\n    FastDateFormat.getInstance(\"4Yaav@[swc8|\", timeZone0, locale0);\n}",
    "testName" : "test661290"
  },
  "test16454" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test16454() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);\n}",
    "testName" : "test16454"
  },
  "test761345" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test761345() throws Throwable {\n    FastDateFormat.getInstance(\"C/\");\n}",
    "testName" : "test761345"
  },
  "test44928" : {
    "methodSignature" : "public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44928() throws Throwable {\n    Locale locale0 = new Locale(\"\", \"\", \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);\n}",
    "testName" : "test44928"
  },
  "test851378" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test851378() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    String string0 = fastDateFormat0.getPattern();\n}",
    "testName" : "test851378"
  },
  "test16459" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test16459() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test16459"
  },
  "test491042" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test491042() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));\n    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);\n    mockGregorianCalendar0.toString();\n}",
    "testName" : "test491042"
  },
  "test12415" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test12415() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"yyyy'\\uB144' M'\\uC6D4' d'\\uC77C' EEEE a h'\\uC2DC' mm'\\uBD84' ss'\\uCD08' z\", (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test12415"
  },
  "test12414" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test12414() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"yyyy'\\uB144' M'\\uC6D4' d'\\uC77C' EEEE a h'\\uC2DC' mm'\\uBD84' ss'\\uCD08' z\", (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test12414"
  },
  "test12416" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test12416() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"yyyy'\\uB144' M'\\uC6D4' d'\\uC77C' EEEE a h'\\uC2DC' mm'\\uBD84' ss'\\uCD08' z\", (TimeZone) simpleTimeZone0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test12416"
  },
  "test03103" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test03103() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test03103"
  },
  "test47997" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test47997() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"A:=\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);\n    mockDate0.toString();\n}",
    "testName" : "test47997"
  },
  "test41895" : {
    "methodSignature" : "public StringBuffer format(Calendar calendar, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test41895() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Locale locale0 = Locale.US;\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);\n    fastDateFormat0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);\n}",
    "testName" : "test41895"
  },
  "test47995" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test47995() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"A:=\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test47995"
  },
  "test47996" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test47996() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"A:=\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test47996"
  },
  "test16460" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test16460() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test16460"
  },
  "test35768" : {
    "methodSignature" : "public String format(Date date)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test35768() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    fastDateFormat0.format((Date) null);\n}",
    "testName" : "test35768"
  },
  "test16461" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test16461() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, (TimeZone) null);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test16461"
  },
  "test18521" : {
    "methodSignature" : "public String format(Date date)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test18521() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n}",
    "testName" : "test18521"
  },
  "test611267" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test611267() throws Throwable {\n    FastDateFormat.getInstance(\"*y%[}sjm@y\", (Locale) null);\n}",
    "testName" : "test611267"
  },
  "test491030" : {
    "methodSignature" : "public String format(Calendar calendar)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test491030() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));\n    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);\n}",
    "testName" : "test491030"
  },
  "test20603" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test20603() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test20603"
  },
  "test20602" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test20602() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test20602"
  },
  "test20601" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test20601() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test20601"
  },
  "test491038" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test491038() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));\n    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test491038"
  },
  "test47987" : {
    "methodSignature" : "public StringBuffer format(Date date, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test47987() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"A:=\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);\n}",
    "testName" : "test47987"
  },
  "test491037" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test491037() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));\n    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test491037"
  },
  "test491036" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test491036() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (Locale) null);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1466, 1, 0, (-1));\n    String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test491036"
  },
  "test09312" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09312() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    timeZone0.toString();\n}",
    "testName" : "test09312"
  },
  "test47994" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test47994() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    MockDate mockDate0 = new MockDate(0, (-1), 2444, 0, (-1));\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"A:=\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test47994"
  },
  "test09308" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09308() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test09308"
  },
  "test18533" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test18533() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test18533"
  },
  "test571257" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test571257() throws Throwable {\n    FastDateFormat.getInstance(\".hp7jH`/1_94X/S#\");\n}",
    "testName" : "test571257"
  },
  "test18534" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test18534() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test18534"
  },
  "test18535" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test18535() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test18535"
  },
  "test18536" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test18536() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    String string0 = fastDateFormat0.format((Date) mockDate0);\n    mockDate0.toString();\n}",
    "testName" : "test18536"
  },
  "test961391" : {
    "methodSignature" : "public Object parseObject(String source, ParsePosition pos)",
    "methodName" : "parseObject",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test961391() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, timeZone0);\n    fastDateFormat0.parseObject(\"\\u683C\\u6797\\u5A01\\u6CBB\\u65F6\\u95F4\", (ParsePosition) null);\n}",
    "testName" : "test961391"
  },
  "test0167" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0167() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);\n    Date date0 = mockGregorianCalendar0.getGregorianChange();\n    StringBuffer stringBuffer0 = new StringBuffer(\"1970\\uB144 1\\uC6D4 1\\uC77C \\uBAA9\\uC694\\uC77C\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0167"
  },
  "test0288" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0288() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0288"
  },
  "test0168" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0168() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);\n    Date date0 = mockGregorianCalendar0.getGregorianChange();\n    StringBuffer stringBuffer0 = new StringBuffer(\"1970\\uB144 1\\uC6D4 1\\uC77C \\uBAA9\\uC694\\uC77C\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0168"
  },
  "test0289" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0289() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0289"
  },
  "test20619" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test20619() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test20619"
  },
  "test0166" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0166() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);\n    Date date0 = mockGregorianCalendar0.getGregorianChange();\n    StringBuffer stringBuffer0 = new StringBuffer(\"1970\\uB144 1\\uC6D4 1\\uC77C \\uBAA9\\uC694\\uC77C\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0166"
  },
  "test20613" : {
    "methodSignature" : "public String format(Calendar calendar)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test20613() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n}",
    "testName" : "test20613"
  },
  "test531166" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test531166() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n}",
    "testName" : "test531166"
  },
  "test09306" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09306() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test09306"
  },
  "test901385" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test901385() throws Throwable {\n    FastDateFormat.getTimeInstance(0);\n    LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2);\n}",
    "testName" : "test901385"
  },
  "test09307" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test09307() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1, (TimeZone) simpleTimeZone0);\n    TimeZone timeZone0 = fastDateFormat0.getTimeZone();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test09307"
  },
  "test44941" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44941() throws Throwable {\n    Locale locale0 = new Locale(\"\", \"\", \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test44941"
  },
  "test771353" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test771353() throws Throwable {\n    Locale locale0 = Locale.forLanguageTag(\"%!6BqT/ 2.y\");\n    FastDateFormat.getInstance(\"%!6BqT/ 2.y\", locale0);\n}",
    "testName" : "test771353"
  },
  "test801372" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test801372() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();\n    fastDateFormat1.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test801372"
  },
  "test801371" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test801371() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();\n    fastDateFormat1.getMaxLengthEstimate();\n}",
    "testName" : "test801371"
  },
  "test26720" : {
    "methodSignature" : "public static FastDateFormat getTimeInstance(int style, TimeZone timeZone)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test26720() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"IH2\");\n    FastDateFormat.getTimeInstance(15, (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test26720"
  },
  "test44940" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44940() throws Throwable {\n    Locale locale0 = new Locale(\"\", \"\", \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test44940"
  },
  "test801370" : {
    "methodSignature" : "public static FastDateFormat getInstance()",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test801370() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();\n}",
    "testName" : "test801370"
  },
  "test23695" : {
    "methodSignature" : "protected String parseToken(String pattern, int[] indexRef)",
    "methodName" : "parseToken",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test23695() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    fastDateFormat0.parseToken(\"\", (int[]) null);\n}",
    "testName" : "test23695"
  },
  "test0283" : {
    "methodSignature" : "public static FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0283() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n}",
    "testName" : "test0283"
  },
  "test31740" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style, TimeZone timeZone)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test31740() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(6, \"`{,s8u`5e* '8 v\");\n    FastDateFormat.getDateInstance(6, (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test31740"
  },
  "test05172" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05172() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    List list0 = fastDateFormat0.parsePattern();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test05172"
  },
  "test36774" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test36774() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test36774"
  },
  "test44939" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44939() throws Throwable {\n    Locale locale0 = new Locale(\"\", \"\", \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) null, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test44939"
  },
  "test05174" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05174() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    List list0 = fastDateFormat0.parsePattern();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test05174"
  },
  "test11357" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11357() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n}",
    "testName" : "test11357"
  },
  "test05173" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05173() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    List list0 = fastDateFormat0.parsePattern();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test05173"
  },
  "test0295" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0295() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.init();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test0295"
  },
  "test13417" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test13417() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null);\n}",
    "testName" : "test13417"
  },
  "test38814" : {
    "methodSignature" : "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf)",
    "methodName" : "applyRules",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test38814() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    StringBuffer stringBuffer0 = new StringBuffer(\"No date time pattern for locale: \");\n    fastDateFormat0.applyRules((Calendar) null, stringBuffer0);\n}",
    "testName" : "test38814"
  },
  "test0296" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0296() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.init();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test0296"
  },
  "test531179" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test531179() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test531179"
  },
  "test0176" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0176() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, locale0);\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);\n    Date date0 = mockGregorianCalendar0.getGregorianChange();\n    StringBuffer stringBuffer0 = new StringBuffer(\"1970\\uB144 1\\uC6D4 1\\uC77C \\uBAA9\\uC694\\uC77C\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);\n    mockGregorianCalendar0.toString();\n}",
    "testName" : "test0176"
  },
  "test0297" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0297() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.init();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0297"
  },
  "test531178" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test531178() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test531178"
  },
  "test531177" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test531177() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test531177"
  },
  "test941389" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test941389() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    String string0 = fastDateFormat0.toString();\n}",
    "testName" : "test941389"
  },
  "test20621" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test20621() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test20621"
  },
  "test20620" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test20620() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\");\n    MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();\n    Calendar calendar0 = mockSimpleDateFormat0.getCalendar();\n    String string0 = fastDateFormat0.format(calendar0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test20620"
  },
  "test711327" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test711327() throws Throwable {\n    FastDateFormat.getInstance(\"L\");\n}",
    "testName" : "test711327"
  },
  "test0291" : {
    "methodSignature" : "protected void init()",
    "methodName" : "init",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0291() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.init();\n}",
    "testName" : "test0291"
  },
  "test36769" : {
    "methodSignature" : "public static FastDateFormat getTimeInstance(int style)",
    "methodName" : "getTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test36769() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n}",
    "testName" : "test36769"
  },
  "test17469" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test17469() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n}",
    "testName" : "test17469"
  },
  "test891384" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test891384() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3193, \"\");\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(3, 0, (TimeZone) simpleTimeZone0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test891384"
  },
  "test0290" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0290() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test0290"
  },
  "test13424" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test13424() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test13424"
  },
  "test11368" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11368() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test11368"
  },
  "test13422" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test13422() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test13422"
  },
  "test13423" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test13423() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test13423"
  },
  "test11369" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11369() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test11369"
  },
  "test631271" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test631271() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getDefault();\n    FastDateFormat.getInstance(\".y^g%D]]q!ZT\", timeZone0, (Locale) null);\n}",
    "testName" : "test631271"
  },
  "test531188" : {
    "methodSignature" : "public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test531188() throws Throwable {\n    Locale locale0 = Locale.KOREAN;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);\n    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 3, 2298);\n    StringBuffer stringBuffer0 = new StringBuffer(3);\n    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());\n    FieldPosition fieldPosition0 = new FieldPosition(format_Field0);\n    StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);\n}",
    "testName" : "test531188"
  },
  "test07227" : {
    "methodSignature" : "static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale)",
    "methodName" : "getTimeZoneDisplay",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test07227() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.MIN;\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    Locale locale0 = Locale.ENGLISH;\n    String string0 = FastDateFormat.getTimeZoneDisplay(timeZone0, false, 0, locale0);\n}",
    "testName" : "test07227"
  },
  "test05167" : {
    "methodSignature" : "protected List parsePattern()",
    "methodName" : "parsePattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test05167() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    List list0 = fastDateFormat0.parsePattern();\n}",
    "testName" : "test05167"
  },
  "test621268" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test621268() throws Throwable {\n    FastDateFormat.getInstance(\"$h]hz[im+[\", (TimeZone) null);\n}",
    "testName" : "test621268"
  },
  "test881383" : {
    "methodSignature" : "public String format(Calendar calendar)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test881383() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);\n    fastDateFormat0.format((Calendar) null);\n}",
    "testName" : "test881383"
  },
  "test841377" : {
    "methodSignature" : "public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test841377() throws Throwable {\n    TimeZone timeZone0 = TimeZone.getTimeZone(\"km\\\"=7X{|rJ\");\n    Locale locale0 = new Locale(\"4|<9 ,H| Do&/\", \"IUgG1T[MPmf6/yGLlvX\", \"km\\\"=7X{|rJ\");\n    FastDateFormat.getInstance(\"km\\\"=7X{|rJ\", timeZone0, locale0);\n}",
    "testName" : "test841377"
  },
  "test11371" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11371() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    int int0 = fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test11371"
  },
  "test11370" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11370() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test11370"
  },
  "test36777" : {
    "methodSignature" : "public StringBuffer format(long millis, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test36777() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    fastDateFormat0.format(0L, (StringBuffer) null);\n}",
    "testName" : "test36777"
  },
  "test36776" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test36776() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test36776"
  },
  "test36775" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test36775() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test36775"
  },
  "test951390" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test951390() throws Throwable {\n    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);\n    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);\n    int int0 = fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test951390"
  },
  "test521151" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test521151() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Long long0 = new Long((-1211L));\n    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test521151"
  },
  "test521153" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test521153() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Long long0 = new Long((-1211L));\n    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test521153"
  },
  "test521152" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test521152() throws Throwable {\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();\n    Long long0 = new Long((-1211L));\n    AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(long0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test521152"
  },
  "test511127" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test511127() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    Calendar calendar0 = MockCalendar.getInstance(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\\u4E0A\\u534812\\u65F600\\u520600\\u79D2 GMT+00:00\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test511127"
  },
  "test42896" : {
    "methodSignature" : "public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale)",
    "methodName" : "getDateTimeInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test42896() throws Throwable {\n    FastDateFormat.getDateTimeInstance((-1105), 0, (TimeZone) null, (Locale) null);\n}",
    "testName" : "test42896"
  },
  "test511126" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test511126() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    Calendar calendar0 = MockCalendar.getInstance(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\\u4E0A\\u534812\\u65F600\\u520600\\u79D2 GMT+00:00\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test511126"
  },
  "test511125" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test511125() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, 0, 0, 45, 0, 45, 0, 1);\n    Locale locale0 = Locale.CHINA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, (TimeZone) simpleTimeZone0, locale0);\n    Calendar calendar0 = MockCalendar.getInstance(locale0);\n    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) \"\\u4E0A\\u534812\\u65F600\\u520600\\u79D2 GMT+00:00\");\n    StringBuffer stringBuffer1 = fastDateFormat0.format(calendar0, stringBuffer0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test511125"
  },
  "test17480" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test17480() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test17480"
  },
  "test17481" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test17481() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test17481"
  },
  "test17482" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test17482() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test17482"
  },
  "test32748" : {
    "methodSignature" : "public static FastDateFormat getDateInstance(int style, Locale locale)",
    "methodName" : "getDateInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test32748() throws Throwable {\n    Locale locale0 = new Locale(\"\");\n    FastDateFormat.getDateInstance((-1), locale0);\n}",
    "testName" : "test32748"
  },
  "test561256" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test561256() throws Throwable {\n    FastDateFormat.getInstance(\"|~#+%|r<\");\n}",
    "testName" : "test561256"
  },
  "test11382" : {
    "methodSignature" : "public int getMaxLengthEstimate()",
    "methodName" : "getMaxLengthEstimate",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11382() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    int int0 = fastDateFormat0.getMaxLengthEstimate();\n    fastDateFormat0.getMaxLengthEstimate();\n}",
    "testName" : "test11382"
  },
  "test11384" : {
    "methodSignature" : "public String getPattern()",
    "methodName" : "getPattern",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11384() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    int int0 = fastDateFormat0.getMaxLengthEstimate();\n    fastDateFormat0.getPattern();\n}",
    "testName" : "test11384"
  },
  "test17484" : {
    "methodSignature" : "public StringBuffer format(Date date, StringBuffer buf)",
    "methodName" : "format",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test17484() throws Throwable {\n    Locale locale0 = Locale.TRADITIONAL_CHINESE;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) null, locale0);\n    MockDate mockDate0 = new MockDate();\n    StringBuffer stringBuffer0 = fastDateFormat0.format((Date) mockDate0, (StringBuffer) null);\n}",
    "testName" : "test17484"
  },
  "test11383" : {
    "methodSignature" : "public boolean getTimeZoneOverridesCalendar()",
    "methodName" : "getTimeZoneOverridesCalendar",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11383() throws Throwable {\n    Locale locale0 = Locale.CANADA;\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", locale0);\n    int int0 = fastDateFormat0.getMaxLengthEstimate();\n    fastDateFormat0.getTimeZoneOverridesCalendar();\n}",
    "testName" : "test11383"
  },
  "test19543" : {
    "methodSignature" : "public static FastDateFormat getInstance(String pattern, TimeZone timeZone)",
    "methodName" : "getInstance",
    "className" : "org.apache.commons.lang.time.FastDateFormat",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test19543() throws Throwable {\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, \"\", 0, 0, (-1), (-1), 0, (-1), 0, 4682, (-2182), (-2182), 9);\n    FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(\"\", (TimeZone) simpleTimeZone0);\n}",
    "testName" : "test19543"
  }
}