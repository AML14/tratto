focal_method,test_prefix,docstring
"//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Locale.</p>
 *
 * <p>This method takes the string format of a locale and creates the
 * locale object from it.</p>
 *
 * <pre>
 *   LocaleUtils.toLocale(""en"")         = new Locale(""en"", """")
 *   LocaleUtils.toLocale(""en_GB"")      = new Locale(""en"", ""GB"")
 *   LocaleUtils.toLocale(""en_GB_xxx"")  = new Locale(""en"", ""GB"", ""xxx"")   (#)
 * </pre>
 *
 * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
 * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
 * Thus, the result from getVariant() may vary depending on your JDK.</p>
 *
 * <p>This method validates the input strictly.
 * The language code must be lowercase.
 * The country code must be uppercase.
 * The separator must be an underscore.
 * The length must be correct.
 * </p>
 *
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */
public static Locale toLocale(String str) {
    if (str == null) {
        return null;
    }
    int len = str.length();
    if (len != 2 && len != 5 && len < 7) {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    char ch0 = str.charAt(0);
    char ch1 = str.charAt(1);
    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    if (len == 2) {
        return new Locale(str, """");
    } else {
        if (str.charAt(2) != '_') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        char ch3 = str.charAt(3);
        char ch4 = str.charAt(4);
        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        if (len == 5) {
            return new Locale(str.substring(0, 2), str.substring(3, 5));
        } else {
            if (str.charAt(5) != '_') {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
        }
    }
}","public void test022() throws Throwable {
    // Undeclared exception!
    try {
        LocaleUtils.toLocale(""zz8'D$`MFp1}`,go<)"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid locale format: zz8'D$`MFp1}`,go<)
        //
        verifyException(""org.apache.commons.lang.LocaleUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Locale.</p>
 *
 * <p>This method takes the string format of a locale and creates the
 * locale object from it.</p>
 *
 * <pre>
 *   LocaleUtils.toLocale(""en"")         = new Locale(""en"", """")
 *   LocaleUtils.toLocale(""en_GB"")      = new Locale(""en"", ""GB"")
 *   LocaleUtils.toLocale(""en_GB_xxx"")  = new Locale(""en"", ""GB"", ""xxx"")   (#)
 * </pre>
 *
 * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
 * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
 * Thus, the result from getVariant() may vary depending on your JDK.</p>
 *
 * <p>This method validates the input strictly.
 * The language code must be lowercase.
 * The country code must be uppercase.
 * The separator must be an underscore.
 * The length must be correct.
 * </p>
 *
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */
public static Locale toLocale(String str) {
    if (str == null) {
        return null;
    }
    int len = str.length();
    if (len != 2 && len != 5 && len < 7) {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    char ch0 = str.charAt(0);
    char ch1 = str.charAt(1);
    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    if (len == 2) {
        return new Locale(str, """");
    } else {
        if (str.charAt(2) != '_') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        char ch3 = str.charAt(3);
        char ch4 = str.charAt(4);
        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        if (len == 5) {
            return new Locale(str.substring(0, 2), str.substring(3, 5));
        } else {
            if (str.charAt(5) != '_') {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
        }
    }
}","public void test033() throws Throwable {
    // Undeclared exception!
    try {
        LocaleUtils.toLocale(""XTYrx $"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid locale format: XTYrx $
        //
        verifyException(""org.apache.commons.lang.LocaleUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Checks if the locale specified is in the list of available locales.</p>
 *
 * @param locale the Locale object to check if it is available
 * @return true if the locale is a known locale
 */
public static boolean isAvailableLocale(Locale locale) {
    return availableLocaleList().contains(locale);
}","public void test1010() throws Throwable {
    boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
    assertFalse(boolean0);
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Obtains an unmodifiable set of installed locales.</p>
 *
 * <p>This method is a wrapper around {@link Locale#getAvailableLocales()}.
 * It is more efficient, as the JDK method must create a new array each
 * time it is called.</p>
 *
 * @return the unmodifiable set of available locales
 */
public static Set availableLocaleSet() {
    Set set = cAvailableLocaleSet;
    if (set == null) {
        set = new HashSet(availableLocaleList());
        set = Collections.unmodifiableSet(set);
        cAvailableLocaleSet = set;
    }
    return set;
}","public void test1111() throws Throwable {
    Set set0 = LocaleUtils.availableLocaleSet();
    Set set1 = LocaleUtils.availableLocaleSet();
    assertSame(set1, set0);
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Locale.</p>
 *
 * <p>This method takes the string format of a locale and creates the
 * locale object from it.</p>
 *
 * <pre>
 *   LocaleUtils.toLocale(""en"")         = new Locale(""en"", """")
 *   LocaleUtils.toLocale(""en_GB"")      = new Locale(""en"", ""GB"")
 *   LocaleUtils.toLocale(""en_GB_xxx"")  = new Locale(""en"", ""GB"", ""xxx"")   (#)
 * </pre>
 *
 * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
 * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
 * Thus, the result from getVariant() may vary depending on your JDK.</p>
 *
 * <p>This method validates the input strictly.
 * The language code must be lowercase.
 * The country code must be uppercase.
 * The separator must be an underscore.
 * The length must be correct.
 * </p>
 *
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */
public static Locale toLocale(String str) {
    if (str == null) {
        return null;
    }
    int len = str.length();
    if (len != 2 && len != 5 && len < 7) {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    char ch0 = str.charAt(0);
    char ch1 = str.charAt(1);
    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    if (len == 2) {
        return new Locale(str, """");
    } else {
        if (str.charAt(2) != '_') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        char ch3 = str.charAt(3);
        char ch4 = str.charAt(4);
        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        if (len == 5) {
            return new Locale(str.substring(0, 2), str.substring(3, 5));
        } else {
            if (str.charAt(5) != '_') {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
        }
    }
}","public void test1313() throws Throwable {
    // Undeclared exception!
    try {
        LocaleUtils.toLocale(""k[h-TF7SK6V?R o|="");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid locale format: k[h-TF7SK6V?R o|=
        //
        verifyException(""org.apache.commons.lang.LocaleUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Locale.</p>
 *
 * <p>This method takes the string format of a locale and creates the
 * locale object from it.</p>
 *
 * <pre>
 *   LocaleUtils.toLocale(""en"")         = new Locale(""en"", """")
 *   LocaleUtils.toLocale(""en_GB"")      = new Locale(""en"", ""GB"")
 *   LocaleUtils.toLocale(""en_GB_xxx"")  = new Locale(""en"", ""GB"", ""xxx"")   (#)
 * </pre>
 *
 * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
 * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
 * Thus, the result from getVariant() may vary depending on your JDK.</p>
 *
 * <p>This method validates the input strictly.
 * The language code must be lowercase.
 * The country code must be uppercase.
 * The separator must be an underscore.
 * The length must be correct.
 * </p>
 *
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */
public static Locale toLocale(String str) {
    if (str == null) {
        return null;
    }
    int len = str.length();
    if (len != 2 && len != 5 && len < 7) {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    char ch0 = str.charAt(0);
    char ch1 = str.charAt(1);
    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    if (len == 2) {
        return new Locale(str, """");
    } else {
        if (str.charAt(2) != '_') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        char ch3 = str.charAt(3);
        char ch4 = str.charAt(4);
        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        if (len == 5) {
            return new Locale(str.substring(0, 2), str.substring(3, 5));
        } else {
            if (str.charAt(5) != '_') {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
        }
    }
}","public void test1414() throws Throwable {
    // Undeclared exception!
    try {
        LocaleUtils.toLocale(""~-"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid locale format: ~-
        //
        verifyException(""org.apache.commons.lang.LocaleUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Locale.</p>
 *
 * <p>This method takes the string format of a locale and creates the
 * locale object from it.</p>
 *
 * <pre>
 *   LocaleUtils.toLocale(""en"")         = new Locale(""en"", """")
 *   LocaleUtils.toLocale(""en_GB"")      = new Locale(""en"", ""GB"")
 *   LocaleUtils.toLocale(""en_GB_xxx"")  = new Locale(""en"", ""GB"", ""xxx"")   (#)
 * </pre>
 *
 * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
 * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
 * Thus, the result from getVariant() may vary depending on your JDK.</p>
 *
 * <p>This method validates the input strictly.
 * The language code must be lowercase.
 * The country code must be uppercase.
 * The separator must be an underscore.
 * The length must be correct.
 * </p>
 *
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */
public static Locale toLocale(String str) {
    if (str == null) {
        return null;
    }
    int len = str.length();
    if (len != 2 && len != 5 && len < 7) {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    char ch0 = str.charAt(0);
    char ch1 = str.charAt(1);
    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    if (len == 2) {
        return new Locale(str, """");
    } else {
        if (str.charAt(2) != '_') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        char ch3 = str.charAt(3);
        char ch4 = str.charAt(4);
        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        if (len == 5) {
            return new Locale(str.substring(0, 2), str.substring(3, 5));
        } else {
            if (str.charAt(5) != '_') {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
        }
    }
}","public void test1515() throws Throwable {
    // Undeclared exception!
    try {
        LocaleUtils.toLocale("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid locale format:
        //
        verifyException(""org.apache.commons.lang.LocaleUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Locale.</p>
 *
 * <p>This method takes the string format of a locale and creates the
 * locale object from it.</p>
 *
 * <pre>
 *   LocaleUtils.toLocale(""en"")         = new Locale(""en"", """")
 *   LocaleUtils.toLocale(""en_GB"")      = new Locale(""en"", ""GB"")
 *   LocaleUtils.toLocale(""en_GB_xxx"")  = new Locale(""en"", ""GB"", ""xxx"")   (#)
 * </pre>
 *
 * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
 * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
 * Thus, the result from getVariant() may vary depending on your JDK.</p>
 *
 * <p>This method validates the input strictly.
 * The language code must be lowercase.
 * The country code must be uppercase.
 * The separator must be an underscore.
 * The length must be correct.
 * </p>
 *
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */
public static Locale toLocale(String str) {
    if (str == null) {
        return null;
    }
    int len = str.length();
    if (len != 2 && len != 5 && len < 7) {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    char ch0 = str.charAt(0);
    char ch1 = str.charAt(1);
    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    if (len == 2) {
        return new Locale(str, """");
    } else {
        if (str.charAt(2) != '_') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        char ch3 = str.charAt(3);
        char ch4 = str.charAt(4);
        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        if (len == 5) {
            return new Locale(str.substring(0, 2), str.substring(3, 5));
        } else {
            if (str.charAt(5) != '_') {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
        }
    }
}","public void test1616() throws Throwable {
    // Undeclared exception!
    try {
        LocaleUtils.toLocale(""`kN+h"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid locale format: `kN+h
        //
        verifyException(""org.apache.commons.lang.LocaleUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Locale.</p>
 *
 * <p>This method takes the string format of a locale and creates the
 * locale object from it.</p>
 *
 * <pre>
 *   LocaleUtils.toLocale(""en"")         = new Locale(""en"", """")
 *   LocaleUtils.toLocale(""en_GB"")      = new Locale(""en"", ""GB"")
 *   LocaleUtils.toLocale(""en_GB_xxx"")  = new Locale(""en"", ""GB"", ""xxx"")   (#)
 * </pre>
 *
 * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
 * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
 * Thus, the result from getVariant() may vary depending on your JDK.</p>
 *
 * <p>This method validates the input strictly.
 * The language code must be lowercase.
 * The country code must be uppercase.
 * The separator must be an underscore.
 * The length must be correct.
 * </p>
 *
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */
public static Locale toLocale(String str) {
    if (str == null) {
        return null;
    }
    int len = str.length();
    if (len != 2 && len != 5 && len < 7) {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    char ch0 = str.charAt(0);
    char ch1 = str.charAt(1);
    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    if (len == 2) {
        return new Locale(str, """");
    } else {
        if (str.charAt(2) != '_') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        char ch3 = str.charAt(3);
        char ch4 = str.charAt(4);
        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        if (len == 5) {
            return new Locale(str.substring(0, 2), str.substring(3, 5));
        } else {
            if (str.charAt(5) != '_') {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
        }
    }
}","public void test1717() throws Throwable {
    Locale locale0 = LocaleUtils.toLocale((String) null);
    assertNull(locale0);
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Locale.</p>
 *
 * <p>This method takes the string format of a locale and creates the
 * locale object from it.</p>
 *
 * <pre>
 *   LocaleUtils.toLocale(""en"")         = new Locale(""en"", """")
 *   LocaleUtils.toLocale(""en_GB"")      = new Locale(""en"", ""GB"")
 *   LocaleUtils.toLocale(""en_GB_xxx"")  = new Locale(""en"", ""GB"", ""xxx"")   (#)
 * </pre>
 *
 * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
 * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
 * Thus, the result from getVariant() may vary depending on your JDK.</p>
 *
 * <p>This method validates the input strictly.
 * The language code must be lowercase.
 * The country code must be uppercase.
 * The separator must be an underscore.
 * The length must be correct.
 * </p>
 *
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */
public static Locale toLocale(String str) {
    if (str == null) {
        return null;
    }
    int len = str.length();
    if (len != 2 && len != 5 && len < 7) {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    char ch0 = str.charAt(0);
    char ch1 = str.charAt(1);
    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    if (len == 2) {
        return new Locale(str, """");
    } else {
        if (str.charAt(2) != '_') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        char ch3 = str.charAt(3);
        char ch4 = str.charAt(4);
        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        if (len == 5) {
            return new Locale(str.substring(0, 2), str.substring(3, 5));
        } else {
            if (str.charAt(5) != '_') {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
        }
    }
}","public void test1818() throws Throwable {
    // Undeclared exception!
    try {
        LocaleUtils.toLocale(""m{\""+EEDJFybIf;}zD"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid locale format: m{\""+EEDJFybIf;}zD
        //
        verifyException(""org.apache.commons.lang.LocaleUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Locale.</p>
 *
 * <p>This method takes the string format of a locale and creates the
 * locale object from it.</p>
 *
 * <pre>
 *   LocaleUtils.toLocale(""en"")         = new Locale(""en"", """")
 *   LocaleUtils.toLocale(""en_GB"")      = new Locale(""en"", ""GB"")
 *   LocaleUtils.toLocale(""en_GB_xxx"")  = new Locale(""en"", ""GB"", ""xxx"")   (#)
 * </pre>
 *
 * <p>(#) The behaviour of the JDK variant constructor changed between JDK1.3 and JDK1.4.
 * In JDK1.3, the constructor upper cases the variant, in JDK1.4, it doesn't.
 * Thus, the result from getVariant() may vary depending on your JDK.</p>
 *
 * <p>This method validates the input strictly.
 * The language code must be lowercase.
 * The country code must be uppercase.
 * The separator must be an underscore.
 * The length must be correct.
 * </p>
 *
 * @param str  the locale String to convert, null returns null
 * @return a Locale, null if null input
 * @throws IllegalArgumentException if the string is an invalid format
 */
public static Locale toLocale(String str) {
    if (str == null) {
        return null;
    }
    int len = str.length();
    if (len != 2 && len != 5 && len < 7) {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    char ch0 = str.charAt(0);
    char ch1 = str.charAt(1);
    if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
        throw new IllegalArgumentException(""Invalid locale format: "" + str);
    }
    if (len == 2) {
        return new Locale(str, """");
    } else {
        if (str.charAt(2) != '_') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        char ch3 = str.charAt(3);
        char ch4 = str.charAt(4);
        if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
            throw new IllegalArgumentException(""Invalid locale format: "" + str);
        }
        if (len == 5) {
            return new Locale(str.substring(0, 2), str.substring(3, 5));
        } else {
            if (str.charAt(5) != '_') {
                throw new IllegalArgumentException(""Invalid locale format: "" + str);
            }
            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
        }
    }
}","public void test1919() throws Throwable {
    LocaleUtils.availableLocaleList();
    LinkedList<LinkedList<Integer>> linkedList0 = new LinkedList<LinkedList<Integer>>();
    LocaleUtils.countriesByLanguage(""be"");
    LocaleUtils.countriesByLanguage(""ja"");
    // Undeclared exception!
    try {
        LocaleUtils.toLocale(""aJ)v\""XPsG)"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid locale format: aJ)v\""XPsG)
        //
        verifyException(""org.apache.commons.lang.LocaleUtils"", e);
    }
}",""
