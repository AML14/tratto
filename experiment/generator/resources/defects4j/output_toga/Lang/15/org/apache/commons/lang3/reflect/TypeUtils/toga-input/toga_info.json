{
  "test1212" : {
    "methodSignature" : "public static Type[] getImplicitUpperBounds(WildcardType wildcardType)",
    "methodName" : "getImplicitUpperBounds",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    TypeUtils.getImplicitUpperBounds((WildcardType) null);\n}",
    "testName" : "test1212"
  },
  "test2324" : {
    "methodSignature" : "public static boolean isInstance(Object value, Type type)",
    "methodName" : "isInstance",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2324() throws Throwable {\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    boolean boolean0 = TypeUtils.isInstance((Object) null, parameterizedType0);\n}",
    "testName" : "test2324"
  },
  "test3335" : {
    "methodSignature" : "public static boolean isAssignable(Type type, Type toType)",
    "methodName" : "isAssignable",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3335() throws Throwable {\n    Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());\n    doReturn(\"\").when(type0).toString();\n    TypeUtils.isAssignable(type0, type0);\n}",
    "testName" : "test3335"
  },
  "test1313" : {
    "methodSignature" : "public static Type[] getImplicitUpperBounds(WildcardType wildcardType)",
    "methodName" : "getImplicitUpperBounds",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Type[] typeArray0 = new Type[16];\n    Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());\n    doReturn((String) null).when(type0).toString();\n    typeArray0[0] = type0;\n    WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());\n    doReturn(typeArray0).when(wildcardType0).getUpperBounds();\n    TypeUtils.getImplicitUpperBounds(wildcardType0);\n}",
    "testName" : "test1313"
  },
  "test2425" : {
    "methodSignature" : "public static boolean isInstance(Object value, Type type)",
    "methodName" : "isInstance",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2425() throws Throwable {\n    boolean boolean0 = TypeUtils.isInstance((Object) null, (Type) null);\n}",
    "testName" : "test2425"
  },
  "test3436" : {
    "methodSignature" : "public static Type[] normalizeUpperBounds(Type[] bounds)",
    "methodName" : "normalizeUpperBounds",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3436() throws Throwable {\n    Class<Object> class0 = Object.class;\n    Type[] typeArray0 = new Type[5];\n    typeArray0[0] = (Type) class0;\n    Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);\n}",
    "testName" : "test3436"
  },
  "test1010" : {
    "methodSignature" : "public static boolean isInstance(Object value, Type type)",
    "methodName" : "isInstance",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Type type0 = mock(Type.class, new ViolatedAssumptionAnswer());\n    doReturn((String) null).when(type0).toString();\n    TypeUtils.isInstance(\"J9ivp9Dti\", type0);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "public static Type[] normalizeUpperBounds(Type[] bounds)",
    "methodName" : "normalizeUpperBounds",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    Type[] typeArray0 = new Type[8];\n    WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());\n    doReturn(typeArray0).when(wildcardType0).getUpperBounds();\n    Type[] typeArray1 = TypeUtils.getImplicitUpperBounds(wildcardType0);\n    Type[] typeArray2 = TypeUtils.normalizeUpperBounds(typeArray1);\n}",
    "testName" : "test2121"
  },
  "test3133" : {
    "methodSignature" : "public static boolean isAssignable(Type type, Type toType)",
    "methodName" : "isAssignable",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3133() throws Throwable {\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    boolean boolean0 = TypeUtils.isAssignable(parameterizedType0, parameterizedType0);\n}",
    "testName" : "test3133"
  },
  "test1111" : {
    "methodSignature" : "public static Class<?> getRawType(Type type, Type assigningType)",
    "methodName" : "getRawType",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Class<String> class0 = String.class;\n    Type[] typeArray0 = new Type[4];\n    typeArray0[3] = (Type) class0;\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments();\n    doReturn(class0).when(parameterizedType0).getOwnerType();\n    doReturn(class0, typeArray0[3], typeArray0[2]).when(parameterizedType0).getRawType();\n    TypeUtils.determineTypeArguments(class0, parameterizedType0);\n    Type[] typeArray1 = new Type[3];\n    typeArray1[0] = (Type) parameterizedType0;\n    TypeUtils.getRawType(typeArray1[0], typeArray1[0]);\n}",
    "testName" : "test1111"
  },
  "test2223" : {
    "methodSignature" : "public static boolean isInstance(Object value, Type type)",
    "methodName" : "isInstance",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2223() throws Throwable {\n    Class<Object> class0 = Object.class;\n    boolean boolean0 = TypeUtils.isInstance((Object) null, class0);\n}",
    "testName" : "test2223"
  },
  "test3234" : {
    "methodSignature" : "public static boolean isAssignable(Type type, Type toType)",
    "methodName" : "isAssignable",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3234() throws Throwable {\n    boolean boolean0 = TypeUtils.isAssignable((Type) null, (Type) null);\n}",
    "testName" : "test3234"
  },
  "test033" : {
    "methodSignature" : "public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls, ParameterizedType superType)",
    "methodName" : "determineTypeArguments",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Class<Object> class0 = Object.class;\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn(class0, (Type) null).when(parameterizedType0).getRawType();\n    TypeUtils.determineTypeArguments(class0, parameterizedType0);\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "public static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns)",
    "methodName" : "typesSatisfyVariables",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    TypeUtils.typesSatisfyVariables((Map<TypeVariable<?>, Type>) null);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public static Type[] normalizeUpperBounds(Type[] bounds)",
    "methodName" : "normalizeUpperBounds",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Class<Object> class0 = Object.class;\n    Type[] typeArray0 = new Type[0];\n    Class<?> class1 = TypeUtils.getRawType(class0, class0);\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments();\n    doReturn(class0).when(parameterizedType0).getOwnerType();\n    doReturn(class0, class0, class0, class1, (Type) null).when(parameterizedType0).getRawType();\n    TypeUtils.determineTypeArguments(class0, parameterizedType0);\n    Type[] typeArray1 = new Type[7];\n    typeArray1[0] = (Type) class0;\n    typeArray1[1] = (Type) parameterizedType0;\n    typeArray1[2] = (Type) parameterizedType0;\n    TypeUtils.normalizeUpperBounds(typeArray1);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public static Class<?> getRawType(Type type, Type assigningType)",
    "methodName" : "getRawType",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Class<Object> class0 = Object.class;\n    WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());\n    Class<?> class1 = TypeUtils.getRawType(wildcardType0, class0);\n}",
    "testName" : "test1616"
  },
  "test2728" : {
    "methodSignature" : "public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls, ParameterizedType superType)",
    "methodName" : "determineTypeArguments",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2728() throws Throwable {\n    Class<Object> class0 = Object.class;\n    Type[] typeArray0 = new Type[0];\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments();\n    doReturn(class0).when(parameterizedType0).getOwnerType();\n    doReturn(class0, class0, class0).when(parameterizedType0).getRawType();\n    Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class0, parameterizedType0);\n}",
    "testName" : "test2728"
  },
  "test3739" : {
    "methodSignature" : "public static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type)",
    "methodName" : "getTypeArguments",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3739() throws Throwable {\n    TypeUtils.getTypeArguments((ParameterizedType) null);\n}",
    "testName" : "test3739"
  },
  "test1717" : {
    "methodSignature" : "public static Class<?> getRawType(Type type, Type assigningType)",
    "methodName" : "getRawType",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Type[] typeArray0 = new Type[3];\n    TypeUtils.getRawType(typeArray0[1], typeArray0[0]);\n}",
    "testName" : "test1717"
  },
  "test2729" : {
    "methodSignature" : "public static boolean isInstance(Object value, Type type)",
    "methodName" : "isInstance",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2729() throws Throwable {\n    Class<Object> class0 = Object.class;\n    Type[] typeArray0 = new Type[0];\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments();\n    doReturn(class0).when(parameterizedType0).getOwnerType();\n    doReturn(class0, class0, class0).when(parameterizedType0).getRawType();\n    Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class0, parameterizedType0);\n    boolean boolean0 = TypeUtils.isInstance(map0, parameterizedType0);\n}",
    "testName" : "test2729"
  },
  "test1414" : {
    "methodSignature" : "public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls, ParameterizedType superType)",
    "methodName" : "determineTypeArguments",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Class<Object> class0 = Object.class;\n    TypeUtils.determineTypeArguments(class0, (ParameterizedType) null);\n}",
    "testName" : "test1414"
  },
  "test2526" : {
    "methodSignature" : "public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls, ParameterizedType superType)",
    "methodName" : "determineTypeArguments",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2526() throws Throwable {\n    Class<Object> class0 = Object.class;\n    Class<?> class1 = TypeUtils.getRawType(class0, class0);\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn(class0, class0, class1, (Type) null).when(parameterizedType0).getRawType();\n    Class<Integer> class2 = Integer.class;\n    TypeUtils.determineTypeArguments(class2, parameterizedType0);\n}",
    "testName" : "test2526"
  },
  "test3537" : {
    "methodSignature" : "public TypeUtils()",
    "methodName" : "TypeUtils",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3537() throws Throwable {\n    TypeUtils typeUtils0 = new TypeUtils();\n}",
    "testName" : "test3537"
  },
  "test1515" : {
    "methodSignature" : "public static boolean isArrayType(Type type)",
    "methodName" : "isArrayType",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    boolean boolean0 = TypeUtils.isArrayType(parameterizedType0);\n}",
    "testName" : "test1515"
  },
  "test2627" : {
    "methodSignature" : "public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls, ParameterizedType superType)",
    "methodName" : "determineTypeArguments",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2627() throws Throwable {\n    Class<String> class0 = String.class;\n    Class<Object> class1 = Object.class;\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn(class0).when(parameterizedType0).getRawType();\n    Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class1, parameterizedType0);\n}",
    "testName" : "test2627"
  },
  "test3638" : {
    "methodSignature" : "public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass)",
    "methodName" : "getTypeArguments",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3638() throws Throwable {\n    Class<Object> class0 = Object.class;\n    Class<String> class1 = String.class;\n    Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class0, (Class<?>) class1);\n}",
    "testName" : "test3638"
  },
  "test2020" : {
    "methodSignature" : "public static Type[] getImplicitUpperBounds(WildcardType wildcardType)",
    "methodName" : "getImplicitUpperBounds",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Type[] typeArray0 = new Type[0];\n    WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());\n    doReturn(typeArray0).when(wildcardType0).getUpperBounds();\n    Type[] typeArray1 = TypeUtils.getImplicitUpperBounds(wildcardType0);\n}",
    "testName" : "test2020"
  },
  "test3032" : {
    "methodSignature" : "public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass)",
    "methodName" : "getTypeArguments",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3032() throws Throwable {\n    Type[] typeArray0 = new Type[5];\n    Class<String> class0 = String.class;\n    TypeUtils.getTypeArguments(typeArray0[2], class0);\n}",
    "testName" : "test3032"
  },
  "test2830" : {
    "methodSignature" : "public static boolean isInstance(Object value, Type type)",
    "methodName" : "isInstance",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2830() throws Throwable {\n    Class<Object> class0 = Object.class;\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn(class0).when(parameterizedType0).getRawType();\n    ParameterizedType parameterizedType1 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    boolean boolean0 = TypeUtils.isInstance(parameterizedType1, parameterizedType0);\n}",
    "testName" : "test2830"
  },
  "test2931" : {
    "methodSignature" : "public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass)",
    "methodName" : "getTypeArguments",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2931() throws Throwable {\n    Class<Object> class0 = Object.class;\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn(class0).when(parameterizedType0).getRawType();\n    Class<String> class1 = String.class;\n    Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) parameterizedType0, (Class<?>) class1);\n}",
    "testName" : "test2931"
  },
  "test000" : {
    "methodSignature" : "public static Class<?> getRawType(Type type, Type assigningType)",
    "methodName" : "getRawType",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Class<Object> class0 = Object.class;\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn((Type) null).when(parameterizedType0).getRawType();\n    TypeUtils.getRawType(parameterizedType0, class0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public static Type[] normalizeUpperBounds(Type[] bounds)",
    "methodName" : "normalizeUpperBounds",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Type[] typeArray0 = new Type[2];\n    Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public static boolean isAssignable(Type type, Type toType)",
    "methodName" : "isAssignable",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Class<Integer> class0 = Integer.class;\n    Type[] typeArray0 = new Type[5];\n    boolean boolean0 = TypeUtils.isAssignable(class0, typeArray0[2]);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type)",
    "methodName" : "getTypeArguments",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Class<Object> class0 = Object.class;\n    Type[] typeArray0 = new Type[3];\n    typeArray0[0] = (Type) class0;\n    typeArray0[1] = (Type) class0;\n    typeArray0[2] = (Type) class0;\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) typeArray0, (Object) typeArray0).when(parameterizedType0).getActualTypeArguments();\n    doReturn(typeArray0[2], typeArray0[0]).when(parameterizedType0).getOwnerType();\n    doReturn(class0, class0, typeArray0[1], typeArray0[2], typeArray0[2]).when(parameterizedType0).getRawType();\n    Map<TypeVariable<?>, Type> map0 = TypeUtils.determineTypeArguments(class0, parameterizedType0);\n    Type[] typeArray1 = new Type[7];\n    typeArray1[0] = (Type) class0;\n    typeArray1[1] = (Type) parameterizedType0;\n    typeArray1[2] = (Type) parameterizedType0;\n    typeArray1[3] = (Type) class0;\n    typeArray1[2] = (Type) parameterizedType0;\n    typeArray1[5] = (Type) parameterizedType0;\n    TypeUtils.normalizeUpperBounds(typeArray1);\n    WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());\n    Class<Object> class1 = Object.class;\n    ParameterizedType parameterizedType1 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn(typeArray0).when(parameterizedType1).getActualTypeArguments();\n    doReturn(typeArray1[1]).when(parameterizedType1).getOwnerType();\n    doReturn(typeArray0[0], typeArray0[0]).when(parameterizedType1).getRawType();\n    TypeUtils.determineTypeArguments(class1, parameterizedType1);\n    TypeUtils.isArrayType(typeArray1[3]);\n    TypeUtils.isAssignable(typeArray1[4], typeArray1[5]);\n    ParameterizedType parameterizedType2 = null;\n    TypeUtils.getArrayComponentType(typeArray0[0]);\n    TypeUtils.getArrayComponentType((Type) null);\n    TypeUtils.getRawType(typeArray0[0], typeArray0[1]);\n    Object object0 = new Object();\n    Class<?> class2 = TypeUtils.getRawType(typeArray1[0], class0);\n    TypeUtils.isInstance(object0, class2);\n    TypeUtils.typesSatisfyVariables(map0);\n    ParameterizedType parameterizedType3 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn(typeArray0[1], (Type) null).when(parameterizedType3).getRawType();\n    TypeUtils.getTypeArguments(parameterizedType3);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public static Type[] normalizeUpperBounds(Type[] bounds)",
    "methodName" : "normalizeUpperBounds",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    TypeUtils.normalizeUpperBounds((Type[]) null);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public static Type[] getImplicitLowerBounds(WildcardType wildcardType)",
    "methodName" : "getImplicitLowerBounds",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Type[] typeArray0 = new Type[0];\n    WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());\n    doReturn(typeArray0).when(wildcardType0).getLowerBounds();\n    Type[] typeArray1 = TypeUtils.getImplicitLowerBounds(wildcardType0);\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "public static Type[] getImplicitLowerBounds(WildcardType wildcardType)",
    "methodName" : "getImplicitLowerBounds",
    "className" : "org.apache.commons.lang3.reflect.TypeUtils",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Type[] typeArray0 = new Type[5];\n    WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer());\n    doReturn(typeArray0).when(wildcardType0).getLowerBounds();\n    Type[] typeArray1 = TypeUtils.getImplicitLowerBounds(wildcardType0);\n}",
    "testName" : "test1919"
  }
}