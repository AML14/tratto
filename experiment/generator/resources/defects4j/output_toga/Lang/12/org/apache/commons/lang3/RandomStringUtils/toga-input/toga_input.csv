focal_method,test_prefix,docstring
"public static String random(int count, char... chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, 0, chars.length, false, false, chars, RANDOM);
}","public void test000() throws Throwable {
    int int0 = 123;
    char[] charArray0 = new char[0];
    // Undeclared exception!
    try {
        RandomStringUtils.random(123, charArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters specified.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,
 *  may be null
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0.
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {
    if (count == 0) {
        return """";
    } else if (count < 0) {
        throw new IllegalArgumentException(""Requested random string length "" + count + "" is less than 0."");
    }
    if (start == 0 && end == 0) {
        if (!letters && !numbers) {
            end = Integer.MAX_VALUE;
        } else {
            end = 'z' + 1;
            start = ' ';
        }
    }
    char[] buffer = new char[count];
    int gap = end - start;
    while (count-- != 0) {
        char ch;
        if (chars == null) {
            ch = (char) (random.nextInt(gap) + start);
        } else {
            ch = chars[random.nextInt(gap) + start];
        }
        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {
            if (ch >= 56320 && ch <= 57343) {
                if (count == 0) {
                    count++;
                } else {
                    // low surrogate, insert high surrogate after putting it in
                    buffer[count] = ch;
                    count--;
                    buffer[count] = (char) (55296 + random.nextInt(128));
                }
            } else if (ch >= 55296 && ch <= 56191) {
                if (count == 0) {
                    count++;
                } else {
                    // high surrogate, insert low surrogate before putting it in
                    buffer[count] = (char) (56320 + random.nextInt(128));
                    count--;
                    buffer[count] = ch;
                }
            } else if (ch >= 56192 && ch <= 56319) {
                // private high surrogate, no effing clue, so skip it
                count++;
            } else {
                buffer[count] = ch;
            }
        } else {
            count++;
        }
    }
    return new String(buffer);
}","public void test011() throws Throwable {
    int int0 = 250;
    boolean boolean0 = false;
    RandomStringUtils.random(250, false, false);
    int int1 = 0;
    RandomStringUtils.randomAlphanumeric(0);
    RandomStringUtils.random(0, false, false);
    char[] charArray0 = new char[6];
    charArray0[0] = '0';
    charArray0[1] = 'V';
    charArray0[2] = '5';
    charArray0[3] = 'T';
    charArray0[4] = 'f';
    charArray0[5] = '=';
    MockRandom mockRandom0 = new MockRandom(0L);
    mockRandom0.nextInt(123);
    mockRandom0.ints();
    // Undeclared exception!
    RandomStringUtils.random(123, 0, (-914), true, false, charArray0, (Random) mockRandom0);
}","/**
 * <p>Creates a random string based on a variety of options, using
 * supplied source of randomness.</p>
 *
 * <p>If start and end are both {@code 0}, start and end are set
 * to {@code ' '} and {@code 'z'}, the ASCII printable
 * characters, will be used, unless letters and numbers are both
 * {@code false}, in which case, start and end are set to
 * {@code 0} and {@code Integer.MAX_VALUE}.
 *
 * <p>If set is not {@code null}, characters between start and
 * end are chosen.</p>
 *
 * <p>This method accepts a user-supplied {@link Random}
 * instance to use as a source of randomness. By seeding a single
 * {@link Random} instance with a fixed seed and using it for each call,
 * the same random sequence of strings can be generated repeatedly
 * and predictably.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from, must not be empty.
 *  If {@code null}, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
 * @since 2.0
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {
    if (count == 0) {
        return """";
    } else if (count < 0) {
        throw new IllegalArgumentException(""Requested random string length "" + count + "" is less than 0."");
    }
    if (start == 0 && end == 0) {
        if (!letters && !numbers) {
            end = Integer.MAX_VALUE;
        } else {
            end = 'z' + 1;
            start = ' ';
        }
    }
    char[] buffer = new char[count];
    int gap = end - start;
    while (count-- != 0) {
        char ch;
        if (chars == null) {
            ch = (char) (random.nextInt(gap) + start);
        } else {
            ch = chars[random.nextInt(gap) + start];
        }
        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {
            if (ch >= 56320 && ch <= 57343) {
                if (count == 0) {
                    count++;
                } else {
                    // low surrogate, insert high surrogate after putting it in
                    buffer[count] = ch;
                    count--;
                    buffer[count] = (char) (55296 + random.nextInt(128));
                }
            } else if (ch >= 55296 && ch <= 56191) {
                if (count == 0) {
                    count++;
                } else {
                    // high surrogate, insert low surrogate before putting it in
                    buffer[count] = (char) (56320 + random.nextInt(128));
                    count--;
                    buffer[count] = ch;
                }
            } else if (ch >= 56192 && ch <= 56319) {
                // private high surrogate, no effing clue, so skip it
                count++;
            } else {
                buffer[count] = ch;
            }
        } else {
            count++;
        }
    }
    return new String(buffer);
}","public void test022() throws Throwable {
    RandomStringUtils.randomAscii(0);
    RandomStringUtils.randomAlphanumeric(0);
    RandomStringUtils.randomAlphabetic(0);
    RandomStringUtils.randomAscii(0);
    char[] charArray0 = new char[6];
    charArray0[0] = '@';
    charArray0[1] = 't';
    charArray0[2] = 'l';
    charArray0[3] = 'f';
    charArray0[4] = '$';
    charArray0[5] = '1';
    RandomStringUtils.random(1, charArray0);
    RandomStringUtils.randomAlphanumeric(0);
    RandomStringUtils.random(0, (-1), 0, false, false, charArray0, (Random) null);
    // Undeclared exception!
    try {
        RandomStringUtils.random(1, 0, 3375, false, true, charArray0, (Random) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>Creates a random string based on a variety of options, using
 * supplied source of randomness.</p>
 *
 * <p>If start and end are both {@code 0}, start and end are set
 * to {@code ' '} and {@code 'z'}, the ASCII printable
 * characters, will be used, unless letters and numbers are both
 * {@code false}, in which case, start and end are set to
 * {@code 0} and {@code Integer.MAX_VALUE}.
 *
 * <p>If set is not {@code null}, characters between start and
 * end are chosen.</p>
 *
 * <p>This method accepts a user-supplied {@link Random}
 * instance to use as a source of randomness. By seeding a single
 * {@link Random} instance with a fixed seed and using it for each call,
 * the same random sequence of strings can be generated repeatedly
 * and predictably.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from, must not be empty.
 *  If {@code null}, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
 * @since 2.0
 */"
"public static String randomAscii(int count) {
    return random(count, 32, 127, false, false);
}","public void test033() throws Throwable {
    int int0 = 822;
    int int1 = 1;
    int int2 = (-943);
    boolean boolean0 = true;
    char[] charArray0 = new char[6];
    charArray0[0] = 'a';
    charArray0[1] = '3';
    charArray0[2] = 'i';
    charArray0[3] = '%';
    charArray0[4] = 'l';
    charArray0[5] = 'C';
    RandomStringUtils.random(822, 1, (-943), true, true, charArray0);
    int int3 = (-222);
    // Undeclared exception!
    try {
        RandomStringUtils.randomAscii((-222));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -222 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters whose
 * ASCII value is between {@code 32} and {@code 126} (inclusive).</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {
    if (count == 0) {
        return """";
    } else if (count < 0) {
        throw new IllegalArgumentException(""Requested random string length "" + count + "" is less than 0."");
    }
    if (start == 0 && end == 0) {
        if (!letters && !numbers) {
            end = Integer.MAX_VALUE;
        } else {
            end = 'z' + 1;
            start = ' ';
        }
    }
    char[] buffer = new char[count];
    int gap = end - start;
    while (count-- != 0) {
        char ch;
        if (chars == null) {
            ch = (char) (random.nextInt(gap) + start);
        } else {
            ch = chars[random.nextInt(gap) + start];
        }
        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {
            if (ch >= 56320 && ch <= 57343) {
                if (count == 0) {
                    count++;
                } else {
                    // low surrogate, insert high surrogate after putting it in
                    buffer[count] = ch;
                    count--;
                    buffer[count] = (char) (55296 + random.nextInt(128));
                }
            } else if (ch >= 55296 && ch <= 56191) {
                if (count == 0) {
                    count++;
                } else {
                    // high surrogate, insert low surrogate before putting it in
                    buffer[count] = (char) (56320 + random.nextInt(128));
                    count--;
                    buffer[count] = ch;
                }
            } else if (ch >= 56192 && ch <= 56319) {
                // private high surrogate, no effing clue, so skip it
                count++;
            } else {
                buffer[count] = ch;
            }
        } else {
            count++;
        }
    }
    return new String(buffer);
}","public void test044() throws Throwable {
    RandomStringUtils randomStringUtils0 = new RandomStringUtils();
    char[] charArray0 = new char[8];
    charArray0[0] = ' ';
    charArray0[1] = 'i';
    charArray0[2] = 'I';
    charArray0[3] = '\'';
    charArray0[4] = '(';
    charArray0[5] = 'B';
    charArray0[6] = ')';
    charArray0[7] = 'E';
    // Undeclared exception!
    try {
        RandomStringUtils.random(128, (-1745), 0, true, true, charArray0, (Random) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>Creates a random string based on a variety of options, using
 * supplied source of randomness.</p>
 *
 * <p>If start and end are both {@code 0}, start and end are set
 * to {@code ' '} and {@code 'z'}, the ASCII printable
 * characters, will be used, unless letters and numbers are both
 * {@code false}, in which case, start and end are set to
 * {@code 0} and {@code Integer.MAX_VALUE}.
 *
 * <p>If set is not {@code null}, characters between start and
 * end are chosen.</p>
 *
 * <p>This method accepts a user-supplied {@link Random}
 * instance to use as a source of randomness. By seeding a single
 * {@link Random} instance with a fixed seed and using it for each call,
 * the same random sequence of strings can be generated repeatedly
 * and predictably.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from, must not be empty.
 *  If {@code null}, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
 * @since 2.0
 */"
"public static String random(int count, String chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, chars.toCharArray());
}","public void test055() throws Throwable {
    RandomStringUtils.random(21, ""pf1?dV6"");
    RandomStringUtils.randomAscii(0);
    // Undeclared exception!
    try {
        RandomStringUtils.random(21, """");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters
 * specified by the string, must not be empty.
 * If null, the set of all characters is used.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the String containing the set of characters to use,
 *  may be null, but must not be empty
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers) {
    return random(count, start, end, letters, numbers, null, RANDOM);
}","public void test066() throws Throwable {
    int int0 = 1059;
    boolean boolean0 = false;
    // Undeclared exception!
    try {
        RandomStringUtils.random(1059, 1059, 1059, false, false);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alpha-numeric
 * characters as indicated by the arguments.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  if {@code true}, generated string will include
 *  alphabetic characters
 * @param numbers  if {@code true}, generated string will include
 *  numeric characters
 * @return the random string
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {
    if (count == 0) {
        return """";
    } else if (count < 0) {
        throw new IllegalArgumentException(""Requested random string length "" + count + "" is less than 0."");
    }
    if (start == 0 && end == 0) {
        if (!letters && !numbers) {
            end = Integer.MAX_VALUE;
        } else {
            end = 'z' + 1;
            start = ' ';
        }
    }
    char[] buffer = new char[count];
    int gap = end - start;
    while (count-- != 0) {
        char ch;
        if (chars == null) {
            ch = (char) (random.nextInt(gap) + start);
        } else {
            ch = chars[random.nextInt(gap) + start];
        }
        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {
            if (ch >= 56320 && ch <= 57343) {
                if (count == 0) {
                    count++;
                } else {
                    // low surrogate, insert high surrogate after putting it in
                    buffer[count] = ch;
                    count--;
                    buffer[count] = (char) (55296 + random.nextInt(128));
                }
            } else if (ch >= 55296 && ch <= 56191) {
                if (count == 0) {
                    count++;
                } else {
                    // high surrogate, insert low surrogate before putting it in
                    buffer[count] = (char) (56320 + random.nextInt(128));
                    count--;
                    buffer[count] = ch;
                }
            } else if (ch >= 56192 && ch <= 56319) {
                // private high surrogate, no effing clue, so skip it
                count++;
            } else {
                buffer[count] = ch;
            }
        } else {
            count++;
        }
    }
    return new String(buffer);
}","public void test077() throws Throwable {
    char[] charArray0 = new char[6];
    charArray0[0] = '2';
    charArray0[1] = '&';
    charArray0[2] = '}';
    charArray0[3] = 'j';
    charArray0[4] = '>';
    charArray0[5] = '4';
    MockRandom mockRandom0 = new MockRandom((-4759));
    // Undeclared exception!
    try {
        RandomStringUtils.random((-4759), 937, 0, true, true, charArray0, (Random) mockRandom0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -4759 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string based on a variety of options, using
 * supplied source of randomness.</p>
 *
 * <p>If start and end are both {@code 0}, start and end are set
 * to {@code ' '} and {@code 'z'}, the ASCII printable
 * characters, will be used, unless letters and numbers are both
 * {@code false}, in which case, start and end are set to
 * {@code 0} and {@code Integer.MAX_VALUE}.
 *
 * <p>If set is not {@code null}, characters between start and
 * end are chosen.</p>
 *
 * <p>This method accepts a user-supplied {@link Random}
 * instance to use as a source of randomness. By seeding a single
 * {@link Random} instance with a fixed seed and using it for each call,
 * the same random sequence of strings can be generated repeatedly
 * and predictably.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from, must not be empty.
 *  If {@code null}, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
 * @since 2.0
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers) {
    return random(count, start, end, letters, numbers, null, RANDOM);
}","public void test088() throws Throwable {
    int int0 = 0;
    boolean boolean0 = false;
    char[] charArray0 = new char[1];
    charArray0[0] = '\""';
    MockRandom mockRandom0 = new MockRandom(0);
    mockRandom0.doubles((double) 0, 1.0);
    RandomStringUtils.random(0, 0, 0, true, false, charArray0, (Random) mockRandom0);
    int int1 = 128;
    // Undeclared exception!
    RandomStringUtils.random(128, 0, 0, true, true);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alpha-numeric
 * characters as indicated by the arguments.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  if {@code true}, generated string will include
 *  alphabetic characters
 * @param numbers  if {@code true}, generated string will include
 *  numeric characters
 * @return the random string
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {
    if (count == 0) {
        return """";
    } else if (count < 0) {
        throw new IllegalArgumentException(""Requested random string length "" + count + "" is less than 0."");
    }
    if (start == 0 && end == 0) {
        if (!letters && !numbers) {
            end = Integer.MAX_VALUE;
        } else {
            end = 'z' + 1;
            start = ' ';
        }
    }
    char[] buffer = new char[count];
    int gap = end - start;
    while (count-- != 0) {
        char ch;
        if (chars == null) {
            ch = (char) (random.nextInt(gap) + start);
        } else {
            ch = chars[random.nextInt(gap) + start];
        }
        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {
            if (ch >= 56320 && ch <= 57343) {
                if (count == 0) {
                    count++;
                } else {
                    // low surrogate, insert high surrogate after putting it in
                    buffer[count] = ch;
                    count--;
                    buffer[count] = (char) (55296 + random.nextInt(128));
                }
            } else if (ch >= 55296 && ch <= 56191) {
                if (count == 0) {
                    count++;
                } else {
                    // high surrogate, insert low surrogate before putting it in
                    buffer[count] = (char) (56320 + random.nextInt(128));
                    count--;
                    buffer[count] = ch;
                }
            } else if (ch >= 56192 && ch <= 56319) {
                // private high surrogate, no effing clue, so skip it
                count++;
            } else {
                buffer[count] = ch;
            }
        } else {
            count++;
        }
    }
    return new String(buffer);
}","public void test099() throws Throwable {
    MockRandom mockRandom0 = new MockRandom();
    // Undeclared exception!
    try {
        RandomStringUtils.random(57343, 57343, 57343, false, false, (char[]) null, (Random) mockRandom0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>Creates a random string based on a variety of options, using
 * supplied source of randomness.</p>
 *
 * <p>If start and end are both {@code 0}, start and end are set
 * to {@code ' '} and {@code 'z'}, the ASCII printable
 * characters, will be used, unless letters and numbers are both
 * {@code false}, in which case, start and end are set to
 * {@code 0} and {@code Integer.MAX_VALUE}.
 *
 * <p>If set is not {@code null}, characters between start and
 * end are chosen.</p>
 *
 * <p>This method accepts a user-supplied {@link Random}
 * instance to use as a source of randomness. By seeding a single
 * {@link Random} instance with a fixed seed and using it for each call,
 * the same random sequence of strings can be generated repeatedly
 * and predictably.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from, must not be empty.
 *  If {@code null}, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
 * @since 2.0
 */"
"public static String random(int count, boolean letters, boolean numbers) {
    return random(count, 0, 0, letters, numbers);
}","public void test1010() throws Throwable {
    RandomStringUtils.random(0, 0, (-66), true, false);
    RandomStringUtils.random(0, """");
    // Undeclared exception!
    RandomStringUtils.random(32, true, true);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alpha-numeric
 * characters as indicated by the arguments.</p>
 *
 * @param count  the length of random string to create
 * @param letters  if {@code true}, generated string will include
 *  alphabetic characters
 * @param numbers  if {@code true}, generated string will include
 *  numeric characters
 * @return the random string
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars) {
    return random(count, start, end, letters, numbers, chars, RANDOM);
}","public void test1111() throws Throwable {
    int int0 = 3269;
    int int1 = 0;
    boolean boolean0 = true;
    char[] charArray0 = new char[4];
    charArray0[0] = '`';
    charArray0[1] = '~';
    char char0 = 'H';
    charArray0[2] = 'H';
    char char1 = 'S';
    charArray0[3] = 'S';
    // Undeclared exception!
    RandomStringUtils.random(3269, 0, (-1198), true, true, charArray0);
}","/**
 * <p>Creates a random string based on a variety of options, using
 * default source of randomness.</p>
 *
 * <p>This method has exactly the same semantics as
 * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but
 * instead of using an externally supplied source of randomness, it uses
 * the internal static {@link Random} instance.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from.
 *  If {@code null}, then it will use the set of all chars.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 */"
"public static String randomAlphanumeric(int count) {
    return random(count, true, true);
}","public void test1212() throws Throwable {
    RandomStringUtils randomStringUtils0 = new RandomStringUtils();
    RandomStringUtils.randomAscii(326);
    int int0 = 1;
    // Undeclared exception!
    RandomStringUtils.randomAlphanumeric(1);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alpha-numeric
 * characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String random(int count, char... chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, 0, chars.length, false, false, chars, RANDOM);
}","public void test1313() throws Throwable {
    RandomStringUtils.random(3785);
    RandomStringUtils.random(3785, (char[]) null);
    RandomStringUtils.random(32, (char[]) null);
    RandomStringUtils.random(32, 0, 0, false, false, (char[]) null);
    RandomStringUtils.random(0, (char[]) null);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters specified.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,
 *  may be null
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0.
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {
    if (count == 0) {
        return """";
    } else if (count < 0) {
        throw new IllegalArgumentException(""Requested random string length "" + count + "" is less than 0."");
    }
    if (start == 0 && end == 0) {
        if (!letters && !numbers) {
            end = Integer.MAX_VALUE;
        } else {
            end = 'z' + 1;
            start = ' ';
        }
    }
    char[] buffer = new char[count];
    int gap = end - start;
    while (count-- != 0) {
        char ch;
        if (chars == null) {
            ch = (char) (random.nextInt(gap) + start);
        } else {
            ch = chars[random.nextInt(gap) + start];
        }
        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {
            if (ch >= 56320 && ch <= 57343) {
                if (count == 0) {
                    count++;
                } else {
                    // low surrogate, insert high surrogate after putting it in
                    buffer[count] = ch;
                    count--;
                    buffer[count] = (char) (55296 + random.nextInt(128));
                }
            } else if (ch >= 55296 && ch <= 56191) {
                if (count == 0) {
                    count++;
                } else {
                    // high surrogate, insert low surrogate before putting it in
                    buffer[count] = (char) (56320 + random.nextInt(128));
                    count--;
                    buffer[count] = ch;
                }
            } else if (ch >= 56192 && ch <= 56319) {
                // private high surrogate, no effing clue, so skip it
                count++;
            } else {
                buffer[count] = ch;
            }
        } else {
            count++;
        }
    }
    return new String(buffer);
}","public void test1414() throws Throwable {
    char[] charArray0 = new char[3];
    charArray0[0] = 'j';
    charArray0[1] = 'd';
    charArray0[2] = '5';
    MockRandom mockRandom0 = new MockRandom(0);
    RandomStringUtils.random(0, (-2585), (-2585), false, false, charArray0, (Random) mockRandom0);
}","/**
 * <p>Creates a random string based on a variety of options, using
 * supplied source of randomness.</p>
 *
 * <p>If start and end are both {@code 0}, start and end are set
 * to {@code ' '} and {@code 'z'}, the ASCII printable
 * characters, will be used, unless letters and numbers are both
 * {@code false}, in which case, start and end are set to
 * {@code 0} and {@code Integer.MAX_VALUE}.
 *
 * <p>If set is not {@code null}, characters between start and
 * end are chosen.</p>
 *
 * <p>This method accepts a user-supplied {@link Random}
 * instance to use as a source of randomness. By seeding a single
 * {@link Random} instance with a fixed seed and using it for each call,
 * the same random sequence of strings can be generated repeatedly
 * and predictably.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from, must not be empty.
 *  If {@code null}, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
 * @since 2.0
 */"
"public static String randomNumeric(int count) {
    return random(count, false, true);
}","public void test1515() throws Throwable {
    int int0 = (-2531);
    // Undeclared exception!
    try {
        RandomStringUtils.randomNumeric((-2531));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -2531 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of numeric
 * characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String random(int count, String chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, chars.toCharArray());
}","public void test1616() throws Throwable {
    int int0 = 0;
    RandomStringUtils.random(0, 2528, (-266), false, false);
    // Undeclared exception!
    try {
        RandomStringUtils.random(2528, """");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters
 * specified by the string, must not be empty.
 * If null, the set of all characters is used.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the String containing the set of characters to use,
 *  may be null, but must not be empty
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.
 */"
"public static String random(int count, String chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, chars.toCharArray());
}","public void test1717() throws Throwable {
    // Undeclared exception!
    try {
        RandomStringUtils.random((-190), ""-o'u91%9~:ny|"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -190 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters
 * specified by the string, must not be empty.
 * If null, the set of all characters is used.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the String containing the set of characters to use,
 *  may be null, but must not be empty
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars) {
    return random(count, start, end, letters, numbers, chars, RANDOM);
}","public void test1818() throws Throwable {
    char[] charArray0 = new char[1];
    charArray0[0] = '6';
    // Undeclared exception!
    try {
        RandomStringUtils.random(1935, 1935, 0, true, true, charArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>Creates a random string based on a variety of options, using
 * default source of randomness.</p>
 *
 * <p>This method has exactly the same semantics as
 * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but
 * instead of using an externally supplied source of randomness, it uses
 * the internal static {@link Random} instance.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from.
 *  If {@code null}, then it will use the set of all chars.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 */"
"public static String random(int count, char... chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, 0, chars.length, false, false, chars, RANDOM);
}","public void test1919() throws Throwable {
    RandomStringUtils.randomAscii(0);
    RandomStringUtils.randomAlphabetic(0);
    char[] charArray0 = new char[2];
    charArray0[0] = '_';
    charArray0[1] = 'I';
    RandomStringUtils.random(0, charArray0);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters specified.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,
 *  may be null
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0.
 */"
"public static String random(int count, String chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, chars.toCharArray());
}","public void test2020() throws Throwable {
    int int0 = 56320;
    // Undeclared exception!
    RandomStringUtils.random(56320, ""org.apache.commons.lang3.RandomStringUtils"");
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters
 * specified by the string, must not be empty.
 * If null, the set of all characters is used.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the String containing the set of characters to use,
 *  may be null, but must not be empty
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars) {
    return random(count, start, end, letters, numbers, chars, RANDOM);
}","public void test2121() throws Throwable {
    char[] charArray0 = new char[4];
    charArray0[0] = '6';
    charArray0[1] = 'u';
    charArray0[2] = 'j';
    charArray0[3] = 'e';
    // Undeclared exception!
    try {
        RandomStringUtils.random(1, 1, 1, false, true, charArray0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>Creates a random string based on a variety of options, using
 * default source of randomness.</p>
 *
 * <p>This method has exactly the same semantics as
 * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but
 * instead of using an externally supplied source of randomness, it uses
 * the internal static {@link Random} instance.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from.
 *  If {@code null}, then it will use the set of all chars.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars) {
    return random(count, start, end, letters, numbers, chars, RANDOM);
}","public void test2222() throws Throwable {
    int int0 = 0;
    boolean boolean0 = false;
    char[] charArray0 = new char[5];
    charArray0[0] = '(';
    charArray0[1] = '3';
    charArray0[2] = '9';
    charArray0[3] = '*';
    charArray0[4] = 'u';
    // Undeclared exception!
    try {
        RandomStringUtils.random((-2237), 0, (-2237), false, false, charArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -2237 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string based on a variety of options, using
 * default source of randomness.</p>
 *
 * <p>This method has exactly the same semantics as
 * {@link #random(int,int,int,boolean,boolean,char[],Random)}, but
 * instead of using an externally supplied source of randomness, it uses
 * the internal static {@link Random} instance.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from.
 *  If {@code null}, then it will use the set of all chars.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 */"
"// Random
//-----------------------------------------------------------------------
/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of all characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */
public static String random(int count) {
    return random(count, false, false);
}","public void test2323() throws Throwable {
    RandomStringUtils randomStringUtils0 = new RandomStringUtils();
    RandomStringUtils.random(0);
}",""
"public static String random(int count, int start, int end, boolean letters, boolean numbers) {
    return random(count, start, end, letters, numbers, null, RANDOM);
}","public void test2424() throws Throwable {
    int int0 = 0;
    // Undeclared exception!
    try {
        RandomStringUtils.random((-938), 0, (-938), true, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -938 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alpha-numeric
 * characters as indicated by the arguments.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  if {@code true}, generated string will include
 *  alphabetic characters
 * @param numbers  if {@code true}, generated string will include
 *  numeric characters
 * @return the random string
 */"
"// Random
//-----------------------------------------------------------------------
/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of all characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */
public static String random(int count) {
    return random(count, false, false);
}","public void test2525() throws Throwable {
    int int0 = (-1);
    // Undeclared exception!
    try {
        RandomStringUtils.random((-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -1 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}",""
"public static String random(int count, char... chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, 0, chars.length, false, false, chars, RANDOM);
}","public void test2626() throws Throwable {
    char[] charArray0 = new char[9];
    charArray0[0] = '~';
    charArray0[1] = '.';
    charArray0[2] = 'E';
    charArray0[3] = 's';
    charArray0[4] = 'J';
    charArray0[5] = '~';
    charArray0[6] = 'k';
    charArray0[7] = '[';
    charArray0[8] = 'q';
    // Undeclared exception!
    try {
        RandomStringUtils.random((-4002), charArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -4002 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters specified.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,
 *  may be null
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0.
 */"
"public static String random(int count, char... chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, 0, chars.length, false, false, chars, RANDOM);
}","public void test2727() throws Throwable {
    RandomStringUtils.random(0, false, false);
    RandomStringUtils.randomNumeric(0);
    RandomStringUtils.random(0, """");
    RandomStringUtils.randomNumeric(0);
    char[] charArray0 = new char[3];
    charArray0[0] = 'D';
    charArray0[1] = '%';
    charArray0[2] = 'x';
    // Undeclared exception!
    RandomStringUtils.random(56320, charArray0);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters specified.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,
 *  may be null
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0.
 */"
"public static String randomAlphanumeric(int count) {
    return random(count, true, true);
}","public void test2828() throws Throwable {
    // Undeclared exception!
    RandomStringUtils.randomAlphanumeric(1);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alpha-numeric
 * characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String randomAscii(int count) {
    return random(count, 32, 127, false, false);
}","public void test2929() throws Throwable {
    int int0 = 0;
    RandomStringUtils.randomAlphanumeric(0);
    RandomStringUtils randomStringUtils0 = new RandomStringUtils();
    // Undeclared exception!
    try {
        RandomStringUtils.randomAscii((-1207));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -1207 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters whose
 * ASCII value is between {@code 32} and {@code 126} (inclusive).</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String random(int count, char... chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, 0, chars.length, false, false, chars, RANDOM);
}","public void test3030() throws Throwable {
    RandomStringUtils.random(0, (char[]) null);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters specified.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,
 *  may be null
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0.
 */"
"// Random
//-----------------------------------------------------------------------
/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of all characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */
public static String random(int count) {
    return random(count, false, false);
}","public void test3131() throws Throwable {
    // Undeclared exception!
    RandomStringUtils.random(55296);
}",""
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {
    if (count == 0) {
        return """";
    } else if (count < 0) {
        throw new IllegalArgumentException(""Requested random string length "" + count + "" is less than 0."");
    }
    if (start == 0 && end == 0) {
        if (!letters && !numbers) {
            end = Integer.MAX_VALUE;
        } else {
            end = 'z' + 1;
            start = ' ';
        }
    }
    char[] buffer = new char[count];
    int gap = end - start;
    while (count-- != 0) {
        char ch;
        if (chars == null) {
            ch = (char) (random.nextInt(gap) + start);
        } else {
            ch = chars[random.nextInt(gap) + start];
        }
        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {
            if (ch >= 56320 && ch <= 57343) {
                if (count == 0) {
                    count++;
                } else {
                    // low surrogate, insert high surrogate after putting it in
                    buffer[count] = ch;
                    count--;
                    buffer[count] = (char) (55296 + random.nextInt(128));
                }
            } else if (ch >= 55296 && ch <= 56191) {
                if (count == 0) {
                    count++;
                } else {
                    // high surrogate, insert low surrogate before putting it in
                    buffer[count] = (char) (56320 + random.nextInt(128));
                    count--;
                    buffer[count] = ch;
                }
            } else if (ch >= 56192 && ch <= 56319) {
                // private high surrogate, no effing clue, so skip it
                count++;
            } else {
                buffer[count] = ch;
            }
        } else {
            count++;
        }
    }
    return new String(buffer);
}","public void test3232() throws Throwable {
    char[] charArray0 = new char[7];
    charArray0[0] = '{';
    charArray0[1] = 'c';
    charArray0[2] = ' ';
    charArray0[3] = 'f';
    charArray0[4] = '7';
    charArray0[5] = '1';
    charArray0[6] = 'I';
    MockRandom mockRandom0 = new MockRandom(2807L);
    // Undeclared exception!
    try {
        RandomStringUtils.random(713, 713, 254, false, false, charArray0, (Random) mockRandom0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>Creates a random string based on a variety of options, using
 * supplied source of randomness.</p>
 *
 * <p>If start and end are both {@code 0}, start and end are set
 * to {@code ' '} and {@code 'z'}, the ASCII printable
 * characters, will be used, unless letters and numbers are both
 * {@code false}, in which case, start and end are set to
 * {@code 0} and {@code Integer.MAX_VALUE}.
 *
 * <p>If set is not {@code null}, characters between start and
 * end are chosen.</p>
 *
 * <p>This method accepts a user-supplied {@link Random}
 * instance to use as a source of randomness. By seeding a single
 * {@link Random} instance with a fixed seed and using it for each call,
 * the same random sequence of strings can be generated repeatedly
 * and predictably.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from, must not be empty.
 *  If {@code null}, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
 * @since 2.0
 */"
"public static String randomAlphanumeric(int count) {
    return random(count, true, true);
}","public void test3333() throws Throwable {
    int int0 = (-1134);
    // Undeclared exception!
    try {
        RandomStringUtils.randomAlphanumeric((-1134));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -1134 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alpha-numeric
 * characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String randomNumeric(int count) {
    return random(count, false, true);
}","public void test3434() throws Throwable {
    // Undeclared exception!
    RandomStringUtils.randomNumeric(885);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of numeric
 * characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String random(int count, boolean letters, boolean numbers) {
    return random(count, 0, 0, letters, numbers);
}","public void test3535() throws Throwable {
    int int0 = (-563);
    boolean boolean0 = false;
    // Undeclared exception!
    try {
        RandomStringUtils.random((-563), false, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -563 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alpha-numeric
 * characters as indicated by the arguments.</p>
 *
 * @param count  the length of random string to create
 * @param letters  if {@code true}, generated string will include
 *  alphabetic characters
 * @param numbers  if {@code true}, generated string will include
 *  numeric characters
 * @return the random string
 */"
"public static String randomAlphabetic(int count) {
    return random(count, true, false);
}","public void test3636() throws Throwable {
    int int0 = 381;
    // Undeclared exception!
    RandomStringUtils.randomAlphabetic(381);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alphabetic
 * characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String randomAlphabetic(int count) {
    return random(count, true, false);
}","public void test3737() throws Throwable {
    // Undeclared exception!
    try {
        RandomStringUtils.randomAlphabetic((-417));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -417 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alphabetic
 * characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String random(int count, char... chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, 0, chars.length, false, false, chars, RANDOM);
}","public void test3838() throws Throwable {
    char[] charArray0 = new char[6];
    charArray0[0] = 'e';
    charArray0[1] = 'C';
    charArray0[2] = ',';
    charArray0[3] = '7';
    charArray0[4] = 'T';
    charArray0[5] = 'V';
    RandomStringUtils.random(0, charArray0);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters specified.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,
 *  may be null
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0.
 */"
"public static String random(int count, char... chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, 0, chars.length, false, false, chars, RANDOM);
}","public void test3939() throws Throwable {
    char[] charArray0 = new char[4];
    charArray0[0] = 'R';
    charArray0[1] = 'J';
    charArray0[2] = 'n';
    charArray0[3] = 'M';
    RandomStringUtils.random(1, charArray0);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters specified.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the character array containing the set of characters to use,
 *  may be null
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0.
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers) {
    return random(count, start, end, letters, numbers, null, RANDOM);
}","public void test4040() throws Throwable {
    boolean boolean0 = true;
    // Undeclared exception!
    try {
        RandomStringUtils.random((-738), (-738), (-738), true, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -738 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alpha-numeric
 * characters as indicated by the arguments.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  if {@code true}, generated string will include
 *  alphabetic characters
 * @param numbers  if {@code true}, generated string will include
 *  numeric characters
 * @return the random string
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {
    if (count == 0) {
        return """";
    } else if (count < 0) {
        throw new IllegalArgumentException(""Requested random string length "" + count + "" is less than 0."");
    }
    if (start == 0 && end == 0) {
        if (!letters && !numbers) {
            end = Integer.MAX_VALUE;
        } else {
            end = 'z' + 1;
            start = ' ';
        }
    }
    char[] buffer = new char[count];
    int gap = end - start;
    while (count-- != 0) {
        char ch;
        if (chars == null) {
            ch = (char) (random.nextInt(gap) + start);
        } else {
            ch = chars[random.nextInt(gap) + start];
        }
        if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) {
            if (ch >= 56320 && ch <= 57343) {
                if (count == 0) {
                    count++;
                } else {
                    // low surrogate, insert high surrogate after putting it in
                    buffer[count] = ch;
                    count--;
                    buffer[count] = (char) (55296 + random.nextInt(128));
                }
            } else if (ch >= 55296 && ch <= 56191) {
                if (count == 0) {
                    count++;
                } else {
                    // high surrogate, insert low surrogate before putting it in
                    buffer[count] = (char) (56320 + random.nextInt(128));
                    count--;
                    buffer[count] = ch;
                }
            } else if (ch >= 56192 && ch <= 56319) {
                // private high surrogate, no effing clue, so skip it
                count++;
            } else {
                buffer[count] = ch;
            }
        } else {
            count++;
        }
    }
    return new String(buffer);
}","public void test4141() throws Throwable {
    char[] charArray0 = new char[1];
    charArray0[0] = 'f';
    MockRandom mockRandom0 = new MockRandom((-1L));
    // Undeclared exception!
    try {
        RandomStringUtils.random(1, 1, 1, true, false, charArray0, (Random) mockRandom0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>Creates a random string based on a variety of options, using
 * supplied source of randomness.</p>
 *
 * <p>If start and end are both {@code 0}, start and end are set
 * to {@code ' '} and {@code 'z'}, the ASCII printable
 * characters, will be used, unless letters and numbers are both
 * {@code false}, in which case, start and end are set to
 * {@code 0} and {@code Integer.MAX_VALUE}.
 *
 * <p>If set is not {@code null}, characters between start and
 * end are chosen.</p>
 *
 * <p>This method accepts a user-supplied {@link Random}
 * instance to use as a source of randomness. By seeding a single
 * {@link Random} instance with a fixed seed and using it for each call,
 * the same random sequence of strings can be generated repeatedly
 * and predictably.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  only allow letters?
 * @param numbers  only allow numbers?
 * @param chars  the set of chars to choose randoms from, must not be empty.
 *  If {@code null}, then it will use the set of all chars.
 * @param random  a source of randomness.
 * @return the random string
 * @throws ArrayIndexOutOfBoundsException if there are not
 *  {@code (end - start) + 1} characters in the set array.
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
 * @since 2.0
 */"
"public static String randomAlphabetic(int count) {
    return random(count, true, false);
}","public void test4242() throws Throwable {
    RandomStringUtils randomStringUtils0 = new RandomStringUtils();
    // Undeclared exception!
    RandomStringUtils.randomAlphabetic(1);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alphabetic
 * characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String random(int count, String chars) {
    if (chars == null) {
        return random(count, 0, 0, false, false, null, RANDOM);
    }
    return random(count, chars.toCharArray());
}","public void test4343() throws Throwable {
    // Undeclared exception!
    try {
        RandomStringUtils.random((-1333), (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -1333 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of characters
 * specified by the string, must not be empty.
 * If null, the set of all characters is used.</p>
 *
 * @param count  the length of random string to create
 * @param chars  the String containing the set of characters to use,
 *  may be null, but must not be empty
 * @return the random string
 * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.
 */"
"public static String randomAlphabetic(int count) {
    return random(count, true, false);
}","public void test4444() throws Throwable {
    int int0 = 0;
    RandomStringUtils.random(0, (String) null);
    boolean boolean0 = true;
    RandomStringUtils.random(0, true, true);
    int int1 = 1;
    // Undeclared exception!
    RandomStringUtils.randomAlphabetic(1);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alphabetic
 * characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String random(int count, int start, int end, boolean letters, boolean numbers) {
    return random(count, start, end, letters, numbers, null, RANDOM);
}","public void test4545() throws Throwable {
    char[] charArray0 = new char[0];
    RandomStringUtils.random(0, charArray0);
    RandomStringUtils randomStringUtils0 = new RandomStringUtils();
    RandomStringUtils.random(0, """");
    RandomStringUtils.random(903, 301, 0, true, true);
    RandomStringUtils.random(337, false, false);
    RandomStringUtils.random(0, ""A+*zJ9ODEQ)FF96g"");
    RandomStringUtils.random(0, 0, 337, false, true, charArray0);
    RandomStringUtils.randomAlphanumeric(0);
    // Undeclared exception!
    RandomStringUtils.random(903, 903, 0, true, true);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of alpha-numeric
 * characters as indicated by the arguments.</p>
 *
 * @param count  the length of random string to create
 * @param start  the position in set of chars to start at
 * @param end  the position in set of chars to end before
 * @param letters  if {@code true}, generated string will include
 *  alphabetic characters
 * @param numbers  if {@code true}, generated string will include
 *  numeric characters
 * @return the random string
 */"
"public static String randomNumeric(int count) {
    return random(count, false, true);
}","public void test4646() throws Throwable {
    int int0 = 0;
    boolean boolean0 = false;
    RandomStringUtils.random(0, (-2681), (-2426), false, false);
    int int1 = (-3004);
    // Undeclared exception!
    try {
        RandomStringUtils.randomNumeric((-3004));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Requested random string length -3004 is less than 0.
        //
        verifyException(""org.apache.commons.lang3.RandomStringUtils"", e);
    }
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of numeric
 * characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
"public static String randomNumeric(int count) {
    return random(count, false, true);
}","public void test4747() throws Throwable {
    int int0 = 55296;
    // Undeclared exception!
    RandomStringUtils.randomNumeric(55296);
}","/**
 * <p>Creates a random string whose length is the number of characters
 * specified.</p>
 *
 * <p>Characters will be chosen from the set of numeric
 * characters.</p>
 *
 * @param count  the length of random string to create
 * @return the random string
 */"
