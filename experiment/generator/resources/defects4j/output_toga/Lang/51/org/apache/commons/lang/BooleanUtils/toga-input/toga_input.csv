focal_method,test_prefix,docstring
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test0000() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean("", '"");
    assertFalse(boolean0);
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test0011() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""yQx"");
    assertFalse(boolean0);
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test0022() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""6u"");
    assertFalse(boolean0);
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test0033() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""{}"");
    assertFalse(boolean0);
}",""
"public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (bool == null) {
        return nullValue;
    }
    return bool.booleanValue() ? trueValue : falseValue;
}","public void test0044() throws Throwable {
    Boolean boolean0 = Boolean.TRUE;
    Integer integer0 = new Integer(523);
    Integer integer1 = new Integer(1290);
    Integer integer2 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0, integer1);
    assertEquals(523, (int) integer2);
}","/**
 * <p>Converts a Boolean to an Integer specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2))  = new Integer(1)
 *   BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new Integer(0)
 *   BooleanUtils.toIntegerObject(null, new Integer(1), new Integer(0), new Integer(2))          = new Integer(2)
 * </pre>
 *
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to return if <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to return if <code>null</code>,
 *  may be <code>null</code>
 * @return the appropriate value
 */"
"public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {
    return bool ? trueValue : falseValue;
}","public void test0055() throws Throwable {
    Integer integer0 = new Integer(0);
    Integer integer1 = new Integer(89);
    Integer integer2 = BooleanUtils.toIntegerObject(false, integer0, integer1);
    assertEquals(89, (int) integer2);
}","/**
 * <p>Converts a boolean to an Integer specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(true, new Integer(1), new Integer(0))  = new Integer(1)
 *   BooleanUtils.toIntegerObject(false, new Integer(1), new Integer(0)) = new Integer(0)
 * </pre>
 *
 * @param bool  the to convert
 * @param trueValue  the value to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to return if <code>false</code>,
 *  may be <code>null</code>
 * @return the appropriate value
 */"
"public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue) {
    if (bool == null) {
        return nullValue;
    }
    return bool.booleanValue() ? trueValue : falseValue;
}","public void test0077() throws Throwable {
    Boolean boolean0 = Boolean.FALSE;
    int int0 = BooleanUtils.toInteger(boolean0, 2552, (-2003), (-1495));
    assertEquals((-2003), int0);
}","/**
 * <p>Converts a Boolean to an int specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1
 *   BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0
 *   BooleanUtils.toInteger(null, 1, 0, 2)          = 2
 * </pre>
 *
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if <code>true</code>
 * @param falseValue  the value to return if <code>false</code>
 * @param nullValue  the value to return if <code>null</code>
 * @return the appropriate value
 */"
"public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue) {
    if (bool == null) {
        return nullValue;
    }
    return bool.booleanValue() ? trueValue : falseValue;
}","public void test0088() throws Throwable {
    int int0 = BooleanUtils.toInteger((Boolean) null, (-968), (-968), (-464));
    assertEquals((-464), int0);
}","/**
 * <p>Converts a Boolean to an int specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1
 *   BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0
 *   BooleanUtils.toInteger(null, 1, 0, 2)          = 2
 * </pre>
 *
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if <code>true</code>
 * @param falseValue  the value to return if <code>false</code>
 * @param nullValue  the value to return if <code>null</code>
 * @return the appropriate value
 */"
"public static int toInteger(boolean bool, int trueValue, int falseValue) {
    return bool ? trueValue : falseValue;
}","public void test0099() throws Throwable {
    int int0 = BooleanUtils.toInteger(false, 618, 0);
    assertEquals(0, int0);
}","/**
 * <p>Converts a boolean to an int specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toInteger(true, 1, 0)  = 1
 *   BooleanUtils.toInteger(false, 1, 0) = 0
 * </pre>
 *
 * @param bool  the to convert
 * @param trueValue  the value to return if <code>true</code>
 * @param falseValue  the value to return if <code>false</code>
 * @return the appropriate value
 */"
"public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue) {
    if (value == trueValue) {
        return Boolean.TRUE;
    } else if (value == falseValue) {
        return Boolean.FALSE;
    } else if (value == nullValue) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test01010() throws Throwable {
    // Undeclared exception!
    try {
        BooleanUtils.toBooleanObject(1024, 0, 707, 43);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Integer did not match any specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Converts an int to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(3, 1, 2, 3) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>
 * @param falseValue  the value to match for <code>false</code>
 * @param nullValue  the value to to match for <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue) {
    if (value == trueValue) {
        return Boolean.TRUE;
    } else if (value == falseValue) {
        return Boolean.FALSE;
    } else if (value == nullValue) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test01111() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(0, (-123), 0, (-1316));
    assertFalse(boolean0);
}","/**
 * <p>Converts an int to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(3, 1, 2, 3) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>
 * @param falseValue  the value to match for <code>false</code>
 * @param nullValue  the value to to match for <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static boolean toBoolean(int value, int trueValue, int falseValue) {
    if (value == trueValue) {
        return true;
    } else if (value == falseValue) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match either specified value"");
}","public void test01212() throws Throwable {
    // Undeclared exception!
    try {
        BooleanUtils.toBoolean(102, 2029, 2);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Integer did not match either specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Converts an int to a boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(0, 1, 0) = false
 *   BooleanUtils.toBoolean(1, 1, 0) = true
 *   BooleanUtils.toBoolean(2, 1, 2) = false
 *   BooleanUtils.toBoolean(2, 2, 0) = true
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>
 * @param falseValue  the value to match for <code>false</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(Integer value) {
    if (value == null) {
        return null;
    }
    return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;
}","public void test01313() throws Throwable {
    Integer integer0 = new Integer((-1025));
    Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
    assertTrue(boolean0);
}","/**
 * <p>Converts an Integer to a Boolean using the convention that <code>zero</code>
 * is <code>false</code>.</p>
 *
 * <p><code>null</code> will be converted to <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(new Integer(0))    = Boolean.FALSE
 *   BooleanUtils.toBoolean(new Integer(1))    = Boolean.TRUE
 *   BooleanUtils.toBoolean(new Integer(null)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,
 *  <code>null</code> if <code>null</code> input
 */"
"public static Boolean toBooleanObject(int value) {
    return value == 0 ? Boolean.FALSE : Boolean.TRUE;
}","public void test01414() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(2);
    assertTrue(boolean0);
}","/**
 * <p>Converts an int to a Boolean using the convention that <code>zero</code>
 * is <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(0) = Boolean.FALSE
 *   BooleanUtils.toBoolean(1) = Boolean.TRUE
 *   BooleanUtils.toBoolean(2) = Boolean.TRUE
 * </pre>
 *
 * @param value  the int to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,
 *  <code>null</code> if <code>null</code>
 */"
"// Integer to Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts an int to a boolean using the convention that <code>zero</code>
 * is <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(0) = false
 *   BooleanUtils.toBoolean(1) = true
 *   BooleanUtils.toBoolean(2) = true
 * </pre>
 *
 * @param value  the int to convert
 * @return <code>true</code> if non-zero, <code>false</code>
 *  if zero
 */
public static boolean toBoolean(int value) {
    return value == 0 ? false : true;
}","public void test01515() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(116);
    assertTrue(boolean0);
}",""
"public static String toStringYesNo(Boolean bool) {
    return toString(bool, ""yes"", ""no"", null);
}","public void test01616() throws Throwable {
    Boolean boolean0 = Boolean.FALSE;
    String string0 = BooleanUtils.toStringYesNo(boolean0);
    assertNotNull(string0);
}","/**
 * <p>Converts a Boolean to a String returning <code>'yes'</code>,
 * <code>'no'</code>, or <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toStringYesNo(Boolean.TRUE)  = ""yes""
 *   BooleanUtils.toStringYesNo(Boolean.FALSE) = ""no""
 *   BooleanUtils.toStringYesNo(null)          = null;
 * </pre>
 *
 * @param bool  the Boolean to check
 * @return <code>'yes'</code>, <code>'no'</code>,
 *  or <code>null</code>
 */"
"// Boolean to String methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a Boolean to a String returning <code>'true'</code>,
 * <code>'false'</code>, or <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toStringTrueFalse(Boolean.TRUE)  = ""true""
 *   BooleanUtils.toStringTrueFalse(Boolean.FALSE) = ""false""
 *   BooleanUtils.toStringTrueFalse(null)          = null;
 * </pre>
 *
 * @param bool  the Boolean to check
 * @return <code>'true'</code>, <code>'false'</code>,
 *  or <code>null</code>
 */
public static String toStringTrueFalse(Boolean bool) {
    return toString(bool, ""true"", ""false"", null);
}","public void test01718() throws Throwable {
    String string0 = BooleanUtils.toStringTrueFalse((Boolean) null);
    assertNull(string0);
}",""
"public static String toStringOnOff(Boolean bool) {
    return toString(bool, ""on"", ""off"", null);
}","public void test01819() throws Throwable {
    String string0 = BooleanUtils.toStringOnOff((Boolean) null);
    assertNull(string0);
}","/**
 * <p>Converts a Boolean to a String returning <code>'on'</code>,
 * <code>'off'</code>, or <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toStringOnOff(Boolean.TRUE)  = ""on""
 *   BooleanUtils.toStringOnOff(Boolean.FALSE) = ""off""
 *   BooleanUtils.toStringOnOff(null)          = null;
 * </pre>
 *
 * @param bool  the Boolean to check
 * @return <code>'on'</code>, <code>'off'</code>,
 *  or <code>null</code>
 */"
"public static String toString(boolean bool, String trueString, String falseString) {
    return bool ? trueString : falseString;
}","public void test01920() throws Throwable {
    String string0 = BooleanUtils.toString(true, (String) null, ""OT]\u0002qT+]g]C3zIRR"");
    assertNull(string0);
}","/**
 * <p>Converts a boolean to a String returning one of the input Strings.</p>
 *
 * <pre>
 *   BooleanUtils.toString(true, ""true"", ""false"")   = ""true""
 *   BooleanUtils.toString(false, ""true"", ""false"")  = ""false""
 * </pre>
 *
 * @param bool  the Boolean to check
 * @param trueString  the String to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseString  the String to return if <code>false</code>,
 *  may be <code>null</code>
 * @return one of the two input Strings
 */"
"public static String toString(boolean bool, String trueString, String falseString) {
    return bool ? trueString : falseString;
}","public void test02021() throws Throwable {
    String string0 = BooleanUtils.toString(true, """", """");
    assertEquals("""", string0);
}","/**
 * <p>Converts a boolean to a String returning one of the input Strings.</p>
 *
 * <pre>
 *   BooleanUtils.toString(true, ""true"", ""false"")   = ""true""
 *   BooleanUtils.toString(false, ""true"", ""false"")  = ""false""
 * </pre>
 *
 * @param bool  the Boolean to check
 * @param trueString  the String to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseString  the String to return if <code>false</code>,
 *  may be <code>null</code>
 * @return one of the two input Strings
 */"
"public static String toString(Boolean bool, String trueString, String falseString, String nullString) {
    if (bool == null) {
        return nullString;
    }
    return bool.booleanValue() ? trueString : falseString;
}","public void test02122() throws Throwable {
    Boolean boolean0 = new Boolean(false);
    String string0 = BooleanUtils.toString(boolean0, ""The String did not match any specified value"", """", """");
    assertEquals("""", string0);
}","/**
 * <p>Converts a Boolean to a String returning one of the input Strings.</p>
 *
 * <pre>
 *   BooleanUtils.toString(Boolean.TRUE, ""true"", ""false"", null)   = ""true""
 *   BooleanUtils.toString(Boolean.FALSE, ""true"", ""false"", null)  = ""false""
 *   BooleanUtils.toString(null, ""true"", ""false"", null)           = null;
 * </pre>
 *
 * @param bool  the Boolean to check
 * @param trueString  the String to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseString  the String to return if <code>false</code>,
 *  may be <code>null</code>
 * @param nullString  the String to return if <code>null</code>,
 *  may be <code>null</code>
 * @return one of the three input Strings
 */"
"public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {
    return bool ? trueValue : falseValue;
}","public void test02223() throws Throwable {
    Integer integer0 = new Integer(939);
    Integer integer1 = BooleanUtils.toIntegerObject(true, integer0, integer0);
    assertEquals(939, (int) integer1);
}","/**
 * <p>Converts a boolean to an Integer specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(true, new Integer(1), new Integer(0))  = new Integer(1)
 *   BooleanUtils.toIntegerObject(false, new Integer(1), new Integer(0)) = new Integer(0)
 * </pre>
 *
 * @param bool  the to convert
 * @param trueValue  the value to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to return if <code>false</code>,
 *  may be <code>null</code>
 * @return the appropriate value
 */"
"public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (bool == null) {
        return nullValue;
    }
    return bool.booleanValue() ? trueValue : falseValue;
}","public void test02324() throws Throwable {
    Boolean boolean0 = Boolean.FALSE;
    Integer integer0 = new Integer(0);
    Integer integer1 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0, integer0);
    assertEquals(0, (int) integer1);
}","/**
 * <p>Converts a Boolean to an Integer specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2))  = new Integer(1)
 *   BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new Integer(0)
 *   BooleanUtils.toIntegerObject(null, new Integer(1), new Integer(0), new Integer(2))          = new Integer(2)
 * </pre>
 *
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to return if <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to return if <code>null</code>,
 *  may be <code>null</code>
 * @return the appropriate value
 */"
"public static int toInteger(boolean bool, int trueValue, int falseValue) {
    return bool ? trueValue : falseValue;
}","public void test02425() throws Throwable {
    int int0 = BooleanUtils.toInteger(true, 117, (-2057));
    assertEquals(117, int0);
}","/**
 * <p>Converts a boolean to an int specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toInteger(true, 1, 0)  = 1
 *   BooleanUtils.toInteger(false, 1, 0) = 0
 * </pre>
 *
 * @param bool  the to convert
 * @param trueValue  the value to return if <code>true</code>
 * @param falseValue  the value to return if <code>false</code>
 * @return the appropriate value
 */"
"public static String toString(boolean bool, String trueString, String falseString) {
    return bool ? trueString : falseString;
}","public void test02526() throws Throwable {
    String string0 = BooleanUtils.toString(true, ""yes"", ""true"");
    assertEquals(""yes"", string0);
}","/**
 * <p>Converts a boolean to a String returning one of the input Strings.</p>
 *
 * <pre>
 *   BooleanUtils.toString(true, ""true"", ""false"")   = ""true""
 *   BooleanUtils.toString(false, ""true"", ""false"")  = ""false""
 * </pre>
 *
 * @param bool  the Boolean to check
 * @param trueString  the String to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseString  the String to return if <code>false</code>,
 *  may be <code>null</code>
 * @return one of the two input Strings
 */"
"public static String toString(boolean bool, String trueString, String falseString) {
    return bool ? trueString : falseString;
}","public void test02627() throws Throwable {
    Boolean boolean0 = new Boolean(false);
    String string0 = BooleanUtils.toString((boolean) boolean0, """", ""no"");
    assertEquals(""no"", string0);
}","/**
 * <p>Converts a boolean to a String returning one of the input Strings.</p>
 *
 * <pre>
 *   BooleanUtils.toString(true, ""true"", ""false"")   = ""true""
 *   BooleanUtils.toString(false, ""true"", ""false"")  = ""false""
 * </pre>
 *
 * @param bool  the Boolean to check
 * @param trueString  the String to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseString  the String to return if <code>false</code>,
 *  may be <code>null</code>
 * @return one of the two input Strings
 */"
"public static Boolean toBooleanObject(Integer value) {
    if (value == null) {
        return null;
    }
    return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;
}","public void test02728() throws Throwable {
    Integer integer0 = new Integer(2244);
    Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
    assertTrue(boolean0);
}","/**
 * <p>Converts an Integer to a Boolean using the convention that <code>zero</code>
 * is <code>false</code>.</p>
 *
 * <p><code>null</code> will be converted to <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(new Integer(0))    = Boolean.FALSE
 *   BooleanUtils.toBoolean(new Integer(1))    = Boolean.TRUE
 *   BooleanUtils.toBoolean(new Integer(null)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,
 *  <code>null</code> if <code>null</code> input
 */"
"public static String toString(Boolean bool, String trueString, String falseString, String nullString) {
    if (bool == null) {
        return nullString;
    }
    return bool.booleanValue() ? trueString : falseString;
}","public void test02729() throws Throwable {
    Integer integer0 = new Integer(2244);
    Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
    String string0 = BooleanUtils.toString(boolean0, ""W+Lz+O_j{lD'o"", ""W+Lz+O_j{lD'o"", ""off"");
    assertEquals(""W+Lz+O_j{lD'o"", string0);
}","/**
 * <p>Converts a Boolean to a String returning one of the input Strings.</p>
 *
 * <pre>
 *   BooleanUtils.toString(Boolean.TRUE, ""true"", ""false"", null)   = ""true""
 *   BooleanUtils.toString(Boolean.FALSE, ""true"", ""false"", null)  = ""false""
 *   BooleanUtils.toString(null, ""true"", ""false"", null)           = null;
 * </pre>
 *
 * @param bool  the Boolean to check
 * @param trueString  the String to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseString  the String to return if <code>false</code>,
 *  may be <code>null</code>
 * @param nullString  the String to return if <code>null</code>,
 *  may be <code>null</code>
 * @return one of the three input Strings
 */"
"public static String toString(Boolean bool, String trueString, String falseString, String nullString) {
    if (bool == null) {
        return nullString;
    }
    return bool.booleanValue() ? trueString : falseString;
}","public void test02830() throws Throwable {
    String string0 = BooleanUtils.toString((Boolean) null, (String) null, ""Index: "", (String) null);
    assertNull(string0);
}","/**
 * <p>Converts a Boolean to a String returning one of the input Strings.</p>
 *
 * <pre>
 *   BooleanUtils.toString(Boolean.TRUE, ""true"", ""false"", null)   = ""true""
 *   BooleanUtils.toString(Boolean.FALSE, ""true"", ""false"", null)  = ""false""
 *   BooleanUtils.toString(null, ""true"", ""false"", null)           = null;
 * </pre>
 *
 * @param bool  the Boolean to check
 * @param trueString  the String to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseString  the String to return if <code>false</code>,
 *  may be <code>null</code>
 * @param nullString  the String to return if <code>null</code>,
 *  may be <code>null</code>
 * @return one of the three input Strings
 */"
"public static boolean isFalse(Boolean bool) {
    if (bool == null) {
        return false;
    }
    return bool.booleanValue() ? false : true;
}","public void test02931() throws Throwable {
    Boolean boolean0 = new Boolean(false);
    boolean boolean1 = BooleanUtils.isFalse(boolean0);
    assertTrue(boolean1);
}","/**
 * <p>Checks if a <code>Boolean</code> value is <code>false</code>,
 * handling <code>null</code> by returning <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.isFalse(Boolean.TRUE)  = false
 *   BooleanUtils.isFalse(Boolean.FALSE) = true
 *   BooleanUtils.isFalse(null)          = false
 * </pre>
 *
 * @param bool  the boolean to check, null returns <code>false</code>
 * @return <code>true</code> only if the input is non-null and false
 * @since 2.1
 */"
"// boolean Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Checks if a <code>Boolean</code> value is <code>true</code>,
 * handling <code>null</code> by returning <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.isTrue(Boolean.TRUE)  = true
 *   BooleanUtils.isTrue(Boolean.FALSE) = false
 *   BooleanUtils.isTrue(null)          = false
 * </pre>
 *
 * @param bool  the boolean to check, null returns <code>false</code>
 * @return <code>true</code> only if the input is non-null and true
 * @since 2.1
 */
public static boolean isTrue(Boolean bool) {
    if (bool == null) {
        return false;
    }
    return bool.booleanValue() ? true : false;
}","public void test03032() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject("""", """", """", """");
    boolean boolean1 = BooleanUtils.isTrue(boolean0);
    assertTrue(boolean1);
}",""
"public static Boolean xor(Boolean[] array) {
    if (array == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    } else if (array.length == 0) {
        throw new IllegalArgumentException(""Array is empty"");
    }
    boolean[] primitive = null;
    try {
        primitive = ArrayUtils.toPrimitive(array);
    } catch (NullPointerException ex) {
        throw new IllegalArgumentException(""The array must not contain any null elements"");
    }
    return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;
}","public void test03133() throws Throwable {
    Boolean[] booleanArray0 = new Boolean[4];
    Boolean boolean0 = Boolean.TRUE;
    booleanArray0[0] = boolean0;
    Boolean boolean1 = Boolean.FALSE;
    booleanArray0[1] = boolean1;
    booleanArray0[2] = boolean1;
    booleanArray0[3] = boolean1;
    Boolean boolean2 = BooleanUtils.xor(booleanArray0);
    assertTrue(boolean2);
}","/**
 * <p>Performs an xor on an array of Booleans.</p>
 *
 * <pre>
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE
 * </pre>
 *
 * @param array  an array of <code>Boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 * @throws IllegalArgumentException if <code>array</code> contains a <code>null</code>
 */"
"public static Boolean xor(Boolean[] array) {
    if (array == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    } else if (array.length == 0) {
        throw new IllegalArgumentException(""Array is empty"");
    }
    boolean[] primitive = null;
    try {
        primitive = ArrayUtils.toPrimitive(array);
    } catch (NullPointerException ex) {
        throw new IllegalArgumentException(""The array must not contain any null elements"");
    }
    return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;
}","public void test03234() throws Throwable {
    Boolean boolean0 = new Boolean(false);
    Boolean[] booleanArray0 = new Boolean[5];
    booleanArray0[0] = boolean0;
    booleanArray0[1] = boolean0;
    booleanArray0[2] = boolean0;
    booleanArray0[3] = boolean0;
    booleanArray0[4] = boolean0;
    Boolean boolean1 = BooleanUtils.xor(booleanArray0);
    assertFalse(boolean1);
}","/**
 * <p>Performs an xor on an array of Booleans.</p>
 *
 * <pre>
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE
 * </pre>
 *
 * @param array  an array of <code>Boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 * @throws IllegalArgumentException if <code>array</code> contains a <code>null</code>
 */"
"public static Boolean xor(Boolean[] array) {
    if (array == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    } else if (array.length == 0) {
        throw new IllegalArgumentException(""Array is empty"");
    }
    boolean[] primitive = null;
    try {
        primitive = ArrayUtils.toPrimitive(array);
    } catch (NullPointerException ex) {
        throw new IllegalArgumentException(""The array must not contain any null elements"");
    }
    return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;
}","public void test03335() throws Throwable {
    Boolean[] booleanArray0 = new Boolean[0];
    // Undeclared exception!
    try {
        BooleanUtils.xor(booleanArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Array is empty
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Performs an xor on an array of Booleans.</p>
 *
 * <pre>
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE
 * </pre>
 *
 * @param array  an array of <code>Boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 * @throws IllegalArgumentException if <code>array</code> contains a <code>null</code>
 */"
"public static Boolean xor(Boolean[] array) {
    if (array == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    } else if (array.length == 0) {
        throw new IllegalArgumentException(""Array is empty"");
    }
    boolean[] primitive = null;
    try {
        primitive = ArrayUtils.toPrimitive(array);
    } catch (NullPointerException ex) {
        throw new IllegalArgumentException(""The array must not contain any null elements"");
    }
    return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;
}","public void test03436() throws Throwable {
    // Undeclared exception!
    try {
        BooleanUtils.xor((Boolean[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Array must not be null
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Performs an xor on an array of Booleans.</p>
 *
 * <pre>
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE
 * </pre>
 *
 * @param array  an array of <code>Boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 * @throws IllegalArgumentException if <code>array</code> contains a <code>null</code>
 */"
"public static Boolean xor(Boolean[] array) {
    if (array == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    } else if (array.length == 0) {
        throw new IllegalArgumentException(""Array is empty"");
    }
    boolean[] primitive = null;
    try {
        primitive = ArrayUtils.toPrimitive(array);
    } catch (NullPointerException ex) {
        throw new IllegalArgumentException(""The array must not contain any null elements"");
    }
    return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;
}","public void test03537() throws Throwable {
    Boolean[] booleanArray0 = new Boolean[5];
    // Undeclared exception!
    try {
        BooleanUtils.xor(booleanArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The array must not contain any null elements
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Performs an xor on an array of Booleans.</p>
 *
 * <pre>
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE
 *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE
 * </pre>
 *
 * @param array  an array of <code>Boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 * @throws IllegalArgumentException if <code>array</code> contains a <code>null</code>
 */"
"// xor methods
// ----------------------------------------------------------------------
/**
 * <p>Performs an xor on a set of booleans.</p>
 *
 * <pre>
 *   BooleanUtils.xor(new boolean[] { true, true })   = false
 *   BooleanUtils.xor(new boolean[] { false, false }) = false
 *   BooleanUtils.xor(new boolean[] { true, false })  = true
 * </pre>
 *
 * @param array  an array of <code>boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 */
public static boolean xor(boolean[] array) {
    // Validates input
    if (array == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    } else if (array.length == 0) {
        throw new IllegalArgumentException(""Array is empty"");
    }
    // Loops through array, comparing each item
    int trueCount = 0;
    for (int i = 0; i < array.length; i++) {
        // If item is true, and trueCount is < 1, increments count
        // Else, xor fails
        if (array[i]) {
            if (trueCount < 1) {
                trueCount++;
            } else {
                return false;
            }
        }
    }
    // Returns true if there was exactly 1 true item
    return trueCount == 1;
}","public void test03638() throws Throwable {
    boolean[] booleanArray0 = new boolean[7];
    booleanArray0[0] = true;
    booleanArray0[2] = true;
    boolean boolean0 = BooleanUtils.xor(booleanArray0);
    assertFalse(boolean0);
}",""
"// xor methods
// ----------------------------------------------------------------------
/**
 * <p>Performs an xor on a set of booleans.</p>
 *
 * <pre>
 *   BooleanUtils.xor(new boolean[] { true, true })   = false
 *   BooleanUtils.xor(new boolean[] { false, false }) = false
 *   BooleanUtils.xor(new boolean[] { true, false })  = true
 * </pre>
 *
 * @param array  an array of <code>boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 */
public static boolean xor(boolean[] array) {
    // Validates input
    if (array == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    } else if (array.length == 0) {
        throw new IllegalArgumentException(""Array is empty"");
    }
    // Loops through array, comparing each item
    int trueCount = 0;
    for (int i = 0; i < array.length; i++) {
        // If item is true, and trueCount is < 1, increments count
        // Else, xor fails
        if (array[i]) {
            if (trueCount < 1) {
                trueCount++;
            } else {
                return false;
            }
        }
    }
    // Returns true if there was exactly 1 true item
    return trueCount == 1;
}","public void test03739() throws Throwable {
    boolean[] booleanArray0 = new boolean[7];
    booleanArray0[0] = true;
    boolean boolean0 = BooleanUtils.xor(booleanArray0);
    assertTrue(boolean0);
}",""
"// xor methods
// ----------------------------------------------------------------------
/**
 * <p>Performs an xor on a set of booleans.</p>
 *
 * <pre>
 *   BooleanUtils.xor(new boolean[] { true, true })   = false
 *   BooleanUtils.xor(new boolean[] { false, false }) = false
 *   BooleanUtils.xor(new boolean[] { true, false })  = true
 * </pre>
 *
 * @param array  an array of <code>boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 */
public static boolean xor(boolean[] array) {
    // Validates input
    if (array == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    } else if (array.length == 0) {
        throw new IllegalArgumentException(""Array is empty"");
    }
    // Loops through array, comparing each item
    int trueCount = 0;
    for (int i = 0; i < array.length; i++) {
        // If item is true, and trueCount is < 1, increments count
        // Else, xor fails
        if (array[i]) {
            if (trueCount < 1) {
                trueCount++;
            } else {
                return false;
            }
        }
    }
    // Returns true if there was exactly 1 true item
    return trueCount == 1;
}","public void test03840() throws Throwable {
    boolean[] booleanArray0 = new boolean[0];
    // Undeclared exception!
    try {
        BooleanUtils.xor(booleanArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Array is empty
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}",""
"// xor methods
// ----------------------------------------------------------------------
/**
 * <p>Performs an xor on a set of booleans.</p>
 *
 * <pre>
 *   BooleanUtils.xor(new boolean[] { true, true })   = false
 *   BooleanUtils.xor(new boolean[] { false, false }) = false
 *   BooleanUtils.xor(new boolean[] { true, false })  = true
 * </pre>
 *
 * @param array  an array of <code>boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 */
public static boolean xor(boolean[] array) {
    // Validates input
    if (array == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    } else if (array.length == 0) {
        throw new IllegalArgumentException(""Array is empty"");
    }
    // Loops through array, comparing each item
    int trueCount = 0;
    for (int i = 0; i < array.length; i++) {
        // If item is true, and trueCount is < 1, increments count
        // Else, xor fails
        if (array[i]) {
            if (trueCount < 1) {
                trueCount++;
            } else {
                return false;
            }
        }
    }
    // Returns true if there was exactly 1 true item
    return trueCount == 1;
}","public void test03941() throws Throwable {
    // Undeclared exception!
    try {
        BooleanUtils.xor((boolean[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Array must not be null
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}",""
"// xor methods
// ----------------------------------------------------------------------
/**
 * <p>Performs an xor on a set of booleans.</p>
 *
 * <pre>
 *   BooleanUtils.xor(new boolean[] { true, true })   = false
 *   BooleanUtils.xor(new boolean[] { false, false }) = false
 *   BooleanUtils.xor(new boolean[] { true, false })  = true
 * </pre>
 *
 * @param array  an array of <code>boolean<code>s
 * @return <code>true</code> if the xor is successful.
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty.
 */
public static boolean xor(boolean[] array) {
    // Validates input
    if (array == null) {
        throw new IllegalArgumentException(""The Array must not be null"");
    } else if (array.length == 0) {
        throw new IllegalArgumentException(""Array is empty"");
    }
    // Loops through array, comparing each item
    int trueCount = 0;
    for (int i = 0; i < array.length; i++) {
        // If item is true, and trueCount is < 1, increments count
        // Else, xor fails
        if (array[i]) {
            if (trueCount < 1) {
                trueCount++;
            } else {
                return false;
            }
        }
    }
    // Returns true if there was exactly 1 true item
    return trueCount == 1;
}","public void test04042() throws Throwable {
    boolean[] booleanArray0 = new boolean[7];
    boolean boolean0 = BooleanUtils.xor(booleanArray0);
    assertFalse(boolean0);
}",""
"// boolean to String methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a boolean to a String returning <code>'true'</code>
 * or <code>'false'</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toStringTrueFalse(true)   = ""true""
 *   BooleanUtils.toStringTrueFalse(false)  = ""false""
 * </pre>
 *
 * @param bool  the Boolean to check
 * @return <code>'true'</code>, <code>'false'</code>,
 *  or <code>null</code>
 */
public static String toStringTrueFalse(boolean bool) {
    return toString(bool, ""true"", ""false"");
}","public void test04143() throws Throwable {
    String string0 = BooleanUtils.toStringTrueFalse(true);
    assertEquals(""true"", string0);
}",""
"//    public static void main(String[] args) {
//        long start = System.currentTimeMillis();
//        boolean flag = true;
//        int count = 0;
//        for (int i = 0; i < 100000000; i++) {
//            flag = toBoolean(""YES"");
//        }
//        long end = System.currentTimeMillis();
//        System.out.println((end - start) + "" "" + flag + "" "" + count);
//    }
/**
 * <p>Converts a String to a Boolean throwing an exception if no match found.</p>
 *
 * <p>null is returned if there is no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(""true"", ""true"", ""false"")  = true
 *   BooleanUtils.toBoolean(""false"", ""true"", ""false"") = false
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @return the boolean value of the string
 * @throws IllegalArgumentException if the String doesn't match
 */
public static boolean toBoolean(String str, String trueString, String falseString) {
    if (str == null) {
        if (trueString == null) {
            return true;
        } else if (falseString == null) {
            return false;
        }
    } else if (str.equals(trueString)) {
        return true;
    } else if (str.equals(falseString)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match either specified value"");
}","public void test04244() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""%o%"", """", ""%o%"");
    assertFalse(boolean0);
}",""
"//    public static void main(String[] args) {
//        long start = System.currentTimeMillis();
//        boolean flag = true;
//        int count = 0;
//        for (int i = 0; i < 100000000; i++) {
//            flag = toBoolean(""YES"");
//        }
//        long end = System.currentTimeMillis();
//        System.out.println((end - start) + "" "" + flag + "" "" + count);
//    }
/**
 * <p>Converts a String to a Boolean throwing an exception if no match found.</p>
 *
 * <p>null is returned if there is no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(""true"", ""true"", ""false"")  = true
 *   BooleanUtils.toBoolean(""false"", ""true"", ""false"") = false
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @return the boolean value of the string
 * @throws IllegalArgumentException if the String doesn't match
 */
public static boolean toBoolean(String str, String trueString, String falseString) {
    if (str == null) {
        if (trueString == null) {
            return true;
        } else if (falseString == null) {
            return false;
        }
    } else if (str.equals(trueString)) {
        return true;
    } else if (str.equals(falseString)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match either specified value"");
}","public void test04345() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""Zbi'FMa8yGYYu3*Df"", ""Zbi'FMa8yGYYu3*Df"", ""Zbi'FMa8yGYYu3*Df"");
    assertTrue(boolean0);
}",""
"//    public static void main(String[] args) {
//        long start = System.currentTimeMillis();
//        boolean flag = true;
//        int count = 0;
//        for (int i = 0; i < 100000000; i++) {
//            flag = toBoolean(""YES"");
//        }
//        long end = System.currentTimeMillis();
//        System.out.println((end - start) + "" "" + flag + "" "" + count);
//    }
/**
 * <p>Converts a String to a Boolean throwing an exception if no match found.</p>
 *
 * <p>null is returned if there is no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(""true"", ""true"", ""false"")  = true
 *   BooleanUtils.toBoolean(""false"", ""true"", ""false"") = false
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @return the boolean value of the string
 * @throws IllegalArgumentException if the String doesn't match
 */
public static boolean toBoolean(String str, String trueString, String falseString) {
    if (str == null) {
        if (trueString == null) {
            return true;
        } else if (falseString == null) {
            return false;
        }
    } else if (str.equals(trueString)) {
        return true;
    } else if (str.equals(falseString)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match either specified value"");
}","public void test04446() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean((String) null, """", (String) null);
    assertFalse(boolean0);
}",""
"//    public static void main(String[] args) {
//        long start = System.currentTimeMillis();
//        boolean flag = true;
//        int count = 0;
//        for (int i = 0; i < 100000000; i++) {
//            flag = toBoolean(""YES"");
//        }
//        long end = System.currentTimeMillis();
//        System.out.println((end - start) + "" "" + flag + "" "" + count);
//    }
/**
 * <p>Converts a String to a Boolean throwing an exception if no match found.</p>
 *
 * <p>null is returned if there is no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(""true"", ""true"", ""false"")  = true
 *   BooleanUtils.toBoolean(""false"", ""true"", ""false"") = false
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @return the boolean value of the string
 * @throws IllegalArgumentException if the String doesn't match
 */
public static boolean toBoolean(String str, String trueString, String falseString) {
    if (str == null) {
        if (trueString == null) {
            return true;
        } else if (falseString == null) {
            return false;
        }
    } else if (str.equals(trueString)) {
        return true;
    } else if (str.equals(falseString)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match either specified value"");
}","public void test04547() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean((String) null, (String) null, (String) null);
    assertTrue(boolean0);
}",""
"//    public static void main(String[] args) {
//        long start = System.currentTimeMillis();
//        boolean flag = true;
//        int count = 0;
//        for (int i = 0; i < 100000000; i++) {
//            flag = toBoolean(""YES"");
//        }
//        long end = System.currentTimeMillis();
//        System.out.println((end - start) + "" "" + flag + "" "" + count);
//    }
/**
 * <p>Converts a String to a Boolean throwing an exception if no match found.</p>
 *
 * <p>null is returned if there is no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(""true"", ""true"", ""false"")  = true
 *   BooleanUtils.toBoolean(""false"", ""true"", ""false"") = false
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @return the boolean value of the string
 * @throws IllegalArgumentException if the String doesn't match
 */
public static boolean toBoolean(String str, String trueString, String falseString) {
    if (str == null) {
        if (trueString == null) {
            return true;
        } else if (falseString == null) {
            return false;
        }
    } else if (str.equals(trueString)) {
        return true;
    } else if (str.equals(falseString)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match either specified value"");
}","public void test04648() throws Throwable {
    // Undeclared exception!
    try {
        BooleanUtils.toBoolean((String) null, ""on"", ""true"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The String did not match either specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}",""
"//    public static void main(String[] args) {
//        long start = System.currentTimeMillis();
//        boolean flag = true;
//        int count = 0;
//        for (int i = 0; i < 100000000; i++) {
//            flag = toBoolean(""YES"");
//        }
//        long end = System.currentTimeMillis();
//        System.out.println((end - start) + "" "" + flag + "" "" + count);
//    }
/**
 * <p>Converts a String to a Boolean throwing an exception if no match found.</p>
 *
 * <p>null is returned if there is no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(""true"", ""true"", ""false"")  = true
 *   BooleanUtils.toBoolean(""false"", ""true"", ""false"") = false
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @return the boolean value of the string
 * @throws IllegalArgumentException if the String doesn't match
 */
public static boolean toBoolean(String str, String trueString, String falseString) {
    if (str == null) {
        if (trueString == null) {
            return true;
        } else if (falseString == null) {
            return false;
        }
    } else if (str.equals(trueString)) {
        return true;
    } else if (str.equals(falseString)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match either specified value"");
}","public void test04749() throws Throwable {
    // Undeclared exception!
    try {
        BooleanUtils.toBoolean(""Y]"", ""yes"", ""Index: "");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The String did not match either specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test04850() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""yes"");
    assertTrue(boolean0);
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test04951() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""y/x"");
    assertFalse(boolean0);
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test05052() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""yex"");
    assertFalse(boolean0);
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test05153() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""on"");
    assertTrue(boolean0);
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test05254() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""|lI8+Nwyp"");
    assertFalse(boolean0);
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test05355() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""d `"");
    assertFalse(boolean0);
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test05456() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean((String) null);
    assertFalse(boolean0);
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test05557() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""true"");
    assertTrue(boolean0);
}",""
"// String to boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a boolean (optimised for performance).</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>. Otherwise,
 * <code>false</code> is returned.</p>
 *
 * <p>This method performs 4 times faster (JDK1.4) than
 * <code>Boolean.valueOf(String)</code>. However, this method accepts
 * 'on' and 'yes' as true values.
 *
 * <pre>
 *   BooleanUtils.toBoolean(null)    = false
 *   BooleanUtils.toBoolean(""true"")  = true
 *   BooleanUtils.toBoolean(""TRUE"")  = true
 *   BooleanUtils.toBoolean(""tRUe"")  = true
 *   BooleanUtils.toBoolean(""on"")    = true
 *   BooleanUtils.toBoolean(""yes"")   = true
 *   BooleanUtils.toBoolean(""false"") = false
 *   BooleanUtils.toBoolean(""x gti"") = false
 * </pre>
 *
 * @param str  the String to check
 * @return the boolean value of the string, <code>false</code> if no match
 */
public static boolean toBoolean(String str) {
    // Previously used equalsIgnoreCase, which was fast for interned 'true'.
    // Non interned 'true' matched 15 times slower.
    //
    // Optimisation provides same performance as before for interned 'true'.
    // Similar performance for null, 'false', and other strings not length 2/3/4.
    // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.
    if (str == ""true"") {
        return true;
    }
    if (str == null) {
        return false;
    }
    switch(str.length()) {
        case 2:
            {
                char ch0 = str.charAt(0);
                char ch1 = str.charAt(1);
                return (ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N');
            }
        case 3:
            {
                char ch = str.charAt(0);
                if (ch == 'y') {
                    return (str.charAt(1) == 'e' || str.charAt(1) == 'E') && (str.charAt(2) == 's' || str.charAt(2) == 'S');
                }
                if (ch == 'Y') {
                    return (str.charAt(1) == 'E' || str.charAt(1) == 'e') && (str.charAt(2) == 'S' || str.charAt(2) == 's');
                }
            }
        case 4:
            {
                char ch = str.charAt(0);
                if (ch == 't') {
                    return (str.charAt(1) == 'r' || str.charAt(1) == 'R') && (str.charAt(2) == 'u' || str.charAt(2) == 'U') && (str.charAt(3) == 'e' || str.charAt(3) == 'E');
                }
                if (ch == 'T') {
                    return (str.charAt(1) == 'R' || str.charAt(1) == 'r') && (str.charAt(2) == 'U' || str.charAt(2) == 'u') && (str.charAt(3) == 'E' || str.charAt(3) == 'e');
                }
            }
    }
    return false;
}","public void test05658() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(""t;uO"");
    assertFalse(boolean0);
}",""
"public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {
    if (str == null) {
        if (trueString == null) {
            return Boolean.TRUE;
        } else if (falseString == null) {
            return Boolean.FALSE;
        } else if (nullString == null) {
            return null;
        }
    } else if (str.equals(trueString)) {
        return Boolean.TRUE;
    } else if (str.equals(falseString)) {
        return Boolean.FALSE;
    } else if (str.equals(nullString)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match any specified value"");
}","public void test05759() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(""false"", ""--"", ""--"", ""false"");
    assertNull(boolean0);
}","/**
 * <p>Converts a String to a Boolean throwing an exception if no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(""true"", ""true"", ""false"", ""null"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"", ""true"", ""false"", ""null"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""null"", ""true"", ""false"", ""null"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @param nullString  the String to match for <code>null</code>
 *  (case sensitive), may be <code>null</code>
 * @return the Boolean value of the string,
 *  <code>null</code> if either the String matches <code>nullString</code>
 *  or if <code>null</code> input and <code>nullString</code> is
 *  <code>null</code>
 * @throws IllegalArgumentException if the String doesn't match
 */"
"public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {
    if (str == null) {
        if (trueString == null) {
            return Boolean.TRUE;
        } else if (falseString == null) {
            return Boolean.FALSE;
        } else if (nullString == null) {
            return null;
        }
    } else if (str.equals(trueString)) {
        return Boolean.TRUE;
    } else if (str.equals(falseString)) {
        return Boolean.FALSE;
    } else if (str.equals(nullString)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match any specified value"");
}","public void test05860() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(""^J`9Y8g*u~FxrJK"", ""6FM;$]l&-\""U|$XA"", ""^J`9Y8g*u~FxrJK"", ""6FM;$]l&-\""U|$XA"");
    assertFalse(boolean0);
}","/**
 * <p>Converts a String to a Boolean throwing an exception if no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(""true"", ""true"", ""false"", ""null"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"", ""true"", ""false"", ""null"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""null"", ""true"", ""false"", ""null"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @param nullString  the String to match for <code>null</code>
 *  (case sensitive), may be <code>null</code>
 * @return the Boolean value of the string,
 *  <code>null</code> if either the String matches <code>nullString</code>
 *  or if <code>null</code> input and <code>nullString</code> is
 *  <code>null</code>
 * @throws IllegalArgumentException if the String doesn't match
 */"
"public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {
    if (str == null) {
        if (trueString == null) {
            return Boolean.TRUE;
        } else if (falseString == null) {
            return Boolean.FALSE;
        } else if (nullString == null) {
            return null;
        }
    } else if (str.equals(trueString)) {
        return Boolean.TRUE;
    } else if (str.equals(falseString)) {
        return Boolean.FALSE;
    } else if (str.equals(nullString)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match any specified value"");
}","public void test05961() throws Throwable {
    // Undeclared exception!
    try {
        BooleanUtils.toBooleanObject(""aO}9"", "".iMpqJ#2w)Fh.*of(h"", ""no"", ""W`\""v'Bo:1o"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The String did not match any specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Converts a String to a Boolean throwing an exception if no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(""true"", ""true"", ""false"", ""null"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"", ""true"", ""false"", ""null"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""null"", ""true"", ""false"", ""null"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @param nullString  the String to match for <code>null</code>
 *  (case sensitive), may be <code>null</code>
 * @return the Boolean value of the string,
 *  <code>null</code> if either the String matches <code>nullString</code>
 *  or if <code>null</code> input and <code>nullString</code> is
 *  <code>null</code>
 * @throws IllegalArgumentException if the String doesn't match
 */"
"public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {
    if (str == null) {
        if (trueString == null) {
            return Boolean.TRUE;
        } else if (falseString == null) {
            return Boolean.FALSE;
        } else if (nullString == null) {
            return null;
        }
    } else if (str.equals(trueString)) {
        return Boolean.TRUE;
    } else if (str.equals(falseString)) {
        return Boolean.FALSE;
    } else if (str.equals(nullString)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match any specified value"");
}","public void test06062() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, ""true"", ""@P{F%koDgqJh="", (String) null);
    assertNull(boolean0);
}","/**
 * <p>Converts a String to a Boolean throwing an exception if no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(""true"", ""true"", ""false"", ""null"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"", ""true"", ""false"", ""null"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""null"", ""true"", ""false"", ""null"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @param nullString  the String to match for <code>null</code>
 *  (case sensitive), may be <code>null</code>
 * @return the Boolean value of the string,
 *  <code>null</code> if either the String matches <code>nullString</code>
 *  or if <code>null</code> input and <code>nullString</code> is
 *  <code>null</code>
 * @throws IllegalArgumentException if the String doesn't match
 */"
"public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {
    if (str == null) {
        if (trueString == null) {
            return Boolean.TRUE;
        } else if (falseString == null) {
            return Boolean.FALSE;
        } else if (nullString == null) {
            return null;
        }
    } else if (str.equals(trueString)) {
        return Boolean.TRUE;
    } else if (str.equals(falseString)) {
        return Boolean.FALSE;
    } else if (str.equals(nullString)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match any specified value"");
}","public void test06163() throws Throwable {
    // Undeclared exception!
    try {
        BooleanUtils.toBooleanObject((String) null, ""aO}9"", "")<"", ""java.lang.Object"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The String did not match any specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Converts a String to a Boolean throwing an exception if no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(""true"", ""true"", ""false"", ""null"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"", ""true"", ""false"", ""null"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""null"", ""true"", ""false"", ""null"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @param nullString  the String to match for <code>null</code>
 *  (case sensitive), may be <code>null</code>
 * @return the Boolean value of the string,
 *  <code>null</code> if either the String matches <code>nullString</code>
 *  or if <code>null</code> input and <code>nullString</code> is
 *  <code>null</code>
 * @throws IllegalArgumentException if the String doesn't match
 */"
"public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {
    if (str == null) {
        if (trueString == null) {
            return Boolean.TRUE;
        } else if (falseString == null) {
            return Boolean.FALSE;
        } else if (nullString == null) {
            return null;
        }
    } else if (str.equals(trueString)) {
        return Boolean.TRUE;
    } else if (str.equals(falseString)) {
        return Boolean.FALSE;
    } else if (str.equals(nullString)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match any specified value"");
}","public void test06264() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, ""uSJS3rSTSZ=%sH(zxH"");
    assertTrue(boolean0);
}","/**
 * <p>Converts a String to a Boolean throwing an exception if no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(""true"", ""true"", ""false"", ""null"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"", ""true"", ""false"", ""null"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""null"", ""true"", ""false"", ""null"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @param nullString  the String to match for <code>null</code>
 *  (case sensitive), may be <code>null</code>
 * @return the Boolean value of the string,
 *  <code>null</code> if either the String matches <code>nullString</code>
 *  or if <code>null</code> input and <code>nullString</code> is
 *  <code>null</code>
 * @throws IllegalArgumentException if the String doesn't match
 */"
"public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {
    if (str == null) {
        if (trueString == null) {
            return Boolean.TRUE;
        } else if (falseString == null) {
            return Boolean.FALSE;
        } else if (nullString == null) {
            return null;
        }
    } else if (str.equals(trueString)) {
        return Boolean.TRUE;
    } else if (str.equals(falseString)) {
        return Boolean.FALSE;
    } else if (str.equals(nullString)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The String did not match any specified value"");
}","public void test06365() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, ""u'>s+;.]["", (String) null, ""false"");
    assertFalse(boolean0);
}","/**
 * <p>Converts a String to a Boolean throwing an exception if no match.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(""true"", ""true"", ""false"", ""null"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"", ""true"", ""false"", ""null"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""null"", ""true"", ""false"", ""null"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @param trueString  the String to match for <code>true</code>
 *  (case sensitive), may be <code>null</code>
 * @param falseString  the String to match for <code>false</code>
 *  (case sensitive), may be <code>null</code>
 * @param nullString  the String to match for <code>null</code>
 *  (case sensitive), may be <code>null</code>
 * @return the Boolean value of the string,
 *  <code>null</code> if either the String matches <code>nullString</code>
 *  or if <code>null</code> input and <code>nullString</code> is
 *  <code>null</code>
 * @throws IllegalArgumentException if the String doesn't match
 */"
"// Boolean to String methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a Boolean to a String returning <code>'true'</code>,
 * <code>'false'</code>, or <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toStringTrueFalse(Boolean.TRUE)  = ""true""
 *   BooleanUtils.toStringTrueFalse(Boolean.FALSE) = ""false""
 *   BooleanUtils.toStringTrueFalse(null)          = null;
 * </pre>
 *
 * @param bool  the Boolean to check
 * @return <code>'true'</code>, <code>'false'</code>,
 *  or <code>null</code>
 */
public static String toStringTrueFalse(Boolean bool) {
    return toString(bool, ""true"", ""false"", null);
}","public void test06466() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(""no"");
    String string0 = BooleanUtils.toStringTrueFalse(boolean0);
    assertEquals(""false"", string0);
}",""
"// String to Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Boolean.</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>.
 * <code>'false'</code>, <code>'off'</code> or <code>'no'</code>
 * (case insensitive) will return <code>false</code>.
 * Otherwise, <code>null</code> is returned.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(null)    = null
 *   BooleanUtils.toBooleanObject(""true"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""on"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""ON"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""off"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""oFf"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""blue"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @return the Boolean value of the string,
 *  <code>null</code> if no match or <code>null</code> input
 */
public static Boolean toBooleanObject(String str) {
    if (""true"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""false"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""on"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""off"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""yes"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""no"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    }
    // no match
    return null;
}","public void test06568() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(""yes"");
    assertNotNull(boolean0);
}",""
"// String to Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Boolean.</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>.
 * <code>'false'</code>, <code>'off'</code> or <code>'no'</code>
 * (case insensitive) will return <code>false</code>.
 * Otherwise, <code>null</code> is returned.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(null)    = null
 *   BooleanUtils.toBooleanObject(""true"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""on"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""ON"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""off"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""oFf"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""blue"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @return the Boolean value of the string,
 *  <code>null</code> if no match or <code>null</code> input
 */
public static Boolean toBooleanObject(String str) {
    if (""true"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""false"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""on"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""off"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""yes"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""no"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    }
    // no match
    return null;
}","public void test06670() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(""off"");
    assertFalse(boolean0);
}",""
"// String to Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Boolean.</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>.
 * <code>'false'</code>, <code>'off'</code> or <code>'no'</code>
 * (case insensitive) will return <code>false</code>.
 * Otherwise, <code>null</code> is returned.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(null)    = null
 *   BooleanUtils.toBooleanObject(""true"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""on"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""ON"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""off"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""oFf"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""blue"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @return the Boolean value of the string,
 *  <code>null</code> if no match or <code>null</code> input
 */
public static Boolean toBooleanObject(String str) {
    if (""true"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""false"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""on"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""off"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""yes"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""no"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    }
    // no match
    return null;
}","public void test06772() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(""on"");
    assertNotNull(boolean0);
}",""
"// String to Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Boolean.</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>.
 * <code>'false'</code>, <code>'off'</code> or <code>'no'</code>
 * (case insensitive) will return <code>false</code>.
 * Otherwise, <code>null</code> is returned.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(null)    = null
 *   BooleanUtils.toBooleanObject(""true"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""on"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""ON"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""off"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""oFf"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""blue"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @return the Boolean value of the string,
 *  <code>null</code> if no match or <code>null</code> input
 */
public static Boolean toBooleanObject(String str) {
    if (""true"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""false"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""on"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""off"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""yes"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""no"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    }
    // no match
    return null;
}","public void test06874() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(""false"");
    assertNotNull(boolean0);
}",""
"// String to Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Boolean.</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>.
 * <code>'false'</code>, <code>'off'</code> or <code>'no'</code>
 * (case insensitive) will return <code>false</code>.
 * Otherwise, <code>null</code> is returned.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(null)    = null
 *   BooleanUtils.toBooleanObject(""true"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""on"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""ON"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""off"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""oFf"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""blue"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @return the Boolean value of the string,
 *  <code>null</code> if no match or <code>null</code> input
 */
public static Boolean toBooleanObject(String str) {
    if (""true"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""false"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""on"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""off"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""yes"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""no"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    }
    // no match
    return null;
}","public void test06976() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(""true"");
    assertTrue(boolean0);
}",""
"public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (bool == null) {
        return nullValue;
    }
    return bool.booleanValue() ? trueValue : falseValue;
}","public void test07077() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject("""", """", (String) null, """");
    Integer integer0 = new Integer((-3683));
    Integer integer1 = BooleanUtils.toIntegerObject(boolean0, integer0, (Integer) null, integer0);
    assertEquals((-3683), (int) integer1);
}","/**
 * <p>Converts a Boolean to an Integer specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2))  = new Integer(1)
 *   BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new Integer(0)
 *   BooleanUtils.toIntegerObject(null, new Integer(1), new Integer(0), new Integer(2))          = new Integer(2)
 * </pre>
 *
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to return if <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to return if <code>null</code>,
 *  may be <code>null</code>
 * @return the appropriate value
 */"
"public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (bool == null) {
        return nullValue;
    }
    return bool.booleanValue() ? trueValue : falseValue;
}","public void test07178() throws Throwable {
    Integer integer0 = new Integer((-287));
    Integer integer1 = BooleanUtils.toIntegerObject((Boolean) null, integer0, integer0, (Integer) null);
    assertNull(integer1);
}","/**
 * <p>Converts a Boolean to an Integer specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2))  = new Integer(1)
 *   BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new Integer(0)
 *   BooleanUtils.toIntegerObject(null, new Integer(1), new Integer(0), new Integer(2))          = new Integer(2)
 * </pre>
 *
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to return if <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to return if <code>null</code>,
 *  may be <code>null</code>
 * @return the appropriate value
 */"
"public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (bool == null) {
        return nullValue;
    }
    return bool.booleanValue() ? trueValue : falseValue;
}","public void test07279() throws Throwable {
    boolean[] booleanArray0 = new boolean[9];
    Integer integer0 = new Integer((-3683));
    Integer integer1 = BooleanUtils.toIntegerObject((Boolean) booleanArray0[2], integer0, (Integer) null, integer0);
    assertNull(integer1);
}","/**
 * <p>Converts a Boolean to an Integer specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2))  = new Integer(1)
 *   BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new Integer(0)
 *   BooleanUtils.toIntegerObject(null, new Integer(1), new Integer(0), new Integer(2))          = new Integer(2)
 * </pre>
 *
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to return if <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to return if <code>null</code>,
 *  may be <code>null</code>
 * @return the appropriate value
 */"
"public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {
    return bool ? trueValue : falseValue;
}","public void test07380() throws Throwable {
    Integer integer0 = BooleanUtils.toIntegerObject(true, (Integer) null, (Integer) null);
    assertNull(integer0);
}","/**
 * <p>Converts a boolean to an Integer specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(true, new Integer(1), new Integer(0))  = new Integer(1)
 *   BooleanUtils.toIntegerObject(false, new Integer(1), new Integer(0)) = new Integer(0)
 * </pre>
 *
 * @param bool  the to convert
 * @param trueValue  the value to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to return if <code>false</code>,
 *  may be <code>null</code>
 * @return the appropriate value
 */"
"public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {
    return bool ? trueValue : falseValue;
}","public void test07481() throws Throwable {
    Integer integer0 = new Integer(0);
    Integer integer1 = BooleanUtils.toIntegerObject(false, integer0, integer0);
    assertEquals(0, (int) integer1);
}","/**
 * <p>Converts a boolean to an Integer specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(true, new Integer(1), new Integer(0))  = new Integer(1)
 *   BooleanUtils.toIntegerObject(false, new Integer(1), new Integer(0)) = new Integer(0)
 * </pre>
 *
 * @param bool  the to convert
 * @param trueValue  the value to return if <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to return if <code>false</code>,
 *  may be <code>null</code>
 * @return the appropriate value
 */"
"public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue) {
    if (bool == null) {
        return nullValue;
    }
    return bool.booleanValue() ? trueValue : falseValue;
}","public void test07582() throws Throwable {
    int int0 = BooleanUtils.toInteger((Boolean) false, 81, 81, 360);
    assertEquals(81, int0);
}","/**
 * <p>Converts a Boolean to an int specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1
 *   BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0
 *   BooleanUtils.toInteger(null, 1, 0, 2)          = 2
 * </pre>
 *
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if <code>true</code>
 * @param falseValue  the value to return if <code>false</code>
 * @param nullValue  the value to return if <code>null</code>
 * @return the appropriate value
 */"
"public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue) {
    if (bool == null) {
        return nullValue;
    }
    return bool.booleanValue() ? trueValue : falseValue;
}","public void test07683() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject((-1668), (-1668), (-1668), 0);
    int int0 = BooleanUtils.toInteger(boolean0, 0, 1236, (-53));
    assertEquals(0, int0);
}","/**
 * <p>Converts a Boolean to an int specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1
 *   BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0
 *   BooleanUtils.toInteger(null, 1, 0, 2)          = 2
 * </pre>
 *
 * @param bool  the Boolean to convert
 * @param trueValue  the value to return if <code>true</code>
 * @param falseValue  the value to return if <code>false</code>
 * @param nullValue  the value to return if <code>null</code>
 * @return the appropriate value
 */"
"public static int toInteger(boolean bool, int trueValue, int falseValue) {
    return bool ? trueValue : falseValue;
}","public void test07784() throws Throwable {
    int int0 = BooleanUtils.toInteger(false, (-2417), (-2417));
    assertEquals((-2417), int0);
}","/**
 * <p>Converts a boolean to an int specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toInteger(true, 1, 0)  = 1
 *   BooleanUtils.toInteger(false, 1, 0) = 0
 * </pre>
 *
 * @param bool  the to convert
 * @param trueValue  the value to return if <code>true</code>
 * @param falseValue  the value to return if <code>false</code>
 * @return the appropriate value
 */"
"public static Integer toIntegerObject(Boolean bool) {
    if (bool == null) {
        return null;
    }
    return bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;
}","public void test07885() throws Throwable {
    Boolean boolean0 = new Boolean(""-0x"");
    Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
    assertEquals(0, (int) integer0);
}","/**
 * <p>Converts a Boolean to a Integer using the convention that
 * <code>zero</code> is <code>false</code>.</p>
 *
 * <p><code>null</code> will be converted to <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(Boolean.TRUE)  = new Integer(1)
 *   BooleanUtils.toIntegerObject(Boolean.FALSE) = new Integer(0)
 * </pre>
 *
 * @param bool  the Boolean to convert
 * @return one if Boolean.TRUE, zero if Boolean.FALSE, <code>null</code> if <code>null</code>
 */"
"public static Integer toIntegerObject(Boolean bool) {
    if (bool == null) {
        return null;
    }
    return bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;
}","public void test07986() throws Throwable {
    Integer integer0 = BooleanUtils.toIntegerObject((Boolean) null);
    assertNull(integer0);
}","/**
 * <p>Converts a Boolean to a Integer using the convention that
 * <code>zero</code> is <code>false</code>.</p>
 *
 * <p><code>null</code> will be converted to <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(Boolean.TRUE)  = new Integer(1)
 *   BooleanUtils.toIntegerObject(Boolean.FALSE) = new Integer(0)
 * </pre>
 *
 * @param bool  the Boolean to convert
 * @return one if Boolean.TRUE, zero if Boolean.FALSE, <code>null</code> if <code>null</code>
 */"
"public static Integer toIntegerObject(boolean bool) {
    return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;
}","public void test08087() throws Throwable {
    Integer integer0 = BooleanUtils.toIntegerObject(true);
    assertEquals(1, (int) integer0);
}","/**
 * <p>Converts a boolean to an Integer using the convention that
 * <code>zero</code> is <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(true)  = new Integer(1)
 *   BooleanUtils.toIntegerObject(false) = new Integer(0)
 * </pre>
 *
 * @param bool  the boolean to convert
 * @return one if <code>true</code>, zero if <code>false</code>
 */"
"public static Integer toIntegerObject(boolean bool) {
    return bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO;
}","public void test08188() throws Throwable {
    Integer integer0 = BooleanUtils.toIntegerObject(false);
    assertEquals(0, (int) integer0);
}","/**
 * <p>Converts a boolean to an Integer using the convention that
 * <code>zero</code> is <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toIntegerObject(true)  = new Integer(1)
 *   BooleanUtils.toIntegerObject(false) = new Integer(0)
 * </pre>
 *
 * @param bool  the boolean to convert
 * @return one if <code>true</code>, zero if <code>false</code>
 */"
"// Boolean to Integer methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a boolean to an int using the convention that
 * <code>zero</code> is <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toInteger(true)  = 1
 *   BooleanUtils.toInteger(false) = 0
 * </pre>
 *
 * @param bool  the boolean to convert
 * @return one if <code>true</code>, zero if <code>false</code>
 */
public static int toInteger(boolean bool) {
    return bool ? 1 : 0;
}","public void test08289() throws Throwable {
    int int0 = BooleanUtils.toInteger(true);
    assertEquals(1, int0);
}",""
"// Boolean to Integer methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a boolean to an int using the convention that
 * <code>zero</code> is <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toInteger(true)  = 1
 *   BooleanUtils.toInteger(false) = 0
 * </pre>
 *
 * @param bool  the boolean to convert
 * @return one if <code>true</code>, zero if <code>false</code>
 */
public static int toInteger(boolean bool) {
    return bool ? 1 : 0;
}","public void test08390() throws Throwable {
    int int0 = BooleanUtils.toInteger(false);
    assertEquals(0, int0);
}",""
"public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (value == null) {
        if (trueValue == null) {
            return Boolean.TRUE;
        } else if (falseValue == null) {
            return Boolean.FALSE;
        } else if (nullValue == null) {
            return null;
        }
    } else if (value.equals(trueValue)) {
        return Boolean.TRUE;
    } else if (value.equals(falseValue)) {
        return Boolean.FALSE;
    } else if (value.equals(nullValue)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test08491() throws Throwable {
    Integer integer0 = new Integer(1373);
    Integer integer1 = new Integer(3436);
    // Undeclared exception!
    try {
        BooleanUtils.toBooleanObject(integer0, integer1, integer1, integer1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Integer did not match any specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Converts an Integer to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to to match for <code>null</code>,
 *  may be <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (value == null) {
        if (trueValue == null) {
            return Boolean.TRUE;
        } else if (falseValue == null) {
            return Boolean.FALSE;
        } else if (nullValue == null) {
            return null;
        }
    } else if (value.equals(trueValue)) {
        return Boolean.TRUE;
    } else if (value.equals(falseValue)) {
        return Boolean.FALSE;
    } else if (value.equals(nullValue)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test08592() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject((-1668), (-1668), (-1668), 0);
    Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
    Integer integer1 = new Integer((-28));
    Boolean boolean1 = BooleanUtils.toBooleanObject(integer1, integer0, integer0, integer1);
    assertNull(boolean1);
}","/**
 * <p>Converts an Integer to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to to match for <code>null</code>,
 *  may be <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (value == null) {
        if (trueValue == null) {
            return Boolean.TRUE;
        } else if (falseValue == null) {
            return Boolean.FALSE;
        } else if (nullValue == null) {
            return null;
        }
    } else if (value.equals(trueValue)) {
        return Boolean.TRUE;
    } else if (value.equals(falseValue)) {
        return Boolean.FALSE;
    } else if (value.equals(nullValue)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test08693() throws Throwable {
    Integer integer0 = new Integer(0);
    Integer integer1 = new Integer(1829);
    Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, integer1, integer0, integer1);
    assertFalse(boolean0);
}","/**
 * <p>Converts an Integer to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to to match for <code>null</code>,
 *  may be <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (value == null) {
        if (trueValue == null) {
            return Boolean.TRUE;
        } else if (falseValue == null) {
            return Boolean.FALSE;
        } else if (nullValue == null) {
            return null;
        }
    } else if (value.equals(trueValue)) {
        return Boolean.TRUE;
    } else if (value.equals(falseValue)) {
        return Boolean.FALSE;
    } else if (value.equals(nullValue)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test08794() throws Throwable {
    Integer integer0 = new Integer(0);
    // Undeclared exception!
    try {
        BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Integer did not match any specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Converts an Integer to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to to match for <code>null</code>,
 *  may be <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (value == null) {
        if (trueValue == null) {
            return Boolean.TRUE;
        } else if (falseValue == null) {
            return Boolean.FALSE;
        } else if (nullValue == null) {
            return null;
        }
    } else if (value.equals(trueValue)) {
        return Boolean.TRUE;
    } else if (value.equals(falseValue)) {
        return Boolean.FALSE;
    } else if (value.equals(nullValue)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test08895() throws Throwable {
    Integer integer0 = new Integer((-908));
    Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) null, integer0, (Integer) null, (Integer) null);
    assertFalse(boolean0);
}","/**
 * <p>Converts an Integer to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to to match for <code>null</code>,
 *  may be <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (value == null) {
        if (trueValue == null) {
            return Boolean.TRUE;
        } else if (falseValue == null) {
            return Boolean.FALSE;
        } else if (nullValue == null) {
            return null;
        }
    } else if (value.equals(trueValue)) {
        return Boolean.TRUE;
    } else if (value.equals(falseValue)) {
        return Boolean.FALSE;
    } else if (value.equals(nullValue)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test08997() throws Throwable {
    Integer integer0 = new Integer(0);
    Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) null, integer0, integer0, (Integer) null);
    assertNull(boolean0);
}","/**
 * <p>Converts an Integer to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to to match for <code>null</code>,
 *  may be <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (value == null) {
        if (trueValue == null) {
            return Boolean.TRUE;
        } else if (falseValue == null) {
            return Boolean.FALSE;
        } else if (nullValue == null) {
            return null;
        }
    } else if (value.equals(trueValue)) {
        return Boolean.TRUE;
    } else if (value.equals(falseValue)) {
        return Boolean.FALSE;
    } else if (value.equals(nullValue)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test09098() throws Throwable {
    Integer integer0 = new Integer(0);
    Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) null, (Integer) null, integer0, (Integer) null);
    assertTrue(boolean0);
}","/**
 * <p>Converts an Integer to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to to match for <code>null</code>,
 *  may be <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {
    if (value == null) {
        if (trueValue == null) {
            return Boolean.TRUE;
        } else if (falseValue == null) {
            return Boolean.FALSE;
        } else if (nullValue == null) {
            return null;
        }
    } else if (value.equals(trueValue)) {
        return Boolean.TRUE;
    } else if (value.equals(falseValue)) {
        return Boolean.FALSE;
    } else if (value.equals(nullValue)) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test09199() throws Throwable {
    Integer integer0 = new Integer(0);
    Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, integer0, integer0, integer0);
    assertTrue(boolean0);
}","/**
 * <p>Converts an Integer to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @param nullValue  the value to to match for <code>null</code>,
 *  may be <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue) {
    if (value == trueValue) {
        return Boolean.TRUE;
    } else if (value == falseValue) {
        return Boolean.FALSE;
    } else if (value == nullValue) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test092100() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(0, 2244, 76, 0);
    assertNull(boolean0);
}","/**
 * <p>Converts an int to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(3, 1, 2, 3) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>
 * @param falseValue  the value to match for <code>false</code>
 * @param nullValue  the value to to match for <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue) {
    if (value == trueValue) {
        return Boolean.TRUE;
    } else if (value == falseValue) {
        return Boolean.FALSE;
    } else if (value == nullValue) {
        return null;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match any specified value"");
}","public void test093101() throws Throwable {
    // Undeclared exception!
    try {
        BooleanUtils.toBooleanObject((-1577), 121, 256, 46);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Integer did not match any specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Converts an int to a Boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(3, 1, 2, 3) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>
 * @param falseValue  the value to match for <code>false</code>
 * @param nullValue  the value to to match for <code>null</code>
 * @return Boolean.TRUE, Boolean.FALSE, or <code>null</code>
 * @throws IllegalArgumentException if no match
 */"
"public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {
    if (value == null) {
        if (trueValue == null) {
            return true;
        } else if (falseValue == null) {
            return false;
        }
    } else if (value.equals(trueValue)) {
        return true;
    } else if (value.equals(falseValue)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match either specified value"");
}","public void test094102() throws Throwable {
    Integer integer0 = new Integer(79);
    Integer integer1 = new Integer((-1728497741));
    boolean boolean0 = BooleanUtils.toBoolean(integer0, integer1, integer0);
    assertFalse(boolean0);
}","/**
 * <p>Converts an Integer to a boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false
 *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true
 *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */"
"public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {
    if (value == null) {
        if (trueValue == null) {
            return true;
        } else if (falseValue == null) {
            return false;
        }
    } else if (value.equals(trueValue)) {
        return true;
    } else if (value.equals(falseValue)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match either specified value"");
}","public void test095103() throws Throwable {
    Integer integer0 = new Integer(1248);
    Integer integer1 = new Integer(78);
    // Undeclared exception!
    try {
        BooleanUtils.toBoolean(integer1, integer0, integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Integer did not match either specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Converts an Integer to a boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false
 *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true
 *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */"
"public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {
    if (value == null) {
        if (trueValue == null) {
            return true;
        } else if (falseValue == null) {
            return false;
        }
    } else if (value.equals(trueValue)) {
        return true;
    } else if (value.equals(falseValue)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match either specified value"");
}","public void test096104() throws Throwable {
    Integer integer0 = new Integer((-3683));
    // Undeclared exception!
    try {
        BooleanUtils.toBoolean((Integer) null, integer0, integer0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Integer did not match either specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Converts an Integer to a boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false
 *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true
 *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */"
"public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {
    if (value == null) {
        if (trueValue == null) {
            return true;
        } else if (falseValue == null) {
            return false;
        }
    } else if (value.equals(trueValue)) {
        return true;
    } else if (value.equals(falseValue)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match either specified value"");
}","public void test097105() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean((Integer) null, (Integer) null, (Integer) null);
    assertTrue(boolean0);
}","/**
 * <p>Converts an Integer to a boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false
 *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true
 *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */"
"public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {
    if (value == null) {
        if (trueValue == null) {
            return true;
        } else if (falseValue == null) {
            return false;
        }
    } else if (value.equals(trueValue)) {
        return true;
    } else if (value.equals(falseValue)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match either specified value"");
}","public void test098106() throws Throwable {
    Integer integer0 = new Integer((-3683));
    boolean boolean0 = BooleanUtils.toBoolean((Integer) null, integer0, (Integer) null);
    assertFalse(boolean0);
}","/**
 * <p>Converts an Integer to a boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false
 *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true
 *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */"
"public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {
    if (value == null) {
        if (trueValue == null) {
            return true;
        } else if (falseValue == null) {
            return false;
        }
    } else if (value.equals(trueValue)) {
        return true;
    } else if (value.equals(falseValue)) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match either specified value"");
}","public void test099107() throws Throwable {
    Integer integer0 = new Integer(1248);
    boolean boolean0 = BooleanUtils.toBoolean(integer0, integer0, integer0);
    assertTrue(boolean0);
}","/**
 * <p>Converts an Integer to a boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false
 *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false
 *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true
 *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>,
 *  may be <code>null</code>
 * @param falseValue  the value to match for <code>false</code>,
 *  may be <code>null</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */"
"public static boolean toBoolean(int value, int trueValue, int falseValue) {
    if (value == trueValue) {
        return true;
    } else if (value == falseValue) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match either specified value"");
}","public void test100108() throws Throwable {
    // Undeclared exception!
    try {
        BooleanUtils.toBoolean((-482), 0, 3958);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Integer did not match either specified value
        //
        verifyException(""org.apache.commons.lang.BooleanUtils"", e);
    }
}","/**
 * <p>Converts an int to a boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(0, 1, 0) = false
 *   BooleanUtils.toBoolean(1, 1, 0) = true
 *   BooleanUtils.toBoolean(2, 1, 2) = false
 *   BooleanUtils.toBoolean(2, 2, 0) = true
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>
 * @param falseValue  the value to match for <code>false</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */"
"public static boolean toBoolean(int value, int trueValue, int falseValue) {
    if (value == trueValue) {
        return true;
    } else if (value == falseValue) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match either specified value"");
}","public void test101109() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean((-537), (-537), (-537));
    assertTrue(boolean0);
}","/**
 * <p>Converts an int to a boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(0, 1, 0) = false
 *   BooleanUtils.toBoolean(1, 1, 0) = true
 *   BooleanUtils.toBoolean(2, 1, 2) = false
 *   BooleanUtils.toBoolean(2, 2, 0) = true
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>
 * @param falseValue  the value to match for <code>false</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */"
"public static boolean toBoolean(int value, int trueValue, int falseValue) {
    if (value == trueValue) {
        return true;
    } else if (value == falseValue) {
        return false;
    }
    // no match
    throw new IllegalArgumentException(""The Integer did not match either specified value"");
}","public void test102110() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(400, (-537), 400);
    assertFalse(boolean0);
}","/**
 * <p>Converts an int to a boolean specifying the conversion values.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(0, 1, 0) = false
 *   BooleanUtils.toBoolean(1, 1, 0) = true
 *   BooleanUtils.toBoolean(2, 1, 2) = false
 *   BooleanUtils.toBoolean(2, 2, 0) = true
 * </pre>
 *
 * @param value  the Integer to convert
 * @param trueValue  the value to match for <code>true</code>
 * @param falseValue  the value to match for <code>false</code>
 * @return <code>true</code> or <code>false</code>
 * @throws IllegalArgumentException if no match
 */"
"public static Boolean toBooleanObject(Integer value) {
    if (value == null) {
        return null;
    }
    return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;
}","public void test103111() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) null);
    assertNull(boolean0);
}","/**
 * <p>Converts an Integer to a Boolean using the convention that <code>zero</code>
 * is <code>false</code>.</p>
 *
 * <p><code>null</code> will be converted to <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(new Integer(0))    = Boolean.FALSE
 *   BooleanUtils.toBoolean(new Integer(1))    = Boolean.TRUE
 *   BooleanUtils.toBoolean(new Integer(null)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,
 *  <code>null</code> if <code>null</code> input
 */"
"public static Boolean toBooleanObject(Integer value) {
    if (value == null) {
        return null;
    }
    return value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE;
}","public void test104112() throws Throwable {
    Integer integer0 = new Integer(0);
    Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
    assertFalse(boolean0);
}","/**
 * <p>Converts an Integer to a Boolean using the convention that <code>zero</code>
 * is <code>false</code>.</p>
 *
 * <p><code>null</code> will be converted to <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(new Integer(0))    = Boolean.FALSE
 *   BooleanUtils.toBoolean(new Integer(1))    = Boolean.TRUE
 *   BooleanUtils.toBoolean(new Integer(null)) = null
 * </pre>
 *
 * @param value  the Integer to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,
 *  <code>null</code> if <code>null</code> input
 */"
"public static Boolean toBooleanObject(int value) {
    return value == 0 ? Boolean.FALSE : Boolean.TRUE;
}","public void test105114() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(0);
    assertFalse(boolean0);
}","/**
 * <p>Converts an int to a Boolean using the convention that <code>zero</code>
 * is <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(0) = Boolean.FALSE
 *   BooleanUtils.toBoolean(1) = Boolean.TRUE
 *   BooleanUtils.toBoolean(2) = Boolean.TRUE
 * </pre>
 *
 * @param value  the int to convert
 * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,
 *  <code>null</code> if <code>null</code>
 */"
"// Integer to Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts an int to a boolean using the convention that <code>zero</code>
 * is <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(0) = false
 *   BooleanUtils.toBoolean(1) = true
 *   BooleanUtils.toBoolean(2) = true
 * </pre>
 *
 * @param value  the int to convert
 * @return <code>true</code> if non-zero, <code>false</code>
 *  if zero
 */
public static boolean toBoolean(int value) {
    return value == 0 ? false : true;
}","public void test106115() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean(0);
    assertFalse(boolean0);
}",""
"// Integer to Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts an int to a boolean using the convention that <code>zero</code>
 * is <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(0) = false
 *   BooleanUtils.toBoolean(1) = true
 *   BooleanUtils.toBoolean(2) = true
 * </pre>
 *
 * @param value  the int to convert
 * @return <code>true</code> if non-zero, <code>false</code>
 *  if zero
 */
public static boolean toBoolean(int value) {
    return value == 0 ? false : true;
}","public void test107116() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean((-1244));
    assertTrue(boolean0);
}",""
"public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull) {
    if (bool == null) {
        return valueIfNull;
    }
    return bool.booleanValue() ? true : false;
}","public void test108117() throws Throwable {
    Boolean boolean0 = Boolean.FALSE;
    Boolean boolean1 = BooleanUtils.negate(boolean0);
    boolean boolean2 = BooleanUtils.toBooleanDefaultIfNull(boolean1, false);
    assertTrue(boolean2);
}","/**
 * <p>Converts a Boolean to a boolean handling <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true
 *   BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true) = false
 *   BooleanUtils.toBooleanDefaultIfNull(null, true)          = true
 * </pre>
 *
 * @param bool  the boolean to convert
 * @param valueIfNull  the boolean value to return if <code>null</code>
 * @return <code>true</code> or <code>false</code>
 */"
"public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull) {
    if (bool == null) {
        return valueIfNull;
    }
    return bool.booleanValue() ? true : false;
}","public void test109118() throws Throwable {
    boolean boolean0 = BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false);
    assertFalse(boolean0);
}","/**
 * <p>Converts a Boolean to a boolean handling <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true
 *   BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true) = false
 *   BooleanUtils.toBooleanDefaultIfNull(null, true)          = true
 * </pre>
 *
 * @param bool  the boolean to convert
 * @param valueIfNull  the boolean value to return if <code>null</code>
 * @return <code>true</code> or <code>false</code>
 */"
"public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull) {
    if (bool == null) {
        return valueIfNull;
    }
    return bool.booleanValue() ? true : false;
}","public void test110119() throws Throwable {
    Boolean boolean0 = Boolean.FALSE;
    boolean boolean1 = BooleanUtils.toBooleanDefaultIfNull(boolean0, false);
    assertFalse(boolean1);
}","/**
 * <p>Converts a Boolean to a boolean handling <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true
 *   BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true) = false
 *   BooleanUtils.toBooleanDefaultIfNull(null, true)          = true
 * </pre>
 *
 * @param bool  the boolean to convert
 * @param valueIfNull  the boolean value to return if <code>null</code>
 * @return <code>true</code> or <code>false</code>
 */"
"public static boolean toBoolean(Boolean bool) {
    if (bool == null) {
        return false;
    }
    return bool.booleanValue() ? true : false;
}","public void test111120() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(true);
    Boolean boolean1 = BooleanUtils.negate(boolean0);
    boolean boolean2 = BooleanUtils.toBoolean(boolean1);
    assertFalse(boolean2);
}","/**
 * <p>Converts a Boolean to a boolean handling <code>null</code>
 * by returning <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(Boolean.TRUE)  = true
 *   BooleanUtils.toBoolean(Boolean.FALSE) = false
 *   BooleanUtils.toBoolean(null)          = false
 * </pre>
 *
 * @param bool  the boolean to convert
 * @return <code>true</code> or <code>false</code>,
 *  <code>null</code> returns <code>false</code>
 */"
"public static boolean toBoolean(Boolean bool) {
    if (bool == null) {
        return false;
    }
    return bool.booleanValue() ? true : false;
}","public void test112121() throws Throwable {
    boolean boolean0 = BooleanUtils.toBoolean((Boolean) null);
    assertFalse(boolean0);
}","/**
 * <p>Converts a Boolean to a boolean handling <code>null</code>
 * by returning <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(Boolean.TRUE)  = true
 *   BooleanUtils.toBoolean(Boolean.FALSE) = false
 *   BooleanUtils.toBoolean(null)          = false
 * </pre>
 *
 * @param bool  the boolean to convert
 * @return <code>true</code> or <code>false</code>,
 *  <code>null</code> returns <code>false</code>
 */"
"public static boolean toBoolean(Boolean bool) {
    if (bool == null) {
        return false;
    }
    return bool.booleanValue() ? true : false;
}","public void test113122() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(true);
    boolean boolean1 = BooleanUtils.toBoolean(boolean0);
    assertTrue(boolean1);
}","/**
 * <p>Converts a Boolean to a boolean handling <code>null</code>
 * by returning <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toBoolean(Boolean.TRUE)  = true
 *   BooleanUtils.toBoolean(Boolean.FALSE) = false
 *   BooleanUtils.toBoolean(null)          = false
 * </pre>
 *
 * @param bool  the boolean to convert
 * @return <code>true</code> or <code>false</code>,
 *  <code>null</code> returns <code>false</code>
 */"
"//-----------------------------------------------------------------------
/**
 * <p>Boolean factory that avoids creating new Boolean objecs all the time.</p>
 *
 * <p>This method was added to JDK1.4 but is available here for earlier JDKs.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(false) = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(true)  = Boolean.TRUE
 * </pre>
 *
 * @param bool  the boolean to convert
 * @return Boolean.TRUE or Boolean.FALSE as appropriate
 */
public static Boolean toBooleanObject(boolean bool) {
    return bool ? Boolean.TRUE : Boolean.FALSE;
}","public void test114123() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(false);
    assertFalse(boolean0);
}",""
"// String to Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Converts a String to a Boolean.</p>
 *
 * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>
 * (case insensitive) will return <code>true</code>.
 * <code>'false'</code>, <code>'off'</code> or <code>'no'</code>
 * (case insensitive) will return <code>false</code>.
 * Otherwise, <code>null</code> is returned.</p>
 *
 * <pre>
 *   BooleanUtils.toBooleanObject(null)    = null
 *   BooleanUtils.toBooleanObject(""true"")  = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""false"") = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""on"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""ON"")    = Boolean.TRUE
 *   BooleanUtils.toBooleanObject(""off"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""oFf"")   = Boolean.FALSE
 *   BooleanUtils.toBooleanObject(""blue"")  = null
 * </pre>
 *
 * @param str  the String to check
 * @return the Boolean value of the string,
 *  <code>null</code> if no match or <code>null</code> input
 */
public static Boolean toBooleanObject(String str) {
    if (""true"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""false"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""on"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""off"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    } else if (""yes"".equalsIgnoreCase(str)) {
        return Boolean.TRUE;
    } else if (""no"".equalsIgnoreCase(str)) {
        return Boolean.FALSE;
    }
    // no match
    return null;
}","public void test115124() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject((String) null);
    assertNull(boolean0);
}",""
"public static boolean isNotFalse(Boolean bool) {
    return !isFalse(bool);
}","public void test115125() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject((String) null);
    boolean boolean1 = BooleanUtils.isNotFalse(boolean0);
    assertTrue(boolean1);
}","/**
 * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>false</code>,
 * handling <code>null</code> by returning <code>true</code>.</p>
 *
 * <pre>
 *   BooleanUtils.isNotFalse(Boolean.TRUE)  = true
 *   BooleanUtils.isNotFalse(Boolean.FALSE) = false
 *   BooleanUtils.isNotFalse(null)          = true
 * </pre>
 *
 * @param bool  the boolean to check, null returns <code>true</code>
 * @return <code>true</code> if the input is null or true
 * @since 2.3
 */"
"public static boolean isNotFalse(Boolean bool) {
    return !isFalse(bool);
}","public void test116126() throws Throwable {
    Boolean boolean0 = Boolean.FALSE;
    boolean boolean1 = BooleanUtils.isNotFalse(boolean0);
    assertFalse(boolean1);
}","/**
 * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>false</code>,
 * handling <code>null</code> by returning <code>true</code>.</p>
 *
 * <pre>
 *   BooleanUtils.isNotFalse(Boolean.TRUE)  = true
 *   BooleanUtils.isNotFalse(Boolean.FALSE) = false
 *   BooleanUtils.isNotFalse(null)          = true
 * </pre>
 *
 * @param bool  the boolean to check, null returns <code>true</code>
 * @return <code>true</code> if the input is null or true
 * @since 2.3
 */"
"public static boolean isFalse(Boolean bool) {
    if (bool == null) {
        return false;
    }
    return bool.booleanValue() ? false : true;
}","public void test117127() throws Throwable {
    boolean boolean0 = BooleanUtils.isFalse((Boolean) null);
    assertFalse(boolean0);
}","/**
 * <p>Checks if a <code>Boolean</code> value is <code>false</code>,
 * handling <code>null</code> by returning <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.isFalse(Boolean.TRUE)  = false
 *   BooleanUtils.isFalse(Boolean.FALSE) = true
 *   BooleanUtils.isFalse(null)          = false
 * </pre>
 *
 * @param bool  the boolean to check, null returns <code>false</code>
 * @return <code>true</code> only if the input is non-null and false
 * @since 2.1
 */"
"public static boolean isFalse(Boolean bool) {
    if (bool == null) {
        return false;
    }
    return bool.booleanValue() ? false : true;
}","public void test118128() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject(true);
    boolean boolean1 = BooleanUtils.isFalse(boolean0);
    assertFalse(boolean1);
}","/**
 * <p>Checks if a <code>Boolean</code> value is <code>false</code>,
 * handling <code>null</code> by returning <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.isFalse(Boolean.TRUE)  = false
 *   BooleanUtils.isFalse(Boolean.FALSE) = true
 *   BooleanUtils.isFalse(null)          = false
 * </pre>
 *
 * @param bool  the boolean to check, null returns <code>false</code>
 * @return <code>true</code> only if the input is non-null and false
 * @since 2.1
 */"
"public static boolean isNotTrue(Boolean bool) {
    return !isTrue(bool);
}","public void test119129() throws Throwable {
    Boolean boolean0 = Boolean.FALSE;
    boolean boolean1 = BooleanUtils.isNotTrue(boolean0);
    assertTrue(boolean1);
}","/**
 * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>,
 * handling <code>null</code> by returning <code>true</code>.</p>
 *
 * <pre>
 *   BooleanUtils.isNotTrue(Boolean.TRUE)  = false
 *   BooleanUtils.isNotTrue(Boolean.FALSE) = true
 *   BooleanUtils.isNotTrue(null)          = true
 * </pre>
 *
 * @param bool  the boolean to check, null returns <code>true</code>
 * @return <code>true</code> if the input is null or false
 * @since 2.3
 */"
"public static boolean isNotTrue(Boolean bool) {
    return !isTrue(bool);
}","public void test120130() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject((-5960));
    boolean boolean1 = BooleanUtils.isNotTrue(boolean0);
    assertFalse(boolean1);
}","/**
 * <p>Checks if a <code>Boolean</code> value is <i>not</i> <code>true</code>,
 * handling <code>null</code> by returning <code>true</code>.</p>
 *
 * <pre>
 *   BooleanUtils.isNotTrue(Boolean.TRUE)  = false
 *   BooleanUtils.isNotTrue(Boolean.FALSE) = true
 *   BooleanUtils.isNotTrue(null)          = true
 * </pre>
 *
 * @param bool  the boolean to check, null returns <code>true</code>
 * @return <code>true</code> if the input is null or false
 * @since 2.3
 */"
"// boolean Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Checks if a <code>Boolean</code> value is <code>true</code>,
 * handling <code>null</code> by returning <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.isTrue(Boolean.TRUE)  = true
 *   BooleanUtils.isTrue(Boolean.FALSE) = false
 *   BooleanUtils.isTrue(null)          = false
 * </pre>
 *
 * @param bool  the boolean to check, null returns <code>false</code>
 * @return <code>true</code> only if the input is non-null and true
 * @since 2.1
 */
public static boolean isTrue(Boolean bool) {
    if (bool == null) {
        return false;
    }
    return bool.booleanValue() ? true : false;
}","public void test121131() throws Throwable {
    boolean boolean0 = BooleanUtils.isTrue((Boolean) null);
    assertFalse(boolean0);
}",""
"// boolean Boolean methods
//-----------------------------------------------------------------------
/**
 * <p>Checks if a <code>Boolean</code> value is <code>true</code>,
 * handling <code>null</code> by returning <code>false</code>.</p>
 *
 * <pre>
 *   BooleanUtils.isTrue(Boolean.TRUE)  = true
 *   BooleanUtils.isTrue(Boolean.FALSE) = false
 *   BooleanUtils.isTrue(null)          = false
 * </pre>
 *
 * @param bool  the boolean to check, null returns <code>false</code>
 * @return <code>true</code> only if the input is non-null and true
 * @since 2.1
 */
public static boolean isTrue(Boolean bool) {
    if (bool == null) {
        return false;
    }
    return bool.booleanValue() ? true : false;
}","public void test122132() throws Throwable {
    Boolean boolean0 = new Boolean(false);
    boolean boolean1 = BooleanUtils.isTrue(boolean0);
    assertFalse(boolean1);
}",""
"// Boolean utilities
//--------------------------------------------------------------------------
/**
 * <p>Negates the specified boolean.</p>
 *
 * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>
 *
 * <pre>
 *   BooleanUtils.negate(Boolean.TRUE)  = Boolean.FALSE;
 *   BooleanUtils.negate(Boolean.FALSE) = Boolean.TRUE;
 *   BooleanUtils.negate(null)          = null;
 * </pre>
 *
 * @param bool  the Boolean to negate, may be null
 * @return the negated Boolean, or <code>null</code> if <code>null</code> input
 */
public static Boolean negate(Boolean bool) {
    if (bool == null) {
        return null;
    }
    return (bool.booleanValue() ? Boolean.FALSE : Boolean.TRUE);
}","public void test123133() throws Throwable {
    Boolean boolean0 = BooleanUtils.negate((Boolean) null);
    assertNull(boolean0);
}",""
"public static String toStringOnOff(Boolean bool) {
    return toString(bool, ""on"", ""off"", null);
}","public void test124134() throws Throwable {
    Boolean boolean0 = BooleanUtils.toBooleanObject((-1668), (-1668), (-1668), 0);
    String string0 = BooleanUtils.toStringOnOff(boolean0);
    assertNotNull(string0);
}","/**
 * <p>Converts a Boolean to a String returning <code>'on'</code>,
 * <code>'off'</code>, or <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toStringOnOff(Boolean.TRUE)  = ""on""
 *   BooleanUtils.toStringOnOff(Boolean.FALSE) = ""off""
 *   BooleanUtils.toStringOnOff(null)          = null;
 * </pre>
 *
 * @param bool  the Boolean to check
 * @return <code>'on'</code>, <code>'off'</code>,
 *  or <code>null</code>
 */"
"public static String toStringOnOff(boolean bool) {
    return toString(bool, ""on"", ""off"");
}","public void test125136() throws Throwable {
    String string0 = BooleanUtils.toStringOnOff(false);
    assertEquals(""off"", string0);
}","/**
 * <p>Converts a boolean to a String returning <code>'on'</code>
 * or <code>'off'</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toStringOnOff(true)   = ""on""
 *   BooleanUtils.toStringOnOff(false)  = ""off""
 * </pre>
 *
 * @param bool  the Boolean to check
 * @return <code>'on'</code>, <code>'off'</code>,
 *  or <code>null</code>
 */"
"public BooleanUtils() {
    super();
}","public void test126137() throws Throwable {
    BooleanUtils booleanUtils0 = new BooleanUtils();
}","/**
 * <p><code>BooleanUtils</code> instances should NOT be constructed in standard programming.
 * Instead, the class should be used as <code>BooleanUtils.toBooleanObject(true);</code>.</p>
 *
 * <p>This constructor is public to permit tools that require a JavaBean instance
 * to operate.</p>
 */"
"public static String toStringYesNo(boolean bool) {
    return toString(bool, ""yes"", ""no"");
}","public void test127138() throws Throwable {
    String string0 = BooleanUtils.toStringYesNo(false);
    assertEquals(""no"", string0);
}","/**
 * <p>Converts a boolean to a String returning <code>'yes'</code>
 * or <code>'no'</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toStringYesNo(true)   = ""yes""
 *   BooleanUtils.toStringYesNo(false)  = ""no""
 * </pre>
 *
 * @param bool  the Boolean to check
 * @return <code>'yes'</code>, <code>'no'</code>,
 *  or <code>null</code>
 */"
"public static String toStringYesNo(Boolean bool) {
    return toString(bool, ""yes"", ""no"", null);
}","public void test128139() throws Throwable {
    String string0 = BooleanUtils.toStringYesNo((Boolean) null);
    assertNull(string0);
}","/**
 * <p>Converts a Boolean to a String returning <code>'yes'</code>,
 * <code>'no'</code>, or <code>null</code>.</p>
 *
 * <pre>
 *   BooleanUtils.toStringYesNo(Boolean.TRUE)  = ""yes""
 *   BooleanUtils.toStringYesNo(Boolean.FALSE) = ""no""
 *   BooleanUtils.toStringYesNo(null)          = null;
 * </pre>
 *
 * @param bool  the Boolean to check
 * @return <code>'yes'</code>, <code>'no'</code>,
 *  or <code>null</code>
 */"
