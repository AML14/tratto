focal_method,test_prefix,docstring
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test0000() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 1283);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(869, fraction1.getNumerator());
}",""
"public int compareTo(Object object) {
    Fraction other = (Fraction) object;
    if (this == other) {
        return 0;
    }
    if (numerator == other.numerator && denominator == other.denominator) {
        return 0;
    }
    // otherwise see which is less
    long first = (long) numerator * (long) other.denominator;
    long second = (long) other.numerator * (long) denominator;
    if (first == second) {
        return 0;
    } else if (first < second) {
        return -1;
    } else {
        return 1;
    }
}","public void test0001() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 1283);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(1, int0);
}","/**
 * <p>Compares this object to another based on size.</p>
 *
 * <p>Note: this class has a natural ordering that is inconsistent
 * with equals, because, for example, equals treats 1/2 and 2/4 as
 * different, whereas compareTo treats them as equal.
 *
 * @param object  the object to compare to
 * @return -1 if this is less, 0 if equal, +1 if greater
 * @throws ClassCastException if the object is not a <code>Fraction</code>
 * @throws NullPointerException if the object is <code>null</code>
 */"
"// Number methods
//-------------------------------------------------------------------
/**
 * <p>Gets the fraction as an <code>int</code>. This returns the whole number
 * part of the fraction.</p>
 *
 * @return the whole number fraction part
 */
public int intValue() {
    return numerator / denominator;
}","public void test0002() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 1283);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(1, fraction0.intValue());
}",""
"// Basics
//-------------------------------------------------------------------
/**
 * <p>Compares this fraction to another object to test if they are equal.</p>.
 *
 * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>
 *
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof Fraction == false) {
        return false;
    }
    Fraction other = (Fraction) obj;
    return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());
}","public void test0013() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.ONE_FIFTH;
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(boolean0);
}",""
"// Basics
//-------------------------------------------------------------------
/**
 * <p>Compares this fraction to another object to test if they are equal.</p>.
 *
 * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>
 *
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof Fraction == false) {
        return false;
    }
    Fraction other = (Fraction) obj;
    return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());
}","public void test0014() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.ONE_FIFTH;
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(fraction0.equals((Object) fraction1));
}",""
"public int getDenominator() {
    return denominator;
}","public void test0015() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.ONE_FIFTH;
    boolean boolean0 = fraction1.equals(fraction0);
    assertEquals(5, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test0016() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.ONE_FIFTH;
    boolean boolean0 = fraction1.equals(fraction0);
    assertEquals(1, fraction1.getNumerator());
}",""
"public int getDenominator() {
    return denominator;
}","public void test0027() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.ONE_THIRD.invert();
    boolean boolean0 = fraction1.equals(fraction0);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Basics
//-------------------------------------------------------------------
/**
 * <p>Compares this fraction to another object to test if they are equal.</p>.
 *
 * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>
 *
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof Fraction == false) {
        return false;
    }
    Fraction other = (Fraction) obj;
    return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());
}","public void test0028() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.ONE_THIRD.invert();
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(boolean0);
}",""
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test0029() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.ONE_THIRD.invert();
    boolean boolean0 = fraction1.equals(fraction0);
    assertEquals(3, fraction1.getNumerator());
}",""
"// Basics
//-------------------------------------------------------------------
/**
 * <p>Compares this fraction to another object to test if they are equal.</p>.
 *
 * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>
 *
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof Fraction == false) {
        return false;
    }
    Fraction other = (Fraction) obj;
    return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());
}","public void test00210() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.ONE_THIRD.invert();
    boolean boolean0 = fraction1.equals(fraction0);
    assertFalse(fraction0.equals((Object) fraction1));
}",""
"public int getDenominator() {
    return denominator;
}","public void test00311() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
    Fraction fraction1 = fraction0.pow(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public int getDenominator() {
    return denominator;
}","public void test00312() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
    Fraction fraction1 = fraction0.pow(Integer.MAX_VALUE);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test00313() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
    Fraction fraction1 = fraction0.pow(Integer.MAX_VALUE);
    assertEquals(Integer.MAX_VALUE, fraction0.getNumerator());
}",""
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test00314() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(Integer.MAX_VALUE, Integer.MAX_VALUE);
    Fraction fraction1 = fraction0.pow(Integer.MAX_VALUE);
    assertEquals(1.0F, fraction1.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public static Fraction getFraction(String str) {
    if (str == null) {
        throw new IllegalArgumentException(""The string must not be null"");
    }
    // parse double format
    int pos = str.indexOf('.');
    if (pos >= 0) {
        return getFraction(Double.parseDouble(str));
    }
    // parse X Y/Z format
    pos = str.indexOf(' ');
    if (pos > 0) {
        int whole = Integer.parseInt(str.substring(0, pos));
        str = str.substring(pos + 1);
        pos = str.indexOf('/');
        if (pos < 0) {
            throw new NumberFormatException(""The fraction could not be parsed as the format X Y/Z"");
        } else {
            int numer = Integer.parseInt(str.substring(0, pos));
            int denom = Integer.parseInt(str.substring(pos + 1));
            return getFraction(whole, numer, denom);
        }
    }
    // parse Y/Z format
    pos = str.indexOf('/');
    if (pos < 0) {
        // simple whole number
        return getFraction(Integer.parseInt(str), 1);
    } else {
        int numer = Integer.parseInt(str.substring(0, pos));
        int denom = Integer.parseInt(str.substring(pos + 1));
        return getFraction(numer, denom);
    }
}","public void test00415() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction(""/;cJnC"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}","/**
 * <p>Creates a Fraction from a <code>String</code>.</p>
 *
 * <p>The formats accepted are:</p>
 *
 * <ol>
 *  <li><code>double</code> String containing a dot</li>
 *  <li>'X Y/Z'</li>
 *  <li>'Y/Z'</li>
 *  <li>'X' (a simple whole number)</li>
 * </ol>
 * and a .</p>
 *
 * @param str  the string to parse, must not be <code>null</code>
 * @return the new <code>Fraction</code> instance
 * @throws IllegalArgumentException if the string is <code>null</code>
 * @throws NumberFormatException if the number format is invalid
 */"
"public static Fraction getFraction(String str) {
    if (str == null) {
        throw new IllegalArgumentException(""The string must not be null"");
    }
    // parse double format
    int pos = str.indexOf('.');
    if (pos >= 0) {
        return getFraction(Double.parseDouble(str));
    }
    // parse X Y/Z format
    pos = str.indexOf(' ');
    if (pos > 0) {
        int whole = Integer.parseInt(str.substring(0, pos));
        str = str.substring(pos + 1);
        pos = str.indexOf('/');
        if (pos < 0) {
            throw new NumberFormatException(""The fraction could not be parsed as the format X Y/Z"");
        } else {
            int numer = Integer.parseInt(str.substring(0, pos));
            int denom = Integer.parseInt(str.substring(pos + 1));
            return getFraction(whole, numer, denom);
        }
    }
    // parse Y/Z format
    pos = str.indexOf('/');
    if (pos < 0) {
        // simple whole number
        return getFraction(Integer.parseInt(str), 1);
    } else {
        int numer = Integer.parseInt(str.substring(0, pos));
        int denom = Integer.parseInt(str.substring(pos + 1));
        return getFraction(numer, denom);
    }
}","public void test00516() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction("" bOeg1/`gL<|%d"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \"" bOeg1\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}","/**
 * <p>Creates a Fraction from a <code>String</code>.</p>
 *
 * <p>The formats accepted are:</p>
 *
 * <ol>
 *  <li><code>double</code> String containing a dot</li>
 *  <li>'X Y/Z'</li>
 *  <li>'Y/Z'</li>
 *  <li>'X' (a simple whole number)</li>
 * </ol>
 * and a .</p>
 *
 * @param str  the string to parse, must not be <code>null</code>
 * @return the new <code>Fraction</code> instance
 * @throws IllegalArgumentException if the string is <code>null</code>
 * @throws NumberFormatException if the number format is invalid
 */"
"public static Fraction getFraction(String str) {
    if (str == null) {
        throw new IllegalArgumentException(""The string must not be null"");
    }
    // parse double format
    int pos = str.indexOf('.');
    if (pos >= 0) {
        return getFraction(Double.parseDouble(str));
    }
    // parse X Y/Z format
    pos = str.indexOf(' ');
    if (pos > 0) {
        int whole = Integer.parseInt(str.substring(0, pos));
        str = str.substring(pos + 1);
        pos = str.indexOf('/');
        if (pos < 0) {
            throw new NumberFormatException(""The fraction could not be parsed as the format X Y/Z"");
        } else {
            int numer = Integer.parseInt(str.substring(0, pos));
            int denom = Integer.parseInt(str.substring(pos + 1));
            return getFraction(whole, numer, denom);
        }
    }
    // parse Y/Z format
    pos = str.indexOf('/');
    if (pos < 0) {
        // simple whole number
        return getFraction(Integer.parseInt(str), 1);
    } else {
        int numer = Integer.parseInt(str.substring(0, pos));
        int denom = Integer.parseInt(str.substring(pos + 1));
        return getFraction(numer, denom);
    }
}","public void test00617() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction("".t]<n_;@6|p>,'\""p`6^"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
    }
}","/**
 * <p>Creates a Fraction from a <code>String</code>.</p>
 *
 * <p>The formats accepted are:</p>
 *
 * <ol>
 *  <li><code>double</code> String containing a dot</li>
 *  <li>'X Y/Z'</li>
 *  <li>'Y/Z'</li>
 *  <li>'X' (a simple whole number)</li>
 * </ol>
 * and a .</p>
 *
 * @param str  the string to parse, must not be <code>null</code>
 * @return the new <code>Fraction</code> instance
 * @throws IllegalArgumentException if the string is <code>null</code>
 * @throws NumberFormatException if the number format is invalid
 */"
"// Calculations
//-------------------------------------------------------------------
/**
 * <p>Reduce the fraction to the smallest values for the numerator and
 * denominator, returning the result.</p>
 *
 * <p>For example, if this fraction represents 2/4, then the result
 * will be 1/2.</p>
 *
 * @return a new reduced fraction instance, or this if no simplification possible
 */
public Fraction reduce() {
    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
    if (gcd == 1) {
        return this;
    }
    return Fraction.getFraction(numerator / gcd, denominator / gcd);
}","public void test00718() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(1145, (-1));
    Fraction fraction1 = fraction0.reduce();
    assertSame(fraction1, fraction0);
}",""
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test00719() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(1145, (-1));
    Fraction fraction1 = fraction0.reduce();
    assertEquals((-1145.0), fraction1.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public int getDenominator() {
    return denominator;
}","public void test00720() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(1145, (-1));
    Fraction fraction1 = fraction0.reduce();
    assertEquals(1, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test00821() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-78.0502075079038));
    Fraction fraction1 = fraction0.pow(1);
    assertEquals((-771058), fraction1.getNumerator());
}",""
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test00822() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-78.0502075079038));
    Fraction fraction1 = fraction0.pow(1);
    assertEquals((-78.05020751088166), fraction1.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"// Number methods
//-------------------------------------------------------------------
/**
 * <p>Gets the fraction as an <code>int</code>. This returns the whole number
 * part of the fraction.</p>
 *
 * @return the whole number fraction part
 */
public int intValue() {
    return numerator / denominator;
}","public void test00923() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = fraction0.ZERO.pow(599);
    assertEquals(0, fraction1.intValue());
}",""
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test01024() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1), (-3569));
    Fraction fraction1 = fraction0.pow((-1));
    assertEquals(1, fraction0.getNumerator());
}",""
"// Number methods
//-------------------------------------------------------------------
/**
 * <p>Gets the fraction as an <code>int</code>. This returns the whole number
 * part of the fraction.</p>
 *
 * @return the whole number fraction part
 */
public int intValue() {
    return numerator / denominator;
}","public void test01025() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1), (-3569));
    Fraction fraction1 = fraction0.pow((-1));
    assertEquals(3569, fraction1.intValue());
}",""
"public int getDenominator() {
    return denominator;
}","public void test01026() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1), (-3569));
    Fraction fraction1 = fraction0.pow((-1));
    assertEquals(1, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test01127() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-2461.523167961));
    Fraction fraction1 = fraction0.negate();
    assertEquals((-19549417), fraction0.getNumerator());
}",""
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test01128() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-2461.523167961));
    Fraction fraction1 = fraction0.negate();
    assertEquals(2461.5231679677663, fraction1.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test01229() throws Throwable {
    Fraction fraction0 = Fraction.TWO_FIFTHS;
    Fraction fraction1 = fraction0.TWO_FIFTHS.negate();
    fraction1.negate();
    assertEquals((-0.4), fraction1.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test01330() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(947.9);
    Fraction fraction1 = fraction0.negate();
    assertEquals((-947.9), fraction1.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public int getDenominator() {
    return denominator;
}","public void test01432() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.TWO_FIFTHS;
    Fraction fraction2 = fraction0.THREE_FIFTHS.add(fraction1);
    Fraction fraction3 = fraction2.negate();
    assertEquals(1, fraction3.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Number methods
//-------------------------------------------------------------------
/**
 * <p>Gets the fraction as an <code>int</code>. This returns the whole number
 * part of the fraction.</p>
 *
 * @return the whole number fraction part
 */
public int intValue() {
    return numerator / denominator;
}","public void test01433() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.TWO_FIFTHS;
    Fraction fraction2 = fraction0.THREE_FIFTHS.add(fraction1);
    Fraction fraction3 = fraction2.negate();
    assertEquals(1, fraction2.intValue());
}",""
"public long longValue() {
    return (long) numerator / denominator;
}","public void test01434() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.TWO_FIFTHS;
    Fraction fraction2 = fraction0.THREE_FIFTHS.add(fraction1);
    Fraction fraction3 = fraction2.negate();
    assertEquals((-1L), fraction3.longValue());
}","/**
 * <p>Gets the fraction as a <code>long</code>. This returns the whole number
 * part of the fraction.</p>
 *
 * @return the whole number fraction part
 */"
"public int getDenominator() {
    return denominator;
}","public void test01535() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    Fraction fraction1 = Fraction.getFraction((-2254.0));
    Fraction fraction2 = fraction0.FOUR_FIFTHS.multiplyBy(fraction1);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test01536() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    Fraction fraction1 = Fraction.getFraction((-2254.0));
    Fraction fraction2 = fraction0.FOUR_FIFTHS.multiplyBy(fraction1);
    assertEquals((-1803.2F), fraction2.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test01637() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.ONE_FIFTH.negate();
    Fraction fraction2 = fraction0.multiplyBy(fraction1);
    assertEquals((-0.1F), fraction2.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test01638() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.ONE_FIFTH.negate();
    Fraction fraction2 = fraction0.multiplyBy(fraction1);
    assertEquals((-0.2F), fraction1.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test01739() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-1.0));
    Fraction fraction1 = fraction0.ONE_THIRD.invert();
    Fraction fraction2 = fraction1.subtract(fraction0);
    Fraction fraction3 = fraction0.ONE_THIRD.multiplyBy(fraction2);
    assertEquals(4.0F, fraction2.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test01740() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-1.0));
    Fraction fraction1 = fraction0.ONE_THIRD.invert();
    Fraction fraction2 = fraction1.subtract(fraction0);
    Fraction fraction3 = fraction0.ONE_THIRD.multiplyBy(fraction2);
    assertEquals(1.3333333333333333, fraction3.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test01841() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.TWO_QUARTERS.divideBy(fraction0);
    long long0 = fraction1.longValue();
    assertEquals(2.0F, fraction1.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public int getDenominator() {
    return denominator;
}","public void test01842() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.TWO_QUARTERS.divideBy(fraction0);
    long long0 = fraction1.longValue();
    assertEquals(1, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public long longValue() {
    return (long) numerator / denominator;
}","public void test01843() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.TWO_QUARTERS.divideBy(fraction0);
    long long0 = fraction1.longValue();
    assertEquals(2L, long0);
}","/**
 * <p>Gets the fraction as a <code>long</code>. This returns the whole number
 * part of the fraction.</p>
 *
 * @return the whole number fraction part
 */"
"public int getDenominator() {
    return denominator;
}","public void test01944() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-1.0));
    long long0 = fraction0.longValue();
    assertEquals(1, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public long longValue() {
    return (long) numerator / denominator;
}","public void test01945() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-1.0));
    long long0 = fraction0.longValue();
    assertEquals((-1L), long0);
}","/**
 * <p>Gets the fraction as a <code>long</code>. This returns the whole number
 * part of the fraction.</p>
 *
 * @return the whole number fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test02046() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-2440.08978));
    Fraction fraction1 = fraction0.TWO_THIRDS.divideBy(fraction0);
    Fraction fraction2 = fraction1.invert();
    assertEquals((-6876173), fraction0.getNumerator());
}",""
"public int getDenominator() {
    return denominator;
}","public void test02047() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-2440.08978));
    Fraction fraction1 = fraction0.TWO_THIRDS.divideBy(fraction0);
    Fraction fraction2 = fraction1.invert();
    assertEquals(5636, fraction2.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test02048() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-2440.08978));
    Fraction fraction1 = fraction0.TWO_THIRDS.divideBy(fraction0);
    Fraction fraction2 = fraction1.invert();
    assertEquals((-2.732139907862508E-4), fraction1.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"// Number methods
//-------------------------------------------------------------------
/**
 * <p>Gets the fraction as an <code>int</code>. This returns the whole number
 * part of the fraction.</p>
 *
 * @return the whole number fraction part
 */
public int intValue() {
    return numerator / denominator;
}","public void test02149() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    int int0 = fraction0.intValue();
    assertEquals(0, int0);
}",""
"// Number methods
//-------------------------------------------------------------------
/**
 * <p>Gets the fraction as an <code>int</code>. This returns the whole number
 * part of the fraction.</p>
 *
 * @return the whole number fraction part
 */
public int intValue() {
    return numerator / denominator;
}","public void test02250() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(285, 285);
    int int0 = fraction0.intValue();
    assertEquals(1, int0);
}",""
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test02251() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(285, 285);
    int int0 = fraction0.intValue();
    assertEquals(285, fraction0.getNumerator());
}",""
"public int getProperWhole() {
    return numerator / denominator;
}","public void test02352() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(""-1"");
    int int0 = fraction0.getProperWhole();
    assertEquals((-1), int0);
}","/**
 * <p>Gets the proper whole part of the fraction.</p>
 *
 * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.
 * This method returns the 1 from the proper fraction.</p>
 *
 * <p>If the fraction is negative such as -7/4, it can be resolved into
 * -1 3/4, so this method returns the positive whole part -1.</p>
 *
 * @return the whole fraction part of a proper fraction, that includes the sign
 */"
"public int getDenominator() {
    return denominator;
}","public void test02353() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(""-1"");
    int int0 = fraction0.getProperWhole();
    assertEquals(1, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public int getProperNumerator() {
    return Math.abs(numerator % denominator);
}","public void test02454() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    int int0 = fraction0.getProperNumerator();
    assertEquals(0, int0);
}","/**
 * <p>Gets the proper numerator, always positive.</p>
 *
 * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.
 * This method returns the 3 from the proper fraction.</p>
 *
 * <p>If the fraction is negative such as -7/4, it can be resolved into
 * -1 3/4, so this method returns the positive proper numerator, 3.</p>
 *
 * @return the numerator fraction part of a proper fraction, always positive
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test02555() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    int int0 = fraction0.getNumerator();
    assertEquals(0, int0);
}",""
"public int getDenominator() {
    return denominator;
}","public void test02656() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-2590), 25);
    int int0 = fraction0.getNumerator();
    assertEquals(5, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test02657() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-2590), 25);
    int int0 = fraction0.getNumerator();
    assertEquals((-518), int0);
}",""
"// Calculations
//-------------------------------------------------------------------
/**
 * <p>Reduce the fraction to the smallest values for the numerator and
 * denominator, returning the result.</p>
 *
 * <p>For example, if this fraction represents 2/4, then the result
 * will be 1/2.</p>
 *
 * @return a new reduced fraction instance, or this if no simplification possible
 */
public Fraction reduce() {
    int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
    if (gcd == 1) {
        return this;
    }
    return Fraction.getFraction(numerator / gcd, denominator / gcd);
}","public void test02758() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(""0"");
    Fraction fraction1 = fraction0.reduce();
    assertSame(fraction1, fraction0);
}",""
"public int getDenominator() {
    return denominator;
}","public void test02759() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(""0"");
    Fraction fraction1 = fraction0.reduce();
    assertEquals(1, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test02760() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(""0"");
    Fraction fraction1 = fraction0.reduce();
    assertEquals(0.0F, fraction1.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test02861() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(""-103 3/5"");
    assertEquals((-103.6F), fraction0.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test02962() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-114), 4, 4);
    assertEquals((-115.0F), fraction0.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test03063() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(0, 0, 2268);
    assertEquals(0.0F, fraction0.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public int getDenominator() {
    return denominator;
}","public void test03064() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(0, 0, 2268);
    assertEquals(2268, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test03165() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(2024, 0, 31);
    assertEquals(62744, fraction0.getNumerator());
}",""
"public int getDenominator() {
    return denominator;
}","public void test03166() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(2024, 0, 31);
    assertEquals(31, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test03267() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(0, 25);
    assertEquals(0.0, fraction0.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public int getDenominator() {
    return denominator;
}","public void test03268() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(0, 25);
    assertEquals(25, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test03369() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    float float0 = fraction0.floatValue();
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test03470() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    Fraction fraction1 = fraction0.negate();
    float float0 = fraction1.floatValue();
    assertEquals((-0.6666667F), float0, 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test03571() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    double double0 = fraction0.doubleValue();
    assertEquals(0.0, double0, 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test03672() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = fraction0.THREE_FIFTHS.negate();
    double double0 = fraction1.doubleValue();
    assertEquals((-0.6), double0, 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test03773() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
    Fraction fraction2 = fraction0.subtract(fraction1);
    Fraction fraction3 = fraction1.divideBy(fraction2);
    assertEquals((-1.0011511754461366), fraction3.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test03774() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
    Fraction fraction2 = fraction0.subtract(fraction1);
    Fraction fraction3 = fraction1.divideBy(fraction2);
    assertEquals((-1115796), fraction3.getNumerator());
}",""
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test03775() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
    Fraction fraction2 = fraction0.subtract(fraction1);
    Fraction fraction3 = fraction1.divideBy(fraction2);
    assertEquals((-868.6773187840997), fraction2.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public int getDenominator() {
    return denominator;
}","public void test03876() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.TWO_QUARTERS.invert();
    Fraction fraction2 = fraction0.subtract(fraction1);
    Fraction fraction3 = fraction0.add(fraction2);
    assertEquals(2, fraction3.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test03877() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.TWO_QUARTERS.invert();
    Fraction fraction2 = fraction0.subtract(fraction1);
    Fraction fraction3 = fraction0.add(fraction2);
    assertEquals((-3), fraction3.getNumerator());
}",""
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test03978() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.getFraction(3481.7902348955795);
    Fraction fraction2 = fraction0.add(fraction1);
    assertEquals(3482.040234895887, fraction2.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test04180() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.abs();
    assertEquals(1.0, fraction1.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test04281() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1100), (-2));
    Fraction fraction1 = fraction0.multiplyBy(fraction0);
    Fraction fraction2 = fraction1.abs();
    assertEquals(302500, fraction1.getNumerator());
}",""
"public Fraction abs() {
    if (numerator >= 0) {
        return this;
    }
    return negate();
}","public void test04282() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1100), (-2));
    Fraction fraction1 = fraction0.multiplyBy(fraction0);
    Fraction fraction2 = fraction1.abs();
    assertSame(fraction2, fraction1);
}","/**
 * <p>Gets a fraction that is the positive equivalent of this one.</p>
 * <p>More precisely: <code>(fraction >= 0 ? this : -fraction)</code></p>
 *
 * <p>The returned fraction is not reduced.</p>
 *
 * @return <code>this</code> if it is positive, or a new positive fraction
 *  instance with the opposite signed numerator
 */"
"public int getDenominator() {
    return denominator;
}","public void test04283() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-1100), (-2));
    Fraction fraction1 = fraction0.multiplyBy(fraction0);
    Fraction fraction2 = fraction1.abs();
    assertEquals(1, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public Fraction subtract(Fraction fraction) {
    return addSub(fraction, false);
}","public void test04384() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(225.75775);
    Fraction fraction1 = fraction0.invert();
    // Undeclared exception!
    try {
        fraction0.subtract(fraction1);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mul
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.</p>
 *
 * @param fraction  the fraction to subtract, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominator
 *   cannot be represented in an <code>int</code>.
 */"
"public int compareTo(Object object) {
    Fraction other = (Fraction) object;
    if (this == other) {
        return 0;
    }
    if (numerator == other.numerator && denominator == other.denominator) {
        return 0;
    }
    // otherwise see which is less
    long first = (long) numerator * (long) other.denominator;
    long second = (long) other.numerator * (long) denominator;
    if (first == second) {
        return 0;
    } else if (first < second) {
        return -1;
    } else {
        return 1;
    }
}","public void test04485() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    // Undeclared exception!
    try {
        fraction0.compareTo((Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Compares this object to another based on size.</p>
 *
 * <p>Note: this class has a natural ordering that is inconsistent
 * with equals, because, for example, equals treats 1/2 and 2/4 as
 * different, whereas compareTo treats them as equal.
 *
 * @param object  the object to compare to
 * @return -1 if this is less, 0 if equal, +1 if greater
 * @throws ClassCastException if the object is not a <code>Fraction</code>
 * @throws NullPointerException if the object is <code>null</code>
 */"
"public int compareTo(Object object) {
    Fraction other = (Fraction) object;
    if (this == other) {
        return 0;
    }
    if (numerator == other.numerator && denominator == other.denominator) {
        return 0;
    }
    // otherwise see which is less
    long first = (long) numerator * (long) other.denominator;
    long second = (long) other.numerator * (long) denominator;
    if (first == second) {
        return 0;
    } else if (first < second) {
        return -1;
    } else {
        return 1;
    }
}","public void test04586() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    // Undeclared exception!
    try {
        fraction0.compareTo(""q&bBD1O}"");
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // java.lang.String cannot be cast to org.apache.commons.lang.math.Fraction
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Compares this object to another based on size.</p>
 *
 * <p>Note: this class has a natural ordering that is inconsistent
 * with equals, because, for example, equals treats 1/2 and 2/4 as
 * different, whereas compareTo treats them as equal.
 *
 * @param object  the object to compare to
 * @return -1 if this is less, 0 if equal, +1 if greater
 * @throws ClassCastException if the object is not a <code>Fraction</code>
 * @throws NullPointerException if the object is <code>null</code>
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test04687() throws Throwable {
    Fraction fraction0 = Fraction.ONE_FIFTH;
    // Undeclared exception!
    try {
        fraction0.add((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fraction must not be null
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test04788() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    Fraction fraction1 = fraction0.ZERO.multiplyBy(fraction0);
    assertEquals(0, fraction1.getNumerator());
}",""
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test04889() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    Fraction fraction1 = fraction0.THREE_QUARTERS.pow(4);
    assertEquals(0.31640625F, fraction1.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public Fraction invert() {
    if (numerator == 0) {
        throw new ArithmeticException(""Unable to invert zero."");
    }
    if (numerator == Integer.MIN_VALUE) {
        throw new ArithmeticException(""overflow: can't negate numerator"");
    }
    if (numerator < 0) {
        return new Fraction(-denominator, -numerator);
    } else {
        return new Fraction(denominator, numerator);
    }
}","public void test04990() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(4039, 4039);
    // Undeclared exception!
    try {
        fraction0.ZERO.invert();
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Unable to invert zero.
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Gets a fraction that is the inverse (1/fraction) of this one.</p>
 *
 * <p>The returned fraction is not reduced.</p>
 *
 * @return a new fraction instance with the numerator and denominator
 *         inverted.
 * @throws ArithmeticException if the fraction represents zero.
 */"
"public int getProperWhole() {
    return numerator / denominator;
}","public void test05091() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    int int0 = fraction0.getProperWhole();
    assertEquals(0, int0);
}","/**
 * <p>Gets the proper whole part of the fraction.</p>
 *
 * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.
 * This method returns the 1 from the proper fraction.</p>
 *
 * <p>If the fraction is negative such as -7/4, it can be resolved into
 * -1 3/4, so this method returns the positive whole part -1.</p>
 *
 * @return the whole fraction part of a proper fraction, that includes the sign
 */"
"public int getProperNumerator() {
    return Math.abs(numerator % denominator);
}","public void test05192() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    int int0 = fraction0.getProperNumerator();
    assertEquals(2, int0);
}","/**
 * <p>Gets the proper numerator, always positive.</p>
 *
 * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.
 * This method returns the 3 from the proper fraction.</p>
 *
 * <p>If the fraction is negative such as -7/4, it can be resolved into
 * -1 3/4, so this method returns the positive proper numerator, 3.</p>
 *
 * @return the numerator fraction part of a proper fraction, always positive
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test05293() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    int int0 = fraction0.getNumerator();
    assertEquals(3, int0);
}",""
"public String toProperString() {
    if (toProperString == null) {
        if (numerator == 0) {
            toProperString = ""0"";
        } else if (numerator == denominator) {
            toProperString = ""1"";
        } else if (numerator == -1 * denominator) {
            toProperString = ""-1"";
        } else if ((numerator > 0 ? -numerator : numerator) < -denominator) {
            // note that we do the magnitude comparison test above with
            // NEGATIVE (not positive) numbers, since negative numbers
            // have a larger range.  otherwise numerator==Integer.MIN_VALUE
            // is handled incorrectly.
            int properNumerator = getProperNumerator();
            if (properNumerator == 0) {
                toProperString = Integer.toString(getProperWhole());
            } else {
                toProperString = new StringBuffer(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();
            }
        } else {
            toProperString = new StringBuffer(32).append(getNumerator()).append('/').append(getDenominator()).toString();
        }
    }
    return toProperString;
}","public void test05394() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = Fraction.ONE_QUARTER;
    Fraction fraction2 = fraction0.divideBy(fraction1);
    String string0 = fraction2.toProperString();
    assertEquals(""3"", string0);
}","/**
 * <p>Gets the fraction as a proper <code>String</code> in the format X Y/Z.</p>
 *
 * <p>The format used in '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>'.
 * If the whole number is zero it will be ommitted. If the numerator is zero,
 * only the whole number is returned.</p>
 *
 * @return a <code>String</code> form of the fraction
 */"
"public int getDenominator() {
    return denominator;
}","public void test05395() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = Fraction.ONE_QUARTER;
    Fraction fraction2 = fraction0.divideBy(fraction1);
    String string0 = fraction2.toProperString();
    assertEquals(1, fraction2.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public int getProperNumerator() {
    return Math.abs(numerator % denominator);
}","public void test05396() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = Fraction.ONE_QUARTER;
    Fraction fraction2 = fraction0.divideBy(fraction1);
    String string0 = fraction2.toProperString();
    assertEquals(1, fraction1.getProperNumerator());
}","/**
 * <p>Gets the proper numerator, always positive.</p>
 *
 * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.
 * This method returns the 3 from the proper fraction.</p>
 *
 * <p>If the fraction is negative such as -7/4, it can be resolved into
 * -1 3/4, so this method returns the positive proper numerator, 3.</p>
 *
 * @return the numerator fraction part of a proper fraction, always positive
 */"
"public int getProperWhole() {
    return numerator / denominator;
}","public void test05397() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = Fraction.ONE_QUARTER;
    Fraction fraction2 = fraction0.divideBy(fraction1);
    String string0 = fraction2.toProperString();
    assertEquals(0, fraction1.getProperWhole());
}","/**
 * <p>Gets the proper whole part of the fraction.</p>
 *
 * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.
 * This method returns the 1 from the proper fraction.</p>
 *
 * <p>If the fraction is negative such as -7/4, it can be resolved into
 * -1 3/4, so this method returns the positive whole part -1.</p>
 *
 * @return the whole fraction part of a proper fraction, that includes the sign
 */"
"public int getDenominator() {
    return denominator;
}","public void test05498() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-1.0));
    String string0 = fraction0.toProperString();
    assertEquals(1, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public String toProperString() {
    if (toProperString == null) {
        if (numerator == 0) {
            toProperString = ""0"";
        } else if (numerator == denominator) {
            toProperString = ""1"";
        } else if (numerator == -1 * denominator) {
            toProperString = ""-1"";
        } else if ((numerator > 0 ? -numerator : numerator) < -denominator) {
            // note that we do the magnitude comparison test above with
            // NEGATIVE (not positive) numbers, since negative numbers
            // have a larger range.  otherwise numerator==Integer.MIN_VALUE
            // is handled incorrectly.
            int properNumerator = getProperNumerator();
            if (properNumerator == 0) {
                toProperString = Integer.toString(getProperWhole());
            } else {
                toProperString = new StringBuffer(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();
            }
        } else {
            toProperString = new StringBuffer(32).append(getNumerator()).append('/').append(getDenominator()).toString();
        }
    }
    return toProperString;
}","public void test05499() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-1.0));
    String string0 = fraction0.toProperString();
    assertEquals(""-1"", string0);
}","/**
 * <p>Gets the fraction as a proper <code>String</code> in the format X Y/Z.</p>
 *
 * <p>The format used in '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>'.
 * If the whole number is zero it will be ommitted. If the numerator is zero,
 * only the whole number is returned.</p>
 *
 * @return a <code>String</code> form of the fraction
 */"
"public int getDenominator() {
    return denominator;
}","public void test055101() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    String string0 = fraction0.toProperString();
    assertEquals(869, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public String toProperString() {
    if (toProperString == null) {
        if (numerator == 0) {
            toProperString = ""0"";
        } else if (numerator == denominator) {
            toProperString = ""1"";
        } else if (numerator == -1 * denominator) {
            toProperString = ""-1"";
        } else if ((numerator > 0 ? -numerator : numerator) < -denominator) {
            // note that we do the magnitude comparison test above with
            // NEGATIVE (not positive) numbers, since negative numbers
            // have a larger range.  otherwise numerator==Integer.MIN_VALUE
            // is handled incorrectly.
            int properNumerator = getProperNumerator();
            if (properNumerator == 0) {
                toProperString = Integer.toString(getProperWhole());
            } else {
                toProperString = new StringBuffer(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();
            }
        } else {
            toProperString = new StringBuffer(32).append(getNumerator()).append('/').append(getDenominator()).toString();
        }
    }
    return toProperString;
}","public void test055102() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    String string0 = fraction0.toProperString();
    assertEquals(""1"", string0);
}","/**
 * <p>Gets the fraction as a proper <code>String</code> in the format X Y/Z.</p>
 *
 * <p>The format used in '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>'.
 * If the whole number is zero it will be ommitted. If the numerator is zero,
 * only the whole number is returned.</p>
 *
 * @return a <code>String</code> form of the fraction
 */"
"public int getDenominator() {
    return denominator;
}","public void test056104() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    int int0 = fraction0.getDenominator();
    assertEquals(4, int0);
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test056105() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    int int0 = fraction0.getDenominator();
    fraction0.FOUR_FIFTHS.toProperString();
    Fraction fraction1 = Fraction.TWO_THIRDS;
    Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
    Fraction fraction3 = Fraction.getReducedFraction((-1), (-3569));
    assertEquals(2.8019052E-4F, fraction3.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test056106() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    int int0 = fraction0.getDenominator();
    fraction0.FOUR_FIFTHS.toProperString();
    Fraction fraction1 = Fraction.TWO_THIRDS;
    Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
    Fraction fraction3 = Fraction.getReducedFraction((-1), (-3569));
    Fraction fraction4 = Fraction.ONE_QUARTER;
    fraction2.ZERO.toProperString();
    assertEquals(0.13333334F, fraction2.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public int getDenominator() {
    return denominator;
}","public void test056107() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    int int0 = fraction0.getDenominator();
    fraction0.FOUR_FIFTHS.toProperString();
    Fraction fraction1 = Fraction.TWO_THIRDS;
    Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
    Fraction fraction3 = Fraction.getReducedFraction((-1), (-3569));
    Fraction fraction4 = Fraction.ONE_QUARTER;
    fraction2.ZERO.toProperString();
    assertEquals(15, fraction2.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public String toString() {
    if (toString == null) {
        toString = new StringBuffer(32).append(getNumerator()).append('/').append(getDenominator()).toString();
    }
    return toString;
}","public void test057108() throws Throwable {
    Fraction fraction0 = Fraction.THREE_FIFTHS;
    Fraction fraction1 = Fraction.ONE_FIFTH;
    String string0 = fraction1.ZERO.toString();
    assertEquals(""0/1"", string0);
}","/**
 * <p>Gets the fraction as a <code>String</code>.</p>
 *
 * <p>The format used is '<i>numerator</i>/<i>denominator</i>' always.
 *
 * @return a <code>String</code> form of the fraction
 */"
"public int getDenominator() {
    return denominator;
}","public void test058109() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    fraction0.ZERO.toString();
    assertEquals(4, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test058110() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    fraction0.ZERO.toString();
    assertEquals(3, fraction0.getNumerator());
}",""
"public int compareTo(Object object) {
    Fraction other = (Fraction) object;
    if (this == other) {
        return 0;
    }
    if (numerator == other.numerator && denominator == other.denominator) {
        return 0;
    }
    // otherwise see which is less
    long first = (long) numerator * (long) other.denominator;
    long second = (long) other.numerator * (long) denominator;
    if (first == second) {
        return 0;
    } else if (first < second) {
        return -1;
    } else {
        return 1;
    }
}","public void test059111() throws Throwable {
    Fraction fraction0 = Fraction.TWO_QUARTERS;
    Fraction fraction1 = Fraction.ONE_QUARTER;
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(1, int0);
}","/**
 * <p>Compares this object to another based on size.</p>
 *
 * <p>Note: this class has a natural ordering that is inconsistent
 * with equals, because, for example, equals treats 1/2 and 2/4 as
 * different, whereas compareTo treats them as equal.
 *
 * @param object  the object to compare to
 * @return -1 if this is less, 0 if equal, +1 if greater
 * @throws ClassCastException if the object is not a <code>Fraction</code>
 * @throws NullPointerException if the object is <code>null</code>
 */"
"public int compareTo(Object object) {
    Fraction other = (Fraction) object;
    if (this == other) {
        return 0;
    }
    if (numerator == other.numerator && denominator == other.denominator) {
        return 0;
    }
    // otherwise see which is less
    long first = (long) numerator * (long) other.denominator;
    long second = (long) other.numerator * (long) denominator;
    if (first == second) {
        return 0;
    } else if (first < second) {
        return -1;
    } else {
        return 1;
    }
}","public void test060112() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.TWO_QUARTERS;
    int int0 = fraction1.compareTo(fraction0);
    assertEquals(0, int0);
}","/**
 * <p>Compares this object to another based on size.</p>
 *
 * <p>Note: this class has a natural ordering that is inconsistent
 * with equals, because, for example, equals treats 1/2 and 2/4 as
 * different, whereas compareTo treats them as equal.
 *
 * @param object  the object to compare to
 * @return -1 if this is less, 0 if equal, +1 if greater
 * @throws ClassCastException if the object is not a <code>Fraction</code>
 * @throws NullPointerException if the object is <code>null</code>
 */"
"public int compareTo(Object object) {
    Fraction other = (Fraction) object;
    if (this == other) {
        return 0;
    }
    if (numerator == other.numerator && denominator == other.denominator) {
        return 0;
    }
    // otherwise see which is less
    long first = (long) numerator * (long) other.denominator;
    long second = (long) other.numerator * (long) denominator;
    if (first == second) {
        return 0;
    } else if (first < second) {
        return -1;
    } else {
        return 1;
    }
}","public void test061113() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    Fraction fraction1 = Fraction.ONE;
    int int0 = fraction0.compareTo(fraction1);
    assertEquals((-1), int0);
}","/**
 * <p>Compares this object to another based on size.</p>
 *
 * <p>Note: this class has a natural ordering that is inconsistent
 * with equals, because, for example, equals treats 1/2 and 2/4 as
 * different, whereas compareTo treats them as equal.
 *
 * @param object  the object to compare to
 * @return -1 if this is less, 0 if equal, +1 if greater
 * @throws ClassCastException if the object is not a <code>Fraction</code>
 * @throws NullPointerException if the object is <code>null</code>
 */"
"public int compareTo(Object object) {
    Fraction other = (Fraction) object;
    if (this == other) {
        return 0;
    }
    if (numerator == other.numerator && denominator == other.denominator) {
        return 0;
    }
    // otherwise see which is less
    long first = (long) numerator * (long) other.denominator;
    long second = (long) other.numerator * (long) denominator;
    if (first == second) {
        return 0;
    } else if (first < second) {
        return -1;
    } else {
        return 1;
    }
}","public void test062114() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    int int0 = fraction0.compareTo(fraction0);
    assertEquals(0, int0);
}","/**
 * <p>Compares this object to another based on size.</p>
 *
 * <p>Note: this class has a natural ordering that is inconsistent
 * with equals, because, for example, equals treats 1/2 and 2/4 as
 * different, whereas compareTo treats them as equal.
 *
 * @param object  the object to compare to
 * @return -1 if this is less, 0 if equal, +1 if greater
 * @throws ClassCastException if the object is not a <code>Fraction</code>
 * @throws NullPointerException if the object is <code>null</code>
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test063115() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(869.6773187840997, fraction1.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test063116() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals(1.0F, fraction0.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public int compareTo(Object object) {
    Fraction other = (Fraction) object;
    if (this == other) {
        return 0;
    }
    if (numerator == other.numerator && denominator == other.denominator) {
        return 0;
    }
    // otherwise see which is less
    long first = (long) numerator * (long) other.denominator;
    long second = (long) other.numerator * (long) denominator;
    if (first == second) {
        return 0;
    } else if (first < second) {
        return -1;
    } else {
        return 1;
    }
}","public void test063117() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
    int int0 = fraction0.compareTo(fraction1);
    assertEquals((-1), int0);
}","/**
 * <p>Compares this object to another based on size.</p>
 *
 * <p>Note: this class has a natural ordering that is inconsistent
 * with equals, because, for example, equals treats 1/2 and 2/4 as
 * different, whereas compareTo treats them as equal.
 *
 * @param object  the object to compare to
 * @return -1 if this is less, 0 if equal, +1 if greater
 * @throws ClassCastException if the object is not a <code>Fraction</code>
 * @throws NullPointerException if the object is <code>null</code>
 */"
"public String toProperString() {
    if (toProperString == null) {
        if (numerator == 0) {
            toProperString = ""0"";
        } else if (numerator == denominator) {
            toProperString = ""1"";
        } else if (numerator == -1 * denominator) {
            toProperString = ""-1"";
        } else if ((numerator > 0 ? -numerator : numerator) < -denominator) {
            // note that we do the magnitude comparison test above with
            // NEGATIVE (not positive) numbers, since negative numbers
            // have a larger range.  otherwise numerator==Integer.MIN_VALUE
            // is handled incorrectly.
            int properNumerator = getProperNumerator();
            if (properNumerator == 0) {
                toProperString = Integer.toString(getProperWhole());
            } else {
                toProperString = new StringBuffer(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();
            }
        } else {
            toProperString = new StringBuffer(32).append(getNumerator()).append('/').append(getDenominator()).toString();
        }
    }
    return toProperString;
}","public void test064118() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    fraction0.getDenominator();
    String string0 = fraction0.FOUR_FIFTHS.toProperString();
    assertEquals(""4/5"", string0);
}","/**
 * <p>Gets the fraction as a proper <code>String</code> in the format X Y/Z.</p>
 *
 * <p>The format used in '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>'.
 * If the whole number is zero it will be ommitted. If the numerator is zero,
 * only the whole number is returned.</p>
 *
 * @return a <code>String</code> form of the fraction
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test064119() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    fraction0.getDenominator();
    String string0 = fraction0.FOUR_FIFTHS.toProperString();
    Fraction fraction1 = Fraction.TWO_THIRDS;
    Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
    assertEquals(0.13333334F, fraction2.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test064120() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    fraction0.getDenominator();
    String string0 = fraction0.FOUR_FIFTHS.toProperString();
    Fraction fraction1 = Fraction.TWO_THIRDS;
    Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
    Fraction fraction3 = Fraction.getReducedFraction((-1), (-3569));
    assertEquals(2.801905295601009E-4, fraction3.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test064121() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    fraction0.getDenominator();
    String string0 = fraction0.FOUR_FIFTHS.toProperString();
    Fraction fraction1 = Fraction.TWO_THIRDS;
    Fraction fraction2 = fraction0.FOUR_FIFTHS.subtract(fraction1);
    Fraction fraction3 = Fraction.getReducedFraction((-1), (-3569));
    Fraction fraction4 = Fraction.ONE_QUARTER;
    fraction1.hashCode();
    assertEquals(2, fraction1.getNumerator());
}",""
"// Basics
//-------------------------------------------------------------------
/**
 * <p>Compares this fraction to another object to test if they are equal.</p>.
 *
 * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>
 *
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof Fraction == false) {
        return false;
    }
    Fraction other = (Fraction) obj;
    return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());
}","public void test065122() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(0.0);
    Fraction fraction1 = fraction0.negate();
    boolean boolean0 = fraction0.equals(fraction1);
    assertTrue(boolean0);
}",""
"public int getDenominator() {
    return denominator;
}","public void test065123() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(0.0);
    Fraction fraction1 = fraction0.negate();
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals(1, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test065124() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(0.0);
    Fraction fraction1 = fraction0.negate();
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals(0, fraction1.getNumerator());
}",""
"// Basics
//-------------------------------------------------------------------
/**
 * <p>Compares this fraction to another object to test if they are equal.</p>.
 *
 * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>
 *
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof Fraction == false) {
        return false;
    }
    Fraction other = (Fraction) obj;
    return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());
}","public void test066125() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.ONE_FIFTH;
    boolean boolean0 = fraction0.equals(fraction1);
    assertFalse(fraction1.equals((Object) fraction0));
}",""
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test066126() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.ONE_FIFTH;
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals(1, fraction1.getNumerator());
}",""
"// Basics
//-------------------------------------------------------------------
/**
 * <p>Compares this fraction to another object to test if they are equal.</p>.
 *
 * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>
 *
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof Fraction == false) {
        return false;
    }
    Fraction other = (Fraction) obj;
    return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());
}","public void test066127() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.ONE_FIFTH;
    boolean boolean0 = fraction0.equals(fraction1);
    assertFalse(boolean0);
}",""
"public int getDenominator() {
    return denominator;
}","public void test066128() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.ONE_FIFTH;
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals(5, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Basics
//-------------------------------------------------------------------
/**
 * <p>Compares this fraction to another object to test if they are equal.</p>.
 *
 * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>
 *
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof Fraction == false) {
        return false;
    }
    Fraction other = (Fraction) obj;
    return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());
}","public void test067129() throws Throwable {
    Fraction fraction0 = Fraction.ONE;
    boolean boolean0 = fraction0.equals(""YoWv<"");
    assertFalse(boolean0);
}",""
"// Basics
//-------------------------------------------------------------------
/**
 * <p>Compares this fraction to another object to test if they are equal.</p>.
 *
 * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>
 *
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof Fraction == false) {
        return false;
    }
    Fraction other = (Fraction) obj;
    return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());
}","public void test068130() throws Throwable {
    Fraction fraction0 = Fraction.TWO_THIRDS;
    boolean boolean0 = fraction0.equals(fraction0);
    assertTrue(boolean0);
}",""
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test069131() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals(1.0, fraction0.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test069132() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals(869.6773F, fraction1.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test069133() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
    boolean boolean0 = fraction0.equals(fraction1);
    assertEquals(869, fraction0.getNumerator());
}",""
"// Basics
//-------------------------------------------------------------------
/**
 * <p>Compares this fraction to another object to test if they are equal.</p>.
 *
 * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>
 *
 * @param obj the reference object with which to compare
 * @return <code>true</code> if this object is equal
 */
public boolean equals(Object obj) {
    if (obj == this) {
        return true;
    }
    if (obj instanceof Fraction == false) {
        return false;
    }
    Fraction other = (Fraction) obj;
    return (getNumerator() == other.getNumerator() && getDenominator() == other.getDenominator());
}","public void test069134() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(869, 869);
    Fraction fraction1 = Fraction.getFraction(869, 869, 1283);
    boolean boolean0 = fraction0.equals(fraction1);
    assertFalse(boolean0);
}",""
"public Fraction divideBy(Fraction fraction) {
    if (fraction == null) {
        throw new IllegalArgumentException(""The fraction must not be null"");
    }
    if (fraction.numerator == 0) {
        throw new ArithmeticException(""The fraction to divide by must not be zero"");
    }
    return multiplyBy(fraction.invert());
}","public void test070135() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.ZERO;
    // Undeclared exception!
    try {
        fraction0.divideBy(fraction1);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The fraction to divide by must not be zero
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Divide the value of this fraction by another.</p>
 *
 * @param fraction  the fraction to divide by, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the fraction to divide by is zero
 * @throws ArithmeticException if the resulting numerator or denominator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public Fraction divideBy(Fraction fraction) {
    if (fraction == null) {
        throw new IllegalArgumentException(""The fraction must not be null"");
    }
    if (fraction.numerator == 0) {
        throw new ArithmeticException(""The fraction to divide by must not be zero"");
    }
    return multiplyBy(fraction.invert());
}","public void test071136() throws Throwable {
    Fraction fraction0 = Fraction.ONE_THIRD;
    // Undeclared exception!
    try {
        fraction0.divideBy((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fraction must not be null
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Divide the value of this fraction by another.</p>
 *
 * @param fraction  the fraction to divide by, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the fraction to divide by is zero
 * @throws ArithmeticException if the resulting numerator or denominator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test072137() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = fraction0.ONE.multiplyBy(fraction0);
    assertEquals(0.0F, fraction1.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public int getProperWhole() {
    return numerator / denominator;
}","public void test073138() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = fraction0.divideBy(fraction0);
    assertEquals(0, fraction0.getProperWhole());
}","/**
 * <p>Gets the proper whole part of the fraction.</p>
 *
 * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.
 * This method returns the 1 from the proper fraction.</p>
 *
 * <p>If the fraction is negative such as -7/4, it can be resolved into
 * -1 3/4, so this method returns the positive whole part -1.</p>
 *
 * @return the whole fraction part of a proper fraction, that includes the sign
 */"
"public int getDenominator() {
    return denominator;
}","public void test073139() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = fraction0.divideBy(fraction0);
    int int0 = fraction1.getProperWhole();
    assertEquals(1, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test073140() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = fraction0.divideBy(fraction0);
    int int0 = fraction1.getProperWhole();
    assertEquals(1, fraction1.getNumerator());
}",""
"public int getProperWhole() {
    return numerator / denominator;
}","public void test073141() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = fraction0.divideBy(fraction0);
    int int0 = fraction1.getProperWhole();
    assertEquals(1, int0);
}","/**
 * <p>Gets the proper whole part of the fraction.</p>
 *
 * <p>An improper fraction 7/4 can be resolved into a proper one, 1 3/4.
 * This method returns the 1 from the proper fraction.</p>
 *
 * <p>If the fraction is negative such as -7/4, it can be resolved into
 * -1 3/4, so this method returns the positive whole part -1.</p>
 *
 * @return the whole fraction part of a proper fraction, that includes the sign
 */"
"public Fraction multiplyBy(Fraction fraction) {
    if (fraction == null) {
        throw new IllegalArgumentException(""The fraction must not be null"");
    }
    if (numerator == 0 || fraction.numerator == 0) {
        return ZERO;
    }
    // knuth 4.5.1
    // make sure we don't overflow unless the result *must* overflow.
    int d1 = greatestCommonDivisor(numerator, fraction.denominator);
    int d2 = greatestCommonDivisor(fraction.numerator, denominator);
    return getReducedFraction(mulAndCheck(numerator / d1, fraction.numerator / d2), mulPosAndCheck(denominator / d2, fraction.denominator / d1));
}","public void test074142() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(947.9);
    // Undeclared exception!
    try {
        fraction0.THREE_FIFTHS.multiplyBy((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fraction must not be null
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Multiplies the value of this fraction by another, returning the
 * result in reduced form.</p>
 *
 * @param fraction  the fraction to multiply by, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test075143() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = Fraction.getFraction((-2983.168584589799));
    Fraction fraction2 = fraction0.divideBy(fraction1);
    // Undeclared exception!
    try {
        fraction1.add(fraction2);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: numerator too large after multiply
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public int getDenominator() {
    return denominator;
}","public void test076144() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = Fraction.getReducedFraction(0, (-2590));
    Fraction fraction2 = fraction0.ONE_THIRD.add(fraction1);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test076145() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = Fraction.getReducedFraction(0, (-2590));
    Fraction fraction2 = fraction0.ONE_THIRD.add(fraction1);
    assertEquals(0.3333333333333333, fraction2.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test077146() throws Throwable {
    Fraction fraction0 = Fraction.ZERO;
    Fraction fraction1 = fraction0.add(fraction0);
    assertSame(fraction1, fraction0);
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test078147() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-3.042271021842216));
    Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
    assertEquals((-7341), fraction0.getNumerator());
}",""
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test078148() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-3.042271021842216));
    Fraction fraction1 = fraction0.ZERO.subtract(fraction0);
    assertEquals(3.042271031910485, fraction1.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public Fraction subtract(Fraction fraction) {
    return addSub(fraction, false);
}","public void test079149() throws Throwable {
    Fraction fraction0 = Fraction.ONE_HALF;
    // Undeclared exception!
    try {
        fraction0.subtract((Fraction) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The fraction must not be null
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Subtracts the value of another fraction from the value of this one,
 * returning the result in reduced form.</p>
 *
 * @param fraction  the fraction to subtract, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominator
 *   cannot be represented in an <code>int</code>.
 */"
"public Fraction add(Fraction fraction) {
    return addSub(fraction, true);
}","public void test080150() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(2.147483647E9);
    // Undeclared exception!
    try {
        fraction0.ONE.add(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: add
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Adds the value of this fraction to another, returning the result in reduced form.
 * The algorithm follows Knuth, 4.5.1.</p>
 *
 * @param fraction  the fraction to add, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public Fraction multiplyBy(Fraction fraction) {
    if (fraction == null) {
        throw new IllegalArgumentException(""The fraction must not be null"");
    }
    if (numerator == 0 || fraction.numerator == 0) {
        return ZERO;
    }
    // knuth 4.5.1
    // make sure we don't overflow unless the result *must* overflow.
    int d1 = greatestCommonDivisor(numerator, fraction.denominator);
    int d2 = greatestCommonDivisor(fraction.numerator, denominator);
    return getReducedFraction(mulAndCheck(numerator / d1, fraction.numerator / d2), mulPosAndCheck(denominator / d2, fraction.denominator / d1));
}","public void test081151() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-222751), (-4526));
    Fraction fraction1 = Fraction.getFraction(903031, (-4526));
    // Undeclared exception!
    try {
        fraction1.multiplyBy(fraction0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mul
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Multiplies the value of this fraction by another, returning the
 * result in reduced form.</p>
 *
 * @param fraction  the fraction to multiply by, must not be <code>null</code>
 * @return a <code>Fraction</code> instance with the resulting values
 * @throws IllegalArgumentException if the fraction is <code>null</code>
 * @throws ArithmeticException if the resulting numerator or denominator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public Fraction pow(int power) {
    if (power == 1) {
        return this;
    } else if (power == 0) {
        return ONE;
    } else if (power < 0) {
        if (power == Integer.MIN_VALUE) {
            // MIN_VALUE can't be negated.
            return this.invert().pow(2).pow(-(power / 2));
        }
        return this.invert().pow(-power);
    } else {
        Fraction f = this.multiplyBy(this);
        if ((power % 2) == 0) {
            // if even...
            return f.pow(power / 2);
        } else {
            // if odd...
            return f.pow(power / 2).multiplyBy(this);
        }
    }
}","public void test082152() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    // Undeclared exception!
    try {
        fraction0.TWO_THIRDS.pow(Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mul
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Gets a fraction that is raised to the passed in power.</p>
 *
 * <p>The returned fraction is in reduced form.</p>
 *
 * @param power  the power to raise the fraction to
 * @return <code>this</code> if the power is one, <code>ONE</code> if the power
 * is zero (even if the fraction equals ZERO) or a new fraction instance
 * raised to the appropriate power
 * @throws ArithmeticException if the resulting numerator or denominator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public Fraction pow(int power) {
    if (power == 1) {
        return this;
    } else if (power == 0) {
        return ONE;
    } else if (power < 0) {
        if (power == Integer.MIN_VALUE) {
            // MIN_VALUE can't be negated.
            return this.invert().pow(2).pow(-(power / 2));
        }
        return this.invert().pow(-power);
    } else {
        Fraction f = this.multiplyBy(this);
        if ((power % 2) == 0) {
            // if even...
            return f.pow(power / 2);
        } else {
            // if odd...
            return f.pow(power / 2).multiplyBy(this);
        }
    }
}","public void test083153() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    // Undeclared exception!
    try {
        fraction0.pow(407);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: mulPos
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Gets a fraction that is raised to the passed in power.</p>
 *
 * <p>The returned fraction is in reduced form.</p>
 *
 * @param power  the power to raise the fraction to
 * @return <code>this</code> if the power is one, <code>ONE</code> if the power
 * is zero (even if the fraction equals ZERO) or a new fraction instance
 * raised to the appropriate power
 * @throws ArithmeticException if the resulting numerator or denominator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test084154() throws Throwable {
    Fraction fraction0 = Fraction.THREE_QUARTERS;
    Fraction fraction1 = fraction0.TWO_THIRDS.pow(0);
    assertEquals(1.0F, fraction1.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test085155() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.THREE_FIFTHS.abs();
    assertEquals(0.6F, fraction1.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test086156() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.THREE_FIFTHS.add(fraction0);
    Fraction fraction2 = fraction0.subtract(fraction1);
    Fraction fraction3 = fraction2.abs();
    assertEquals((-3), fraction2.getNumerator());
}",""
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test086157() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.THREE_FIFTHS.add(fraction0);
    Fraction fraction2 = fraction0.subtract(fraction1);
    Fraction fraction3 = fraction2.abs();
    assertEquals(0.6F, fraction3.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public int getDenominator() {
    return denominator;
}","public void test087158() throws Throwable {
    Fraction fraction0 = Fraction.FOUR_FIFTHS;
    Fraction fraction1 = fraction0.THREE_FIFTHS.reduce();
    assertEquals(5, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test088159() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(1416, 1416);
    Fraction fraction1 = fraction0.reduce();
    assertEquals(1, fraction1.getNumerator());
}",""
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test088160() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(1416, 1416);
    Fraction fraction1 = fraction0.reduce();
    assertEquals(1416, fraction0.getNumerator());
}",""
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test089161() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(""3"");
    assertEquals(3.0, fraction0.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test089162() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(""3"");
    assertEquals(3, fraction0.getNumerator());
}",""
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test090163() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(""4/5"");
    assertEquals(0.8F, fraction0.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public int getDenominator() {
    return denominator;
}","public void test090164() throws Throwable {
    Fraction fraction0 = Fraction.getFraction(""4/5"");
    assertEquals(5, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public static Fraction getFraction(String str) {
    if (str == null) {
        throw new IllegalArgumentException(""The string must not be null"");
    }
    // parse double format
    int pos = str.indexOf('.');
    if (pos >= 0) {
        return getFraction(Double.parseDouble(str));
    }
    // parse X Y/Z format
    pos = str.indexOf(' ');
    if (pos > 0) {
        int whole = Integer.parseInt(str.substring(0, pos));
        str = str.substring(pos + 1);
        pos = str.indexOf('/');
        if (pos < 0) {
            throw new NumberFormatException(""The fraction could not be parsed as the format X Y/Z"");
        } else {
            int numer = Integer.parseInt(str.substring(0, pos));
            int denom = Integer.parseInt(str.substring(pos + 1));
            return getFraction(whole, numer, denom);
        }
    }
    // parse Y/Z format
    pos = str.indexOf('/');
    if (pos < 0) {
        // simple whole number
        return getFraction(Integer.parseInt(str), 1);
    } else {
        int numer = Integer.parseInt(str.substring(0, pos));
        int denom = Integer.parseInt(str.substring(pos + 1));
        return getFraction(numer, denom);
    }
}","public void test091165() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction(""U\""(.s>>e#=*>"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
    }
}","/**
 * <p>Creates a Fraction from a <code>String</code>.</p>
 *
 * <p>The formats accepted are:</p>
 *
 * <ol>
 *  <li><code>double</code> String containing a dot</li>
 *  <li>'X Y/Z'</li>
 *  <li>'Y/Z'</li>
 *  <li>'X' (a simple whole number)</li>
 * </ol>
 * and a .</p>
 *
 * @param str  the string to parse, must not be <code>null</code>
 * @return the new <code>Fraction</code> instance
 * @throws IllegalArgumentException if the string is <code>null</code>
 * @throws NumberFormatException if the number format is invalid
 */"
"public static Fraction getFraction(String str) {
    if (str == null) {
        throw new IllegalArgumentException(""The string must not be null"");
    }
    // parse double format
    int pos = str.indexOf('.');
    if (pos >= 0) {
        return getFraction(Double.parseDouble(str));
    }
    // parse X Y/Z format
    pos = str.indexOf(' ');
    if (pos > 0) {
        int whole = Integer.parseInt(str.substring(0, pos));
        str = str.substring(pos + 1);
        pos = str.indexOf('/');
        if (pos < 0) {
            throw new NumberFormatException(""The fraction could not be parsed as the format X Y/Z"");
        } else {
            int numer = Integer.parseInt(str.substring(0, pos));
            int denom = Integer.parseInt(str.substring(pos + 1));
            return getFraction(whole, numer, denom);
        }
    }
    // parse Y/Z format
    pos = str.indexOf('/');
    if (pos < 0) {
        // simple whole number
        return getFraction(Integer.parseInt(str), 1);
    } else {
        int numer = Integer.parseInt(str.substring(0, pos));
        int denom = Integer.parseInt(str.substring(pos + 1));
        return getFraction(numer, denom);
    }
}","public void test092166() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The string must not be null
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a Fraction from a <code>String</code>.</p>
 *
 * <p>The formats accepted are:</p>
 *
 * <ol>
 *  <li><code>double</code> String containing a dot</li>
 *  <li>'X Y/Z'</li>
 *  <li>'Y/Z'</li>
 *  <li>'X' (a simple whole number)</li>
 * </ol>
 * and a .</p>
 *
 * @param str  the string to parse, must not be <code>null</code>
 * @return the new <code>Fraction</code> instance
 * @throws IllegalArgumentException if the string is <code>null</code>
 * @throws NumberFormatException if the number format is invalid
 */"
"public static Fraction getFraction(double value) {
    int sign = (value < 0 ? -1 : 1);
    value = Math.abs(value);
    if (value > Integer.MAX_VALUE || Double.isNaN(value)) {
        throw new ArithmeticException(""The value must not be greater than Integer.MAX_VALUE or NaN"");
    }
    int wholeNumber = (int) value;
    value -= wholeNumber;
    // the pre-previous
    int numer0 = 0;
    // the pre-previous
    int denom0 = 1;
    // the previous
    int numer1 = 1;
    // the previous
    int denom1 = 0;
    // the current, setup in calculation
    int numer2 = 0;
    // the current, setup in calculation
    int denom2 = 0;
    int a1 = (int) value;
    int a2 = 0;
    double x1 = 1;
    double x2 = 0;
    double y1 = value - a1;
    double y2 = 0;
    double delta1, delta2 = Double.MAX_VALUE;
    double fraction;
    int i = 1;
    //        System.out.println(""---"");
    do {
        delta1 = delta2;
        a2 = (int) (x1 / y1);
        x2 = y1;
        y2 = x1 - a2 * y1;
        numer2 = a1 * numer1 + numer0;
        denom2 = a1 * denom1 + denom0;
        fraction = (double) numer2 / (double) denom2;
        delta2 = Math.abs(value - fraction);
        //            System.out.println(numer2 + "" "" + denom2 + "" "" + fraction + "" "" + delta2 + "" "" + y1);
        a1 = a2;
        x1 = x2;
        y1 = y2;
        numer0 = numer1;
        denom0 = denom1;
        numer1 = numer2;
        denom1 = denom2;
        i++;
        //            System.out.println("">>"" + delta1 +"" ""+ delta2+"" ""+(delta1 > delta2)+"" ""+i+"" ""+denom2);
    } while ((delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25));
    if (i == 25) {
        throw new ArithmeticException(""Unable to convert double to fraction"");
    }
    return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);
}","public void test093167() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction(1.7976931348623157E308);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The value must not be greater than Integer.MAX_VALUE or NaN
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a <code>Fraction</code> instance from a <code>double</code> value.</p>
 *
 * <p>This method uses the <a href=""http://archives.math.utk.edu/articles/atuyl/confrac/"">
 *  continued fraction algorithm</a>, computing a maximum of
 *  25 convergents and bounding the denominator by 10,000.</p>
 *
 * @param value  the double value to convert
 * @return a new fraction instance that is close to the value
 * @throws ArithmeticException if <code>|value| > Integer.MAX_VALUE</code>
 *  or <code>value = NaN</code>
 * @throws ArithmeticException if the calculated denominator is <code>zero</code>
 * @throws ArithmeticException if the the algorithm does not converge
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new ArithmeticException(""The denominator must not be zero"");
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new ArithmeticException(""overflow: can't negate"");
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = greatestCommonDivisor(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test094168() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction(Integer.MIN_VALUE, (-1658));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: can't negate
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a reduced <code>Fraction</code> instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>For example, if the input parameters represent 2/4, then the created
 * fraction will be 1/2.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws ArithmeticException if the denominator is <code>zero</code>
 */"
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new ArithmeticException(""The denominator must not be zero"");
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new ArithmeticException(""overflow: can't negate"");
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = greatestCommonDivisor(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test095169() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction((-2275), Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: can't negate
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a reduced <code>Fraction</code> instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>For example, if the input parameters represent 2/4, then the created
 * fraction will be 1/2.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws ArithmeticException if the denominator is <code>zero</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test096170() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
    assertEquals(1.0F, fraction0.floatValue(), 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"// Accessors
//-------------------------------------------------------------------
/**
 * <p>Gets the numerator part of the fraction.</p>
 *
 * <p>This method may return a value greater than the denominator, an
 * improper fraction, such as the seven in 7/4.</p>
 *
 * @return the numerator fraction part
 */
public int getNumerator() {
    return numerator;
}","public void test096171() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
    assertEquals(1, fraction0.getNumerator());
}",""
"public static Fraction getReducedFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new ArithmeticException(""The denominator must not be zero"");
    }
    if (numerator == 0) {
        // normalize zero.
        return ZERO;
    }
    // allow 2^k/-2^31 as a valid fraction (where k>0)
    if (denominator == Integer.MIN_VALUE && (numerator & 1) == 0) {
        numerator /= 2;
        denominator /= 2;
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new ArithmeticException(""overflow: can't negate"");
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    // simplify fraction.
    int gcd = greatestCommonDivisor(numerator, denominator);
    numerator /= gcd;
    denominator /= gcd;
    return new Fraction(numerator, denominator);
}","public void test097172() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getReducedFraction((-1717986917), 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The denominator must not be zero
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a reduced <code>Fraction</code> instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>For example, if the input parameters represent 2/4, then the created
 * fraction will be 1/2.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance, with the numerator and denominator reduced
 * @throws ArithmeticException if the denominator is <code>zero</code>
 */"
"public static Fraction getFraction(int whole, int numerator, int denominator) {
    if (denominator == 0) {
        throw new ArithmeticException(""The denominator must not be zero"");
    }
    if (denominator < 0) {
        throw new ArithmeticException(""The denominator must not be negative"");
    }
    if (numerator < 0) {
        throw new ArithmeticException(""The numerator must not be negative"");
    }
    long numeratorValue;
    if (whole < 0) {
        numeratorValue = whole * (long) denominator - numerator;
    } else {
        numeratorValue = whole * (long) denominator + numerator;
    }
    if (numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE) {
        throw new ArithmeticException(""Numerator too large to represent as an Integer."");
    }
    return new Fraction((int) numeratorValue, denominator);
}","public void test098173() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction(134217728, 65, 5254);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Numerator too large to represent as an Integer.
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a <code>Fraction</code> instance with the 3 parts
 * of a fraction X Y/Z.</p>
 *
 * <p>The negative sign must be passed in on the whole number part.</p>
 *
 * @param whole  the whole number, for example the one in 'one and three sevenths'
 * @param numerator  the numerator, for example the three in 'one and three sevenths'
 * @param denominator  the denominator, for example the seven in 'one and three sevenths'
 * @return a new fraction instance
 * @throws ArithmeticException if the denomiator is <code>zero</code>
 * @throws ArithmeticException if the denominator is negative
 * @throws ArithmeticException if the numerator is negative
 * @throws ArithmeticException if the resulting numerator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public static Fraction getFraction(int whole, int numerator, int denominator) {
    if (denominator == 0) {
        throw new ArithmeticException(""The denominator must not be zero"");
    }
    if (denominator < 0) {
        throw new ArithmeticException(""The denominator must not be negative"");
    }
    if (numerator < 0) {
        throw new ArithmeticException(""The numerator must not be negative"");
    }
    long numeratorValue;
    if (whole < 0) {
        numeratorValue = whole * (long) denominator - numerator;
    } else {
        numeratorValue = whole * (long) denominator + numerator;
    }
    if (numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE) {
        throw new ArithmeticException(""Numerator too large to represent as an Integer."");
    }
    return new Fraction((int) numeratorValue, denominator);
}","public void test099174() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction((-2263), 2146066167, 1514);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // Numerator too large to represent as an Integer.
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a <code>Fraction</code> instance with the 3 parts
 * of a fraction X Y/Z.</p>
 *
 * <p>The negative sign must be passed in on the whole number part.</p>
 *
 * @param whole  the whole number, for example the one in 'one and three sevenths'
 * @param numerator  the numerator, for example the three in 'one and three sevenths'
 * @param denominator  the denominator, for example the seven in 'one and three sevenths'
 * @return a new fraction instance
 * @throws ArithmeticException if the denomiator is <code>zero</code>
 * @throws ArithmeticException if the denominator is negative
 * @throws ArithmeticException if the numerator is negative
 * @throws ArithmeticException if the resulting numerator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public static Fraction getFraction(int whole, int numerator, int denominator) {
    if (denominator == 0) {
        throw new ArithmeticException(""The denominator must not be zero"");
    }
    if (denominator < 0) {
        throw new ArithmeticException(""The denominator must not be negative"");
    }
    if (numerator < 0) {
        throw new ArithmeticException(""The numerator must not be negative"");
    }
    long numeratorValue;
    if (whole < 0) {
        numeratorValue = whole * (long) denominator - numerator;
    } else {
        numeratorValue = whole * (long) denominator + numerator;
    }
    if (numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE) {
        throw new ArithmeticException(""Numerator too large to represent as an Integer."");
    }
    return new Fraction((int) numeratorValue, denominator);
}","public void test100175() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction((-2), (-2), 982);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The numerator must not be negative
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a <code>Fraction</code> instance with the 3 parts
 * of a fraction X Y/Z.</p>
 *
 * <p>The negative sign must be passed in on the whole number part.</p>
 *
 * @param whole  the whole number, for example the one in 'one and three sevenths'
 * @param numerator  the numerator, for example the three in 'one and three sevenths'
 * @param denominator  the denominator, for example the seven in 'one and three sevenths'
 * @return a new fraction instance
 * @throws ArithmeticException if the denomiator is <code>zero</code>
 * @throws ArithmeticException if the denominator is negative
 * @throws ArithmeticException if the numerator is negative
 * @throws ArithmeticException if the resulting numerator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public static Fraction getFraction(int whole, int numerator, int denominator) {
    if (denominator == 0) {
        throw new ArithmeticException(""The denominator must not be zero"");
    }
    if (denominator < 0) {
        throw new ArithmeticException(""The denominator must not be negative"");
    }
    if (numerator < 0) {
        throw new ArithmeticException(""The numerator must not be negative"");
    }
    long numeratorValue;
    if (whole < 0) {
        numeratorValue = whole * (long) denominator - numerator;
    } else {
        numeratorValue = whole * (long) denominator + numerator;
    }
    if (numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE) {
        throw new ArithmeticException(""Numerator too large to represent as an Integer."");
    }
    return new Fraction((int) numeratorValue, denominator);
}","public void test101176() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction((-2590), 2268, (-1));
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The denominator must not be negative
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a <code>Fraction</code> instance with the 3 parts
 * of a fraction X Y/Z.</p>
 *
 * <p>The negative sign must be passed in on the whole number part.</p>
 *
 * @param whole  the whole number, for example the one in 'one and three sevenths'
 * @param numerator  the numerator, for example the three in 'one and three sevenths'
 * @param denominator  the denominator, for example the seven in 'one and three sevenths'
 * @return a new fraction instance
 * @throws ArithmeticException if the denomiator is <code>zero</code>
 * @throws ArithmeticException if the denominator is negative
 * @throws ArithmeticException if the numerator is negative
 * @throws ArithmeticException if the resulting numerator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public static Fraction getFraction(int whole, int numerator, int denominator) {
    if (denominator == 0) {
        throw new ArithmeticException(""The denominator must not be zero"");
    }
    if (denominator < 0) {
        throw new ArithmeticException(""The denominator must not be negative"");
    }
    if (numerator < 0) {
        throw new ArithmeticException(""The numerator must not be negative"");
    }
    long numeratorValue;
    if (whole < 0) {
        numeratorValue = whole * (long) denominator - numerator;
    } else {
        numeratorValue = whole * (long) denominator + numerator;
    }
    if (numeratorValue < Integer.MIN_VALUE || numeratorValue > Integer.MAX_VALUE) {
        throw new ArithmeticException(""Numerator too large to represent as an Integer."");
    }
    return new Fraction((int) numeratorValue, denominator);
}","public void test102177() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction(2819, 2819, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The denominator must not be zero
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a <code>Fraction</code> instance with the 3 parts
 * of a fraction X Y/Z.</p>
 *
 * <p>The negative sign must be passed in on the whole number part.</p>
 *
 * @param whole  the whole number, for example the one in 'one and three sevenths'
 * @param numerator  the numerator, for example the three in 'one and three sevenths'
 * @param denominator  the denominator, for example the seven in 'one and three sevenths'
 * @return a new fraction instance
 * @throws ArithmeticException if the denomiator is <code>zero</code>
 * @throws ArithmeticException if the denominator is negative
 * @throws ArithmeticException if the numerator is negative
 * @throws ArithmeticException if the resulting numerator exceeds
 *  <code>Integer.MAX_VALUE</code>
 */"
"public static Fraction getFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new ArithmeticException(""The denominator must not be zero"");
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new ArithmeticException(""overflow: can't negate"");
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    return new Fraction(numerator, denominator);
}","public void test103178() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction(144, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: can't negate
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a <code>Fraction</code> instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance
 * @throws ArithmeticException if the denomiator is <code>zero</code>
 */"
"public static Fraction getFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new ArithmeticException(""The denominator must not be zero"");
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new ArithmeticException(""overflow: can't negate"");
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    return new Fraction(numerator, denominator);
}","public void test104179() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // overflow: can't negate
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a <code>Fraction</code> instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance
 * @throws ArithmeticException if the denomiator is <code>zero</code>
 */"
"public static Fraction getFraction(int numerator, int denominator) {
    if (denominator == 0) {
        throw new ArithmeticException(""The denominator must not be zero"");
    }
    if (denominator < 0) {
        if (numerator == Integer.MIN_VALUE || denominator == Integer.MIN_VALUE) {
            throw new ArithmeticException(""overflow: can't negate"");
        }
        numerator = -numerator;
        denominator = -denominator;
    }
    return new Fraction(numerator, denominator);
}","public void test105180() throws Throwable {
    // Undeclared exception!
    try {
        Fraction.getFraction(1161, 0);
        fail(""Expecting exception: ArithmeticException"");
    } catch (ArithmeticException e) {
        //
        // The denominator must not be zero
        //
        verifyException(""org.apache.commons.lang.math.Fraction"", e);
    }
}","/**
 * <p>Creates a <code>Fraction</code> instance with the 2 parts
 * of a fraction Y/Z.</p>
 *
 * <p>Any negative signs are resolved to be on the numerator.</p>
 *
 * @param numerator  the numerator, for example the three in 'three sevenths'
 * @param denominator  the denominator, for example the seven in 'three sevenths'
 * @return a new fraction instance
 * @throws ArithmeticException if the denomiator is <code>zero</code>
 */"
"public int getDenominator() {
    return denominator;
}","public void test106181() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.subtract(fraction0);
    assertEquals(1, fraction1.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test106182() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    Fraction fraction1 = fraction0.subtract(fraction0);
    assertEquals(0.0, fraction1.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test107183() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    double double0 = fraction0.doubleValue();
    assertEquals(0.25, double0, 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"// Number methods
//-------------------------------------------------------------------
/**
 * <p>Gets the fraction as an <code>int</code>. This returns the whole number
 * part of the fraction.</p>
 *
 * @return the whole number fraction part
 */
public int intValue() {
    return numerator / denominator;
}","public void test108184() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-3.042271021842216));
    int int0 = fraction0.intValue();
    assertEquals((-3), int0);
}",""
"public int getDenominator() {
    return denominator;
}","public void test108185() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-3.042271021842216));
    int int0 = fraction0.intValue();
    assertEquals(2413, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
"public double doubleValue() {
    return ((double) numerator) / ((double) denominator);
}","public void test108186() throws Throwable {
    Fraction fraction0 = Fraction.getFraction((-3.042271021842216));
    int int0 = fraction0.intValue();
    assertEquals((-3.042271031910485), fraction0.doubleValue(), 0.01);
}","/**
 * <p>Gets the fraction as a <code>double</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>double</code>
 */"
"public float floatValue() {
    return ((float) numerator) / ((float) denominator);
}","public void test109187() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    float float0 = fraction0.floatValue();
    assertEquals(0.25F, float0, 0.01F);
}","/**
 * <p>Gets the fraction as a <code>float</code>. This calculates the fraction
 * as the numerator divided by denominator.</p>
 *
 * @return the fraction as a <code>float</code>
 */"
"public long longValue() {
    return (long) numerator / denominator;
}","public void test110188() throws Throwable {
    Fraction fraction0 = Fraction.ONE_QUARTER;
    long long0 = fraction0.longValue();
    assertEquals(0L, long0);
}","/**
 * <p>Gets the fraction as a <code>long</code>. This returns the whole number
 * part of the fraction.</p>
 *
 * @return the whole number fraction part
 */"
"public String toProperString() {
    if (toProperString == null) {
        if (numerator == 0) {
            toProperString = ""0"";
        } else if (numerator == denominator) {
            toProperString = ""1"";
        } else if (numerator == -1 * denominator) {
            toProperString = ""-1"";
        } else if ((numerator > 0 ? -numerator : numerator) < -denominator) {
            // note that we do the magnitude comparison test above with
            // NEGATIVE (not positive) numbers, since negative numbers
            // have a larger range.  otherwise numerator==Integer.MIN_VALUE
            // is handled incorrectly.
            int properNumerator = getProperNumerator();
            if (properNumerator == 0) {
                toProperString = Integer.toString(getProperWhole());
            } else {
                toProperString = new StringBuffer(32).append(getProperWhole()).append(' ').append(properNumerator).append('/').append(getDenominator()).toString();
            }
        } else {
            toProperString = new StringBuffer(32).append(getNumerator()).append('/').append(getDenominator()).toString();
        }
    }
    return toProperString;
}","public void test111189() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-2590), 17);
    String string0 = fraction0.toProperString();
    assertEquals(""-152 6/17"", string0);
}","/**
 * <p>Gets the fraction as a proper <code>String</code> in the format X Y/Z.</p>
 *
 * <p>The format used in '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>'.
 * If the whole number is zero it will be ommitted. If the numerator is zero,
 * only the whole number is returned.</p>
 *
 * @return a <code>String</code> form of the fraction
 */"
"public int getDenominator() {
    return denominator;
}","public void test111190() throws Throwable {
    Fraction fraction0 = Fraction.getReducedFraction((-2590), 17);
    String string0 = fraction0.toProperString();
    assertEquals(17, fraction0.getDenominator());
}","/**
 * <p>Gets the denominator part of the fraction.</p>
 *
 * @return the denominator fraction part
 */"
