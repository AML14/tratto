focal_method,test_prefix,docstring
"@Override
public int translate(CharSequence input, int index, Writer out) throws IOException {
    // TODO: Protect from ArrayIndexOutOfBounds
    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
        int start = index + 2;
        boolean isHex = false;
        char firstChar = input.charAt(start);
        if (firstChar == 'x' || firstChar == 'X') {
            start++;
            isHex = true;
        }
        int end = start;
        while (input.charAt(end) != ';') {
            end++;
        }
        int entityValue;
        try {
            if (isHex) {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
            } else {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
            }
        } catch (NumberFormatException nfe) {
            return 0;
        }
        out.write(entityValue);
        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
    }
    return 0;
}","public void test00() throws Throwable {
    NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
    StringWriter stringWriter0 = new StringWriter(0);
    char[] charArray0 = new char[2];
    charArray0[0] = '&';
    charArray0[1] = '#';
    stringWriter0.write(charArray0);
    stringWriter0.write(445);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    // Undeclared exception!
    try {
        numericEntityUnescaper0.translate((CharSequence) stringBuffer0, 0, (Writer) stringWriter0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * {@inheritDoc}
 */"
"public final String translate(CharSequence input) {
    if (input == null) {
        return null;
    }
    try {
        // TODO: Make the 2 part of the API???
        StringWriter writer = new StringWriter(input.length() * 2);
        translate(input, writer);
        return writer.toString();
    } catch (IOException ioe) {
        // this should never ever happen while writing to a StringWriter
        throw new RuntimeException(ioe);
    }
}","public void test11() throws Throwable {
    NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
    StringWriter stringWriter0 = new StringWriter();
    StringWriter stringWriter1 = stringWriter0.append('&');
    StringBuffer stringBuffer0 = stringWriter1.getBuffer();
    stringWriter1.append(';');
    String string0 = numericEntityUnescaper0.translate((CharSequence) stringBuffer0);
    assertEquals(""&;"", string0);
}","/**
 * Helper for non-Writer usage.
 * @param input CharSequence to be translated
 * @return String output of translation
 */"
"@Override
public int translate(CharSequence input, int index, Writer out) throws IOException {
    // TODO: Protect from ArrayIndexOutOfBounds
    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
        int start = index + 2;
        boolean isHex = false;
        char firstChar = input.charAt(start);
        if (firstChar == 'x' || firstChar == 'X') {
            start++;
            isHex = true;
        }
        int end = start;
        while (input.charAt(end) != ';') {
            end++;
        }
        int entityValue;
        try {
            if (isHex) {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
            } else {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
            }
        } catch (NumberFormatException nfe) {
            return 0;
        }
        out.write(entityValue);
        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
    }
    return 0;
}","public void test22() throws Throwable {
    NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
    StringWriter stringWriter0 = new StringWriter();
    // Undeclared exception!
    try {
        numericEntityUnescaper0.translate((CharSequence) null, (-179), (Writer) stringWriter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.text.translate.NumericEntityUnescaper"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public int translate(CharSequence input, int index, Writer out) throws IOException {
    // TODO: Protect from ArrayIndexOutOfBounds
    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
        int start = index + 2;
        boolean isHex = false;
        char firstChar = input.charAt(start);
        if (firstChar == 'x' || firstChar == 'X') {
            start++;
            isHex = true;
        }
        int end = start;
        while (input.charAt(end) != ';') {
            end++;
        }
        int entityValue;
        try {
            if (isHex) {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
            } else {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
            }
        } catch (NumberFormatException nfe) {
            return 0;
        }
        out.write(entityValue);
        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
    }
    return 0;
}","public void test33() throws Throwable {
    NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
    char[] charArray0 = new char[9];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    StringWriter stringWriter0 = new StringWriter(59);
    // Undeclared exception!
    try {
        numericEntityUnescaper0.translate((CharSequence) charBuffer0, 59, (Writer) stringWriter0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.Buffer"", e);
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public int translate(CharSequence input, int index, Writer out) throws IOException {
    // TODO: Protect from ArrayIndexOutOfBounds
    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
        int start = index + 2;
        boolean isHex = false;
        char firstChar = input.charAt(start);
        if (firstChar == 'x' || firstChar == 'X') {
            start++;
            isHex = true;
        }
        int end = start;
        while (input.charAt(end) != ';') {
            end++;
        }
        int entityValue;
        try {
            if (isHex) {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
            } else {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
            }
        } catch (NumberFormatException nfe) {
            return 0;
        }
        out.write(entityValue);
        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
    }
    return 0;
}","public void test44() throws Throwable {
    NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
    StringWriter stringWriter0 = new StringWriter(0);
    char[] charArray0 = new char[2];
    charArray0[0] = '&';
    charArray0[1] = '#';
    stringWriter0.write(charArray0);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    stringWriter0.append('X');
    // Undeclared exception!
    try {
        numericEntityUnescaper0.translate((CharSequence) stringBuffer0, 0, (Writer) stringWriter0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * {@inheritDoc}
 */"
"@Override
public int translate(CharSequence input, int index, Writer out) throws IOException {
    // TODO: Protect from ArrayIndexOutOfBounds
    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
        int start = index + 2;
        boolean isHex = false;
        char firstChar = input.charAt(start);
        if (firstChar == 'x' || firstChar == 'X') {
            start++;
            isHex = true;
        }
        int end = start;
        while (input.charAt(end) != ';') {
            end++;
        }
        int entityValue;
        try {
            if (isHex) {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
            } else {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
            }
        } catch (NumberFormatException nfe) {
            return 0;
        }
        out.write(entityValue);
        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
    }
    return 0;
}","public void test55() throws Throwable {
    NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
    StringWriter stringWriter0 = new StringWriter();
    int int0 = numericEntityUnescaper0.translate((CharSequence) ""3B"", 0, (Writer) stringWriter0);
    assertEquals(0, int0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public int translate(CharSequence input, int index, Writer out) throws IOException {
    // TODO: Protect from ArrayIndexOutOfBounds
    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
        int start = index + 2;
        boolean isHex = false;
        char firstChar = input.charAt(start);
        if (firstChar == 'x' || firstChar == 'X') {
            start++;
            isHex = true;
        }
        int end = start;
        while (input.charAt(end) != ';') {
            end++;
        }
        int entityValue;
        try {
            if (isHex) {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
            } else {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
            }
        } catch (NumberFormatException nfe) {
            return 0;
        }
        out.write(entityValue);
        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
    }
    return 0;
}","public void test66() throws Throwable {
    NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
    StringWriter stringWriter0 = new StringWriter();
    CharBuffer charBuffer0 = CharBuffer.allocate(35);
    numericEntityUnescaper0.translate((CharSequence) charBuffer0, (Writer) stringWriter0);
    char[] charArray0 = new char[2];
    charArray0[0] = '&';
    charArray0[1] = '#';
    stringWriter0.write(charArray0);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringWriter stringWriter1 = stringWriter0.append('x');
    stringWriter1.write(""<`eJKt;a|no1-Pzcz9"");
    int int0 = numericEntityUnescaper0.translate((CharSequence) stringBuffer0, 35, (Writer) stringWriter0);
    assertEquals(0, int0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public int translate(CharSequence input, int index, Writer out) throws IOException {
    // TODO: Protect from ArrayIndexOutOfBounds
    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
        int start = index + 2;
        boolean isHex = false;
        char firstChar = input.charAt(start);
        if (firstChar == 'x' || firstChar == 'X') {
            start++;
            isHex = true;
        }
        int end = start;
        while (input.charAt(end) != ';') {
            end++;
        }
        int entityValue;
        try {
            if (isHex) {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
            } else {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
            }
        } catch (NumberFormatException nfe) {
            return 0;
        }
        out.write(entityValue);
        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
    }
    return 0;
}","public void test77() throws Throwable {
    NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
    StringWriter stringWriter0 = new StringWriter();
    char[] charArray0 = new char[9];
    charArray0[0] = '&';
    charArray0[1] = '#';
    charArray0[3] = ';';
    stringWriter0.write(charArray0);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    int int0 = numericEntityUnescaper0.translate((CharSequence) stringBuffer0, 0, (Writer) stringWriter0);
    assertEquals(0, int0);
}","/**
 * {@inheritDoc}
 */"
"@Override
public int translate(CharSequence input, int index, Writer out) throws IOException {
    // TODO: Protect from ArrayIndexOutOfBounds
    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
        int start = index + 2;
        boolean isHex = false;
        char firstChar = input.charAt(start);
        if (firstChar == 'x' || firstChar == 'X') {
            start++;
            isHex = true;
        }
        int end = start;
        while (input.charAt(end) != ';') {
            end++;
        }
        int entityValue;
        try {
            if (isHex) {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
            } else {
                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
            }
        } catch (NumberFormatException nfe) {
            return 0;
        }
        out.write(entityValue);
        return 2 + (end - start) + (isHex ? 1 : 0) + 1;
    }
    return 0;
}","public void test88() throws Throwable {
    NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
    StringWriter stringWriter0 = new StringWriter();
    CharBuffer charBuffer0 = CharBuffer.allocate(35);
    numericEntityUnescaper0.translate((CharSequence) charBuffer0, (Writer) stringWriter0);
    char[] charArray0 = new char[2];
    charArray0[0] = '&';
    stringWriter0.write(charArray0);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    int int0 = numericEntityUnescaper0.translate((CharSequence) stringBuffer0, 35, (Writer) stringWriter0);
    assertEquals(0, int0);
}","/**
 * {@inheritDoc}
 */"
