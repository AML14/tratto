focal_method,test_prefix,docstring
"static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {
    TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);
    String value = cTimeZoneDisplayCache.get(key);
    if (value == null) {
        // This is a very slow call, so cache the results.
        value = tz.getDisplayName(daylight, style, locale);
        String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);
        if (prior != null) {
            value = prior;
        }
    }
    return value;
}","public void test007() throws Throwable {
    Locale locale0 = Locale.forLanguageTag(""'U"");
    // Undeclared exception!
    try {
        FastDatePrinter.getTimeZoneDisplay((TimeZone) null, true, (-2775), locale0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}","/**
 * <p>Gets the time zone display name, using a cache for performance.</p>
 *
 * @param tz  the zone to query
 * @param daylight  true if daylight savings
 * @param style  the style to use {@code TimeZone.LONG} or {@code TimeZone.SHORT}
 * @param locale  the locale to use
 * @return the textual name of the time zone
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test0118() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test0126() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    assertEquals(""M%-<"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test0127() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(Calendar calendar, StringBuffer buf) {
    return applyRules(calendar, buf);
}","public void test0139() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
    StringWriter stringWriter0 = new StringWriter(2);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test0149() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
    StringWriter stringWriter0 = new StringWriter(2);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""M%-<"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test0150() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
    StringWriter stringWriter0 = new StringWriter(2);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test0154() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1258, 0, 1, 9);
    StringWriter stringWriter0 = new StringWriter(2);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58859131860000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=104,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=305,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=9,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test0277() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""ewn|eBElUQ"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""^-zSS]J}30h"", simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: J
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test0391() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, ""~G(z)"");
    Locale locale0 = Locale.ROOT;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""~G(z)"", simpleTimeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test03103() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, ""~G(z)"");
    Locale locale0 = Locale.ROOT;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""~G(z)"", simpleTimeZone0, locale0);
    assertEquals(""~G(z)"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test03104() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, ""~G(z)"");
    Locale locale0 = Locale.ROOT;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""~G(z)"", simpleTimeZone0, locale0);
    assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"protected String parseToken(String pattern, int[] indexRef) {
    StringBuilder buf = new StringBuilder();
    int i = indexRef[0];
    int length = pattern.length();
    char c = pattern.charAt(i);
    if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
        // Scan a run of the same character, which indicates a time
        // pattern.
        buf.append(c);
        while (i + 1 < length) {
            char peek = pattern.charAt(i + 1);
            if (peek == c) {
                buf.append(c);
                i++;
            } else {
                break;
            }
        }
    } else {
        // This will identify token as text.
        buf.append('\'');
        boolean inLiteral = false;
        for (; i < length; i++) {
            c = pattern.charAt(i);
            if (c == '\'') {
                if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
                    // '' is treated as escaped '
                    i++;
                    buf.append(c);
                } else {
                    inLiteral = !inLiteral;
                }
            } else if (!inLiteral && (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {
                i--;
                break;
            } else {
                buf.append(c);
            }
        }
    }
    indexRef[0] = i;
    return buf.toString();
}","public void test03109() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, ""~G(z)"");
    Locale locale0 = Locale.ROOT;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""~G(z)"", simpleTimeZone0, locale0);
    int[] intArray0 = new int[23];
    String string0 = fastDatePrinter0.parseToken(""~AD(GMT+00:00)"", intArray0);
    assertEquals(""'~"", string0);
}","/**
 * <p>Performs the parsing of tokens.</p>
 *
 * @param pattern  the pattern
 * @param indexRef  index references
 * @return parsed token
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test03123() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, ""~G(z)"");
    Locale locale0 = Locale.ROOT;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""~G(z)"", simpleTimeZone0, locale0);
    int[] intArray0 = new int[23];
    String string0 = fastDatePrinter0.parseToken(""~AD(GMT+00:00)"", intArray0);
    assertEquals(""~G(z)"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test03124() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, ""~G(z)"");
    Locale locale0 = Locale.ROOT;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""~G(z)"", simpleTimeZone0, locale0);
    int[] intArray0 = new int[23];
    String string0 = fastDatePrinter0.parseToken(""~AD(GMT+00:00)"", intArray0);
    assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {
    TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);
    String value = cTimeZoneDisplayCache.get(key);
    if (value == null) {
        // This is a very slow call, so cache the results.
        value = tz.getDisplayName(daylight, style, locale);
        String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);
        if (prior != null) {
            value = prior;
        }
    }
    return value;
}","public void test04139() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.MIN;
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.ITALIAN;
    String string0 = FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
    assertEquals(""GMT-18:00"", string0);
}","/**
 * <p>Gets the time zone display name, using a cache for performance.</p>
 *
 * @param tz  the zone to query
 * @param daylight  true if daylight savings
 * @param style  the style to use {@code TimeZone.LONG} or {@code TimeZone.SHORT}
 * @param locale  the locale to use
 * @return the textual name of the time zone
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test05161() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("")"", simpleTimeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test05173() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("")"", simpleTimeZone0, locale0);
    assertEquals(1, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test05174() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("")"", simpleTimeZone0, locale0);
    assertEquals("")"", fastDatePrinter0.getPattern());
}",""
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getTimeZone()
     */
@Override
public TimeZone getTimeZone() {
    return mTimeZone;
}","public void test05179() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("")"", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertNotNull(timeZone0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test05193() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("")"", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertEquals(1, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test05194() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("")"", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertEquals("")"", fastDatePrinter0.getPattern());
}",""
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test05197() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(60000, """");
    Locale locale0 = Locale.TRADITIONAL_CHINESE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("")"", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertEquals(""java.util.SimpleTimeZone[id=,offset=60000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]"", timeZone0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test06217() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), """");
    Locale locale0 = Locale.CANADA_FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test06229() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), """");
    Locale locale0 = Locale.CANADA_FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test06230() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), """");
    Locale locale0 = Locale.CANADA_FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getTimeZone()
     */
@Override
public TimeZone getTimeZone() {
    return mTimeZone;
}","public void test06235() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), """");
    Locale locale0 = Locale.CANADA_FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertNotNull(timeZone0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test06249() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), """");
    Locale locale0 = Locale.CANADA_FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test06250() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), """");
    Locale locale0 = Locale.CANADA_FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test06251() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2775), """");
    Locale locale0 = Locale.CANADA_FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertEquals(""java.util.SimpleTimeZone[id=,offset=-2775,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]"", timeZone0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test07273() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test07285() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    assertEquals(22, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test07286() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    assertEquals(""^-zSS]=}30h"", fastDatePrinter0.getPattern());
}",""
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getTimeZone()
     */
@Override
public TimeZone getTimeZone() {
    return mTimeZone;
}","public void test07291() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertNotNull(timeZone0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test07305() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertEquals(22, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test07306() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertEquals(""^-zSS]=}30h"", fastDatePrinter0.getPattern());
}",""
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test07308() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
    assertEquals(""java.util.SimpleTimeZone[id=^-zSS]=}30h,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]"", timeZone0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test08325() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test08333() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test08334() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test08339() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    String string0 = fastDatePrinter0.getPattern();
    assertEquals("""", string0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test08348() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    String string0 = fastDatePrinter0.getPattern();
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test08349() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    String string0 = fastDatePrinter0.getPattern();
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test09367() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), """");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test09379() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), """");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test09380() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), """");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test09385() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), """");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    int int0 = fastDatePrinter0.getMaxLengthEstimate();
    assertEquals(0, int0);
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test09397() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), """");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    int int0 = fastDatePrinter0.getMaxLengthEstimate();
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test09398() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-347), """");
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    int int0 = fastDatePrinter0.getMaxLengthEstimate();
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test10412() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test10420() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test10421() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(Date date, StringBuffer buf) {
    // hard code GregorianCalendar
    Calendar c = new GregorianCalendar(mTimeZone, mLocale);
    c.setTime(date);
    return applyRules(c, buf);
}","public void test10427() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
    assertNull(stringBuffer0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test10435() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test10436() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test10437() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
    assertEquals(""Fri Feb 14 20:21:21 GMT 2014"", mockDate0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test11450() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""^N},{gz}"");
    Locale locale0 = new Locale("""", ""^N},{gz}"");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test11457() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""^N},{gz}"");
    Locale locale0 = new Locale("""", ""^N},{gz}"");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test11458() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""^N},{gz}"");
    Locale locale0 = new Locale("""", ""^N},{gz}"");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(Date date, StringBuffer buf) {
    // hard code GregorianCalendar
    Calendar c = new GregorianCalendar(mTimeZone, mLocale);
    c.setTime(date);
    return applyRules(c, buf);
}","public void test11467() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""^N},{gz}"");
    Locale locale0 = new Locale("""", ""^N},{gz}"");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test11476() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""^N},{gz}"");
    Locale locale0 = new Locale("""", ""^N},{gz}"");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test11477() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""^N},{gz}"");
    Locale locale0 = new Locale("""", ""^N},{gz}"");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test11478() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""^N},{gz}"");
    Locale locale0 = new Locale("""", ""^N},{gz}"");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""Fri Feb 14 20:21:21 GMT 2014"", mockDate0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test12500() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test12512() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test12513() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date)
     */
@Override
public String format(Date date) {
    // hard code GregorianCalendar
    Calendar c = new GregorianCalendar(mTimeZone, mLocale);
    c.setTime(date);
    return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
}","public void test12521() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    Instant instant0 = MockInstant.now();
    Date date0 = Date.from(instant0);
    String string0 = fastDatePrinter0.format(date0);
    assertEquals("""", string0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test12534() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    Instant instant0 = MockInstant.now();
    Date date0 = Date.from(instant0);
    String string0 = fastDatePrinter0.format(date0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test12535() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    Instant instant0 = MockInstant.now();
    Date date0 = Date.from(instant0);
    String string0 = fastDatePrinter0.format(date0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test13554() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), """");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test13566() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), """");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test13567() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), """");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(Calendar calendar, StringBuffer buf) {
    return applyRules(calendar, buf);
}","public void test13573() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), """");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
    assertNull(stringBuffer0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test13585() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), """");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test13586() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), """");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test13587() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), """");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-914,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]"", mockGregorianCalendar0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(Calendar calendar, StringBuffer buf) {
    return applyRules(calendar, buf);
}","public void test14639() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test14653() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test14654() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test15676() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""fuY*O`i4m^y4"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test15684() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""fuY*O`i4m^y4"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test15685() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""fuY*O`i4m^y4"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar)
     */
@Override
public String format(Calendar calendar) {
    return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
}","public void test15696() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""fuY*O`i4m^y4"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDatePrinter0.format(calendar0);
    assertEquals("""", string0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test15705() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""fuY*O`i4m^y4"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDatePrinter0.format(calendar0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test15706() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""fuY*O`i4m^y4"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance(timeZone0);
    String string0 = fastDatePrinter0.format(calendar0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"// Format methods
//-----------------------------------------------------------------------
/**
 * <p>Formats a {@code Date}, {@code Calendar} or
 * {@code Long} (milliseconds) object.</p>
 *
 * @param obj  the object to format
 * @param toAppendTo  the buffer to append to
 * @param pos  the position - ignored
 * @return the buffer passed in
 */
@Override
public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
    if (obj instanceof Date) {
        return format((Date) obj, toAppendTo);
    } else if (obj instanceof Calendar) {
        return format((Calendar) obj, toAppendTo);
    } else if (obj instanceof Long) {
        return format(((Long) obj).longValue(), toAppendTo);
    } else {
        throw new IllegalArgumentException(""Unknown class: "" + (obj == null ? ""<null>"" : obj.getClass().getName()));
    }
}","public void test16757() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    Instant instant0 = MockInstant.now();
    Date date0 = Date.from(instant0);
    FieldPosition fieldPosition0 = new FieldPosition(0);
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
    assertNotNull(stringBuffer1);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test16771() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    Instant instant0 = MockInstant.now();
    Date date0 = Date.from(instant0);
    FieldPosition fieldPosition0 = new FieldPosition(0);
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test16772() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    Instant instant0 = MockInstant.now();
    Date date0 = Date.from(instant0);
    FieldPosition fieldPosition0 = new FieldPosition(0);
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) date0, stringBuffer0, fieldPosition0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(long, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(long millis, StringBuffer buf) {
    return format(new Date(millis), buf);
}","public void test17809() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
    assertNull(stringBuffer0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test17817() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test17818() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    StringBuffer stringBuffer0 = fastDatePrinter0.format(0L, (StringBuffer) null);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(long, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(long millis, StringBuffer buf) {
    return format(new Date(millis), buf);
}","public void test18857() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
    assertNotNull(stringBuffer1);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test18871() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test18872() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    StringBuffer stringBuffer1 = fastDatePrinter0.format(1L, stringBuffer0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(long)
     */
@Override
public String format(long millis) {
    return format(new Date(millis));
}","public void test19912() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    String string0 = fastDatePrinter0.format((-510L));
    assertEquals("""", string0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test19925() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    String string0 = fastDatePrinter0.format((-510L));
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test19926() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    String string0 = fastDatePrinter0.format((-510L));
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test20938() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", (TimeZone) null, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test20945() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", (TimeZone) null, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test20946() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", (TimeZone) null, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {
    for (Rule rule : mRules) {
        rule.appendTo(buf, calendar);
    }
    return buf;
}","public void test20962() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", (TimeZone) null, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
    assertNull(stringBuffer0);
}","/**
 * <p>Performs the formatting by applying the rules to the
 * specified calendar.</p>
 *
 * @param calendar  the calendar to format
 * @param buf  the buffer to format into
 * @return the specified string buffer
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test20969() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", (TimeZone) null, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test20970() throws Throwable {
    Locale locale0 = Locale.FRANCE;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", (TimeZone) null, locale0);
    Calendar calendar0 = MockCalendar.getInstance(locale0);
    StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {
    for (Rule rule : mRules) {
        rule.appendTo(buf, calendar);
    }
    return buf;
}","public void test211023() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
    assertNotNull(stringBuffer1);
}","/**
 * <p>Performs the formatting by applying the rules to the
 * specified calendar.</p>
 *
 * @param calendar  the calendar to format
 * @param buf  the buffer to format into
 * @return the specified string buffer
 */"
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test211037() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test211038() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule"", 4704, 0, 0, 0, 0, 0, 6, 0);
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(2);
    Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
    StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test221058() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test221065() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test221066() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    assertEquals(""3m"", fastDatePrinter0.getPattern());
}",""
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test221071() throws Throwable {
    Locale locale0 = Locale.ENGLISH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    // Undeclared exception!
    try {
        fastDatePrinter0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test231079() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""?S"", (TimeZone) null, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test231086() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""?S"", (TimeZone) null, locale0);
    assertEquals(""?S"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test231087() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""?S"", (TimeZone) null, locale0);
    assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"protected String parseToken(String pattern, int[] indexRef) {
    StringBuilder buf = new StringBuilder();
    int i = indexRef[0];
    int length = pattern.length();
    char c = pattern.charAt(i);
    if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
        // Scan a run of the same character, which indicates a time
        // pattern.
        buf.append(c);
        while (i + 1 < length) {
            char peek = pattern.charAt(i + 1);
            if (peek == c) {
                buf.append(c);
                i++;
            } else {
                break;
            }
        }
    } else {
        // This will identify token as text.
        buf.append('\'');
        boolean inLiteral = false;
        for (; i < length; i++) {
            c = pattern.charAt(i);
            if (c == '\'') {
                if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
                    // '' is treated as escaped '
                    i++;
                    buf.append(c);
                } else {
                    inLiteral = !inLiteral;
                }
            } else if (!inLiteral && (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {
                i--;
                break;
            } else {
                buf.append(c);
            }
        }
    }
    indexRef[0] = i;
    return buf.toString();
}","public void test231092() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""?S"", (TimeZone) null, locale0);
    int[] intArray0 = new int[8];
    // Undeclared exception!
    try {
        fastDatePrinter0.parseToken("""", intArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * <p>Performs the parsing of tokens.</p>
 *
 * @param pattern  the pattern
 * @param indexRef  index references
 * @return parsed token
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test241106() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = new Locale("""", """", """");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""]"", simpleTimeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test241118() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = new Locale("""", """", """");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""]"", simpleTimeZone0, locale0);
    assertEquals(""]"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test241119() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = new Locale("""", """", """");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""]"", simpleTimeZone0, locale0);
    assertEquals(1, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"protected String parseToken(String pattern, int[] indexRef) {
    StringBuilder buf = new StringBuilder();
    int i = indexRef[0];
    int length = pattern.length();
    char c = pattern.charAt(i);
    if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
        // Scan a run of the same character, which indicates a time
        // pattern.
        buf.append(c);
        while (i + 1 < length) {
            char peek = pattern.charAt(i + 1);
            if (peek == c) {
                buf.append(c);
                i++;
            } else {
                break;
            }
        }
    } else {
        // This will identify token as text.
        buf.append('\'');
        boolean inLiteral = false;
        for (; i < length; i++) {
            c = pattern.charAt(i);
            if (c == '\'') {
                if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
                    // '' is treated as escaped '
                    i++;
                    buf.append(c);
                } else {
                    inLiteral = !inLiteral;
                }
            } else if (!inLiteral && (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {
                i--;
                break;
            } else {
                buf.append(c);
            }
        }
    }
    indexRef[0] = i;
    return buf.toString();
}","public void test241124() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, """");
    Locale locale0 = new Locale("""", """", """");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""]"", simpleTimeZone0, locale0);
    // Undeclared exception!
    try {
        fastDatePrinter0.parseToken(""u^l c4;oYk=9XJG`wd"", (int[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}","/**
 * <p>Performs the parsing of tokens.</p>
 *
 * @param pattern  the pattern
 * @param indexRef  index references
 * @return parsed token
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test251132() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", (TimeZone) null, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test251139() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", (TimeZone) null, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test251140() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", (TimeZone) null, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(Date date, StringBuffer buf) {
    // hard code GregorianCalendar
    Calendar c = new GregorianCalendar(mTimeZone, mLocale);
    c.setTime(date);
    return applyRules(c, buf);
}","public void test251149() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", (TimeZone) null, locale0);
    MockDate mockDate0 = new MockDate();
    StringBuffer stringBuffer0 = new StringBuffer(""FastDatePrinter["");
    // Undeclared exception!
    try {
        fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test261159() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test261167() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test261168() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date)
     */
@Override
public String format(Date date) {
    // hard code GregorianCalendar
    Calendar c = new GregorianCalendar(mTimeZone, mLocale);
    c.setTime(date);
    return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
}","public void test261173() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    // Undeclared exception!
    try {
        fastDatePrinter0.format((Date) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Calendar"", e);
    }
}",""
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(Calendar calendar, StringBuffer buf) {
    return applyRules(calendar, buf);
}","public void test271206() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
    // Undeclared exception!
    try {
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter$StringLiteral"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test281217() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""'U"", timeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test281225() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""'U"", timeZone0, locale0);
    assertEquals(""'U"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test281226() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""'U"", timeZone0, locale0);
    assertEquals(1, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(long, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(long millis, StringBuffer buf) {
    return format(new Date(millis), buf);
}","public void test281231() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""'U"", timeZone0, locale0);
    // Undeclared exception!
    try {
        fastDatePrinter0.format(0L, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test291239() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test291246() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test291247() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    assertEquals(""3m"", fastDatePrinter0.getPattern());
}",""
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(long)
     */
@Override
public String format(long millis) {
    return format(new Date(millis));
}","public void test291252() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    // Undeclared exception!
    try {
        fastDatePrinter0.format((long) 0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {
    for (Rule rule : mRules) {
        rule.appendTo(buf, calendar);
    }
    return buf;
}","public void test301282() throws Throwable {
    ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
    TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""'U"", timeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    // Undeclared exception!
    try {
        fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral"", e);
    }
}","/**
 * <p>Performs the formatting by applying the rules to the
 * specified calendar.</p>
 *
 * @param calendar  the calendar to format
 * @param buf  the buffer to format into
 * @return the specified string buffer
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test311289() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(289, """");
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, (Locale) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {
    TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);
    String value = cTimeZoneDisplayCache.get(key);
    if (value == null) {
        // This is a very slow call, so cache the results.
        value = tz.getDisplayName(daylight, style, locale);
        String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);
        if (prior != null) {
            value = prior;
        }
    }
    return value;
}","public void test321303() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, ""~G(z)"");
    Locale locale0 = Locale.ROOT;
    // Undeclared exception!
    try {
        FastDatePrinter.getTimeZoneDisplay(simpleTimeZone0, true, 84, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal style: 84
        //
        verifyException(""java.util.TimeZone"", e);
    }
}","/**
 * <p>Gets the time zone display name, using a cache for performance.</p>
 *
 * @param tz  the zone to query
 * @param daylight  true if daylight savings
 * @param style  the style to use {@code TimeZone.LONG} or {@code TimeZone.SHORT}
 * @param locale  the locale to use
 * @return the textual name of the time zone
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test331313() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test331321() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test331322() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    assertEquals(""z{Ky"", fastDatePrinter0.getPattern());
}",""
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(Calendar calendar, StringBuffer buf) {
    return applyRules(calendar, buf);
}","public void test331331() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test331341() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test331342() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""z{Ky"", fastDatePrinter0.getPattern());
}",""
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test331346() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-382), 2, 1, (-1), 2);
    StringBuffer stringBuffer0 = new StringBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-74217257880000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=383,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=2,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(Date date, StringBuffer buf) {
    // hard code GregorianCalendar
    Calendar c = new GregorianCalendar(mTimeZone, mLocale);
    c.setTime(date);
    return applyRules(c, buf);
}","public void test341382() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test341392() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""z{Ky"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test341393() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
    assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test341394() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(1473, 0, 120, 1473, 10, 2);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
    assertEquals(""Wed Jun 30 09:10:02 GMT 3373"", mockDate0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Date)
     */
@Override
public String format(Date date) {
    // hard code GregorianCalendar
    Calendar c = new GregorianCalendar(mTimeZone, mLocale);
    c.setTime(date);
    return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
}","public void test351428() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(385, 836, 100);
    String string0 = fastDatePrinter0.format((Date) mockDate0);
    assertEquals(""12%-<"", string0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test351437() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(385, 836, 100);
    String string0 = fastDatePrinter0.format((Date) mockDate0);
    assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test351438() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(385, 836, 100);
    String string0 = fastDatePrinter0.format((Date) mockDate0);
    assertEquals(""M%-<"", fastDatePrinter0.getPattern());
}",""
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test351439() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(385, 836, 100);
    String string0 = fastDatePrinter0.format((Date) mockDate0);
    assertEquals(""Thu Dec 09 00:00:00 GMT 2354"", mockDate0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar)
     */
@Override
public String format(Calendar calendar) {
    return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
}","public void test361469() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""?S"", (TimeZone) null, locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    String string0 = fastDatePrinter0.format(calendar0);
    assertEquals(""?320"", string0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test361477() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""?S"", (TimeZone) null, locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    String string0 = fastDatePrinter0.format(calendar0);
    assertEquals(""?S"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test361478() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""?S"", (TimeZone) null, locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    String string0 = fastDatePrinter0.format(calendar0);
    assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Basics
//-----------------------------------------------------------------------
/**
 * <p>Compares two objects for equality.</p>
 *
 * @param obj  the object to compare to
 * @return {@code true} if equal
 */
@Override
public boolean equals(Object obj) {
    if (obj instanceof FastDatePrinter == false) {
        return false;
    }
    FastDatePrinter other = (FastDatePrinter) obj;
    return mPattern.equals(other.mPattern) && mTimeZone.equals(other.mTimeZone) && mLocale.equals(other.mLocale);
}","public void test371507() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    FastDatePrinter fastDatePrinter1 = new FastDatePrinter(""'U"", (TimeZone) null, locale0);
    assertFalse(fastDatePrinter1.equals((Object) fastDatePrinter0));
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test371508() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    FastDatePrinter fastDatePrinter1 = new FastDatePrinter(""'U"", (TimeZone) null, locale0);
    assertNotNull(fastDatePrinter1);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test371515() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    FastDatePrinter fastDatePrinter1 = new FastDatePrinter(""'U"", (TimeZone) null, locale0);
    assertEquals(""'U"", fastDatePrinter1.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test371516() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    FastDatePrinter fastDatePrinter1 = new FastDatePrinter(""'U"", (TimeZone) null, locale0);
    assertEquals(1, fastDatePrinter1.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Basics
//-----------------------------------------------------------------------
/**
 * <p>Compares two objects for equality.</p>
 *
 * @param obj  the object to compare to
 * @return {@code true} if equal
 */
@Override
public boolean equals(Object obj) {
    if (obj instanceof FastDatePrinter == false) {
        return false;
    }
    FastDatePrinter other = (FastDatePrinter) obj;
    return mPattern.equals(other.mPattern) && mTimeZone.equals(other.mTimeZone) && mLocale.equals(other.mLocale);
}","public void test371521() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    FastDatePrinter fastDatePrinter1 = new FastDatePrinter(""'U"", (TimeZone) null, locale0);
    boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
    assertFalse(boolean0);
}",""
"// Basics
//-----------------------------------------------------------------------
/**
 * <p>Compares two objects for equality.</p>
 *
 * @param obj  the object to compare to
 * @return {@code true} if equal
 */
@Override
public boolean equals(Object obj) {
    if (obj instanceof FastDatePrinter == false) {
        return false;
    }
    FastDatePrinter other = (FastDatePrinter) obj;
    return mPattern.equals(other.mPattern) && mTimeZone.equals(other.mTimeZone) && mLocale.equals(other.mLocale);
}","public void test371522() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    FastDatePrinter fastDatePrinter1 = new FastDatePrinter(""'U"", (TimeZone) null, locale0);
    boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
    assertFalse(fastDatePrinter0.equals((Object) fastDatePrinter1));
}",""
"// Basics
//-----------------------------------------------------------------------
/**
 * <p>Compares two objects for equality.</p>
 *
 * @param obj  the object to compare to
 * @return {@code true} if equal
 */
@Override
public boolean equals(Object obj) {
    if (obj instanceof FastDatePrinter == false) {
        return false;
    }
    FastDatePrinter other = (FastDatePrinter) obj;
    return mPattern.equals(other.mPattern) && mTimeZone.equals(other.mTimeZone) && mLocale.equals(other.mLocale);
}","public void test371523() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    FastDatePrinter fastDatePrinter1 = new FastDatePrinter(""'U"", (TimeZone) null, locale0);
    boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
    assertFalse(fastDatePrinter1.equals((Object) fastDatePrinter0));
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test371532() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    FastDatePrinter fastDatePrinter1 = new FastDatePrinter(""'U"", (TimeZone) null, locale0);
    boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
    assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test371533() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    FastDatePrinter fastDatePrinter1 = new FastDatePrinter(""'U"", (TimeZone) null, locale0);
    boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
    assertEquals(""3m"", fastDatePrinter0.getPattern());
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test371534() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    FastDatePrinter fastDatePrinter1 = new FastDatePrinter(""'U"", (TimeZone) null, locale0);
    boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
    assertEquals(""'U"", fastDatePrinter1.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test371535() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    FastDatePrinter fastDatePrinter1 = new FastDatePrinter(""'U"", (TimeZone) null, locale0);
    boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
    assertEquals(1, fastDatePrinter1.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Basics
//-----------------------------------------------------------------------
/**
 * <p>Compares two objects for equality.</p>
 *
 * @param obj  the object to compare to
 * @return {@code true} if equal
 */
@Override
public boolean equals(Object obj) {
    if (obj instanceof FastDatePrinter == false) {
        return false;
    }
    FastDatePrinter other = (FastDatePrinter) obj;
    return mPattern.equals(other.mPattern) && mTimeZone.equals(other.mTimeZone) && mLocale.equals(other.mLocale);
}","public void test381569() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
    boolean boolean0 = fastDatePrinter0.equals(mockDate0);
    assertFalse(boolean0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test381577() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
    boolean boolean0 = fastDatePrinter0.equals(mockDate0);
    assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test381578() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
    boolean boolean0 = fastDatePrinter0.equals(mockDate0);
    assertEquals(""M%-<"", fastDatePrinter0.getPattern());
}",""
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test381579() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockDate mockDate0 = new MockDate(1258, 884, 0, 0, 0);
    boolean boolean0 = fastDatePrinter0.equals(mockDate0);
    assertEquals(""Sun Aug 31 00:00:00 GMT 3231"", mockDate0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"// Basics
//-----------------------------------------------------------------------
/**
 * <p>Compares two objects for equality.</p>
 *
 * @param obj  the object to compare to
 * @return {@code true} if equal
 */
@Override
public boolean equals(Object obj) {
    if (obj instanceof FastDatePrinter == false) {
        return false;
    }
    FastDatePrinter other = (FastDatePrinter) obj;
    return mPattern.equals(other.mPattern) && mTimeZone.equals(other.mTimeZone) && mLocale.equals(other.mLocale);
}","public void test391604() throws Throwable {
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""3m"", (TimeZone) null, locale0);
    // Undeclared exception!
    try {
        fastDatePrinter0.equals(fastDatePrinter0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test401614() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test401622() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test401623() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Format methods
//-----------------------------------------------------------------------
/**
 * <p>Formats a {@code Date}, {@code Calendar} or
 * {@code Long} (milliseconds) object.</p>
 *
 * @param obj  the object to format
 * @param toAppendTo  the buffer to append to
 * @param pos  the position - ignored
 * @return the buffer passed in
 */
@Override
public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
    if (obj instanceof Date) {
        return format((Date) obj, toAppendTo);
    } else if (obj instanceof Calendar) {
        return format((Calendar) obj, toAppendTo);
    } else if (obj instanceof Long) {
        return format(((Long) obj).longValue(), toAppendTo);
    } else {
        throw new IllegalArgumentException(""Unknown class: "" + (obj == null ? ""<null>"" : obj.getClass().getName()));
    }
}","public void test401634() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ITALIAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    StringWriter stringWriter0 = new StringWriter();
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    // Undeclared exception!
    try {
        fastDatePrinter0.format((Object) null, stringBuffer0, (FieldPosition) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: <null>
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Format methods
//-----------------------------------------------------------------------
/**
 * <p>Formats a {@code Date}, {@code Calendar} or
 * {@code Long} (milliseconds) object.</p>
 *
 * @param obj  the object to format
 * @param toAppendTo  the buffer to append to
 * @param pos  the position - ignored
 * @return the buffer passed in
 */
@Override
public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
    if (obj instanceof Date) {
        return format((Date) obj, toAppendTo);
    } else if (obj instanceof Calendar) {
        return format((Calendar) obj, toAppendTo);
    } else if (obj instanceof Long) {
        return format(((Long) obj).longValue(), toAppendTo);
    } else {
        throw new IllegalArgumentException(""Unknown class: "" + (obj == null ? ""<null>"" : obj.getClass().getName()));
    }
}","public void test411676() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    Long long0 = new Long((-3878L));
    StringBuffer stringBuffer0 = new StringBuffer(""^-zSS]=}30h"");
    FieldPosition fieldPosition0 = new FieldPosition(22);
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertNotNull(stringBuffer1);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test411690() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    Long long0 = new Long((-3878L));
    StringBuffer stringBuffer0 = new StringBuffer(""^-zSS]=}30h"");
    FieldPosition fieldPosition0 = new FieldPosition(22);
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(""^-zSS]=}30h"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test411691() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    Long long0 = new Long((-3878L));
    StringBuffer stringBuffer0 = new StringBuffer(""^-zSS]=}30h"");
    FieldPosition fieldPosition0 = new FieldPosition(22);
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
    assertEquals(22, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Format methods
//-----------------------------------------------------------------------
/**
 * <p>Formats a {@code Date}, {@code Calendar} or
 * {@code Long} (milliseconds) object.</p>
 *
 * @param obj  the object to format
 * @param toAppendTo  the buffer to append to
 * @param pos  the position - ignored
 * @return the buffer passed in
 */
@Override
public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
    if (obj instanceof Date) {
        return format((Date) obj, toAppendTo);
    } else if (obj instanceof Calendar) {
        return format((Calendar) obj, toAppendTo);
    } else if (obj instanceof Long) {
        return format(((Long) obj).longValue(), toAppendTo);
    } else {
        throw new IllegalArgumentException(""Unknown class: "" + (obj == null ? ""<null>"" : obj.getClass().getName()));
    }
}","public void test421741() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), """");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
    FieldPosition fieldPosition0 = new FieldPosition(707);
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
    assertNull(stringBuffer0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test421753() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), """");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
    FieldPosition fieldPosition0 = new FieldPosition(707);
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test421754() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), """");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
    FieldPosition fieldPosition0 = new FieldPosition(707);
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test421755() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-914), """");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", simpleTimeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-914));
    FieldPosition fieldPosition0 = new FieldPosition(707);
    StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-914,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]"", mockGregorianCalendar0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test431775() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    MockDate mockDate0 = new MockDate();
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("">"", (TimeZone) null, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test431782() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    MockDate mockDate0 = new MockDate();
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("">"", (TimeZone) null, locale0);
    assertEquals(1, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test431783() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    MockDate mockDate0 = new MockDate();
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("">"", (TimeZone) null, locale0);
    assertEquals("">"", fastDatePrinter0.getPattern());
}",""
"// Format methods
//-----------------------------------------------------------------------
/**
 * <p>Formats a {@code Date}, {@code Calendar} or
 * {@code Long} (milliseconds) object.</p>
 *
 * @param obj  the object to format
 * @param toAppendTo  the buffer to append to
 * @param pos  the position - ignored
 * @return the buffer passed in
 */
@Override
public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
    if (obj instanceof Date) {
        return format((Date) obj, toAppendTo);
    } else if (obj instanceof Calendar) {
        return format((Calendar) obj, toAppendTo);
    } else if (obj instanceof Long) {
        return format(((Long) obj).longValue(), toAppendTo);
    } else {
        throw new IllegalArgumentException(""Unknown class: "" + (obj == null ? ""<null>"" : obj.getClass().getName()));
    }
}","public void test431795() throws Throwable {
    Locale locale0 = Locale.ITALIAN;
    MockDate mockDate0 = new MockDate();
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("">"", (TimeZone) null, locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "">"");
    Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
    FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 3);
    // Undeclared exception!
    try {
        fastDatePrinter0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test441805() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test441813() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test441814() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Format methods
//-----------------------------------------------------------------------
/**
 * <p>Formats a {@code Date}, {@code Calendar} or
 * {@code Long} (milliseconds) object.</p>
 *
 * @param obj  the object to format
 * @param toAppendTo  the buffer to append to
 * @param pos  the position - ignored
 * @return the buffer passed in
 */
@Override
public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
    if (obj instanceof Date) {
        return format((Date) obj, toAppendTo);
    } else if (obj instanceof Calendar) {
        return format((Calendar) obj, toAppendTo);
    } else if (obj instanceof Long) {
        return format(((Long) obj).longValue(), toAppendTo);
    } else {
        throw new IllegalArgumentException(""Unknown class: "" + (obj == null ? ""<null>"" : obj.getClass().getName()));
    }
}","public void test441827() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer();
    FieldPosition fieldPosition0 = new FieldPosition(2);
    // Undeclared exception!
    try {
        fastDatePrinter0.format((Object) """", stringBuffer0, fieldPosition0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unknown class: java.lang.String
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test451839() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ""|,%v0'?,S*mCuPzXj"");
    Locale locale0 = new Locale(""|,%v0'?,S*mCuPzXj"", ""-])=eJBK;9R%8J$"");
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""|,%v0'?,S*mCuPzXj"", simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: v
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test461853() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-687), ""b' 2Vm5!<!YmV<eU,.K"");
    Locale locale0 = Locale.US;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""1dt4"", simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: t
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test471867() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-707), ""+rANQitww"");
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""+rANQitww"", simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: r
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test481877() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.ROOT;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter("")q%ebV,\""h?2k)_kk0"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: q
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test491891() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), ""org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField"");
    Locale locale0 = Locale.FRANCE;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""pb[xb"", simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: p
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test501905() throws Throwable {
    Locale locale0 = Locale.CANADA;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(416, ""org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField"");
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField"", simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: o
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test511913() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = new Locale(""`yEj]PggJm<c[*}8F"", ""`yEj]PggJm<c[*}8F"", ""|1!k+GRQ"");
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""Dnk2p#XqaR2<{+"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: n
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test521923() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.ITALY;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""luK"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: l
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test531931() throws Throwable {
    Locale locale0 = Locale.GERMANY;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""89#1\""^hDjC"", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: j
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test541941() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.KOREA;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""*d}ih>c"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: i
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test551949() throws Throwable {
    Locale locale0 = new Locale("""");
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""178gYChd)1NS)Tf?<%T"", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: g
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test561959() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""@&^Zk<f$48Dq1"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: f
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test571973() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1597, """");
    Locale locale0 = Locale.PRC;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""cS$R9L.W2Kf.}vrHeBh"", simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: c
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test581987() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""b=dBc"");
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""b=dBc"", simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: b
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test591997() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.JAPANESE;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter("":Mak~{1XvUuYRt-0)%"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: X
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test602007() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""YfB{@C0i5"");
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""YfB{@C0i5"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: Y
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test612017() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""[K8VyOd*8<}eh"");
    Locale locale0 = Locale.CHINESE;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""[K8VyOd*8<}eh"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: V
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test622027() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""|UsJ^|"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: U
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test632033() throws Throwable {
    Locale locale0 = new Locale(""sG`W$T mqh5?y>"", ""org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNumberRule"");
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""sG`W$T mqh5?y>"", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: T
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test642043() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.KOREA;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""h$0[~>RQv}cn4&@*"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: R
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test652052() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = new Locale(""yQgo$_\""/0q;z["");
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""yQgo$_\""/0q;z["", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: Q
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test662062() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""#%&PZyV "", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: P
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test672072() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""{;"");
    Locale locale0 = Locale.PRC;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""HO%A^\""K8ddqa"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: O
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test682086() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-264), ""61[htC{kh/CZ&x+"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""0)7d@9 2zNlqO{F"", simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: N
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test692096() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""L\""7"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: L
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test702104() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""ZwDI2A"", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: I
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test712118() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""HuO_dA7_y"", simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: u
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test722132() throws Throwable {
    Locale locale0 = Locale.UK;
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""29EF:eOm_{2('e3;"");
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""29EF:eOm_{2('e3;"", simpleTimeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: e
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test732142() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""}Dx1HW;"");
    Locale locale0 = Locale.ITALY;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""}Dx1HW;"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: x
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test742152() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone("""");
    Locale locale0 = Locale.JAPAN;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""4C$rsL!{B,pZZ,DVZ"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: C
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test752160() throws Throwable {
    Locale locale0 = Locale.GERMAN;
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""}B'4Q=Hc."", (TimeZone) null, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: B
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test762170() throws Throwable {
    Locale locale0 = Locale.FRENCH;
    TimeZone timeZone0 = TimeZone.getDefault();
    FastDatePrinter fastDatePrinter0 = null;
    try {
        fastDatePrinter0 = new FastDatePrinter(""-AR"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Illegal pattern component: A
        //
        verifyException(""org.apache.commons.lang3.time.FastDatePrinter"", e);
    }
}",""
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test772180() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""'U"");
    Locale locale0 = Locale.TAIWAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""k"", timeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test772188() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""'U"");
    Locale locale0 = Locale.TAIWAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""k"", timeZone0, locale0);
    assertEquals(""k"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test772189() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""'U"");
    Locale locale0 = Locale.TAIWAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""k"", timeZone0, locale0);
    assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(long, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(long millis, StringBuffer buf) {
    return format(new Date(millis), buf);
}","public void test772197() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""'U"");
    Locale locale0 = Locale.TAIWAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""k"", timeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""'U"");
    StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
    assertNotNull(stringBuffer1);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test772207() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""'U"");
    Locale locale0 = Locale.TAIWAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""k"", timeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""'U"");
    StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
    assertEquals(""k"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test772208() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""'U"");
    Locale locale0 = Locale.TAIWAN;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""k"", timeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""'U"");
    StringBuffer stringBuffer1 = fastDatePrinter0.format(0L, stringBuffer0);
    assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {
    for (Rule rule : mRules) {
        rule.appendTo(buf, calendar);
    }
    return buf;
}","public void test782244() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
    assertNotNull(stringBuffer1);
}","/**
 * <p>Performs the formatting by applying the rules to the
 * specified calendar.</p>
 *
 * @param calendar  the calendar to format
 * @param buf  the buffer to format into
 * @return the specified string buffer
 */"
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test782254() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
    assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test782255() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
    assertEquals(""z{Ky"", fastDatePrinter0.getPattern());
}",""
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test782257() throws Throwable {
    TimeZone timeZone0 = TimeZone.getTimeZone(""z{Ky"");
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""z{Ky"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 10, 0);
    StringBuffer stringBuffer0 = new StringBuffer(3);
    StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62046518400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=9,WEEK_OF_YEAR=44,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=304,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(Calendar calendar, StringBuffer buf) {
    return applyRules(calendar, buf);
}","public void test792299() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
    StringWriter stringWriter0 = new StringWriter(2);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertNotNull(stringBuffer1);
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test792309() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
    StringWriter stringWriter0 = new StringWriter(2);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test792310() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
    StringWriter stringWriter0 = new StringWriter(2);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""M%-<"", fastDatePrinter0.getPattern());
}",""
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test792314() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 884, 0, 1, 43);
    StringWriter stringWriter0 = new StringWriter(2);
    StringBuffer stringBuffer0 = stringWriter0.getBuffer();
    StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
    assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-59842707420000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=73,MONTH=7,WEEK_OF_YEAR=36,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=43,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", mockGregorianCalendar0.toString());
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"// Constructor
//-----------------------------------------------------------------------
/**
 * <p>Constructs a new FastDatePrinter.</p>
 *
 * @param pattern  {@link java.text.SimpleDateFormat} compatible pattern
 * @param timeZone  non-null time zone to use
 * @param locale  non-null locale to use
 * @throws NullPointerException if pattern, timeZone, or locale is null.
 */
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
    mPattern = pattern;
    mTimeZone = timeZone;
    mLocale = locale;
    init();
}","public void test802337() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    assertNotNull(fastDatePrinter0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test802349() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    assertEquals(""^-zSS]=}30h"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test802350() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    assertEquals(22, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test802355() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    String string0 = fastDatePrinter0.getPattern();
    assertEquals(""^-zSS]=}30h"", string0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test802368() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    String string0 = fastDatePrinter0.getPattern();
    assertEquals(""^-zSS]=}30h"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test802369() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    String string0 = fastDatePrinter0.getPattern();
    assertEquals(22, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(long, java.lang.StringBuffer)
     */
@Override
public StringBuffer format(long millis, StringBuffer buf) {
    return format(new Date(millis), buf);
}","public void test812408() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(""^-GMT+00:00322]=}308"");
    StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
    assertNotNull(stringBuffer1);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test812422() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(""^-GMT+00:00322]=}308"");
    StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
    assertEquals(""^-zSS]=}30h"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test812423() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    StringBuffer stringBuffer0 = new StringBuffer(""^-GMT+00:00322]=}308"");
    StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
    assertEquals(22, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(long)
     */
@Override
public String format(long millis) {
    return format(new Date(millis));
}","public void test822463() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    String string0 = fastDatePrinter0.format(1080L);
    assertEquals(""^-GMT+00:0080]=}3012"", string0);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test822476() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    String string0 = fastDatePrinter0.format(1080L);
    assertEquals(""^-zSS]=}30h"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test822477() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    String string0 = fastDatePrinter0.format(1080L);
    assertEquals(22, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test832512() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    fastDatePrinter0.hashCode();
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test832513() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    fastDatePrinter0.hashCode();
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"@Override
public int hashCode() {
    return mPattern.hashCode() + 13 * (mTimeZone.hashCode() + 13 * mLocale.hashCode());
}","public void test832514() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CANADA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    fastDatePrinter0.hashCode();
    assertEquals(2, FastDatePrinter.MEDIUM);
}","/**
 * <p>Returns a hashcode compatible with equals.</p>
 *
 * @return a hashcode compatible with equals
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getLocale()
     */
@Override
public Locale getLocale() {
    return mLocale;
}","public void test842541() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    Locale locale1 = fastDatePrinter0.getLocale();
    assertNotNull(locale1);
}",""
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test842551() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    Locale locale1 = fastDatePrinter0.getLocale();
    assertEquals("""", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test842552() throws Throwable {
    TimeZone timeZone0 = TimeZone.getDefault();
    Locale locale0 = Locale.CHINA;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter("""", timeZone0, locale0);
    Locale locale1 = fastDatePrinter0.getLocale();
    assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"@Override
public String toString() {
    return ""FastDatePrinter["" + mPattern + "","" + mLocale + "","" + mTimeZone.getID() + ""]"";
}","public void test852587() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    String string0 = fastDatePrinter0.toString();
    assertEquals(""FastDatePrinter[M%-<,fr,GMT]"", string0);
}","/**
 * <p>Gets a debugging string version of this formatter.</p>
 *
 * @return a debugging string
 */"
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test852596() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    String string0 = fastDatePrinter0.toString();
    assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"// Accessors
//-----------------------------------------------------------------------
/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#getPattern()
     */
@Override
public String getPattern() {
    return mPattern;
}","public void test852597() throws Throwable {
    ZoneId zoneId0 = ZoneId.systemDefault();
    TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
    Locale locale0 = Locale.FRENCH;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""M%-<"", timeZone0, locale0);
    String string0 = fastDatePrinter0.toString();
    assertEquals(""M%-<"", fastDatePrinter0.getPattern());
}",""
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test862602() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ""^-zSS]=}30h"");
    Locale locale0 = Locale.UK;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""^-zSS]=}30h"", simpleTimeZone0, locale0);
    int int0 = fastDatePrinter0.getMaxLengthEstimate();
    assertEquals(22, int0);
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"public int getMaxLengthEstimate() {
    return mMaxLengthEstimate;
}","public void test872603() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, ""~G(z)"");
    Locale locale0 = Locale.ROOT;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""~G(z)"", simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    String string0 = fastDatePrinter0.format(calendar0);
    assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
}","/**
 * <p>Gets an estimate for the maximum string length that the
 * formatter will produce.</p>
 *
 * <p>The actual formatted length will almost always be less than or
 * equal to this amount.</p>
 *
 * @return the maximum formatted length
 */"
"/* (non-Javadoc)
     * @see org.apache.commons.lang3.time.DatePrinter#format(java.util.Calendar)
     */
@Override
public String format(Calendar calendar) {
    return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
}","public void test872604() throws Throwable {
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(80, ""~G(z)"");
    Locale locale0 = Locale.ROOT;
    FastDatePrinter fastDatePrinter0 = new FastDatePrinter(""~G(z)"", simpleTimeZone0, locale0);
    Calendar calendar0 = MockCalendar.getInstance();
    String string0 = fastDatePrinter0.format(calendar0);
    assertEquals(""~AD(GMT+00:00)"", string0);
}",""
