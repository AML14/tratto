focal_method,test_prefix,docstring
"public static int max(int a, final int b, final int c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test0000() throws Throwable {
    int int0 = NumberUtils.max(2710, 2710, 0);
    assertEquals(2710, int0);
}","/**
 * <p>Gets the maximum of three <code>int</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"// 3 param max
//-----------------------------------------------------------------------
/**
 * <p>Gets the maximum of three <code>long</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */
public static long max(long a, final long b, final long c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test0011() throws Throwable {
    long long0 = NumberUtils.max(0L, 0L, (-1L));
    assertEquals(0L, long0);
}",""
"public static byte min(byte a, final byte b, final byte c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test0022() throws Throwable {
    byte byte0 = NumberUtils.min((byte) (-114), (byte) (-72), (byte) (-112));
    assertEquals((byte) (-114), byte0);
}","/**
 * <p>Gets the minimum of three <code>byte</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"public static short min(short a, final short b, final short c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test0033() throws Throwable {
    short short0 = NumberUtils.min((short) 0, (short) 86, (short) 86);
    assertEquals((short) 0, short0);
}","/**
 * <p>Gets the minimum of three <code>short</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"public static int min(int a, final int b, final int c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test0044() throws Throwable {
    int int0 = NumberUtils.min(830, 1951, 1951);
    assertEquals(830, int0);
}","/**
 * <p>Gets the minimum of three <code>int</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"// 3 param min
//-----------------------------------------------------------------------
/**
 * <p>Gets the minimum of three <code>long</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */
public static long min(long a, final long b, final long c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test0055() throws Throwable {
    long long0 = NumberUtils.min((long) 0, (long) (byte) 0, 2021L);
    assertEquals(0L, long0);
}",""
"public static double max(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    double max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (Double.isNaN(array[j])) {
            return Double.NaN;
        }
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test0066() throws Throwable {
    NumberUtils numberUtils0 = new NumberUtils();
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (double) (short) numberUtils0.SHORT_ONE;
    double double0 = NumberUtils.max(doubleArray0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static double min(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    double min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (Double.isNaN(array[i])) {
            return Double.NaN;
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test0077() throws Throwable {
    double[] doubleArray0 = new double[8];
    doubleArray0[0] = (double) (byte) (-112);
    double double0 = NumberUtils.min(doubleArray0);
    assertEquals((-112.0), double0, 0.01);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test0088() throws Throwable {
    try {
        NumberUtils.createNumber(""-"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // - is not a valid number.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}",""
"public static short toShort(final String str, final short defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Short.parseShort(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test0099() throws Throwable {
    short short0 = NumberUtils.toShort(""%.J^M#DI@yl\""o^"", (short) 0);
    assertEquals((short) 0, short0);
}","/**
 * <p>Convert a <code>String</code> to an <code>short</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toShort(null, 1) = 1
 *   NumberUtils.toShort("""", 1)   = 1
 *   NumberUtils.toShort(""1"", 0)  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the short represented by the string, or the default if conversion fails
 * @since 2.5
 */"
"public static long toLong(final String str, final long defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Long.parseLong(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test01010() throws Throwable {
    long long0 = NumberUtils.toLong(""'&;V0%Jd}BE$.w"", (-1L));
    assertEquals((-1L), long0);
}","/**
 * <p>Convert a <code>String</code> to a <code>long</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toLong(null, 1L) = 1L
 *   NumberUtils.toLong("""", 1L)   = 1L
 *   NumberUtils.toLong(""1"", 0L)  = 1L
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the long represented by the string, or the default if conversion fails
 * @since 2.1
 */"
"public static long toLong(final String str) {
    return toLong(str, 0L);
}","public void test01111() throws Throwable {
    long long0 = NumberUtils.toLong(""1"");
    assertEquals(1L, long0);
}","/**
 * <p>Convert a <code>String</code> to a <code>long</code>, returning
 * <code>zero</code> if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>
 *
 * <pre>
 *   NumberUtils.toLong(null) = 0L
 *   NumberUtils.toLong("""")   = 0L
 *   NumberUtils.toLong(""1"")  = 1L
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @return the long represented by the string, or <code>0</code> if
 *  conversion fails
 * @since 2.1
 */"
"public static int toInt(final String str, final int defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Integer.parseInt(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test01212() throws Throwable {
    int int0 = NumberUtils.toInt(""S3rSTSZ=%s"", (int) (byte) 0);
    assertEquals(0, int0);
}","/**
 * <p>Convert a <code>String</code> to an <code>int</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toInt(null, 1) = 1
 *   NumberUtils.toInt("""", 1)   = 1
 *   NumberUtils.toInt(""1"", 0)  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the int represented by the string, or the default if conversion fails
 * @since 2.1
 */"
"public static float toFloat(final String str, final float defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Float.parseFloat(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test01313() throws Throwable {
    float float0 = NumberUtils.toFloat("">^(D`^eJPu@"", (-3172.517F));
    assertEquals((-3172.517F), float0, 0.01F);
}","/**
 * <p>Convert a <code>String</code> to a <code>float</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string <code>str</code> is <code>null</code>, the default
 * value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toFloat(null, 1.1f)   = 1.0f
 *   NumberUtils.toFloat("""", 1.1f)     = 1.1f
 *   NumberUtils.toFloat(""1.5"", 0.0f)  = 1.5f
 * </pre>
 *
 * @param str the string to convert, may be <code>null</code>
 * @param defaultValue the default value
 * @return the float represented by the string, or defaultValue
 *  if conversion fails
 * @since 2.1
 */"
"public static double toDouble(final String str, final double defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Double.parseDouble(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test01414() throws Throwable {
    double double0 = NumberUtils.toDouble("":/C}"", (-2437.57933038));
    assertEquals((-2437.57933038), double0, 0.01);
}","/**
 * <p>Convert a <code>String</code> to a <code>double</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string <code>str</code> is <code>null</code>, the default
 * value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toDouble(null, 1.1d)   = 1.1d
 *   NumberUtils.toDouble("""", 1.1d)     = 1.1d
 *   NumberUtils.toDouble(""1.5"", 0.0d)  = 1.5d
 * </pre>
 *
 * @param str the string to convert, may be <code>null</code>
 * @param defaultValue the default value
 * @return the double represented by the string, or defaultValue
 *  if conversion fails
 * @since 2.1
 */"
"public static byte toByte(final String str, final byte defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Byte.parseByte(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test01515() throws Throwable {
    byte byte0 = NumberUtils.toByte("""", (byte) (-33));
    assertEquals((byte) (-33), byte0);
}","/**
 * <p>Convert a <code>String</code> to a <code>byte</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toByte(null, 1) = 1
 *   NumberUtils.toByte("""", 1)   = 1
 *   NumberUtils.toByte(""1"", 0)  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the byte represented by the string, or the default if conversion fails
 * @since 2.5
 */"
"//-----------------------------------------------------------------------
/**
 * <p>Convert a <code>String</code> to a <code>byte</code>, returning
 * <code>zero</code> if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>
 *
 * <pre>
 *   NumberUtils.toByte(null) = 0
 *   NumberUtils.toByte("""")   = 0
 *   NumberUtils.toByte(""1"")  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @return the byte represented by the string, or <code>zero</code> if
 *  conversion fails
 * @since 2.5
 */
public static byte toByte(final String str) {
    return toByte(str, (byte) 0);
}","public void test01616() throws Throwable {
    byte byte0 = NumberUtils.toByte(""5"");
    assertEquals((byte) 5, byte0);
}",""
"public static short min(final short[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    short min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test01717() throws Throwable {
    short[] shortArray0 = new short[2];
    shortArray0[0] = (short) 10;
    shortArray0[1] = (short) 100;
    short short0 = NumberUtils.min(shortArray0);
    assertEquals((short) 10, short0);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"// Min in array
//--------------------------------------------------------------------
/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */
public static long min(final long[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    long min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test01818() throws Throwable {
    long[] longArray0 = new long[2];
    longArray0[0] = 1L;
    longArray0[1] = 1219L;
    long long0 = NumberUtils.min(longArray0);
    assertEquals(1L, long0);
}",""
"// Min in array
//--------------------------------------------------------------------
/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */
public static long min(final long[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    long min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test01919() throws Throwable {
    long[] longArray0 = new long[8];
    longArray0[1] = (-667L);
    long long0 = NumberUtils.min(longArray0);
    assertEquals((-667L), long0);
}",""
"public static int min(final int[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    int min = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] < min) {
            min = array[j];
        }
    }
    return min;
}","public void test02020() throws Throwable {
    int[] intArray0 = new int[7];
    intArray0[0] = (int) (short) 2022;
    intArray0[1] = (int) (short) 2022;
    intArray0[2] = (int) (short) 2022;
    intArray0[3] = (int) (short) 2022;
    intArray0[4] = (int) (short) 2022;
    intArray0[5] = (int) (short) 2022;
    intArray0[6] = (int) (short) 2022;
    int int0 = NumberUtils.min(intArray0);
    assertEquals(2022, int0);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static float min(final float[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    float min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (Float.isNaN(array[i])) {
            return Float.NaN;
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test02121() throws Throwable {
    float[] floatArray0 = new float[2];
    floatArray0[0] = 2178.5F;
    floatArray0[1] = 1.0F;
    float float0 = NumberUtils.min(floatArray0);
    assertEquals(1.0F, float0, 0.01F);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static float min(final float[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    float min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (Float.isNaN(array[i])) {
            return Float.NaN;
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test02222() throws Throwable {
    NumberUtils numberUtils0 = new NumberUtils();
    float[] floatArray0 = new float[5];
    floatArray0[1] = (float) (long) numberUtils0.LONG_MINUS_ONE;
    float float0 = NumberUtils.min(floatArray0);
    assertEquals((-1.0F), float0, 0.01F);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static double min(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    double min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (Double.isNaN(array[i])) {
            return Double.NaN;
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test02323() throws Throwable {
    double[] doubleArray0 = new double[1];
    doubleArray0[0] = 234.290396090971;
    double double0 = NumberUtils.min(doubleArray0);
    assertEquals(234.290396090971, double0, 0.01);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static byte min(final byte[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    byte min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test02424() throws Throwable {
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 5;
    byte byte0 = NumberUtils.min(byteArray0);
    assertEquals((byte) 5, byte0);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static short min(short a, final short b, final short c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test02525() throws Throwable {
    short short0 = NumberUtils.min((short) 977, (short) (-925), (short) 977);
    assertEquals((short) (-925), short0);
}","/**
 * <p>Gets the minimum of three <code>short</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"// 3 param min
//-----------------------------------------------------------------------
/**
 * <p>Gets the minimum of three <code>long</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */
public static long min(long a, final long b, final long c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test02626() throws Throwable {
    long long0 = NumberUtils.min(1L, 2022L, (long) 97);
    assertEquals(1L, long0);
}",""
"public static float min(final float a, final float b, final float c) {
    return Math.min(Math.min(a, b), c);
}","public void test02727() throws Throwable {
    float float0 = NumberUtils.min((float) (byte) 0, 0.0F, 1.0F);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * <p>Gets the minimum of three <code>float</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 * @see IEEE754rUtils#min(float, float, float) for a version of this method that handles NaN differently
 */"
"public static float min(final float a, final float b, final float c) {
    return Math.min(Math.min(a, b), c);
}","public void test02828() throws Throwable {
    float float0 = NumberUtils.min((-4170.07F), (-4170.07F), 859.0F);
    assertEquals((-4170.07F), float0, 0.01F);
}","/**
 * <p>Gets the minimum of three <code>float</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 * @see IEEE754rUtils#min(float, float, float) for a version of this method that handles NaN differently
 */"
"public static double min(final double a, final double b, final double c) {
    return Math.min(Math.min(a, b), c);
}","public void test02929() throws Throwable {
    double double0 = NumberUtils.min(0.0, 0.0, 1017.3642232835962);
    assertEquals(0.0, double0, 0.01);
}","/**
 * <p>Gets the minimum of three <code>double</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 * @see IEEE754rUtils#min(double, double, double) for a version of this method that handles NaN differently
 */"
"public static double min(final double a, final double b, final double c) {
    return Math.min(Math.min(a, b), c);
}","public void test03030() throws Throwable {
    double double0 = NumberUtils.min(1.3390958350369935, 1.3390958350369935, 1017.3642232835962);
    assertEquals(1.3390958350369935, double0, 0.01);
}","/**
 * <p>Gets the minimum of three <code>double</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 * @see IEEE754rUtils#min(double, double, double) for a version of this method that handles NaN differently
 */"
"public static byte min(byte a, final byte b, final byte c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test03131() throws Throwable {
    byte byte0 = NumberUtils.min((byte) 1, (byte) 1, (byte) 1);
    assertEquals((byte) 1, byte0);
}","/**
 * <p>Gets the minimum of three <code>byte</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"public static short max(final short[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    short max = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}","public void test03232() throws Throwable {
    short[] shortArray0 = new short[9];
    shortArray0[1] = (short) 4112;
    short short0 = NumberUtils.max(shortArray0);
    assertEquals((short) 4112, short0);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static short max(final short[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    short max = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}","public void test03333() throws Throwable {
    short[] shortArray0 = new short[1];
    shortArray0[0] = (short) (-635);
    short short0 = NumberUtils.max(shortArray0);
    assertEquals((short) (-635), short0);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"// Max in array
//--------------------------------------------------------------------
/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */
public static long max(final long[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    long max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test03434() throws Throwable {
    long[] longArray0 = new long[4];
    longArray0[0] = (long) (-2908);
    longArray0[1] = (long) (-2908);
    longArray0[2] = (long) (-2908);
    longArray0[3] = (long) (-2908);
    long long0 = NumberUtils.max(longArray0);
    assertEquals((-2908L), long0);
}",""
"public static int max(final int[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    int max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test03535() throws Throwable {
    int[] intArray0 = new int[5];
    intArray0[0] = (int) (short) 7;
    int int0 = NumberUtils.max(intArray0);
    assertEquals(7, int0);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static int max(final int[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    int max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test03636() throws Throwable {
    int[] intArray0 = new int[1];
    intArray0[0] = (-778);
    int int0 = NumberUtils.max(intArray0);
    assertEquals((-778), int0);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static float max(final float[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    float max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (Float.isNaN(array[j])) {
            return Float.NaN;
        }
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test03737() throws Throwable {
    NumberUtils numberUtils0 = new NumberUtils();
    float[] floatArray0 = new float[5];
    floatArray0[0] = (float) numberUtils0.FLOAT_ONE;
    float float0 = NumberUtils.max(floatArray0);
    assertEquals(1.0F, float0, 0.01F);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static float max(final float[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    float max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (Float.isNaN(array[j])) {
            return Float.NaN;
        }
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test03838() throws Throwable {
    float[] floatArray0 = new float[2];
    floatArray0[0] = (-1.0F);
    floatArray0[1] = (-1.0F);
    float float0 = NumberUtils.max(floatArray0);
    assertEquals((-1.0F), float0, 0.01F);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static double max(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    double max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (Double.isNaN(array[j])) {
            return Double.NaN;
        }
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test03939() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[0] = (double) (short) (-925);
    doubleArray0[1] = (-1.0);
    double double0 = NumberUtils.max(doubleArray0);
    assertEquals((-1.0), double0, 0.01);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static byte max(final byte[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    byte max = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}","public void test04040() throws Throwable {
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) 36;
    byte byte0 = NumberUtils.max(byteArray0);
    assertEquals((byte) 36, byte0);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static byte max(final byte[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    byte max = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}","public void test04141() throws Throwable {
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) (-93);
    byteArray0[1] = (byte) (-93);
    byteArray0[2] = (byte) (-93);
    byteArray0[3] = (byte) (-93);
    byteArray0[4] = (byte) (-93);
    byteArray0[5] = (byte) (-93);
    byteArray0[6] = (byte) (-56);
    byteArray0[7] = (byte) (-93);
    byteArray0[8] = (byte) (-93);
    byte byte0 = NumberUtils.max(byteArray0);
    assertEquals((byte) (-56), byte0);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static short max(short a, final short b, final short c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test04242() throws Throwable {
    short short0 = NumberUtils.max((short) (-1), (short) (-1), (short) 0);
    assertEquals((short) 0, short0);
}","/**
 * <p>Gets the maximum of three <code>short</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"public static short max(short a, final short b, final short c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test04343() throws Throwable {
    short short0 = NumberUtils.max((short) (-4243), (short) (-4243), (short) (-4243));
    assertEquals((short) (-4243), short0);
}","/**
 * <p>Gets the maximum of three <code>short</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"// 3 param max
//-----------------------------------------------------------------------
/**
 * <p>Gets the maximum of three <code>long</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */
public static long max(long a, final long b, final long c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test04444() throws Throwable {
    long long0 = NumberUtils.max((-193L), (-193L), 0L);
    assertEquals(0L, long0);
}",""
"// 3 param max
//-----------------------------------------------------------------------
/**
 * <p>Gets the maximum of three <code>long</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */
public static long max(long a, final long b, final long c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test04545() throws Throwable {
    long long0 = NumberUtils.max((-2574L), (-2574L), (-1L));
    assertEquals((-1L), long0);
}",""
"public static int max(int a, final int b, final int c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test04646() throws Throwable {
    int int0 = NumberUtils.max((int) (byte) (-69), 0, 0);
    assertEquals(0, int0);
}","/**
 * <p>Gets the maximum of three <code>int</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"public static float max(final float a, final float b, final float c) {
    return Math.max(Math.max(a, b), c);
}","public void test04747() throws Throwable {
    float float0 = NumberUtils.max(0.0F, 0.0F, (-3004.806F));
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * <p>Gets the maximum of three <code>float</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 * @see IEEE754rUtils#max(float, float, float) for a version of this method that handles NaN differently
 */"
"public static float max(final float a, final float b, final float c) {
    return Math.max(Math.max(a, b), c);
}","public void test04848() throws Throwable {
    float float0 = NumberUtils.max(0.0F, 1.0F, 0.0F);
    assertEquals(1.0F, float0, 0.01F);
}","/**
 * <p>Gets the maximum of three <code>float</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 * @see IEEE754rUtils#max(float, float, float) for a version of this method that handles NaN differently
 */"
"public static float max(final float a, final float b, final float c) {
    return Math.max(Math.max(a, b), c);
}","public void test04949() throws Throwable {
    float float0 = NumberUtils.max((-1.0F), (-1.0F), (-1.0F));
    assertEquals((-1.0F), float0, 0.01F);
}","/**
 * <p>Gets the maximum of three <code>float</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 * @see IEEE754rUtils#max(float, float, float) for a version of this method that handles NaN differently
 */"
"public static double max(final double a, final double b, final double c) {
    return Math.max(Math.max(a, b), c);
}","public void test05050() throws Throwable {
    double double0 = NumberUtils.max(3834.953739427214, 0.0, 710.875217);
    assertEquals(3834.953739427214, double0, 0.01);
}","/**
 * <p>Gets the maximum of three <code>double</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 * @see IEEE754rUtils#max(double, double, double) for a version of this method that handles NaN differently
 */"
"public static double max(final double a, final double b, final double c) {
    return Math.max(Math.max(a, b), c);
}","public void test05151() throws Throwable {
    double double0 = NumberUtils.max((double) (-1483L), (-5807.7), (-5807.7));
    assertEquals((-1483.0), double0, 0.01);
}","/**
 * <p>Gets the maximum of three <code>double</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 * @see IEEE754rUtils#max(double, double, double) for a version of this method that handles NaN differently
 */"
"public static byte max(byte a, final byte b, final byte c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test05252() throws Throwable {
    byte byte0 = NumberUtils.max((byte) 47, (byte) 0, (byte) 0);
    assertEquals((byte) 47, byte0);
}","/**
 * <p>Gets the maximum of three <code>byte</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"public static byte max(byte a, final byte b, final byte c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test05353() throws Throwable {
    byte byte0 = NumberUtils.max((byte) (-69), (byte) (-69), (byte) (-69));
    assertEquals((byte) (-69), byte0);
}","/**
 * <p>Gets the maximum of three <code>byte</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test05454() throws Throwable {
    Number number0 = NumberUtils.createNumber(""0"");
    assertEquals(0, number0);
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test05555() throws Throwable {
    Number number0 = NumberUtils.createNumber(""4"");
    assertEquals(4, number0);
}",""
"public static Integer createInteger(final String str) {
    if (str == null) {
        return null;
    }
    // decode() handles 0xAABD and 0777 (hex and octal) as well.
    return Integer.decode(str);
}","public void test05656() throws Throwable {
    Integer integer0 = NumberUtils.createInteger(""0"");
    assertEquals(0, (int) integer0);
}","/**
 * <p>Convert a <code>String</code> to a <code>Integer</code>, handling
 * hex and octal notations.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Integer</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"//-----------------------------------------------------------------------
/**
 * <p>Convert a <code>String</code> to a <code>Float</code>.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Float</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Float createFloat(final String str) {
    if (str == null) {
        return null;
    }
    return Float.valueOf(str);
}","public void test05757() throws Throwable {
    Float float0 = NumberUtils.createFloat(""0"");
    assertEquals(0.0F, (float) float0, 0.01F);
}",""
"public static short min(final short[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    short min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test06060() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.min((short[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Array must not be null
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"// Min in array
//--------------------------------------------------------------------
/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */
public static long min(final long[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    long min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test06161() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.min((long[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Array must not be null
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}",""
"public static int min(final int[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    int min = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] < min) {
            min = array[j];
        }
    }
    return min;
}","public void test06262() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.min((int[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Array must not be null
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static float min(final float[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    float min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (Float.isNaN(array[i])) {
            return Float.NaN;
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test06363() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.min((float[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Array must not be null
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static double min(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    double min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (Double.isNaN(array[i])) {
            return Double.NaN;
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test06464() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.min((double[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Array must not be null
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static byte min(final byte[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    byte min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test06565() throws Throwable {
    byte[] byteArray0 = new byte[0];
    // Undeclared exception!
    try {
        NumberUtils.min(byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Array cannot be empty.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static short max(final short[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    short max = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}","public void test06666() throws Throwable {
    short[] shortArray0 = new short[0];
    // Undeclared exception!
    try {
        NumberUtils.max(shortArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Array cannot be empty.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static int max(final int[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    int max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test06767() throws Throwable {
    int[] intArray0 = new int[0];
    // Undeclared exception!
    try {
        NumberUtils.max(intArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Array cannot be empty.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static float max(final float[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    float max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (Float.isNaN(array[j])) {
            return Float.NaN;
        }
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test06868() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.max((float[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Array must not be null
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static double max(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    double max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (Double.isNaN(array[j])) {
            return Double.NaN;
        }
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test06969() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.max((double[]) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // The Array must not be null
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static byte max(final byte[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    byte max = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}","public void test07070() throws Throwable {
    byte[] byteArray0 = new byte[0];
    // Undeclared exception!
    try {
        NumberUtils.max(byteArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Array cannot be empty.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static Long createLong(final String str) {
    if (str == null) {
        return null;
    }
    return Long.decode(str);
}","public void test07171() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.createLong(""&}j>4?g+\""<"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""&}j>4?g+\""<\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}","/**
 * <p>Convert a <code>String</code> to a <code>Long</code>;
 * since 3.1 it handles hex and octal notations.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Long</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"//-----------------------------------------------------------------------
/**
 * <p>Convert a <code>String</code> to a <code>Float</code>.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Float</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Float createFloat(final String str) {
    if (str == null) {
        return null;
    }
    return Float.valueOf(str);
}","public void test07272() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.createFloat(""org.apache.commons.lang3.math.NumberUtils"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
    }
}",""
"public static Double createDouble(final String str) {
    if (str == null) {
        return null;
    }
    return Double.valueOf(str);
}","public void test07373() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.createDouble(""yAG(;w"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
    }
}","/**
 * <p>Convert a <code>String</code> to a <code>Double</code>.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Double</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"//-----------------------------------------------------------------------
/**
 * <p>Checks whether the <code>String</code> contains only
 * digit characters.</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if str contains only Unicode numeric
 */
public static boolean isDigits(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    for (int i = 0; i < str.length(); i++) {
        if (!Character.isDigit(str.charAt(i))) {
            return false;
        }
    }
    return true;
}","public void test07474() throws Throwable {
    boolean boolean0 = NumberUtils.isDigits(""Minimum abbreviation width with offset is 7"");
    assertFalse(boolean0);
}",""
"public static BigDecimal createBigDecimal(final String str) {
    if (str == null) {
        return null;
    }
    // handle JDK1.3.1 bug where """" throws IndexOutOfBoundsException
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    if (str.trim().startsWith(""--"")) {
        // this is protection for poorness in java.lang.BigDecimal.
        // it accepts this as a legal value, but it does not appear
        // to be in specification of class. OS X Java parses it to
        // a wrong value.
        throw new NumberFormatException(str + "" is not a valid number."");
    }
    return new BigDecimal(str);
}","public void test07575() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.createBigDecimal(""1m`JpWR"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}","/**
 * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>BigDecimal</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static BigInteger createBigInteger(final String str) {
    if (str == null) {
        return null;
    }
    // offset within string
    int pos = 0;
    int radix = 10;
    // need to negate later?
    boolean negate = false;
    if (str.startsWith(""-"")) {
        negate = true;
        pos = 1;
    }
    if (str.startsWith(""0x"", pos) || str.startsWith(""0x"", pos)) {
        // hex
        radix = 16;
        pos += 2;
    } else if (str.startsWith(""#"", pos)) {
        // alternative hex (allowed by Long/Integer)
        radix = 16;
        pos++;
    } else if (str.startsWith(""0"", pos) && str.length() > pos + 1) {
        // octal; so long as there are additional digits
        radix = 8;
        pos++;
    }
    // default is to treat as decimal
    final BigInteger value = new BigInteger(str.substring(pos), radix);
    return negate ? value.negate() : value;
}","public void test07676() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.createBigInteger(""Dg`1U"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""Dg`1U\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}","/**
 * <p>Convert a <code>String</code> to a <code>BigInteger</code>;
 * since 3.2 it handles hex (0x or #) and octal (0) notations.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>BigInteger</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static BigInteger createBigInteger(final String str) {
    if (str == null) {
        return null;
    }
    // offset within string
    int pos = 0;
    int radix = 10;
    // need to negate later?
    boolean negate = false;
    if (str.startsWith(""-"")) {
        negate = true;
        pos = 1;
    }
    if (str.startsWith(""0x"", pos) || str.startsWith(""0x"", pos)) {
        // hex
        radix = 16;
        pos += 2;
    } else if (str.startsWith(""#"", pos)) {
        // alternative hex (allowed by Long/Integer)
        radix = 16;
        pos++;
    } else if (str.startsWith(""0"", pos) && str.length() > pos + 1) {
        // octal; so long as there are additional digits
        radix = 8;
        pos++;
    }
    // default is to treat as decimal
    final BigInteger value = new BigInteger(str.substring(pos), radix);
    return negate ? value.negate() : value;
}","public void test07777() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.createBigInteger(""-#"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // Zero length BigInteger
        //
        verifyException(""java.math.BigInteger"", e);
    }
}","/**
 * <p>Convert a <code>String</code> to a <code>BigInteger</code>;
 * since 3.2 it handles hex (0x or #) and octal (0) notations.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>BigInteger</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static Long createLong(final String str) {
    if (str == null) {
        return null;
    }
    return Long.decode(str);
}","public void test07878() throws Throwable {
    Long long0 = NumberUtils.createLong(""-0"");
    assertEquals(0L, (long) long0);
}","/**
 * <p>Convert a <code>String</code> to a <code>Long</code>;
 * since 3.1 it handles hex and octal notations.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Long</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static Integer createInteger(final String str) {
    if (str == null) {
        return null;
    }
    // decode() handles 0xAABD and 0777 (hex and octal) as well.
    return Integer.decode(str);
}","public void test07979() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.createInteger("""");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // Zero length string
        //
        verifyException(""java.lang.Integer"", e);
    }
}","/**
 * <p>Convert a <code>String</code> to a <code>Integer</code>, handling
 * hex and octal notations.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Integer</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static Double createDouble(final String str) {
    if (str == null) {
        return null;
    }
    return Double.valueOf(str);
}","public void test08080() throws Throwable {
    Double double0 = NumberUtils.createDouble(""0"");
    assertEquals(0.0, (double) double0, 0.01);
}","/**
 * <p>Convert a <code>String</code> to a <code>Double</code>.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Double</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"//-----------------------------------------------------------------------
/**
 * <p>Convert a <code>String</code> to a <code>Float</code>.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Float</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Float createFloat(final String str) {
    if (str == null) {
        return null;
    }
    return Float.valueOf(str);
}","public void test08181() throws Throwable {
    Float float0 = NumberUtils.createFloat(""3"");
    assertEquals(3.0F, (float) float0, 0.01F);
}",""
"public static short toShort(final String str, final short defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Short.parseShort(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test08282() throws Throwable {
    short short0 = NumberUtils.toShort(""aW+na=fT}2ru86SS1"", (short) (byte) (-114));
    assertEquals((short) (-114), short0);
}","/**
 * <p>Convert a <code>String</code> to an <code>short</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toShort(null, 1) = 1
 *   NumberUtils.toShort("""", 1)   = 1
 *   NumberUtils.toShort(""1"", 0)  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the short represented by the string, or the default if conversion fails
 * @since 2.5
 */"
"public static byte toByte(final String str, final byte defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Byte.parseByte(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test08383() throws Throwable {
    byte byte0 = NumberUtils.toByte("""", (byte) 0);
    assertEquals((byte) 0, byte0);
}","/**
 * <p>Convert a <code>String</code> to a <code>byte</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toByte(null, 1) = 1
 *   NumberUtils.toByte("""", 1)   = 1
 *   NumberUtils.toByte(""1"", 0)  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the byte represented by the string, or the default if conversion fails
 * @since 2.5
 */"
"public static double toDouble(final String str, final double defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Double.parseDouble(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test08484() throws Throwable {
    double double0 = NumberUtils.toDouble((String) null, (double) (short) 0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * <p>Convert a <code>String</code> to a <code>double</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string <code>str</code> is <code>null</code>, the default
 * value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toDouble(null, 1.1d)   = 1.1d
 *   NumberUtils.toDouble("""", 1.1d)     = 1.1d
 *   NumberUtils.toDouble(""1.5"", 0.0d)  = 1.5d
 * </pre>
 *
 * @param str the string to convert, may be <code>null</code>
 * @param defaultValue the default value
 * @return the double represented by the string, or defaultValue
 *  if conversion fails
 * @since 2.1
 */"
"public static double toDouble(final String str, final double defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Double.parseDouble(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test08585() throws Throwable {
    double double0 = NumberUtils.toDouble(""|=cMEo\n`&r_a/aeEs`"", 1.0);
    assertEquals(1.0, double0, 0.01);
}","/**
 * <p>Convert a <code>String</code> to a <code>double</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string <code>str</code> is <code>null</code>, the default
 * value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toDouble(null, 1.1d)   = 1.1d
 *   NumberUtils.toDouble("""", 1.1d)     = 1.1d
 *   NumberUtils.toDouble(""1.5"", 0.0d)  = 1.5d
 * </pre>
 *
 * @param str the string to convert, may be <code>null</code>
 * @param defaultValue the default value
 * @return the double represented by the string, or defaultValue
 *  if conversion fails
 * @since 2.1
 */"
"public static float toFloat(final String str, final float defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Float.parseFloat(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test08686() throws Throwable {
    float float0 = NumberUtils.toFloat((String) null, 354.7F);
    assertEquals(354.7F, float0, 0.01F);
}","/**
 * <p>Convert a <code>String</code> to a <code>float</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string <code>str</code> is <code>null</code>, the default
 * value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toFloat(null, 1.1f)   = 1.0f
 *   NumberUtils.toFloat("""", 1.1f)     = 1.1f
 *   NumberUtils.toFloat(""1.5"", 0.0f)  = 1.5f
 * </pre>
 *
 * @param str the string to convert, may be <code>null</code>
 * @param defaultValue the default value
 * @return the float represented by the string, or defaultValue
 *  if conversion fails
 * @since 2.1
 */"
"public static float toFloat(final String str, final float defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Float.parseFloat(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test08787() throws Throwable {
    float float0 = NumberUtils.toFloat("""", (float) (byte) 0);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * <p>Convert a <code>String</code> to a <code>float</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string <code>str</code> is <code>null</code>, the default
 * value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toFloat(null, 1.1f)   = 1.0f
 *   NumberUtils.toFloat("""", 1.1f)     = 1.1f
 *   NumberUtils.toFloat(""1.5"", 0.0f)  = 1.5f
 * </pre>
 *
 * @param str the string to convert, may be <code>null</code>
 * @param defaultValue the default value
 * @return the float represented by the string, or defaultValue
 *  if conversion fails
 * @since 2.1
 */"
"public static long toLong(final String str, final long defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Long.parseLong(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test08888() throws Throwable {
    long long0 = NumberUtils.toLong(""kxuF%msTz5kUs"", 0L);
    assertEquals(0L, long0);
}","/**
 * <p>Convert a <code>String</code> to a <code>long</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toLong(null, 1L) = 1L
 *   NumberUtils.toLong("""", 1L)   = 1L
 *   NumberUtils.toLong(""1"", 0L)  = 1L
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the long represented by the string, or the default if conversion fails
 * @since 2.1
 */"
"public static int toInt(final String str, final int defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Integer.parseInt(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test08989() throws Throwable {
    int int0 = NumberUtils.toInt(""Minimum abbreviation width with offset is 7"", (-2908));
    assertEquals((-2908), int0);
}","/**
 * <p>Convert a <code>String</code> to an <code>int</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toInt(null, 1) = 1
 *   NumberUtils.toInt("""", 1)   = 1
 *   NumberUtils.toInt(""1"", 0)  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the int represented by the string, or the default if conversion fails
 * @since 2.1
 */"
"public static int toInt(final String str, final int defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Integer.parseInt(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test09090() throws Throwable {
    int int0 = NumberUtils.toInt((String) null, (int) (short) 4262);
    assertEquals(4262, int0);
}","/**
 * <p>Convert a <code>String</code> to an <code>int</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toInt(null, 1) = 1
 *   NumberUtils.toInt("""", 1)   = 1
 *   NumberUtils.toInt(""1"", 0)  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the int represented by the string, or the default if conversion fails
 * @since 2.1
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test09191() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""L"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test09292() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""E"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test09393() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""0"");
    assertTrue(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test09494() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""#"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test09595() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""00-0Xy()0 zlKQ5pSY%0"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test09696() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""+ZDV"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test09797() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""e+:Vr_,Dq"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test09898() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""-"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test09999() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""0xA blank string is not a valid number"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test100100() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""-0x"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test101101() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""0x0XI7"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test102102() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""F"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test103103() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""-0Xy()0 zlKQ5pSY%0"");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test104104() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber((String) null);
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"public static boolean isNumber(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    final char[] chars = str.toCharArray();
    int sz = chars.length;
    boolean hasExp = false;
    boolean hasDecPoint = false;
    boolean allowSigns = false;
    boolean foundDigit = false;
    // deal with any possible sign up front
    final int start = (chars[0] == '-') ? 1 : 0;
    if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x') {
        int i = start + 2;
        if (i == sz) {
            // str == ""0x""
            return false;
        }
        // checking hex (it can't be anything else)
        for (; i < chars.length; i++) {
            if ((chars[i] < '0' || chars[i] > '9') && (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) {
                return false;
            }
        }
        return true;
    }
    // don't want to loop to the last char, check it afterwords
    sz--;
    // for type qualifiers
    int i = start;
    // loop to the next to last char or to the last char if we need another digit to
    // make a valid number (e.g. chars[0..5] = ""1234E"")
    while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            foundDigit = true;
            allowSigns = false;
        } else if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            hasDecPoint = true;
        } else if (chars[i] == 'e' || chars[i] == 'E') {
            // we've already taken care of hex.
            if (hasExp) {
                // two E's
                return false;
            }
            if (!foundDigit) {
                return false;
            }
            hasExp = true;
            allowSigns = true;
        } else if (chars[i] == '+' || chars[i] == '-') {
            if (!allowSigns) {
                return false;
            }
            allowSigns = false;
            // we need a digit after the E
            foundDigit = false;
        } else {
            return false;
        }
        i++;
    }
    if (i < chars.length) {
        if (chars[i] >= '0' && chars[i] <= '9') {
            // no type qualifier, OK
            return true;
        }
        if (chars[i] == 'e' || chars[i] == 'E') {
            // can't have an E at the last byte
            return false;
        }
        if (chars[i] == '.') {
            if (hasDecPoint || hasExp) {
                // two decimal points or dec in exponent
                return false;
            }
            // single trailing decimal point after non-exponent is ok
            return foundDigit;
        }
        if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f' || chars[i] == 'F')) {
            return foundDigit;
        }
        if (chars[i] == 'l' || chars[i] == 'L') {
            // not allowing L with an exponent or decimal point
            return foundDigit && !hasExp && !hasDecPoint;
        }
        // last character is illegal
        return false;
    }
    // allowSigns is true iff the val ends in 'E'
    // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass
    return !allowSigns && foundDigit;
}","public void test105105() throws Throwable {
    boolean boolean0 = NumberUtils.isNumber(""..."");
    assertFalse(boolean0);
}","/**
 * <p>Checks whether the String a valid Java number.</p>
 *
 * <p>Valid numbers include hexadecimal marked with the <code>0x</code>
 * qualifier, scientific notation and numbers marked with a type
 * qualifier (e.g. 123L).</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if the string is a correctly formatted number
 */"
"//-----------------------------------------------------------------------
/**
 * <p>Checks whether the <code>String</code> contains only
 * digit characters.</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if str contains only Unicode numeric
 */
public static boolean isDigits(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    for (int i = 0; i < str.length(); i++) {
        if (!Character.isDigit(str.charAt(i))) {
            return false;
        }
    }
    return true;
}","public void test106106() throws Throwable {
    boolean boolean0 = NumberUtils.isDigits(""0"");
    assertTrue(boolean0);
}",""
"//-----------------------------------------------------------------------
/**
 * <p>Checks whether the <code>String</code> contains only
 * digit characters.</p>
 *
 * <p><code>Null</code> and empty String will return
 * <code>false</code>.</p>
 *
 * @param str  the <code>String</code> to check
 * @return <code>true</code> if str contains only Unicode numeric
 */
public static boolean isDigits(final String str) {
    if (StringUtils.isEmpty(str)) {
        return false;
    }
    for (int i = 0; i < str.length(); i++) {
        if (!Character.isDigit(str.charAt(i))) {
            return false;
        }
    }
    return true;
}","public void test107107() throws Throwable {
    boolean boolean0 = NumberUtils.isDigits("""");
    assertFalse(boolean0);
}",""
"public static byte max(byte a, final byte b, final byte c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test108108() throws Throwable {
    byte byte0 = NumberUtils.max((byte) (-76), (byte) (-35), (byte) 0);
    assertEquals((byte) 0, byte0);
}","/**
 * <p>Gets the maximum of three <code>byte</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"public static short max(short a, final short b, final short c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test109109() throws Throwable {
    short short0 = NumberUtils.max((short) (byte) 8, (short) (byte) 8, (short) 1960);
    assertEquals((short) 1960, short0);
}","/**
 * <p>Gets the maximum of three <code>short</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"public static short max(short a, final short b, final short c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test110110() throws Throwable {
    short short0 = NumberUtils.max((short) 0, (short) 76, (short) (-1));
    assertEquals((short) 76, short0);
}","/**
 * <p>Gets the maximum of three <code>short</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"public static short max(short a, final short b, final short c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test111111() throws Throwable {
    short short0 = NumberUtils.max((short) 2004, (short) (byte) 0, (short) 341);
    assertEquals((short) 2004, short0);
}","/**
 * <p>Gets the maximum of three <code>short</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"public static int max(int a, final int b, final int c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test112112() throws Throwable {
    int int0 = NumberUtils.max((int) (byte) 1, 0, 920);
    assertEquals(920, int0);
}","/**
 * <p>Gets the maximum of three <code>int</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"public static int max(int a, final int b, final int c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test113113() throws Throwable {
    int int0 = NumberUtils.max((-1429), (int) (byte) (-6), (int) (byte) (-6));
    assertEquals((-6), int0);
}","/**
 * <p>Gets the maximum of three <code>int</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */"
"// 3 param max
//-----------------------------------------------------------------------
/**
 * <p>Gets the maximum of three <code>long</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */
public static long max(long a, final long b, final long c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test114114() throws Throwable {
    long long0 = NumberUtils.max((-603L), 0L, 1208L);
    assertEquals(1208L, long0);
}",""
"// 3 param max
//-----------------------------------------------------------------------
/**
 * <p>Gets the maximum of three <code>long</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 */
public static long max(long a, final long b, final long c) {
    if (b > a) {
        a = b;
    }
    if (c > a) {
        a = c;
    }
    return a;
}","public void test115115() throws Throwable {
    NumberUtils numberUtils0 = new NumberUtils();
    long long0 = NumberUtils.max((long) numberUtils0.SHORT_ONE, 0L, (long) numberUtils0.BYTE_ONE);
    assertEquals(1L, long0);
}",""
"public static byte min(byte a, final byte b, final byte c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test116116() throws Throwable {
    byte byte0 = NumberUtils.min((byte) 0, (byte) 36, (byte) 0);
    assertEquals((byte) 0, byte0);
}","/**
 * <p>Gets the minimum of three <code>byte</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"public static byte min(byte a, final byte b, final byte c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test117117() throws Throwable {
    byte byte0 = NumberUtils.min((byte) 86, (byte) 76, (byte) (-107));
    assertEquals((byte) (-107), byte0);
}","/**
 * <p>Gets the minimum of three <code>byte</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"public static short min(short a, final short b, final short c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test118118() throws Throwable {
    short short0 = NumberUtils.min((short) (byte) 26, (short) (byte) 8, (short) 0);
    assertEquals((short) 0, short0);
}","/**
 * <p>Gets the minimum of three <code>short</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"public static short min(short a, final short b, final short c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test119119() throws Throwable {
    short short0 = NumberUtils.min((short) 97, (short) 97, (short) 97);
    assertEquals((short) 97, short0);
}","/**
 * <p>Gets the minimum of three <code>short</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"public static int min(int a, final int b, final int c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test120120() throws Throwable {
    int int0 = NumberUtils.min(108, 102, 43);
    assertEquals(43, int0);
}","/**
 * <p>Gets the minimum of three <code>int</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"public static int min(int a, final int b, final int c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test121121() throws Throwable {
    int int0 = NumberUtils.min(0, (-2303), (-2303));
    assertEquals((-2303), int0);
}","/**
 * <p>Gets the minimum of three <code>int</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"public static int min(int a, final int b, final int c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test122122() throws Throwable {
    int int0 = NumberUtils.min(0, 0, 1191);
    assertEquals(0, int0);
}","/**
 * <p>Gets the minimum of three <code>int</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */"
"// 3 param min
//-----------------------------------------------------------------------
/**
 * <p>Gets the minimum of three <code>long</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */
public static long min(long a, final long b, final long c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test123123() throws Throwable {
    long long0 = NumberUtils.min(0L, 42L, (-5670L));
    assertEquals((-5670L), long0);
}",""
"// 3 param min
//-----------------------------------------------------------------------
/**
 * <p>Gets the minimum of three <code>long</code> values.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 */
public static long min(long a, final long b, final long c) {
    if (b < a) {
        a = b;
    }
    if (c < a) {
        a = c;
    }
    return a;
}","public void test124124() throws Throwable {
    long long0 = NumberUtils.min((long) (byte) 36, (long) (byte) 0, (long) (byte) 0);
    assertEquals(0L, long0);
}",""
"// Max in array
//--------------------------------------------------------------------
/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */
public static long max(final long[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    long max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test125125() throws Throwable {
    long[] longArray0 = new long[0];
    // Undeclared exception!
    try {
        NumberUtils.max(longArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Array cannot be empty.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}",""
"public static float max(final float[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    float max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (Float.isNaN(array[j])) {
            return Float.NaN;
        }
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test126126() throws Throwable {
    NumberUtils numberUtils0 = new NumberUtils();
    float[] floatArray0 = new float[7];
    floatArray0[0] = (float) (byte) numberUtils0.BYTE_MINUS_ONE;
    float float0 = NumberUtils.max(floatArray0);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static float max(final float[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    float max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (Float.isNaN(array[j])) {
            return Float.NaN;
        }
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test127127() throws Throwable {
    float[] floatArray0 = new float[5];
    floatArray0[2] = Float.NaN;
    float float0 = NumberUtils.max(floatArray0);
    assertEquals(Float.NaN, float0, 0.01F);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static double max(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    double max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (Double.isNaN(array[j])) {
            return Double.NaN;
        }
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test128128() throws Throwable {
    double[] doubleArray0 = new double[5];
    doubleArray0[4] = (double) 1826L;
    double double0 = NumberUtils.max(doubleArray0);
    assertEquals(1826.0, double0, 0.01);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static double max(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    double max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (Double.isNaN(array[j])) {
            return Double.NaN;
        }
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test129129() throws Throwable {
    double[] doubleArray0 = new double[4];
    doubleArray0[1] = Double.NaN;
    double double0 = NumberUtils.max(doubleArray0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static double max(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    double max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (Double.isNaN(array[j])) {
            return Double.NaN;
        }
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test130130() throws Throwable {
    double[] doubleArray0 = new double[5];
    double double0 = NumberUtils.max(doubleArray0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#max(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static byte max(final byte[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    byte max = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}","public void test131131() throws Throwable {
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) (-9);
    byte byte0 = NumberUtils.max(byteArray0);
    assertEquals((byte) 0, byte0);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static short max(final short[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    short max = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] > max) {
            max = array[i];
        }
    }
    return max;
}","public void test132132() throws Throwable {
    short[] shortArray0 = new short[9];
    shortArray0[0] = (short) (-1633);
    short short0 = NumberUtils.max(shortArray0);
    assertEquals((short) 0, short0);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static int max(final int[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    int max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test133133() throws Throwable {
    int[] intArray0 = new int[5];
    intArray0[0] = (int) (short) (-525);
    int int0 = NumberUtils.max(intArray0);
    assertEquals(0, int0);
}","/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"// Max in array
//--------------------------------------------------------------------
/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */
public static long max(final long[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    long max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test134134() throws Throwable {
    long[] longArray0 = new long[9];
    longArray0[4] = (long) (short) 1745;
    long long0 = NumberUtils.max(longArray0);
    assertEquals(1745L, long0);
}",""
"// Max in array
//--------------------------------------------------------------------
/**
 * <p>Returns the maximum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */
public static long max(final long[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns max
    long max = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] > max) {
            max = array[j];
        }
    }
    return max;
}","public void test135135() throws Throwable {
    long[] longArray0 = new long[3];
    long long0 = NumberUtils.max(longArray0);
    assertEquals(0L, long0);
}",""
"public static float min(final float[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    float min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (Float.isNaN(array[i])) {
            return Float.NaN;
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test136136() throws Throwable {
    NumberUtils numberUtils0 = new NumberUtils();
    float[] floatArray0 = new float[5];
    floatArray0[0] = (float) numberUtils0.FLOAT_ONE;
    float float0 = NumberUtils.min(floatArray0);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static float min(final float[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    float min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (Float.isNaN(array[i])) {
            return Float.NaN;
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test137137() throws Throwable {
    float[] floatArray0 = new float[7];
    floatArray0[5] = Float.NaN;
    float float0 = NumberUtils.min(floatArray0);
    assertEquals(Float.NaN, float0, 0.01F);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(float[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static double min(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    double min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (Double.isNaN(array[i])) {
            return Double.NaN;
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test138138() throws Throwable {
    double[] doubleArray0 = new double[2];
    doubleArray0[1] = (-4669.898016848041);
    double double0 = NumberUtils.min(doubleArray0);
    assertEquals((-4669.898016848041), double0, 0.01);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static double min(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    double min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (Double.isNaN(array[i])) {
            return Double.NaN;
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test139139() throws Throwable {
    double[] doubleArray0 = new double[7];
    doubleArray0[2] = Double.NaN;
    double double0 = NumberUtils.min(doubleArray0);
    assertEquals(Double.NaN, double0, 0.01);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static double min(final double[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    double min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (Double.isNaN(array[i])) {
            return Double.NaN;
        }
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test140140() throws Throwable {
    double[] doubleArray0 = new double[2];
    double double0 = NumberUtils.min(doubleArray0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 * @see IEEE754rUtils#min(double[]) IEEE754rUtils for a version of this method that handles NaN differently
 */"
"public static byte min(final byte[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    byte min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test141141() throws Throwable {
    NumberUtils numberUtils0 = new NumberUtils();
    byte[] byteArray0 = new byte[3];
    byteArray0[1] = (byte) numberUtils0.BYTE_MINUS_ONE;
    byte byte0 = NumberUtils.min(byteArray0);
    assertEquals((byte) (-1), byte0);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static byte min(final byte[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    byte min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test142142() throws Throwable {
    byte[] byteArray0 = new byte[19];
    byte byte0 = NumberUtils.min(byteArray0);
    assertEquals((byte) 0, byte0);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static short min(final short[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    short min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test143143() throws Throwable {
    short[] shortArray0 = new short[9];
    shortArray0[6] = (short) (-2034);
    short short0 = NumberUtils.min(shortArray0);
    assertEquals((short) (-2034), short0);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static short min(final short[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    short min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test144144() throws Throwable {
    short[] shortArray0 = new short[4];
    short short0 = NumberUtils.min(shortArray0);
    assertEquals((short) 0, short0);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static int min(final int[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    int min = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] < min) {
            min = array[j];
        }
    }
    return min;
}","public void test145145() throws Throwable {
    int[] intArray0 = new int[3];
    int int0 = NumberUtils.min(intArray0);
    assertEquals(0, int0);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"// Min in array
//--------------------------------------------------------------------
/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */
public static long min(final long[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    long min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test146146() throws Throwable {
    long[] longArray0 = new long[2];
    longArray0[0] = 2093L;
    long long0 = NumberUtils.min(longArray0);
    assertEquals(0L, long0);
}",""
"// Min in array
//--------------------------------------------------------------------
/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */
public static long min(final long[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    long min = array[0];
    for (int i = 1; i < array.length; i++) {
        if (array[i] < min) {
            min = array[i];
        }
    }
    return min;
}","public void test147147() throws Throwable {
    long[] longArray0 = new long[2];
    long long0 = NumberUtils.min(longArray0);
    assertEquals(0L, long0);
}",""
"public static BigDecimal createBigDecimal(final String str) {
    if (str == null) {
        return null;
    }
    // handle JDK1.3.1 bug where """" throws IndexOutOfBoundsException
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    if (str.trim().startsWith(""--"")) {
        // this is protection for poorness in java.lang.BigDecimal.
        // it accepts this as a legal value, but it does not appear
        // to be in specification of class. OS X Java parses it to
        // a wrong value.
        throw new NumberFormatException(str + "" is not a valid number."");
    }
    return new BigDecimal(str);
}","public void test148148() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.createBigDecimal("""");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // A blank string is not a valid number
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}","/**
 * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>BigDecimal</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static BigDecimal createBigDecimal(final String str) {
    if (str == null) {
        return null;
    }
    // handle JDK1.3.1 bug where """" throws IndexOutOfBoundsException
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    if (str.trim().startsWith(""--"")) {
        // this is protection for poorness in java.lang.BigDecimal.
        // it accepts this as a legal value, but it does not appear
        // to be in specification of class. OS X Java parses it to
        // a wrong value.
        throw new NumberFormatException(str + "" is not a valid number."");
    }
    return new BigDecimal(str);
}","public void test149149() throws Throwable {
    BigDecimal bigDecimal0 = NumberUtils.createBigDecimal((String) null);
    assertNull(bigDecimal0);
}","/**
 * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>BigDecimal</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static BigInteger createBigInteger(final String str) {
    if (str == null) {
        return null;
    }
    // offset within string
    int pos = 0;
    int radix = 10;
    // need to negate later?
    boolean negate = false;
    if (str.startsWith(""-"")) {
        negate = true;
        pos = 1;
    }
    if (str.startsWith(""0x"", pos) || str.startsWith(""0x"", pos)) {
        // hex
        radix = 16;
        pos += 2;
    } else if (str.startsWith(""#"", pos)) {
        // alternative hex (allowed by Long/Integer)
        radix = 16;
        pos++;
    } else if (str.startsWith(""0"", pos) && str.length() > pos + 1) {
        // octal; so long as there are additional digits
        radix = 8;
        pos++;
    }
    // default is to treat as decimal
    final BigInteger value = new BigInteger(str.substring(pos), radix);
    return negate ? value.negate() : value;
}","public void test150150() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.createBigInteger(""-0Xy()0 zlKQ5pSY%0"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""Xy()0 \""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}","/**
 * <p>Convert a <code>String</code> to a <code>BigInteger</code>;
 * since 3.2 it handles hex (0x or #) and octal (0) notations.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>BigInteger</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static BigInteger createBigInteger(final String str) {
    if (str == null) {
        return null;
    }
    // offset within string
    int pos = 0;
    int radix = 10;
    // need to negate later?
    boolean negate = false;
    if (str.startsWith(""-"")) {
        negate = true;
        pos = 1;
    }
    if (str.startsWith(""0x"", pos) || str.startsWith(""0x"", pos)) {
        // hex
        radix = 16;
        pos += 2;
    } else if (str.startsWith(""#"", pos)) {
        // alternative hex (allowed by Long/Integer)
        radix = 16;
        pos++;
    } else if (str.startsWith(""0"", pos) && str.length() > pos + 1) {
        // octal; so long as there are additional digits
        radix = 8;
        pos++;
    }
    // default is to treat as decimal
    final BigInteger value = new BigInteger(str.substring(pos), radix);
    return negate ? value.negate() : value;
}","public void test152152() throws Throwable {
    // Undeclared exception!
    try {
        NumberUtils.createBigInteger(""-0xou{RFQ@\""F0BL"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""ou{RF\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}","/**
 * <p>Convert a <code>String</code> to a <code>BigInteger</code>;
 * since 3.2 it handles hex (0x or #) and octal (0) notations.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>BigInteger</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static BigInteger createBigInteger(final String str) {
    if (str == null) {
        return null;
    }
    // offset within string
    int pos = 0;
    int radix = 10;
    // need to negate later?
    boolean negate = false;
    if (str.startsWith(""-"")) {
        negate = true;
        pos = 1;
    }
    if (str.startsWith(""0x"", pos) || str.startsWith(""0x"", pos)) {
        // hex
        radix = 16;
        pos += 2;
    } else if (str.startsWith(""#"", pos)) {
        // alternative hex (allowed by Long/Integer)
        radix = 16;
        pos++;
    } else if (str.startsWith(""0"", pos) && str.length() > pos + 1) {
        // octal; so long as there are additional digits
        radix = 8;
        pos++;
    }
    // default is to treat as decimal
    final BigInteger value = new BigInteger(str.substring(pos), radix);
    return negate ? value.negate() : value;
}","public void test153153() throws Throwable {
    BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null);
    assertNull(bigInteger0);
}","/**
 * <p>Convert a <code>String</code> to a <code>BigInteger</code>;
 * since 3.2 it handles hex (0x or #) and octal (0) notations.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>BigInteger</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static Long createLong(final String str) {
    if (str == null) {
        return null;
    }
    return Long.decode(str);
}","public void test154154() throws Throwable {
    Long long0 = NumberUtils.createLong((String) null);
    assertNull(long0);
}","/**
 * <p>Convert a <code>String</code> to a <code>Long</code>;
 * since 3.1 it handles hex and octal notations.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Long</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static Integer createInteger(final String str) {
    if (str == null) {
        return null;
    }
    // decode() handles 0xAABD and 0777 (hex and octal) as well.
    return Integer.decode(str);
}","public void test155155() throws Throwable {
    Integer integer0 = NumberUtils.createInteger((String) null);
    assertNull(integer0);
}","/**
 * <p>Convert a <code>String</code> to a <code>Integer</code>, handling
 * hex and octal notations.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Integer</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"public static Double createDouble(final String str) {
    if (str == null) {
        return null;
    }
    return Double.valueOf(str);
}","public void test156156() throws Throwable {
    Double double0 = NumberUtils.createDouble((String) null);
    assertNull(double0);
}","/**
 * <p>Convert a <code>String</code> to a <code>Double</code>.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Double</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */"
"//-----------------------------------------------------------------------
/**
 * <p>Convert a <code>String</code> to a <code>Float</code>.</p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * @param str  a <code>String</code> to convert, may be null
 * @return converted <code>Float</code> (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Float createFloat(final String str) {
    if (str == null) {
        return null;
    }
    return Float.valueOf(str);
}","public void test157157() throws Throwable {
    Float float0 = NumberUtils.createFloat((String) null);
    assertNull(float0);
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test158158() throws Throwable {
    try {
        NumberUtils.createNumber(""QT0EcHB,n\""|}7}KB)A2"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test159159() throws Throwable {
    try {
        NumberUtils.createNumber(""$S.Ata{/:3TbB8"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test160160() throws Throwable {
    try {
        NumberUtils.createNumber("".W-L"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // .W-L is not a valid number.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test161161() throws Throwable {
    try {
        NumberUtils.createNumber("">yf"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // >yf is not a valid number.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test162162() throws Throwable {
    try {
        NumberUtils.createNumber("".,NH[{~R}rt|d"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // .,NH[{~R}rt|d is not a valid number.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test163163() throws Throwable {
    try {
        NumberUtils.createNumber(""DxSU%P>E #u*#8_]Hl"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // DxSU%P>E #u*#8_]Hl is not a valid number.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test164164() throws Throwable {
    try {
        NumberUtils.createNumber(""ou{RFQ@\""F0BL"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // ou{RFQ@\""F0BL is not a valid number.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test165165() throws Throwable {
    try {
        NumberUtils.createNumber(""I7"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""I7\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test166166() throws Throwable {
    try {
        NumberUtils.createNumber("" is not a valid number."");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        //  is not a valid number. is not a valid number.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test167167() throws Throwable {
    try {
        NumberUtils.createNumber(""org.apache.commons.lang3Ymath.Eu8berUtils"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // org.apache.commons.lang3Ymath.Eu8berUtils is not a valid number.
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test168168() throws Throwable {
    try {
        NumberUtils.createNumber(""..."");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.math.BigDecimal"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test169169() throws Throwable {
    try {
        NumberUtils.createNumber(""#JYDY_(9Cm5[(Je"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""JYDY_(9Cm5[(Je\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test170170() throws Throwable {
    try {
        NumberUtils.createNumber(""-#org.apache.commons.lang3.math.NumberUtils"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""org.ap\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test171171() throws Throwable {
    try {
        NumberUtils.createNumber(""0XE/bS&'m"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""E/bS&'m\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test172172() throws Throwable {
    try {
        NumberUtils.createNumber("""");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // A blank string is not a valid number
        //
        verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
    }
}",""
"//-----------------------------------------------------------------------
// must handle Long, Float, Integer, Float, Short,
//                  BigDecimal, BigInteger and Byte
// useful methods:
// Byte.decode(String)
// Byte.valueOf(String,int radix)
// Byte.valueOf(String)
// Double.valueOf(String)
// Float.valueOf(String)
// Float.valueOf(String)
// Integer.valueOf(String,int radix)
// Integer.valueOf(String)
// Integer.decode(String)
// Integer.getInteger(String)
// Integer.getInteger(String,int val)
// Integer.getInteger(String,Integer val)
// Integer.valueOf(String)
// Double.valueOf(String)
// new Byte(String)
// Long.valueOf(String)
// Long.getLong(String)
// Long.getLong(String,int)
// Long.getLong(String,Integer)
// Long.valueOf(String,int)
// Long.valueOf(String)
// Short.valueOf(String)
// Short.decode(String)
// Short.valueOf(String,int)
// Short.valueOf(String)
// new BigDecimal(String)
// new BigInteger(String)
// new BigInteger(String,int radix)
// Possible inputs:
// 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd
// plus minus everything. Prolly more. A lot are not separable.
/**
 * <p>Turns a string value into a java.lang.Number.</p>
 *
 * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
 * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
 * prefix is more than 8 - or BigInteger if there are more than 16 digits.
 * </p>
 * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
 * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts
 * trying to create successively larger types from the type specified
 * until one is found that can represent the value.</p>
 *
 * <p>If a type specifier is not found, it will check for a decimal point
 * and then try successively larger types from <code>Integer</code> to
 * <code>BigInteger</code> and from <code>Float</code> to
 * <code>BigDecimal</code>.</p>
 *
 * <p>
 * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
 * be Integer, Long or BigDecimal as appropriate.
 * </p>
 *
 * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
 *
 * <p>This method does not trim the input string, i.e., strings with leading
 * or trailing spaces will generate NumberFormatExceptions.</p>
 *
 * @param str  String containing a number, may be null
 * @return Number created from the string (or null if the input is null)
 * @throws NumberFormatException if the value cannot be converted
 */
public static Number createNumber(final String str) throws NumberFormatException {
    if (str == null) {
        return null;
    }
    if (StringUtils.isBlank(str)) {
        throw new NumberFormatException(""A blank string is not a valid number"");
    }
    // Need to deal with all possible hex prefixes here
    final String[] hex_prefixes = { ""0x"", ""0X"", ""-0x"", ""-0X"", ""#"", ""-#"" };
    int pfxLen = 0;
    for (final String pfx : hex_prefixes) {
        if (str.startsWith(pfx)) {
            pfxLen += pfx.length();
            break;
        }
    }
    if (pfxLen > 0) {
        // we have a hex number
        final int hexDigits = str.length() - pfxLen;
        if (hexDigits > 16) {
            // too many for Long
            return createBigInteger(str);
        }
        if (hexDigits > 8) {
            // too many for an int
            return createLong(str);
        }
        return createInteger(str);
    }
    final char lastChar = str.charAt(str.length() - 1);
    String mant;
    String dec;
    String exp;
    final int decPos = str.indexOf('.');
    // assumes both not present
    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
    // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)
    // and the parsing which will detect if e or E appear in a number due to using the wrong offset
    // Check required precision (LANG-693)
    int numDecimals = 0;
    if (decPos > -1) {
        // there is a decimal point
        if (expPos > -1) {
            // there is an exponent
            if (expPos < decPos || expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            dec = str.substring(decPos + 1, expPos);
        } else {
            dec = str.substring(decPos + 1);
        }
        mant = str.substring(0, decPos);
        // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
        numDecimals = dec.length();
    } else {
        if (expPos > -1) {
            if (expPos > str.length()) {
                // prevents double exponent causing IOOBE
                throw new NumberFormatException(str + "" is not a valid number."");
            }
            mant = str.substring(0, expPos);
        } else {
            mant = str;
        }
        dec = null;
    }
    if (!Character.isDigit(lastChar) && lastChar != '.') {
        if (expPos > -1 && expPos < str.length() - 1) {
            exp = str.substring(expPos + 1, str.length() - 1);
        } else {
            exp = null;
        }
        //Requesting a specific type..
        final String numeric = str.substring(0, str.length() - 1);
        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
        switch(lastChar) {
            case 'l':
            case 'L':
                if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {
                    try {
                        return createLong(numeric);
                    } catch (final NumberFormatException nfe) {
                        // NOPMD
                        // Too big for a long
                    }
                    return createBigInteger(numeric);
                }
                throw new NumberFormatException(str + "" is not a valid number."");
            case 'f':
            case 'F':
                try {
                    final Float f = NumberUtils.createFloat(numeric);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                        //If it's too big for a float or the float value = 0 and the string
                        //has non-zeros in it, then float does not have the precision we want
                        return f;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            case 'd':
            case 'D':
                try {
                    final Double d = NumberUtils.createDouble(numeric);
                    if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
                        return d;
                    }
                } catch (final NumberFormatException nfe) {
                    // NOPMD
                    // ignore the bad number
                }
                try {
                    return createBigDecimal(numeric);
                } catch (final NumberFormatException e) {
                    // NOPMD
                    // ignore the bad number
                }
            //$FALL-THROUGH$
            default:
                throw new NumberFormatException(str + "" is not a valid number."");
        }
    }
    //User doesn't have a preference on the return type, so let's start
    //small and go from there...
    if (expPos > -1 && expPos < str.length() - 1) {
        exp = str.substring(expPos + 1, str.length());
    } else {
        exp = null;
    }
    if (dec == null && exp == null) {
        // no decimal point and no exponent
        //Must be an Integer, Long, Biginteger
        try {
            return createInteger(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        try {
            return createLong(str);
        } catch (final NumberFormatException nfe) {
            // NOPMD
            // ignore the bad number
        }
        return createBigInteger(str);
    }
    //Must be a Float, Double, BigDecimal
    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
    try {
        if (numDecimals <= 7) {
            // If number has 7 or fewer digits past the decimal point then make it a float
            final Float f = createFloat(str);
            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
                return f;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    try {
        if (numDecimals <= 16) {
            // If number has between 8 and 16 digits past the decimal point then make it a double
            final Double d = createDouble(str);
            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
                return d;
            }
        }
    } catch (final NumberFormatException nfe) {
        // NOPMD
        // ignore the bad number
    }
    return createBigDecimal(str);
}","public void test173173() throws Throwable {
    Number number0 = NumberUtils.createNumber((String) null);
    assertNull(number0);
}",""
"public static short toShort(final String str, final short defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Short.parseShort(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test174174() throws Throwable {
    short short0 = NumberUtils.toShort((String) null, (short) 2022);
    assertEquals((short) 2022, short0);
}","/**
 * <p>Convert a <code>String</code> to an <code>short</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toShort(null, 1) = 1
 *   NumberUtils.toShort("""", 1)   = 1
 *   NumberUtils.toShort(""1"", 0)  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the short represented by the string, or the default if conversion fails
 * @since 2.5
 */"
"public static byte toByte(final String str, final byte defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Byte.parseByte(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test175175() throws Throwable {
    byte byte0 = NumberUtils.toByte((String) null, (byte) 81);
    assertEquals((byte) 81, byte0);
}","/**
 * <p>Convert a <code>String</code> to a <code>byte</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toByte(null, 1) = 1
 *   NumberUtils.toByte("""", 1)   = 1
 *   NumberUtils.toByte(""1"", 0)  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the byte represented by the string, or the default if conversion fails
 * @since 2.5
 */"
"public static double toDouble(final String str) {
    return toDouble(str, 0.0d);
}","public void test176176() throws Throwable {
    double double0 = NumberUtils.toDouble((String) null);
    assertEquals(0.0, double0, 0.01);
}","/**
 * <p>Convert a <code>String</code> to a <code>double</code>, returning
 * <code>0.0d</code> if the conversion fails.</p>
 *
 * <p>If the string <code>str</code> is <code>null</code>,
 * <code>0.0d</code> is returned.</p>
 *
 * <pre>
 *   NumberUtils.toDouble(null)   = 0.0d
 *   NumberUtils.toDouble("""")     = 0.0d
 *   NumberUtils.toDouble(""1.5"")  = 1.5d
 * </pre>
 *
 * @param str the string to convert, may be <code>null</code>
 * @return the double represented by the string, or <code>0.0d</code>
 *  if conversion fails
 * @since 2.1
 */"
"public static float toFloat(final String str) {
    return toFloat(str, 0.0f);
}","public void test177177() throws Throwable {
    float float0 = NumberUtils.toFloat((String) null);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * <p>Convert a <code>String</code> to a <code>float</code>, returning
 * <code>0.0f</code> if the conversion fails.</p>
 *
 * <p>If the string <code>str</code> is <code>null</code>,
 * <code>0.0f</code> is returned.</p>
 *
 * <pre>
 *   NumberUtils.toFloat(null)   = 0.0f
 *   NumberUtils.toFloat("""")     = 0.0f
 *   NumberUtils.toFloat(""1.5"")  = 1.5f
 * </pre>
 *
 * @param str the string to convert, may be <code>null</code>
 * @return the float represented by the string, or <code>0.0f</code>
 *  if conversion fails
 * @since 2.1
 */"
"public static long toLong(final String str, final long defaultValue) {
    if (str == null) {
        return defaultValue;
    }
    try {
        return Long.parseLong(str);
    } catch (final NumberFormatException nfe) {
        return defaultValue;
    }
}","public void test178178() throws Throwable {
    long long0 = NumberUtils.toLong((String) null, 138L);
    assertEquals(138L, long0);
}","/**
 * <p>Convert a <code>String</code> to a <code>long</code>, returning a
 * default value if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, the default value is returned.</p>
 *
 * <pre>
 *   NumberUtils.toLong(null, 1L) = 1L
 *   NumberUtils.toLong("""", 1L)   = 1L
 *   NumberUtils.toLong(""1"", 0L)  = 1L
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @param defaultValue  the default value
 * @return the long represented by the string, or the default if conversion fails
 * @since 2.1
 */"
"//-----------------------------------------------------------------------
/**
 * <p>Convert a <code>String</code> to an <code>int</code>, returning
 * <code>zero</code> if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>
 *
 * <pre>
 *   NumberUtils.toInt(null) = 0
 *   NumberUtils.toInt("""")   = 0
 *   NumberUtils.toInt(""1"")  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @return the int represented by the string, or <code>zero</code> if
 *  conversion fails
 * @since 2.1
 */
public static int toInt(final String str) {
    return toInt(str, 0);
}","public void test179179() throws Throwable {
    int int0 = NumberUtils.toInt((String) null);
    assertEquals(0, int0);
}",""
"public static short toShort(final String str) {
    return toShort(str, (short) 0);
}","public void test180180() throws Throwable {
    short short0 = NumberUtils.toShort("""");
    assertEquals((short) 0, short0);
}","/**
 * <p>Convert a <code>String</code> to a <code>short</code>, returning
 * <code>zero</code> if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>
 *
 * <pre>
 *   NumberUtils.toShort(null) = 0
 *   NumberUtils.toShort("""")   = 0
 *   NumberUtils.toShort(""1"")  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @return the short represented by the string, or <code>zero</code> if
 *  conversion fails
 * @since 2.5
 */"
"public static long toLong(final String str) {
    return toLong(str, 0L);
}","public void test181181() throws Throwable {
    long long0 = NumberUtils.toLong("""");
    assertEquals(0L, long0);
}","/**
 * <p>Convert a <code>String</code> to a <code>long</code>, returning
 * <code>zero</code> if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>
 *
 * <pre>
 *   NumberUtils.toLong(null) = 0L
 *   NumberUtils.toLong("""")   = 0L
 *   NumberUtils.toLong(""1"")  = 1L
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @return the long represented by the string, or <code>0</code> if
 *  conversion fails
 * @since 2.1
 */"
"public static double max(final double a, final double b, final double c) {
    return Math.max(Math.max(a, b), c);
}","public void test182182() throws Throwable {
    double double0 = NumberUtils.max((-84.9169040138), (double) (byte) 0, (double) (byte) 0);
    assertEquals(0.0, double0, 0.01);
}","/**
 * <p>Gets the maximum of three <code>double</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the largest of the values
 * @see IEEE754rUtils#max(double, double, double) for a version of this method that handles NaN differently
 */"
"//-----------------------------------------------------------------------
/**
 * <p>Convert a <code>String</code> to a <code>byte</code>, returning
 * <code>zero</code> if the conversion fails.</p>
 *
 * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>
 *
 * <pre>
 *   NumberUtils.toByte(null) = 0
 *   NumberUtils.toByte("""")   = 0
 *   NumberUtils.toByte(""1"")  = 1
 * </pre>
 *
 * @param str  the string to convert, may be null
 * @return the byte represented by the string, or <code>zero</code> if
 *  conversion fails
 * @since 2.5
 */
public static byte toByte(final String str) {
    return toByte(str, (byte) 0);
}","public void test183183() throws Throwable {
    byte byte0 = NumberUtils.toByte(""o"");
    assertEquals((byte) 0, byte0);
}",""
"public static int min(final int[] array) {
    // Validates input
    validateArray(array);
    // Finds and returns min
    int min = array[0];
    for (int j = 1; j < array.length; j++) {
        if (array[j] < min) {
            min = array[j];
        }
    }
    return min;
}","public void test184184() throws Throwable {
    NumberUtils numberUtils0 = new NumberUtils();
    int[] intArray0 = new int[3];
    intArray0[0] = (int) (short) numberUtils0.SHORT_ONE;
    int int0 = NumberUtils.min(intArray0);
    assertEquals(0, int0);
}","/**
 * <p>Returns the minimum value in an array.</p>
 *
 * @param array  an array, must not be null or empty
 * @return the minimum value in the array
 * @throws IllegalArgumentException if <code>array</code> is <code>null</code>
 * @throws IllegalArgumentException if <code>array</code> is empty
 */"
"public static double min(final double a, final double b, final double c) {
    return Math.min(Math.min(a, b), c);
}","public void test185185() throws Throwable {
    double double0 = NumberUtils.min(1831.9964283, (-234.46364), 1831.9964283);
    assertEquals((-234.46364), double0, 0.01);
}","/**
 * <p>Gets the minimum of three <code>double</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 * @see IEEE754rUtils#min(double, double, double) for a version of this method that handles NaN differently
 */"
"public static float min(final float a, final float b, final float c) {
    return Math.min(Math.min(a, b), c);
}","public void test186186() throws Throwable {
    float float0 = NumberUtils.min(1349.4127F, 1349.4127F, 1349.4127F);
    assertEquals(1349.4127F, float0, 0.01F);
}","/**
 * <p>Gets the minimum of three <code>float</code> values.</p>
 *
 * <p>If any value is <code>NaN</code>, <code>NaN</code> is
 * returned. Infinity is handled.</p>
 *
 * @param a  value 1
 * @param b  value 2
 * @param c  value 3
 * @return  the smallest of the values
 * @see IEEE754rUtils#min(float, float, float) for a version of this method that handles NaN differently
 */"
