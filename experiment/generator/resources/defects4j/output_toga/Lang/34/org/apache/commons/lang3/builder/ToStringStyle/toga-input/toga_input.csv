focal_method,test_prefix,docstring
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test0036() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    short[] shortArray0 = new short[8];
    standardToStringStyle0.appendSummary(stringBuffer0, """", shortArray0);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test0048() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    Object[] objectArray0 = new Object[6];
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, """", objectArray0);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test00510() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    long[] longArray0 = new long[5];
    standardToStringStyle0.DEFAULT_STYLE.appendSummary(stringBuffer0, ""os.arch"", longArray0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test00612() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""eu"");
    double[] doubleArray0 = new double[5];
    standardToStringStyle0.appendSummary(stringBuffer0, ""^4&V"", doubleArray0);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test00714() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendFieldSeparator(stringBuffer0);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test00816() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendFieldEnd(stringBuffer0, ""T"");
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test00918() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    boolean[] booleanArray0 = new boolean[4];
    standardToStringStyle0.MULTI_LINE_STYLE.appendDetail(stringBuffer0, ""X"", booleanArray0);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test01020() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    short[] shortArray0 = new short[7];
    standardToStringStyle0.appendDetail(stringBuffer0, ""G;X087!W=Z:hs[nt"", shortArray0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test01224() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    float[] floatArray0 = new float[9];
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, """", floatArray0);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test01326() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    char[] charArray0 = new char[3];
    standardToStringStyle0.appendDetail(stringBuffer0, ""os.arch"", charArray0);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test01428() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    byte[] byteArray0 = new byte[0];
    standardToStringStyle0.appendDetail(stringBuffer0, """", byteArray0);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test01631() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test01632() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test01633() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test01634() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test01635() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test01636() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test01637() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test01638() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test01639() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test01640() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test01641() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test01642() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test01643() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test01644() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test01645() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test01646() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test01647() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test01648() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test01649() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test01650() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Character character0 = Character.valueOf('b');
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", character0);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test01752() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SHORT_PREFIX_STYLE.appendDetail(stringBuffer0, ""KK\""j;NE>"", 1);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test02058() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendDetail(stringBuffer0, (String) null, 1.0);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test02160() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""["");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, ""["", (byte) 0);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test02262() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendContentStart(stringBuffer0);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test02363() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test02364() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test02365() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test02366() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test02367() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test02368() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test02369() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test02370() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test02371() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test02372() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test02373() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test02374() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test02375() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test02376() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test02377() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test02378() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test02379() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test02380() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test02381() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test02382() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    ToStringStyle.unregister(standardToStringStyle0);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"protected void setUseShortClassName(boolean useShortClassName) {
    this.useShortClassName = useShortClassName;
}","public void test02483() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
    toStringStyle0.setUseShortClassName(false);
}","/**
 * <p>Sets whether to output short or long class names.</p>
 *
 * @param useShortClassName  the new useShortClassName flag
 * @since 2.0
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test02584() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test02585() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test02586() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test02587() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test02588() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test02589() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test02590() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test02591() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test02592() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test02593() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test02594() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test02595() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test02596() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test02597() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test02598() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test02599() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test025100() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test025101() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test025102() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test025103() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseIdentityHashCode(true);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test026104() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test026105() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseFieldNames(false);
    assertFalse(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test027106() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test027107() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setSummaryObjectStartText("""");
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test028108() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test028109() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setSizeStartText("""");
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test029110() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test029111() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test029112() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test029113() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test029114() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test029115() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test029116() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test029117() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test029118() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test029119() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test029120() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test029121() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test029122() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test029123() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test029124() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test029125() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test029126() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test029127() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test029128() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test029129() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.SHORT_PREFIX_STYLE.setFieldSeparatorAtStart(false);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {
    this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;
}","public void test030130() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    toStringStyle0.setFieldSeparatorAtEnd(false);
}","/**
 * <p>Sets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag
 * @since 2.0
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test031131() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test031132() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test031133() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test031134() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test031135() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test031136() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test031137() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test031138() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test031139() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test031140() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test031141() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test031142() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test031143() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test031144() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test031145() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test031146() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test031147() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test031148() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test031149() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test031150() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArrayContentDetail(true);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"static void register(Object value) {
    if (value != null) {
        WeakHashMap<Object, Object> m;
        synchronized (ToStringStyle.class) {
            m = REGISTRY.get();
            if (m == null) {
                m = new WeakHashMap<Object, Object>();
                REGISTRY.set(m);
            }
        }
        m.put(value, null);
    }
}","public void test032151() throws Throwable {
    Integer integer0 = new Integer((-4831));
    ToStringStyle.register(integer0);
}","/**
 * <p>
 * Registers the given object. Used by the reflection methods to avoid
 * infinite loops.
 * </p>
 *
 * @param value
 *                  The object to register.
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test034153() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test034154() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test034155() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test034156() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test034157() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test034158() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test034159() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test034160() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test034161() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test034162() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test034163() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test034164() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test034165() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test034166() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test034167() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test034168() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test034169() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test034170() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test034171() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test034172() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, ""6x(8n1{-z*-A"");
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test035174() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    standardToStringStyle0.appendFieldStart(stringBuffer0, ""C="");
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test036176() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, (String) null, '^');
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test037178() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendContentEnd(stringBuffer0);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
protected boolean isUseShortClassName() {
    return useShortClassName;
}","public void test038179() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
    boolean boolean0 = toStringStyle0.isUseShortClassName();
    assertTrue(boolean0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
protected boolean isUseShortClassName() {
    return useShortClassName;
}","public void test039180() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    boolean boolean0 = toStringStyle0.isUseShortClassName();
    assertFalse(boolean0);
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test040181() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test040182() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test040183() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test040184() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test040185() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test040186() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test040187() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test040188() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test040189() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test040190() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertTrue(boolean0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test040191() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test040192() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test040193() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test040194() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test040195() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test040196() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test040197() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test040198() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test040199() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test040200() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 *
 * @return the current useIdentityHashCode flag
 */
protected boolean isUseIdentityHashCode() {
    return useIdentityHashCode;
}","public void test041201() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
    boolean boolean0 = toStringStyle0.isUseIdentityHashCode();
    assertFalse(boolean0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test042202() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test042203() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test042204() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test042205() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test042206() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test042207() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test042208() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test042209() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test042210() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test042211() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test042212() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test042213() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test042214() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertTrue(boolean0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test042215() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test042216() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test042217() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test042218() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test042219() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test042220() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test042221() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isUseFieldNames();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
protected boolean isUseFieldNames() {
    return useFieldNames;
}","public void test043222() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
    boolean boolean0 = toStringStyle0.isUseFieldNames();
    assertFalse(boolean0);
}",""
"// Setters and getters for the customizable parts of the style
// These methods are not expected to be overridden, except to make public
// (They are not public so that immutable subclasses can be written)
//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
protected boolean isUseClassName() {
    return useClassName;
}","public void test044223() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
    boolean boolean0 = toStringStyle0.isUseClassName();
    assertFalse(boolean0);
}",""
"static boolean isRegistered(Object value) {
    Map<Object, Object> m = getRegistry();
    return m.containsKey(value);
}","public void test045224() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer("";"");
    boolean boolean0 = ToStringStyle.isRegistered(stringBuffer0);
    assertFalse(boolean0);
}","/**
 * <p>
 * Returns <code>true</code> if the registry contains the given object.
 * Used by the reflection methods to avoid infinite loops.
 * </p>
 *
 * @param value
 *                  The object to lookup in the registry.
 * @return boolean <code>true</code> if the registry contains the given
 *             object.
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test046225() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test046226() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test046227() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test046228() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test046229() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test046230() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test046231() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test046232() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test046233() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test046234() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test046235() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test046236() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test046237() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test046238() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"protected boolean isFullDetail(Boolean fullDetailRequest) {
    if (fullDetailRequest == null) {
        return defaultFullDetail;
    }
    return fullDetailRequest.booleanValue();
}","public void test046239() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertTrue(boolean0);
}","/**
 * <p>Is this field to be output in full detail.</p>
 *
 * <p>This method converts a detail request into a detail level.
 * The calling code may request full detail (<code>true</code>),
 * but a subclass might ignore that and always return
 * <code>false</code>. The calling code may pass in
 * <code>null</code> indicating that it doesn't care about
 * the detail level. In this case the default detail level is
 * used.</p>
 *
 * @param fullDetailRequest  the detail level requested
 * @return whether full detail is to be shown
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test046240() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test046241() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test046242() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test046243() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test046244() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFullDetail((Boolean) null);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test047245() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test047246() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test047247() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test047248() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test047249() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test047250() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test047251() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test047252() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test047253() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test047254() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test047255() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test047256() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test047257() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test047258() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test047259() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test047260() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test047261() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test047262() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test047263() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test047264() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.isFullDetail(boolean0);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
protected boolean isFieldSeparatorAtStart() {
    return fieldSeparatorAtStart;
}","public void test048265() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    boolean boolean0 = toStringStyle0.isFieldSeparatorAtStart();
    assertTrue(boolean0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test049266() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test049267() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test049268() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test049269() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test049270() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test049271() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test049272() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test049273() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test049274() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test049275() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test049276() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test049277() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertFalse(boolean0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test049278() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test049279() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test049280() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test049281() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test049282() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test049283() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test049284() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test049285() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
protected boolean isArrayContentDetail() {
    return arrayContentDetail;
}","public void test050286() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    boolean boolean0 = toStringStyle0.isArrayContentDetail();
    assertTrue(boolean0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test051287() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test051288() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setSummaryObjectEndText("""");
    standardToStringStyle0.getSummaryObjectEndText();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test052290() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setSizeStartText("""");
    standardToStringStyle0.getSizeStartText();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or array size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
protected String getSizeEndText() {
    return sizeEndText;
}","public void test053291() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    String string0 = toStringStyle0.getSizeEndText();
    assertEquals("">"", string0);
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test054292() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test054293() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setSizeEndText((String) null);
    String string0 = standardToStringStyle0.getSizeEndText();
    assertNotNull(string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test054294() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setSizeEndText((String) null);
    String string0 = standardToStringStyle0.getSizeEndText();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"protected String getShortClassName(Class<?> cls) {
    return ClassUtils.getShortClassName(cls);
}","public void test055295() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    String string0 = toStringStyle0.getShortClassName((Class<?>) null);
    assertEquals("""", string0);
}","/**
 * <p>Gets the short class name for a class.</p>
 *
 * <p>The short class name is the classname excluding
 * the package name.</p>
 *
 * @param cls  the <code>Class</code> to get the short name of
 * @return the short name
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test056296() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test056297() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test056298() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test056299() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test056300() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test056301() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test056302() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test056303() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test056304() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test056305() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test056306() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test056307() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals(""<null>"", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test056308() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test056309() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test056310() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test056311() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test056312() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test056313() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test056314() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test056315() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getNullText();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {
    ObjectUtils.identityToString(buffer, value);
}","public void test057316() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    toStringStyle0.getSizeStartText();
    toStringStyle0.SIMPLE_STYLE.setNullText("""");
    toStringStyle0.setSizeEndText(""'e#lx?K}\""g,("");
    Class<StandardToStringStyle> class0 = StandardToStringStyle.class;
    toStringStyle0.getShortClassName(class0);
    toStringStyle0.getNullText();
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.isDefaultFullDetail();
    // Undeclared exception!
    try {
        toStringStyle0.appendCyclicObject((StringBuffer) null, ""<size="", (Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // Cannot get the toString of a null identity
        //
        verifyException(""org.apache.commons.lang3.ObjectUtils"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> an <code>Object</code>
 * value that has been detected to participate in a cycle. This
 * implementation will print the standard string value of the value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>,
 *  not <code>null</code>
 *
 * @since 2.2
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
protected String getContentStart() {
    return contentStart;
}","public void test058317() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
    String string0 = toStringStyle0.getContentStart();
    assertEquals("""", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test059318() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test059319() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test059320() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test059321() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test059322() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test059323() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test059324() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals(""]"", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test059325() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test059326() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test059327() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test059328() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test059329() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test059330() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test059331() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test059332() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test059333() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test059334() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test059335() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test059336() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test059337() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getContentEnd();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
protected String getContentEnd() {
    return contentEnd;
}","public void test060338() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
    String string0 = toStringStyle0.getContentEnd();
    assertEquals("""", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test061339() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test061340() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test061341() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test061342() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test061343() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test061344() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test061345() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test061346() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test061347() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test061348() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test061349() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test061350() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test061351() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test061352() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test061353() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test061354() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test061355() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test061356() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test061357() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals(""{"", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test061358() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayStart();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test062359() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test062360() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test062361() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test062362() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test062363() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test062364() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals("","", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test062365() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test062366() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test062367() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test062368() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test062369() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test062370() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test062371() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test062372() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test062373() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test062374() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test062375() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test062376() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test062377() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test062378() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArraySeparator();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test063379() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test063380() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test063381() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test063382() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test063383() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test063384() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test063385() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test063386() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test063387() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test063388() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test063389() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test063390() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test063391() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test063392() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals(""}"", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test063393() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test063394() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test063395() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test063396() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test063397() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test063398() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getArrayEnd();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test064400() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
    StringBuffer stringBuffer0 = new StringBuffer();
    toStringStyle0.NO_FIELD_NAMES_STYLE.append(stringBuffer0, ""Windows"", 2104.87105);
    toStringStyle0.NO_FIELD_NAMES_STYLE.setSizeEndText("""");
    toStringStyle0.isDefaultFullDetail();
    Object[] objectArray0 = new Object[0];
    toStringStyle0.appendDetail(stringBuffer0, ""n:xMp:O3"", objectArray0);
    toStringStyle0.getArrayEnd();
    toStringStyle0.appendInternal(stringBuffer0, """", ""Windows"", false);
    toStringStyle0.append(stringBuffer0, """", (byte) 91);
    byte[] byteArray0 = new byte[1];
    byteArray0[0] = (byte) 91;
    Boolean boolean0 = Boolean.TRUE;
    toStringStyle0.append(stringBuffer0, """", byteArray0, boolean0);
    double[] doubleArray0 = new double[3];
    doubleArray0[0] = (double) (byte) 91;
    doubleArray0[1] = (double) (byte) 91;
    doubleArray0[2] = 2104.87105;
    Boolean boolean1 = new Boolean("""");
    toStringStyle0.append(stringBuffer0, ""org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle"", doubleArray0, boolean1);
    toStringStyle0.setContentEnd(""org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle"");
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setUseShortClassName(false);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"protected void removeLastFieldSeparator(StringBuffer buffer) {
    int len = buffer.length();
    int sepLen = fieldSeparator.length();
    if (len > 0 && sepLen > 0 && len >= sepLen) {
        boolean match = true;
        for (int i = 0; i < sepLen; i++) {
            if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {
                match = false;
                break;
            }
        }
        if (match) {
            buffer.setLength(len - sepLen);
        }
    }
}","public void test065401() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.DEFAULT_STYLE.removeLastFieldSeparator((StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Remove the last field separator from the buffer.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @since 2.0
 */"
"protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {
    buffer.append(arrayStart);
    int length = Array.getLength(array);
    for (int i = 0; i < length; i++) {
        Object item = Array.get(array, i);
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        if (item == null) {
            appendNullText(buffer, fieldName);
        } else {
            appendInternal(buffer, fieldName, item, arrayContentDetail);
        }
    }
    buffer.append(arrayEnd);
}","public void test066402() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.reflectionAppendArrayDetail((StringBuffer) null, ""<"", """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the detail of an array type.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 * @since 2.0
 */"
"protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {
    buffer.append(arrayStart);
    int length = Array.getLength(array);
    for (int i = 0; i < length; i++) {
        Object item = Array.get(array, i);
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        if (item == null) {
            appendNullText(buffer, fieldName);
        } else {
            appendInternal(buffer, fieldName, item, arrayContentDetail);
        }
    }
    buffer.append(arrayEnd);
}","public void test067403() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";"");
    Object object0 = new Object();
    // Undeclared exception!
    try {
        standardToStringStyle0.reflectionAppendArrayDetail(stringBuffer0, "";"", object0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Argument is not an array
        //
        verifyException(""java.lang.reflect.Array"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the detail of an array type.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 * @since 2.0
 */"
"protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) {
    buffer.append(sizeStartText);
    buffer.append(size);
    buffer.append(sizeEndText);
}","public void test068404() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    // Undeclared exception!
    try {
        standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendSummarySize((StringBuffer) null, (String) null, 3);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a size summary.</p>
 *
 * <p>The size summary is used to summarize the contents of
 * <code>Collections</code>, <code>Maps</code> and arrays.</p>
 *
 * <p>The output consists of a prefix, the passed in size
 * and a suffix.</p>
 *
 * <p>The default format is <code>'&lt;size=n&gt;'<code>.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param size  the size to append
 */"
"protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) {
    appendSummarySize(buffer, fieldName, array.length);
}","public void test069405() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean[] booleanArray0 = new boolean[7];
    // Undeclared exception!
    try {
        standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendSummary((StringBuffer) null, ""sr={?R/p wjTv/A*$l"", booleanArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a summary of a
 * <code>boolean</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) {
    appendSummarySize(buffer, fieldName, array.length);
}","public void test070406() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.appendSummary((StringBuffer) null, ""["", (short[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a summary of a
 * <code>short</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) {
    appendSummarySize(buffer, fieldName, array.length);
}","public void test071407() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
    Object[] objectArray0 = new Object[4];
    // Undeclared exception!
    try {
        toStringStyle0.appendSummary((StringBuffer) null, """", objectArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a summary of an
 * <code>Object</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) {
    appendSummarySize(buffer, fieldName, array.length);
}","public void test072408() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    // Undeclared exception!
    try {
        standardToStringStyle0.SIMPLE_STYLE.appendSummary(stringBuffer0, "";"", (long[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a summary of a
 * <code>long</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) {
    appendSummarySize(buffer, fieldName, array.length);
}","public void test073409() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    int[] intArray0 = new int[8];
    // Undeclared exception!
    try {
        standardToStringStyle0.MULTI_LINE_STYLE.appendSummary((StringBuffer) null, ""[pan#ITis`#pMDw.`"", intArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a summary of an
 * <code>int</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) {
    appendSummarySize(buffer, fieldName, array.length);
}","public void test074410() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    float[] floatArray0 = new float[3];
    // Undeclared exception!
    try {
        toStringStyle0.MULTI_LINE_STYLE.appendSummary((StringBuffer) null, ""bzu`$.qaZQ!n=X"", floatArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a summary of a
 * <code>float</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) {
    appendSummarySize(buffer, fieldName, array.length);
}","public void test075411() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    double[] doubleArray0 = new double[6];
    // Undeclared exception!
    try {
        standardToStringStyle0.appendSummary((StringBuffer) null, ""  "", doubleArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a summary of a
 * <code>double</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) {
    appendSummarySize(buffer, fieldName, array.length);
}","public void test076412() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    // Undeclared exception!
    try {
        standardToStringStyle0.appendSummary(stringBuffer0, ""6.1"", (char[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a summary of a
 * <code>char</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) {
    appendSummarySize(buffer, fieldName, array.length);
}","public void test077413() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
    byte[] byteArray0 = new byte[0];
    // Undeclared exception!
    try {
        toStringStyle0.DEFAULT_STYLE.appendSummary((StringBuffer) null, ""'xy;`27`}"", byteArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a summary of a
 * <code>byte</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendSummary(StringBuffer buffer, String fieldName, Object value) {
    buffer.append(summaryObjectStartText);
    buffer.append(getShortClassName(value.getClass()));
    buffer.append(summaryObjectEndText);
}","public void test078414() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Float float0 = new Float(0.0F);
    // Undeclared exception!
    try {
        standardToStringStyle0.SHORT_PREFIX_STYLE.appendSummary((StringBuffer) null, ""java.specification.name"", float0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> an <code>Object</code>
 * value, printing a summary of the <code>Object</code>.</P>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"public void appendStart(StringBuffer buffer, Object object) {
    if (object != null) {
        appendClassName(buffer, object);
        appendIdentityHashCode(buffer, object);
        appendContentStart(buffer);
        if (fieldSeparatorAtStart) {
            appendFieldSeparator(buffer);
        }
    }
}","public void test079415() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Character character0 = Character.valueOf('=');
    // Undeclared exception!
    try {
        standardToStringStyle0.appendStart((StringBuffer) null, character0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the start of data indicator.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param object  the <code>Object</code> to build a <code>toString</code> for
 */"
"protected void appendFieldSeparator(StringBuffer buffer) {
    buffer.append(fieldSeparator);
}","public void test080416() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.appendFieldSeparator((StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the field separator.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 */"
"protected void appendFieldEnd(StringBuffer buffer, String fieldName) {
    appendFieldSeparator(buffer);
}","public void test081417() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    // Undeclared exception!
    try {
        standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldEnd((StringBuffer) null, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString<code> the field end.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 */"
"public void appendEnd(StringBuffer buffer, Object object) {
    if (this.fieldSeparatorAtEnd == false) {
        removeLastFieldSeparator(buffer);
    }
    appendContentEnd(buffer);
    unregister(object);
}","public void test082418() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.appendEnd((StringBuffer) null, (Object) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the end of data indicator.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param object  the <code>Object</code> to build a
 *  <code>toString</code> for.
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {
    buffer.append(arrayStart);
    for (int i = 0; i < array.length; i++) {
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        appendDetail(buffer, fieldName, array[i]);
    }
    buffer.append(arrayEnd);
}","public void test083419() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""}"");
    // Undeclared exception!
    try {
        standardToStringStyle0.appendDetail(stringBuffer0, ""="", (boolean[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the detail of a
 * <code>boolean</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {
    buffer.append(arrayStart);
    for (int i = 0; i < array.length; i++) {
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        appendDetail(buffer, fieldName, array[i]);
    }
    buffer.append(arrayEnd);
}","public void test084420() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
    short[] shortArray0 = new short[0];
    // Undeclared exception!
    try {
        toStringStyle0.appendDetail((StringBuffer) null, ""<null>"", shortArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the detail of a
 * <code>short</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> the detail of an
 * <code>Object</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */
protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {
    buffer.append(arrayStart);
    for (int i = 0; i < array.length; i++) {
        Object item = array[i];
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        if (item == null) {
            appendNullText(buffer, fieldName);
        } else {
            appendInternal(buffer, fieldName, item, arrayContentDetail);
        }
    }
    buffer.append(arrayEnd);
}","public void test085421() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
    StringBuffer stringBuffer0 = new StringBuffer();
    // Undeclared exception!
    try {
        toStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, ""<"", (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {
    buffer.append(arrayStart);
    for (int i = 0; i < array.length; i++) {
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        appendDetail(buffer, fieldName, array[i]);
    }
    buffer.append(arrayEnd);
}","public void test086422() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    StringBuffer stringBuffer0 = new StringBuffer(4);
    // Undeclared exception!
    try {
        toStringStyle0.appendDetail(stringBuffer0, ""96NF:'d)CA5[~Wm"", (long[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the detail of a
 * <code>long</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {
    buffer.append(arrayStart);
    for (int i = 0; i < array.length; i++) {
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        appendDetail(buffer, fieldName, array[i]);
    }
    buffer.append(arrayEnd);
}","public void test087423() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    int[] intArray0 = new int[4];
    // Undeclared exception!
    try {
        standardToStringStyle0.SIMPLE_STYLE.appendDetail((StringBuffer) null, ""d>-wRj[~]yZPH"", intArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the detail of an
 * <code>int</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {
    buffer.append(arrayStart);
    for (int i = 0; i < array.length; i++) {
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        appendDetail(buffer, fieldName, array[i]);
    }
    buffer.append(arrayEnd);
}","public void test088424() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""#"");
    // Undeclared exception!
    try {
        standardToStringStyle0.appendDetail(stringBuffer0, ""]"", (float[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the detail of a
 * <code>float</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {
    buffer.append(arrayStart);
    for (int i = 0; i < array.length; i++) {
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        appendDetail(buffer, fieldName, array[i]);
    }
    buffer.append(arrayEnd);
}","public void test089425() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(47);
    // Undeclared exception!
    try {
        standardToStringStyle0.SIMPLE_STYLE.appendDetail(stringBuffer0, (String) null, (double[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the detail of a
 * <code>double</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {
    buffer.append(arrayStart);
    for (int i = 0; i < array.length; i++) {
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        appendDetail(buffer, fieldName, array[i]);
    }
    buffer.append(arrayEnd);
}","public void test090426() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    char[] charArray0 = new char[5];
    // Undeclared exception!
    try {
        standardToStringStyle0.appendDetail((StringBuffer) null, ""org.apache.commons.lang3.builder.ToStringStyle$SimpleToStringStyle"", charArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the detail of a
 * <code>char</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {
    buffer.append(arrayStart);
    for (int i = 0; i < array.length; i++) {
        if (i > 0) {
            buffer.append(arraySeparator);
        }
        appendDetail(buffer, fieldName, array[i]);
    }
    buffer.append(arrayEnd);
}","public void test091427() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    // Undeclared exception!
    try {
        standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "","", (byte[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the detail of a
 * <code>byte</code> array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param array  the array to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {
    buffer.append(value);
}","public void test092428() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.appendDetail((StringBuffer) null, ""mx,?+17"", false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a <code>boolean</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, short value) {
    buffer.append(value);
}","public void test093429() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.appendDetail((StringBuffer) null, """", (short) 1821);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a <code>short</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {
    buffer.append(map);
}","public void test094430() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
    WeakHashMap<Character, String> weakHashMap0 = new WeakHashMap<Character, String>();
    // Undeclared exception!
    try {
        toStringStyle0.appendDetail((StringBuffer) null, ""kmcPk,.)S8f(:*|3>z"", weakHashMap0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a <code>Map<code>.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param map  the <code>Map</code> to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {
    buffer.append(value);
}","public void test095431() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Short short0 = new Short((short) 81);
    // Undeclared exception!
    try {
        standardToStringStyle0.DEFAULT_STYLE.appendDetail((StringBuffer) null, ""5*g8"", short0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> an <code>Object</code>
 * value, printing the full detail of the <code>Object</code>.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>,
 *  not <code>null</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, long value) {
    buffer.append(value);
}","public void test096432() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    // Undeclared exception!
    try {
        standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail((StringBuffer) null, """", (-1165L));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a <code>long</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, int value) {
    buffer.append(value);
}","public void test097433() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.SHORT_PREFIX_STYLE.appendDetail((StringBuffer) null, ""r@89NlD0iY0UI"", 105);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> an <code>int</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, float value) {
    buffer.append(value);
}","public void test098434() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.appendDetail((StringBuffer) null, ""[{Wp9"", 200.1037F);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a <code>float</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, double value) {
    buffer.append(value);
}","public void test099435() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.appendDetail((StringBuffer) null, ""*<,+ZmCzhNR<!<#R"", 1.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a <code>double</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */"
"protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {
    buffer.append(value);
}","public void test100436() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.appendDetail((StringBuffer) null, ""MA_Y|U"", (byte) 1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> a <code>byte</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>
 */"
"protected void appendContentStart(StringBuffer buffer) {
    buffer.append(contentStart);
}","public void test101437() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.SHORT_PREFIX_STYLE.appendContentStart((StringBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> the content start.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 */"
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>short</code>
 * array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>
 *  for summary info, <code>null</code> for style decides
 */
public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {
    appendFieldStart(buffer, fieldName);
    if (array == null) {
        appendNullText(buffer, fieldName);
    } else if (isFullDetail(fullDetail)) {
        appendDetail(buffer, fieldName, array);
    } else {
        appendSummary(buffer, fieldName, array);
    }
    appendFieldEnd(buffer, fieldName);
}","public void test102438() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;
    short[] shortArray0 = new short[8];
    // Undeclared exception!
    try {
        toStringStyle0.DEFAULT_STYLE.append((StringBuffer) null, ""4.1"", shortArray0, (Boolean) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {
    appendFieldStart(buffer, fieldName);
    if (array == null) {
        appendNullText(buffer, fieldName);
    } else if (isFullDetail(fullDetail)) {
        appendDetail(buffer, fieldName, array);
    } else {
        appendSummary(buffer, fieldName, array);
    }
    appendFieldEnd(buffer, fieldName);
}","public void test103439() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    Object[] objectArray0 = new Object[1];
    Boolean boolean0 = new Boolean(""java.util.prefs.PreferencesFactory"");
    // Undeclared exception!
    try {
        toStringStyle0.MULTI_LINE_STYLE.append((StringBuffer) null, ""java.util.prefs.PreferencesFactory"", objectArray0, boolean0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> an <code>Object</code>
 * array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the toString
 * @param fullDetail  <code>true</code> for detail, <code>false</code>
 *  for summary info, <code>null</code> for style decides
 */"
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>long</code>
 * array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>
 *  for summary info, <code>null</code> for style decides
 */
public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {
    appendFieldStart(buffer, fieldName);
    if (array == null) {
        appendNullText(buffer, fieldName);
    } else if (isFullDetail(fullDetail)) {
        appendDetail(buffer, fieldName, array);
    } else {
        appendSummary(buffer, fieldName, array);
    }
    appendFieldEnd(buffer, fieldName);
}","public void test104440() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    long[] longArray0 = new long[2];
    // Undeclared exception!
    try {
        toStringStyle0.SHORT_PREFIX_STYLE.append((StringBuffer) null, """", longArray0, (Boolean) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> an <code>int</code>
 * array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>
 *  for summary info, <code>null</code> for style decides
 */
public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {
    appendFieldStart(buffer, fieldName);
    if (array == null) {
        appendNullText(buffer, fieldName);
    } else if (isFullDetail(fullDetail)) {
        appendDetail(buffer, fieldName, array);
    } else {
        appendSummary(buffer, fieldName, array);
    }
    appendFieldEnd(buffer, fieldName);
}","public void test105441() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    int[] intArray0 = new int[3];
    Boolean boolean0 = Boolean.FALSE;
    // Undeclared exception!
    try {
        standardToStringStyle0.append((StringBuffer) null, ""wyHcKx&r3#KM6+J"", intArray0, boolean0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>double</code>
 * array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the toString
 * @param fullDetail  <code>true</code> for detail, <code>false</code>
 *  for summary info, <code>null</code> for style decides
 */
public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {
    appendFieldStart(buffer, fieldName);
    if (array == null) {
        appendNullText(buffer, fieldName);
    } else if (isFullDetail(fullDetail)) {
        appendDetail(buffer, fieldName, array);
    } else {
        appendSummary(buffer, fieldName, array);
    }
    appendFieldEnd(buffer, fieldName);
}","public void test106442() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
    Boolean boolean0 = Boolean.valueOf(false);
    // Undeclared exception!
    try {
        toStringStyle0.SHORT_PREFIX_STYLE.append((StringBuffer) null, ""java.vm.vendor"", (double[]) null, boolean0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>char</code>
 * array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>
 *  for summary info, <code>null</code> for style decides
 */
public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {
    appendFieldStart(buffer, fieldName);
    if (array == null) {
        appendNullText(buffer, fieldName);
    } else if (isFullDetail(fullDetail)) {
        appendDetail(buffer, fieldName, array);
    } else {
        appendSummary(buffer, fieldName, array);
    }
    appendFieldEnd(buffer, fieldName);
}","public void test107443() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.FALSE;
    // Undeclared exception!
    try {
        standardToStringStyle0.append((StringBuffer) null, ""d=Fg@ryywr@HmQ^zjz"", (char[]) null, boolean0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>boolean</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */
public void append(StringBuffer buffer, String fieldName, boolean value) {
    appendFieldStart(buffer, fieldName);
    appendDetail(buffer, fieldName, value);
    appendFieldEnd(buffer, fieldName);
}","public void test108444() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    // Undeclared exception!
    try {
        standardToStringStyle0.NO_FIELD_NAMES_STYLE.append((StringBuffer) null, ""@Pw6=C]h"", false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>short</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */
public void append(StringBuffer buffer, String fieldName, short value) {
    appendFieldStart(buffer, fieldName);
    appendDetail(buffer, fieldName, value);
    appendFieldEnd(buffer, fieldName);
}","public void test109445() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    // Undeclared exception!
    try {
        standardToStringStyle0.NO_FIELD_NAMES_STYLE.append((StringBuffer) null, ""zkk\""\""v!j.#09xhx<w"", (short) (-1221));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>long</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */
public void append(StringBuffer buffer, String fieldName, long value) {
    appendFieldStart(buffer, fieldName);
    appendDetail(buffer, fieldName, value);
    appendFieldEnd(buffer, fieldName);
}","public void test110446() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    // Undeclared exception!
    try {
        standardToStringStyle0.SHORT_PREFIX_STYLE.append((StringBuffer) null, """", 0L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>float</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */
public void append(StringBuffer buffer, String fieldName, float value) {
    appendFieldStart(buffer, fieldName);
    appendDetail(buffer, fieldName, value);
    appendFieldEnd(buffer, fieldName);
}","public void test111447() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.SHORT_PREFIX_STYLE.append((StringBuffer) null, ""org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle"", (-2245.6836F));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>double</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */
public void append(StringBuffer buffer, String fieldName, double value) {
    appendFieldStart(buffer, fieldName);
    appendDetail(buffer, fieldName, value);
    appendFieldEnd(buffer, fieldName);
}","public void test112448() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    // Undeclared exception!
    try {
        standardToStringStyle0.append((StringBuffer) null, (String) null, 0.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>char</code>
 * value.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 */
public void append(StringBuffer buffer, String fieldName, char value) {
    appendFieldStart(buffer, fieldName);
    appendDetail(buffer, fieldName, value);
    appendFieldEnd(buffer, fieldName);
}","public void test113449() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    // Undeclared exception!
    try {
        toStringStyle0.SIMPLE_STYLE.append((StringBuffer) null, ""`IP[a^(:(%AJL"", 'T');
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test115452() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test115453() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test115454() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test115455() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test115456() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test115457() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test115458() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test115459() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test115460() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test115461() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test115462() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test115463() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test115464() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test115465() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test115466() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test115467() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test115468() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test115469() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test115470() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test115471() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(57);
    standardToStringStyle0.appendToString(stringBuffer0, (String) null);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test116473() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setSummaryObjectEndText((String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test117474() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test117475() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test117476() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test117477() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test117478() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test117479() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test117480() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test117481() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test117482() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test117483() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test117484() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test117485() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test117486() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test117487() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test117488() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test117489() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test117490() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test117491() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test117492() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test117493() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectEndText(""B5KX"");
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test118495() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setSummaryObjectStartText((String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test119497() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setSizeStartText((String) null);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test120498() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test120499() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test120500() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test120501() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test120502() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test120503() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test120504() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test120505() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test120506() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test120507() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test120508() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test120509() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test120510() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test120511() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test120512() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test120513() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test120514() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test120515() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test120516() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test120517() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setNullText((String) null);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"protected void setFieldSeparator(String fieldSeparator) {
    if (fieldSeparator == null) {
        fieldSeparator = """";
    }
    this.fieldSeparator = fieldSeparator;
}","public void test121518() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;
    toStringStyle0.setFieldSeparator((String) null);
}","/**
 * <p>Sets the field separator text.</p>
 *
 * <p><code>null</code> is accepted, but will be converted to
 * an empty String.</p>
 *
 * @param fieldSeparator  the new field separator text
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test122519() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setFieldSeparator(""double"");
    assertEquals(""double"", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test123520() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test123521() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setFieldNameValueSeparator((String) null);
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertNotNull(string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test123522() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setFieldNameValueSeparator((String) null);
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test124523() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setFieldNameValueSeparator(""<"");
    assertEquals(""<"", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test125524() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test125525() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test125526() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test125527() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test125528() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test125529() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test125530() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test125531() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test125532() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test125533() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test125534() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test125535() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test125536() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test125537() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test125538() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test125539() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test125540() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test125541() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test125542() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test125543() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentEnd((String) null);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test126544() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test126545() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test126546() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test126547() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test126548() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test126549() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test126550() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test126551() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test126552() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test126553() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test126554() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test126555() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test126556() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test126557() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test126558() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test126559() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test126560() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test126561() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test126562() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test126563() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setContentStart((String) null);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test127564() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setContentStart(""T"");
    assertEquals(""T"", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test128565() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test128566() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test128567() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test128568() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test128569() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test128570() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test128571() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test128572() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test128573() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test128574() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test128575() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test128576() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test128577() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test128578() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test128579() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test128580() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test128581() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test128582() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test128583() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test128584() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.setArraySeparator((String) null);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test129585() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test129586() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test129587() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test129588() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test129589() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test129590() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test129591() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test129592() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test129593() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test129594() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test129595() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test129596() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test129597() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test129598() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test129599() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test129600() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test129601() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test129602() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test129603() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test129604() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.DEFAULT_STYLE.setArraySeparator(""'Q=6Y_YwN"");
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test130605() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test130606() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setArrayEnd((String) null);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"protected void setArrayEnd(String arrayEnd) {
    if (arrayEnd == null) {
        arrayEnd = """";
    }
    this.arrayEnd = arrayEnd;
}","public void test131607() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    toStringStyle0.setArrayEnd("""");
}","/**
 * <p>Sets the array end text.</p>
 *
 * <p><code>null</code> is accepted, but will be converted to
 * an empty String.</p>
 *
 * @param arrayEnd  the new array end text
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test132608() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test132609() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setArrayStart((String) null);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test133610() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setArrayStart(""double"");
    assertEquals(""double"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test134611() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test134612() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test134613() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test134614() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test134615() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test134616() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test134617() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test134618() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test134619() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test134620() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test134621() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test134622() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test134623() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test134625() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test134626() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test134627() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test134628() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test134629() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test134630() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test134631() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""6x(8n1{-z*-A"");
    standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> the class name.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param object  the <code>Object</code> whose name to output
 */
protected void appendClassName(StringBuffer buffer, Object object) {
    if (useClassName && object != null) {
        register(object);
        if (useShortClassName) {
            buffer.append(getShortClassName(object.getClass()));
        } else {
            buffer.append(object.getClass().getName());
        }
    }
}","public void test136634() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    toStringStyle0.appendClassName((StringBuffer) null, (Object) null);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test141644() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(""_+X$'k"");
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = new Boolean(true);
    standardToStringStyle0.append(stringBuffer0, "" mdg#l]7c,y)JiFrS9"", (float[]) null, boolean0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test145652() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""}"");
    Boolean boolean0 = new Boolean((String) null);
    standardToStringStyle0.append(stringBuffer0, """", (double[]) null, boolean0);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test146654() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""<size="");
    char[] charArray0 = new char[3];
    Boolean boolean0 = new Boolean(true);
    standardToStringStyle0.append(stringBuffer0, ""}"", charArray0, boolean0);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test148658() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""<size="");
    Boolean boolean0 = Boolean.valueOf(""org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle"");
    char[] charArray0 = new char[3];
    standardToStringStyle0.append(stringBuffer0, ""}"", charArray0, boolean0);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>byte</code>
 * array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>
 *  for summary info, <code>null</code> for style decides
 */
public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {
    appendFieldStart(buffer, fieldName);
    if (array == null) {
        appendNullText(buffer, fieldName);
    } else if (isFullDetail(fullDetail)) {
        appendDetail(buffer, fieldName, array);
    } else {
        appendSummary(buffer, fieldName, array);
    }
    appendFieldEnd(buffer, fieldName);
}","public void test150661() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    byte[] byteArray0 = new byte[0];
    Boolean boolean0 = new Boolean(""8?}}"");
    // Undeclared exception!
    try {
        standardToStringStyle0.append((StringBuffer) null, (String) null, byteArray0, boolean0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test155671() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Boolean boolean0 = Boolean.valueOf(""CcVeA>G=R# YV"");
    standardToStringStyle0.DEFAULT_STYLE.append(stringBuffer0, ""!(nk4mYe)Qg"", (int[]) null, boolean0);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test157675() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";"");
    long[] longArray0 = new long[4];
    standardToStringStyle0.append(stringBuffer0, "";"", longArray0, (Boolean) null);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test161683() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
    standardToStringStyle0.SHORT_PREFIX_STYLE.appendInternal(stringBuffer0, """", linkedList0, true);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test162685() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("""");
    LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
    Boolean boolean0 = new Boolean("""");
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.append(stringBuffer0, """", (Object) linkedList0, boolean0);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> an <code>Object</code>
 * value, printing the full <code>toString</code> of the
 * <code>Object</code> passed in.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param value  the value to add to the <code>toString</code>
 * @param fullDetail  <code>true</code> for detail, <code>false</code>
 *  for summary info, <code>null</code> for style decides
 */
public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {
    appendFieldStart(buffer, fieldName);
    if (value == null) {
        appendNullText(buffer, fieldName);
    } else {
        appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));
    }
    appendFieldEnd(buffer, fieldName);
}","public void test163686() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = new Boolean(true);
    // Undeclared exception!
    try {
        standardToStringStyle0.NO_FIELD_NAMES_STYLE.append((StringBuffer) null, ""Windows"", (Object) null, boolean0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test164687() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test164688() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test164689() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test164690() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test164691() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test164692() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test164693() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test164694() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test164695() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test164696() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test164697() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test164698() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test164699() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test164700() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test164701() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test164702() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test164703() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test164704() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test164705() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test164706() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    stringBuffer0.appendCodePoint(12);
    standardToStringStyle0.MULTI_LINE_STYLE.appendEnd(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test167712() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.setFieldSeparatorAtEnd(true);
    standardToStringStyle0.appendEnd(stringBuffer0, stringBuffer0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test169714() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test169715() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test169716() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test169717() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test169718() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test169719() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test169720() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test169721() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test169722() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test169723() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test169724() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test169725() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test169726() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test169727() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test169728() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test169729() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test169730() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test169731() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test169732() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test169733() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendStart(stringBuffer0, (Object) null);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> the superclass toString.</p>
 * <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p>
 *
 * <p>A <code>null</code> <code>superToString</code> is ignored.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param superToString  the <code>super.toString()</code>
 * @since 2.0
 */
public void appendSuper(StringBuffer buffer, String superToString) {
    appendToString(buffer, superToString);
}","public void test171737() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE;
    toStringStyle0.SHORT_PREFIX_STYLE.appendSuper((StringBuffer) null, ""]"");
}",""
"protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {
    if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {
        appendCyclicObject(buffer, fieldName, value);
        return;
    }
    register(value);
    try {
        if (value instanceof Collection<?>) {
            if (detail) {
                appendDetail(buffer, fieldName, (Collection<?>) value);
            } else {
                appendSummarySize(buffer, fieldName, ((Collection<?>) value).size());
            }
        } else if (value instanceof Map<?, ?>) {
            if (detail) {
                appendDetail(buffer, fieldName, (Map<?, ?>) value);
            } else {
                appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size());
            }
        } else if (value instanceof long[]) {
            if (detail) {
                appendDetail(buffer, fieldName, (long[]) value);
            } else {
                appendSummary(buffer, fieldName, (long[]) value);
            }
        } else if (value instanceof int[]) {
            if (detail) {
                appendDetail(buffer, fieldName, (int[]) value);
            } else {
                appendSummary(buffer, fieldName, (int[]) value);
            }
        } else if (value instanceof short[]) {
            if (detail) {
                appendDetail(buffer, fieldName, (short[]) value);
            } else {
                appendSummary(buffer, fieldName, (short[]) value);
            }
        } else if (value instanceof byte[]) {
            if (detail) {
                appendDetail(buffer, fieldName, (byte[]) value);
            } else {
                appendSummary(buffer, fieldName, (byte[]) value);
            }
        } else if (value instanceof char[]) {
            if (detail) {
                appendDetail(buffer, fieldName, (char[]) value);
            } else {
                appendSummary(buffer, fieldName, (char[]) value);
            }
        } else if (value instanceof double[]) {
            if (detail) {
                appendDetail(buffer, fieldName, (double[]) value);
            } else {
                appendSummary(buffer, fieldName, (double[]) value);
            }
        } else if (value instanceof float[]) {
            if (detail) {
                appendDetail(buffer, fieldName, (float[]) value);
            } else {
                appendSummary(buffer, fieldName, (float[]) value);
            }
        } else if (value instanceof boolean[]) {
            if (detail) {
                appendDetail(buffer, fieldName, (boolean[]) value);
            } else {
                appendSummary(buffer, fieldName, (boolean[]) value);
            }
        } else if (value.getClass().isArray()) {
            if (detail) {
                appendDetail(buffer, fieldName, (Object[]) value);
            } else {
                appendSummary(buffer, fieldName, (Object[]) value);
            }
        } else {
            if (detail) {
                appendDetail(buffer, fieldName, value);
            } else {
                appendSummary(buffer, fieldName, value);
            }
        }
    } finally {
        unregister(value);
    }
}","public void test173740() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(0);
    // Undeclared exception!
    try {
        standardToStringStyle0.appendInternal(stringBuffer0, ""]"", (Object) null, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.apache.commons.lang3.builder.ToStringStyle"", e);
    }
}","/**
 * <p>Append to the <code>toString</code> an <code>Object</code>,
 * correctly interpreting its type.</p>
 *
 * <p>This method performs the main lookup by Class type to correctly
 * route arrays, <code>Collections</code>, <code>Maps</code> and
 * <code>Objects</code> to the appropriate method.</p>
 *
 * <p>Either detail or summary views can be specified.</p>
 *
 * <p>If a cycle is detected, an object will be appended with the
 * <code>Object.toString()</code> format.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name, typically not used as already appended
 * @param value  the value to add to the <code>toString</code>,
 *  not <code>null</code>
 * @param detail  output detail or not
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test176745() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test176746() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test176747() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test176748() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test176749() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test176750() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test176751() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test176752() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test176753() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test176754() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test176755() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test176756() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test176757() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test176758() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test176759() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test176760() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test176761() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test176762() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test176763() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test176764() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SIMPLE_STYLE.appendEnd(stringBuffer0, stringBuffer0);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test177766() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""<"");
    float[] floatArray0 = new float[6];
    standardToStringStyle0.SIMPLE_STYLE.appendSummary(stringBuffer0, ""<"", floatArray0);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test179770() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.SHORT_PREFIX_STYLE.append(stringBuffer0, (String) null, (short) 0);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"protected void setDefaultFullDetail(boolean defaultFullDetail) {
    this.defaultFullDetail = defaultFullDetail;
}","public void test180771() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    toStringStyle0.MULTI_LINE_STYLE.setDefaultFullDetail(true);
}","/**
 * <p>Sets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @param defaultFullDetail  the new defaultFullDetail flag
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test181773() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    boolean[] booleanArray0 = new boolean[1];
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendSummary(stringBuffer0, "">"", booleanArray0);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test182775() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer(""<"");
    standardToStringStyle0.SIMPLE_STYLE.append(stringBuffer0, ""<"", 456);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test183776() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test183777() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setArrayContentDetail(false);
    boolean boolean0 = standardToStringStyle0.isArrayContentDetail();
    assertFalse(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test183778() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setArrayContentDetail(false);
    boolean boolean0 = standardToStringStyle0.isArrayContentDetail();
    assertFalse(boolean0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
protected String getContentStart() {
    return contentStart;
}","public void test184779() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    String string0 = toStringStyle0.getContentStart();
    assertEquals(""["", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test185780() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test185781() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test185782() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test185783() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test185784() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test185785() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test185786() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test185787() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test185788() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test185789() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test185790() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test185791() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test185792() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test185793() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test185794() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test185795() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test185796() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test185797() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test185798() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test185799() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.appendCyclicObject(stringBuffer0, """", standardToStringStyle0);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test186801() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.append(stringBuffer0, """", true);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test187803() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    Object[] objectArray0 = new Object[5];
    Boolean boolean0 = Boolean.valueOf(false);
    standardToStringStyle0.SIMPLE_STYLE.append(stringBuffer0, ""Windows"", objectArray0, boolean0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test188804() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test188805() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setFieldSeparatorAtEnd(true);
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertTrue(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test188806() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.setFieldSeparatorAtEnd(true);
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertTrue(boolean0);
}",""
"// Setters and getters for the customizable parts of the style
// These methods are not expected to be overridden, except to make public
// (They are not public so that immutable subclasses can be written)
//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
protected boolean isUseClassName() {
    return useClassName;
}","public void test189807() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;
    boolean boolean0 = toStringStyle0.isUseClassName();
    assertTrue(boolean0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test190809() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ""}"");
    char[] charArray0 = new char[6];
    standardToStringStyle0.appendSummary(stringBuffer0, ""O%P:|%z8f)ob,qrK"", charArray0);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test191810() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test191811() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test191812() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test191813() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test191814() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test191815() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test191816() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test191817() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test191818() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test191819() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test191820() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test191821() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test191822() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test191823() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test191824() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test191825() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test191826() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test191827() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test191828() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test191829() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.MULTI_LINE_STYLE.appendSummary(stringBuffer0, ""double"", ""double"");
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test192830() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test192831() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test192832() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test192833() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test192834() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test192835() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test192836() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test192837() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test192838() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test192839() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test192840() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test192841() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test192842() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test192843() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test192844() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test192845() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test192846() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test192847() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test192848() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test192849() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer("";v.kmBuy(g/,"");
    LinkedList<StandardToStringStyle> linkedList0 = new LinkedList<StandardToStringStyle>();
    standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, "":Eyhv?(a6;Ii?2"", linkedList0);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test193851() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "","");
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    int[] intArray0 = new int[5];
    standardToStringStyle0.appendSummary(stringBuffer0, "","", intArray0);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test194852() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals("">"", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test194853() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test194854() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test194855() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test194856() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test194857() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test194858() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test194859() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test194860() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test194861() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test194862() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test194863() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test194864() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test194865() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test194866() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test194867() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test194868() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test194869() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test194870() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test194871() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectEndText();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test195872() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test195873() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test195874() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test195875() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test195876() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test195877() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test195878() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test195879() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test195880() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test195881() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test195882() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test195883() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test195884() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test195885() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test195886() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals(""="", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test195887() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test195888() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test195889() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test195890() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test195891() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldNameValueSeparator();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test196892() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals("","", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test196893() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test196894() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test196895() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test196896() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test196897() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test196898() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test196899() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test196900() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test196901() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test196902() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test196903() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test196904() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test196905() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test196906() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test196907() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test196908() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test196909() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test196910() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test196911() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getFieldSeparator();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test198915() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(1395);
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.MULTI_LINE_STYLE.append(stringBuffer0, ""["", 0.0F);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test200918() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test200919() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test200920() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test200921() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test200922() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test200923() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test200924() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test200925() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test200926() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test200927() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test200928() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test200929() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test200930() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertFalse(boolean0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test200931() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test200932() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test200933() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test200934() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test200935() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test200936() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test200937() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test201939() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    standardToStringStyle0.append(stringBuffer0, ""jf$Qb>`iQb@,"", 'y');
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"protected void setUseClassName(boolean useClassName) {
    this.useClassName = useClassName;
}","public void test202940() throws Throwable {
    ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE;
    toStringStyle0.setUseClassName(true);
}","/**
 * <p>Sets whether to use the class name.</p>
 *
 * @param useClassName  the new useClassName flag
 */"
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test203941() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test203942() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test203943() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test203944() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test203945() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test203946() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test203947() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals(""<"", string0);
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test203948() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test203949() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test203950() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test203951() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test203952() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test203953() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test203954() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test203955() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test203956() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test203957() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test203958() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test203959() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test203960() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    String string0 = standardToStringStyle0.getSummaryObjectStartText();
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test205964() throws Throwable {
    StringBuffer stringBuffer0 = new StringBuffer(""java.awt.graphicsenv"");
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    standardToStringStyle0.appendDetail(stringBuffer0, (String) null, (short) (-207));
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
"//----------------------------------------------------------------------------
/**
 * <p>Append to the <code>toString</code> a <code>boolean</code>
 * array.</p>
 *
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param fieldName  the field name
 * @param array  the array to add to the toString
 * @param fullDetail  <code>true</code> for detail, <code>false</code>
 *  for summary info, <code>null</code> for style decides
 */
public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {
    appendFieldStart(buffer, fieldName);
    if (array == null) {
        appendNullText(buffer, fieldName);
    } else if (isFullDetail(fullDetail)) {
        appendDetail(buffer, fieldName, array);
    } else {
        appendSummary(buffer, fieldName, array);
    }
    appendFieldEnd(buffer, fieldName);
}","public void test206965() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    Boolean boolean0 = Boolean.FALSE;
    // Undeclared exception!
    try {
        standardToStringStyle0.SIMPLE_STYLE.append((StringBuffer) null, """", (boolean[]) null, boolean0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content end text.</p>
 *
 * @return the current content end text
 */
@Override
public String getContentEnd() {
    return super.getContentEnd();
}","public void test207966() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals(""]"", standardToStringStyle0.getContentEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the content start text.</p>
 *
 * @return the current content start text
 */
@Override
public String getContentStart() {
    return super.getContentStart();
}","public void test207967() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals(""["", standardToStringStyle0.getContentStart());
}",""
"//---------------------------------------------------------------------
/**
 * Gets the end text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of size text
 */
@Override
public String getSizeEndText() {
    return super.getSizeEndText();
}","public void test207968() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals("">"", standardToStringStyle0.getSizeEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field name value separator text.</p>
 *
 * @return the current field name value separator text
 */
@Override
public String getFieldNameValueSeparator() {
    return super.getFieldNameValueSeparator();
}","public void test207969() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals(""="", standardToStringStyle0.getFieldNameValueSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the identity hash code.</p>
 * @return the current useIdentityHashCode flag
 */
@Override
public boolean isUseIdentityHashCode() {
    return super.isUseIdentityHashCode();
}","public void test207970() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertTrue(standardToStringStyle0.isUseIdentityHashCode());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the field separator text.</p>
 *
 * @return the current field separator text
 */
@Override
public String getFieldSeparator() {
    return super.getFieldSeparator();
}","public void test207971() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals("","", standardToStringStyle0.getFieldSeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the field names passed in.</p>
 *
 * @return the current useFieldNames flag
 */
@Override
public boolean isUseFieldNames() {
    return super.isUseFieldNames();
}","public void test207972() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertTrue(standardToStringStyle0.isUseFieldNames());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the end text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <p>This is output after the size value.</p>
 *
 * @return the current end of summary text
 */
@Override
public String getSummaryObjectEndText() {
    return super.getSummaryObjectEndText();
}","public void test207973() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals("">"", standardToStringStyle0.getSummaryObjectEndText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array separator text.</p>
 *
 * @return the current array separator text
 */
@Override
public String getArraySeparator() {
    return super.getArraySeparator();
}","public void test207974() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals("","", standardToStringStyle0.getArraySeparator());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when a <code>Collection</code>,
 * <code>Map</code> or <code>Array</code> size is output.</p>
 *
 * <p>This is output before the size value.</p>
 *
 * @return the current start of size text
 */
@Override
public String getSizeStartText() {
    return super.getSizeStartText();
}","public void test207975() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals(""<size="", standardToStringStyle0.getSizeStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the end
 * of each buffer.</p>
 *
 * @return fieldSeparatorAtEnd flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtEnd() {
    return super.isFieldSeparatorAtEnd();
}","public void test207976() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether the field separator should be added at the start
 * of each buffer.</p>
 *
 * @return the fieldSeparatorAtStart flag
 * @since 2.0
 */
@Override
public boolean isFieldSeparatorAtStart() {
    return super.isFieldSeparatorAtStart();
}","public void test207977() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertFalse(standardToStringStyle0.isFieldSeparatorAtStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array end text.</p>
 *
 * @return the current array end text
 */
@Override
public String getArrayEnd() {
    return super.getArrayEnd();
}","public void test207978() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals(""}"", standardToStringStyle0.getArrayEnd());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the array start text.</p>
 *
 * @return the current array start text
 */
@Override
public String getArrayStart() {
    return super.getArrayStart();
}","public void test207979() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals(""{"", standardToStringStyle0.getArrayStart());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the start text to output when an <code>Object</code> is
 * output in summary mode.</p>
 *
 * <P>This is output before the size value.</p>
 *
 * @return the current start of summary text
 */
@Override
public String getSummaryObjectStartText() {
    return super.getSummaryObjectStartText();
}","public void test207980() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals(""<"", standardToStringStyle0.getSummaryObjectStartText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output array content detail.</p>
 *
 * @return the current array content detail setting
 */
@Override
public boolean isArrayContentDetail() {
    return super.isArrayContentDetail();
}","public void test207981() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertTrue(standardToStringStyle0.isArrayContentDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use full detail when the caller doesn't
 * specify.</p>
 *
 * @return the current defaultFullDetail flag
 */
@Override
public boolean isDefaultFullDetail() {
    return super.isDefaultFullDetail();
}","public void test207982() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertTrue(standardToStringStyle0.isDefaultFullDetail());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to use the class name.</p>
 *
 * @return the current useClassName flag
 */
@Override
public boolean isUseClassName() {
    return super.isUseClassName();
}","public void test207983() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertTrue(standardToStringStyle0.isUseClassName());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets the text to output when <code>null</code> found.</p>
 *
 * @return the current text to output when <code>null</code> found
 */
@Override
public String getNullText() {
    return super.getNullText();
}","public void test207984() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertEquals(""<null>"", standardToStringStyle0.getNullText());
}",""
"//---------------------------------------------------------------------
/**
 * <p>Gets whether to output short or long class names.</p>
 *
 * @return the current useShortClassName flag
 * @since 2.0
 */
@Override
public boolean isUseShortClassName() {
    return super.isUseShortClassName();
}","public void test207985() throws Throwable {
    StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();
    StringBuffer stringBuffer0 = new StringBuffer();
    WeakHashMap<Float, StandardToStringStyle> weakHashMap0 = new WeakHashMap<Float, StandardToStringStyle>();
    standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, """", weakHashMap0);
    assertFalse(standardToStringStyle0.isUseShortClassName());
}",""
