/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 16 02:33:40 GMT 2023
 */
package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.apache.commons.lang.ClassUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class ClassUtils_ESTest extends ClassUtils_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        classLoader0.clearAssertionStatus();
        Class<?> class0 = ClassUtils.getClass(classLoader0, "short", false);
        Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 7);
        Class<Integer> class1 = Integer.class;
        classArray0[0] = class1;
        Class<Integer> class2 = Integer.class;
        classArray0[4] = class2;
        Class<Integer> class3 = Integer.class;
        classArray0[2] = class3;
        Class<Integer> class4 = Integer.class;
        classArray0[3] = class4;
        Class<Integer> class5 = Integer.class;
        classArray0[4] = class5;
        Class<Integer> class6 = Integer.class;
        classArray0[5] = class6;
        Class<Integer> class7 = Integer.class;
        classArray0[6] = class7;
        ClassUtils.wrappersToPrimitives(classArray0);
        Class<Byte> class8 = Byte.class;
        ClassUtils.getPackageCanonicalName(class8);
        ClassUtils.getPackageName("4B9o");
        ClassUtils.getShortClassName((Object) class1, "");
        Class<Object>[] classArray1 = (Class<Object>[]) Array.newInstance(Class.class, 9);
        ClassUtils.isAssignable(classArray1, classArray1);
        ClassUtils.getShortClassName((Object) "", "|");
        ClassUtils.getPackageCanonicalName((Object) class0, "java.lang");
        ClassUtils.getPackageName(class1);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        ClassUtils classUtils0 = new ClassUtils();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.pollLast();
        ClassUtils.convertClassNamesToClasses(linkedList0);
        Class<Long> class0 = Long.class;
        Class<String> class1 = String.class;
        boolean boolean0 = true;
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
        classArray0[0] = class1;
        classArray0[1] = class1;
        classArray0[2] = class1;
        Class<String> class2 = String.class;
        classArray0[3] = class2;
        classArray0[4] = class1;
        Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
        Predicate<Object> predicate1 = predicate0.and(predicate0);
        Predicate<Object> predicate2 = predicate1.or(predicate0);
        Predicate<Object> predicate3 = predicate2.negate();
        linkedList0.removeIf(predicate3);
        ClassUtils.convertClassNamesToClasses(linkedList0);
        ClassUtils.isAssignable(classArray0, classArray0);
        ClassUtils.isAssignable(class0, class1, true);
        ClassUtils.getShortCanonicalName("$");
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassUtils.getClass(classLoader0, ";", true);
        Class<ClassUtils> class3 = ClassUtils.class;
        ClassUtils.getPackageCanonicalName(class3);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
        Class<Byte> class0 = Byte.class;
        classArray0[0] = class0;
        Class<Byte> class1 = Byte.class;
        Class<Byte> class2 = Byte.class;
        classArray0[3] = class2;
        Class<Byte> class3 = Byte.class;
        classArray0[5] = class3;
        ClassUtils.isAssignable(classArray0, classArray0, true);
        Class<Long> class4 = Long.TYPE;
        ClassUtils.isAssignable(classArray0[1], class4);
        Class<ClassUtils> class5 = ClassUtils.class;
        ClassUtils.isAssignable(class0, class5);
        ClassUtils.getAllSuperclasses(classArray0[1]);
        String string0 = null;
        ClassUtils.isInnerClass(class1);
        ClassUtils.getShortCanonicalName("]$;)");
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassLoader classLoader1 = classLoader0.getParent();
        classLoader0.setDefaultAssertionStatus(true);
        Class<?> class6 = ClassUtils.getClass(classLoader1, "]$;)");
        ClassUtils.getAllSuperclasses(class6);
        ClassUtils.getPackageCanonicalName(string0);
        ClassUtils.getShortClassName(string0);
        Class<Object> class7 = Object.class;
        ClassUtils.wrapperToPrimitive(class7);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.wrapperToPrimitive(class0);
        Object object0 = new Object();
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
        ClassUtils.primitivesToWrappers(classArray0);
        ClassUtils.getAllSuperclasses((Class<?>) null);
        ClassUtils.getPackageCanonicalName((Class<?>) null);
        ClassUtils.getShortClassName((Object) null, "Windows 9");
        ClassLoader.getSystemClassLoader();
        Class<Integer> class1 = Integer.class;
        ClassUtils.primitiveToWrapper(class1);
        Class<Integer> class2 = Integer.class;
        ClassUtils.wrapperToPrimitive(class2);
        Class<Double> class3 = Double.class;
        ClassUtils.getShortClassName(class3);
        ClassUtils.getPackageCanonicalName((Object) null, "");
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        ClassUtils.getShortCanonicalName("");
        Class<Double> class0 = Double.class;
        ClassUtils.getShortCanonicalName(class0);
        ClassUtils.getPackageName((Object) "", "Double");
        ClassUtils.getShortClassName(class0);
        Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 8);
        Class<Integer> class1 = Integer.class;
        classArray0[0] = class1;
        Class<Integer> class2 = Integer.class;
        classArray0[1] = class2;
        Class<Integer> class3 = Integer.class;
        classArray0[2] = class3;
        Class<Integer> class4 = Integer.class;
        classArray0[3] = class4;
        Class<Integer> class5 = Integer.class;
        classArray0[4] = class5;
        Class<Integer> class6 = Integer.class;
        classArray0[5] = class6;
        Class<Integer> class7 = Integer.class;
        classArray0[6] = class7;
        Class<Integer> class8 = Integer.class;
        classArray0[7] = class8;
        ClassUtils.isAssignable(classArray0, classArray0);
        Class<Boolean> class9 = Boolean.class;
        ClassUtils.primitiveToWrapper(class9);
        ClassUtils.getClass("", false);
        ClassUtils.primitivesToWrappers(classArray0);
        byte byte0 = (byte) 0;
        Byte byte1 = null;
        byte1 = new Byte(byte0);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 6);
        Class<Double> class0 = Double.class;
        classArray0[0] = class0;
        Class<Double> class1 = Double.class;
        classArray0[1] = class1;
        Class<Double> class2 = Double.class;
        classArray0[2] = class2;
        Class<Double> class3 = Double.class;
        classArray0[3] = class3;
        Class<Double> class4 = Double.class;
        classArray0[4] = class4;
        classArray0[5] = class0;
        ClassUtils.primitivesToWrappers(classArray0);
        ClassUtils.getPackageName(class0);
        Class<Byte> class5 = Byte.class;
        ClassUtils.getPackageName(class5);
        Class<Short> class6 = Short.class;
        ClassUtils.getAllInterfaces(class6);
        ClassUtils.getShortCanonicalName("java.lang");
        String string0 = ",";
        ClassUtils.getPackageCanonicalName((Object) class1, ",");
        Byte byte0 = new Byte((byte) 113);
        Byte.toUnsignedLong((byte) 113);
        ClassUtils.getPackageName((Object) byte0, "float");
        ClassUtils.getShortClassName(class2);
        ClassUtils.getPublicMethod(class0, "float", classArray0);
        ClassUtils.getShortCanonicalName(classArray0[2]);
        Class<Object> class7 = Object.class;
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add("Ua");
        linkedList0.set(0, "java.vm.specification.name");
        linkedList0.add("Ua");
        linkedList0.add("Ua");
        List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0);
        Object[] objectArray0 = new Object[2];
        Object object0 = new Object();
        objectArray0[0] = object0;
        linkedList0.clone();
        objectArray0[1] = (Object) "Ua";
        Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
        ClassUtils.getShortCanonicalName("Ua");
        Class<Short> class0 = Short.class;
        linkedList0.add("java.vm.specification.name");
        Class<?> class1 = ClassUtils.primitiveToWrapper(class0);
        ClassUtils.convertClassesToClassNames(list0);
        linkedList0.add("Ua");
        Class<Long> class2 = Long.class;
        Class<Byte> class3 = Byte.TYPE;
        ClassUtils.isAssignable(class2, class3, true);
        ClassUtils.isAssignable(classArray0, classArray0, true);
        Class<Object> class4 = Object.class;
        ClassUtils.isAssignable(class1, class4);
        Class<String> class5 = String.class;
        ClassUtils.isInnerClass(class5);
        ClassUtils.getShortClassName((Class<?>) null);
        ClassUtils.getPackageName("I");
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 3);
        Class<Short> class0 = Short.class;
        classArray0[0] = class0;
        Class<Short> class1 = Short.class;
        classArray0[1] = class1;
        Class<Short> class2 = Short.class;
        classArray0[2] = class2;
        ClassUtils.wrappersToPrimitives((Class<?>[]) null);
        ClassUtils.primitivesToWrappers(classArray0);
        ClassUtils.getPackageCanonicalName("H#SP\"<<\"O6D3V");
        ClassUtils.primitivesToWrappers((Class<?>[]) null);
        ClassUtils.getAllInterfaces(class0);
        ClassUtils.convertClassNamesToClasses((List<String>) null);
        ClassUtils.wrappersToPrimitives(classArray0);
        Class<String> class3 = String.class;
        ClassUtils.primitiveToWrapper(class3);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 3);
        Class<Short> class0 = Short.class;
        Class<Short> class1 = Short.class;
        classArray0[1] = class1;
        Class<Short> class2 = Short.class;
        classArray0[2] = class2;
        Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
        Object object0 = new Object();
        ClassUtils.getShortCanonicalName(object0, "long");
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        classLoader0.getParent();
        Class<?> class3 = ClassUtils.getClass(classLoader0, "long", true);
        classLoader0.setClassAssertionStatus("long", false);
        Class<Object> class4 = Object.class;
        ClassUtils.isAssignable(class3, class4, true);
        ClassUtils.primitivesToWrappers(classArray0);
        ClassUtils.getPackageCanonicalName("H#SP\"<<\"O6D3V");
        ClassUtils.getAllInterfaces(class3);
        ClassUtils.getAllSuperclasses(class3);
        ClassUtils.primitivesToWrappers(classArray1);
        ClassUtils.getAllInterfaces(class0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        ClassUtils.getShortCanonicalName("[");
        ClassUtils.getClass("', has a length less than 2");
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 3);
        Class<Double> class0 = Double.class;
        classArray0[0] = class0;
        Class<Double> class1 = Double.class;
        classArray0[1] = class1;
        Class<Double> class2 = Double.class;
        classArray0[2] = class2;
        ClassUtils.primitivesToWrappers(classArray0);
        Class<String> class3 = String.class;
        ClassUtils.getAllSuperclasses(class3);
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        String string0 = "e-z^AVGvK& J7";
        String string1 = "T%<D b&XXJ";
        classLoader0.setPackageAssertionStatus("T%<D b&XXJ", false);
        classLoader0.getParent();
        classLoader0.setPackageAssertionStatus("e-z^AVGvK& J7", true);
        classLoader0.setDefaultAssertionStatus(false);
        classLoader0.clearAssertionStatus();
        String string2 = "oER)K[]";
        ClassLoader.getSystemClassLoader();
        classLoader0.setPackageAssertionStatus("T%<D b&XXJ", true);
        Class<Long> class4 = Long.class;
        ClassUtils.getPackageCanonicalName(class4);
        ClassUtils.getClass(classLoader0, "oER)K[]");
        ClassUtils.getClass(classLoader0, string2);
        ClassUtils.getClass(string0);
        String string3 = "[java.lang.Object";
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 1);
        Class<Byte> class0 = Byte.TYPE;
        classArray0[0] = class0;
        ClassUtils.isAssignable(classArray0, classArray0, true);
        ClassUtils.getShortCanonicalName("LINUX");
        ClassUtils.isAssignable(classArray0, classArray0, true);
        ClassUtils.getShortCanonicalName((Object) class0, "LINUX");
        List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
        ClassUtils.getPackageCanonicalName("char");
        Class<Object>[] classArray1 = (Class<Object>[]) Array.newInstance(Class.class, 3);
        Class<Object> class1 = Object.class;
        classArray1[0] = class1;
        Class<Object> class2 = Object.class;
        classArray1[1] = class2;
        Class<Object> class3 = Object.class;
        classArray1[2] = class3;
        ClassUtils.isAssignable(classArray0, classArray1, true);
        String string0 = ClassUtils.getShortCanonicalName((Object) list0, "[java.lang.Float");
        ClassUtils.getShortCanonicalName((Object) class1, "char");
        Class<Character> class4 = Character.class;
        Class<Short> class5 = Short.class;
        ClassUtils.isAssignable(class4, class5, true);
        ClassUtils.isAssignable(classArray1, classArray1, true);
        ClassUtils.getShortCanonicalName(class5);
        Long long0 = new Long((-1779L));
        String string1 = "[H#SP\"<<\"O6D3V";
        ClassUtils.getShortClassName((Object) long0, "[H#SP\"<<\"O6D3V");
        ClassUtils.getClass("'bmrz{'p6)Kn q#X", true);
        ClassUtils.toClass(classArray1);
        ClassUtils.getShortClassName(string1);
        ClassUtils.getPackageCanonicalName(string0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        Byte byte0 = new Byte((byte) 104);
        Byte.toUnsignedInt((byte) (-7));
        ClassUtils.getShortCanonicalName((Object) byte0, "[]");
        ClassUtils.getShortCanonicalName((Object) "X2T+@,f`tEZ{O7]i/yT", "Byte");
        Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 2);
        Class<Short> class0 = Short.class;
        classArray0[0] = class0;
        Class<Short> class1 = Short.class;
        classArray0[1] = class1;
        ClassUtils.wrappersToPrimitives(classArray0);
        ClassUtils.toClass(classArray0);
        ClassUtils.isInnerClass(class0);
        ClassUtils.getAllInterfaces(class0);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        Class<Double> class0 = Double.class;
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 2);
        Class<String> class1 = String.class;
        classArray0[0] = class1;
        Class<String> class2 = String.class;
        classArray0[1] = class2;
        ClassUtils.getPublicMethod(class0, "%", classArray0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        ClassUtils classUtils0 = new ClassUtils();
        ClassUtils.getPackageName((Object) classUtils0, "Lz+O_j{lD'oz@1");
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null, true);
        ClassUtils.getPackageName("-:_V0F`3B~Za`#m<!");
        ClassUtils.getShortClassName("");
        ClassUtils.getShortCanonicalName("org.apache.commons.lang.builder.ToStringStyle$MultiLineToStringStyle");
        Integer integer0 = new Integer(2343);
        Integer.toUnsignedString((-4785));
        Integer.getInteger("org.apache.commons.lang.builder.ToStringStyle$MultiLineToStringStyle");
        ClassUtils.getShortCanonicalName((Object) integer0, "");
        Class<Float> class0 = Float.class;
        Class<Float> class1 = Float.class;
        ClassUtils.isAssignable(class0, class1, true);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        Class<Float> class0 = Float.class;
        Class<String> class1 = String.class;
        ClassUtils.isAssignable(class0, class1);
        ClassUtils.getPackageCanonicalName((String) null);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        Class<?> class0 = ClassUtils.getClass("QrF>JH`");
        ClassUtils.getShortClassName(class0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        Class<Byte> class0 = Byte.class;
        ClassUtils.isAssignable(class0, class0, false);
        Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 0);
        ClassUtils.primitivesToWrappers(classArray0);
        ClassUtils.getPackageCanonicalName((Object) class0, ";O=/!]h");
        ClassUtils.getPackageCanonicalName(";O=/!]h");
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Class<Float> class0 = Float.class;
        ClassUtils.getShortClassName(class0);
        ClassUtils.isInnerClass(class0);
        ClassUtils.getShortCanonicalName(class0);
        ClassUtils.getShortCanonicalName(":50>3?9");
        ClassUtils.getAllInterfaces(class0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        Class<Integer> class0 = Integer.class;
        ClassUtils.getShortCanonicalName(class0);
        Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 4);
        Class<Character> class1 = Character.class;
        classArray0[0] = class1;
        Class<Character> class2 = Character.class;
        classArray0[1] = class2;
        Class<Character> class3 = Character.class;
        classArray0[2] = class3;
        Class<Character> class4 = Character.class;
        classArray0[3] = class4;
        ClassUtils.primitivesToWrappers(classArray0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.getPackageName(class0);
        Class<Double> class1 = Double.class;
        Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0);
        ClassUtils.getPublicMethod(class1, "java.lang", classArray0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        ClassUtils classUtils0 = new ClassUtils();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.pollLast();
        ClassUtils.convertClassNamesToClasses(linkedList0);
        Class<Long> class0 = Long.class;
        Class<String> class1 = String.class;
        boolean boolean0 = true;
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
        classArray0[0] = class1;
        classArray0[1] = class1;
        classArray0[2] = class1;
        Class<String> class2 = String.class;
        classArray0[3] = class2;
        classArray0[4] = class1;
        ClassUtils.isAssignable(classArray0, classArray0);
        ClassUtils.isAssignable(class0, class1, true);
        ClassUtils.getShortCanonicalName("$");
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassUtils.getClass(classLoader0, ";", true);
        Class<ClassUtils> class3 = ClassUtils.class;
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        ClassUtils.getPackageName((String) null);
        ClassUtils.getShortCanonicalName((Object) "", (String) null);
        ClassUtils.getClass("jde", true);
        short short0 = (short) 2358;
        Short short1 = new Short(short0);
        String string0 = "";
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        ClassUtils.getClass("");
        Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        Class<String> class0 = String.class;
        ClassUtils.getShortClassName(class0);
        ClassUtils.getShortCanonicalName(class0);
        Class<ClassUtils> class1 = ClassUtils.class;
        ClassUtils.getAllInterfaces(class1);
        ClassUtils.getPackageCanonicalName(class1);
        Class<Long> class2 = Long.class;
        ClassUtils.getPackageName(class2);
        Class<Float> class3 = Float.class;
        ClassUtils.wrapperToPrimitive(class3);
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassUtils.getClass(classLoader0, "org.apache.commons.lang");
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        ClassUtils.toClass((Object[]) null);
        ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null, false);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
        Class<String> class0 = String.class;
        classArray0[0] = class0;
        Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
        Class<Object> class1 = Object.class;
        ClassUtils.getPackageName(class1);
        Class<?>[] classArray2 = ClassUtils.wrappersToPrimitives(classArray1);
        ClassUtils.isAssignable(classArray2, classArray2, true);
        ClassUtils.getPackageName("java.lang");
        Class<Integer> class2 = Integer.class;
        Class<Character> class3 = Character.class;
        ClassUtils.isAssignable(class2, class3, false);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        Class<Character> class0 = Character.class;
        ClassUtils.getPackageCanonicalName(class0);
        ClassUtils.isAssignable(class0, class0);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassUtils.getClass(classLoader0, "q,*d");
    }

    @Test(timeout = 4000)
    public void test3030() throws Throwable {
        ClassUtils.getShortCanonicalName("[");
        Object[] objectArray0 = new Object[5];
        objectArray0[0] = (Object) "[]";
        objectArray0[1] = (Object) "[]";
        objectArray0[2] = (Object) "[]";
        objectArray0[3] = (Object) "[";
        objectArray0[4] = (Object) "[";
        ClassUtils.toClass(objectArray0);
        Float float0 = new Float(3.912323F);
        ClassUtils.getPackageName((Object) float0, (String) null);
        ClassUtils.getClass("', has a length less than 2");
    }

    @Test(timeout = 4000)
    public void test3131() throws Throwable {
        ClassUtils classUtils0 = new ClassUtils();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassUtils.getClass(classLoader0, ".");
    }

    @Test(timeout = 4000)
    public void test3232() throws Throwable {
        Class<Object> class0 = Object.class;
        String string0 = ClassUtils.getPackageCanonicalName(class0);
        ClassUtils.getClass((ClassLoader) null, "java.lang");
        ClassUtils.getPackageCanonicalName(string0);
    }

    @Test(timeout = 4000)
    public void test3333() throws Throwable {
        ClassUtils classUtils0 = new ClassUtils();
        ClassUtils.getShortClassName((Object) classUtils0, "$");
        Class<Double> class0 = Double.class;
        ClassUtils.getPackageName(class0);
    }

    @Test(timeout = 4000)
    public void test3434() throws Throwable {
        Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 0);
        ClassUtils.isAssignable(classArray0, classArray0);
        ClassUtils.getPackageCanonicalName("user.region");
        Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
        Class<Boolean> class0 = Boolean.class;
        Class<String> class1 = String.class;
        ClassUtils.isAssignable(class0, class1, true);
        ClassUtils.toClass(classArray1);
        Class<Byte> class2 = Byte.class;
        ClassUtils.getPackageCanonicalName(class2);
    }

    @Test(timeout = 4000)
    public void test3535() throws Throwable {
        Float float0 = new Float(1579.2F);
        ClassUtils.getShortClassName((Object) float0, "J");
        Class<Character> class0 = Character.class;
        ClassUtils.getShortClassName(class0);
        ClassUtils.getPackageName((Object) class0, "o E;9F@*T");
    }

    @Test(timeout = 4000)
    public void test3636() throws Throwable {
        ClassUtils.getShortClassName("]{?}");
        Class<Double> class0 = Double.class;
        ClassUtils.isAssignable(class0, class0, true);
        ClassUtils.getShortCanonicalName("]{?}");
    }

    @Test(timeout = 4000)
    public void test3737() throws Throwable {
        Class<Object> class0 = Object.class;
        Class<Short> class1 = Short.class;
        ClassUtils.isAssignable(class0, class1);
        ClassUtils.getPackageCanonicalName((Object) class0, "");
        Class<Short> class2 = Short.class;
        Class<?> class3 = ClassUtils.wrapperToPrimitive(class2);
        ClassUtils.isAssignable(class3, class1, false);
        ClassUtils.getShortCanonicalName(class0);
    }

    @Test(timeout = 4000)
    public void test3838() throws Throwable {
        Class<Double> class0 = Double.class;
        ClassUtils.primitiveToWrapper(class0);
        Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 4);
        Class<Float> class1 = Float.class;
        classArray0[0] = class1;
        Class<Float> class2 = Float.class;
        classArray0[1] = class2;
        Class<Float> class3 = Float.class;
        classArray0[2] = class3;
        Class<Float> class4 = Float.class;
        classArray0[3] = class4;
        ClassUtils.isAssignable(classArray0, classArray0, true);
        Class<Short>[] classArray1 = (Class<Short>[]) Array.newInstance(Class.class, 0);
        ClassUtils.isAssignable(classArray0, classArray1, true);
        ClassUtils.getShortClassName("5#EFG");
    }

    @Test(timeout = 4000)
    public void test3939() throws Throwable {
        Object object0 = new Object();
        ClassUtils.getPackageCanonicalName(object0, "org.apache.commons.lang.ClassUtils");
        LinkedList<String> linkedList0 = new LinkedList<String>();
        List<String> list0 = linkedList0.subList(0, 0);
        ClassUtils.convertClassNamesToClasses(list0);
        Class<?> class0 = ClassUtils.getClass((String) null);
        ClassUtils.wrapperToPrimitive(class0);
    }

    @Test(timeout = 4000)
    public void test4040() throws Throwable {
        Class<Integer> class0 = Integer.class;
        ClassUtils.getAllSuperclasses(class0);
        ClassUtils.getPackageName("q0U!|^");
    }

    @Test(timeout = 4000)
    public void test4141() throws Throwable {
        String string0 = "5(LWR(*MX";
        ClassUtils.getShortCanonicalName((Object) null, "5(LWR(*MX");
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        classLoader0.clearAssertionStatus();
        ClassLoader classLoader1 = classLoader0.getParent();
        boolean boolean0 = true;
        classLoader0.setPackageAssertionStatus("5(LWR(*MX", true);
        classLoader0.setClassAssertionStatus("", true);
        ClassLoader.getSystemClassLoader();
        classLoader1.setPackageAssertionStatus("5(LWR(*MX", true);
        ClassUtils.getClass(classLoader1, "5(LWR(*MX");
        String string1 = "J";
        classLoader1.setClassAssertionStatus(string1, boolean0);
    }

    @Test(timeout = 4000)
    public void test4242() throws Throwable {
        ClassUtils classUtils0 = new ClassUtils();
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassUtils.getClass(classLoader0, (String) null, true);
        Class<Double> class0 = Double.class;
        ClassUtils.getAllSuperclasses(class0);
    }

    @Test(timeout = 4000)
    public void test4343() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.isInnerClass(class0);
        Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 5);
        Class<Byte> class1 = Byte.class;
        classArray0[0] = class1;
        Class<Byte> class2 = Byte.class;
        classArray0[1] = class2;
        Class<Byte> class3 = Byte.class;
        classArray0[2] = class3;
        Class<Byte> class4 = Byte.class;
        classArray0[3] = class4;
        Class<Byte> class5 = Byte.class;
        classArray0[4] = class5;
        Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
        ClassUtils.isInnerClass(class4);
        Class<?>[] classArray2 = ClassUtils.primitivesToWrappers(classArray1);
        ClassUtils.isAssignable(classArray2, classArray1, false);
        String string0 = "";
        ClassUtils.getShortCanonicalName((Object) null, "");
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassLoader classLoader1 = classLoader0.getParent();
        classLoader1.setDefaultAssertionStatus(true);
        classLoader1.setPackageAssertionStatus("", false);
        ClassUtils.getClass(classLoader1, "");
        boolean boolean0 = false;
        Boolean.valueOf(boolean0);
        String string1 = "";
    }

    @Test(timeout = 4000)
    public void test4444() throws Throwable {
        Class<Object> class0 = Object.class;
        Class<Character> class1 = Character.class;
        ClassUtils.isAssignable(class0, class1, true);
        Class<Double> class2 = Double.class;
        ClassUtils.getShortClassName(class2);
        Class<Double> class3 = Double.class;
        ClassUtils.isAssignable(class0, class3);
        ClassUtils.getShortClassName(class3);
        ClassUtils.getShortCanonicalName("sq3{");
        ClassUtils.getShortCanonicalName((Object) "sq3{", "java.io.tmpdir");
        ClassUtils.getPackageCanonicalName((Object) "sq3{", "");
        ClassUtils.getAllInterfaces(class2);
        ClassUtils.getClass((String) null);
        String string0 = "";
        ClassUtils.getShortCanonicalName(string0);
        Class<ClassUtils>[] classArray0 = (Class<ClassUtils>[]) Array.newInstance(Class.class, 1);
        Class<ClassUtils> class4 = ClassUtils.class;
        classArray0[0] = class4;
    }

    @Test(timeout = 4000)
    public void test4545() throws Throwable {
        ClassUtils.getPackageName((Object) "eu", ";&uT dnc");
        Class<Short> class0 = Short.class;
        ClassUtils.getAllSuperclasses(class0);
        List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
        ClassUtils.getPackageName(";&uT dnc");
        Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
        Class<Integer> class1 = Integer.class;
        classArray0[0] = class1;
        ClassUtils.isAssignable(classArray0, classArray0);
        ClassUtils.getShortClassName("fd~=8m");
        ClassUtils classUtils0 = new ClassUtils();
        Class<Double> class2 = Double.class;
        Class<Boolean> class3 = Boolean.class;
        ClassUtils.isAssignable(class2, class3, false);
        ClassUtils.convertClassesToClassNames(list0);
        ClassUtils.getAllSuperclasses(class0);
        Byte byte0 = new Byte((byte) 0);
        ClassUtils.getPackageName((Object) byte0, "eu");
    }

    @Test(timeout = 4000)
    public void test4646() throws Throwable {
        Class<Boolean> class0 = Boolean.class;
        ClassUtils.getPackageCanonicalName(class0);
        ClassUtils.getShortCanonicalName((Object) "java.lang", "java.ext.dirs");
        ClassUtils.getShortClassName("java.ext.dirs");
    }

    @Test(timeout = 4000)
    public void test4747() throws Throwable {
        ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null, false);
        Byte byte0 = new Byte((byte) 5);
        Byte.toUnsignedInt((byte) 5);
        Byte.compare((byte) 5, (byte) 5);
        Byte.compare((byte) 5, (byte) (-1));
        ClassUtils.getPackageCanonicalName((Object) byte0, "pyCu!");
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add("pyCu!");
        linkedList0.removeLast();
        ClassUtils.convertClassNamesToClasses(linkedList0);
        ClassUtils.getShortCanonicalName("9.kY)aq|X\"");
        linkedList0.add((String) null);
        ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null);
        Class<Long> class0 = Long.class;
        String string0 = ClassUtils.getPackageName(class0);
        linkedList0.poll();
        Class<Double> class1 = Double.TYPE;
        ClassUtils.getShortClassName((Object) class1, "pyCu!");
        ClassUtils.getPackageCanonicalName("java.lang");
        ClassUtils.convertClassNamesToClasses(linkedList0);
        Class<String> class2 = String.class;
        ClassUtils.isAssignable(class1, class2, true);
        ClassUtils.getClass("Class");
        ClassUtils.getPackageName(string0);
        Object object0 = new Object();
        String string1 = "', is neither of type Map.Entry nor an Array";
        ClassUtils.getPackageName(object0, string1);
    }

    @Test(timeout = 4000)
    public void test4848() throws Throwable {
        Object[] objectArray0 = new Object[4];
        Object object0 = new Object();
        objectArray0[0] = object0;
        Object object1 = new Object();
        objectArray0[1] = object1;
        Object object2 = new Object();
        objectArray0[2] = object2;
        Object object3 = new Object();
        objectArray0[3] = object3;
        Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
        Class<Boolean> class0 = Boolean.class;
        ClassUtils.getAllSuperclasses(class0);
        Class<?>[] classArray1 = ClassUtils.toClass(classArray0);
        ClassUtils.getShortClassName("ENlz#w5Z");
        ClassUtils.getPublicMethod(class0, (String) null, classArray1);
        String string0 = "";
        ClassUtils.getShortClassName(string0);
    }

    @Test(timeout = 4000)
    public void test4949() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.getShortClassName(class0);
        ClassUtils.primitivesToWrappers((Class<?>[]) null);
        ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null, true);
        ClassUtils.getShortClassName("");
        ClassUtils.primitivesToWrappers((Class<?>[]) null);
        ClassUtils.wrappersToPrimitives((Class<?>[]) null);
    }

    @Test(timeout = 4000)
    public void test5050() throws Throwable {
        Integer integer0 = new Integer((-1));
        Integer.toUnsignedString(48);
        ClassUtils.getPackageName((Object) integer0, "");
        ClassUtils classUtils0 = new ClassUtils();
        ClassUtils.getPackageCanonicalName((Object) null, "java.awt.headless");
        Class<Long> class0 = Long.class;
        ClassUtils.isInnerClass(class0);
        ClassUtils.getPackageCanonicalName(class0);
    }

    @Test(timeout = 4000)
    public void test5151() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.wrapperToPrimitive(class0);
        Object object0 = new Object();
        ClassUtils.getShortClassName(object0, "java.awt.printerjob");
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
        ClassUtils.primitivesToWrappers(classArray0);
        ClassUtils.getAllSuperclasses((Class<?>) null);
        ClassUtils.getPackageCanonicalName((Class<?>) null);
        ClassUtils.getPackageCanonicalName((Object) "java.awt.printerjob", "eX5A[>%C8Kn=k]");
        ClassUtils.getShortClassName((Object) null, "Windows 9");
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassUtils.getClass(classLoader0, "java.lang");
        Class<Integer> class1 = Integer.class;
        ClassUtils.primitiveToWrapper(class1);
    }

    @Test(timeout = 4000)
    public void test5252() throws Throwable {
        Class<Byte> class0 = Byte.TYPE;
        ClassUtils.getPackageName((Object) class0, "&gHsATfMT<)UJA ");
        Class<Long> class1 = Long.TYPE;
        ClassUtils.getPackageName((Object) class1, "&gHsATfMT<)UJA ");
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        classLoader0.clearAssertionStatus();
        ClassLoader classLoader1 = classLoader0.getParent();
        classLoader0.setPackageAssertionStatus("", true);
        ClassUtils.getClass(classLoader1, "byte", false);
        Class<String> class2 = String.class;
        ClassUtils.isAssignable(class0, class2);
        ClassUtils.getPackageCanonicalName("S");
    }

    @Test(timeout = 4000)
    public void test5353() throws Throwable {
        ClassUtils.getPackageName(",wS");
        Class<Boolean> class0 = Boolean.class;
        ClassUtils.getShortClassName(class0);
        ClassUtils classUtils0 = new ClassUtils();
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
        Class<String> class1 = String.class;
        classArray0[0] = class1;
        Class<String> class2 = String.class;
        classArray0[1] = class2;
        Class<String> class3 = String.class;
        classArray0[2] = class3;
        Class<String> class4 = String.class;
        classArray0[3] = class4;
        Class<String> class5 = String.class;
        classArray0[4] = class5;
        Class<String> class6 = String.class;
        classArray0[5] = class6;
        Class<Character>[] classArray1 = (Class<Character>[]) Array.newInstance(Class.class, 2);
        Class<Character> class7 = Character.class;
        classArray1[0] = class7;
        Class<Character> class8 = Character.class;
        classArray1[1] = class8;
        ClassUtils.isAssignable(classArray0, classArray1);
        ClassUtils.getPackageName((Object) classUtils0, (String) null);
    }

    @Test(timeout = 4000)
    public void test5454() throws Throwable {
        ClassUtils.getClass("float", true);
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
        ClassLoader classLoader2 = classLoader0.getParent();
        classLoader0.setClassAssertionStatus("float", true);
        String string0 = "char";
        classLoader1.setPackageAssertionStatus("char", false);
        String string1 = "J";
        ClassLoader.getSystemClassLoader();
        Class<?> class0 = ClassUtils.getClass(classLoader0, "J", true);
        Object[] objectArray0 = new Object[6];
        objectArray0[0] = (Object) class0;
        objectArray0[1] = (Object) classLoader2;
    }

    @Test(timeout = 4000)
    public void test5555() throws Throwable {
        ClassUtils classUtils0 = new ClassUtils();
        Character character0 = Character.valueOf('9');
        Character.lowSurrogate(228);
        ClassUtils.getShortClassName((Object) character0, ";");
        Boolean boolean0 = new Boolean(false);
        Boolean.getBoolean("!");
        ClassUtils.getPackageName((Object) boolean0, "double");
        ClassUtils.getPackageName((Object) classUtils0, ".");
        Class<Short> class0 = Short.class;
        ClassUtils.wrapperToPrimitive(class0);
        Class<?> class1 = ClassUtils.getClass("double");
        ClassUtils.getShortClassName("NmYS($&ki{sz7UeHgw6");
        ClassUtils.getPackageName(class1);
        ClassUtils.getShortClassName("org.apache.commons.lang");
        List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
        ClassUtils.getPackageName((Object) list0, "$");
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 4);
        Class<String> class2 = String.class;
        classArray0[0] = class2;
        Class<String> class3 = String.class;
        classArray0[1] = class3;
        Class<String> class4 = String.class;
        classArray0[2] = class4;
        Class<String> class5 = String.class;
        classArray0[3] = class5;
        Class<Object>[] classArray1 = (Class<Object>[]) Array.newInstance(Class.class, 5);
        Class<Object> class6 = Object.class;
        classArray1[0] = class6;
        Class<Object> class7 = Object.class;
        classArray1[1] = class7;
        Class<Object> class8 = Object.class;
        classArray1[2] = class8;
        Class<Object> class9 = Object.class;
        classArray1[3] = class9;
        Class<Object> class10 = Object.class;
        classArray1[4] = class10;
        ClassUtils.isAssignable(classArray0, classArray1);
    }

    @Test(timeout = 4000)
    public void test5656() throws Throwable {
        Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 8);
        Class<Character> class0 = Character.class;
        classArray0[0] = class0;
        Class<Character> class1 = Character.class;
        classArray0[1] = class1;
        Class<Character> class2 = Character.class;
        classArray0[2] = class2;
        Class<Character> class3 = Character.class;
        classArray0[3] = class3;
        Class<Character> class4 = Character.class;
        classArray0[4] = class4;
        Class<Character> class5 = Character.class;
        classArray0[5] = class5;
        Class<Character> class6 = Character.class;
        classArray0[6] = class6;
        Class<Character> class7 = Character.class;
        classArray0[7] = class7;
        ClassUtils.primitivesToWrappers(classArray0);
        Class<String> class8 = String.class;
        ClassUtils.getAllInterfaces(class8);
        ClassUtils classUtils0 = new ClassUtils();
        ClassUtils.isAssignable(classArray0, classArray0);
        Class<Object> class9 = Object.class;
        ClassUtils.getAllSuperclasses(class9);
        Class<Object> class10 = Object.class;
        ClassUtils.isInnerClass(class10);
        ClassUtils.getShortClassName("");
    }

    @Test(timeout = 4000)
    public void test5757() throws Throwable {
        Character character0 = new Character('3');
        Character.highSurrogate(3);
        Character.lowSurrogate(3);
        ClassUtils.getShortClassName((Object) character0, "");
        ClassUtils.getPackageName((Object) null, "B");
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
        Class<String> class0 = String.class;
        classArray0[0] = class0;
        Class<String> class1 = String.class;
        classArray0[1] = class1;
        Class<String> class2 = String.class;
        classArray0[2] = class2;
        Class<String> class3 = String.class;
        classArray0[3] = class3;
        Class<String> class4 = String.class;
        classArray0[4] = class4;
        Class<String> class5 = String.class;
        classArray0[5] = class5;
        ClassUtils.isAssignable(classArray0, classArray0, true);
    }

    @Test(timeout = 4000)
    public void test5858() throws Throwable {
        ClassUtils.convertClassNamesToClasses((List<String>) null);
        Class<Float> class0 = Float.class;
        Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 6);
        Class<Double> class1 = Double.class;
        classArray0[0] = class1;
        Class<Double> class2 = Double.class;
        classArray0[1] = class2;
        Class<Double> class3 = Double.class;
        classArray0[2] = class3;
        Class<Double> class4 = Double.class;
        classArray0[3] = class4;
        Class<Double> class5 = Double.class;
        classArray0[4] = class5;
        Class<Double> class6 = Double.class;
        classArray0[5] = class6;
        ClassUtils.getPublicMethod(class0, "", classArray0);
        Class<Short> class7 = Short.class;
        Class<String> class8 = String.class;
    }

    @Test(timeout = 4000)
    public void test5959() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.getPackageName(class0);
        ClassUtils.getShortCanonicalName((Object) "java.lang", "java.lang");
        Class<String> class1 = String.class;
        ClassUtils.getShortClassName(class1);
        ClassUtils.getShortCanonicalName((String) null);
        Class<Double> class2 = Double.class;
        ClassUtils.isAssignable(class2, class2, false);
        Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 7);
        Class<Boolean> class3 = Boolean.class;
        classArray0[0] = class3;
        Class<Boolean> class4 = Boolean.class;
        classArray0[1] = class4;
        Class<Boolean> class5 = Boolean.class;
        classArray0[2] = class5;
        Class<Boolean> class6 = Boolean.class;
        classArray0[3] = class6;
        Class<Boolean> class7 = Boolean.class;
        classArray0[4] = class7;
        Class<Boolean> class8 = Boolean.class;
        classArray0[5] = class8;
        Class<Boolean> class9 = Boolean.class;
        classArray0[6] = class9;
        ClassUtils.wrappersToPrimitives(classArray0);
        Class<Long> class10 = Long.class;
        ClassUtils.primitiveToWrapper(class10);
        ClassUtils.isInnerClass(class7);
    }

    @Test(timeout = 4000)
    public void test6060() throws Throwable {
        Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
        Class<Byte> class0 = Byte.class;
        classArray0[0] = class0;
        Class<Byte> class1 = Byte.class;
        classArray0[1] = class1;
        Class<Byte> class2 = Byte.class;
        classArray0[2] = class2;
        Class<Byte> class3 = Byte.class;
        classArray0[3] = class3;
        Class<Byte> class4 = Byte.class;
        classArray0[4] = class4;
        Class<Byte> class5 = Byte.class;
        classArray0[5] = class5;
        ClassUtils.isAssignable(classArray0, classArray0, true);
        Class<Long> class6 = Long.class;
        ClassUtils.isAssignable(class0, class6);
        Class<ClassUtils> class7 = ClassUtils.class;
        ClassUtils.isAssignable(class0, class7);
        ClassUtils.getAllSuperclasses(class0);
        String string0 = null;
        ClassUtils.getShortClassName((String) null);
        ClassUtils.isInnerClass(class2);
        ClassUtils.getClass("", true);
        String string1 = "]$;)";
        ClassUtils.getShortCanonicalName(string1);
    }

    @Test(timeout = 4000)
    public void test6161() throws Throwable {
        ClassUtils classUtils0 = new ClassUtils();
        Class<Object> class0 = Object.class;
        List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
        ClassUtils.getPackageCanonicalName((Object) classUtils0, "$");
        Class<String> class1 = String.class;
        boolean boolean0 = true;
        List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
        ClassUtils.convertClassNamesToClasses(list1);
        ClassLoader classLoader0 = null;
        ClassUtils.getClass((ClassLoader) null, ".", true);
    }

    @Test(timeout = 4000)
    public void test6262() throws Throwable {
        Class<Float> class0 = Float.TYPE;
        ClassUtils.getShortClassName(class0);
        ClassUtils.isInnerClass(class0);
        ClassUtils.getShortCanonicalName((Class<?>) null);
        ClassUtils.getShortCanonicalName(":50>3?9");
    }

    @Test(timeout = 4000)
    public void test6363() throws Throwable {
        Class<Short> class0 = Short.class;
        Class<Long> class1 = Long.TYPE;
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassLoader classLoader1 = classLoader0.getParent();
        classLoader1.setPackageAssertionStatus("0Fl;Q-3Y", false);
        Class<Double> class2 = Double.class;
        List<Class<?>> list0 = ClassUtils.getAllInterfaces(class2);
        ClassUtils.getPackageName((Object) list0, "");
        ClassUtils.getShortCanonicalName(class0);
        ClassUtils.getPackageCanonicalName("");
        Class<Long> class3 = Long.class;
        ClassUtils.isInnerClass(class3);
        classLoader1.clearAssertionStatus();
        List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
        ClassUtils.convertClassNamesToClasses(list1);
        Integer integer0 = new Integer(64);
        ClassUtils.getShortClassName((Object) integer0, "J");
        classLoader1.setPackageAssertionStatus("0Fl;Q-3Y", false);
        ClassUtils.getClass(classLoader0, "", true);
        Class<Object> class4 = Object.class;
        ClassUtils.wrapperToPrimitive(class4);
    }

    @Test(timeout = 4000)
    public void test6464() throws Throwable {
        Object object0 = new Object();
        Object[] objectArray0 = new Object[8];
        objectArray0[3] = object0;
        objectArray0[4] = object0;
        objectArray0[7] = object0;
        ClassUtils.toClass(objectArray0);
    }

    @Test(timeout = 4000)
    public void test6565() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.getShortClassName(class0);
        ClassUtils.primitivesToWrappers((Class<?>[]) null);
        ClassUtils.getShortClassName("");
        ClassUtils.primitivesToWrappers((Class<?>[]) null);
        ClassUtils.wrappersToPrimitives((Class<?>[]) null);
        ClassUtils.getClass((String) null, false);
    }

    @Test(timeout = 4000)
    public void test6666() throws Throwable {
        Class<Double> class0 = Double.class;
        ClassUtils.getPackageName(class0);
        ClassUtils.getPackageName(class0);
        ClassUtils classUtils0 = new ClassUtils();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add("java.lang");
        ClassUtils.convertClassNamesToClasses(linkedList0);
        Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 3);
        Class<Double> class1 = Double.class;
        classArray0[0] = class1;
        classArray0[1] = class0;
        classArray0[2] = class0;
        ClassUtils.isAssignable(classArray0, classArray0);
        Byte byte0 = new Byte((byte) (-48));
        ClassUtils.getPackageCanonicalName((Object) byte0, "java.lang");
        Class<Double> class2 = Double.class;
        ClassUtils.primitiveToWrapper(class2);
        ClassUtils.getShortCanonicalName((Object) class2, "$");
        Class<Boolean> class3 = Boolean.class;
        ClassUtils.getAllSuperclasses(class3);
        Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
        ClassUtils.isAssignable(classArray1, classArray0, false);
        ClassUtils.getShortCanonicalName("[IvWC:-J");
    }

    @Test(timeout = 4000)
    public void test6767() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.isInnerClass(class0);
        LinkedList<String> linkedList0 = new LinkedList<String>();
        linkedList0.add((String) null);
        LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
        ClassUtils.convertClassNamesToClasses(linkedList1);
        ClassUtils.convertClassNamesToClasses((List<String>) null);
        ClassUtils.getShortClassName((Object) null, (String) null);
        Object[] objectArray0 = new Object[4];
        Object object0 = new Object();
        objectArray0[0] = object0;
        objectArray0[1] = (Object) null;
        objectArray0[2] = (Object) null;
        objectArray0[3] = (Object) null;
        ClassUtils.toClass(objectArray0);
        ClassUtils.getPackageCanonicalName(class0);
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        classLoader0.getParent();
    }

    @Test(timeout = 4000)
    public void test6868() throws Throwable {
        Class<Double> class0 = Double.class;
        ClassUtils.getPackageName(class0);
        ClassUtils.getPackageName(class0);
        ClassUtils classUtils0 = new ClassUtils();
        Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 3);
        Class<Double> class1 = Double.class;
        classArray0[0] = class1;
        classArray0[1] = class0;
        classArray0[2] = class0;
        ClassUtils.isAssignable(classArray0, classArray0);
        Byte byte0 = new Byte((byte) (-48));
        ClassUtils.getPackageCanonicalName((Object) byte0, "java.lang");
        Class<Double> class2 = Double.TYPE;
        ClassUtils.primitiveToWrapper(class2);
        ClassUtils.getShortCanonicalName((Object) class2, "$");
        Class<Boolean> class3 = Boolean.class;
        ClassUtils.getAllSuperclasses(class3);
        Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
        ClassUtils.isAssignable(classArray1, classArray0, true);
        ClassUtils.getShortCanonicalName("[IvWC:-J");
    }

    @Test(timeout = 4000)
    public void test6969() throws Throwable {
        ClassUtils.toClass((Object[]) null);
        boolean boolean0 = new Boolean(false);
        ClassUtils.getPackageCanonicalName((String) null);
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        classLoader0.setPackageAssertionStatus("Z1NJriX", false);
        ClassUtils.getClass(classLoader0, (String) null);
    }

    @Test(timeout = 4000)
    public void test7070() throws Throwable {
        Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 3);
        Class<Short> class0 = Short.class;
        classArray0[0] = class0;
        Class<Short> class1 = Short.class;
        classArray0[1] = class1;
        Class<Short> class2 = Short.class;
        classArray0[2] = class2;
        Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
        Object object0 = new Object();
        ClassUtils.getShortCanonicalName(object0, "long");
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        classLoader0.getParent();
        Class<?> class3 = ClassUtils.getClass(classLoader0, "long", true);
        classLoader0.setClassAssertionStatus("long", false);
        Class<Object> class4 = Object.class;
        ClassUtils.isAssignable(class3, class4, false);
        ClassUtils.primitivesToWrappers(classArray0);
        ClassUtils.getPackageCanonicalName("H#SP\"<<\"O6D3V");
        ClassUtils.getAllInterfaces(class3);
        List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class3);
        ClassUtils.primitivesToWrappers(classArray1);
        ClassUtils.getAllInterfaces(class0);
        Class<Double> class5 = Double.class;
        ClassUtils.getAllInterfaces(class5);
        ClassUtils.getClass(classLoader0, "long");
        ClassUtils.convertClassesToClassNames(list0);
        ClassUtils.getShortClassName("<rG8,Zq");
    }

    @Test(timeout = 4000)
    public void test7171() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.wrapperToPrimitive(class0);
        ClassUtils.getShortClassName("EMW");
        ClassUtils.primitiveToWrapper((Class<?>) null);
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 5);
        Class<String> class1 = String.class;
        classArray0[0] = class1;
        Class<String> class2 = String.class;
        classArray0[1] = class2;
        Class<String> class3 = String.class;
        classArray0[2] = class3;
        Class<String> class4 = String.class;
        classArray0[3] = class4;
        Class<String> class5 = String.class;
        classArray0[4] = class5;
        ClassUtils.isAssignable(classArray0, classArray0, false);
    }

    @Test(timeout = 4000)
    public void test7272() throws Throwable {
        Class<Integer> class0 = Integer.TYPE;
        ClassUtils.isInnerClass(class0);
        Class<Double> class1 = Double.TYPE;
        ClassUtils.isInnerClass(class1);
        ClassUtils.getPackageName("byte");
        ClassUtils.isAssignable(class1, class0, true);
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        classLoader0.getParent();
        classLoader0.setClassAssertionStatus((String) null, true);
        ClassUtils.getClass(classLoader0, "", true);
    }

    @Test(timeout = 4000)
    public void test7373() throws Throwable {
        Class<Short> class0 = Short.class;
        ClassUtils.getAllInterfaces((Class<?>) null);
        ClassUtils.getPackageCanonicalName("@<E");
        ClassUtils.getShortCanonicalName(class0);
        Class<Long> class1 = Long.class;
        Class<Integer> class2 = Integer.class;
        ClassUtils.isAssignable(class1, class2, false);
        ClassUtils.getShortCanonicalName("Short");
        Class<String> class3 = String.class;
        ClassUtils.primitiveToWrapper(class3);
        ClassUtils.getPackageCanonicalName(class0);
        Class<Object> class4 = Object.class;
        ClassUtils.isInnerClass(class4);
        ClassUtils.getPackageName("@<E");
        Object[] objectArray0 = new Object[3];
        objectArray0[0] = (Object) "";
        objectArray0[1] = (Object) "";
        ClassUtils.getShortClassName("5.@N4S");
        objectArray0[2] = (Object) null;
        ClassUtils.toClass(objectArray0);
        Class<ClassUtils> class5 = ClassUtils.class;
        boolean boolean0 = true;
        ClassUtils.isAssignable(class5, class5, boolean0);
    }

    @Test(timeout = 4000)
    public void test7474() throws Throwable {
        Class<Byte>[] classArray0 = (Class<Byte>[]) Array.newInstance(Class.class, 6);
        Class<Byte> class0 = Byte.class;
        Class<Byte> class1 = Byte.class;
        classArray0[1] = class1;
        Class<Byte> class2 = Byte.class;
        classArray0[2] = class2;
        Class<Byte> class3 = Byte.class;
        classArray0[3] = class3;
        Class<Byte> class4 = Byte.class;
        classArray0[4] = class4;
        Class<Byte> class5 = Byte.class;
        classArray0[5] = class5;
        ClassUtils.isAssignable(classArray0, classArray0, true);
        Class<Long> class6 = Long.class;
        ClassUtils.isAssignable(class0, class6);
        Class<ClassUtils> class7 = ClassUtils.class;
        ClassUtils.isAssignable(classArray0[0], class7);
        ClassUtils.getAllSuperclasses(class0);
        String string0 = null;
        ClassUtils.getShortClassName((String) null);
        ClassUtils.isInnerClass(class2);
        ClassUtils.getClass("", true);
        String string1 = "]$;)";
        ClassUtils.getShortCanonicalName(string1);
    }

    @Test(timeout = 4000)
    public void test7575() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.wrapperToPrimitive(class0);
        Object object0 = new Object();
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
        ClassUtils.getAllSuperclasses((Class<?>) null);
        ClassUtils.getPackageName((Class<?>) null);
        ClassLoader.getSystemClassLoader();
        ClassUtils.getAllSuperclasses(class0);
        Class<Integer> class1 = Integer.class;
        ClassUtils.primitiveToWrapper(class1);
    }

    @Test(timeout = 4000)
    public void test7676() throws Throwable {
        Class<Float> class0 = Float.TYPE;
        ClassUtils.getPackageCanonicalName((Object) class0, "', has a length less than 2");
        ClassUtils.getShortCanonicalName("java.lang");
        ClassUtils.isAssignable(class0, class0);
        Class<Boolean> class1 = Boolean.class;
        Class<Object> class2 = Object.class;
        ClassUtils.getPackageName(class2);
        ClassUtils.isAssignable(class1, class0, true);
        ClassUtils.getShortClassName((Object) class2, ")EwTIK69F*ws[");
    }

    @Test(timeout = 4000)
    public void test7777() throws Throwable {
        ClassUtils.getClass("jde[]");
        Class<Long> class0 = Long.class;
    }

    @Test(timeout = 4000)
    public void test7878() throws Throwable {
        Class<Short>[] classArray0 = (Class<Short>[]) Array.newInstance(Class.class, 0);
        ClassUtils.wrappersToPrimitives(classArray0);
        Boolean boolean0 = Boolean.valueOf("k2?");
        ClassUtils.getPackageName((Object) boolean0, "MAn5ru");
        Class<Character> class0 = Character.class;
        ClassUtils.getShortClassName(class0);
    }

    @Test(timeout = 4000)
    public void test7979() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.wrapperToPrimitive(class0);
        Class<Object> class1 = Object.class;
        ClassUtils.isInnerClass(class1);
        ClassUtils.getShortCanonicalName((Class<?>) null);
        ClassUtils.isInnerClass((Class<?>) null);
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        ClassUtils.getClass(classLoader0, "");
    }

    @Test(timeout = 4000)
    public void test8080() throws Throwable {
        Class<Object> class0 = Object.class;
        ClassUtils.wrapperToPrimitive(class0);
        Object object0 = new Object();
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
        ClassUtils.primitivesToWrappers(classArray0);
        ClassUtils.getAllSuperclasses((Class<?>) null);
        ClassUtils.getPackageCanonicalName((Class<?>) null);
        ClassUtils.getShortClassName((Object) null, "Windows 9");
        ClassLoader.getSystemClassLoader();
        Class<Integer> class1 = Integer.class;
        ClassUtils.primitiveToWrapper(class1);
        Class<Integer> class2 = Integer.class;
        ClassUtils.wrapperToPrimitive(class2);
        ClassUtils.convertClassesToClassNames((List<Class<?>>) null);
    }
}
