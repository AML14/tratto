focal_method,test_prefix,docstring
"static float toJavaVersionInt(String version) {
    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
}","public void test000() throws Throwable {
    float float0 = SystemUtils.toJavaVersionInt(""/Users/elliottzackrone/.sdkman/candidates/java/8.0.382-amzn/jre/lib/endorsed"");
    assertEquals(1182.0F, float0, 0.01F);
}","/**
 * <p>
 * Converts the given Java version string to an <code>int</code>.
 * </p>
 *
 * <p>
 * Example return values:
 * </p>
 * <ul>
 * <li><code>120</code> for Java 1.2</li>
 * <li><code>131</code> for Java 1.3.1</li>
 * <li><code>160</code> for Java 1.6.0_20</li>
 * </ul>
 *
 * <p>
 * Patch releases are not reported.
 * </p>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @return the version, for example 131 for Java 1.3.1
 */"
"static float toJavaVersionInt(String version) {
    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
}","public void test011() throws Throwable {
    float float0 = SystemUtils.toJavaVersionInt(""1.6"");
    assertEquals(160.0F, float0, 0.01F);
}","/**
 * <p>
 * Converts the given Java version string to an <code>int</code>.
 * </p>
 *
 * <p>
 * Example return values:
 * </p>
 * <ul>
 * <li><code>120</code> for Java 1.2</li>
 * <li><code>131</code> for Java 1.3.1</li>
 * <li><code>160</code> for Java 1.6.0_20</li>
 * </ul>
 *
 * <p>
 * Patch releases are not reported.
 * </p>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @return the version, for example 131 for Java 1.3.1
 */"
"public static boolean isJavaVersionAtLeast(int requiredVersion) {
    return JAVA_VERSION_INT >= requiredVersion;
}","public void test022() throws Throwable {
    boolean boolean0 = SystemUtils.isJavaVersionAtLeast((-648));
    assertTrue(boolean0);
}","/**
 * <p>
 * Is the Java version at least the requested version.
 * </p>
 *
 * <p>
 * Example input:
 * </p>
 * <ul>
 * <li><code>120</code> to test for Java 1.2 or greater</li>
 * <li><code>131</code> to test for Java 1.3.1 or greater</li>
 * </ul>
 *
 * @param requiredVersion
 *            the required version, for example 131
 * @return <code>true</code> if the actual version is equal or greater than the required version
 * @since 2.0
 */"
"public static boolean isJavaVersionAtLeast(float requiredVersion) {
    return JAVA_VERSION_FLOAT >= requiredVersion;
}","public void test033() throws Throwable {
    boolean boolean0 = SystemUtils.isJavaVersionAtLeast(1.8F);
    assertTrue(boolean0);
}","/**
 * <p>
 * Is the Java version at least the requested version.
 * </p>
 *
 * <p>
 * Example input:
 * </p>
 * <ul>
 * <li><code>1.2f</code> to test for Java 1.2</li>
 * <li><code>1.31f</code> to test for Java 1.3.1</li>
 * </ul>
 *
 * @param requiredVersion
 *            the required version, for example 1.31f
 * @return <code>true</code> if the actual version is equal or greater than the required version
 */"
"static int[] toJavaVersionIntArray(String version) {
    return toJavaVersionIntArray(version, Integer.MAX_VALUE);
}","public void test044() throws Throwable {
    int[] intArray0 = SystemUtils.toJavaVersionIntArray(""."");
    assertEquals(0, intArray0.length);
}","/**
 * <p>
 * Converts the given Java version string to an <code>int[]</code> of maximum size <code>3</code>.
 * </p>
 *
 * <p>
 * Example return values:
 * </p>
 * <ul>
 * <li><code>[1, 2, 0]</code> for Java 1.2</li>
 * <li><code>[1, 3, 1]</code> for Java 1.3.1</li>
 * <li><code>[1, 5, 0]</code> for Java 1.5.0_21</li>
 * </ul>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @return the version, for example [1, 5, 0] for Java 1.5.0_21
 */"
"static boolean isOSNameMatch(String osName, String osNamePrefix) {
    if (osName == null) {
        return false;
    }
    return osName.startsWith(osNamePrefix);
}","public void test055() throws Throwable {
    boolean boolean0 = SystemUtils.isOSNameMatch(""1.2"", ""1.2"");
    assertTrue(boolean0);
}","/**
 * Decides if the operating system matches.
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param osName
 *            the actual OS name
 * @param osNamePrefix
 *            the prefix for the expected OS name
 * @return true if matches, or false if not or can't determine
 */"
"static int[] toJavaVersionIntArray(String version) {
    return toJavaVersionIntArray(version, Integer.MAX_VALUE);
}","public void test1111() throws Throwable {
    // Undeclared exception!
    try {
        SystemUtils.toJavaVersionIntArray(""/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/EvoSuite_pathingJar7249637649498281454.jar"");
        fail(""Expecting exception: NumberFormatException"");
    } catch (NumberFormatException e) {
        //
        // For input string: \""7249637649498281454\""
        //
        verifyException(""java.lang.NumberFormatException"", e);
    }
}","/**
 * <p>
 * Converts the given Java version string to an <code>int[]</code> of maximum size <code>3</code>.
 * </p>
 *
 * <p>
 * Example return values:
 * </p>
 * <ul>
 * <li><code>[1, 2, 0]</code> for Java 1.2</li>
 * <li><code>[1, 3, 1]</code> for Java 1.3.1</li>
 * <li><code>[1, 5, 0]</code> for Java 1.5.0_21</li>
 * </ul>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @return the version, for example [1, 5, 0] for Java 1.5.0_21
 */"
"static boolean isOSNameMatch(String osName, String osNamePrefix) {
    if (osName == null) {
        return false;
    }
    return osName.startsWith(osNamePrefix);
}","public void test1212() throws Throwable {
    // Undeclared exception!
    try {
        SystemUtils.isOSNameMatch(""Mac OS "", (String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Decides if the operating system matches.
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param osName
 *            the actual OS name
 * @param osNamePrefix
 *            the prefix for the expected OS name
 * @return true if matches, or false if not or can't determine
 */"
"static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {
    if (osName == null || osVersion == null) {
        return false;
    }
    return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);
}","public void test1313() throws Throwable {
    // Undeclared exception!
    try {
        SystemUtils.isOSMatch(""."", ""."", (String) null, ""Array and element cannot both be null"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Decides if the operating system matches.
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param osName
 *            the actual OS name
 * @param osVersion
 *            the actual OS version
 * @param osNamePrefix
 *            the prefix for the expected OS name
 * @param osVersionPrefix
 *            the prefix for the expected OS version
 * @return true if matches, or false if not or can't determine
 */"
"static boolean isJavaVersionMatch(String version, String versionPrefix) {
    if (version == null) {
        return false;
    }
    return version.startsWith(versionPrefix);
}","public void test1414() throws Throwable {
    // Undeclared exception!
    try {
        SystemUtils.isJavaVersionMatch(""OpenJDK Runtime Environment"", (String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * <p>
 * Decides if the Java version matches.
 * </p>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param version
 *            the actual Java version
 * @param versionPrefix
 *            the prefix for the expected Java version
 * @return true if matches, or false if not or can't determine
 */"
"static float toJavaVersionInt(String version) {
    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
}","public void test1515() throws Throwable {
    float float0 = SystemUtils.toJavaVersionInt("""");
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * <p>
 * Converts the given Java version string to an <code>int</code>.
 * </p>
 *
 * <p>
 * Example return values:
 * </p>
 * <ul>
 * <li><code>120</code> for Java 1.2</li>
 * <li><code>131</code> for Java 1.3.1</li>
 * <li><code>160</code> for Java 1.6.0_20</li>
 * </ul>
 *
 * <p>
 * Patch releases are not reported.
 * </p>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @return the version, for example 131 for Java 1.3.1
 */"
"static float toJavaVersionFloat(String version) {
    return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
}","public void test1616() throws Throwable {
    float float0 = SystemUtils.toJavaVersionFloat(""3D"");
    assertEquals(3.0F, float0, 0.01F);
}","/**
 * <p>
 * Converts the given Java version string to a <code>float</code>.
 * </p>
 *
 * <p>
 * Example return values:
 * </p>
 * <ul>
 * <li><code>1.2f</code> for Java 1.2</li>
 * <li><code>1.31f</code> for Java 1.3.1</li>
 * <li><code>1.6f</code> for Java 1.6.0_20</li>
 * </ul>
 *
 * <p>
 * Patch releases are not reported.
 * </p>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @return the version, for example 1.31f for Java 1.3.1
 */"
"static float toJavaVersionFloat(String version) {
    return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
}","public void test1717() throws Throwable {
    float float0 = SystemUtils.toJavaVersionFloat(""/var/folders/vv/c7q6vm8920vc7d5p_87011w40000gn/T/EvoSuite_pathingJar7249637649498281454.jar"");
    assertEquals(7.6892F, float0, 0.01F);
}","/**
 * <p>
 * Converts the given Java version string to a <code>float</code>.
 * </p>
 *
 * <p>
 * Example return values:
 * </p>
 * <ul>
 * <li><code>1.2f</code> for Java 1.2</li>
 * <li><code>1.31f</code> for Java 1.3.1</li>
 * <li><code>1.6f</code> for Java 1.6.0_20</li>
 * </ul>
 *
 * <p>
 * Patch releases are not reported.
 * </p>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @return the version, for example 1.31f for Java 1.3.1
 */"
"static float toJavaVersionInt(String version) {
    return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
}","public void test1818() throws Throwable {
    float float0 = SystemUtils.toJavaVersionInt((String) null);
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * <p>
 * Converts the given Java version string to an <code>int</code>.
 * </p>
 *
 * <p>
 * Example return values:
 * </p>
 * <ul>
 * <li><code>120</code> for Java 1.2</li>
 * <li><code>131</code> for Java 1.3.1</li>
 * <li><code>160</code> for Java 1.6.0_20</li>
 * </ul>
 *
 * <p>
 * Patch releases are not reported.
 * </p>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @return the version, for example 131 for Java 1.3.1
 */"
"static boolean isOSNameMatch(String osName, String osNamePrefix) {
    if (osName == null) {
        return false;
    }
    return osName.startsWith(osNamePrefix);
}","public void test1919() throws Throwable {
    boolean boolean0 = SystemUtils.isOSNameMatch((String) null, ""Arguments cannot both be null"");
    assertFalse(boolean0);
}","/**
 * Decides if the operating system matches.
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param osName
 *            the actual OS name
 * @param osNamePrefix
 *            the prefix for the expected OS name
 * @return true if matches, or false if not or can't determine
 */"
"static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {
    if (osName == null || osVersion == null) {
        return false;
    }
    return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);
}","public void test2020() throws Throwable {
    boolean boolean0 = SystemUtils.isOSMatch(""1.7"", ""1.6America/Los_Angeles"", ""1.7"", ""1.7"");
    assertFalse(boolean0);
}","/**
 * Decides if the operating system matches.
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param osName
 *            the actual OS name
 * @param osVersion
 *            the actual OS version
 * @param osNamePrefix
 *            the prefix for the expected OS name
 * @param osVersionPrefix
 *            the prefix for the expected OS version
 * @return true if matches, or false if not or can't determine
 */"
"static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {
    if (osName == null || osVersion == null) {
        return false;
    }
    return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);
}","public void test2121() throws Throwable {
    boolean boolean0 = SystemUtils.isOSMatch(""1.6America/Los_Angeles"", ""1.6America/Los_Angeles"", ""1.6America/Los_Angeles"", ""1.6America/Los_Angeles"");
    assertTrue(boolean0);
}","/**
 * Decides if the operating system matches.
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param osName
 *            the actual OS name
 * @param osVersion
 *            the actual OS version
 * @param osNamePrefix
 *            the prefix for the expected OS name
 * @param osVersionPrefix
 *            the prefix for the expected OS version
 * @return true if matches, or false if not or can't determine
 */"
"static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {
    if (osName == null || osVersion == null) {
        return false;
    }
    return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);
}","public void test2222() throws Throwable {
    boolean boolean0 = SystemUtils.isOSMatch(""Oracle Corporation"", (String) null, ""Mac OS X"", ""Amazon.com Inc."");
    assertFalse(boolean0);
}","/**
 * Decides if the operating system matches.
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param osName
 *            the actual OS name
 * @param osVersion
 *            the actual OS version
 * @param osNamePrefix
 *            the prefix for the expected OS name
 * @param osVersionPrefix
 *            the prefix for the expected OS version
 * @return true if matches, or false if not or can't determine
 */"
"static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {
    if (osName == null || osVersion == null) {
        return false;
    }
    return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);
}","public void test2323() throws Throwable {
    boolean boolean0 = SystemUtils.isOSMatch(""aP?Ft1ZucjjT*w+\""W"", ""%R8Cs"", "">CNg"", "">CNg"");
    assertFalse(boolean0);
}","/**
 * Decides if the operating system matches.
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param osName
 *            the actual OS name
 * @param osVersion
 *            the actual OS version
 * @param osNamePrefix
 *            the prefix for the expected OS name
 * @param osVersionPrefix
 *            the prefix for the expected OS version
 * @return true if matches, or false if not or can't determine
 */"
"static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {
    if (osName == null || osVersion == null) {
        return false;
    }
    return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);
}","public void test2424() throws Throwable {
    boolean boolean0 = SystemUtils.isOSMatch((String) null, ""Windows"", (String) null, ""Windows"");
    assertFalse(boolean0);
}","/**
 * Decides if the operating system matches.
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param osName
 *            the actual OS name
 * @param osVersion
 *            the actual OS version
 * @param osNamePrefix
 *            the prefix for the expected OS name
 * @param osVersionPrefix
 *            the prefix for the expected OS version
 * @return true if matches, or false if not or can't determine
 */"
"static boolean isJavaVersionMatch(String version, String versionPrefix) {
    if (version == null) {
        return false;
    }
    return version.startsWith(versionPrefix);
}","public void test2525() throws Throwable {
    boolean boolean0 = SystemUtils.isJavaVersionMatch((String) null, (String) null);
    assertFalse(boolean0);
}","/**
 * <p>
 * Decides if the Java version matches.
 * </p>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param version
 *            the actual Java version
 * @param versionPrefix
 *            the prefix for the expected Java version
 * @return true if matches, or false if not or can't determine
 */"
"static boolean isJavaVersionMatch(String version, String versionPrefix) {
    if (version == null) {
        return false;
    }
    return version.startsWith(versionPrefix);
}","public void test2626() throws Throwable {
    boolean boolean0 = SystemUtils.isJavaVersionMatch(""Windows"", ""Windows"");
    assertTrue(boolean0);
}","/**
 * <p>
 * Decides if the Java version matches.
 * </p>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @param version
 *            the actual Java version
 * @param versionPrefix
 *            the prefix for the expected Java version
 * @return true if matches, or false if not or can't determine
 */"
"public static boolean isJavaVersionAtLeast(int requiredVersion) {
    return JAVA_VERSION_INT >= requiredVersion;
}","public void test2727() throws Throwable {
    boolean boolean0 = SystemUtils.isJavaVersionAtLeast(180);
    assertTrue(boolean0);
}","/**
 * <p>
 * Is the Java version at least the requested version.
 * </p>
 *
 * <p>
 * Example input:
 * </p>
 * <ul>
 * <li><code>120</code> to test for Java 1.2 or greater</li>
 * <li><code>131</code> to test for Java 1.3.1 or greater</li>
 * </ul>
 *
 * @param requiredVersion
 *            the required version, for example 131
 * @return <code>true</code> if the actual version is equal or greater than the required version
 * @since 2.0
 */"
"public static boolean isJavaVersionAtLeast(int requiredVersion) {
    return JAVA_VERSION_INT >= requiredVersion;
}","public void test2828() throws Throwable {
    boolean boolean0 = SystemUtils.isJavaVersionAtLeast(1404);
    assertFalse(boolean0);
}","/**
 * <p>
 * Is the Java version at least the requested version.
 * </p>
 *
 * <p>
 * Example input:
 * </p>
 * <ul>
 * <li><code>120</code> to test for Java 1.2 or greater</li>
 * <li><code>131</code> to test for Java 1.3.1 or greater</li>
 * </ul>
 *
 * @param requiredVersion
 *            the required version, for example 131
 * @return <code>true</code> if the actual version is equal or greater than the required version
 * @since 2.0
 */"
"public static boolean isJavaVersionAtLeast(float requiredVersion) {
    return JAVA_VERSION_FLOAT >= requiredVersion;
}","public void test2929() throws Throwable {
    boolean boolean0 = SystemUtils.isJavaVersionAtLeast(0.0F);
    assertTrue(boolean0);
}","/**
 * <p>
 * Is the Java version at least the requested version.
 * </p>
 *
 * <p>
 * Example input:
 * </p>
 * <ul>
 * <li><code>1.2f</code> to test for Java 1.2</li>
 * <li><code>1.31f</code> to test for Java 1.3.1</li>
 * </ul>
 *
 * @param requiredVersion
 *            the required version, for example 1.31f
 * @return <code>true</code> if the actual version is equal or greater than the required version
 */"
"public static boolean isJavaVersionAtLeast(float requiredVersion) {
    return JAVA_VERSION_FLOAT >= requiredVersion;
}","public void test3030() throws Throwable {
    boolean boolean0 = SystemUtils.isJavaVersionAtLeast(3.0F);
    assertFalse(boolean0);
}","/**
 * <p>
 * Is the Java version at least the requested version.
 * </p>
 *
 * <p>
 * Example input:
 * </p>
 * <ul>
 * <li><code>1.2f</code> to test for Java 1.2</li>
 * <li><code>1.31f</code> to test for Java 1.3.1</li>
 * </ul>
 *
 * @param requiredVersion
 *            the required version, for example 1.31f
 * @return <code>true</code> if the actual version is equal or greater than the required version
 */"
"public static boolean isJavaAwtHeadless() {
    return JAVA_AWT_HEADLESS != null ? JAVA_AWT_HEADLESS.equals(Boolean.TRUE.toString()) : false;
}","public void test3131() throws Throwable {
    boolean boolean0 = SystemUtils.isJavaAwtHeadless();
    assertTrue(boolean0);
}","/**
 * Returns whether the {@link #JAVA_AWT_HEADLESS} value is <code>true</code>.
 *
 * @return <code>true</code> if <code>JAVA_AWT_HEADLESS</code> is <code>""true""</code>, <code>false</code> otherwise.
 *
 * @see #JAVA_AWT_HEADLESS
 * @since 2.1
 * @since Java 1.4
 */"
"// -----------------------------------------------------------------------
/**
 * <p>
 * SystemUtils instances should NOT be constructed in standard programming. Instead, the class should be used as
 * <code>SystemUtils.FILE_SEPARATOR</code>.
 * </p>
 *
 * <p>
 * This constructor is public to permit tools that require a JavaBean instance to operate.
 * </p>
 */
public SystemUtils() {
    super();
}","public void test3232() throws Throwable {
    SystemUtils systemUtils0 = new SystemUtils();
    assertTrue(SystemUtils.IS_OS_MAC_OSX);
}",""
"static int[] toJavaVersionIntArray(String version) {
    return toJavaVersionIntArray(version, Integer.MAX_VALUE);
}","public void test3737() throws Throwable {
    int[] intArray0 = SystemUtils.toJavaVersionIntArray(""1.8.0_382"");
    assertEquals(4, intArray0.length);
}","/**
 * <p>
 * Converts the given Java version string to an <code>int[]</code> of maximum size <code>3</code>.
 * </p>
 *
 * <p>
 * Example return values:
 * </p>
 * <ul>
 * <li><code>[1, 2, 0]</code> for Java 1.2</li>
 * <li><code>[1, 3, 1]</code> for Java 1.3.1</li>
 * <li><code>[1, 5, 0]</code> for Java 1.5.0_21</li>
 * </ul>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @return the version, for example [1, 5, 0] for Java 1.5.0_21
 */"
"static float toJavaVersionFloat(String version) {
    return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
}","public void test3839() throws Throwable {
    float float0 = SystemUtils.toJavaVersionFloat(""_"");
    assertEquals(0.0F, float0, 0.01F);
}","/**
 * <p>
 * Converts the given Java version string to a <code>float</code>.
 * </p>
 *
 * <p>
 * Example return values:
 * </p>
 * <ul>
 * <li><code>1.2f</code> for Java 1.2</li>
 * <li><code>1.31f</code> for Java 1.3.1</li>
 * <li><code>1.6f</code> for Java 1.6.0_20</li>
 * </ul>
 *
 * <p>
 * Patch releases are not reported.
 * </p>
 * <p>
 * This method is package private instead of private to support unit test invocation.
 * </p>
 *
 * @return the version, for example 1.31f for Java 1.3.1
 */"
