focal_method,test_prefix,docstring
"public String getNamespaceURI() {
    return _namespaceURI;
}","public void test000() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    String string0 = xmlTokenStream0.getNamespaceURI();
    assertNotNull(string0);
}",""
"public int getCurrentToken() {
    return _currentState;
}","public void test001() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    String string0 = xmlTokenStream0.getNamespaceURI();
    assertEquals(1, xmlTokenStream0.getCurrentToken());
}",""
"public int getCurrentToken() {
    return _currentState;
}","public void test012() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    xmlTokenStream0.closeCompletely();
    assertEquals(1, xmlTokenStream0.getCurrentToken());
}",""
"public int getCurrentToken() {
    return _currentState;
}","public void test023() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    xmlTokenStream0.close();
    assertEquals(1, xmlTokenStream0.getCurrentToken());
}",""
"// for DEBUGGING
@Override
public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(""(Token stream:"");
    sb.append("" state="").append(_currentState);
    sb.append("" attr#="").append(_attributeCount);
    sb.append("" nextAttr#="").append(_nextAttributeIndex);
    sb.append("" name="").append(_localName);
    sb.append("" text="").append(_textValue);
    sb.append("" repeat?="").append(_repeatElement);
    sb.append("" wrapper=["").append(_currentWrapper);
    sb.append(""] repeatElement="").append(_repeatElement);
    sb.append("" nextName="").append(_nextLocalName);
    sb.append("")"");
    return sb.toString();
}","public void test034() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, ""N;-FAu[DTG"");
    String string0 = xmlTokenStream0.toString();
    assertEquals(""(Token stream: state=1 attr#=0 nextAttr#=0 name= text=null repeat?=0 wrapper=[null] repeatElement=0 nextName=null)"", string0);
}",""
"public int getCurrentToken() {
    return _currentState;
}","public void test045() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, ""N;-FAu[DTG"");
    xmlTokenStream0.getXmlReader();
    assertEquals(1, xmlTokenStream0.getCurrentToken());
}",""
"public int getCurrentToken() {
    return _currentState;
}","public void test056() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
    xmlTokenStream0.getCurrentLocation();
    assertEquals(1, xmlTokenStream0.getCurrentToken());
}",""
"public String getLocalName() {
    return _localName;
}","public void test067() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    String string0 = xmlTokenStream0.getLocalName();
    assertNotNull(string0);
}",""
"public int getCurrentToken() {
    return _currentState;
}","public void test068() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    String string0 = xmlTokenStream0.getLocalName();
    assertEquals(1, xmlTokenStream0.getCurrentToken());
}",""
"public String getText() {
    return _textValue;
}","public void test079() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    String string0 = xmlTokenStream0.getText();
    assertNull(string0);
}",""
"public int getCurrentToken() {
    return _currentState;
}","public void test0710() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    String string0 = xmlTokenStream0.getText();
    assertEquals(1, xmlTokenStream0.getCurrentToken());
}",""
"public int getCurrentToken() {
    return _currentState;
}","public void test0811() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    int int0 = xmlTokenStream0.getCurrentToken();
    assertEquals(1, int0);
}",""
"public int getCurrentToken() {
    return _currentState;
}","public void test0912() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, ""N;-FAu[DTG"");
    xmlTokenStream0.getTokenLocation();
    assertEquals(1, xmlTokenStream0.getCurrentToken());
}",""
"/*
    /**********************************************************************
    /* Life-cycle
    /**********************************************************************
     */
public XmlTokenStream(XMLStreamReader xmlReader, Object sourceRef) {
    _sourceReference = sourceRef;
    // Let's ensure we point to START_ELEMENT...
    if (xmlReader.getEventType() != XMLStreamConstants.START_ELEMENT) {
        throw new IllegalArgumentException(""Invalid XMLStreamReader passed: should be pointing to START_ELEMENT ("" + XMLStreamConstants.START_ELEMENT + ""), instead got "" + xmlReader.getEventType());
    }
    _xmlReader = Stax2ReaderAdapter.wrapIfNecessary(xmlReader);
    _currentState = XML_START_ELEMENT;
    _localName = _xmlReader.getLocalName();
    _namespaceURI = _xmlReader.getNamespaceURI();
    _attributeCount = _xmlReader.getAttributeCount();
}","public void test1013() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    WstxInputFactory wstxInputFactory0 = new WstxInputFactory();
    XMLStreamReader xMLStreamReader0 = wstxInputFactory0.createXMLStreamReader((Source) dOMSource0);
    XmlTokenStream xmlTokenStream0 = null;
    try {
        xmlTokenStream0 = new XmlTokenStream(xMLStreamReader0, xMLStreamReader0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Invalid XMLStreamReader passed: should be pointing to START_ELEMENT (1), instead got 7
        //
        verifyException(""com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream"", e);
    }
}",""
"/*
    /**********************************************************************
    /* Public API
    /**********************************************************************
     */
// DEBUGGING
/*
    public int next() throws IOException 
    {
        int n = next0();
        switch (n) {
        case XML_START_ELEMENT: 
            System.out.println("" XML-token: XML_START_ELEMENT '""+_localName+""'"");
            break;
        case XML_END_ELEMENT: 
            System.out.println("" XML-token: XML_END_ELEMENT '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_NAME: 
            System.out.println("" XML-token: XML_ATTRIBUTE_NAME '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_VALUE: 
            System.out.println("" XML-token: XML_ATTRIBUTE_VALUE '""+_textValue+""'"");
            break;
        case XML_TEXT: 
            System.out.println("" XML-token: XML_TEXT '""+_textValue+""'"");
            break;
        case XML_END: 
            System.out.println("" XML-token: XML_END"");
            break;
        default:
            throw new IllegalStateException();
        }
        return n;
    }
    */
public int next() throws IOException {
    if (_repeatElement != 0) {
        return (_currentState = _handleRepeatElement());
    }
    try {
        return _next();
    } catch (XMLStreamException e) {
        StaxUtil.throwXmlAsIOException(e);
        return -1;
    }
}","public void test1115() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    xmlTokenStream0.repeatStartElement();
    int int0 = xmlTokenStream0.next();
    assertEquals(1, int0);
}",""
"public void skipEndElement() throws IOException {
    int type = next();
    if (type != XML_END_ELEMENT) {
        throw new IOException(""Expected END_ELEMENT, got event of type "" + type);
    }
}","public void test1216() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    xmlTokenStream0.skipEndElement();
    try {
        xmlTokenStream0.skipEndElement();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Expected END_ELEMENT, got event of type 6
        //
        verifyException(""com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream"", e);
    }
}",""
"public boolean hasAttributes() {
    return (_currentState == XML_START_ELEMENT) && (_attributeCount > 0);
}","public void test1419() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    boolean boolean0 = xmlTokenStream0.hasAttributes();
    assertFalse(boolean0);
}",""
"/*
    /**********************************************************************
    /* Internal API: more esoteric methods
    /**********************************************************************
     */
/**
 * Method used to add virtual wrapping, which just duplicates START_ELEMENT
 * stream points to, and its matching closing element.
 *
 * @since 2.1
 */
protected void repeatStartElement() {
    //System.out.println("" -> repeatStartElement for ""+_localName);
    // sanity check: can only be used when just returned START_ELEMENT:
    if (_currentState != XML_START_ELEMENT) {
        throw new IllegalStateException(""Current state not XML_START_ELEMENT ("" + XML_START_ELEMENT + "") but "" + _currentState);
    }
    // Important: add wrapper, to keep track...
    if (_currentWrapper == null) {
        _currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper, _localName, _namespaceURI);
    } else {
        _currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper.getParent(), _localName, _namespaceURI);
    }
    _repeatElement = REPLAY_START_DUP;
}","public void test1520() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    xmlTokenStream0._currentState = 500;
    // Undeclared exception!
    try {
        xmlTokenStream0.repeatStartElement();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Current state not XML_START_ELEMENT (1) but 500
        //
        verifyException(""com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream"", e);
    }
}",""
"/*
    /**********************************************************************
    /* Internal API: more esoteric methods
    /**********************************************************************
     */
/**
 * Method used to add virtual wrapping, which just duplicates START_ELEMENT
 * stream points to, and its matching closing element.
 *
 * @since 2.1
 */
protected void repeatStartElement() {
    //System.out.println("" -> repeatStartElement for ""+_localName);
    // sanity check: can only be used when just returned START_ELEMENT:
    if (_currentState != XML_START_ELEMENT) {
        throw new IllegalStateException(""Current state not XML_START_ELEMENT ("" + XML_START_ELEMENT + "") but "" + _currentState);
    }
    // Important: add wrapper, to keep track...
    if (_currentWrapper == null) {
        _currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper, _localName, _namespaceURI);
    } else {
        _currentWrapper = ElementWrapper.matchingWrapper(_currentWrapper.getParent(), _localName, _namespaceURI);
    }
    _repeatElement = REPLAY_START_DUP;
}","public void test1621() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, ""N;-FAu[DTG"");
    xmlTokenStream0.repeatStartElement();
    xmlTokenStream0.repeatStartElement();
    assertEquals(3, XmlTokenStream.XML_ATTRIBUTE_NAME);
}",""
"public String getText() {
    return _textValue;
}","public void test1722() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
    xmlTokenStream0.skipAttributes();
    assertNull(xmlTokenStream0.getText());
}",""
"protected void skipAttributes() {
    if (_currentState == XML_ATTRIBUTE_NAME) {
        _attributeCount = 0;
        _currentState = XML_START_ELEMENT;
    } else if (_currentState == XML_START_ELEMENT) {
        /* 06-Jan-2012, tatu: As per [#47] it looks like we should NOT do anything
             *   in this particular case, because it occurs when original element had
             *   no attributes and we now point to the first child element.
             */
        //              _attributeCount = 0;
    } else if (_currentState == XML_TEXT) {
        // nothing to do... is it even legal?
        ;
    } else {
        throw new IllegalStateException(""Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME ("" + XML_START_ELEMENT + "") but "" + _currentState);
    }
}","public void test1823() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    xmlTokenStream0.next();
    // Undeclared exception!
    try {
        xmlTokenStream0.skipAttributes();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but 2
        //
        verifyException(""com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream"", e);
    }
}","/**
 * Method called to skip any attributes current START_ELEMENT may have,
 * so that they are not returned as token.
 *
 * @since 2.1
 */"
"public boolean hasAttributes() {
    return (_currentState == XML_START_ELEMENT) && (_attributeCount > 0);
}","public void test2026() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    iIOMetadataNode0.setAttributeNS(""Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but "", ""Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but "", ""Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but "");
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    xmlTokenStream0.next();
    xmlTokenStream0.next();
    int int0 = xmlTokenStream0.next();
    assertFalse(xmlTokenStream0.hasAttributes());
}",""
"/*
    /**********************************************************************
    /* Public API
    /**********************************************************************
     */
// DEBUGGING
/*
    public int next() throws IOException 
    {
        int n = next0();
        switch (n) {
        case XML_START_ELEMENT: 
            System.out.println("" XML-token: XML_START_ELEMENT '""+_localName+""'"");
            break;
        case XML_END_ELEMENT: 
            System.out.println("" XML-token: XML_END_ELEMENT '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_NAME: 
            System.out.println("" XML-token: XML_ATTRIBUTE_NAME '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_VALUE: 
            System.out.println("" XML-token: XML_ATTRIBUTE_VALUE '""+_textValue+""'"");
            break;
        case XML_TEXT: 
            System.out.println("" XML-token: XML_TEXT '""+_textValue+""'"");
            break;
        case XML_END: 
            System.out.println("" XML-token: XML_END"");
            break;
        default:
            throw new IllegalStateException();
        }
        return n;
    }
    */
public int next() throws IOException {
    if (_repeatElement != 0) {
        return (_currentState = _handleRepeatElement());
    }
    try {
        return _next();
    } catch (XMLStreamException e) {
        StaxUtil.throwXmlAsIOException(e);
        return -1;
    }
}","public void test2027() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    iIOMetadataNode0.setAttributeNS(""Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but "", ""Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but "", ""Current state not XML_START_ELEMENT or XML_ATTRIBUTE_NAME (1) but "");
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    xmlTokenStream0.next();
    xmlTokenStream0.next();
    int int0 = xmlTokenStream0.next();
    assertEquals(2, int0);
}",""
"public int getCurrentToken() {
    return _currentState;
}","public void test2128() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    xmlTokenStream0._currentState = 5;
    int int0 = xmlTokenStream0.next();
    assertEquals(2, xmlTokenStream0.getCurrentToken());
}",""
"/*
    /**********************************************************************
    /* Public API
    /**********************************************************************
     */
// DEBUGGING
/*
    public int next() throws IOException 
    {
        int n = next0();
        switch (n) {
        case XML_START_ELEMENT: 
            System.out.println("" XML-token: XML_START_ELEMENT '""+_localName+""'"");
            break;
        case XML_END_ELEMENT: 
            System.out.println("" XML-token: XML_END_ELEMENT '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_NAME: 
            System.out.println("" XML-token: XML_ATTRIBUTE_NAME '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_VALUE: 
            System.out.println("" XML-token: XML_ATTRIBUTE_VALUE '""+_textValue+""'"");
            break;
        case XML_TEXT: 
            System.out.println("" XML-token: XML_TEXT '""+_textValue+""'"");
            break;
        case XML_END: 
            System.out.println("" XML-token: XML_END"");
            break;
        default:
            throw new IllegalStateException();
        }
        return n;
    }
    */
public int next() throws IOException {
    if (_repeatElement != 0) {
        return (_currentState = _handleRepeatElement());
    }
    try {
        return _next();
    } catch (XMLStreamException e) {
        StaxUtil.throwXmlAsIOException(e);
        return -1;
    }
}","public void test2129() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createJ2MEDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    xmlTokenStream0._currentState = 5;
    int int0 = xmlTokenStream0.next();
    assertEquals(2, int0);
}",""
"public int getCurrentToken() {
    return _currentState;
}","public void test2230() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
    xmlTokenStream0.next();
    xmlTokenStream0.next();
    int int0 = xmlTokenStream0.next();
    assertEquals(6, xmlTokenStream0.getCurrentToken());
}",""
"/*
    /**********************************************************************
    /* Public API
    /**********************************************************************
     */
// DEBUGGING
/*
    public int next() throws IOException 
    {
        int n = next0();
        switch (n) {
        case XML_START_ELEMENT: 
            System.out.println("" XML-token: XML_START_ELEMENT '""+_localName+""'"");
            break;
        case XML_END_ELEMENT: 
            System.out.println("" XML-token: XML_END_ELEMENT '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_NAME: 
            System.out.println("" XML-token: XML_ATTRIBUTE_NAME '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_VALUE: 
            System.out.println("" XML-token: XML_ATTRIBUTE_VALUE '""+_textValue+""'"");
            break;
        case XML_TEXT: 
            System.out.println("" XML-token: XML_TEXT '""+_textValue+""'"");
            break;
        case XML_END: 
            System.out.println("" XML-token: XML_END"");
            break;
        default:
            throw new IllegalStateException();
        }
        return n;
    }
    */
public int next() throws IOException {
    if (_repeatElement != 0) {
        return (_currentState = _handleRepeatElement());
    }
    try {
        return _next();
    } catch (XMLStreamException e) {
        StaxUtil.throwXmlAsIOException(e);
        return -1;
    }
}","public void test2231() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, iIOMetadataNode0);
    xmlTokenStream0.next();
    xmlTokenStream0.next();
    int int0 = xmlTokenStream0.next();
    assertEquals(6, int0);
}",""
"/*
    /**********************************************************************
    /* Public API
    /**********************************************************************
     */
// DEBUGGING
/*
    public int next() throws IOException 
    {
        int n = next0();
        switch (n) {
        case XML_START_ELEMENT: 
            System.out.println("" XML-token: XML_START_ELEMENT '""+_localName+""'"");
            break;
        case XML_END_ELEMENT: 
            System.out.println("" XML-token: XML_END_ELEMENT '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_NAME: 
            System.out.println("" XML-token: XML_ATTRIBUTE_NAME '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_VALUE: 
            System.out.println("" XML-token: XML_ATTRIBUTE_VALUE '""+_textValue+""'"");
            break;
        case XML_TEXT: 
            System.out.println("" XML-token: XML_TEXT '""+_textValue+""'"");
            break;
        case XML_END: 
            System.out.println("" XML-token: XML_END"");
            break;
        default:
            throw new IllegalStateException();
        }
        return n;
    }
    */
public int next() throws IOException {
    if (_repeatElement != 0) {
        return (_currentState = _handleRepeatElement());
    }
    try {
        return _next();
    } catch (XMLStreamException e) {
        StaxUtil.throwXmlAsIOException(e);
        return -1;
    }
}","public void test2435() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    iIOMetadataNode0.appendChild(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
    int int0 = xmlTokenStream0.next();
    assertEquals(1, int0);
}",""
"/*
    /**********************************************************************
    /* Public API
    /**********************************************************************
     */
// DEBUGGING
/*
    public int next() throws IOException 
    {
        int n = next0();
        switch (n) {
        case XML_START_ELEMENT: 
            System.out.println("" XML-token: XML_START_ELEMENT '""+_localName+""'"");
            break;
        case XML_END_ELEMENT: 
            System.out.println("" XML-token: XML_END_ELEMENT '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_NAME: 
            System.out.println("" XML-token: XML_ATTRIBUTE_NAME '""+_localName+""'"");
            break;
        case XML_ATTRIBUTE_VALUE: 
            System.out.println("" XML-token: XML_ATTRIBUTE_VALUE '""+_textValue+""'"");
            break;
        case XML_TEXT: 
            System.out.println("" XML-token: XML_TEXT '""+_textValue+""'"");
            break;
        case XML_END: 
            System.out.println("" XML-token: XML_END"");
            break;
        default:
            throw new IllegalStateException();
        }
        return n;
    }
    */
public int next() throws IOException {
    if (_repeatElement != 0) {
        return (_currentState = _handleRepeatElement());
    }
    try {
        return _next();
    } catch (XMLStreamException e) {
        StaxUtil.throwXmlAsIOException(e);
        return -1;
    }
}","public void test2536() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    XmlTokenStream xmlTokenStream1 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
    xmlTokenStream0.next();
    xmlTokenStream1.next();
    // Undeclared exception!
    try {
        xmlTokenStream1.next();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Expected to find a tag, instead reached end of input
        //
        verifyException(""com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream"", e);
    }
}",""
"protected int _handleRepeatElement() throws IOException {
    int type = _repeatElement;
    _repeatElement = 0;
    if (type == REPLAY_START_DUP) {
        //System.out.println(""handleRepeat for START_ELEMENT: ""+_localName+"" (""+_xmlReader.getLocalName()+"")"");
        // important: add the virtual element second time, but not with name to match
        _currentWrapper = _currentWrapper.intermediateWrapper();
        return XML_START_ELEMENT;
    }
    if (type == REPLAY_END) {
        //System.out.println(""handleRepeat for END_ELEMENT: ""+_localName+"" (""+_xmlReader.getLocalName()+"")"");
        _localName = _xmlReader.getLocalName();
        _namespaceURI = _xmlReader.getNamespaceURI();
        if (_currentWrapper != null) {
            _currentWrapper = _currentWrapper.getParent();
        }
        return XML_END_ELEMENT;
    }
    if (type == REPLAY_START_DELAYED) {
        if (_currentWrapper != null) {
            _currentWrapper = _currentWrapper.intermediateWrapper();
        }
        _localName = _nextLocalName;
        _namespaceURI = _nextNamespaceURI;
        _nextLocalName = null;
        _nextNamespaceURI = null;
        //System.out.println(""handleRepeat for START_DELAYED: ""+_localName+"" (""+_xmlReader.getLocalName()+"")"");
        return XML_START_ELEMENT;
    }
    throw new IllegalStateException(""Unrecognized type to repeat: "" + type);
}","public void test2637() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, readerConfig0);
    // Undeclared exception!
    try {
        xmlTokenStream0._handleRepeatElement();
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unrecognized type to repeat: 0
        //
        verifyException(""com.fasterxml.jackson.dataformat.xml.deser.XmlTokenStream"", e);
    }
}","/**
 * Method called to handle details of repeating ""virtual""
 * start/end elements, needed for handling 'unwrapped' lists.
 */"
"protected int _handleRepeatElement() throws IOException {
    int type = _repeatElement;
    _repeatElement = 0;
    if (type == REPLAY_START_DUP) {
        //System.out.println(""handleRepeat for START_ELEMENT: ""+_localName+"" (""+_xmlReader.getLocalName()+"")"");
        // important: add the virtual element second time, but not with name to match
        _currentWrapper = _currentWrapper.intermediateWrapper();
        return XML_START_ELEMENT;
    }
    if (type == REPLAY_END) {
        //System.out.println(""handleRepeat for END_ELEMENT: ""+_localName+"" (""+_xmlReader.getLocalName()+"")"");
        _localName = _xmlReader.getLocalName();
        _namespaceURI = _xmlReader.getNamespaceURI();
        if (_currentWrapper != null) {
            _currentWrapper = _currentWrapper.getParent();
        }
        return XML_END_ELEMENT;
    }
    if (type == REPLAY_START_DELAYED) {
        if (_currentWrapper != null) {
            _currentWrapper = _currentWrapper.intermediateWrapper();
        }
        _localName = _nextLocalName;
        _namespaceURI = _nextNamespaceURI;
        _nextLocalName = null;
        _nextNamespaceURI = null;
        //System.out.println(""handleRepeat for START_DELAYED: ""+_localName+"" (""+_xmlReader.getLocalName()+"")"");
        return XML_START_ELEMENT;
    }
    throw new IllegalStateException(""Unrecognized type to repeat: "" + type);
}","public void test2739() throws Throwable {
    IIOMetadataNode iIOMetadataNode0 = new IIOMetadataNode();
    DOMSource dOMSource0 = new DOMSource(iIOMetadataNode0);
    ReaderConfig readerConfig0 = ReaderConfig.createFullDefaults();
    WstxDOMWrappingReader wstxDOMWrappingReader0 = WstxDOMWrappingReader.createFrom(dOMSource0, readerConfig0);
    wstxDOMWrappingReader0.next();
    XmlTokenStream xmlTokenStream0 = new XmlTokenStream(wstxDOMWrappingReader0, wstxDOMWrappingReader0);
    ElementWrapper elementWrapper0 = ElementWrapper.matchingWrapper((ElementWrapper) null, "":e]t"", "":e]t"");
    xmlTokenStream0._currentWrapper = elementWrapper0;
    xmlTokenStream0.next();
    int int0 = xmlTokenStream0._handleRepeatElement();
    assertEquals(2, int0);
}","/**
 * Method called to handle details of repeating ""virtual""
 * start/end elements, needed for handling 'unwrapped' lists.
 */"
