focal_method,test_prefix,docstring
"protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException {
    xgen.writeStartObject();
    // Could repeat root name, but what's the point? How to customize?
    xgen.writeFieldName(""item"");
}","public void test000() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    QName qName0 = new QName("""");
    // Undeclared exception!
    try {
        xmlSerializerProvider0._startRootArray((ToXmlGenerator) null, qName0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider"", e);
    }
}",""
"/*
    /**********************************************************************
    /* Overridden methods
    /**********************************************************************
     */
@Override
public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf) {
    return new XmlSerializerProvider(this, config, jsf);
}","public void test011() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    // Undeclared exception!
    try {
        xmlSerializerProvider0.createInstance((SerializationConfig) null, beanSerializerFactory0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",""
"@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final Class<?> cls = value.getClass();
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(cls, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(cls);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    // From super-class implementation
    final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // As per [JACKSON-99], pass IOException and subtypes as-is
        throw ioe;
    } catch (Exception e) {
        // but wrap RuntimeExceptions, to get path information
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test022() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    try {
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, (Object) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // [no message for java.lang.NullPointerException]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
"@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final Class<?> cls = value.getClass();
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(cls, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(cls);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    // From super-class implementation
    final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // As per [JACKSON-99], pass IOException and subtypes as-is
        throw ioe;
    } catch (Exception e) {
        // but wrap RuntimeExceptions, to get path information
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test033() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    // Undeclared exception!
    try {
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) tokenBuffer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",""
"@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final Class<?> cls = value.getClass();
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(cls, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(cls);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    // From super-class implementation
    final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // As per [JACKSON-99], pass IOException and subtypes as-is
        throw ioe;
    } catch (Exception e) {
        // but wrap RuntimeExceptions, to get path information
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test044() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
    AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, true);
    SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, xmlRootNameLookup0, true);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 2, objectMapper0, simpleNsStreamWriter0);
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    PropertyName propertyName0 = new PropertyName((String) null, (String) null);
    SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
    XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
    // Undeclared exception!
    try {
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) xmlSerializerProvider0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.cfg.MapperConfig"", e);
    }
}",""
"@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final Class<?> cls = value.getClass();
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(cls, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(cls);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    // From super-class implementation
    final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // As per [JACKSON-99], pass IOException and subtypes as-is
        throw ioe;
    } catch (Exception e) {
        // but wrap RuntimeExceptions, to get path information
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test055() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
    AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, true);
    SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, simpleNsStreamWriter0);
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0, configOverrides0);
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
    // Undeclared exception!
    try {
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) xmlRootNameLookup0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.cfg.MapperConfig"", e);
    }
}",""
"// @since 2.7.5
public boolean inRoot() {
    return _writeContext.inRoot();
}","public void test066() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
    AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, true);
    SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ""JSON"", writerConfig0);
    BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
    ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 3, objectMapper0, simpleNsStreamWriter0);
    xmlSerializerProvider0.serializeValue((JsonGenerator) toXmlGenerator0, (Object) null, (JavaType) null);
    assertTrue(toXmlGenerator0.inRoot());
}",""
"@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(rootType, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(rootType);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    final JsonSerializer<Object> ser = findTypedValueSerializer(rootType, true, null);
    // From super-class implementation
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // no wrapping for IO (and derived)
        throw ioe;
    } catch (Exception e) {
        // but others do need to be, to get path etc
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test077() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
    // Undeclared exception!
    try {
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) xmlRootNameLookup0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",""
"@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(rootType, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(rootType);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    final JsonSerializer<Object> ser = findTypedValueSerializer(rootType, true, null);
    // From super-class implementation
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // no wrapping for IO (and derived)
        throw ioe;
    } catch (Exception e) {
        // but others do need to be, to get path etc
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test088() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
    AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, false);
    SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, xmlRootNameLookup0, false);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 1, objectMapper0, simpleNsStreamWriter0);
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
    // Undeclared exception!
    try {
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) writerConfig0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup"", e);
    }
}",""
"// @since 2.1
@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(rootType, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(rootType);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    if (ser == null) {
        ser = findTypedValueSerializer(rootType, true, null);
    }
    // From super-class implementation
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // no wrapping for IO (and derived)
        throw ioe;
    } catch (Exception e) {
        // but others do need to be, to get path etc
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test099() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    try {
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, (Object) null, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // [no message for java.lang.NullPointerException]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
"// @since 2.1
@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(rootType, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(rootType);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    if (ser == null) {
        ser = findTypedValueSerializer(rootType, true, null);
    }
    // From super-class implementation
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // no wrapping for IO (and derived)
        throw ioe;
    } catch (Exception e) {
        // but others do need to be, to get path etc
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test1010() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
    AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, true);
    SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 0, 3, objectMapper0, simpleNsStreamWriter0);
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig0, beanSerializerFactory0);
    // Undeclared exception!
    try {
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) bufferRecycler0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup"", e);
    }
}",""
"// @since 2.1
@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(rootType, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(rootType);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    if (ser == null) {
        ser = findTypedValueSerializer(rootType, true, null);
    }
    // From super-class implementation
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // no wrapping for IO (and derived)
        throw ioe;
    } catch (Exception e) {
        // but others do need to be, to get path etc
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test1111() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
    // Undeclared exception!
    try {
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) jsonFactory0, (JavaType) null, (JsonSerializer<Object>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",""
"// @since 2.1
@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(rootType, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(rootType);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    if (ser == null) {
        ser = findTypedValueSerializer(rootType, true, null);
    }
    // From super-class implementation
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // no wrapping for IO (and derived)
        throw ioe;
    } catch (Exception e) {
        // but others do need to be, to get path etc
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test1212() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    TokenBuffer tokenBuffer0 = new TokenBuffer(jsonParser0);
    Class<ToXmlGenerator> class0 = ToXmlGenerator.class;
    JsonSerializer<Object> jsonSerializer0 = xmlSerializerProvider0.getUnknownTypeSerializer(class0);
    try {
        xmlSerializerProvider0.serializeValue((JsonGenerator) tokenBuffer0, (Object) class0, (JavaType) null, jsonSerializer0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // [no message for java.lang.NullPointerException]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
"// @since 2.7.5
public boolean inRoot() {
    return _writeContext.inRoot();
}","public void test1414() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    QName qName0 = XmlSerializerProvider.ROOT_NAME_FOR_NULL;
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
    AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, false);
    SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, ""JSON"", writerConfig0);
    BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, false);
    ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 1, 0, objectMapper0, simpleNsStreamWriter0);
    xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
    xmlSerializerProvider0._initWithRootName(toXmlGenerator0, qName0);
    assertTrue(toXmlGenerator0.inRoot());
}",""
"@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final Class<?> cls = value.getClass();
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(cls, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(cls);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    // From super-class implementation
    final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // As per [JACKSON-99], pass IOException and subtypes as-is
        throw ioe;
    } catch (Exception e) {
        // but wrap RuntimeExceptions, to get path information
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test1515() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
    AsciiXmlWriter asciiXmlWriter0 = new AsciiXmlWriter(pipedOutputStream0, writerConfig0, true);
    SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(asciiXmlWriter0, (String) null, writerConfig0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, xmlRootNameLookup0, false);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, 3, 0, objectMapper0, simpleNsStreamWriter0);
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    PropertyName propertyName0 = new PropertyName((String) null, ""[no message for "");
    SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
    XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
    // Undeclared exception!
    try {
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) deserializationFeature0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.cfg.MapperConfig"", e);
    }
}",""
"@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final Class<?> cls = value.getClass();
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(cls, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(cls);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    // From super-class implementation
    final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null);
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // As per [JACKSON-99], pass IOException and subtypes as-is
        throw ioe;
    } catch (Exception e) {
        // but wrap RuntimeExceptions, to get path information
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test1616() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    WriterConfig writerConfig0 = WriterConfig.createFullDefaults();
    ISOLatin1XmlWriter iSOLatin1XmlWriter0 = new ISOLatin1XmlWriter(pipedOutputStream0, writerConfig0, false);
    SimpleNsStreamWriter simpleNsStreamWriter0 = new SimpleNsStreamWriter(iSOLatin1XmlWriter0, (String) null, writerConfig0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ToXmlGenerator toXmlGenerator0 = new ToXmlGenerator(iOContext0, (-3477), 0, objectMapper0, simpleNsStreamWriter0);
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
    BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
    PropertyName propertyName0 = new PropertyName((String) null, """");
    SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
    XmlSerializerProvider xmlSerializerProvider1 = new XmlSerializerProvider(xmlSerializerProvider0, serializationConfig1, beanSerializerFactory0);
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
    ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
    // Undeclared exception!
    try {
        xmlSerializerProvider1.serializeValue((JsonGenerator) toXmlGenerator0, (Object) objectMapper_DefaultTypeResolverBuilder0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.cfg.MapperConfig"", e);
    }
}",""
"// @since 2.1
@SuppressWarnings(""resource"")
@Override
public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException {
    if (value == null) {
        _serializeXmlNull(gen);
        return;
    }
    final boolean asArray;
    final ToXmlGenerator xgen = _asXmlGenerator(gen);
    if (xgen == null) {
        // called by convertValue()
        asArray = false;
    } else {
        QName rootName = _rootNameFromConfig();
        if (rootName == null) {
            rootName = _rootNameLookup.findRootName(rootType, _config);
        }
        _initWithRootName(xgen, rootName);
        asArray = TypeUtil.isIndexedType(rootType);
        if (asArray) {
            _startRootArray(xgen, rootName);
        }
    }
    if (ser == null) {
        ser = findTypedValueSerializer(rootType, true, null);
    }
    // From super-class implementation
    try {
        ser.serialize(value, gen, this);
    } catch (IOException ioe) {
        // no wrapping for IO (and derived)
        throw ioe;
    } catch (Exception e) {
        // but others do need to be, to get path etc
        String msg = e.getMessage();
        if (msg == null) {
            msg = ""[no message for "" + e.getClass().getName() + ""]"";
        }
        throw JsonMappingException.from(gen, msg, e);
    }
    // end of super-class implementation
    if (asArray) {
        gen.writeEndObject();
    }
}","public void test1717() throws Throwable {
    XmlRootNameLookup xmlRootNameLookup0 = new XmlRootNameLookup();
    XmlSerializerProvider xmlSerializerProvider0 = new XmlSerializerProvider(xmlRootNameLookup0);
    Class<NullNode> class0 = NullNode.class;
    // Undeclared exception!
    try {
        xmlSerializerProvider0.serializeValue((JsonGenerator) null, (Object) class0, (JavaType) null, xmlSerializerProvider0.DEFAULT_NULL_KEY_SERIALIZER);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.dataformat.xml.ser.XmlSerializerProvider"", e);
    }
}",""
