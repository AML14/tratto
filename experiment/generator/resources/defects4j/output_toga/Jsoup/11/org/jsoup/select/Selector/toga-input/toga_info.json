{
  "test1212" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    Document document0 = Document.createShell(\"9\");\n    Elements elements0 = Selector.select(\":contains(text) query must not be empty\", (Element) document0);\n    elements0.size();\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    Stack<Element> stack0 = new Stack<Element>();\n    Tag tag0 = Tag.valueOf(\"G[;'e\\\"9(GQMW*\");\n    Attributes attributes0 = new Attributes();\n    Element element0 = new Element(tag0, \"\", attributes0);\n    stack0.add(element0);\n    Elements elements0 = Selector.select(\"q~KnljVP6[2_:vBJ_\", (Iterable<Element>) stack0);\n    elements0.isEmpty();\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public static Elements select(String query, Element root)",
    "methodName" : "select",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Document document0 = Document.createShell(\":matchesOwn(\");\n    Selector.select(\":matchesOwn(\", (Element) document0);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "public static Elements select(String query, Iterable<Element> roots)",
    "methodName" : "select",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    Comparator<Element> comparator0 = (Comparator<Element>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(comparator0).compare(any(org.jsoup.nodes.Element.class), any(org.jsoup.nodes.Element.class));\n    TreeSet<Element> treeSet0 = new TreeSet<Element>(comparator0);\n    Tag tag0 = Tag.valueOf(\"B^\");\n    Element element0 = new Element(tag0, \"B^\");\n    treeSet0.add(element0);\n    Selector.select(\"org.jsoup.select.Selector$SelectorParseException\", (Iterable<Element>) treeSet0);\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Document document0 = Document.createShell(\":matches(regex) query must not be empty\");\n    Elements elements0 = Selector.select(\":matches(regex) query must not be empty\", (Element) document0);\n    elements0.isEmpty();\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public static Elements select(String query, Element root)",
    "methodName" : "select",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Document document0 = Document.createShell(\":matches(regex) query must not be empty\");\n    Selector.select(\"k3o:.uD}B\", (Element) document0);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public static Elements select(String query, Iterable<Element> roots)",
    "methodName" : "select",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Comparator<Element> comparator0 = (Comparator<Element>) mock(Comparator.class, new ViolatedAssumptionAnswer());\n    doReturn(0).when(comparator0).compare(any(org.jsoup.nodes.Element.class), any(org.jsoup.nodes.Element.class));\n    TreeSet<Element> treeSet0 = new TreeSet<Element>(comparator0);\n    Tag tag0 = Tag.valueOf(\"B^\");\n    Element element0 = new Element(tag0, \"B^\");\n    Element element1 = element0.prependChild(element0);\n    treeSet0.add(element1);\n    // Undeclared exception!\n    Selector.select(\"org.jsoup.select.Selector$SelectorParseException\", (Iterable<Element>) treeSet0);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public static Elements select(String query, Iterable<Element> roots)",
    "methodName" : "select",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Document document0 = Document.createShell(\"\");\n    Elements elements0 = document0.getElementsByAttributeValueMatching(\"\", \"\");\n    Selector.select(\"\", (Iterable<Element>) elements0);\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Document document0 = Document.createShell(\"~NJ|Fun\");\n    Elements elements0 = Selector.select(\"~NJ|Fun\", (Element) document0);\n    elements0.size();\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public static Elements select(String query, Element root)",
    "methodName" : "select",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Document document0 = Document.createShell(\"\");\n    Selector.select(\":gt(\", (Element) document0);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public static Elements select(String query, Element root)",
    "methodName" : "select",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    Document document0 = new Document(\":lt(\");\n    Selector.select(\":lt(\", (Element) document0);\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    Document document0 = new Document(\"7>O.?=f~#_ ?g\");\n    Elements elements0 = Selector.select(\"7>O.?=f~#_ ?g\", (Element) document0);\n    elements0.isEmpty();\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "public static Elements select(String query, Element root)",
    "methodName" : "select",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    Document document0 = Document.createShell(\":contains(text) query must not be empty\");\n    Selector.select(\",\", (Element) document0);\n}",
    "testName" : "test1515"
  },
  "test2020" : {
    "methodSignature" : "public static Elements select(String query, Element root)",
    "methodName" : "select",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    Document document0 = Document.createShell(\"k[z3~.y6V@Ai4\");\n    Selector.select(\":eq(\", (Element) document0);\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "public boolean equals(Object o)",
    "methodName" : "equals",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Tag tag0 = Tag.valueOf(\"DotEqual\");\n    Element element0 = new Element(tag0, \"DotEqual\");\n    Elements elements0 = Selector.select(\"DotEqual\", element0);\n    Elements elements1 = Selector.select(\"DotEqual\", (Iterable<Element>) elements0);\n    elements1.equals((Object) elements0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public static Elements select(String query, Element root)",
    "methodName" : "select",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Document document0 = Document.createShell(\":matches(regex) query must not be empty\");\n    document0.appendChild(document0);\n    // Undeclared exception!\n    Selector.select(\":matches(regex) query must not be empty\", (Element) document0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public static Elements select(String query, Iterable<Element> roots)",
    "methodName" : "select",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Document document0 = Document.createShell(\"9\");\n    PriorityQueue<Element> priorityQueue0 = new PriorityQueue<Element>();\n    priorityQueue0.add(document0);\n    Selector.select(\",\", (Iterable<Element>) priorityQueue0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Document document0 = Document.createShell(\"#document\");\n    Elements elements0 = Selector.select(\"#document\", (Element) document0);\n    elements0.size();\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Document document0 = new Document(\"a E!VIPqv^n? *\");\n    Elements elements0 = Selector.select(\"DI+9\", (Element) document0);\n    elements0.isEmpty();\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    Document document0 = Document.createShell(\";p%NHpo40W+k;$J4L\");\n    Elements elements0 = Selector.select(\":has(el) subselect must not be empty\", (Element) document0);\n    elements0.size();\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.jsoup.select.Selector",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    Document document0 = Document.createShell(\"#document\");\n    Elements elements0 = Selector.select(\"e-*4,Zz\", (Element) document0);\n    elements0.size();\n}",
    "testName" : "test1919"
  }
}