focal_method,test_prefix,docstring
"public String baseUri() {
    return baseUri;
}","public void test022() throws Throwable {
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""%v{<"");
    assertEquals(""%v{<"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {
    Validate.isTrue(maxSize >= 0, ""maxSize must be 0 (unlimited) or larger"");
    final boolean capped = maxSize > 0;
    byte[] buffer = new byte[bufferSize];
    ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);
    int read;
    int remaining = maxSize;
    while (true) {
        read = inStream.read(buffer);
        if (read == -1)
            break;
        if (capped) {
            if (read > remaining) {
                outStream.write(buffer, 0, remaining);
                break;
            }
            remaining -= read;
        }
        outStream.write(buffer, 0, read);
    }
    return ByteBuffer.wrap(outStream.toByteArray());
}","public void test033() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null, 190);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Read the input stream into a byte buffer.
 * @param inStream the input stream to read from
 * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.
 * @return the filled byte buffer
 * @throws IOException if an exception occurs whilst reading from the input stream.
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {
    Validate.isTrue(maxSize >= 0, ""maxSize must be 0 (unlimited) or larger"");
    final boolean capped = maxSize > 0;
    byte[] buffer = new byte[bufferSize];
    ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);
    int read;
    int remaining = maxSize;
    while (true) {
        read = inStream.read(buffer);
        if (read == -1)
            break;
        if (capped) {
            if (read > remaining) {
                outStream.write(buffer, 0, remaining);
                break;
            }
            remaining -= read;
        }
        outStream.write(buffer, 0, read);
    }
    return ByteBuffer.wrap(outStream.toByteArray());
}","public void test044() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2432), (byte) 37);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer(pushbackInputStream0, (byte) 27);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}","/**
 * Read the input stream into a byte buffer.
 * @param inStream the input stream to read from
 * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.
 * @return the filled byte buffer
 * @throws IOException if an exception occurs whilst reading from the input stream.
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {
    Validate.isTrue(maxSize >= 0, ""maxSize must be 0 (unlimited) or larger"");
    final boolean capped = maxSize > 0;
    byte[] buffer = new byte[bufferSize];
    ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);
    int read;
    int remaining = maxSize;
    while (true) {
        read = inStream.read(buffer);
        if (read == -1)
            break;
        if (capped) {
            if (read > remaining) {
                outStream.write(buffer, 0, remaining);
                break;
            }
            remaining -= read;
        }
        outStream.write(buffer, 0, read);
    }
    return ByteBuffer.wrap(outStream.toByteArray());
}","public void test055() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(59);
    try {
        DataUtil.readToByteBuffer(pipedInputStream0, 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}","/**
 * Read the input stream into a byte buffer.
 * @param inStream the input stream to read from
 * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.
 * @return the filled byte buffer
 * @throws IOException if an exception occurs whilst reading from the input stream.
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {
    return readToByteBuffer(inStream, 0);
}","public void test066() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {
    return readToByteBuffer(inStream, 0);
}","public void test077() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 2054);
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer(byteArrayInputStream0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}",""
"static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {
    return readToByteBuffer(inStream, 0);
}","public void test088() throws Throwable {
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    try {
        DataUtil.readToByteBuffer(mockFileInputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}",""
"static ByteBuffer readFileToByteBuffer(File file) throws IOException {
    RandomAccessFile randomAccessFile = null;
    try {
        randomAccessFile = new RandomAccessFile(file, ""r"");
        byte[] bytes = new byte[(int) randomAccessFile.length()];
        randomAccessFile.readFully(bytes);
        return ByteBuffer.wrap(bytes);
    } finally {
        if (randomAccessFile != null)
            randomAccessFile.close();
    }
}","public void test099() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readFileToByteBuffer((File) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}",""
"static ByteBuffer readFileToByteBuffer(File file) throws IOException {
    RandomAccessFile randomAccessFile = null;
    try {
        randomAccessFile = new RandomAccessFile(file, ""r"");
        byte[] bytes = new byte[(int) randomAccessFile.length()];
        randomAccessFile.readFully(bytes);
        return ByteBuffer.wrap(bytes);
    } finally {
        if (randomAccessFile != null)
            randomAccessFile.close();
    }
}","public void test1010() throws Throwable {
    MockFile mockFile0 = new MockFile("""");
    try {
        DataUtil.readFileToByteBuffer(mockFile0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}",""
"static ByteBuffer readFileToByteBuffer(File file) throws IOException {
    RandomAccessFile randomAccessFile = null;
    try {
        randomAccessFile = new RandomAccessFile(file, ""r"");
        byte[] bytes = new byte[(int) randomAccessFile.length()];
        randomAccessFile.readFully(bytes);
        return ByteBuffer.wrap(bytes);
    } finally {
        if (randomAccessFile != null)
            randomAccessFile.close();
    }
}","public void test1111() throws Throwable {
    MockFile mockFile0 = new MockFile(""--------------------------------"", ""--------------------------------"");
    try {
        DataUtil.readFileToByteBuffer(mockFile0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // File does not exist, and RandomAccessFile is not open in write mode
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}",""
"// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support
// switching the chartset midstream when a meta http-equiv tag defines the charset.
// todo - this is getting gnarly. needs a rewrite.
static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    String docData;
    Document doc = null;
    // look for BOM - overrides any other header or input
    charsetName = detectCharsetFromBom(byteData, charsetName);
    if (charsetName == null) {
        // determine from meta. safe first parse as UTF-8
        // look for <meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312""> or HTML5 <meta charset=""gb2312"">
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();
        // if not found, will keep utf-8 as best attempt
        String foundCharset = null;
        if (meta != null) {
            if (meta.hasAttr(""http-equiv"")) {
                foundCharset = getCharsetFromContentType(meta.attr(""content""));
            }
            if (foundCharset == null && meta.hasAttr(""charset"")) {
                try {
                    if (Charset.isSupported(meta.attr(""charset""))) {
                        foundCharset = meta.attr(""charset"");
                    }
                } catch (IllegalCharsetNameException e) {
                    foundCharset = null;
                }
            }
        }
        // look for <?xml encoding='ISO-8859-1'?>
        if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) {
            XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);
            if (prolog.name().equals(""xml"")) {
                foundCharset = prolog.attr(""encoding"");
            }
        }
        foundCharset = validateCharset(foundCharset);
        if (foundCharset != null && !foundCharset.equals(defaultCharset)) {
            // need to re-decode
            foundCharset = foundCharset.trim().replaceAll(""[\""']"", """");
            charsetName = foundCharset;
            byteData.rewind();
            docData = Charset.forName(foundCharset).decode(byteData).toString();
            doc = null;
        }
    } else {
        // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
        docData = Charset.forName(charsetName).decode(byteData).toString();
    }
    if (doc == null) {
        doc = parser.parseInput(docData, baseUri);
        doc.outputSettings().charset(charsetName);
    }
    return doc;
}","public void test1212() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    CharBuffer charBuffer0 = CharBuffer.allocate(1457);
    ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, ""=Fg@ryywr@HmQ^zj"", ""=Fg@ryywr@HmQ^zj"", parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // =Fg@ryywr@HmQ^zj
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",""
"// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support
// switching the chartset midstream when a meta http-equiv tag defines the charset.
// todo - this is getting gnarly. needs a rewrite.
static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    String docData;
    Document doc = null;
    // look for BOM - overrides any other header or input
    charsetName = detectCharsetFromBom(byteData, charsetName);
    if (charsetName == null) {
        // determine from meta. safe first parse as UTF-8
        // look for <meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312""> or HTML5 <meta charset=""gb2312"">
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();
        // if not found, will keep utf-8 as best attempt
        String foundCharset = null;
        if (meta != null) {
            if (meta.hasAttr(""http-equiv"")) {
                foundCharset = getCharsetFromContentType(meta.attr(""content""));
            }
            if (foundCharset == null && meta.hasAttr(""charset"")) {
                try {
                    if (Charset.isSupported(meta.attr(""charset""))) {
                        foundCharset = meta.attr(""charset"");
                    }
                } catch (IllegalCharsetNameException e) {
                    foundCharset = null;
                }
            }
        }
        // look for <?xml encoding='ISO-8859-1'?>
        if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) {
            XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);
            if (prolog.name().equals(""xml"")) {
                foundCharset = prolog.attr(""encoding"");
            }
        }
        foundCharset = validateCharset(foundCharset);
        if (foundCharset != null && !foundCharset.equals(defaultCharset)) {
            // need to re-decode
            foundCharset = foundCharset.trim().replaceAll(""[\""']"", """");
            charsetName = foundCharset;
            byteData.rewind();
            docData = Charset.forName(foundCharset).decode(byteData).toString();
            doc = null;
        }
    } else {
        // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
        docData = Charset.forName(charsetName).decode(byteData).toString();
    }
    if (doc == null) {
        doc = parser.parseInput(docData, baseUri);
        doc.outputSettings().charset(charsetName);
    }
    return doc;
}","public void test1313() throws Throwable {
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData((ByteBuffer) null, ""U\""(.s>>e#=*>"", ""U\""(.s>>e#=*>"", parser0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",""
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1414() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) dataInputStream0, ""http-equiv"", ""http-equiv"", parser0);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // http-equiv
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1515() throws Throwable {
    Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) sequenceInputStream0, ""HA$xqe}&@"", ""+93d?}"", parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // HA$xqe}&@
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1616() throws Throwable {
    Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) dataInputStream0, """", """", parser0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1717() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2350), 14);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""p5yKSI(cg"", ""p5yKSI(cg"", (Parser) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1818() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
    Parser parser0 = Parser.htmlParser();
    try {
        DataUtil.load((InputStream) pushbackInputStream0, ""9T(g;UY\""6=Q"", (String) null, parser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test1919() throws Throwable {
    byte[] byteArray0 = new byte[9];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""XMkJhJtHbP.1v"", ""%v{<"");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // XMkJhJtHbP.1v
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2020() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, "",ewW_Cekp\u0001;<T"", "",ewW_Cekp\u0001;<T"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2121() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 65, (byte) 65);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, """", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2222() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-65), 65279);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) pushbackInputStream0, """", """");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2323() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    try {
        DataUtil.load((InputStream) pipedInputStream0, ""{H$gLRs'Ti^7lA'`1"", ""{H$gLRs'Ti^7lA'`1"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readFileToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2424() throws Throwable {
    File file0 = MockFile.createTempFile(""!Ft!bp T"", ""r"");
    // Undeclared exception!
    try {
        DataUtil.load(file0, ""!Ft!bp T"", ""!Ft!bp T"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // !Ft!bp T
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readFileToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2525() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((File) null, """", ""http-equiv"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readFileToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2626() throws Throwable {
    MockFile mockFile0 = new MockFile(""xml"", ""meter"");
    File file0 = MockFile.createTempFile(""meter"", (String) null, (File) mockFile0);
    // Undeclared exception!
    try {
        DataUtil.load(file0, """", ""xml"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"static void crossStreams(final InputStream in, final OutputStream out) throws IOException {
    final byte[] buffer = new byte[bufferSize];
    int len;
    while ((len = in.read(buffer)) != -1) {
        out.write(buffer, 0, len);
    }
}","public void test2727() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.crossStreams((InputStream) null, (OutputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}","/**
 * Writes the input stream to the output stream. Doesn't close them.
 * @param in input stream to read from
 * @param out output stream to write to
 * @throws IOException on IO error
 */"
"static void crossStreams(final InputStream in, final OutputStream out) throws IOException {
    final byte[] buffer = new byte[bufferSize];
    int len;
    while ((len = in.read(buffer)) != -1) {
        out.write(buffer, 0, len);
    }
}","public void test2828() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(5);
    MockPrintStream mockPrintStream0 = new MockPrintStream(""`tgj4uH"");
    DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
    try {
        DataUtil.crossStreams(pipedInputStream0, dataOutputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}","/**
 * Writes the input stream to the output stream. Doesn't close them.
 * @param in input stream to read from
 * @param out output stream to write to
 * @throws IOException on IO error
 */"
"public String baseUri() {
    return baseUri;
}","public void test2929() throws Throwable {
    byte[] byteArray0 = new byte[9];
    byteArray0[2] = (byte) 1;
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    byteArrayInputStream0.read();
    Parser parser0 = Parser.htmlParser();
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""ap[=w"", parser0);
    assertEquals(""ap[=w"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String location() {
    return location;
}","public void test3030() throws Throwable {
    byte[] byteArray0 = new byte[9];
    byteArray0[0] = (byte) (-74);
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Parser parser0 = Parser.htmlParser();
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""ap[=w"", parser0);
    assertEquals(""ap[=w"", document0.location());
}","/**
 * Get the URL this Document was parsed from. If the starting URL is a redirect,
 * this will return the final URL from which the document was served from.
 * @return location
 */"
"static String mimeBoundary() {
    final StringBuilder mime = new StringBuilder(boundaryLength);
    final Random rand = new Random();
    for (int i = 0; i < boundaryLength; i++) {
        mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);
    }
    return mime.toString();
}","public void test3131() throws Throwable {
    String string0 = DataUtil.mimeBoundary();
    assertEquals(""--------------------------------"", string0);
}","/**
 * Creates a random string, suitable for use as a mime boundary
 */"
"static String getCharsetFromContentType(String contentType) {
    if (contentType == null)
        return null;
    Matcher m = charsetPattern.matcher(contentType);
    if (m.find()) {
        String charset = m.group(1).trim();
        charset = charset.replace(""charset="", """");
        return validateCharset(charset);
    }
    return null;
}","public void test3232() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType(""charset="");
    assertNull(string0);
}","/**
 * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
 * will kick in.)
 * @param contentType e.g. ""text/html; charset=EUC-JP""
 * @return ""EUC-JP"", or null if not found. Charset is trimmed and uppercased.
 */"
"static String getCharsetFromContentType(String contentType) {
    if (contentType == null)
        return null;
    Matcher m = charsetPattern.matcher(contentType);
    if (m.find()) {
        String charset = m.group(1).trim();
        charset = charset.replace(""charset="", """");
        return validateCharset(charset);
    }
    return null;
}","public void test3333() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType((String) null);
    assertNull(string0);
}","/**
 * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
 * will kick in.)
 * @param contentType e.g. ""text/html; charset=EUC-JP""
 * @return ""EUC-JP"", or null if not found. Charset is trimmed and uppercased.
 */"
"static String getCharsetFromContentType(String contentType) {
    if (contentType == null)
        return null;
    Matcher m = charsetPattern.matcher(contentType);
    if (m.find()) {
        String charset = m.group(1).trim();
        charset = charset.replace(""charset="", """");
        return validateCharset(charset);
    }
    return null;
}","public void test3434() throws Throwable {
    String string0 = ""O\\uHYC<!SsdX>DIw+"";
    String string1 = DataUtil.getCharsetFromContentType(string0);
    assertNull(string1);
}","/**
 * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
 * will kick in.)
 * @param contentType e.g. ""text/html; charset=EUC-JP""
 * @return ""EUC-JP"", or null if not found. Charset is trimmed and uppercased.
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readFileToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test3535() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    MockFile.createTempFile(""--------------------------------"", ""10T_G?TG]/S"", (File) mockFile0);
    try {
        DataUtil.load((File) mockFile0, ""10T_G?TG]/S"", ""k+m5,CY cLcM(YN2E_I"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {
    Validate.isTrue(maxSize >= 0, ""maxSize must be 0 (unlimited) or larger"");
    final boolean capped = maxSize > 0;
    byte[] buffer = new byte[bufferSize];
    ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);
    int read;
    int remaining = maxSize;
    while (true) {
        read = inStream.read(buffer);
        if (read == -1)
            break;
        if (capped) {
            if (read > remaining) {
                outStream.write(buffer, 0, remaining);
                break;
            }
            remaining -= read;
        }
        outStream.write(buffer, 0, read);
    }
    return ByteBuffer.wrap(outStream.toByteArray());
}","public void test3737() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null, (-2049));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // maxSize must be 0 (unlimited) or larger
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Read the input stream into a byte buffer.
 * @param inStream the input stream to read from
 * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.
 * @return the filled byte buffer
 * @throws IOException if an exception occurs whilst reading from the input stream.
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test3838() throws Throwable {
    File file0 = MockFile.createTempFile(""c.bO}Xo"", ""c.bO}Xo"");
    Document document0 = DataUtil.load(file0, ""UTF-8"", ""UTF-8"");
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test4041() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, """", """", (Parser) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readFileToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test4142() throws Throwable {
    MockFile mockFile0 = new MockFile("" E;"", ""--------------------------------"");
    try {
        DataUtil.load((File) mockFile0, "" E;"", ""--------------------------------"");
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // File does not exist, and RandomAccessFile is not open in write mode
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support
// switching the chartset midstream when a meta http-equiv tag defines the charset.
// todo - this is getting gnarly. needs a rewrite.
static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    String docData;
    Document doc = null;
    // look for BOM - overrides any other header or input
    charsetName = detectCharsetFromBom(byteData, charsetName);
    if (charsetName == null) {
        // determine from meta. safe first parse as UTF-8
        // look for <meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312""> or HTML5 <meta charset=""gb2312"">
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();
        // if not found, will keep utf-8 as best attempt
        String foundCharset = null;
        if (meta != null) {
            if (meta.hasAttr(""http-equiv"")) {
                foundCharset = getCharsetFromContentType(meta.attr(""content""));
            }
            if (foundCharset == null && meta.hasAttr(""charset"")) {
                try {
                    if (Charset.isSupported(meta.attr(""charset""))) {
                        foundCharset = meta.attr(""charset"");
                    }
                } catch (IllegalCharsetNameException e) {
                    foundCharset = null;
                }
            }
        }
        // look for <?xml encoding='ISO-8859-1'?>
        if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) {
            XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0);
            if (prolog.name().equals(""xml"")) {
                foundCharset = prolog.attr(""encoding"");
            }
        }
        foundCharset = validateCharset(foundCharset);
        if (foundCharset != null && !foundCharset.equals(defaultCharset)) {
            // need to re-decode
            foundCharset = foundCharset.trim().replaceAll(""[\""']"", """");
            charsetName = foundCharset;
            byteData.rewind();
            docData = Charset.forName(foundCharset).decode(byteData).toString();
            doc = null;
        }
    } else {
        // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
        docData = Charset.forName(charsetName).decode(byteData).toString();
    }
    if (doc == null) {
        doc = parser.parseInput(docData, baseUri);
        doc.outputSettings().charset(charsetName);
    }
    return doc;
}","public void test4243() throws Throwable {
    ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, """", ""sui>LN.I~DnL+"", parser0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test4344() throws Throwable {
    Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) sequenceInputStream0, ""-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"", ""--------------------------------"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // -_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
