focal_method,test_prefix,docstring
"public String baseUri() {
    return baseUri;
}","public void test000() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""ws<o/</o^ .RR.5H.3vU"", ""ws<o/</o^ .RR.5H.3vU"");
    assertEquals(""ws<o/</o^ .RR.5H.3vU"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test011() throws Throwable {
    Document document0 = Parser.parse(""<!"", ""<!"");
    assertEquals(""<!"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test022() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""<![CDATA["", ""<![CDATA["");
    assertEquals(""<![CDATA["", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test033() throws Throwable {
    Document document0 = Parser.parse(""<!--"", ""<!--"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test044() throws Throwable {
    Document document0 = Parser.parse(""<?"", ""<?"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test055() throws Throwable {
    Document document0 = Parser.parse(""#E<!---"", ""#E<!---"");
    assertEquals(""#E<!---"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test066() throws Throwable {
    Document document0 = Parser.parse(""</"", ""</"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test077() throws Throwable {
    Document document0 = Parser.parse(""q<)--"", ""q<)--"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String tagName() {
    return tag.getName();
}","public void test088() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""Os<e///>N .RRk5H*3t"", ""Os<e///>N .RRk5H*3t"");
    assertEquals(""#root"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test099() throws Throwable {
    Document document0 = Parser.parse("" w<b-2$=26~B>"", "" w<b-2$=26~B>"");
    assertEquals(""#document"", document0.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1010() throws Throwable {
    Document document0 = Parser.parse(""W<aQ?1Gd='*}xUE;39"", ""W<aQ?1Gd='*}xUE;39"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test1111() throws Throwable {
    Document document0 = Parser.parse(""/w<4-2y=\""6>zp2B>"", ""/w<4-2y=\""6>zp2B>"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test1212() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""0<b2.=2 ~{L"", ""0<b2.=2 ~{L"");
    assertEquals(""0<b2.=2 ~{L"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String tagName() {
    return tag.getName();
}","public void test1313() throws Throwable {
    Document document0 = Parser.parse(""W<y*?1Gd=My}x6H23K"", ""W<y*?1Gd=My}x6H23K"");
    assertEquals(""#root"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1414() throws Throwable {
    Document document0 = Parser.parse(""a]Y)<BaSe</Kkt,T~K!Q"", ""a]Y)<BaSe</Kkt,T~K!Q"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test1515() throws Throwable {
    Document document0 = Parser.parse(""4l]<dXr<B#V5<p@`yF"", ""4l]<dXr<B#V5<p@`yF"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String tagName() {
    return tag.getName();
}","public void test1616() throws Throwable {
    Document document0 = Parser.parse(""hO/</o/ .yTRk5H3(P"", ""hO/</o/ .yTRk5H3(P"");
    assertEquals(""#root"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1717() throws Throwable {
    Document document0 = Parser.parse(""Os<e/</oN .RRk5HP3t"", ""Os<e/</oN .RRk5HP3t"");
    assertEquals(""#document"", document0.nodeName());
}",""
