project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Tag tag0 = Tag.valueOf(""DFtik7iwk"");
    assertNotNull(tag0);
}",1,
project,0,test001,"public void test001() throws Throwable {
    Tag tag0 = Tag.valueOf(""DFtik7iwk"");
    tag0.getName();
    assertFalse(tag0.isData());
}",0,assertTrue(tag0.isData())
project,0,test002,"public void test002() throws Throwable {
    Tag tag0 = Tag.valueOf(""DFtik7iwk"");
    tag0.getName();
    assertFalse(tag0.preserveWhitespace());
}",0,assertFalse(tag0.preserveWhitespace())
project,0,test003,"public void test003() throws Throwable {
    Tag tag0 = Tag.valueOf(""DFtik7iwk"");
    tag0.getName();
    assertFalse(tag0.isEmpty());
}",0,assertTrue(tag0.isEmpty())
project,0,test004,"public void test004() throws Throwable {
    Tag tag0 = Tag.valueOf(""DFtik7iwk"");
    tag0.getName();
    assertTrue(tag0.isInline());
}",0,assertTrue(tag0.isInline())
project,0,test005,"public void test005() throws Throwable {
    Tag tag0 = Tag.valueOf(""DFtik7iwk"");
    tag0.getName();
    assertTrue(tag0.canContainBlock());
}",0,
project,0,test016,"public void test016() throws Throwable {
    Tag tag0 = Tag.valueOf(""0"");
    boolean boolean0 = tag0.canContainBlock();
    assertFalse(tag0.isEmpty());
}",0,assertTrue(tag0.isEmpty())
project,0,test017,"public void test017() throws Throwable {
    Tag tag0 = Tag.valueOf(""0"");
    boolean boolean0 = tag0.canContainBlock();
    assertFalse(tag0.isData());
}",0,assertFalse(tag0.isData())
project,0,test018,"public void test018() throws Throwable {
    Tag tag0 = Tag.valueOf(""0"");
    boolean boolean0 = tag0.canContainBlock();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test019,"public void test019() throws Throwable {
    Tag tag0 = Tag.valueOf(""0"");
    boolean boolean0 = tag0.canContainBlock();
    assertFalse(tag0.preserveWhitespace());
}",0,assertTrue(tag0.preserveWhitespace())
project,0,test0110,"public void test0110() throws Throwable {
    Tag tag0 = Tag.valueOf(""0"");
    boolean boolean0 = tag0.canContainBlock();
    assertTrue(tag0.isInline());
}",0,assertTrue(tag0.isInline())
project,0,test0211,"public void test0211() throws Throwable {
    Tag tag0 = Tag.valueOf(""title"");
    boolean boolean0 = tag0.isData();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test0312,"public void test0312() throws Throwable {
    Tag tag0 = Tag.valueOf(""object"");
    boolean boolean0 = tag0.preserveWhitespace();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0413,"public void test0413() throws Throwable {
    Tag tag0 = Tag.valueOf(""MBc"");
    tag0.toString();
    assertTrue(tag0.isInline());
}",0,
project,0,test0414,"public void test0414() throws Throwable {
    Tag tag0 = Tag.valueOf(""MBc"");
    tag0.toString();
    assertTrue(tag0.canContainBlock());
}",0,assertFalse(tag0.canContainBlock())
project,0,test0415,"public void test0415() throws Throwable {
    Tag tag0 = Tag.valueOf(""MBc"");
    tag0.toString();
    assertFalse(tag0.preserveWhitespace());
}",0,assertFalse(tag0.preserveWhitespace())
project,0,test0416,"public void test0416() throws Throwable {
    Tag tag0 = Tag.valueOf(""MBc"");
    tag0.toString();
    assertFalse(tag0.isData());
}",0,
project,0,test0417,"public void test0417() throws Throwable {
    Tag tag0 = Tag.valueOf(""MBc"");
    tag0.toString();
    assertFalse(tag0.isEmpty());
}",0,assertTrue(tag0.isEmpty())
project,0,test0518,"public void test0518() throws Throwable {
    Tag tag0 = Tag.valueOf("" at index: "");
    boolean boolean0 = tag0.isBlock();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0519,"public void test0519() throws Throwable {
    Tag tag0 = Tag.valueOf("" at index: "");
    boolean boolean0 = tag0.isBlock();
    assertTrue(tag0.canContainBlock());
}",0,assertFalse(tag0.canContainBlock())
project,0,test0520,"public void test0520() throws Throwable {
    Tag tag0 = Tag.valueOf("" at index: "");
    boolean boolean0 = tag0.isBlock();
    assertFalse(tag0.isData());
}",0,assertFalse(tag0.isData())
project,0,test0521,"public void test0521() throws Throwable {
    Tag tag0 = Tag.valueOf("" at index: "");
    boolean boolean0 = tag0.isBlock();
    assertFalse(tag0.preserveWhitespace());
}",0,assertFalse(tag0.preserveWhitespace())
project,0,test0522,"public void test0522() throws Throwable {
    Tag tag0 = Tag.valueOf("" at index: "");
    boolean boolean0 = tag0.isBlock();
    assertFalse(tag0.isEmpty());
}",0,assertTrue(tag0.isEmpty())
project,0,test0623,"public void test0623() throws Throwable {
    Tag tag0 = Tag.valueOf(""THEAD"");
    boolean boolean0 = tag0.canContain(tag0);
    assertFalse(boolean0);
}",0,
project,0,test0724,"public void test0724() throws Throwable {
    Tag tag0 = Tag.valueOf(""link"");
    boolean boolean0 = tag0.canContain(tag0);
    assertFalse(boolean0);
}",0,
project,0,test0825,"public void test0825() throws Throwable {
    Tag tag0 = Tag.valueOf(""base"");
    boolean boolean0 = tag0.canContain(tag0);
    assertFalse(boolean0);
}",0,
project,0,test0926,"public void test0926() throws Throwable {
    Tag tag0 = Tag.valueOf(""style"");
    Tag tag1 = tag0.getImplicitParent();
    assertNotNull(tag1);
}",0,"assertEquals(tag0, tag1)"
project,0,test0927,"public void test0927() throws Throwable {
    Tag tag0 = Tag.valueOf(""style"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertTrue(boolean0);
}",0,
project,0,test0928,"public void test0928() throws Throwable {
    Tag tag0 = Tag.valueOf(""style"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertEquals(""head"", tag1.toString());
}",0,
project,0,test1029,"public void test1029() throws Throwable {
    Tag tag0 = Tag.valueOf(""dd"");
    Tag tag1 = Tag.valueOf(""dt"");
    tag0.canContain(tag1);
    assertFalse(tag1.equals((Object) tag0));
}",0,
project,0,test1030,"public void test1030() throws Throwable {
    Tag tag0 = Tag.valueOf(""dd"");
    Tag tag1 = Tag.valueOf(""dt"");
    tag0.canContain(tag1);
    assertFalse(tag1.isData());
}",0,
project,0,test1131,"public void test1131() throws Throwable {
    Tag tag0 = Tag.valueOf(""base"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertTrue(boolean0);
}",0,
project,0,test1132,"public void test1132() throws Throwable {
    Tag tag0 = Tag.valueOf(""base"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertEquals(""head"", tag1.getName());
}",0,
project,0,test1233,"public void test1233() throws Throwable {
    Tag tag0 = Tag.valueOf(""script"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertEquals(""head"", tag1.toString());
}",0,assertNotNull(tag1.toString())
project,0,test1234,"public void test1234() throws Throwable {
    Tag tag0 = Tag.valueOf(""script"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertTrue(boolean0);
}",0,
project,0,test1335,"public void test1335() throws Throwable {
    Tag tag0 = Tag.valueOf(""noscript"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertTrue(boolean0);
}",0,
project,0,test1336,"public void test1336() throws Throwable {
    Tag tag0 = Tag.valueOf(""noscript"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertEquals(""head"", tag1.toString());
}",0,assertNotNull(tag1.toString())
project,0,test1437,"public void test1437() throws Throwable {
    Tag tag0 = Tag.valueOf(""link"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertTrue(boolean0);
}",0,
project,0,test1438,"public void test1438() throws Throwable {
    Tag tag0 = Tag.valueOf(""link"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertEquals(""head"", tag1.getName());
}",0,
project,0,test1539,"public void test1539() throws Throwable {
    Tag tag0 = Tag.valueOf(""meta"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertTrue(boolean0);
}",0,
project,0,test1540,"public void test1540() throws Throwable {
    Tag tag0 = Tag.valueOf(""meta"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertEquals(""head"", tag1.toString());
}",0,
project,0,test1641,"public void test1641() throws Throwable {
    Tag tag0 = Tag.valueOf(""title"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertTrue(boolean0);
}",0,
project,0,test1642,"public void test1642() throws Throwable {
    Tag tag0 = Tag.valueOf(""title"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertEquals(""head"", tag1.toString());
}",0,
project,0,test1743,"public void test1743() throws Throwable {
    Tag tag0 = Tag.valueOf(""HEAD"");
    boolean boolean0 = tag0.canContain(tag0);
    assertFalse(boolean0);
}",0,
project,0,test1744,"public void test1744() throws Throwable {
    Tag tag0 = Tag.valueOf(""HEAD"");
    boolean boolean0 = tag0.canContain(tag0);
    assertFalse(tag0.isData());
}",0,assertFalse(tag0.isData())
project,0,test1845,"public void test1845() throws Throwable {
    Tag tag0 = Tag.valueOf(""object"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertTrue(boolean0);
}",0,
project,0,test1846,"public void test1846() throws Throwable {
    Tag tag0 = Tag.valueOf(""object"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.canContain(tag0);
    assertEquals(""head"", tag1.getName());
}",0,
project,0,test1947,"public void test1947() throws Throwable {
    Tag tag0 = Tag.valueOf(""dd"");
    Tag tag1 = Tag.valueOf(""dt"");
    boolean boolean0 = tag1.canContain(tag0);
    assertFalse(tag1.isData());
}",0,assertFalse(tag1.isData())
project,0,test1948,"public void test1948() throws Throwable {
    Tag tag0 = Tag.valueOf(""dd"");
    Tag tag1 = Tag.valueOf(""dt"");
    boolean boolean0 = tag1.canContain(tag0);
    assertFalse(tag1.equals((Object) tag0));
}",0,
project,0,test1949,"public void test1949() throws Throwable {
    Tag tag0 = Tag.valueOf(""dd"");
    Tag tag1 = Tag.valueOf(""dt"");
    boolean boolean0 = tag1.canContain(tag0);
    assertFalse(boolean0);
}",0,
project,0,test2050,"public void test2050() throws Throwable {
    Tag tag0 = Tag.valueOf(""lb"");
    Tag tag1 = Tag.valueOf(""dt"");
    boolean boolean0 = tag1.canContain(tag0);
    assertTrue(tag0.canContainBlock());
}",0,assertTrue(tag0.canContainBlock())
project,0,test2051,"public void test2051() throws Throwable {
    Tag tag0 = Tag.valueOf(""lb"");
    Tag tag1 = Tag.valueOf(""dt"");
    boolean boolean0 = tag1.canContain(tag0);
    assertFalse(tag0.preserveWhitespace());
}",0,assertFalse(tag0.preserveWhitespace())
project,0,test2052,"public void test2052() throws Throwable {
    Tag tag0 = Tag.valueOf(""lb"");
    Tag tag1 = Tag.valueOf(""dt"");
    boolean boolean0 = tag1.canContain(tag0);
    assertTrue(boolean0);
}",0,
project,0,test2053,"public void test2053() throws Throwable {
    Tag tag0 = Tag.valueOf(""lb"");
    Tag tag1 = Tag.valueOf(""dt"");
    boolean boolean0 = tag1.canContain(tag0);
    assertFalse(tag0.isData());
}",0,
project,0,test2054,"public void test2054() throws Throwable {
    Tag tag0 = Tag.valueOf(""lb"");
    Tag tag1 = Tag.valueOf(""dt"");
    boolean boolean0 = tag1.canContain(tag0);
    assertFalse(tag0.isEmpty());
}",0,assertTrue(tag0.isEmpty())
project,0,test2155,"public void test2155() throws Throwable {
    Tag tag0 = Tag.valueOf(""object"");
    Tag tag1 = Tag.valueOf(""dd"");
    boolean boolean0 = tag1.canContain(tag0);
    assertTrue(boolean0);
}",0,
project,0,test2256,"public void test2256() throws Throwable {
    Tag tag0 = Tag.valueOf(""DL"");
    boolean boolean0 = tag0.isInline();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2357,"public void test2357() throws Throwable {
    Tag tag0 = Tag.valueOf(""The validated collection contains an element not of type "");
    boolean boolean0 = tag0.isInline();
    assertFalse(tag0.preserveWhitespace());
}",0,assertFalse(tag0.preserveWhitespace())
project,0,test2358,"public void test2358() throws Throwable {
    Tag tag0 = Tag.valueOf(""The validated collection contains an element not of type "");
    boolean boolean0 = tag0.isInline();
    assertTrue(tag0.canContainBlock());
}",0,assertTrue(tag0.canContainBlock())
project,0,test2359,"public void test2359() throws Throwable {
    Tag tag0 = Tag.valueOf(""The validated collection contains an element not of type "");
    boolean boolean0 = tag0.isInline();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2360,"public void test2360() throws Throwable {
    Tag tag0 = Tag.valueOf(""The validated collection contains an element not of type "");
    boolean boolean0 = tag0.isInline();
    assertFalse(tag0.isData());
}",0,assertTrue(tag0.isData())
project,0,test2361,"public void test2361() throws Throwable {
    Tag tag0 = Tag.valueOf(""The validated collection contains an element not of type "");
    boolean boolean0 = tag0.isInline();
    assertFalse(tag0.isEmpty());
}",0,assertTrue(tag0.isEmpty())
project,0,test2462,"public void test2462() throws Throwable {
    Tag tag0 = Tag.valueOf(""base"");
    boolean boolean0 = tag0.isData();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2563,"public void test2563() throws Throwable {
    Tag tag0 = Tag.valueOf(""html"");
    Tag tag1 = tag0.getImplicitParent();
    assertNull(tag1);
}",0,"assertEquals(tag0, tag1)"
project,0,test2664,"public void test2664() throws Throwable {
    Tag tag0 = Tag.valueOf(""PARAM"");
    boolean boolean0 = tag0.isValidParent(tag0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2765,"public void test2765() throws Throwable {
    Tag tag0 = Tag.valueOf(""html"");
    boolean boolean0 = tag0.isValidParent(tag0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2866,"public void test2866() throws Throwable {
    Tag tag0 = Tag.valueOf(""ECP`FJm5-&"");
    Tag tag1 = tag0.getImplicitParent();
    assertNotNull(tag1);
}",0,"assertEquals(tag0, tag1)"
project,0,test2867,"public void test2867() throws Throwable {
    Tag tag0 = Tag.valueOf(""ECP`FJm5-&"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.isValidParent(tag0);
    assertFalse(tag1.equals((Object) tag0));
}",0,
project,0,test2868,"public void test2868() throws Throwable {
    Tag tag0 = Tag.valueOf(""ECP`FJm5-&"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.isValidParent(tag0);
    assertFalse(tag0.isEmpty());
}",0,assertTrue(tag0.isEmpty())
project,0,test2869,"public void test2869() throws Throwable {
    Tag tag0 = Tag.valueOf(""ECP`FJm5-&"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.isValidParent(tag0);
    assertFalse(tag0.isData());
}",0,assertTrue(tag0.isData())
project,0,test2870,"public void test2870() throws Throwable {
    Tag tag0 = Tag.valueOf(""ECP`FJm5-&"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.isValidParent(tag0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2871,"public void test2871() throws Throwable {
    Tag tag0 = Tag.valueOf(""ECP`FJm5-&"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.isValidParent(tag0);
    assertTrue(tag0.canContainBlock());
}",0,assertTrue(tag0.canContainBlock())
project,0,test2872,"public void test2872() throws Throwable {
    Tag tag0 = Tag.valueOf(""ECP`FJm5-&"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.isValidParent(tag0);
    assertFalse(tag0.preserveWhitespace());
}",0,assertTrue(tag0.preserveWhitespace())
project,0,test2873,"public void test2873() throws Throwable {
    Tag tag0 = Tag.valueOf(""ECP`FJm5-&"");
    Tag tag1 = tag0.getImplicitParent();
    boolean boolean0 = tag1.isValidParent(tag0);
    assertTrue(tag0.isInline());
}",0,assertTrue(tag0.isInline())
project,0,test2974,"public void test2974() throws Throwable {
    Tag tag0 = Tag.valueOf(""n]XK"");
    boolean boolean0 = tag0.equals((Object) null);
    assertTrue(tag0.canContainBlock());
}",0,assertFalse(tag0.canContainBlock())
project,0,test2975,"public void test2975() throws Throwable {
    Tag tag0 = Tag.valueOf(""n]XK"");
    boolean boolean0 = tag0.equals((Object) null);
    assertFalse(tag0.preserveWhitespace());
}",0,assertFalse(tag0.preserveWhitespace())
project,0,test2976,"public void test2976() throws Throwable {
    Tag tag0 = Tag.valueOf(""n]XK"");
    boolean boolean0 = tag0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2977,"public void test2977() throws Throwable {
    Tag tag0 = Tag.valueOf(""n]XK"");
    boolean boolean0 = tag0.equals((Object) null);
    assertFalse(tag0.isBlock());
}",0,assertFalse(tag0.isBlock())
project,0,test2978,"public void test2978() throws Throwable {
    Tag tag0 = Tag.valueOf(""n]XK"");
    boolean boolean0 = tag0.equals((Object) null);
    assertFalse(tag0.isEmpty());
}",0,assertTrue(tag0.isEmpty())
project,0,test2979,"public void test2979() throws Throwable {
    Tag tag0 = Tag.valueOf(""n]XK"");
    boolean boolean0 = tag0.equals((Object) null);
    assertFalse(tag0.isData());
}",0,
project,0,test3080,"public void test3080() throws Throwable {
    Tag tag0 = Tag.valueOf(""]XK"");
    boolean boolean0 = tag0.equals(""]XK"");
    assertFalse(tag0.isData());
}",0,
project,0,test3081,"public void test3081() throws Throwable {
    Tag tag0 = Tag.valueOf(""]XK"");
    boolean boolean0 = tag0.equals(""]XK"");
    assertFalse(tag0.isEmpty());
}",0,assertTrue(tag0.isEmpty())
project,0,test3082,"public void test3082() throws Throwable {
    Tag tag0 = Tag.valueOf(""]XK"");
    boolean boolean0 = tag0.equals(""]XK"");
    assertTrue(tag0.isInline());
}",0,assertTrue(tag0.isInline())
project,0,test3083,"public void test3083() throws Throwable {
    Tag tag0 = Tag.valueOf(""]XK"");
    boolean boolean0 = tag0.equals(""]XK"");
    assertFalse(tag0.preserveWhitespace());
}",0,assertTrue(tag0.preserveWhitespace())
project,0,test3084,"public void test3084() throws Throwable {
    Tag tag0 = Tag.valueOf(""]XK"");
    boolean boolean0 = tag0.equals(""]XK"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3085,"public void test3085() throws Throwable {
    Tag tag0 = Tag.valueOf(""]XK"");
    boolean boolean0 = tag0.equals(""]XK"");
    assertTrue(tag0.canContainBlock());
}",0,assertTrue(tag0.canContainBlock())
project,0,test3186,"public void test3186() throws Throwable {
    Tag tag0 = Tag.valueOf(""BR"");
    Tag tag1 = Tag.valueOf(""script"");
    boolean boolean0 = tag0.equals(tag1);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3287,"public void test3287() throws Throwable {
    Tag tag0 = Tag.valueOf(""Te valQQhteN exreso isflse"");
    boolean boolean0 = tag0.isValidParent(tag0);
    assertFalse(tag0.isEmpty());
}",0,assertTrue(tag0.isEmpty())
project,0,test3288,"public void test3288() throws Throwable {
    Tag tag0 = Tag.valueOf(""Te valQQhteN exreso isflse"");
    boolean boolean0 = tag0.isValidParent(tag0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test3289,"public void test3289() throws Throwable {
    Tag tag0 = Tag.valueOf(""Te valQQhteN exreso isflse"");
    boolean boolean0 = tag0.isValidParent(tag0);
    assertFalse(tag0.preserveWhitespace());
}",1,
project,0,test3290,"public void test3290() throws Throwable {
    Tag tag0 = Tag.valueOf(""Te valQQhteN exreso isflse"");
    boolean boolean0 = tag0.isValidParent(tag0);
    assertTrue(tag0.canContainBlock());
}",0,assertTrue(tag0.canContainBlock())
project,0,test3291,"public void test3291() throws Throwable {
    Tag tag0 = Tag.valueOf(""Te valQQhteN exreso isflse"");
    boolean boolean0 = tag0.isValidParent(tag0);
    assertFalse(tag0.isBlock());
}",0,assertTrue(tag0.isBlock())
project,0,test3292,"public void test3292() throws Throwable {
    Tag tag0 = Tag.valueOf(""Te valQQhteN exreso isflse"");
    boolean boolean0 = tag0.isValidParent(tag0);
    assertFalse(tag0.isData());
}",0,assertTrue(tag0.isData())
project,0,test3393,"public void test3393() throws Throwable {
    Tag tag0 = Tag.valueOf(""The validated expression is false"");
    Tag tag1 = Tag.valueOf(""The validated expression is false"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag1.preserveWhitespace());
}",0,assertFalse(tag1.preserveWhitespace())
project,0,test3394,"public void test3394() throws Throwable {
    Tag tag0 = Tag.valueOf(""The validated expression is false"");
    Tag tag1 = Tag.valueOf(""The validated expression is false"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag1.isEmpty());
}",0,assertTrue(tag1.isEmpty())
project,0,test3395,"public void test3395() throws Throwable {
    Tag tag0 = Tag.valueOf(""The validated expression is false"");
    Tag tag1 = Tag.valueOf(""The validated expression is false"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag1.isData());
}",0,
project,0,test3396,"public void test3396() throws Throwable {
    Tag tag0 = Tag.valueOf(""The validated expression is false"");
    Tag tag1 = Tag.valueOf(""The validated expression is false"");
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(tag1.canContainBlock());
}",0,
project,0,test3397,"public void test3397() throws Throwable {
    Tag tag0 = Tag.valueOf(""The validated expression is false"");
    Tag tag1 = Tag.valueOf(""The validated expression is false"");
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test3398,"public void test3398() throws Throwable {
    Tag tag0 = Tag.valueOf(""The validated expression is false"");
    Tag tag1 = Tag.valueOf(""The validated expression is false"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag1.isBlock());
}",0,assertFalse(tag1.isBlock())
project,0,test3499,"public void test3499() throws Throwable {
    Tag tag0 = Tag.valueOf(""link"");
    tag0.hashCode();
}",0,
project,0,test35100,"public void test35100() throws Throwable {
    Tag tag0 = Tag.valueOf(""r[zmHb.(TH"");
    tag0.hashCode();
    assertFalse(tag0.preserveWhitespace());
}",0,assertTrue(tag0.preserveWhitespace())
project,0,test35101,"public void test35101() throws Throwable {
    Tag tag0 = Tag.valueOf(""r[zmHb.(TH"");
    tag0.hashCode();
    assertTrue(tag0.isInline());
}",0,assertTrue(tag0.isInline())
project,0,test35102,"public void test35102() throws Throwable {
    Tag tag0 = Tag.valueOf(""r[zmHb.(TH"");
    tag0.hashCode();
    assertFalse(tag0.isData());
}",0,assertTrue(tag0.isData())
project,0,test36103,"public void test36103() throws Throwable {
    Tag tag0 = Tag.valueOf(""FORM"");
    tag0.hashCode();
}",0,
