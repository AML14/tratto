/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 15 23:42:44 GMT 2023
 */
package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true)
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test0001() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.timeout(0);
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test0012() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.userAgent("dfn");
    }

    @Test(timeout = 4000)
    public void test0023() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.timeout(79);
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test0034() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test0035() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
        httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test0036() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test0037() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test0038() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test0039() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test00410() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.requestBody("org.jsoup.nodes.Comment");
        connection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test00411() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.requestBody("org.jsoup.nodes.Comment");
        connection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test00412() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.requestBody("org.jsoup.nodes.Comment");
        connection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test00413() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.requestBody("org.jsoup.nodes.Comment");
        connection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test00414() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.requestBody("org.jsoup.nodes.Comment");
        connection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test00415() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.requestBody("org.jsoup.nodes.Comment");
        connection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test00516() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.requestBody();
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test00517() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.requestBody();
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test00518() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.requestBody();
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test00519() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.requestBody();
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test00520() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.requestBody();
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test00521() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.requestBody();
        httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test00622() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
        InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("application/x-www-form-urlencoded", 6);
        Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
        httpConnection_Request1.timeout();
    }

    @Test(timeout = 4000)
    public void test00623() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
        InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("application/x-www-form-urlencoded", 6);
        Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
        httpConnection_Request1.followRedirects();
    }

    @Test(timeout = 4000)
    public void test00624() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
        InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("application/x-www-form-urlencoded", 6);
        Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
        httpConnection_Request1.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test00625() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
        InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("application/x-www-form-urlencoded", 6);
        Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
        httpConnection_Request1.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test00626() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
        InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("application/x-www-form-urlencoded", 6);
        Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
        httpConnection_Request1.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test00627() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
        InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("application/x-www-form-urlencoded", 6);
        Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
        httpConnection_Request1.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test00728() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("multipart/form-data", 0);
        httpConnection_Request1.timeout();
    }

    @Test(timeout = 4000)
    public void test00729() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("multipart/form-data", 0);
        httpConnection_Request1.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test00730() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("multipart/form-data", 0);
        httpConnection_Request1.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test00731() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("multipart/form-data", 0);
        httpConnection_Request1.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test00732() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("multipart/form-data", 0);
        httpConnection_Request1.followRedirects();
    }

    @Test(timeout = 4000)
    public void test00733() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("multipart/form-data", 0);
        httpConnection_Request1.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test00834() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.proxy();
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test00835() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.proxy();
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test00836() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.proxy();
        httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test00837() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.proxy();
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test00838() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.proxy();
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test00839() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.proxy();
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test00940() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.postDataCharset("readonly");
    }

    @Test(timeout = 4000)
    public void test01041() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Parser parser0 = Parser.xmlParser();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
        httpConnection_Request1.timeout();
    }

    @Test(timeout = 4000)
    public void test01042() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Parser parser0 = Parser.xmlParser();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
        httpConnection_Request1.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test01043() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Parser parser0 = Parser.xmlParser();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
        httpConnection_Request1.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test01044() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Parser parser0 = Parser.xmlParser();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
        httpConnection_Request1.followRedirects();
    }

    @Test(timeout = 4000)
    public void test01045() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Parser parser0 = Parser.xmlParser();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
        httpConnection_Request1.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test01046() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Parser parser0 = Parser.xmlParser();
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
        httpConnection_Request1.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test01147() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test01148() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.maxBodySize(0);
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test01249() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test01250() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test01251() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test01252() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test01253() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test01254() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
        httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test01355() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "]8Y$D[6");
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
        httpConnection_Request1.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test01356() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "]8Y$D[6");
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
        httpConnection_Request1.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test01357() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "]8Y$D[6");
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
        httpConnection_Request1.timeout();
    }

    @Test(timeout = 4000)
    public void test01358() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "]8Y$D[6");
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
        httpConnection_Request1.followRedirects();
    }

    @Test(timeout = 4000)
    public void test01359() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "]8Y$D[6");
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
        httpConnection_Request1.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test01360() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "]8Y$D[6");
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
        httpConnection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test01361() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "]8Y$D[6");
        HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
        httpConnection_Request1.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test01462() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.data();
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test01463() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.data();
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test01464() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.data();
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test01465() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.data();
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test01466() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.data();
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test01467() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.data();
        httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test01568() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        httpConnection_Response0.parse();
    }

    @Test(timeout = 4000)
    public void test01669() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        httpConnection_Response0.body();
    }

    @Test(timeout = 4000)
    public void test01770() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test01771() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(true);
        httpConnection0.request(connection_Request0);
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test01772() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(true);
        httpConnection0.request(connection_Request0);
        Connection.Request connection_Request1 = httpConnection0.request();
        connection_Request1.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test01873() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.proxy(":%s(%dn)", 18);
    }

    @Test(timeout = 4000)
    public void test01974() throws Throwable {
        URL uRL0 = HttpConnection.encodeUrl((URL) null);
    }

    @Test(timeout = 4000)
    public void test02075() throws Throwable {
        URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
        URL uRL0 = MockURL.URL("multipart/form-data", "application/x-www-form-urlencoded", 18, "application/x-www-form-urlencoded", uRLStreamHandler0);
        URL uRL1 = HttpConnection.encodeUrl(uRL0);
        uRL1.getAuthority();
    }

    @Test(timeout = 4000)
    public void test02176() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        Connection connection0 = HttpConnection.connect(uRL0);
    }

    @Test(timeout = 4000)
    public void test02277() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.url((URL) null);
    }

    @Test(timeout = 4000)
    public void test02378() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.referrer((String) null);
    }

    @Test(timeout = 4000)
    public void test02479() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.postDataCharset((String) null);
    }

    @Test(timeout = 4000)
    public void test02580() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.headers((Map<String, String>) null);
    }

    @Test(timeout = 4000)
    public void test02681() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.header("", (String) null);
    }

    @Test(timeout = 4000)
    public void test02782() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("", "bez:COzi3g)V?;ag");
        httpConnection0.data((Map<String, String>) hashMap0);
    }

    @Test(timeout = 4000)
    public void test02883() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.data((Collection<Connection.KeyVal>) null);
    }

    @Test(timeout = 4000)
    public void test02984() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        httpConnection0.data("zC4U'2Qeq4", "@Wp$c;- RVzr", (InputStream) sequenceInputStream0, (String) null);
    }

    @Test(timeout = 4000)
    public void test03085() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        FileDescriptor fileDescriptor0 = new FileDescriptor();
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
        httpConnection0.data("", "", (InputStream) mockFileInputStream0);
    }

    @Test(timeout = 4000)
    public void test03186() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.data((String) null, (String) null);
    }

    @Test(timeout = 4000)
    public void test03287() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.data("");
    }

    @Test(timeout = 4000)
    public void test03388() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.cookies((Map<String, String>) null);
    }

    @Test(timeout = 4000)
    public void test03489() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.cookie("", "");
    }

    @Test(timeout = 4000)
    public void test03590() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "");
        HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("Content-Type");
        httpConnection_KeyVal1.value();
    }

    @Test(timeout = 4000)
    public void test03691() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        httpConnection_Response0.header((String) null, "A^+<swbZw587=|'O@d");
    }

    @Test(timeout = 4000)
    public void test03792() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test03793() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test03794() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test03795() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test03796() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test03797() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test03898() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        URL uRL0 = MockURL.getFileExample();
        Connection connection0 = httpConnection0.url(uRL0);
    }

    @Test(timeout = 4000)
    public void test03999() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(1048576);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "=}6-0:{Ciok", (InputStream) pipedInputStream0);
        HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pipedInputStream0);
        httpConnection_KeyVal1.key();
    }

    @Test(timeout = 4000)
    public void test039100() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(1048576);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "=}6-0:{Ciok", (InputStream) pipedInputStream0);
        HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pipedInputStream0);
        httpConnection_KeyVal1.value();
    }

    @Test(timeout = 4000)
    public void test040101() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "");
        HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("f`~HSIl-iUJ");
        httpConnection_KeyVal1.key();
    }

    @Test(timeout = 4000)
    public void test041102() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.execute();
    }

    @Test(timeout = 4000)
    public void test042103() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("?", "Ml+`jD.");
        Connection.KeyVal connection_KeyVal0 = httpConnection_KeyVal0.contentType("Ml+`jD.");
        connection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test043104() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("5TKP2494y_M+a~qR'X", "Data collection must not be null", (InputStream) byteArrayInputStream0);
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
    }

    @Test(timeout = 4000)
    public void test043105() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("5TKP2494y_M+a~qR'X", "Data collection must not be null", (InputStream) byteArrayInputStream0);
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
        httpConnection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test043106() throws Throwable {
        byte[] byteArray0 = new byte[3];
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("5TKP2494y_M+a~qR'X", "Data collection must not be null", (InputStream) byteArrayInputStream0);
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
        httpConnection_KeyVal0.key();
    }

    @Test(timeout = 4000)
    public void test044107() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("*+u(", "*+u(", (InputStream) null);
        boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
    }

    @Test(timeout = 4000)
    public void test045108() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
        LinkedList<String> linkedList0 = new LinkedList<String>();
        hashMap0.put("&W!", linkedList0);
        httpConnection_Response0.processResponseHeaders(hashMap0);
        httpConnection_Response0.statusMessage();
    }

    @Test(timeout = 4000)
    public void test046109() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        URL uRL0 = MockURL.getFileExample();
        httpConnection_Request0.url(uRL0);
        HttpConnection.Response.execute(httpConnection_Request0);
    }

    @Test(timeout = 4000)
    public void test047110() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        URL uRL0 = MockURL.getHttpExample();
        httpConnection_Request0.url(uRL0);
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        HttpConnection.Response.execute(httpConnection_Request0, httpConnection_Response0);
    }

    @Test(timeout = 4000)
    public void test048111() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.postDataCharset("4");
    }

    @Test(timeout = 4000)
    public void test049112() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.maxBodySize((-4173));
    }

    @Test(timeout = 4000)
    public void test050113() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.timeout((-120));
    }

    @Test(timeout = 4000)
    public void test051114() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("accept-encoding", "http");
        Connection connection0 = httpConnection0.cookies(hashMap0);
    }

    @Test(timeout = 4000)
    public void test052115() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        Connection connection0 = httpConnection0.headers(hashMap0);
    }

    @Test(timeout = 4000)
    public void test053116() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.data("~r^gP)] ", "~r^gP)] ");
        Connection.KeyVal connection_KeyVal0 = httpConnection0.data("ql%I&!imQi+o");
    }

    @Test(timeout = 4000)
    public void test054117() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
        PipedInputStream pipedInputStream0 = new PipedInputStream(105);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "/UW/,6n%N.&8]A", (InputStream) pipedInputStream0);
        linkedHashSet0.add(httpConnection_KeyVal0);
        Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test055118() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        String[] stringArray0 = new String[2];
        stringArray0[0] = "aP&-U";
        stringArray0[1] = "application/x-www-form-urlencoded";
        Connection connection0 = httpConnection0.data(stringArray0);
    }

    @Test(timeout = 4000)
    public void test056119() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        String[] stringArray0 = new String[2];
        httpConnection0.data(stringArray0);
    }

    @Test(timeout = 4000)
    public void test057120() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        String[] stringArray0 = new String[9];
        httpConnection0.data(stringArray0);
    }

    @Test(timeout = 4000)
    public void test058121() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        HashMap<String, String> hashMap0 = new HashMap<String, String>();
        hashMap0.put("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
    }

    @Test(timeout = 4000)
    public void test059122() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "multipart/form-data");
        String string0 = httpConnection_KeyVal0.toString();
    }

    @Test(timeout = 4000)
    public void test060123() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("/WfnT", "/WfnT");
        String string0 = httpConnection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test061124() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "multipart/form-data");
        String string0 = httpConnection_KeyVal0.contentType();
    }

    @Test(timeout = 4000)
    public void test062125() throws Throwable {
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "");
        httpConnection_KeyVal0.inputStream();
        httpConnection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test063126() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(1048576);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "=}6-0:{Ciok", (InputStream) pipedInputStream0);
        String string0 = httpConnection_KeyVal0.key();
    }

    @Test(timeout = 4000)
    public void test063127() throws Throwable {
        PipedInputStream pipedInputStream0 = new PipedInputStream(1048576);
        HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "=}6-0:{Ciok", (InputStream) pipedInputStream0);
        String string0 = httpConnection_KeyVal0.key();
        httpConnection_KeyVal0.value();
    }

    @Test(timeout = 4000)
    public void test064128() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        int int0 = httpConnection_Response0.statusCode();
    }

    @Test(timeout = 4000)
    public void test065129() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        String string0 = httpConnection_Response0.charset();
    }

    @Test(timeout = 4000)
    public void test066130() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        String string0 = httpConnection_Response0.contentType();
    }

    @Test(timeout = 4000)
    public void test067131() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        String string0 = httpConnection_Response0.statusMessage();
    }

    @Test(timeout = 4000)
    public void test068132() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        httpConnection_Response0.bodyStream();
    }

    @Test(timeout = 4000)
    public void test069133() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        httpConnection_Response0.bufferUp();
    }

    @Test(timeout = 4000)
    public void test070134() throws Throwable {
        HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
        HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("deflate");
        httpConnection_Response1.statusCode();
    }

    @Test(timeout = 4000)
    public void test071135() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.data(">n{%feiZ!)9]ISh", "K%Q`1L1fT", (InputStream) null, "E~IxsBS");
    }

    @Test(timeout = 4000)
    public void test072136() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.referrer("Content-Encoding");
    }

    @Test(timeout = 4000)
    public void test073137() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.header("I.Twzz%y<+s,", "-[TRfq&Hg?om +#");
    }

    @Test(timeout = 4000)
    public void test074138() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.ignoreContentType(false);
    }

    @Test(timeout = 4000)
    public void test075139() throws Throwable {
        URL uRL0 = MockURL.getFileExample();
        URL uRL1 = HttpConnection.encodeUrl(uRL0);
    }

    @Test(timeout = 4000)
    public void test076140() throws Throwable {
        HttpConnection.connect("7[");
    }

    @Test(timeout = 4000)
    public void test077141() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection.Method connection_Method0 = Connection.Method.PUT;
        Connection connection0 = httpConnection0.method(connection_Method0);
    }

    @Test(timeout = 4000)
    public void test078142() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        PipedInputStream pipedInputStream0 = new PipedInputStream();
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
        Connection connection0 = httpConnection0.data("z~=4n(a!$m0{k9[", "org.jsoup.parser.ParseErrorList", (InputStream) bufferedInputStream0);
    }

    @Test(timeout = 4000)
    public void test079143() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.timeout(346);
    }

    @Test(timeout = 4000)
    public void test080144() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.post();
    }

    @Test(timeout = 4000)
    public void test081145() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection.Response connection_Response0 = httpConnection0.response();
        connection_Response0.bodyAsBytes();
    }

    @Test(timeout = 4000)
    public void test082146() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.postDataCharset("K%Q`1L1fT");
    }

    @Test(timeout = 4000)
    public void test083147() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.ignoreHttpErrors(true);
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test083148() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.ignoreHttpErrors(true);
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test083149() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.ignoreHttpErrors(true);
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test083150() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.ignoreHttpErrors(true);
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test083151() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.ignoreHttpErrors(true);
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test083152() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.ignoreHttpErrors(true);
        Connection.Request connection_Request0 = httpConnection0.request();
        connection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test084153() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.url("}");
    }

    @Test(timeout = 4000)
    public void test085154() throws Throwable {
        HttpConnection.connect((URL) null);
    }

    @Test(timeout = 4000)
    public void test086155() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.maxBodySize(307);
    }

    @Test(timeout = 4000)
    public void test087156() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.response((Connection.Response) null);
    }

    @Test(timeout = 4000)
    public void test088157() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.followRedirects(true);
    }

    @Test(timeout = 4000)
    public void test089158() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.cookie("Yk&=jClR", "rp");
    }

    @Test(timeout = 4000)
    public void test090159() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.userAgent("");
    }

    @Test(timeout = 4000)
    public void test091160() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request) httpConnection_Request0.removeCookie("Timeout milliseconds must be 0 (infinite) or greater");
        httpConnection_Request1.timeout();
    }

    @Test(timeout = 4000)
    public void test091161() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request) httpConnection_Request0.removeCookie("Timeout milliseconds must be 0 (infinite) or greater");
        httpConnection_Request1.followRedirects();
    }

    @Test(timeout = 4000)
    public void test091162() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request) httpConnection_Request0.removeCookie("Timeout milliseconds must be 0 (infinite) or greater");
        httpConnection_Request1.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test091163() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request) httpConnection_Request0.removeCookie("Timeout milliseconds must be 0 (infinite) or greater");
        httpConnection_Request1.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test091164() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request) httpConnection_Request0.removeCookie("Timeout milliseconds must be 0 (infinite) or greater");
        httpConnection_Request1.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test091165() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request) httpConnection_Request0.removeCookie("Timeout milliseconds must be 0 (infinite) or greater");
        httpConnection_Request1.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test092166() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.get();
    }

    @Test(timeout = 4000)
    public void test093167() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.followRedirects();
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test093168() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.followRedirects();
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test093169() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.followRedirects();
        httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test093170() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.followRedirects();
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test093171() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test093172() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.followRedirects();
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test094173() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.requestBody("application/x-www-form-urlencoded");
    }

    @Test(timeout = 4000)
    public void test095174() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Proxy proxy0 = Proxy.NO_PROXY;
        Connection connection0 = httpConnection0.proxy(proxy0);
    }

    @Test(timeout = 4000)
    public void test096175() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.maxBodySize();
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test096176() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.maxBodySize();
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test096177() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.maxBodySize();
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test096178() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.maxBodySize();
        httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test096179() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test096180() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.maxBodySize();
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test097181() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        URL uRL0 = MockURL.getHttpExample();
        HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request) httpConnection_Request0.url(uRL0);
        HttpConnection.Response.execute(httpConnection_Request1);
    }

    @Test(timeout = 4000)
    public void test098182() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory();
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test098183() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory();
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test098184() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory();
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test098185() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory();
        httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test098186() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory();
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test098187() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.sslSocketFactory();
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test099188() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Parser parser0 = Parser.htmlParser();
        Connection connection0 = httpConnection0.parser(parser0);
    }

    @Test(timeout = 4000)
    public void test100189() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        String string0 = httpConnection_Request0.postDataCharset();
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test100190() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        String string0 = httpConnection_Request0.postDataCharset();
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test100191() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        String string0 = httpConnection_Request0.postDataCharset();
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test100192() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        String string0 = httpConnection_Request0.postDataCharset();
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test100193() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        String string0 = httpConnection_Request0.postDataCharset();
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test100194() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        String string0 = httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test101195() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.data("multipart/form-data=multipart/form-data", "fd~=8m");
    }

    @Test(timeout = 4000)
    public void test102196() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreContentType();
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test102197() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test102198() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreContentType();
        httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test102199() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreContentType();
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test102200() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreContentType();
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test102201() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        boolean boolean0 = httpConnection_Request0.ignoreContentType();
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test103202() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
    }

    @Test(timeout = 4000)
    public void test104203() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.parser();
        httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test104204() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.parser();
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test104205() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.parser();
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test104206() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.parser();
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test104207() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.parser();
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test104208() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        httpConnection_Request0.parser();
        httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test105209() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.timeout();
        httpConnection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test105210() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.timeout();
        httpConnection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test105211() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.timeout();
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test105212() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.timeout();
        httpConnection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test105213() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.timeout();
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test105214() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        int int0 = httpConnection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test106215() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(false);
        connection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test106216() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(false);
        connection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test106217() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(false);
        connection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test106218() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(false);
        connection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test106219() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(false);
        httpConnection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test106220() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(false);
        connection_Request0.timeout();
    }

    @Test(timeout = 4000)
    public void test107221() throws Throwable {
        HttpConnection httpConnection0 = new HttpConnection();
        httpConnection0.proxy(",V/:F", (-918));
    }

    @Test(timeout = 4000)
    public void test108222() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(true);
        httpConnection_Request0.followRedirects();
    }

    @Test(timeout = 4000)
    public void test108223() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(true);
        connection_Request0.maxBodySize();
    }

    @Test(timeout = 4000)
    public void test108224() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(true);
        connection_Request0.postDataCharset();
    }

    @Test(timeout = 4000)
    public void test108225() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(true);
        connection_Request0.ignoreContentType();
    }

    @Test(timeout = 4000)
    public void test108226() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(true);
        connection_Request0.ignoreHttpErrors();
    }

    @Test(timeout = 4000)
    public void test108227() throws Throwable {
        HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
        Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(true);
        connection_Request0.timeout();
    }
}
