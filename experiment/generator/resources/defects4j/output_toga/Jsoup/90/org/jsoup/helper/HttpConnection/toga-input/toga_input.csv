focal_method,test_prefix,docstring
"public Connection userAgent(String userAgent) {
    Validate.notNull(userAgent, ""User agent must not be null"");
    req.header(USER_AGENT, userAgent);
    return this;
}","public void test0012() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.userAgent(""dfn"");
    assertSame(httpConnection0, connection0);
}",""
"public Connection proxy(String host, int port) {
    req.proxy(host, port);
    return this;
}","public void test01873() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.proxy("":%s(%dn)"", 18);
    assertSame(httpConnection0, connection0);
}",""
"static URL encodeUrl(URL u) {
    try {
        //  odd way to encode urls, but it works!
        // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
        String urlS = u.toExternalForm();
        urlS = urlS.replaceAll("" "", ""%20"");
        final URI uri = new URI(urlS);
        return new URL(uri.toASCIIString());
    } catch (Exception e) {
        return u;
    }
}","public void test01974() throws Throwable {
    URL uRL0 = HttpConnection.encodeUrl((URL) null);
    assertNull(uRL0);
}",""
"public static Connection connect(URL url) {
    Connection con = new HttpConnection();
    con.url(url);
    return con;
}","public void test02176() throws Throwable {
    URL uRL0 = MockURL.getFileExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    assertNotNull(connection0);
}",""
"public Connection url(URL url) {
    req.url(url);
    return this;
}","public void test02277() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.url((URL) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // URL must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection referrer(String referrer) {
    Validate.notNull(referrer, ""Referrer must not be null"");
    req.header(""Referer"", referrer);
    return this;
}","public void test02378() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.referrer((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Referrer must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection postDataCharset(String charset) {
    req.postDataCharset(charset);
    return this;
}","public void test02479() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.postDataCharset((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Charset must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection headers(Map<String, String> headers) {
    Validate.notNull(headers, ""Header map must not be null"");
    for (Map.Entry<String, String> entry : headers.entrySet()) {
        req.header(entry.getKey(), entry.getValue());
    }
    return this;
}","public void test02580() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.headers((Map<String, String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Header map must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection header(String name, String value) {
    req.header(name, value);
    return this;
}","public void test02681() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.header("""", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Header name must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection data(Map<String, String> data) {
    Validate.notNull(data, ""Data map must not be null"");
    for (Map.Entry<String, String> entry : data.entrySet()) {
        req.data(KeyVal.create(entry.getKey(), entry.getValue()));
    }
    return this;
}","public void test02782() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    hashMap0.put("""", ""bez:COzi3g)V?;ag"");
    // Undeclared exception!
    try {
        httpConnection0.data((Map<String, String>) hashMap0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Data key must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection data(Collection<Connection.KeyVal> data) {
    Validate.notNull(data, ""Data collection must not be null"");
    for (Connection.KeyVal entry : data) {
        req.data(entry);
    }
    return this;
}","public void test02883() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.data((Collection<Connection.KeyVal>) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Data collection must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
public Connection data(String key, String filename, InputStream inputStream, String contentType) {
    req.data(KeyVal.create(key, filename, inputStream).contentType(contentType));
    return this;
}","public void test02984() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    // Undeclared exception!
    try {
        httpConnection0.data(""zC4U'2Qeq4"", ""@Wp$c;- RVzr"", (InputStream) sequenceInputStream0, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection data(String key, String filename, InputStream inputStream) {
    req.data(KeyVal.create(key, filename, inputStream));
    return this;
}","public void test03085() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    // Undeclared exception!
    try {
        httpConnection0.data("""", """", (InputStream) mockFileInputStream0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Data key must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection data(String key, String value) {
    req.data(KeyVal.create(key, value));
    return this;
}","public void test03186() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.data((String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Data key must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection.KeyVal data(String key) {
    Validate.notEmpty(key, ""Data key must not be empty"");
    for (Connection.KeyVal keyVal : request().data()) {
        if (keyVal.key().equals(key))
            return keyVal;
    }
    return null;
}","public void test03287() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.data("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Data key must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection cookies(Map<String, String> cookies) {
    Validate.notNull(cookies, ""Cookie map must not be null"");
    for (Map.Entry<String, String> entry : cookies.entrySet()) {
        req.cookie(entry.getKey(), entry.getValue());
    }
    return this;
}","public void test03388() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.cookies((Map<String, String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Cookie map must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection cookie(String name, String value) {
    req.cookie(name, value);
    return this;
}","public void test03489() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.cookie("""", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Cookie name must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection url(URL url) {
    req.url(url);
    return this;
}","public void test03898() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    URL uRL0 = MockURL.getFileExample();
    Connection connection0 = httpConnection0.url(uRL0);
    assertSame(connection0, httpConnection0);
}",""
"public Connection.Response execute() throws IOException {
    res = Response.execute(req);
    return res;
}","public void test041102() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.execute();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // URL must be specified to connect
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection postDataCharset(String charset) {
    req.postDataCharset(charset);
    return this;
}","public void test048111() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.postDataCharset(""4"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // 4
        //
        verifyException(""org.jsoup.helper.HttpConnection$Request"", e);
    }
}",""
"public Connection maxBodySize(int bytes) {
    req.maxBodySize(bytes);
    return this;
}","public void test049112() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.maxBodySize((-4173));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // maxSize must be 0 (unlimited) or larger
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection timeout(int millis) {
    req.timeout(millis);
    return this;
}","public void test050113() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.timeout((-120));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Timeout milliseconds must be 0 (infinite) or greater
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection cookies(Map<String, String> cookies) {
    Validate.notNull(cookies, ""Cookie map must not be null"");
    for (Map.Entry<String, String> entry : cookies.entrySet()) {
        req.cookie(entry.getKey(), entry.getValue());
    }
    return this;
}","public void test051114() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    hashMap0.put(""accept-encoding"", ""http"");
    Connection connection0 = httpConnection0.cookies(hashMap0);
    assertSame(httpConnection0, connection0);
}",""
"public Connection headers(Map<String, String> headers) {
    Validate.notNull(headers, ""Header map must not be null"");
    for (Map.Entry<String, String> entry : headers.entrySet()) {
        req.header(entry.getKey(), entry.getValue());
    }
    return this;
}","public void test052115() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    hashMap0.put(""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"", ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"");
    Connection connection0 = httpConnection0.headers(hashMap0);
    assertSame(httpConnection0, connection0);
}",""
"public Connection.KeyVal data(String key) {
    Validate.notEmpty(key, ""Data key must not be empty"");
    for (Connection.KeyVal keyVal : request().data()) {
        if (keyVal.key().equals(key))
            return keyVal;
    }
    return null;
}","public void test053116() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    httpConnection0.data(""~r^gP)] "", ""~r^gP)] "");
    Connection.KeyVal connection_KeyVal0 = httpConnection0.data(""ql%I&!imQi+o"");
    assertNull(connection_KeyVal0);
}",""
"public Connection data(Collection<Connection.KeyVal> data) {
    Validate.notNull(data, ""Data collection must not be null"");
    for (Connection.KeyVal entry : data) {
        req.data(entry);
    }
    return this;
}","public void test054117() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
    PipedInputStream pipedInputStream0 = new PipedInputStream(105);
    HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(""multipart/form-data"", ""/UW/,6n%N.&8]A"", (InputStream) pipedInputStream0);
    linkedHashSet0.add(httpConnection_KeyVal0);
    Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
    assertSame(httpConnection0, connection0);
}",""
"public Connection data(String... keyvals) {
    Validate.notNull(keyvals, ""Data key value pairs must not be null"");
    Validate.isTrue(keyvals.length % 2 == 0, ""Must supply an even number of key value pairs"");
    for (int i = 0; i < keyvals.length; i += 2) {
        String key = keyvals[i];
        String value = keyvals[i + 1];
        Validate.notEmpty(key, ""Data key must not be empty"");
        Validate.notNull(value, ""Data value must not be null"");
        req.data(KeyVal.create(key, value));
    }
    return this;
}","public void test055118() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""aP&-U"";
    stringArray0[1] = ""application/x-www-form-urlencoded"";
    Connection connection0 = httpConnection0.data(stringArray0);
    assertSame(connection0, httpConnection0);
}",""
"public Connection data(String... keyvals) {
    Validate.notNull(keyvals, ""Data key value pairs must not be null"");
    Validate.isTrue(keyvals.length % 2 == 0, ""Must supply an even number of key value pairs"");
    for (int i = 0; i < keyvals.length; i += 2) {
        String key = keyvals[i];
        String value = keyvals[i + 1];
        Validate.notEmpty(key, ""Data key must not be empty"");
        Validate.notNull(value, ""Data value must not be null"");
        req.data(KeyVal.create(key, value));
    }
    return this;
}","public void test056119() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    String[] stringArray0 = new String[2];
    // Undeclared exception!
    try {
        httpConnection0.data(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Data key must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection data(String... keyvals) {
    Validate.notNull(keyvals, ""Data key value pairs must not be null"");
    Validate.isTrue(keyvals.length % 2 == 0, ""Must supply an even number of key value pairs"");
    for (int i = 0; i < keyvals.length; i += 2) {
        String key = keyvals[i];
        String value = keyvals[i + 1];
        Validate.notEmpty(key, ""Data key must not be empty"");
        Validate.notNull(value, ""Data value must not be null"");
        req.data(KeyVal.create(key, value));
    }
    return this;
}","public void test057120() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    String[] stringArray0 = new String[9];
    // Undeclared exception!
    try {
        httpConnection0.data(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must supply an even number of key value pairs
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection data(Map<String, String> data) {
    Validate.notNull(data, ""Data map must not be null"");
    for (Map.Entry<String, String> entry : data.entrySet()) {
        req.data(KeyVal.create(entry.getKey(), entry.getValue()));
    }
    return this;
}","public void test058121() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    HashMap<String, String> hashMap0 = new HashMap<String, String>();
    hashMap0.put(""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"", ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"");
    Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
    assertSame(httpConnection0, connection0);
}",""
"@Override
public Connection data(String key, String filename, InputStream inputStream, String contentType) {
    req.data(KeyVal.create(key, filename, inputStream).contentType(contentType));
    return this;
}","public void test071135() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.data("">n{%feiZ!)9]ISh"", ""K%Q`1L1fT"", (InputStream) null, ""E~IxsBS"");
    assertSame(connection0, httpConnection0);
}",""
"public Connection referrer(String referrer) {
    Validate.notNull(referrer, ""Referrer must not be null"");
    req.header(""Referer"", referrer);
    return this;
}","public void test072136() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.referrer(""Content-Encoding"");
    assertSame(httpConnection0, connection0);
}",""
"public Connection header(String name, String value) {
    req.header(name, value);
    return this;
}","public void test073137() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.header(""I.Twzz%y<+s,"", ""-[TRfq&Hg?om +#"");
    assertSame(httpConnection0, connection0);
}",""
"public Connection ignoreContentType(boolean ignoreContentType) {
    req.ignoreContentType(ignoreContentType);
    return this;
}","public void test074138() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.ignoreContentType(false);
    assertSame(connection0, httpConnection0);
}",""
"static URL encodeUrl(URL u) {
    try {
        //  odd way to encode urls, but it works!
        // URL external form may have spaces which is illegal in new URL() (odd asymmetry)
        String urlS = u.toExternalForm();
        urlS = urlS.replaceAll("" "", ""%20"");
        final URI uri = new URI(urlS);
        return new URL(uri.toASCIIString());
    } catch (Exception e) {
        return u;
    }
}","public void test075139() throws Throwable {
    URL uRL0 = MockURL.getFileExample();
    URL uRL1 = HttpConnection.encodeUrl(uRL0);
    assertNotSame(uRL1, uRL0);
}",""
"public static Connection connect(String url) {
    Connection con = new HttpConnection();
    con.url(url);
    return con;
}","public void test076140() throws Throwable {
    // Undeclared exception!
    try {
        HttpConnection.connect(""7["");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Malformed URL: 7[
        //
        verifyException(""org.jsoup.helper.HttpConnection"", e);
    }
}",""
"public Connection method(Method method) {
    req.method(method);
    return this;
}","public void test077141() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection.Method connection_Method0 = Connection.Method.PUT;
    Connection connection0 = httpConnection0.method(connection_Method0);
    assertSame(connection0, httpConnection0);
}",""
"public Connection data(String key, String filename, InputStream inputStream) {
    req.data(KeyVal.create(key, filename, inputStream));
    return this;
}","public void test078142() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
    Connection connection0 = httpConnection0.data(""z~=4n(a!$m0{k9["", ""org.jsoup.parser.ParseErrorList"", (InputStream) bufferedInputStream0);
    assertSame(httpConnection0, connection0);
}",""
"public Connection timeout(int millis) {
    req.timeout(millis);
    return this;
}","public void test079143() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.timeout(346);
    assertSame(httpConnection0, connection0);
}",""
"public Document post() throws IOException {
    req.method(Method.POST);
    execute();
    return res.parse();
}","public void test080144() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.post();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // URL must be specified to connect
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection postDataCharset(String charset) {
    req.postDataCharset(charset);
    return this;
}","public void test082146() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.postDataCharset(""K%Q`1L1fT"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // K%Q`1L1fT
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",""
"public Connection url(String url) {
    Validate.notEmpty(url, ""Must supply a valid URL"");
    try {
        req.url(new URL(encodeUrl(url)));
    } catch (MalformedURLException e) {
        throw new IllegalArgumentException(""Malformed URL: "" + url, e);
    }
    return this;
}","public void test084153() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.url(""}"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Malformed URL: }
        //
        verifyException(""org.jsoup.helper.HttpConnection"", e);
    }
}",""
"public static Connection connect(URL url) {
    Connection con = new HttpConnection();
    con.url(url);
    return con;
}","public void test085154() throws Throwable {
    // Undeclared exception!
    try {
        HttpConnection.connect((URL) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // URL must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection maxBodySize(int bytes) {
    req.maxBodySize(bytes);
    return this;
}","public void test086155() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.maxBodySize(307);
    assertSame(httpConnection0, connection0);
}",""
"public Connection response(Connection.Response response) {
    res = response;
    return this;
}","public void test087156() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.response((Connection.Response) null);
    assertSame(connection0, httpConnection0);
}",""
"public Connection followRedirects(boolean followRedirects) {
    req.followRedirects(followRedirects);
    return this;
}","public void test088157() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.followRedirects(true);
    assertSame(connection0, httpConnection0);
}",""
"public Connection cookie(String name, String value) {
    req.cookie(name, value);
    return this;
}","public void test089158() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.cookie(""Yk&=jClR"", ""rp"");
    assertSame(connection0, httpConnection0);
}",""
"public Connection userAgent(String userAgent) {
    Validate.notNull(userAgent, ""User agent must not be null"");
    req.header(USER_AGENT, userAgent);
    return this;
}","public void test090159() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.userAgent("""");
    assertSame(connection0, httpConnection0);
}",""
"public Document get() throws IOException {
    req.method(Method.GET);
    execute();
    return res.parse();
}","public void test092166() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.get();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // URL must be specified to connect
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Connection requestBody(String body) {
    req.requestBody(body);
    return this;
}","public void test094173() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.requestBody(""application/x-www-form-urlencoded"");
    assertSame(connection0, httpConnection0);
}",""
"public Connection proxy(Proxy proxy) {
    req.proxy(proxy);
    return this;
}","public void test095174() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Proxy proxy0 = Proxy.NO_PROXY;
    Connection connection0 = httpConnection0.proxy(proxy0);
    assertSame(connection0, httpConnection0);
}",""
"public Connection parser(Parser parser) {
    req.parser(parser);
    return this;
}","public void test099188() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Parser parser0 = Parser.htmlParser();
    Connection connection0 = httpConnection0.parser(parser0);
    assertSame(httpConnection0, connection0);
}",""
"public Connection data(String key, String value) {
    req.data(KeyVal.create(key, value));
    return this;
}","public void test101195() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.data(""multipart/form-data=multipart/form-data"", ""fd~=8m"");
    assertSame(httpConnection0, connection0);
}",""
"public Connection sslSocketFactory(SSLSocketFactory sslSocketFactory) {
    req.sslSocketFactory(sslSocketFactory);
    return this;
}","public void test103202() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
    assertSame(httpConnection0, connection0);
}",""
"public Connection proxy(String host, int port) {
    req.proxy(host, port);
    return this;
}","public void test107221() throws Throwable {
    HttpConnection httpConnection0 = new HttpConnection();
    // Undeclared exception!
    try {
        httpConnection0.proxy("",V/:F"", (-918));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // port out of range:-918
        //
        verifyException(""java.net.InetSocketAddress"", e);
    }
}",""
