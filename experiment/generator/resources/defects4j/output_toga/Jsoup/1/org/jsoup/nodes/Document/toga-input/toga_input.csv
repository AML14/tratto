focal_method,test_prefix,docstring
"public String toString() {
    return outerHtml();
}","public void test00() throws Throwable {
    Document document0 = new Document(""Um5"");
    String string0 = document0.toString();
    assertEquals("""", string0);
}",""
"public Document normalise() {
    if (select(""html"").isEmpty())
        appendElement(""html"");
    if (head() == null)
        select(""html"").first().prependElement(""head"");
    if (body() == null)
        select(""html"").first().appendElement(""body"");
    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care
    // of. do in inverse order to maintain text order.
    normalise(head());
    normalise(select(""html"").first());
    normalise(this);
    return this;
}","public void test11() throws Throwable {
    Document document0 = new Document(""Um5"");
    Element element0 = document0.append(""Um5"");
    Document document1 = document0.normalise();
    assertSame(document1, element0);
}","/**
 *     Normalise the document. This happens after the parse phase so generally does not need to be called.
 *     Moves any text content that is not in the body element into the body.
 *     @return this document after normalisation
 */"
"@Override
public Element text(String text) {
    // overridden to not nuke doc structure
    body().text(text);
    return this;
}","public void test22() throws Throwable {
    Document document0 = new Document(""Um5"");
    // Undeclared exception!
    try {
        document0.text("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Document"", e);
    }
}","/**
 *     Set the text of the {@code body} of this document. Any existing nodes within the body will be cleared.
 *     @param text unencoded text
 *     @return this document
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test33() throws Throwable {
    Document document0 = Document.createShell("" )#[FUgfDGNgzrpP$1"");
    String string0 = document0.nodeName();
    assertEquals(""#document"", string0);
}",""
"@Override
public String nodeName() {
    return tag.getName();
}","public void test44() throws Throwable {
    Document document0 = Document.createShell(""'I\""Bbb]/YzOf9"");
    Element element0 = document0.createElement("")->lf?z1% sH:jREt"");
    assertEquals("")->lf?z1% sh:jret"", element0.nodeName());
}",""
"public String title() {
    Element titleEl = getElementsByTag(""title"").first();
    return titleEl != null ? titleEl.text().trim() : """";
}","public void test55() throws Throwable {
    Document document0 = Document.createShell(""{D<"");
    String string0 = document0.title();
    assertEquals("""", string0);
}","/**
 *     Get the string contents of the document's {@code title} element.
 *     @return Trimed title, or empty string if none set.
 */"
"public String title() {
    Element titleEl = getElementsByTag(""title"").first();
    return titleEl != null ? titleEl.text().trim() : """";
}","public void test66() throws Throwable {
    Document document0 = Document.createShell(""'I\""Bbb]/YzOf9"");
    document0.title(""'I\""Bbb]/YzOf9"");
    String string0 = document0.title();
    assertEquals(""'I\""Bbb]/YzOf9"", string0);
}","/**
 *     Get the string contents of the document's {@code title} element.
 *     @return Trimed title, or empty string if none set.
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test77() throws Throwable {
    Document document0 = Document.createShell(""'I\""Bbb]/YzOf9"");
    document0.title(""'I\""Bbb]/YzOf9"");
    document0.title(""xp#&U"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String tagName() {
    return tag.getName();
}","public void test88() throws Throwable {
    Document document0 = new Document(""Um5"");
    document0.appendText("""");
    Document document1 = document0.normalise();
    assertEquals(""#root"", document1.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
