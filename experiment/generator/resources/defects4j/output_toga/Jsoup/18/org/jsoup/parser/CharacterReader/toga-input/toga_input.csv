focal_method,test_prefix,docstring
"@Override
public String toString() {
    return input.substring(pos);
}","public void test000() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""$B"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""$B"");
    assertEquals("""", characterReader0.toString());
}",""
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        pos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test001() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""$B"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""$B"");
    assertTrue(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test012() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""O_j{lD'oz@"");
    boolean boolean0 = characterReader0.matchConsume(""O_j{lD'oz@"");
    assertEquals("""", characterReader0.toString());
}",""
"boolean matchConsume(String seq) {
    if (matches(seq)) {
        pos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test013() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""O_j{lD'oz@"");
    boolean boolean0 = characterReader0.matchConsume(""O_j{lD'oz@"");
    assertTrue(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test024() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">9SeM@!GS8U+v"");
    characterReader0.consumeAsString();
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(""9SeM@!GS8U+v"", characterReader0.toString());
}",""
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= '0' && c <= '9');
}","public void test025() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">9SeM@!GS8U+v"");
    characterReader0.consumeAsString();
    boolean boolean0 = characterReader0.matchesDigit();
    assertTrue(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test036() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bdbdbdbdzbzms#f;:+"");
    characterReader0.consumeHexSequence();
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(""zbzms#f;:+"", characterReader0.toString());
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
}","public void test037() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bdbdbdbdzbzms#f;:+"");
    characterReader0.consumeHexSequence();
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test048() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""eaE$"");
    characterReader0.consumeAsString();
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(""aE$"", characterReader0.toString());
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
}","public void test049() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""eaE$"");
    characterReader0.consumeAsString();
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
}","public void test0510() throws Throwable {
    String string0 = ""ZE)wYy,\\uj}"";
    CharacterReader characterReader0 = new CharacterReader(string0);
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
}","public void test0611() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test0712() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""[J=DRd5=:Uhxdjbv"");
    characterReader0.consume();
    char[] charArray0 = new char[3];
    charArray0[0] = '[';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertEquals(""J=DRd5=:Uhxdjbv"", characterReader0.toString());
}",""
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test0713() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""[J=DRd5=:Uhxdjbv"");
    characterReader0.consume();
    char[] charArray0 = new char[3];
    charArray0[0] = '[';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertFalse(boolean0);
}",""
"boolean matches(char c) {
    return !isEmpty() && input.charAt(pos) == c;
}","public void test0814() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    boolean boolean0 = characterReader0.matches('C');
    assertFalse(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test0915() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""94)=-"");
    characterReader0.consumeDigitSequence();
    assertEquals("")=-"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test1016() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""0gq)owzGcAH|R5Wq"");
    characterReader0.consumeDigitSequence();
    assertEquals(""gq)owzGcAH|R5Wq"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test1117() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""eaE$"");
    characterReader0.consumeHexSequence();
    assertEquals(""$"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test1218() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""F8rnT"");
    characterReader0.consumeHexSequence();
    assertEquals(""rnT"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test1319() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""WALp:"");
    characterReader0.consumeAsString();
    characterReader0.consumeHexSequence();
    assertEquals(""Lp:"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test1420() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""94)=-"");
    characterReader0.consumeHexSequence();
    assertEquals("")=-"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test1521() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""0#,Z}M;zfFm4HU<`"");
    characterReader0.consumeHexSequence();
    assertEquals(""#,Z}M;zfFm4HU<`"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test1622() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    char[] charArray0 = new char[3];
    charArray0[1] = 'p';
    characterReader0.consumeToAny(charArray0);
    characterReader0.consume();
    characterReader0.consume();
    characterReader0.consumeLetterSequence();
    assertEquals("".CharacterReader"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test1723() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""ZAMunt 8beDtrue"");
    characterReader0.consumeAsString();
    characterReader0.consumeLetterSequence();
    assertEquals("" 8beDtrue"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test1824() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""rC}_al#b@D)_uqc"");
    characterReader0.consumeTo(""C}_al#b@D)_uq"");
    assertEquals(""C}_al#b@D)_uqc"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test1925() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("")sy=)>_FwLvb"");
    characterReader0.consume();
    characterReader0.consumeTo(')');
    assertEquals("")>_FwLvb"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test2026() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3"");
    char[] charArray0 = new char[0];
    characterReader0.consumeToAny(charArray0);
    characterReader0.unconsume();
    assertEquals(""3"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test2027() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3"");
    char[] charArray0 = new char[0];
    characterReader0.consumeToAny(charArray0);
    characterReader0.unconsume();
    characterReader0.consumeTo('q');
    characterReader0.toString();
    assertEquals("""", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test2128() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""1"");
    characterReader0.consumeAsString();
    int int0 = characterReader0.pos();
    assertEquals("""", characterReader0.toString());
}",""
"int pos() {
    return pos;
}","public void test2129() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""1"");
    characterReader0.consumeAsString();
    int int0 = characterReader0.pos();
    assertEquals(1, int0);
}",""
"int pos() {
    return pos;
}","public void test2230() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.helper.Validate"");
    characterReader0.unconsume();
    int int0 = characterReader0.pos();
    assertEquals((-1), int0);
}",""
"boolean matchesIgnoreCase(String seq) {
    return input.regionMatches(true, pos, seq, 0, seq.length());
}","public void test2331() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.advance();
    boolean boolean0 = characterReader0.matchesIgnoreCase("""");
    assertFalse(boolean0);
}",""
"boolean matches(String seq) {
    return input.startsWith(seq, pos);
}","public void test2432() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    boolean boolean0 = characterReader0.matches(""B#H2Cf1%+I/(e"");
    assertFalse(boolean0);
}",""
"boolean isEmpty() {
    return pos >= length;
}","public void test2533() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    boolean boolean0 = characterReader0.isEmpty();
    assertTrue(boolean0);
}",""
"boolean isEmpty() {
    return pos >= length;
}","public void test2634() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bdbd6h5iezbzms#f;+"");
    boolean boolean0 = characterReader0.isEmpty();
    assertFalse(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test2735() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bdbd6h5iezbzms#f;+"");
    characterReader0.consumeLetterSequence();
    char char0 = characterReader0.current();
    assertEquals(""6h5iezbzms#f;+"", characterReader0.toString());
}",""
"char current() {
    return isEmpty() ? EOF : input.charAt(pos);
}","public void test2736() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bdbd6h5iezbzms#f;+"");
    characterReader0.consumeLetterSequence();
    char char0 = characterReader0.current();
    assertEquals('6', char0);
}",""
"char current() {
    return isEmpty() ? EOF : input.charAt(pos);
}","public void test2837() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bLQMgG;c\""d^(k#.2"");
    char char0 = characterReader0.current();
    assertEquals('b', char0);
}",""
"String consumeToEnd() {
    String data = input.substring(pos, input.length() - 1);
    pos = input.length();
    return data;
}","public void test2938() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""s"");
    String string0 = characterReader0.consumeToEnd();
    assertEquals("""", string0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test3039() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.consume();
    // Undeclared exception!
    try {
        characterReader0.toString();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
}","public void test3140() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesLetter();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"boolean matchesIgnoreCase(String seq) {
    return input.regionMatches(true, pos, seq, 0, seq.length());
}","public void test3241() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""%'HSL"");
    // Undeclared exception!
    try {
        characterReader0.matchesIgnoreCase((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= '0' && c <= '9');
}","public void test3342() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""CV-qOcIV1>'8E9%"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesDigit();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test3443() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.helper.Validate"");
    char[] charArray0 = new char[1];
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesAny(charArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test3544() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    // Undeclared exception!
    try {
        characterReader0.matchesAny((char[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matches(String seq) {
    return input.startsWith(seq, pos);
}","public void test3645() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.advance();
    // Undeclared exception!
    try {
        characterReader0.matches("""");
        //  fail(""Expecting exception: StringIndexOutOfBoundsException"");
        // Unstable assertion
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"boolean matches(String seq) {
    return input.startsWith(seq, pos);
}","public void test3746() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("";1L@YWx"");
    // Undeclared exception!
    try {
        characterReader0.matches((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"boolean matches(char c) {
    return !isEmpty() && input.charAt(pos) == c;
}","public void test3847() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""O_j{lD'oz@"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matches('');
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        pos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test3948() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchConsume(String seq) {
    if (matches(seq)) {
        pos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test4049() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""O_j{lD'oz@"");
    characterReader0.consumeToEnd();
    characterReader0.consumeAsString();
    // Undeclared exception!
    try {
        characterReader0.matchConsume(""O_j{lD'oz@"");
        //  fail(""Expecting exception: StringIndexOutOfBoundsException"");
        // Unstable assertion
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"boolean matchConsume(String seq) {
    if (matches(seq)) {
        pos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test4150() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.matchConsume((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase();
    String hiScan = seq.toUpperCase();
    return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1);
}","public void test4251() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""1"");
    // Undeclared exception!
    try {
        characterReader0.containsIgnoreCase((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeToEnd() {
    String data = input.substring(pos, input.length() - 1);
    pos = input.length();
    return data;
}","public void test4352() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""7{%"");
    characterReader0.consume();
    characterReader0.consumeTo('7');
    // Undeclared exception!
    try {
        characterReader0.consumeToEnd();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"String consumeToAny(char... seq) {
    int start = pos;
    OUTER: while (!isEmpty()) {
        char c = input.charAt(pos);
        for (char seek : seq) {
            if (seek == c)
                break OUTER;
        }
        pos++;
    }
    return pos > start ? input.substring(start, pos) : """";
}","public void test4453() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""-$_HLg^m']W't "");
    characterReader0.unconsume();
    char[] charArray0 = new char[3];
    // Undeclared exception!
    try {
        characterReader0.consumeToAny(charArray0);
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"String consumeToAny(char... seq) {
    int start = pos;
    OUTER: while (!isEmpty()) {
        char c = input.charAt(pos);
        for (char seek : seq) {
            if (seek == c)
                break OUTER;
        }
        pos++;
    }
    return pos > start ? input.substring(start, pos) : """";
}","public void test4554() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""94)=-"");
    // Undeclared exception!
    try {
        characterReader0.consumeToAny((char[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeTo(String seq) {
    int offset = input.indexOf(seq, pos);
    if (offset != -1) {
        String consumed = input.substring(pos, offset);
        pos += consumed.length();
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test4655() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bdbdbdbdzbzms#f;:+"");
    char[] charArray0 = new char[5];
    characterReader0.consumeToAny(charArray0);
    // Undeclared exception!
    try {
        characterReader0.consumeTo(""%VJ#Rn5=-WS("");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"String consumeTo(String seq) {
    int offset = input.indexOf(seq, pos);
    if (offset != -1) {
        String consumed = input.substring(pos, offset);
        pos += consumed.length();
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test4756() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.consumeTo((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"String consumeTo(char c) {
    int offset = input.indexOf(c, pos);
    if (offset != -1) {
        String consumed = input.substring(pos, offset);
        pos += consumed.length();
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test4857() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    characterReader0.consumeTo(""opsGjde"");
    // Undeclared exception!
    try {
        characterReader0.consumeTo('H');
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"String consumeLetterSequence() {
    int start = pos;
    while (!isEmpty()) {
        char c = input.charAt(pos);
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
            pos++;
        else
            break;
    }
    return input.substring(start, pos);
}","public void test4958() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""OJj}O7WvUdg"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeLetterSequence();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"String consumeDigitSequence() {
    int start = pos;
    while (!isEmpty()) {
        char c = input.charAt(pos);
        if (c >= '0' && c <= '9')
            pos++;
        else
            break;
    }
    return input.substring(start, pos);
}","public void test5059() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.helper.Validate"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeDigitSequence();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"char consume() {
    char val = isEmpty() ? EOF : input.charAt(pos);
    pos++;
    return val;
}","public void test5160() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consume();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"CharacterReader(String input) {
    Validate.notNull(input);
    this.input = input;
    this.length = input.length();
}","public void test5261() throws Throwable {
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase();
    String hiScan = seq.toUpperCase();
    return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1);
}","public void test5362() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""6\""#LD5Y"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""6\""#LD5Y"");
    assertTrue(boolean0);
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase();
    String hiScan = seq.toUpperCase();
    return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1);
}","public void test5463() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""rC}_a;l#b@D)_uwc"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""rC}_a;l#b@D)_uwc"");
    assertFalse(boolean0);
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase();
    String hiScan = seq.toUpperCase();
    return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1);
}","public void test5564() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""BDBD6\""5,Inm)'}@:+"");
    boolean boolean0 = characterReader0.containsIgnoreCase("""");
    assertTrue(boolean0);
}",""
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        pos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test5665() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""}?T"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase("":,Z:]9"");
    assertFalse(boolean0);
}",""
"boolean matchConsume(String seq) {
    if (matches(seq)) {
        pos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test5766() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("")sy=)>_FwLvb"");
    boolean boolean0 = characterReader0.matchConsume(""sy"");
    assertFalse(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test5867() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bdbd6h5iezbzms#f;+"");
    characterReader0.consumeLetterSequence();
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(""6h5iezbzms#f;+"", characterReader0.toString());
}",""
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= '0' && c <= '9');
}","public void test5868() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bdbd6h5iezbzms#f;+"");
    characterReader0.consumeLetterSequence();
    boolean boolean0 = characterReader0.matchesDigit();
    assertTrue(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test5969() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""orgjsoup.helper.Validat"");
    characterReader0.consumeLetterSequence();
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals("".helper.Validat"", characterReader0.toString());
}",""
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= '0' && c <= '9');
}","public void test5970() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""orgjsoup.helper.Validat"");
    characterReader0.consumeLetterSequence();
    boolean boolean0 = characterReader0.matchesDigit();
    assertFalse(boolean0);
}",""
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= '0' && c <= '9');
}","public void test6071() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bdbd6h5iezbzms#f;+"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertFalse(boolean0);
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
}","public void test6172() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("")sy=)>_FwLvb"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test6273() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bdbd6h5iezbzms#f;+"");
    char[] charArray0 = new char[7];
    charArray0[0] = 'b';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertTrue(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test6374() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""7"");
    characterReader0.consumeHexSequence();
    char[] charArray0 = new char[14];
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertEquals("""", characterReader0.toString());
}",""
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test6375() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""7"");
    characterReader0.consumeHexSequence();
    char[] charArray0 = new char[14];
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertFalse(boolean0);
}",""
"boolean matches(char c) {
    return !isEmpty() && input.charAt(pos) == c;
}","public void test6476() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""O_j{lD'oz@"");
    boolean boolean0 = characterReader0.matches('');
    assertTrue(boolean0);
}",""
"boolean matches(char c) {
    return !isEmpty() && input.charAt(pos) == c;
}","public void test6577() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""BDBD6\""5,Inm)'}@:+"");
    boolean boolean0 = characterReader0.matches('K');
    assertFalse(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test6678() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""rC}_a;l#b@D)_uwc"");
    characterReader0.advance();
    characterReader0.consumeTo(""rC}_a;l#b@D)_uwc"");
    boolean boolean0 = characterReader0.matches('F');
    assertEquals("""", characterReader0.toString());
}",""
"boolean matches(char c) {
    return !isEmpty() && input.charAt(pos) == c;
}","public void test6679() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""rC}_a;l#b@D)_uwc"");
    characterReader0.advance();
    characterReader0.consumeTo(""rC}_a;l#b@D)_uwc"");
    boolean boolean0 = characterReader0.matches('F');
    assertFalse(boolean0);
}",""
"String consumeDigitSequence() {
    int start = pos;
    while (!isEmpty()) {
        char c = input.charAt(pos);
        if (c >= '0' && c <= '9')
            pos++;
        else
            break;
    }
    return input.substring(start, pos);
}","public void test6780() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""BDBD6\""5,Inm)'}@:+"");
    String string0 = characterReader0.consumeDigitSequence();
    assertEquals("""", string0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test6881() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""rC}_a;l#b@D)_uwc"");
    characterReader0.advance();
    characterReader0.consumeTo(""rC}_a;l#b@D)_uwc"");
    characterReader0.consumeDigitSequence();
    assertEquals("""", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test6982() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""bdbd6h5iezbzms#f;+"");
    characterReader0.consumeLetterSequence();
    char[] charArray0 = new char[7];
    charArray0[0] = 'b';
    characterReader0.consumeToAny(charArray0);
    characterReader0.consumeLetterSequence();
    characterReader0.consumeAsString();
    characterReader0.consumeHexSequence();
    assertEquals("";+"", characterReader0.toString());
}",""
"String consumeHexSequence() {
    int start = pos;
    while (!isEmpty()) {
        char c = input.charAt(pos);
        if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
            pos++;
        else
            break;
    }
    return input.substring(start, pos);
}","public void test7083() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""rC}_a;l#b@D)_uwc"");
    String string0 = characterReader0.consumeHexSequence();
    assertEquals("""", string0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test7184() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""rC}_a;l#b@D)_uwc"");
    characterReader0.consumeLetterSequence();
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(""}_a;l#b@D)_uwc"", characterReader0.toString());
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
}","public void test7185() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""rC}_a;l#b@D)_uwc"");
    characterReader0.consumeLetterSequence();
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"String consumeLetterSequence() {
    int start = pos;
    while (!isEmpty()) {
        char c = input.charAt(pos);
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
            pos++;
        else
            break;
    }
    return input.substring(start, pos);
}","public void test7286() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("")sy=)>_FwLvb"");
    String string0 = characterReader0.consumeLetterSequence();
    assertEquals("""", string0);
}",""
"String consumeToAny(char... seq) {
    int start = pos;
    OUTER: while (!isEmpty()) {
        char c = input.charAt(pos);
        for (char seek : seq) {
            if (seek == c)
                break OUTER;
        }
        pos++;
    }
    return pos > start ? input.substring(start, pos) : """";
}","public void test7387() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("")sy=)>_FwLvb"");
    char[] charArray0 = new char[7];
    charArray0[4] = ')';
    String string0 = characterReader0.consumeToAny(charArray0);
    assertEquals("""", string0);
}",""
"String consumeTo(String seq) {
    int offset = input.indexOf(seq, pos);
    if (offset != -1) {
        String consumed = input.substring(pos, offset);
        pos += consumed.length();
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test7488() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.helper.Validate"");
    String string0 = characterReader0.consumeTo(""org.jsoup.helper.Validate"");
    assertEquals("""", string0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test7489() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.helper.Validate"");
    String string0 = characterReader0.consumeTo(""org.jsoup.helper.Validate"");
    assertEquals(""org.jsoup.helper.Validate"", characterReader0.toString());
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test7590() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    characterReader0.consumeTo(""opsGjde"");
    characterReader0.consumeLetterSequence();
    assertEquals("""", characterReader0.toString());
}",""
"String consumeAsString() {
    return input.substring(pos, pos++);
}","public void test7691() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.consume();
    // Undeclared exception!
    try {
        characterReader0.consumeAsString();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test7792() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""7"");
    characterReader0.consumeHexSequence();
    char char0 = characterReader0.current();
    assertEquals("""", characterReader0.toString());
}",""
"char current() {
    return isEmpty() ? EOF : input.charAt(pos);
}","public void test7793() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""7"");
    characterReader0.consumeHexSequence();
    char char0 = characterReader0.current();
    assertEquals('\uFFFF', char0);
}",""
"String consumeToEnd() {
    String data = input.substring(pos, input.length() - 1);
    pos = input.length();
    return data;
}","public void test7894() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""6!zy^?*=BxLN+>^&S\"""");
    String string0 = characterReader0.consumeToEnd();
    assertEquals(""6!zy^?*=BxLN+>^&S"", string0);
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');
}","public void test7895() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""6!zy^?*=BxLN+>^&S\"""");
    String string0 = characterReader0.consumeToEnd();
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"int pos() {
    return pos;
}","public void test7996() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.helper.Validate"");
    int int0 = characterReader0.pos();
    assertEquals(0, int0);
}",""
"String consumeToEnd() {
    String data = input.substring(pos, input.length() - 1);
    pos = input.length();
    return data;
}","public void test8097() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""O_j{lD'oz@"");
    String string0 = characterReader0.consumeToEnd();
    assertEquals(""O_j{lD'oz"", string0);
}",""
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = input.charAt(pos);
    return (c >= '0' && c <= '9');
}","public void test8098() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""O_j{lD'oz@"");
    String string0 = characterReader0.consumeToEnd();
    boolean boolean0 = characterReader0.matchesDigit();
    assertFalse(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test8199() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""6!zy^?*=BxLN+>^&S\"""");
    String string0 = characterReader0.toString();
    assertEquals(""6!zy^?*=BxLN+>^&S\"""", string0);
}",""
"char current() {
    return isEmpty() ? EOF : input.charAt(pos);
}","public void test82100() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""6!zy^?*=BxLN+>^&S\"""");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.current();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"boolean matches(String seq) {
    return input.startsWith(seq, pos);
}","public void test83101() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    boolean boolean0 = characterReader0.matches("""");
    assertTrue(boolean0);
}",""
"String consumeHexSequence() {
    int start = pos;
    while (!isEmpty()) {
        char c = input.charAt(pos);
        if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
            pos++;
        else
            break;
    }
    return input.substring(start, pos);
}","public void test84102() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.advance();
    // Undeclared exception!
    try {
        characterReader0.consumeHexSequence();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test85103() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.mark();
    assertEquals("""", characterReader0.toString());
}",""
"boolean matchesIgnoreCase(String seq) {
    return input.regionMatches(true, pos, seq, 0, seq.length());
}","public void test86104() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    boolean boolean0 = characterReader0.matchesIgnoreCase("""");
    assertTrue(boolean0);
}",""
"@Override
public String toString() {
    return input.substring(pos);
}","public void test87105() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.rewindToMark();
    assertEquals("""", characterReader0.toString());
}",""
