focal_method,test_prefix,docstring
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test000() throws Throwable {
    Tag tag0 = Tag.valueOf(""i5BtR6IA[g?Gz];(j#4"");
    Element element0 = new Element(tag0, """");
    Elements elements0 = element0.getElementsByAttributeValueMatching("".h?T2z*^,Pl%KuX'"", """");
    assertTrue(elements0.isEmpty());
}",""
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test011() throws Throwable {
    Tag tag0 = Tag.valueOf(""{sT*zNV"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""{sT*zNV"", attributes0);
    Elements elements0 = element0.getElementsByTag(""~Ob6,y4V$z_5+E<<W x"");
    assertTrue(elements0.isEmpty());
}",""
"public String toString() {
    return outerHtml();
}","public void test022() throws Throwable {
    Document document0 = new Document(""Z\""x%iJ&`M[0Y_* "");
    String string0 = document0.toString();
    assertEquals("""", string0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test033() throws Throwable {
    Document document0 = new Document("""");
    Element element0 = document0.prependText(""=OM"");
    assertEquals("""", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test044() throws Throwable {
    Document document0 = new Document(""s+"");
    Element element0 = document0.prepend("""");
    assertEquals(0, element0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test055() throws Throwable {
    Document document0 = new Document(""s+"");
    String string0 = document0.nodeName();
    assertEquals(""#document"", string0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test066() throws Throwable {
    Tag tag0 = Tag.valueOf(""MqLI;\"""");
    Element element0 = new Element(tag0, ""MqLI;\"""");
    Element element1 = element0.prependElement(""MqLI;\"""");
    assertEquals(0, element1.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public Element nextElementSibling() {
    if (parentNode == null)
        return null;
    List<Element> siblings = parent().children();
    Integer index = indexInList(this, siblings);
    Validate.notNull(index);
    if (siblings.size() > index + 1)
        return siblings.get(index + 1);
    else
        return null;
}","public void test067() throws Throwable {
    Tag tag0 = Tag.valueOf(""MqLI;\"""");
    Element element0 = new Element(tag0, ""MqLI;\"""");
    Element element1 = element0.prependElement(""MqLI;\"""");
    Element element2 = element1.after((Node) element0);
    Element element3 = element2.nextElementSibling();
    assertNotNull(element3);
}","/**
 * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s,
 * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.
 * <p/>
 * This is similar to {@link #nextSibling()}, but specifically finds only Elements
 * @return the next element, or null if there is no next element
 * @see #previousElementSibling()
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test068() throws Throwable {
    Tag tag0 = Tag.valueOf(""MqLI;\"""");
    Element element0 = new Element(tag0, ""MqLI;\"""");
    Element element1 = element0.prependElement(""MqLI;\"""");
    Element element2 = element1.after((Node) element0);
    Element element3 = element2.nextElementSibling();
    assertEquals(2, element3.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test079() throws Throwable {
    Document document0 = new Document(""textarea"");
    LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
    Element element0 = document0.insertChildren((-1), linkedHashSet0);
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String id() {
    String id = attr(""id"");
    return id == null ? """" : id;
}","public void test0810() throws Throwable {
    Tag tag0 = Tag.valueOf(""u.DPmaXvo'P"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""yu/]"", attributes0);
    String string0 = element0.id();
    assertEquals("""", string0);
}","/**
 * Get the {@code id} attribute of this element.
 *
 * @return The id attribute, if present, or an empty string if not.
 */"
"public String html() {
    StringBuilder accum = new StringBuilder();
    html(accum);
    return accum.toString().trim();
}","public void test0911() throws Throwable {
    Document document0 = new Document(""o"");
    String string0 = document0.html();
    assertEquals("""", string0);
}","/**
 * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return
 * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)
 *
 * @return String of HTML.
 * @see #outerHtml()
 */"
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test1012() throws Throwable {
    Document document0 = new Document(""kbd"");
    Elements elements0 = document0.getElementsMatchingText(""kbd"");
    assertTrue(elements0.isEmpty());
}",""
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test1113() throws Throwable {
    Document document0 = new Document(""#-^vIDi/"");
    Elements elements0 = document0.getElementsMatchingText("""");
    assertFalse(elements0.isEmpty());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1214() throws Throwable {
    Document document0 = new Document(""#-^vIDi/"");
    Pattern pattern0 = Pattern.compile("""", (-1));
    Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
    assertEquals(1, elements0.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1315() throws Throwable {
    Document document0 = new Document(""p^X8qT"");
    Element element0 = document0.appendText(""p^X8qT"");
    Elements elements0 = element0.getElementsContainingOwnText(""p^X8qT"");
    assertEquals(1, elements0.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1416() throws Throwable {
    Tag tag0 = Tag.valueOf(""P>"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""z@9R#W8%Q&dA}l\"""", attributes0);
    Elements elements0 = element0.getElementsByIndexLessThan(41);
    assertEquals(1, elements0.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1517() throws Throwable {
    Document document0 = new Document("""");
    Pattern pattern0 = Pattern.compile(""br"");
    Elements elements0 = document0.getElementsByAttributeValueMatching(""=_~59Q4Y6Kv"", pattern0);
    assertEquals(0, elements0.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1618() throws Throwable {
    Tag tag0 = Tag.valueOf(""9"");
    Element element0 = new Element(tag0, """");
    Elements elements0 = element0.getElementsByAttribute(""9"");
    assertEquals(0, elements0.size());
}",""
"@Override
public boolean equals(Object o) {
    return this == o;
}","public void test1719() throws Throwable {
    Document document0 = new Document(""s>"");
    boolean boolean0 = document0.equals(""s>"");
    assertFalse(boolean0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test1820() throws Throwable {
    Document document0 = new Document(""@sNz]"");
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Element element0 = document0.classNames((Set<String>) linkedHashSet0);
    assertEquals(0, element0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public String className() {
    return attr(""class"");
}","public void test1921() throws Throwable {
    Document document0 = new Document(""=6+\""|M&Us4"");
    String string0 = document0.className();
    assertEquals("""", string0);
}","/**
 * Gets the literal value of this element's ""class"" attribute, which may include multiple class names, space
 * separated. (E.g. on <code>&lt;div class=""header gray""></code> returns, ""<code>header gray</code>"")
 * @return The literal class attribute, or <b>empty string</b> if no class attribute set.
 */"
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test2022() throws Throwable {
    Document document0 = new Document(""#-^vIDi/"");
    Elements elements0 = document0.children();
    assertTrue(elements0.isEmpty());
}",""
"@Override
public String nodeName() {
    return tag.getName();
}","public void test2123() throws Throwable {
    Tag tag0 = Tag.valueOf(""["");
    Element element0 = new Element(tag0, ""["");
    Element element1 = element0.appendText(""["");
    Element element2 = element1.appendElement(""Children collection to be inserted must not be null."");
    assertEquals(""children collection to be inserted must not be null."", element2.nodeName());
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test2124() throws Throwable {
    Tag tag0 = Tag.valueOf(""["");
    Element element0 = new Element(tag0, ""["");
    Element element1 = element0.appendText(""["");
    Element element2 = element1.appendElement(""Children collection to be inserted must not be null."");
    assertEquals(1, element2.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test2225() throws Throwable {
    Document document0 = new Document(""@sNz]"");
    Element element0 = document0.appendElement(""id"");
    assertEquals(""id"", element0.nodeName());
}",""
"public QuirksMode quirksMode() {
    return quirksMode;
}","public void test2326() throws Throwable {
    Document document0 = new Document(""#-^vIDi/"");
    Document document1 = (Document) document0.addClass("""");
    assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
}",""
"@Override
public Element wrap(String html) {
    return (Element) super.wrap(html);
}","public void test2427() throws Throwable {
    Tag tag0 = Tag.valueOf(""R}&RQ^\""rV"");
    Element element0 = new Element(tag0, ""R}&RQ^\""rV"");
    // Undeclared exception!
    try {
        element0.wrap("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Wrap the supplied HTML around this element.
 *
 * @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 * @return this element, for chaining.
 */"
"public Element removeClass(String className) {
    Validate.notNull(className);
    Set<String> classes = classNames();
    classes.remove(className);
    classNames(classes);
    return this;
}","public void test2528() throws Throwable {
    Tag tag0 = Tag.valueOf(""org.jsoup.select.Elements"");
    Element element0 = new Element(tag0, ""Object must not be null"");
    // Undeclared exception!
    try {
        element0.removeClass((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Remove a class name from this element's {@code class} attribute.
 *     @param className class name to remove
 *     @return this element
 */"
"public Element prependChild(Node child) {
    Validate.notNull(child);
    addChildren(0, child);
    return this;
}","public void test2629() throws Throwable {
    Tag tag0 = Tag.valueOf(""pattern syntax error: "");
    Element element0 = new Element(tag0, ""pattern syntax error: "");
    // Undeclared exception!
    try {
        element0.prependChild((Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Add a node to the start of this element's children.
 *
 * @param child node to add.
 * @return this element, so that you can add more child nodes or elements.
 */"
"public Element prepend(String html) {
    Validate.notNull(html);
    List<Node> nodes = Parser.parseFragment(html, this, baseUri());
    addChildren(0, nodes.toArray(new Node[nodes.size()]));
    return this;
}","public void test2730() throws Throwable {
    Document document0 = new Document(""org.jsoup.nodes.Attributes$Dataset$EntrySet"");
    // Undeclared exception!
    try {
        document0.prepend((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children.
 * @param html HTML to add inside this element, before the existing HTML
 * @return this element
 * @see #html(String)
 */"
"void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {
    if (accum.length() > 0 && out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock())))
        indent(accum, depth, out);
    accum.append(""<"").append(tagName());
    attributes.html(accum, out);
    if (childNodes.isEmpty() && tag.isSelfClosing())
        accum.append("" />"");
    else
        accum.append("">"");
}","public void test2831() throws Throwable {
    Document document0 = new Document(""s+"");
    StringBuilder stringBuilder0 = new StringBuilder(""&5f5''UE"");
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    // Undeclared exception!
    try {
        document0.outerHtmlHead(stringBuilder0, (-1433506051), document_OutputSettings0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // width must be > 0
        //
        verifyException(""org.jsoup.helper.StringUtil"", e);
    }
}",""
"public Element lastElementSibling() {
    List<Element> siblings = parent().children();
    return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;
}","public void test2932() throws Throwable {
    Document document0 = new Document(""F>f9~V"");
    // Undeclared exception!
    try {
        document0.lastElementSibling();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}","/**
 * Gets the last element sibling of this element
 * @return the last sibling that is an element (aka the parent's last element child)
 */"
"public Elements getElementsMatchingText(Pattern pattern) {
    return Collector.collect(new Evaluator.Matches(pattern), this);
}","public void test3033() throws Throwable {
    Tag tag0 = Tag.valueOf(""P>"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""z@9R#W8%Q&dA}l\"""", attributes0);
    // Undeclared exception!
    try {
        element0.getElementsMatchingText((Pattern) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.select.Evaluator$Matches"", e);
    }
}","/**
 * Find elements whose text matches the supplied regular expression.
 * @param pattern regular expression to match text against
 * @return elements matching the supplied regular expression.
 * @see Element#text()
 */"
"public Elements getElementsByClass(String className) {
    Validate.notEmpty(className);
    return Collector.collect(new Evaluator.Class(className), this);
}","public void test3134() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.getElementsByClass("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that have this class, including or under this element. Case insensitive.
 * <p>
 * Elements can have multiple classes (e.g. {@code <div class=""header round first"">}. This method
 * checks each class, so you can find the above with {@code el.getElementsByClass(""header"");}.
 *
 * @param className the name of the class to search for.
 * @return elements with the supplied class name, empty if none
 * @see #hasClass(String)
 * @see #classNames()
 */"
"public Elements getElementsByAttributeValueNot(String key, String value) {
    return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);
}","public void test3235() throws Throwable {
    Tag tag0 = Tag.valueOf(""i5BtR6IA[g?Gz];(j#4"");
    Element element0 = new Element(tag0, """");
    // Undeclared exception!
    try {
        element0.getElementsByAttributeValueNot("""", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.
 *
 * @param key name of the attribute
 * @param value value of the attribute
 * @return elements that do not have a matching attribute
 */"
"public Elements getElementsByAttributeValueMatching(String key, String regex) {
    Pattern pattern;
    try {
        pattern = Pattern.compile(regex);
    } catch (PatternSyntaxException e) {
        throw new IllegalArgumentException(""Pattern syntax error: "" + regex, e);
    }
    return getElementsByAttributeValueMatching(key, pattern);
}","public void test3336() throws Throwable {
    Document document0 = new Document(""k0D>"");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueMatching(""VW1@_W)gAFiG68"", (String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Find elements that have attributes whose values match the supplied regular expression.
 * @param key name of the attribute
 * @param regex regular expression to match against attribute values. You can use <a href=""http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded"">embedded flags</a> (such as (?i) and (?m) to control regex options.
 * @return elements that have attributes matching this regular expression
 */"
"public Elements getElementsByAttributeValueMatching(String key, String regex) {
    Pattern pattern;
    try {
        pattern = Pattern.compile(regex);
    } catch (PatternSyntaxException e) {
        throw new IllegalArgumentException(""Pattern syntax error: "" + regex, e);
    }
    return getElementsByAttributeValueMatching(key, pattern);
}","public void test3437() throws Throwable {
    Document document0 = new Document(""$"");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueMatching(""%(\""jTc:_pQX^"", ""%(\""jTc:_pQX^"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Pattern syntax error: %(\""jTc:_pQX^
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}","/**
 * Find elements that have attributes whose values match the supplied regular expression.
 * @param key name of the attribute
 * @param regex regular expression to match against attribute values. You can use <a href=""http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded"">embedded flags</a> (such as (?i) and (?m) to control regex options.
 * @return elements that have attributes matching this regular expression
 */"
"public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {
    return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);
}","public void test3538() throws Throwable {
    Tag tag0 = Tag.valueOf(""00}nq%<"");
    Element element0 = new Element(tag0, ""m~"");
    // Undeclared exception!
    try {
        element0.getElementsByAttributeValueEnding((String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that have attributes that end with the value suffix. Case insensitive.
 *
 * @param key name of the attribute
 * @param valueSuffix end of the attribute value
 * @return elements that have attributes that end with the value suffix
 */"
"public Element firstElementSibling() {
    // todo: should firstSibling() exclude this?
    List<Element> siblings = parent().children();
    return siblings.size() > 1 ? siblings.get(0) : null;
}","public void test3639() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.firstElementSibling();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}","/**
 * Gets the first element sibling of this element.
 * @return the first sibling that is an element (aka the parent's first element child)
 */"
"public Element classNames(Set<String> classNames) {
    Validate.notNull(classNames);
    attributes.put(""class"", StringUtil.join(classNames, "" ""));
    return this;
}","public void test3740() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.classNames((Set<String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Set the element's {@code class} attribute to the supplied class names.
 *     @param classNames set of classes
 *     @return this element, for chaining
 */"
"public Element child(int index) {
    return children().get(index);
}","public void test3841() throws Throwable {
    Document document0 = new Document(""p>"");
    // Undeclared exception!
    try {
        document0.child(1);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Get a child element of this element, by its 0-based index number.
 * <p/>
 * Note that an element can have both mixed Nodes and Elements as children. This method inspects
 * a filtered list of children that are elements, and the index is based on that filtered list.
 *
 * @param index the index number of the element to retrieve
 * @return the child element, if it exists, otherwise throws an {@code IndexOutOfBoundsException}
 * @see #childNode(int)
 */"
"@Override
public Element before(Node node) {
    return (Element) super.before(node);
}","public void test3942() throws Throwable {
    Document document0 = new Document(""#-^vIDi/"");
    // Undeclared exception!
    try {
        document0.before((Node) document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified node into the DOM before this node (as a preceding sibling).
 * @param node to add before this element
 * @return this Element, for chaining
 * @see #after(Node)
 */"
"@Override
public Element after(Node node) {
    return (Element) super.after(node);
}","public void test4043() throws Throwable {
    Tag tag0 = Tag.valueOf(""}&6?W3q"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""}&6?W3q"", attributes0);
    Element element1 = element0.prependChild(element0);
    // Undeclared exception!
    try {
        element1.after((Node) element0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Insert the specified node into the DOM after this node (as a following sibling).
 * @param node to add after this element
 * @return this element, for chaining
 * @see #before(Node)
 */"
"@Override
public Element after(Node node) {
    return (Element) super.after(node);
}","public void test4144() throws Throwable {
    Tag tag0 = Tag.valueOf(""k^$vCI(V,^=m,v\""6@"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""k^$vCI(V,^=m,v\""6@"", attributes0);
    DataNode dataNode0 = new DataNode(""*W"", ""*W"");
    // Undeclared exception!
    try {
        element0.after((Node) dataNode0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified node into the DOM after this node (as a following sibling).
 * @param node to add after this element
 * @return this element, for chaining
 * @see #before(Node)
 */"
"@Override
public Element after(String html) {
    return (Element) super.after(html);
}","public void test4245() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.after(""org.jsoup.select.Evaluator$Matches"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified HTML into the DOM after this element (as a following sibling).
 *
 * @param html HTML to add after this element
 * @return this element, for chaining
 * @see #before(String)
 */"
"public Element(Tag tag, String baseUri, Attributes attributes) {
    super(baseUri, attributes);
    Validate.notNull(tag);
    this.tag = tag;
}","public void test4346() throws Throwable {
    Attributes attributes0 = new Attributes();
    Element element0 = null;
    try {
        element0 = new Element((Tag) null, (String) null, attributes0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Create a new, standalone Element. (Standalone in that is has no parent.)
 *
 * @param tag tag of this element
 * @param baseUri the base URI
 * @param attributes initial attributes
 * @see #appendChild(Node)
 * @see #appendElement(String)
 */"
"public Element(Tag tag, String baseUri) {
    this(tag, baseUri, new Attributes());
}","public void test4447() throws Throwable {
    Element element0 = null;
    try {
        element0 = new Element((Tag) null, ""g0*hk7HSCqb"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Create a new Element from a tag and a base URI.
 *
 * @param tag element tag
 * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty
 *            string, but not null.
 * @see Tag#valueOf(String)
 */"
"public boolean hasClass(String className) {
    Set<String> classNames = classNames();
    for (String name : classNames) {
        if (className.equalsIgnoreCase(name))
            return true;
    }
    return false;
}","public void test4548() throws Throwable {
    Tag tag0 = Tag.valueOf(""00}nq%<"");
    Element element0 = new Element(tag0, ""m~"");
    boolean boolean0 = element0.hasClass(""w9Bg@h*?}=2|L"");
    assertFalse(boolean0);
}","/**
 * Tests if this element has a class. Case insensitive.
 * @param className name of class to check for
 * @return true if it does, false if not
 */"
"public boolean hasText() {
    for (Node child : childNodes) {
        if (child instanceof TextNode) {
            TextNode textNode = (TextNode) child;
            if (!textNode.isBlank())
                return true;
        } else if (child instanceof Element) {
            Element el = (Element) child;
            if (el.hasText())
                return true;
        }
    }
    return false;
}","public void test4750() throws Throwable {
    Document document0 = new Document("""");
    boolean boolean0 = document0.hasText();
    assertFalse(boolean0);
}","/**
 *     Test if this element has any text content (that is not just whitespace).
 *     @return true if element has non-blank text content.
 */"
"public Element getElementById(String id) {
    Validate.notEmpty(id);
    Elements elements = Collector.collect(new Evaluator.Id(id), this);
    if (elements.size() > 0)
        return elements.get(0);
    else
        return null;
}","public void test4851() throws Throwable {
    Tag tag0 = Tag.valueOf(""R}&RQ^\""rV"");
    Element element0 = new Element(tag0, ""R}&RQ^\""rV"");
    Element element1 = element0.getElementById(""R}&RQ^\""rV"");
    assertNull(element1);
}","/**
 * Find an element by ID, including or under this element.
 * <p>
 * Note that this finds the first matching ID, starting with this element. If you search down from a different
 * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,
 * use {@link Document#getElementById(String)}
 * @param id The ID to search for.
 * @return The first matching element by ID, starting with this element, or null if none found.
 */"
"public Integer elementSiblingIndex() {
    if (parent() == null)
        return 0;
    return indexInList(this, parent().children());
}","public void test4952() throws Throwable {
    Document document0 = new Document(""kbd"");
    Integer integer0 = document0.elementSiblingIndex();
    assertEquals(0, (int) integer0);
}","/**
 * Get the list index of this element in its element sibling list. I.e. if this is the first element
 * sibling, returns 0.
 * @return position in element sibling list
 */"
"public Element previousElementSibling() {
    if (parentNode == null)
        return null;
    List<Element> siblings = parent().children();
    Integer index = indexInList(this, siblings);
    Validate.notNull(index);
    if (index > 0)
        return siblings.get(index - 1);
    else
        return null;
}","public void test5053() throws Throwable {
    Document document0 = new Document(""p^X8qT"");
    Element element0 = document0.previousElementSibling();
    assertNull(element0);
}","/**
 * Gets the previous element sibling of this element.
 * @return the previous element, or null if there is no previous element
 * @see #nextElementSibling()
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test5255() throws Throwable {
    Document document0 = new Document(""p>"");
    Elements elements0 = document0.getElementsByAttributeStarting(""p>"");
    assertEquals(0, elements0.size());
}",""
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test5356() throws Throwable {
    Document document0 = new Document("""");
    Elements elements0 = document0.getElementsContainingText(""=_~59Q4Y6Kv"");
    assertTrue(elements0.isEmpty());
}",""
"// DOM type methods
/**
 * Finds elements, including and recursively under this element, with the specified tag name.
 * @param tagName The tag name to search for (case insensitively).
 * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.
 */
public Elements getElementsByTag(String tagName) {
    Validate.notEmpty(tagName);
    tagName = tagName.toLowerCase().trim();
    return Collector.collect(new Evaluator.Tag(tagName), this);
}","public void test5457() throws Throwable {
    Document document0 = new Document(""form"");
    // Undeclared exception!
    try {
        document0.getElementsByTag("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test5558() throws Throwable {
    Document document0 = new Document(""form"");
    Elements elements0 = document0.getElementsByAttributeValueEnding(""org.jsoup.select.Collector$Accumulator"", ""form"");
    assertEquals(0, elements0.size());
}",""
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test5659() throws Throwable {
    Document document0 = new Document("""");
    Elements elements0 = document0.getElementsByIndexLessThan((-1070));
    assertTrue(elements0.isEmpty());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test5760() throws Throwable {
    Document document0 = new Document(""#-^vIDi/"");
    Elements elements0 = document0.parents();
    assertEquals(0, elements0.size());
}",""
"public Elements getElementsByAttributeValueMatching(String key, String regex) {
    Pattern pattern;
    try {
        pattern = Pattern.compile(regex);
    } catch (PatternSyntaxException e) {
        throw new IllegalArgumentException(""Pattern syntax error: "" + regex, e);
    }
    return getElementsByAttributeValueMatching(key, pattern);
}","public void test5861() throws Throwable {
    Document document0 = new Document(""s+"");
    document0.prependChild(document0);
    // Undeclared exception!
    document0.getElementsByAttributeValueMatching("""", """");
}","/**
 * Find elements that have attributes whose values match the supplied regular expression.
 * @param key name of the attribute
 * @param regex regular expression to match against attribute values. You can use <a href=""http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded"">embedded flags</a> (such as (?i) and (?m) to control regex options.
 * @return elements that have attributes matching this regular expression
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test5962() throws Throwable {
    Document document0 = new Document(""p^X8qT"");
    Elements elements0 = document0.getElementsContainingOwnText(""p^X8qT"");
    assertEquals(0, elements0.size());
}",""
"public Tag tag() {
    return tag;
}","public void test6063() throws Throwable {
    Tag tag0 = Tag.valueOf(""{sT*zNV"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""{sT*zNV"", attributes0);
    Tag tag1 = element0.tag();
    assertSame(tag1, tag0);
}","/**
 * Get the Tag for this element.
 *
 * @return the tag object
 */"
"@Override
public Element clone() {
    Element clone = (Element) super.clone();
    clone.classNames();
    return clone;
}","public void test6164() throws Throwable {
    Tag tag0 = Tag.valueOf(""["");
    Element element0 = new Element(tag0, ""["");
    Element element1 = element0.clone();
    assertNotSame(element1, element0);
}",""
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test6265() throws Throwable {
    Document document0 = new Document(""=6+\""|M&Us4"");
    Elements elements0 = document0.getElementsByAttributeValueStarting(""=6+\""|M&Us4"", ""=6+\""|M&Us4"");
    assertTrue(elements0.isEmpty());
}",""
"@Override
public Element before(String html) {
    return (Element) super.before(html);
}","public void test6366() throws Throwable {
    Document document0 = new Document(""|W.V'qlW*S"");
    // Undeclared exception!
    try {
        document0.before((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified HTML into the DOM before this element (as a preceding sibling).
 *
 * @param html HTML to add before this element
 * @return this element, for chaining
 * @see #after(String)
 */"
"@Override
public int hashCode() {
    // todo: fixup, not very useful
    int result = super.hashCode();
    result = 31 * result + (tag != null ? tag.hashCode() : 0);
    return result;
}","public void test6467() throws Throwable {
    Document document0 = new Document(""p^X8qT"");
    document0.hashCode();
}",""
"public Element nextElementSibling() {
    if (parentNode == null)
        return null;
    List<Element> siblings = parent().children();
    Integer index = indexInList(this, siblings);
    Validate.notNull(index);
    if (siblings.size() > index + 1)
        return siblings.get(index + 1);
    else
        return null;
}","public void test6568() throws Throwable {
    Document document0 = new Document(""Pattern syntax error: "");
    Element element0 = document0.prependElement(""Pattern syntax error: "");
    Element element1 = element0.nextElementSibling();
    assertNull(element1);
}","/**
 * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s,
 * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.
 * <p/>
 * This is similar to {@link #nextSibling()}, but specifically finds only Elements
 * @return the next element, or null if there is no next element
 * @see #previousElementSibling()
 */"
"public Element nextElementSibling() {
    if (parentNode == null)
        return null;
    List<Element> siblings = parent().children();
    Integer index = indexInList(this, siblings);
    Validate.notNull(index);
    if (siblings.size() > index + 1)
        return siblings.get(index + 1);
    else
        return null;
}","public void test6669() throws Throwable {
    Tag tag0 = Tag.valueOf(""00}nq%<"");
    Element element0 = new Element(tag0, ""m~"");
    Element element1 = element0.nextElementSibling();
    assertNull(element1);
}","/**
 * Gets the next sibling element of this element. E.g., if a {@code div} contains two {@code p}s,
 * the {@code nextElementSibling} of the first {@code p} is the second {@code p}.
 * <p/>
 * This is similar to {@link #nextSibling()}, but specifically finds only Elements
 * @return the next element, or null if there is no next element
 * @see #previousElementSibling()
 */"
"public Element insertChildren(int index, Collection<? extends Node> children) {
    Validate.notNull(children, ""Children collection to be inserted must not be null."");
    int currentSize = childNodeSize();
    // roll around
    if (index < 0)
        index += currentSize + 1;
    Validate.isTrue(index >= 0 && index <= currentSize, ""Insert position out of bounds."");
    ArrayList<Node> nodes = new ArrayList<Node>(children);
    Node[] nodeArray = nodes.toArray(new Node[nodes.size()]);
    addChildren(index, nodeArray);
    return this;
}","public void test6770() throws Throwable {
    Document document0 = new Document(""p^X8qT"");
    List<TextNode> list0 = document0.textNodes();
    // Undeclared exception!
    try {
        document0.insertChildren((-1535), list0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Insert position out of bounds.
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
 * right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.
 *
 * @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the
 * end
 * @param children child nodes to insert
 * @return this element, for chaining.
 */"
"public Element insertChildren(int index, Collection<? extends Node> children) {
    Validate.notNull(children, ""Children collection to be inserted must not be null."");
    int currentSize = childNodeSize();
    // roll around
    if (index < 0)
        index += currentSize + 1;
    Validate.isTrue(index >= 0 && index <= currentSize, ""Insert position out of bounds."");
    ArrayList<Node> nodes = new ArrayList<Node>(children);
    Node[] nodeArray = nodes.toArray(new Node[nodes.size()]);
    addChildren(index, nodeArray);
    return this;
}","public void test6871() throws Throwable {
    Tag tag0 = Tag.valueOf(""Tf?<%"");
    Element element0 = new Element(tag0, ""Tf?<%"");
    LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
    // Undeclared exception!
    try {
        element0.insertChildren(51, linkedList0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Insert position out of bounds.
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
 * right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.
 *
 * @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the
 * end
 * @param children child nodes to insert
 * @return this element, for chaining.
 */"
"@Override
public Element wrap(String html) {
    return (Element) super.wrap(html);
}","public void test6972() throws Throwable {
    Tag tag0 = Tag.valueOf(""9"");
    Element element0 = new Element(tag0, """");
    // Undeclared exception!
    try {
        element0.wrap(""uVq7c!VhQ "");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}","/**
 * Wrap the supplied HTML around this element.
 *
 * @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 * @return this element, for chaining.
 */"
"public Document normalise() {
    Element htmlEl = findFirstElementByTagName(""html"", this);
    if (htmlEl == null)
        htmlEl = appendElement(""html"");
    if (head() == null)
        htmlEl.prependElement(""head"");
    if (body() == null)
        htmlEl.appendElement(""body"");
    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care
    // of. do in inverse order to maintain text order.
    normaliseTextNodes(head());
    normaliseTextNodes(htmlEl);
    normaliseTextNodes(this);
    normaliseStructure(""head"", htmlEl);
    normaliseStructure(""body"", htmlEl);
    return this;
}","public void test7073() throws Throwable {
    Document document0 = new Document(""J<"");
    // Undeclared exception!
    try {
        document0.normalise();
        //  fail(""Expecting exception: NoSuchElementException"");
        // Unstable assertion
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 *     Normalise the document. This happens after the parse phase so generally does not need to be called.
 *     Moves any text content that is not in the body element into the body.
 *     @return this document after normalisation
 */"
"public Element html(String html) {
    empty();
    append(html);
    return this;
}","public void test7174() throws Throwable {
    Tag tag0 = Tag.valueOf(""oJf>2G,`c=WEV p"");
    Element element0 = new Element(tag0, ""u=XqjtMlP-["");
    // Undeclared exception!
    try {
        element0.html(""oJf>2G,`c=WEV p"");
        //  fail(""Expecting exception: NoSuchElementException"");
        // Unstable assertion
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 * Set this element's inner HTML. Clears the existing HTML first.
 * @param html HTML to parse and set into this element
 * @return this element
 * @see #append(String)
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test7275() throws Throwable {
    // Undeclared exception!
    try {
        Document.createShell("" />"");
        //  fail(""Expecting exception: NoSuchElementException"");
        // Unstable assertion
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
