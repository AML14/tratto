focal_method,test_prefix,docstring
"public String baseUri() {
    return baseUri;
}","public void test011() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-67), (byte) (-67));
    ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0, 0);
    Parser parser0 = Parser.htmlParser();
    Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, "", state="", parser0);
    assertEquals("", state="", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {
    Validate.isTrue(maxSize >= 0, ""maxSize must be 0 (unlimited) or larger"");
    final boolean capped = maxSize > 0;
    byte[] buffer = new byte[bufferSize];
    ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);
    int read;
    int remaining = maxSize;
    while (true) {
        read = inStream.read(buffer);
        if (read == -1)
            break;
        if (capped) {
            if (read > remaining) {
                outStream.write(buffer, 0, remaining);
                break;
            }
            remaining -= read;
        }
        outStream.write(buffer, 0, read);
    }
    ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());
    return byteData;
}","public void test022() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null, 50);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}","/**
 * Read the input stream into a byte buffer.
 * @param inStream the input stream to read from
 * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.
 * @return the filled byte buffer
 * @throws IOException if an exception occurs whilst reading from the input stream.
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {
    Validate.isTrue(maxSize >= 0, ""maxSize must be 0 (unlimited) or larger"");
    final boolean capped = maxSize > 0;
    byte[] buffer = new byte[bufferSize];
    ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);
    int read;
    int remaining = maxSize;
    while (true) {
        read = inStream.read(buffer);
        if (read == -1)
            break;
        if (capped) {
            if (read > remaining) {
                outStream.write(buffer, 0, remaining);
                break;
            }
            remaining -= read;
        }
        outStream.write(buffer, 0, read);
    }
    ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());
    return byteData;
}","public void test033() throws Throwable {
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    try {
        DataUtil.readToByteBuffer(mockFileInputStream0, 1234);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}","/**
 * Read the input stream into a byte buffer.
 * @param inStream the input stream to read from
 * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.
 * @return the filled byte buffer
 * @throws IOException if an exception occurs whilst reading from the input stream.
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {
    return readToByteBuffer(inStream, 0);
}","public void test044() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",""
"static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {
    return readToByteBuffer(inStream, 0);
}","public void test055() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
    try {
        DataUtil.readToByteBuffer(bufferedInputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",""
"// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support
// switching the chartset midstream when a meta http-equiv tag defines the charset.
static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    String docData;
    Document doc = null;
    if (charsetName == null) {
        // determine from meta. safe parse as UTF-8
        // look for <meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312""> or HTML5 <meta charset=""gb2312"">
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();
        if (meta != null) {
            // if not found, will keep utf-8 as best attempt
            String foundCharset;
            if (meta.hasAttr(""http-equiv"")) {
                foundCharset = getCharsetFromContentType(meta.attr(""content""));
            } else {
                foundCharset = meta.attr(""charset"");
            }
            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                // need to re-decode
                charsetName = foundCharset;
                byteData.rewind();
                docData = Charset.forName(foundCharset).decode(byteData).toString();
                doc = null;
            }
        }
    } else {
        // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
        docData = Charset.forName(charsetName).decode(byteData).toString();
    }
    if (doc == null) {
        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
        // into head mode
        if (docData.length() > 0 && docData.charAt(0) == 65279)
            docData = docData.substring(1);
        doc = parser.parseInput(docData, baseUri);
        doc.outputSettings().charset(charsetName);
    }
    return doc;
}","public void test066() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData((ByteBuffer) null, ""content"", ""content"", parser0);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // content
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",""
"// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support
// switching the chartset midstream when a meta http-equiv tag defines the charset.
static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    String docData;
    Document doc = null;
    if (charsetName == null) {
        // determine from meta. safe parse as UTF-8
        // look for <meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312""> or HTML5 <meta charset=""gb2312"">
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();
        if (meta != null) {
            // if not found, will keep utf-8 as best attempt
            String foundCharset;
            if (meta.hasAttr(""http-equiv"")) {
                foundCharset = getCharsetFromContentType(meta.attr(""content""));
            } else {
                foundCharset = meta.attr(""charset"");
            }
            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                // need to re-decode
                charsetName = foundCharset;
                byteData.rewind();
                docData = Charset.forName(foundCharset).decode(byteData).toString();
                doc = null;
            }
        }
    } else {
        // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
        docData = Charset.forName(charsetName).decode(byteData).toString();
    }
    if (doc == null) {
        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
        // into head mode
        if (docData.length() > 0 && docData.charAt(0) == 65279)
            docData = docData.substring(1);
        doc = parser.parseInput(docData, baseUri);
        doc.outputSettings().charset(charsetName);
    }
    return doc;
}","public void test077() throws Throwable {
    ByteBuffer byteBuffer0 = ByteBuffer.allocate(65279);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, ""^-zSS]J}30h"", ""name"", parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // ^-zSS]J}30h
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",""
"// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support
// switching the chartset midstream when a meta http-equiv tag defines the charset.
static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    String docData;
    Document doc = null;
    if (charsetName == null) {
        // determine from meta. safe parse as UTF-8
        // look for <meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312""> or HTML5 <meta charset=""gb2312"">
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();
        if (meta != null) {
            // if not found, will keep utf-8 as best attempt
            String foundCharset;
            if (meta.hasAttr(""http-equiv"")) {
                foundCharset = getCharsetFromContentType(meta.attr(""content""));
            } else {
                foundCharset = meta.attr(""charset"");
            }
            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                // need to re-decode
                charsetName = foundCharset;
                byteData.rewind();
                docData = Charset.forName(foundCharset).decode(byteData).toString();
                doc = null;
            }
        }
    } else {
        // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
        docData = Charset.forName(charsetName).decode(byteData).toString();
    }
    if (doc == null) {
        // there are times where there is a spurious byte-order-mark at the start of the text. Shouldn't be present
        // in utf-8. If after decoding, there is a BOM, strip it; otherwise will cause the parser to go straight
        // into head mode
        if (docData.length() > 0 && docData.charAt(0) == 65279)
            docData = docData.substring(1);
        doc = parser.parseInput(docData, baseUri);
        doc.outputSettings().charset(charsetName);
    }
    return doc;
}","public void test088() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    ByteBuffer byteBuffer0 = charset0.encode("""");
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, """", ""track"", (Parser) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test099() throws Throwable {
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) sequenceInputStream0, ""content"", (String) null, (Parser) null);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // content
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1010() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""m]0\""#[1w^^+,k'"", (String) null, parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // m]0\""#[1w^^+,k'
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1111() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, ""Sj`W[4f}"", ""57A=bIz*i\""|3<sq"", parser0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1212() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, (String) null, (String) null, parser0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // BaseURI must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1313() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-73), 1468);
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, "".oju3g&J;"", "".oju3g&J;"", parser0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test1414() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // org.jsoup.parser.TreeBuilder
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test1515() throws Throwable {
    byte[] byteArray0 = new byte[2];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, 0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""4XDE[>+9"", """");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // 4XDE[>+9
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test1616() throws Throwable {
    byte[] byteArray0 = new byte[5];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 1, (byte) 0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, """", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test1717() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
    try {
        DataUtil.load((InputStream) sequenceInputStream0, ""U.me~2\""aj1Fo.0RWD"", (String) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    FileInputStream inStream = null;
    try {
        inStream = new FileInputStream(in);
        ByteBuffer byteData = readToByteBuffer(inStream);
        return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
    } finally {
        if (inStream != null)
            inStream.close();
    }
}","public void test1818() throws Throwable {
    MockFile mockFile0 = new MockFile(""Dw/HV&+u`s"", ""Dw/HV&+u`s"");
    File file0 = MockFile.createTempFile(""Dw/HV&+u`s"", ""Dw/HV&+u`s"", (File) mockFile0);
    // Undeclared exception!
    try {
        DataUtil.load(file0, ""Dw/HV&+u`s"", ""Dw/HV&+u`s"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // Dw/HV&+u`s
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    FileInputStream inStream = null;
    try {
        inStream = new FileInputStream(in);
        ByteBuffer byteData = readToByteBuffer(inStream);
        return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
    } finally {
        if (inStream != null)
            inStream.close();
    }
}","public void test1919() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((File) null, ""U\""(.s>>e#=*>"", ""U\""(.s>>e#=*>"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    FileInputStream inStream = null;
    try {
        inStream = new FileInputStream(in);
        ByteBuffer byteData = readToByteBuffer(inStream);
        return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
    } finally {
        if (inStream != null)
            inStream.close();
    }
}","public void test2020() throws Throwable {
    File file0 = MockFile.createTempFile(""0sP_!$--=9D"", ""em"");
    // Undeclared exception!
    try {
        DataUtil.load(file0, """", ""em"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"static String getCharsetFromContentType(String contentType) {
    if (contentType == null)
        return null;
    Matcher m = charsetPattern.matcher(contentType);
    if (m.find()) {
        String charset = m.group(1).trim();
        if (Charset.isSupported(charset))
            return charset;
        charset = charset.toUpperCase(Locale.ENGLISH);
        if (Charset.isSupported(charset))
            return charset;
        // if our advanced charset matching fails.... we just take the default
    }
    return null;
}","public void test2121() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType((String) null);
    assertNull(string0);
}","/**
 * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
 * will kick in.)
 * @param contentType e.g. ""text/html; charset=EUC-JP""
 * @return ""EUC-JP"", or null if not found. Charset is trimmed and uppercased.
 */"
"static String getCharsetFromContentType(String contentType) {
    if (contentType == null)
        return null;
    Matcher m = charsetPattern.matcher(contentType);
    if (m.find()) {
        String charset = m.group(1).trim();
        if (Charset.isSupported(charset))
            return charset;
        charset = charset.toUpperCase(Locale.ENGLISH);
        if (Charset.isSupported(charset))
            return charset;
        // if our advanced charset matching fails.... we just take the default
    }
    return null;
}","public void test2222() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType(""charset"");
    assertNull(string0);
}","/**
 * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
 * will kick in.)
 * @param contentType e.g. ""text/html; charset=EUC-JP""
 * @return ""EUC-JP"", or null if not found. Charset is trimmed and uppercased.
 */"
"public String baseUri() {
    return baseUri;
}","public void test2323() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""width must be > 0"");
    assertEquals(""width must be > 0"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {
    Validate.isTrue(maxSize >= 0, ""maxSize must be 0 (unlimited) or larger"");
    final boolean capped = maxSize > 0;
    byte[] buffer = new byte[bufferSize];
    ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);
    int read;
    int remaining = maxSize;
    while (true) {
        read = inStream.read(buffer);
        if (read == -1)
            break;
        if (capped) {
            if (read > remaining) {
                outStream.write(buffer, 0, remaining);
                break;
            }
            remaining -= read;
        }
        outStream.write(buffer, 0, read);
    }
    ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());
    return byteData;
}","public void test2424() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null, (-1));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // maxSize must be 0 (unlimited) or larger
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Read the input stream into a byte buffer.
 * @param inStream the input stream to read from
 * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.
 * @return the filled byte buffer
 * @throws IOException if an exception occurs whilst reading from the input stream.
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    FileInputStream inStream = null;
    try {
        inStream = new FileInputStream(in);
        ByteBuffer byteData = readToByteBuffer(inStream);
        return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
    } finally {
        if (inStream != null)
            inStream.close();
    }
}","public void test2525() throws Throwable {
    File file0 = MockFile.createTempFile(""H(w:[2zrBD3"", ""H(w:[2zrBD3"");
    // Undeclared exception!
    try {
        DataUtil.load(file0, ""content"", ""maxSize must be 0 (unlimited) or larger"");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // content
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    FileInputStream inStream = null;
    try {
        inStream = new FileInputStream(in);
        ByteBuffer byteData = readToByteBuffer(inStream);
        return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
    } finally {
        if (inStream != null)
            inStream.close();
    }
}","public void test2626() throws Throwable {
    MockFile mockFile0 = new MockFile(""http-equiv"");
    try {
        DataUtil.load((File) mockFile0, ""http-equiv"", ""http-equiv"");
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public String baseUri() {
    return baseUri;
}","public void test2727() throws Throwable {
    File file0 = MockFile.createTempFile(""charset"", ""charset"");
    Document document0 = DataUtil.load(file0, (String) null, ""!"");
    assertEquals(""!"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2828() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, ""http-equiv"", ""http-equiv"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test2929() throws Throwable {
    Parser parser0 = Parser.xmlParser();
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
    try {
        DataUtil.load((InputStream) pushbackInputStream0, """", """", parser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Stream closed
        //
        verifyException(""java.io.BufferedInputStream"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
