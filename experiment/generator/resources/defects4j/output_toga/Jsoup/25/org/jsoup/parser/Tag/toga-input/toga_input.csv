focal_method,test_prefix,docstring
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test000() throws Throwable {
    Tag tag0 = Tag.valueOf(""title"");
    Tag tag1 = tag0.setSelfClosing();
    assertTrue(tag1.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test011() throws Throwable {
    Tag tag0 = Tag.valueOf(""img"");
    Tag tag1 = tag0.setSelfClosing();
    assertTrue(tag1.isInline());
}","/**
 * Gets if this tag is an inline tag.
 *
 * @return if this tag is an inline tag.
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test022() throws Throwable {
    Tag tag0 = Tag.valueOf(""div"");
    Tag tag1 = tag0.setSelfClosing();
    assertTrue(tag1.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test033() throws Throwable {
    Tag tag0 = Tag.valueOf(""title"");
    boolean boolean0 = tag0.preserveWhitespace();
    assertTrue(boolean0);
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean isEmpty() {
    return empty;
}","public void test044() throws Throwable {
    Tag tag0 = Tag.valueOf(""img"");
    boolean boolean0 = tag0.isEmpty();
    assertTrue(boolean0);
}","/**
 * Get if this is an empty tag
 *
 * @return if this is an empty tag
 */"
"public boolean isBlock() {
    return isBlock;
}","public void test055() throws Throwable {
    Tag tag0 = Tag.valueOf(""dl"");
    boolean boolean0 = tag0.isBlock();
    assertTrue(boolean0);
}","/**
 * Gets if this is a block tag.
 *
 * @return if block tag
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test066() throws Throwable {
    Tag tag0 = Tag.valueOf(""legend"");
    boolean boolean0 = tag0.formatAsBlock();
    assertFalse(boolean0);
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test077() throws Throwable {
    Tag tag0 = Tag.valueOf(""legend"");
    boolean boolean0 = tag0.canContainBlock();
    assertFalse(boolean0);
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public static Tag valueOf(String tagName) {
    Validate.notNull(tagName);
    tagName = tagName.trim().toLowerCase();
    Validate.notEmpty(tagName);
    synchronized (tags) {
        Tag tag = tags.get(tagName);
        if (tag == null) {
            // not defined: create default; go anywhere, do anything! (incl be inside a <p>)
            tag = new Tag(tagName);
            tag.isBlock = false;
            tag.canContainBlock = true;
        }
        return tag;
    }
}","public void test088() throws Throwable {
    // Undeclared exception!
    try {
        Tag.valueOf((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.
 * <p/>
 * Pre-defined tags (P, DIV etc) will be ==, but unknown tags are not registered and will only .equals().
 *
 * @param tagName Name of tag, e.g. ""p"". Case insensitive.
 * @return The tag, either defined or new generic.
 */"
"public boolean isEmpty() {
    return empty;
}","public void test099() throws Throwable {
    Tag tag0 = Tag.valueOf(""title"");
    boolean boolean0 = tag0.isEmpty();
    assertFalse(boolean0);
}","/**
 * Get if this is an empty tag
 *
 * @return if this is an empty tag
 */"
"@Override
public int hashCode() {
    int result = tagName.hashCode();
    result = 31 * result + (isBlock ? 1 : 0);
    result = 31 * result + (formatAsBlock ? 1 : 0);
    result = 31 * result + (canContainBlock ? 1 : 0);
    result = 31 * result + (canContainInline ? 1 : 0);
    result = 31 * result + (empty ? 1 : 0);
    result = 31 * result + (selfClosing ? 1 : 0);
    result = 31 * result + (preserveWhitespace ? 1 : 0);
    return result;
}","public void test1010() throws Throwable {
    Tag tag0 = Tag.valueOf(""meta"");
    tag0.hashCode();
}",""
"@Override
public int hashCode() {
    int result = tagName.hashCode();
    result = 31 * result + (isBlock ? 1 : 0);
    result = 31 * result + (formatAsBlock ? 1 : 0);
    result = 31 * result + (canContainBlock ? 1 : 0);
    result = 31 * result + (canContainInline ? 1 : 0);
    result = 31 * result + (empty ? 1 : 0);
    result = 31 * result + (selfClosing ? 1 : 0);
    result = 31 * result + (preserveWhitespace ? 1 : 0);
    return result;
}","public void test1111() throws Throwable {
    Tag tag0 = Tag.valueOf(""title"");
    tag0.hashCode();
}",""
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test1212() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    tag0.hashCode();
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean isBlock() {
    return isBlock;
}","public void test1213() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    tag0.hashCode();
    assertFalse(tag0.isBlock());
}","/**
 * Gets if this is a block tag.
 *
 * @return if block tag
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test1214() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    tag0.hashCode();
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test1215() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    tag0.hashCode();
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test1216() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    tag0.hashCode();
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test1217() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    tag0.hashCode();
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test1318() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    Tag tag1 = Tag.valueOf(""4"");
    assertFalse(tag1.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test1319() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    Tag tag1 = Tag.valueOf(""4"");
    tag1.setSelfClosing();
    tag0.setSelfClosing();
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(tag1.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Tag))
        return false;
    Tag tag = (Tag) o;
    if (canContainBlock != tag.canContainBlock)
        return false;
    if (canContainInline != tag.canContainInline)
        return false;
    if (empty != tag.empty)
        return false;
    if (formatAsBlock != tag.formatAsBlock)
        return false;
    if (isBlock != tag.isBlock)
        return false;
    if (preserveWhitespace != tag.preserveWhitespace)
        return false;
    if (selfClosing != tag.selfClosing)
        return false;
    if (!tagName.equals(tag.tagName))
        return false;
    return true;
}","public void test1320() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    Tag tag1 = Tag.valueOf(""4"");
    tag1.setSelfClosing();
    tag0.setSelfClosing();
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(boolean0);
}",""
"public boolean isInline() {
    return !isBlock;
}","public void test1421() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    Tag tag1 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(tag1.isInline());
}","/**
 * Gets if this tag is an inline tag.
 *
 * @return if this tag is an inline tag.
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test1422() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    Tag tag1 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(tag1.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test1423() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    Tag tag1 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag1.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test1424() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    Tag tag1 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag1.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Tag))
        return false;
    Tag tag = (Tag) o;
    if (canContainBlock != tag.canContainBlock)
        return false;
    if (canContainInline != tag.canContainInline)
        return false;
    if (empty != tag.empty)
        return false;
    if (formatAsBlock != tag.formatAsBlock)
        return false;
    if (isBlock != tag.isBlock)
        return false;
    if (preserveWhitespace != tag.preserveWhitespace)
        return false;
    if (selfClosing != tag.selfClosing)
        return false;
    if (!tagName.equals(tag.tagName))
        return false;
    return true;
}","public void test1425() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    Tag tag1 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(boolean0);
}",""
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test1426() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    Tag tag1 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(tag1.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test1427() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    Tag tag1 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag1.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Tag))
        return false;
    Tag tag = (Tag) o;
    if (canContainBlock != tag.canContainBlock)
        return false;
    if (canContainInline != tag.canContainInline)
        return false;
    if (empty != tag.empty)
        return false;
    if (formatAsBlock != tag.formatAsBlock)
        return false;
    if (isBlock != tag.isBlock)
        return false;
    if (preserveWhitespace != tag.preserveWhitespace)
        return false;
    if (selfClosing != tag.selfClosing)
        return false;
    if (!tagName.equals(tag.tagName))
        return false;
    return true;
}","public void test1528() throws Throwable {
    Tag tag0 = Tag.valueOf(""title"");
    Tag tag1 = Tag.valueOf(""h6"");
    boolean boolean0 = tag0.equals(tag1);
    assertFalse(boolean0);
}",""
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Tag))
        return false;
    Tag tag = (Tag) o;
    if (canContainBlock != tag.canContainBlock)
        return false;
    if (canContainInline != tag.canContainInline)
        return false;
    if (empty != tag.empty)
        return false;
    if (formatAsBlock != tag.formatAsBlock)
        return false;
    if (isBlock != tag.isBlock)
        return false;
    if (preserveWhitespace != tag.preserveWhitespace)
        return false;
    if (selfClosing != tag.selfClosing)
        return false;
    if (!tagName.equals(tag.tagName))
        return false;
    return true;
}","public void test1629() throws Throwable {
    Tag tag0 = Tag.valueOf(""@,_LPe[ECX"");
    Tag tag1 = Tag.valueOf(""thead"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(boolean0);
}",""
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test1630() throws Throwable {
    Tag tag0 = Tag.valueOf(""@,_LPe[ECX"");
    Tag tag1 = Tag.valueOf(""thead"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test1631() throws Throwable {
    Tag tag0 = Tag.valueOf(""@,_LPe[ECX"");
    Tag tag1 = Tag.valueOf(""thead"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test1632() throws Throwable {
    Tag tag0 = Tag.valueOf(""@,_LPe[ECX"");
    Tag tag1 = Tag.valueOf(""thead"");
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test1633() throws Throwable {
    Tag tag0 = Tag.valueOf(""@,_LPe[ECX"");
    Tag tag1 = Tag.valueOf(""thead"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test1634() throws Throwable {
    Tag tag0 = Tag.valueOf(""@,_LPe[ECX"");
    Tag tag1 = Tag.valueOf(""thead"");
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(tag0.isInline());
}","/**
 * Gets if this tag is an inline tag.
 *
 * @return if this tag is an inline tag.
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test1635() throws Throwable {
    Tag tag0 = Tag.valueOf(""@,_LPe[ECX"");
    Tag tag1 = Tag.valueOf(""thead"");
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test1736() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    Tag tag1 = Tag.valueOf(""P"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test1737() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    Tag tag1 = Tag.valueOf(""P"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Tag))
        return false;
    Tag tag = (Tag) o;
    if (canContainBlock != tag.canContainBlock)
        return false;
    if (canContainInline != tag.canContainInline)
        return false;
    if (empty != tag.empty)
        return false;
    if (formatAsBlock != tag.formatAsBlock)
        return false;
    if (isBlock != tag.isBlock)
        return false;
    if (preserveWhitespace != tag.preserveWhitespace)
        return false;
    if (selfClosing != tag.selfClosing)
        return false;
    if (!tagName.equals(tag.tagName))
        return false;
    return true;
}","public void test1738() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    Tag tag1 = Tag.valueOf(""P"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(boolean0);
}",""
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test1739() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    Tag tag1 = Tag.valueOf(""P"");
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test1740() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    Tag tag1 = Tag.valueOf(""P"");
    boolean boolean0 = tag1.equals(tag0);
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean isBlock() {
    return isBlock;
}","public void test1741() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    Tag tag1 = Tag.valueOf(""P"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag0.isBlock());
}","/**
 * Gets if this is a block tag.
 *
 * @return if block tag
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test1742() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    Tag tag1 = Tag.valueOf(""P"");
    boolean boolean0 = tag1.equals(tag0);
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Tag))
        return false;
    Tag tag = (Tag) o;
    if (canContainBlock != tag.canContainBlock)
        return false;
    if (canContainInline != tag.canContainInline)
        return false;
    if (empty != tag.empty)
        return false;
    if (formatAsBlock != tag.formatAsBlock)
        return false;
    if (isBlock != tag.isBlock)
        return false;
    if (preserveWhitespace != tag.preserveWhitespace)
        return false;
    if (selfClosing != tag.selfClosing)
        return false;
    if (!tagName.equals(tag.tagName))
        return false;
    return true;
}","public void test1843() throws Throwable {
    Tag tag0 = Tag.valueOf(""device"");
    Tag tag1 = Tag.valueOf(""time"");
    boolean boolean0 = tag0.equals(tag1);
    assertFalse(boolean0);
}",""
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Tag))
        return false;
    Tag tag = (Tag) o;
    if (canContainBlock != tag.canContainBlock)
        return false;
    if (canContainInline != tag.canContainInline)
        return false;
    if (empty != tag.empty)
        return false;
    if (formatAsBlock != tag.formatAsBlock)
        return false;
    if (isBlock != tag.isBlock)
        return false;
    if (preserveWhitespace != tag.preserveWhitespace)
        return false;
    if (selfClosing != tag.selfClosing)
        return false;
    if (!tagName.equals(tag.tagName))
        return false;
    return true;
}","public void test1944() throws Throwable {
    Tag tag0 = Tag.valueOf(""title"");
    Tag tag1 = Tag.valueOf(""param"");
    boolean boolean0 = tag0.equals(tag1);
    assertFalse(boolean0);
}",""
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test2045() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.equals(""qmW[f)a/#V"");
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Tag))
        return false;
    Tag tag = (Tag) o;
    if (canContainBlock != tag.canContainBlock)
        return false;
    if (canContainInline != tag.canContainInline)
        return false;
    if (empty != tag.empty)
        return false;
    if (formatAsBlock != tag.formatAsBlock)
        return false;
    if (isBlock != tag.isBlock)
        return false;
    if (preserveWhitespace != tag.preserveWhitespace)
        return false;
    if (selfClosing != tag.selfClosing)
        return false;
    if (!tagName.equals(tag.tagName))
        return false;
    return true;
}","public void test2046() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.equals(""qmW[f)a/#V"");
    assertFalse(boolean0);
}",""
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test2047() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.equals(""qmW[f)a/#V"");
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test2048() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.equals(""qmW[f)a/#V"");
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test2049() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.equals(""qmW[f)a/#V"");
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test2050() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.equals(""qmW[f)a/#V"");
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test2051() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.equals(""qmW[f)a/#V"");
    assertTrue(tag0.isInline());
}","/**
 * Gets if this tag is an inline tag.
 *
 * @return if this tag is an inline tag.
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test2152() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.equals(tag0);
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test2153() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.equals(tag0);
    assertTrue(tag0.isInline());
}","/**
 * Gets if this tag is an inline tag.
 *
 * @return if this tag is an inline tag.
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test2154() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.equals(tag0);
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test2155() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.equals(tag0);
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test2156() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.equals(tag0);
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Tag))
        return false;
    Tag tag = (Tag) o;
    if (canContainBlock != tag.canContainBlock)
        return false;
    if (canContainInline != tag.canContainInline)
        return false;
    if (empty != tag.empty)
        return false;
    if (formatAsBlock != tag.formatAsBlock)
        return false;
    if (isBlock != tag.isBlock)
        return false;
    if (preserveWhitespace != tag.preserveWhitespace)
        return false;
    if (selfClosing != tag.selfClosing)
        return false;
    if (!tagName.equals(tag.tagName))
        return false;
    return true;
}","public void test2157() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.equals(tag0);
    assertTrue(boolean0);
}",""
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test2158() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.equals(tag0);
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test2259() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Tag))
        return false;
    Tag tag = (Tag) o;
    if (canContainBlock != tag.canContainBlock)
        return false;
    if (canContainInline != tag.canContainInline)
        return false;
    if (empty != tag.empty)
        return false;
    if (formatAsBlock != tag.formatAsBlock)
        return false;
    if (isBlock != tag.isBlock)
        return false;
    if (preserveWhitespace != tag.preserveWhitespace)
        return false;
    if (selfClosing != tag.selfClosing)
        return false;
    if (!tagName.equals(tag.tagName))
        return false;
    return true;
}","public void test2260() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    Tag tag1 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    tag0.setSelfClosing();
    boolean boolean0 = tag0.equals(tag1);
    assertFalse(boolean0);
}",""
"public static boolean isKnownTag(String tagName) {
    return tags.containsKey(tagName);
}","public void test2361() throws Throwable {
    boolean boolean0 = Tag.isKnownTag(""tr"");
    assertTrue(boolean0);
}","/**
 * Check if this tagname is a known tag.
 *
 * @param tagName name of tag
 * @return if known HTML tag
 */"
"public static boolean isKnownTag(String tagName) {
    return tags.containsKey(tagName);
}","public void test2462() throws Throwable {
    boolean boolean0 = Tag.isKnownTag("".K0"");
    assertFalse(boolean0);
}","/**
 * Check if this tagname is a known tag.
 *
 * @param tagName name of tag
 * @return if known HTML tag
 */"
"public boolean isKnownTag() {
    return tags.containsKey(tagName);
}","public void test2563() throws Throwable {
    Tag tag0 = Tag.valueOf(""title"");
    boolean boolean0 = tag0.isKnownTag();
    assertTrue(boolean0);
}","/**
 * Get if this is a pre-defined tag, or was auto created on parsing.
 *
 * @return if a known tag
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test2664() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isKnownTag();
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test2665() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isKnownTag();
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean isKnownTag() {
    return tags.containsKey(tagName);
}","public void test2666() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isKnownTag();
    assertFalse(boolean0);
}","/**
 * Get if this is a pre-defined tag, or was auto created on parsing.
 *
 * @return if a known tag
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test2667() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isKnownTag();
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test2668() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isKnownTag();
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean isBlock() {
    return isBlock;
}","public void test2669() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isKnownTag();
    assertFalse(tag0.isBlock());
}","/**
 * Gets if this is a block tag.
 *
 * @return if block tag
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test2670() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isKnownTag();
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test2771() throws Throwable {
    Tag tag0 = Tag.valueOf(""U{`I:]TtR#tRkv"");
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test2772() throws Throwable {
    Tag tag0 = Tag.valueOf(""U{`I:]TtR#tRkv"");
    tag0.setSelfClosing();
    boolean boolean0 = tag0.isSelfClosing();
    assertTrue(boolean0);
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test2873() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isSelfClosing();
    assertTrue(tag0.isInline());
}","/**
 * Gets if this tag is an inline tag.
 *
 * @return if this tag is an inline tag.
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test2874() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isSelfClosing();
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test2875() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isSelfClosing();
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test2876() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isSelfClosing();
    assertFalse(boolean0);
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test2877() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isSelfClosing();
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test2878() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isSelfClosing();
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test2979() throws Throwable {
    Tag tag0 = Tag.valueOf(""meta"");
    boolean boolean0 = tag0.isSelfClosing();
    assertTrue(boolean0);
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test3080() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    boolean boolean0 = tag0.isData();
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test3081() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    boolean boolean0 = tag0.isData();
    assertFalse(boolean0);
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test3082() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    boolean boolean0 = tag0.isData();
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test3083() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    boolean boolean0 = tag0.isData();
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test3084() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    boolean boolean0 = tag0.isData();
    assertTrue(tag0.isInline());
}","/**
 * Gets if this tag is an inline tag.
 *
 * @return if this tag is an inline tag.
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test3085() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    boolean boolean0 = tag0.isData();
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test3186() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isInline();
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test3187() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isInline();
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test3188() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isInline();
    assertTrue(boolean0);
}","/**
 * Gets if this tag is an inline tag.
 *
 * @return if this tag is an inline tag.
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test3189() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isInline();
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test3190() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isInline();
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test3191() throws Throwable {
    Tag tag0 = Tag.valueOf(""#|o*(7LY^}'R#m4))"");
    boolean boolean0 = tag0.isInline();
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test3292() throws Throwable {
    Tag tag0 = Tag.valueOf(""fieldset"");
    boolean boolean0 = tag0.isInline();
    assertFalse(boolean0);
}","/**
 * Gets if this tag is an inline tag.
 *
 * @return if this tag is an inline tag.
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test3393() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    boolean boolean0 = tag0.canContainBlock();
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test3394() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    boolean boolean0 = tag0.canContainBlock();
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test3395() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    boolean boolean0 = tag0.canContainBlock();
    assertTrue(boolean0);
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test3396() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    boolean boolean0 = tag0.canContainBlock();
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test3397() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    boolean boolean0 = tag0.canContainBlock();
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test3398() throws Throwable {
    Tag tag0 = Tag.valueOf(""c7o"");
    boolean boolean0 = tag0.canContainBlock();
    assertTrue(tag0.isInline());
}","/**
 * Gets if this tag is an inline tag.
 *
 * @return if this tag is an inline tag.
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test3499() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.isBlock();
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test34100() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.isBlock();
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean isBlock() {
    return isBlock;
}","public void test34101() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.isBlock();
    assertFalse(boolean0);
}","/**
 * Gets if this is a block tag.
 *
 * @return if block tag
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test34102() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.isBlock();
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test34103() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.isBlock();
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test34104() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.isBlock();
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public String toString() {
    return tagName;
}","public void test35105() throws Throwable {
    Tag tag0 = Tag.valueOf(""title"");
    String string0 = tag0.toString();
    assertEquals(""title"", string0);
}",""
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test36106() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    tag0.getName();
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test36107() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    tag0.getName();
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test36108() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    tag0.getName();
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test36109() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    tag0.getName();
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test36110() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    tag0.getName();
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean isBlock() {
    return isBlock;
}","public void test36111() throws Throwable {
    Tag tag0 = Tag.valueOf(""="");
    tag0.getName();
    assertFalse(tag0.isBlock());
}","/**
 * Gets if this is a block tag.
 *
 * @return if block tag
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test37112() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.formatAsBlock();
    assertFalse(tag0.preserveWhitespace());
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test37113() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.formatAsBlock();
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test37114() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.formatAsBlock();
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test37115() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.formatAsBlock();
    assertTrue(tag0.isInline());
}","/**
 * Gets if this tag is an inline tag.
 *
 * @return if this tag is an inline tag.
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test37116() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.formatAsBlock();
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test37117() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.formatAsBlock();
    assertTrue(boolean0);
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public static Tag valueOf(String tagName) {
    Validate.notNull(tagName);
    tagName = tagName.trim().toLowerCase();
    Validate.notEmpty(tagName);
    synchronized (tags) {
        Tag tag = tags.get(tagName);
        if (tag == null) {
            // not defined: create default; go anywhere, do anything! (incl be inside a <p>)
            tag = new Tag(tagName);
            tag.isBlock = false;
            tag.canContainBlock = true;
        }
        return tag;
    }
}","public void test38118() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    assertNotNull(tag0);
}","/**
 * Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.
 * <p/>
 * Pre-defined tags (P, DIV etc) will be ==, but unknown tags are not registered and will only .equals().
 *
 * @param tagName Name of tag, e.g. ""p"". Case insensitive.
 * @return The tag, either defined or new generic.
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test38119() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.preserveWhitespace();
    assertTrue(tag0.canContainBlock());
}","/**
 * Gets if this tag can contain block tags.
 *
 * @return if tag can contain block tags
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test38120() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.preserveWhitespace();
    assertFalse(tag0.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test38121() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.preserveWhitespace();
    assertFalse(boolean0);
}","/**
 * Get if this tag should preserve whitespace within child text nodes.
 *
 * @return if preserve whitepace
 */"
"public boolean formatAsBlock() {
    return formatAsBlock;
}","public void test38122() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.preserveWhitespace();
    assertTrue(tag0.formatAsBlock());
}","/**
 * Gets if this tag should be formatted as a block (or as inline)
 *
 * @return if should be formatted as block or inline
 */"
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test38123() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.preserveWhitespace();
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 *
 * @return if this tag should be output as self closing.
 */"
"public boolean isBlock() {
    return isBlock;
}","public void test38124() throws Throwable {
    Tag tag0 = Tag.valueOf(""qmW[f)a/#V"");
    boolean boolean0 = tag0.preserveWhitespace();
    assertFalse(tag0.isBlock());
}","/**
 * Gets if this is a block tag.
 *
 * @return if block tag
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test39125() throws Throwable {
    Tag tag0 = Tag.valueOf(""device"");
    boolean boolean0 = tag0.isData();
    assertFalse(boolean0);
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean isEmpty() {
    return empty;
}","public void test39126() throws Throwable {
    Tag tag0 = Tag.valueOf(""device"");
    boolean boolean0 = tag0.isData();
    assertTrue(tag0.isEmpty());
}","/**
 * Get if this is an empty tag
 *
 * @return if this is an empty tag
 */"
