focal_method,test_prefix,docstring
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test000() throws Throwable {
    Document document0 = new Document(""PARAM"");
    Element element0 = document0.createElement(""PARAM"");
    Elements elements0 = Selector.select(""PARAM"", element0);
    assertFalse(elements0.isEmpty());
}",""
"public static Elements select(String query, Iterable<Element> roots) {
    Validate.notEmpty(query);
    Validate.notNull(roots);
    LinkedHashSet<Element> elements = new LinkedHashSet<Element>();
    for (Element root : roots) {
        elements.addAll(select(query, root));
    }
    return new Elements(elements);
}","public void test011() throws Throwable {
    Tag tag0 = Tag.valueOf(""A9"");
    Element element0 = new Element(tag0, ""A9"");
    Pattern pattern0 = Pattern.compile(""^"", 32);
    Elements elements0 = element0.getElementsMatchingText(pattern0);
    Elements elements1 = Selector.select(""A9"", (Iterable<Element>) elements0);
    assertNotSame(elements1, elements0);
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param roots root elements to descend into
 *     @return matching elements, empty if not
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test022() throws Throwable {
    Document document0 = Document.createShell(""MENU"");
    Elements elements0 = document0.getElementsByAttributeValueNot(""1V}\""VycY"", ""1V}\""VycY"");
    Elements elements1 = Selector.select(""MENU"", (Iterable<Element>) elements0);
    Elements elements2 = Selector.filterOut(elements0, elements1);
    assertEquals(4, elements2.size());
}",""
"public static Elements select(String query, Element root) {
    return new Selector(query, root).select();
}","public void test033() throws Throwable {
    Document document0 = Document.createShell(""O=(3KH.9.)(>0P*"");
    Element element0 = document0.prependChild(document0);
    // Undeclared exception!
    Selector.select(""NOSCRIPT"", element0);
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param root root element to descend into
 *     @return matching elements, empty if not
 */"
"public static Elements select(String query, Iterable<Element> roots) {
    Validate.notEmpty(query);
    Validate.notNull(roots);
    LinkedHashSet<Element> elements = new LinkedHashSet<Element>();
    for (Element root : roots) {
        elements.addAll(select(query, root));
    }
    return new Elements(elements);
}","public void test044() throws Throwable {
    Document document0 = new Document(""?+b"");
    Elements elements0 = document0.getAllElements();
    // Undeclared exception!
    try {
        Selector.select(""?+b"", (Iterable<Element>) elements0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Could not parse query '?+b': unexpected token at '?+b'
        //
        verifyException(""org.jsoup.select.Selector"", e);
    }
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param roots root elements to descend into
 *     @return matching elements, empty if not
 */"
"public static Elements select(String query, Iterable<Element> roots) {
    Validate.notEmpty(query);
    Validate.notNull(roots);
    LinkedHashSet<Element> elements = new LinkedHashSet<Element>();
    for (Element root : roots) {
        elements.addAll(select(query, root));
    }
    return new Elements(elements);
}","public void test055() throws Throwable {
    Document document0 = Document.createShell("":M."");
    Element element0 = document0.text("",!iyHx;LGjoGE"");
    Pattern pattern0 = Pattern.compile("",!iyHx;LGjoGE"", 856);
    Elements elements0 = element0.getElementsMatchingText(pattern0);
    LinkedList<Element> linkedList0 = new LinkedList<Element>(elements0);
    // Undeclared exception!
    try {
        Selector.select("",!iyHx;LGjoGE"", (Iterable<Element>) linkedList0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unknown combinator: ,
        //
        verifyException(""org.jsoup.select.Selector"", e);
    }
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param roots root elements to descend into
 *     @return matching elements, empty if not
 */"
"// exclude set. package open so that Elements can implement .not() selector.
static Elements filterOut(Collection<Element> elements, Collection<Element> outs) {
    Elements output = new Elements();
    for (Element el : elements) {
        boolean found = false;
        for (Element out : outs) {
            if (el.equals(out)) {
                found = true;
                break;
            }
        }
        if (!found)
            output.add(el);
    }
    return output;
}","public void test066() throws Throwable {
    // Undeclared exception!
    try {
        Selector.filterOut((Collection<Element>) null, (Collection<Element>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.select.Selector"", e);
    }
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test088() throws Throwable {
    Document document0 = Document.createShell(""O=(3KH.9.)(>0P*"");
    Elements elements0 = document0.getAllElements();
    Elements elements1 = Selector.filterOut(elements0, elements0);
    assertEquals(0, elements1.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test099() throws Throwable {
    Document document0 = Document.createShell(""O=(3KH.9.)(>0P*"");
    Elements elements0 = Selector.select(""N~SCRIPT"", (Element) document0);
    assertEquals(0, elements0.size());
}",""
"public static Elements select(String query, Element root) {
    return new Selector(query, root).select();
}","public void test1010() throws Throwable {
    Document document0 = Document.createShell("":has(el) subselect must not be empty"");
    // Undeclared exception!
    try {
        Selector.select(""wu[sx="", (Element) document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param root root element to descend into
 *     @return matching elements, empty if not
 */"
"public static Elements select(String query, Element root) {
    return new Selector(query, root).select();
}","public void test1111() throws Throwable {
    Document document0 = Document.createShell(""MENU"");
    // Undeclared exception!
    try {
        Selector.select(""F7|(2,|H>|~Rnbe!9`"", (Element) document0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Could not parse query 'F7|(2,|H>|~Rnbe!9`': unexpected token at '(2,|H>|~Rnbe!9`'
        //
        verifyException(""org.jsoup.select.Selector"", e);
    }
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param root root element to descend into
 *     @return matching elements, empty if not
 */"
"public static Elements select(String query, Element root) {
    return new Selector(query, root).select();
}","public void test1212() throws Throwable {
    Document document0 = new Document(""Kq.)gNG^9HEwi/w7LcC"");
    // Undeclared exception!
    try {
        Selector.select("":matchesOwn("", (Element) document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // :matches(regex) query must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param root root element to descend into
 *     @return matching elements, empty if not
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1313() throws Throwable {
    Document document0 = Document.createShell(""gX8b[tzFGEbA,#.*%Qe"");
    Elements elements0 = Selector.select("":matches(regex) query must not be empty"", (Element) document0);
    assertEquals(0, elements0.size());
}",""
"public static Elements select(String query, Iterable<Element> roots) {
    Validate.notEmpty(query);
    Validate.notNull(roots);
    LinkedHashSet<Element> elements = new LinkedHashSet<Element>();
    for (Element root : roots) {
        elements.addAll(select(query, root));
    }
    return new Elements(elements);
}","public void test1414() throws Throwable {
    Document document0 = Document.createShell(""O=(3KH.9.)(>0P*"");
    Elements elements0 = document0.getAllElements();
    // Undeclared exception!
    try {
        Selector.select("":contains("", (Iterable<Element>) elements0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // :contains(text) query must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param roots root elements to descend into
 *     @return matching elements, empty if not
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1515() throws Throwable {
    Document document0 = new Document(""?+b"");
    Elements elements0 = Selector.select(""BAS[5"", (Element) document0);
    assertEquals(0, elements0.size());
}",""
"public static Elements select(String query, Element root) {
    return new Selector(query, root).select();
}","public void test1616() throws Throwable {
    Document document0 = new Document(""*EG>~."");
    // Undeclared exception!
    try {
        Selector.select("","", (Element) document0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Unknown combinator: ,
        //
        verifyException(""org.jsoup.select.Selector"", e);
    }
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param root root element to descend into
 *     @return matching elements, empty if not
 */"
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test1717() throws Throwable {
    Document document0 = Document.createShell(""pxNv!/^A}@6hHb"");
    Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
    PriorityQueue<Element> priorityQueue0 = new PriorityQueue<Element>(8770, comparator0);
    priorityQueue0.add(document0);
    Elements elements0 = Selector.select(""+DfL"", (Iterable<Element>) priorityQueue0);
    assertTrue(elements0.isEmpty());
}",""
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test1818() throws Throwable {
    Document document0 = Document.createShell(""O=(3KH.9.)(>0P*"");
    Elements elements0 = Selector.select(""G,M>XM Lx0]Dj%3Fy"", (Element) document0);
    assertTrue(elements0.isEmpty());
}",""
"public static Elements select(String query, Iterable<Element> roots) {
    Validate.notEmpty(query);
    Validate.notNull(roots);
    LinkedHashSet<Element> elements = new LinkedHashSet<Element>();
    for (Element root : roots) {
        elements.addAll(select(query, root));
    }
    return new Elements(elements);
}","public void test1919() throws Throwable {
    Document document0 = Document.createShell(""MENU"");
    Elements elements0 = document0.getElementsByAttributeValueNot(""1V}\""VycY"", ""ObiSSF:$%RX*"");
    // Undeclared exception!
    try {
        Selector.select("":gt(%d)"", (Iterable<Element>) elements0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Index must be numeric
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param roots root elements to descend into
 *     @return matching elements, empty if not
 */"
"public static Elements select(String query, Element root) {
    return new Selector(query, root).select();
}","public void test2020() throws Throwable {
    Tag tag0 = Tag.valueOf(""`Y2"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""^(z,C2REO^.q8>\""G"", attributes0);
    // Undeclared exception!
    try {
        Selector.select("":lt("", element0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Index must be numeric
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param root root element to descend into
 *     @return matching elements, empty if not
 */"
"public static Elements select(String query, Element root) {
    return new Selector(query, root).select();
}","public void test2121() throws Throwable {
    Document document0 = new Document(""?+b"");
    // Undeclared exception!
    try {
        Selector.select(""~.y6V@Ai4w].gnH|M8"", (Element) document0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Could not parse query '.y6V@Ai4w].gnH|M8': unexpected token at '@Ai4w].gnH|M8'
        //
        verifyException(""org.jsoup.select.Selector"", e);
    }
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param root root element to descend into
 *     @return matching elements, empty if not
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test2222() throws Throwable {
    Document document0 = new Document("":not(selector) subselect must not be empty"");
    Elements elements0 = Selector.select("":not(selector) subselect must not be empty"", (Element) document0);
    assertEquals(0, elements0.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test2323() throws Throwable {
    Document document0 = Document.createShell("":has(el) subselect must not be empty"");
    Elements elements0 = Selector.select("":has(el) subselect must not be empty"", (Element) document0);
    assertEquals(0, elements0.size());
}",""
"public static Elements select(String query, Element root) {
    return new Selector(query, root).select();
}","public void test2424() throws Throwable {
    Document document0 = Document.createShell(""MENU"");
    // Undeclared exception!
    try {
        Selector.select(""J*B#4v:'[~\""M_* <F"", (Element) document0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Could not parse query 'J*B#4v:'[~\""M_* <F': unexpected token at ':'[~\""M_* <F'
        //
        verifyException(""org.jsoup.select.Selector"", e);
    }
}","/**
 *     Find elements matching selector.
 *     @param query CSS selector
 *     @param root root element to descend into
 *     @return matching elements, empty if not
 */"
