{
  "test1212" : {
    "methodSignature" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"N mU\\r irs\");\n    DataUtil.load((File) mockFile0, \"charset\", \"N mU\\r irs\");\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "public String baseUri()",
    "methodName" : "baseUri",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    byte[] byteArray0 = new byte[1];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);\n    Document document0 = DataUtil.load((InputStream) dataInputStream0, \"UTF-16\", \"--------------------------------\");\n    document0.baseUri();\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
    "methodName" : "crossStreams",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(12);\n    DataUtil.crossStreams((InputStream) null, byteArrayOutputStream0);\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "public String baseUri()",
    "methodName" : "baseUri",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    File file0 = MockFile.createTempFile(\"EAjjvqAW3`yfhFko \", (String) null);\n    Document document0 = DataUtil.load(file0, (String) null, \"9xl8cN~IO2 d\");\n    document0.baseUri();\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    DataUtil.load((File) null, \"U\\\"(.s>>e#=*>\", \"U\\\"(.s>>e#=*>\");\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "static String getCharsetFromContentType(String contentType)",
    "methodName" : "getCharsetFromContentType",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    String string0 = DataUtil.getCharsetFromContentType(\"charset=\");\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    File file0 = MockFile.createTempFile(\"UTF-16\", \"qrsU(UVwya%h\");\n    DataUtil.load(file0, \"}ToZN/#\\\"Hzslw/Ey>g\", \"}ToZN/#\\\"Hzslw/Ey>g\");\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
    "methodName" : "readToByteBuffer",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);\n    DataUtil.readToByteBuffer(sequenceInputStream0, (-30));\n}",
    "testName" : "test2222"
  },
  "test033" : {
    "methodSignature" : "public String location()",
    "methodName" : "location",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    Parser parser0 = Parser.xmlParser();\n    Document document0 = DataUtil.load((InputStream) null, \"B1{8D6O+?{Yyd8MDK\", \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\", parser0);\n    document0.location();\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "parseInputStream",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);\n    Parser parser0 = Parser.htmlParser();\n    DataUtil.parseInputStream(pushbackInputStream0, \"\", \"\", parser0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    byte[] byteArray0 = new byte[2];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-56));\n    DataUtil.load((InputStream) byteArrayInputStream0, (String) null, \"map\", (Parser) null);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    DataUtil.load((InputStream) pipedInputStream0, \"\", \"\");\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    byte[] byteArray0 = new byte[9];\n    byteArray0[1] = (byte) (-29);\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    Parser parser0 = Parser.htmlParser();\n    DataUtil.load((InputStream) byteArrayInputStream0, (String) null, (String) null, parser0);\n}",
    "testName" : "test1616"
  },
  "test2727" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();\n    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);\n    pipedOutputStream0.close();\n    DataUtil.load((InputStream) pipedInputStream0, \"CONTINUE\", \"maxSize must be 0 (unlimited) or larger\", (Parser) null);\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    byteArray0[0] = (byte) (-72);\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    DataUtil.load((InputStream) byteArrayInputStream0, \"\", \".f K#;m1veQ?,K1+V3\");\n}",
    "testName" : "test1717"
  },
  "test2828" : {
    "methodSignature" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    File file0 = MockFile.createTempFile(\"y7:\", \"y7:\");\n    DataUtil.load(file0, \"\", \"[\\\"']\");\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
    "methodName" : "crossStreams",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    DataUtil.crossStreams(pipedInputStream0, byteArrayOutputStream0);\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "public String location()",
    "methodName" : "location",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    Document document0 = DataUtil.load((InputStream) null, \"limitedQuirks\", \"limitedQuirks\");\n    document0.location();\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
    "methodName" : "readToByteBuffer",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    DataUtil.readToByteBuffer((InputStream) null, 0);\n}",
    "testName" : "test1515"
  },
  "test2626" : {
    "methodSignature" : "static void crossStreams(final InputStream in, final OutputStream out) throws IOException",
    "methodName" : "crossStreams",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);\n    DataUtil.crossStreams(bufferedInputStream0, (OutputStream) null);\n}",
    "testName" : "test2626"
  },
  "test2020" : {
    "methodSignature" : "static String getCharsetFromContentType(String contentType)",
    "methodName" : "getCharsetFromContentType",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    String string0 = DataUtil.getCharsetFromContentType((String) null);\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "parseInputStream",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    byte[] byteArray0 = new byte[4];\n    byteArray0[0] = (byte) 85;\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    Parser parser0 = Parser.xmlParser();\n    DataUtil.parseInputStream(byteArrayInputStream0, \"maxSize must be 0 (unlimited) or larger\", \"maxSize must be 0 (unlimited) or larger\", parser0);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public String baseUri()",
    "methodName" : "baseUri",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    Parser parser0 = Parser.xmlParser();\n    Document document0 = DataUtil.parseInputStream((InputStream) null, \"{s :nRKS\", \"{s :nRKS\", parser0);\n    document0.baseUri();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "parseInputStream",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);\n    DataUtil.parseInputStream(byteArrayInputStream0, (String) null, \"th\", (Parser) null);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "static Document parseInputStream(InputStream input, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "parseInputStream",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    Parser parser0 = Parser.xmlParser();\n    DataUtil.parseInputStream(pipedInputStream0, (String) null, \";RzBx\", parser0);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    byte[] byteArray0 = new byte[3];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);\n    DataUtil.load((InputStream) pushbackInputStream0, \"'{t@(KG04Kq_<$ctRsQ\", \"'{t@(KG04Kq_<$ctRsQ\");\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "static String mimeBoundary()",
    "methodName" : "mimeBoundary",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    String string0 = DataUtil.mimeBoundary();\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "static String getCharsetFromContentType(String contentType)",
    "methodName" : "getCharsetFromContentType",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    String string0 = DataUtil.getCharsetFromContentType(\"PUBLIC\");\n}",
    "testName" : "test1919"
  }
}