focal_method,test_prefix,docstring
"static String unescape(String string, boolean strict) {
    if (!string.contains(""&""))
        return string;
    Matcher m = strict ? strictUnescapePattern.matcher(string) : unescapePattern.matcher(string);
    StringBuffer accum = new StringBuffer(string.length());
    while (m.find()) {
        int charval = -1;
        String num = m.group(3);
        if (num != null) {
            try {
                int base = m.group(2) != null ? 16 : 10;
                charval = Integer.valueOf(num, base);
            } catch (NumberFormatException e) {
            }
        } else {
            String name = m.group(1);
            if (full.containsKey(name))
                charval = full.get(name);
        }
        if (charval != -1 || charval > 0xFFFF) {
            String c = Character.toString((char) charval);
            m.appendReplacement(accum, Matcher.quoteReplacement(c));
        } else {
            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
        }
    }
    m.appendTail(accum);
    return accum.toString();
}","public void test000() throws Throwable {
    String string0 = Entities.unescape("""", true);
    assertEquals("""", string0);
}","/**
 * Unescape the input string.
 * @param string
 * @param strict if ""strict"" (that is, requires trailing ';' char, otherwise that's optional)
 * @return
 */"
"static String unescape(String string) {
    return unescape(string, false);
}","public void test011() throws Throwable {
    String string0 = Entities.unescape("""");
    assertEquals("""", string0);
}",""
"/**
 * Get the Character value of the named entity
 * @param name named entity (e.g. ""lt"" or ""amp"")
 * @return the Character value of the named entity (e.g. '<' or '&')
 */
public static Character getCharacterByName(String name) {
    return full.get(name);
}","public void test022() throws Throwable {
    Character character0 = Entities.getCharacterByName(""DoubleLongRightArrow"");
    assertEquals('\u27F9', (char) character0);
}","/**
 * Check if the input is a known named entity in the base entity set.
 * @param name the possible entity name (e.g. ""lt"" or ""amp"")
 * @return true if a known named entity in the base set
 * @see #isNamedEntity(String)
 */"
"static String escape(String string, Document.OutputSettings out) {
    return escape(string, out.encoder(), out.escapeMode());
}","public void test033() throws Throwable {
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    String string0 = Entities.escape("""", document_OutputSettings0);
    assertEquals("""", string0);
}",""
"static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {
    StringBuilder accum = new StringBuilder(string.length() * 2);
    Map<Character, String> map = escapeMode.getMap();
    for (int pos = 0; pos < string.length(); pos++) {
        Character c = string.charAt(pos);
        if (map.containsKey(c))
            accum.append('&').append(map.get(c)).append(';');
        else if (encoder.canEncode(c))
            accum.append(c.charValue());
        else
            accum.append(""&#"").append((int) c).append(';');
    }
    return accum.toString();
}","public void test044() throws Throwable {
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
    Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
    String string0 = Entities.escape(""org.jsoup.nodes.Entities"", charsetEncoder0, entities_EscapeMode0);
    assertEquals(""org&period;jsoup&period;nodes&period;Entities"", string0);
}",""
"static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {
    StringBuilder accum = new StringBuilder(string.length() * 2);
    Map<Character, String> map = escapeMode.getMap();
    for (int pos = 0; pos < string.length(); pos++) {
        Character c = string.charAt(pos);
        if (map.containsKey(c))
            accum.append('&').append(map.get(c)).append(';');
        else if (encoder.canEncode(c))
            accum.append(c.charValue());
        else
            accum.append(""&#"").append((int) c).append(';');
    }
    return accum.toString();
}","public void test055() throws Throwable {
    Charset charset0 = Charset.defaultCharset();
    CharsetEncoder charsetEncoder0 = charset0.newEncoder();
    Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
    String string0 = Entities.escape("""", charsetEncoder0, entities_EscapeMode0);
    assertEquals("""", string0);
}",""
"static String unescape(String string, boolean strict) {
    if (!string.contains(""&""))
        return string;
    Matcher m = strict ? strictUnescapePattern.matcher(string) : unescapePattern.matcher(string);
    StringBuffer accum = new StringBuffer(string.length());
    while (m.find()) {
        int charval = -1;
        String num = m.group(3);
        if (num != null) {
            try {
                int base = m.group(2) != null ? 16 : 10;
                charval = Integer.valueOf(num, base);
            } catch (NumberFormatException e) {
            }
        } else {
            String name = m.group(1);
            if (full.containsKey(name))
                charval = full.get(name);
        }
        if (charval != -1 || charval > 0xFFFF) {
            String c = Character.toString((char) charval);
            m.appendReplacement(accum, Matcher.quoteReplacement(c));
        } else {
            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
        }
    }
    m.appendTail(accum);
    return accum.toString();
}","public void test066() throws Throwable {
    // Undeclared exception!
    try {
        Entities.unescape((String) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Entities"", e);
    }
}","/**
 * Unescape the input string.
 * @param string
 * @param strict if ""strict"" (that is, requires trailing ';' char, otherwise that's optional)
 * @return
 */"
"static String unescape(String string) {
    return unescape(string, false);
}","public void test077() throws Throwable {
    // Undeclared exception!
    try {
        Entities.unescape((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Entities"", e);
    }
}",""
"static String escape(String string, Document.OutputSettings out) {
    return escape(string, out.encoder(), out.escapeMode());
}","public void test088() throws Throwable {
    // Undeclared exception!
    try {
        Entities.escape(""bFVKr<;C"", (Document.OutputSettings) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Entities"", e);
    }
}",""
"static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {
    StringBuilder accum = new StringBuilder(string.length() * 2);
    Map<Character, String> map = escapeMode.getMap();
    for (int pos = 0; pos < string.length(); pos++) {
        Character c = string.charAt(pos);
        if (map.containsKey(c))
            accum.append('&').append(map.get(c)).append(';');
        else if (encoder.canEncode(c))
            accum.append(c.charValue());
        else
            accum.append(""&#"").append((int) c).append(';');
    }
    return accum.toString();
}","public void test099() throws Throwable {
    Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
    // Undeclared exception!
    try {
        Entities.escape(""updownarrow"", (CharsetEncoder) null, entities_EscapeMode0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Entities"", e);
    }
}",""
"static String unescape(String string) {
    return unescape(string, false);
}","public void test1111() throws Throwable {
    String string0 = Entities.unescape(""b`!x_\""M|&Un#at;."");
    assertEquals(""b`!x_\""M|&Un#at;."", string0);
}",""
"static String unescape(String string, boolean strict) {
    if (!string.contains(""&""))
        return string;
    Matcher m = strict ? strictUnescapePattern.matcher(string) : unescapePattern.matcher(string);
    StringBuffer accum = new StringBuffer(string.length());
    while (m.find()) {
        int charval = -1;
        String num = m.group(3);
        if (num != null) {
            try {
                int base = m.group(2) != null ? 16 : 10;
                charval = Integer.valueOf(num, base);
            } catch (NumberFormatException e) {
            }
        } else {
            String name = m.group(1);
            if (full.containsKey(name))
                charval = full.get(name);
        }
        if (charval != -1 || charval > 0xFFFF) {
            String c = Character.toString((char) charval);
            m.appendReplacement(accum, Matcher.quoteReplacement(c));
        } else {
            m.appendReplacement(accum, Matcher.quoteReplacement(m.group(0)));
        }
    }
    m.appendTail(accum);
    return accum.toString();
}","public void test1212() throws Throwable {
    String string0 = Entities.unescape("" &ryIIwqzkHhW"", true);
    assertEquals("" &ryIIwqzkHhW"", string0);
}","/**
 * Unescape the input string.
 * @param string
 * @param strict if ""strict"" (that is, requires trailing ';' char, otherwise that's optional)
 * @return
 */"
"public static boolean isNamedEntity(String name) {
    return full.containsKey(name);
}","public void test1313() throws Throwable {
    boolean boolean0 = Entities.isNamedEntity(""SuchThat"");
    assertTrue(boolean0);
}","/**
 * Check if the input is a known named entity
 * @param name the possible entity name (e.g. ""lt"" or ""amp"")
 * @return true if a known named entity
 */"
"public static boolean isNamedEntity(String name) {
    return full.containsKey(name);
}","public void test1414() throws Throwable {
    boolean boolean0 = Entities.isNamedEntity("" &ryIIwqzkHhW"");
    assertFalse(boolean0);
}","/**
 * Check if the input is a known named entity
 * @param name the possible entity name (e.g. ""lt"" or ""amp"")
 * @return true if a known named entity
 */"
"static String escape(String string, Document.OutputSettings out) {
    return escape(string, out.encoder(), out.escapeMode());
}","public void test1515() throws Throwable {
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    String string0 = Entities.escape(""s8+)&5AMT~.rI+YPE"", document_OutputSettings0);
    assertEquals(""s8+)&amp;5AMT~.rI+YPE"", string0);
}",""
"static String unescape(String string) {
    return unescape(string, false);
}","public void test1616() throws Throwable {
    String string0 = Entities.unescape(""s8+)&amp;5AMT~.rI+YPE"");
    assertEquals(""s8+)&5AMT~.rI+YPE"", string0);
}",""
"/**
 * Get the Character value of the named entity
 * @param name named entity (e.g. ""lt"" or ""amp"")
 * @return the Character value of the named entity (e.g. '<' or '&')
 */
public static Character getCharacterByName(String name) {
    return full.get(name);
}","public void test1717() throws Throwable {
    Character character0 = Entities.getCharacterByName(""Pmch<hat"");
    assertNull(character0);
}","/**
 * Check if the input is a known named entity in the base entity set.
 * @param name the possible entity name (e.g. ""lt"" or ""amp"")
 * @return true if a known named entity in the base set
 * @see #isNamedEntity(String)
 */"
