focal_method,test_prefix,docstring
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test000() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""*q>XDAnEC`O`lr"", parseSettings0);
    CDataNode cDataNode0 = new CDataNode(""*q>XDAnEC`O`lr"");
    Attributes attributes0 = cDataNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""*q>XDAnEC`O`lr"", attributes0);
    formElement0.prependChild(formElement0);
    formElement0.removeChild(formElement0);
    assertEquals(0, formElement0.childNodeSize());
}",""
"public Connection submit() {
    String action = hasAttr(""action"") ? absUrl(""action"") : baseUri();
    Validate.notEmpty(action, ""Could not determine a form action URL for submit. Ensure you set a base URI when parsing."");
    Connection.Method method = attr(""method"").toUpperCase().equals(""POST"") ? Connection.Method.POST : Connection.Method.GET;
    return Jsoup.connect(action).data(formData()).method(method);
}","public void test011() throws Throwable {
    Attributes attributes0 = new Attributes();
    ParseSettings parseSettings0 = new ParseSettings(false, false);
    Tag tag0 = Tag.valueOf(""S$w&"", parseSettings0);
    FormElement formElement0 = new FormElement(tag0, ""http:/"", attributes0);
    Connection connection0 = formElement0.submit();
    assertNotNull(connection0);
}","/**
 * Prepare to submit this form. A Connection object is created with the request set up from the form values. You
 * can then set up other options (like user-agent, timeout, cookies), then execute it.
 * @return a connection prepared from the values of this form.
 * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the
 * document's base URI when parsing.
 */"
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test022() throws Throwable {
    Tag tag0 = Tag.valueOf(""DQ>w:2"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""DQ>w:2"", attributes0);
    Document document0 = Parser.parse(""b+]quW_SZ Iw"", ""+e/H"");
    document0.appendChild(formElement0);
    FormElement formElement1 = formElement0.addElement(document0);
    assertEquals(0, formElement1.childNodeSize());
}",""
"public FormElement addElement(Element element) {
    elements.add(element);
    return this;
}","public void test033() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""!ehxf[$_koDbML9zn/"", parseSettings0);
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""!ehxf[$_koDbML9zn/"", attributes0);
    formElement0.setSiblingIndex((-1));
    FormElement formElement1 = formElement0.addElement((Element) null);
    assertSame(formElement0, formElement1);
}","/**
 * Add a form control element to this form.
 * @param element form control to add
 * @return this form element, for chaining
 */"
"public FormElement addElement(Element element) {
    elements.add(element);
    return this;
}","public void test055() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.htmlDefault;
    Tag tag0 = Tag.valueOf(""org.jsoup.nodes.BooleanAttribute"", parseSettings0);
    FormElement formElement0 = new FormElement(tag0, ""on"", (Attributes) null);
    Element element0 = formElement0.text(""@,~R`$rHJwP?K"");
    FormElement formElement1 = formElement0.addElement(formElement0);
    assertSame(formElement1, element0);
}","/**
 * Add a form control element to this form.
 * @param element form control to add
 * @return this form element, for chaining
 */"
"public Connection submit() {
    String action = hasAttr(""action"") ? absUrl(""action"") : baseUri();
    Validate.notEmpty(action, ""Could not determine a form action URL for submit. Ensure you set a base URI when parsing."");
    Connection.Method method = attr(""method"").toUpperCase().equals(""POST"") ? Connection.Method.POST : Connection.Method.GET;
    return Jsoup.connect(action).data(formData()).method(method);
}","public void test066() throws Throwable {
    Tag tag0 = Tag.valueOf(""*q>XDAnEC`O`lr"");
    CDataNode cDataNode0 = new CDataNode(""*q>XDAnEC`O`lr"");
    Attributes attributes0 = cDataNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""*q>XDAnEC`O`lr"", attributes0);
    attributes0.keys = null;
    // Undeclared exception!
    try {
        formElement0.submit();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 * Prepare to submit this form. A Connection object is created with the request set up from the form values. You
 * can then set up other options (like user-agent, timeout, cookies), then execute it.
 * @return a connection prepared from the values of this form.
 * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the
 * document's base URI when parsing.
 */"
"public Connection submit() {
    String action = hasAttr(""action"") ? absUrl(""action"") : baseUri();
    Validate.notEmpty(action, ""Could not determine a form action URL for submit. Ensure you set a base URI when parsing."");
    Connection.Method method = attr(""method"").toUpperCase().equals(""POST"") ? Connection.Method.POST : Connection.Method.GET;
    return Jsoup.connect(action).data(formData()).method(method);
}","public void test077() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.add(""(^X.p`\""=m~CP"", ""YOST"");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""(^X.p`\""=m~CP"", parseSettings0);
    String[] stringArray0 = new String[0];
    attributes0.keys = stringArray0;
    FormElement formElement0 = new FormElement(tag0, ""(^X.p`\""=m~CP"", attributes0);
    // Undeclared exception!
    try {
        formElement0.submit();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 * Prepare to submit this form. A Connection object is created with the request set up from the form values. You
 * can then set up other options (like user-agent, timeout, cookies), then execute it.
 * @return a connection prepared from the values of this form.
 * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the
 * document's base URI when parsing.
 */"
"@Override
protected void removeChild(Node out) {
    super.removeChild(out);
    elements.remove(out);
}","public void test088() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""*q>XDAnEC`O`lr"", parseSettings0);
    CDataNode cDataNode0 = new CDataNode(""*q>XDAnEC`O`lr"");
    Attributes attributes0 = cDataNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""*q>XDAnEC`O`lr"", attributes0);
    Element element0 = formElement0.prependChild(formElement0);
    List<Node> list0 = Parser.parseXmlFragment(""1/`gL<X|%d\"""", ""POST"");
    element0.childNodes = list0;
    // Undeclared exception!
    try {
        formElement0.removeChild(formElement0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableList"", e);
    }
}",""
"@Override
protected void removeChild(Node out) {
    super.removeChild(out);
    elements.remove(out);
}","public void test099() throws Throwable {
    Tag tag0 = Tag.valueOf(""qq_.^QCXU"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""qq_.^QCXU"", attributes0);
    // Undeclared exception!
    try {
        formElement0.removeChild((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}",""
"@Override
protected void removeChild(Node out) {
    super.removeChild(out);
    elements.remove(out);
}","public void test1010() throws Throwable {
    Tag tag0 = Tag.valueOf("" R,px$t0P$%JdG{"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""4N8="", attributes0);
    CDataNode cDataNode0 = new CDataNode(""SMunxBE4TmJ$O6brhQ"");
    Node node0 = cDataNode0.doClone(formElement0);
    // Undeclared exception!
    try {
        formElement0.removeChild(node0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"@Override
protected void removeChild(Node out) {
    super.removeChild(out);
    elements.remove(out);
}","public void test1111() throws Throwable {
    Tag tag0 = Tag.valueOf(""*q>XDAnEC`O`lr"");
    CDataNode cDataNode0 = new CDataNode(""*q>XDAnEC`O`lr"");
    Attributes attributes0 = cDataNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""*q>XDAnEC`O`lr"", attributes0);
    FormElement formElement1 = (FormElement) formElement0.prependChild(formElement0);
    formElement1.setSiblingIndex((-1470));
    // Undeclared exception!
    try {
        formElement0.removeChild(formElement0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public List<Connection.KeyVal> formData() {
    ArrayList<Connection.KeyVal> data = new ArrayList<>();
    // iterate the form control elements and accumulate their values
    for (Element el : elements) {
        // contents are form listable, superset of submitable
        if (!el.tag().isFormSubmittable())
            continue;
        // skip disabled form inputs
        if (el.hasAttr(""disabled""))
            continue;
        String name = el.attr(""name"");
        if (name.length() == 0)
            continue;
        String type = el.attr(""type"");
        if (""select"".equals(el.normalName())) {
            Elements options = el.select(""option[selected]"");
            boolean set = false;
            for (Element option : options) {
                data.add(HttpConnection.KeyVal.create(name, option.val()));
                set = true;
            }
            if (!set) {
                Element option = el.select(""option"").first();
                if (option != null)
                    data.add(HttpConnection.KeyVal.create(name, option.val()));
            }
        } else if (""checkbox"".equalsIgnoreCase(type) || ""radio"".equalsIgnoreCase(type)) {
            // only add checkbox or radio if they have the checked attribute
            if (el.hasAttr(""checked"")) {
                final String val = el.val().length() > 0 ? el.val() : ""on"";
                data.add(HttpConnection.KeyVal.create(name, val));
            }
        } else {
            data.add(HttpConnection.KeyVal.create(name, el.val()));
        }
    }
    return data;
}","public void test1212() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.htmlDefault;
    Tag tag0 = Tag.valueOf(""\u0002Ohkk{/%8t"", parseSettings0);
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""F%0D9@sfO!7FPti[Z"", attributes0);
    formElement0.addElement((Element) null);
    // Undeclared exception!
    try {
        formElement0.formData();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.FormElement"", e);
    }
}","/**
 * Get the data that this form submits. The returned list is a copy of the data, and changes to the contents of the
 * list will not be reflected in the DOM.
 * @return a list of key vals
 */"
"public FormElement(Tag tag, String baseUri, Attributes attributes) {
    super(tag, baseUri, attributes);
}","public void test1313() throws Throwable {
    CDataNode cDataNode0 = new CDataNode((String) null);
    Attributes attributes0 = cDataNode0.attributes();
    FormElement formElement0 = null;
    try {
        formElement0 = new FormElement((Tag) null, ""U\""(.s>>e#=*>"", attributes0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Create a new, standalone form element.
 *
 * @param tag        tag of this element
 * @param baseUri    the base URI
 * @param attributes initial attributes
 */"
"public Connection submit() {
    String action = hasAttr(""action"") ? absUrl(""action"") : baseUri();
    Validate.notEmpty(action, ""Could not determine a form action URL for submit. Ensure you set a base URI when parsing."");
    Connection.Method method = attr(""method"").toUpperCase().equals(""POST"") ? Connection.Method.POST : Connection.Method.GET;
    return Jsoup.connect(action).data(formData()).method(method);
}","public void test1818() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.add(""method"", ""POST"");
    Tag tag0 = Tag.valueOf(""method"");
    FormElement formElement0 = new FormElement(tag0, ""method"", attributes0);
    // Undeclared exception!
    try {
        formElement0.submit();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Malformed URL: method
        //
        verifyException(""org.jsoup.helper.HttpConnection"", e);
    }
}","/**
 * Prepare to submit this form. A Connection object is created with the request set up from the form values. You
 * can then set up other options (like user-agent, timeout, cookies), then execute it.
 * @return a connection prepared from the values of this form.
 * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the
 * document's base URI when parsing.
 */"
"public Connection submit() {
    String action = hasAttr(""action"") ? absUrl(""action"") : baseUri();
    Validate.notEmpty(action, ""Could not determine a form action URL for submit. Ensure you set a base URI when parsing."");
    Connection.Method method = attr(""method"").toUpperCase().equals(""POST"") ? Connection.Method.POST : Connection.Method.GET;
    return Jsoup.connect(action).data(formData()).method(method);
}","public void test1919() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.add(""ACTION"", ""POST"");
    Tag tag0 = Tag.valueOf(""ACTION"");
    FormElement formElement0 = new FormElement(tag0, ""ACTION"", attributes0);
    // Undeclared exception!
    try {
        formElement0.submit();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Prepare to submit this form. A Connection object is created with the request set up from the form values. You
 * can then set up other options (like user-agent, timeout, cookies), then execute it.
 * @return a connection prepared from the values of this form.
 * @throws IllegalArgumentException if the form's absolute action URL cannot be determined. Make sure you pass the
 * document's base URI when parsing.
 */"
"@Override
protected void removeChild(Node out) {
    super.removeChild(out);
    elements.remove(out);
}","public void test2121() throws Throwable {
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""*q>XDAnEC`O`lr"", parseSettings0);
    CDataNode cDataNode0 = new CDataNode(""*q>XDAnEC`O`lr"");
    Attributes attributes0 = cDataNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""*q>XDAnEC`O`lr"", attributes0);
    // Undeclared exception!
    try {
        formElement0.removeChild(formElement0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
