focal_method,test_prefix,docstring
"public final int childNodeSize() {
    return childNodes.size();
}","public void test00() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    Cleaner cleaner0 = new Cleaner(whitelist0);
    Document document0 = new Document("""");
    Document document1 = cleaner0.clean(document0);
    assertEquals(1, document1.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public boolean isValid(Document dirtyDocument) {
    Validate.notNull(dirtyDocument);
    Document clean = Document.createShell(dirtyDocument.baseUri());
    int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body());
    return numDiscarded == 0;
}","public void test11() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    Whitelist whitelist1 = whitelist0.addEnforcedAttribute(""body"", ""body"", ""body"");
    Document document0 = Document.createShell(""body"");
    Cleaner cleaner0 = new Cleaner(whitelist1);
    Document document1 = cleaner0.clean(document0);
    boolean boolean0 = cleaner0.isValid(document1);
    assertNotSame(document1, document0);
}","/**
 *     Determines if the input document <b>body</b>is valid, against the whitelist. It is considered valid if all the tags and attributes
 *     in the input HTML are allowed by the whitelist, and that there is no content in the <code>head</code>.
 *     <p>
 *     This method can be used as a validator for user input. An invalid document will still be cleaned successfully
 *     using the {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the document
 *     to ensure enforced attributes are set correctly, and that the output is tidied.
 *     </p>
 *     @param dirtyDocument document to test
 *     @return true if no tags or attributes need to be removed; false if they do
 */"
"public boolean isValid(Document dirtyDocument) {
    Validate.notNull(dirtyDocument);
    Document clean = Document.createShell(dirtyDocument.baseUri());
    int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body());
    return numDiscarded == 0;
}","public void test23() throws Throwable {
    Whitelist whitelist0 = Whitelist.none();
    Whitelist whitelist1 = whitelist0.addEnforcedAttribute(""body"", ""body"", ""body"");
    Document document0 = Document.createShell(""body"");
    Cleaner cleaner0 = new Cleaner(whitelist1);
    Document document1 = cleaner0.clean(document0);
    whitelist0.addEnforcedAttribute(""body"", ""body"", ""open"");
    boolean boolean0 = cleaner0.isValid(document1);
    assertFalse(boolean0);
}","/**
 *     Determines if the input document <b>body</b>is valid, against the whitelist. It is considered valid if all the tags and attributes
 *     in the input HTML are allowed by the whitelist, and that there is no content in the <code>head</code>.
 *     <p>
 *     This method can be used as a validator for user input. An invalid document will still be cleaned successfully
 *     using the {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the document
 *     to ensure enforced attributes are set correctly, and that the output is tidied.
 *     </p>
 *     @param dirtyDocument document to test
 *     @return true if no tags or attributes need to be removed; false if they do
 */"
"public boolean isValid(Document dirtyDocument) {
    Validate.notNull(dirtyDocument);
    Document clean = Document.createShell(dirtyDocument.baseUri());
    int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body());
    return numDiscarded == 0;
}","public void test34() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    Cleaner cleaner0 = new Cleaner(whitelist0);
    Document document0 = Document.createShell(""PbfK}e`)6OKd(YBn"");
    document0.text(""PbfK}e`)6OKd(YBn"");
    boolean boolean0 = cleaner0.isValid(document0);
    assertTrue(boolean0);
}","/**
 *     Determines if the input document <b>body</b>is valid, against the whitelist. It is considered valid if all the tags and attributes
 *     in the input HTML are allowed by the whitelist, and that there is no content in the <code>head</code>.
 *     <p>
 *     This method can be used as a validator for user input. An invalid document will still be cleaned successfully
 *     using the {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the document
 *     to ensure enforced attributes are set correctly, and that the output is tidied.
 *     </p>
 *     @param dirtyDocument document to test
 *     @return true if no tags or attributes need to be removed; false if they do
 */"
"public boolean isValid(Document dirtyDocument) {
    Validate.notNull(dirtyDocument);
    Document clean = Document.createShell(dirtyDocument.baseUri());
    int numDiscarded = copySafeNodes(dirtyDocument.body(), clean.body());
    return numDiscarded == 0;
}","public void test45() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    Whitelist whitelist1 = whitelist0.addEnforcedAttribute(""body"", ""body"", ""body"");
    Document document0 = Document.createShell(""body"");
    Whitelist whitelist2 = Whitelist.basicWithImages();
    Cleaner cleaner0 = new Cleaner(whitelist2);
    Cleaner cleaner1 = new Cleaner(whitelist1);
    Document document1 = cleaner1.clean(document0);
    boolean boolean0 = cleaner0.isValid(document1);
    assertFalse(boolean0);
}","/**
 *     Determines if the input document <b>body</b>is valid, against the whitelist. It is considered valid if all the tags and attributes
 *     in the input HTML are allowed by the whitelist, and that there is no content in the <code>head</code>.
 *     <p>
 *     This method can be used as a validator for user input. An invalid document will still be cleaned successfully
 *     using the {@link #clean(Document)} document. If using as a validator, it is recommended to still clean the document
 *     to ensure enforced attributes are set correctly, and that the output is tidied.
 *     </p>
 *     @param dirtyDocument document to test
 *     @return true if no tags or attributes need to be removed; false if they do
 */"
