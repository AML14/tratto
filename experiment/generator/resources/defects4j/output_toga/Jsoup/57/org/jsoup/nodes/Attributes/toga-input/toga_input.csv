focal_method,test_prefix,docstring
"public String html() {
    StringBuilder accum = new StringBuilder();
    try {
        // output settings a bit funky, but this html() seldom used
        html(accum, (new Document("""")).outputSettings());
    } catch (IOException e) {
        // ought never happen
        throw new SerializationException(e);
    }
    return accum.toString();
}","public void test000() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""org.jsoup.parser.htmltreebuilder"", ""org.jsoup.parser.htmltreebuilder"");
    String string0 = attributes0.html();
    assertEquals("" org.jsoup.parser.htmltreebuilder=\""org.jsoup.parser.htmltreebuilder\"""", string0);
}","/**
 *     Get the HTML representation of these attributes.
 *     @return HTML
 *     @throws SerializationException if the HTML representation of the attributes cannot be constructed.
 */"
"public String getIgnoreCase(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return """";
    for (String attrKey : attributes.keySet()) {
        if (attrKey.equalsIgnoreCase(key))
            return attributes.get(attrKey).getValue();
    }
    return """";
}","public void test011() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""org.jsoup.parser.htmltreebuilder"", ""org.jsoup.parser.htmltreebuilder"");
    String string0 = attributes0.getIgnoreCase(""org.jsoup.parser.htmltreebuilder"");
    assertEquals(""org.jsoup.parser.htmltreebuilder"", string0);
}","/**
 * Get an attribute's value by case-insensitive key
 * @param key the attribute name
 * @return the first matching attribute value if set; or empty string if not set.
 */"
"public void removeIgnoreCase(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return;
    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {
        String attrKey = it.next();
        if (attrKey.equalsIgnoreCase(key))
            attributes.remove(attrKey);
    }
}","public void test022() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""LP"", "";6:"");
    attributes0.put(""<pJ7;,4h;6"", ""org.jsoup.nodes.Attributes"");
    // Undeclared exception!
    try {
        attributes0.removeIgnoreCase(""LP"");
        fail(""Expecting exception: ConcurrentModificationException"");
    } catch (ConcurrentModificationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedHashMap$LinkedHashIterator"", e);
    }
}","/**
 *     Remove an attribute by key. <b>Case insensitive.</b>
 *     @param key attribute key to remove
 */"
"public void removeIgnoreCase(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return;
    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {
        String attrKey = it.next();
        if (attrKey.equalsIgnoreCase(key))
            attributes.remove(attrKey);
    }
}","public void test033() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.removeIgnoreCase((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Remove an attribute by key. <b>Case insensitive.</b>
 *     @param key attribute key to remove
 */"
"public void remove(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return;
    attributes.remove(key);
}","public void test044() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.remove("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Remove an attribute by key. <b>Case sensitive.</b>
 *     @param key attribute key to remove
 */"
"public void put(Attribute attribute) {
    Validate.notNull(attribute);
    if (attributes == null)
        attributes = new LinkedHashMap<String, Attribute>(2);
    attributes.put(attribute.getKey(), attribute);
}","public void test055() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.put((Attribute) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Set a new attribute, or replace an existing one by key.
 *     @param attribute attribute
 */"
"public void put(String key, boolean value) {
    if (value)
        put(new BooleanAttribute(key));
    else
        remove(key);
}","public void test066() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.put("""", false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *    Set a new boolean attribute, remove attribute if value is false.
 *    @param key attribute key
 *    @param value attribute value
 */"
"public void put(String key, String value) {
    Attribute attr = new Attribute(key, value);
    put(attr);
}","public void test077() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.put("""", ""Vd26x-!(v:1Spc"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Set a new attribute, or replace an existing one by key.
 *     @param key attribute key
 *     @param value attribute value
 */"
"void html(Appendable accum, Document.OutputSettings out) throws IOException {
    if (attributes == null)
        return;
    for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {
        Attribute attribute = entry.getValue();
        accum.append("" "");
        attribute.html(accum, out);
    }
}","public void test088() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""~"", ""~"");
    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""~"");
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    // Undeclared exception!
    try {
        attributes0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail(""Expecting exception: ReadOnlyBufferException"");
    } catch (ReadOnlyBufferException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.CharBuffer"", e);
    }
}",""
"void html(Appendable accum, Document.OutputSettings out) throws IOException {
    if (attributes == null)
        return;
    for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {
        Attribute attribute = entry.getValue();
        accum.append("" "");
        attribute.html(accum, out);
    }
}","public void test099() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""JSNv)K f="", ""JSNv)K f="");
    char[] charArray0 = new char[7];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1);
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    // Undeclared exception!
    try {
        attributes0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail(""Expecting exception: BufferOverflowException"");
    } catch (BufferOverflowException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.CharBuffer"", e);
    }
}",""
"public String getIgnoreCase(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return """";
    for (String attrKey : attributes.keySet()) {
        if (attrKey.equalsIgnoreCase(key))
            return attributes.get(attrKey).getValue();
    }
    return """";
}","public void test1010() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.getIgnoreCase((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Get an attribute's value by case-insensitive key
 * @param key the attribute name
 * @return the first matching attribute value if set; or empty string if not set.
 */"
"// linked hash map to preserve insertion order.
// null be default as so many elements have no attributes -- saves a good chunk of memory
/**
 *     Get an attribute value by key.
 *     @param key the (case-sensitive) attribute key
 *     @return the attribute value if set; or empty string if not set.
 *     @see #hasKey(String)
 */
public String get(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return """";
    Attribute attr = attributes.get(key);
    return attr != null ? attr.getValue() : """";
}","public void test1111() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.get("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public void addAll(Attributes incoming) {
    if (incoming.size() == 0)
        return;
    if (attributes == null)
        attributes = new LinkedHashMap<String, Attribute>(incoming.size());
    attributes.putAll(incoming.attributes);
}","public void test1212() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.addAll((Attributes) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 *     Add all the attributes from the incoming set to this set.
 *     @param incoming attributes to add to these attributes.
 */"
"void html(Appendable accum, Document.OutputSettings out) throws IOException {
    if (attributes == null)
        return;
    for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {
        Attribute attribute = entry.getValue();
        accum.append("" "");
        attribute.html(accum, out);
    }
}","public void test1414() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = Attribute.createFromEncoded(""c95j|260*~ B)Z"", ""c95j|260*~ B)Z"");
    attributes0.put(attribute0);
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    // Undeclared exception!
    try {
        attributes0.html((Appendable) null, document_OutputSettings0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}",""
"void html(Appendable accum, Document.OutputSettings out) throws IOException {
    if (attributes == null)
        return;
    for (Map.Entry<String, Attribute> entry : attributes.entrySet()) {
        Attribute attribute = entry.getValue();
        accum.append("" "");
        attribute.html(accum, out);
    }
}","public void test1515() throws Throwable {
    Attributes attributes0 = new Attributes();
    MockFile mockFile0 = new MockFile(""jpp`nwG"");
    MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
    attributes0.html((Appendable) mockFileWriter0, (Document.OutputSettings) null);
}",""
"public Iterator<Attribute> iterator() {
    if (attributes == null || attributes.isEmpty()) {
        return Collections.<Attribute>emptyList().iterator();
    }
    return attributes.values().iterator();
}","public void test1616() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.dataset();
    Iterator<Attribute> iterator0 = attributes0.iterator();
    assertNotNull(iterator0);
}",""
"public void remove(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return;
    attributes.remove(key);
}","public void test1717() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.remove(""P5ppK0A%uxd+qh]ONc"");
}","/**
 *     Remove an attribute by key. <b>Case sensitive.</b>
 *     @param key attribute key to remove
 */"
"public int size() {
    if (attributes == null)
        return 0;
    return attributes.size();
}","public void test1818() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = Attribute.createFromEncoded(""My?K}U1Qxkb*%"", """");
    attributes0.put(attribute0);
    int int0 = attributes0.size();
    assertEquals(1, int0);
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public String getKey() {
    return key;
}","public void test1919() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.dataset();
    Attribute attribute0 = new Attribute(""\""JVE@`"", """");
    attributes0.put(attribute0);
    assertEquals(""\""JVE@`"", attribute0.getKey());
}","/**
 *     Get the attribute key.
 *     @return the attribute key
 */"
"@Override
public int hashCode() {
    return attributes != null ? attributes.hashCode() : 0;
}","public void test2121() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""inert"", ""y|"");
    attributes0.hashCode();
}","/**
 * Calculates the hashcode of these attributes, by iterating all attributes and summing their hashcodes.
 * @return calculated hashcode
 */"
"@Override
public int hashCode() {
    return attributes != null ? attributes.hashCode() : 0;
}","public void test2222() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.hashCode();
}","/**
 * Calculates the hashcode of these attributes, by iterating all attributes and summing their hashcodes.
 * @return calculated hashcode
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Attributes))
        return false;
    Attributes that = (Attributes) o;
    return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);
}","public void test2323() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    attributes1.dataset();
    boolean boolean0 = attributes0.equals(attributes1);
    assertFalse(attributes1.equals((Object) attributes0));
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Attributes))
        return false;
    Attributes that = (Attributes) o;
    return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);
}","public void test2324() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    attributes1.dataset();
    boolean boolean0 = attributes0.equals(attributes1);
    assertFalse(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Attributes))
        return false;
    Attributes that = (Attributes) o;
    return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);
}","public void test2425() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    attributes0.put(""FSNv)KVf="", ""FSNv)KVf="");
    boolean boolean0 = attributes0.equals(attributes1);
    assertFalse(attributes1.equals((Object) attributes0));
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Attributes))
        return false;
    Attributes that = (Attributes) o;
    return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);
}","public void test2426() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    attributes0.put(""FSNv)KVf="", ""FSNv)KVf="");
    boolean boolean0 = attributes0.equals(attributes1);
    assertFalse(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Attributes))
        return false;
    Attributes that = (Attributes) o;
    return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);
}","public void test2527() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""inert"", ""y|"");
    Attributes attributes1 = attributes0.clone();
    boolean boolean0 = attributes1.equals(attributes0);
    assertNotSame(attributes1, attributes0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Attributes))
        return false;
    Attributes that = (Attributes) o;
    return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);
}","public void test2629() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    boolean boolean0 = attributes1.equals(attributes0);
    assertTrue(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Attributes))
        return false;
    Attributes that = (Attributes) o;
    return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);
}","public void test2730() throws Throwable {
    Attributes attributes0 = new Attributes();
    boolean boolean0 = attributes0.equals(attributes0);
    assertTrue(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Attributes))
        return false;
    Attributes that = (Attributes) o;
    return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);
}","public void test2831() throws Throwable {
    Attributes attributes0 = new Attributes();
    boolean boolean0 = attributes0.equals(""Mg%Sh%.LJOm@^"");
    assertFalse(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public String toString() {
    return html();
}","public void test2932() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""inert"", ""y|"");
    String string0 = attributes0.toString();
    assertEquals("" inert=\""y|\"""", string0);
}",""
"public Iterator<Attribute> iterator() {
    if (attributes == null || attributes.isEmpty()) {
        return Collections.<Attribute>emptyList().iterator();
    }
    return attributes.values().iterator();
}","public void test3235() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""inert"", ""y|"");
    Iterator<Attribute> iterator0 = attributes0.iterator();
    assertNotNull(iterator0);
}",""
"public Iterator<Attribute> iterator() {
    if (attributes == null || attributes.isEmpty()) {
        return Collections.<Attribute>emptyList().iterator();
    }
    return attributes.values().iterator();
}","public void test3336() throws Throwable {
    Attributes attributes0 = new Attributes();
    Iterator<Attribute> iterator0 = attributes0.iterator();
    assertNotNull(iterator0);
}",""
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Attributes))
        return false;
    Attributes that = (Attributes) o;
    return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);
}","public void test3437() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = new Attributes();
    attributes0.put(""(7z< exM"", true);
    assertFalse(attributes0.equals((Object) attributes1));
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Attributes))
        return false;
    Attributes that = (Attributes) o;
    return !(attributes != null ? !attributes.equals(that.attributes) : that.attributes != null);
}","public void test3438() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = new Attributes();
    attributes0.put(""(7z< exM"", true);
    attributes1.addAll(attributes0);
    assertTrue(attributes0.equals((Object) attributes1));
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"public void addAll(Attributes incoming) {
    if (incoming.size() == 0)
        return;
    if (attributes == null)
        attributes = new LinkedHashMap<String, Attribute>(incoming.size());
    attributes.putAll(incoming.attributes);
}","public void test3539() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.addAll(attributes0);
}","/**
 *     Add all the attributes from the incoming set to this set.
 *     @param incoming attributes to add to these attributes.
 */"
"public int size() {
    if (attributes == null)
        return 0;
    return attributes.size();
}","public void test3640() throws Throwable {
    Attributes attributes0 = new Attributes();
    int int0 = attributes0.size();
    assertEquals(0, int0);
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public void addAll(Attributes incoming) {
    if (incoming.size() == 0)
        return;
    if (attributes == null)
        attributes = new LinkedHashMap<String, Attribute>(incoming.size());
    attributes.putAll(incoming.attributes);
}","public void test3741() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""W\""!ryb\"""", ""W\""!ryb\"""");
    attributes0.addAll(attributes0);
}","/**
 *     Add all the attributes from the incoming set to this set.
 *     @param incoming attributes to add to these attributes.
 */"
"public boolean hasKeyIgnoreCase(String key) {
    if (attributes == null)
        return false;
    for (String attrKey : attributes.keySet()) {
        if (attrKey.equalsIgnoreCase(key))
            return true;
    }
    return false;
}","public void test3842() throws Throwable {
    Attributes attributes0 = new Attributes();
    boolean boolean0 = attributes0.hasKeyIgnoreCase(""FSNv)KVf="");
    assertFalse(boolean0);
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key key to check for
 *     @return true if key exists, false otherwise
 */"
"public boolean hasKeyIgnoreCase(String key) {
    if (attributes == null)
        return false;
    for (String attrKey : attributes.keySet()) {
        if (attrKey.equalsIgnoreCase(key))
            return true;
    }
    return false;
}","public void test3943() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""W\""!ryb\"""", ""W\""!ryb\"""");
    boolean boolean0 = attributes0.hasKeyIgnoreCase("" "");
    assertFalse(boolean0);
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key key to check for
 *     @return true if key exists, false otherwise
 */"
"public boolean hasKey(String key) {
    return attributes != null && attributes.containsKey(key);
}","public void test4044() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""CommentStartDash"", ""CommentStartDash"");
    boolean boolean0 = attributes0.hasKey(""CommentStartDash"");
    assertTrue(boolean0);
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key case-sensitive key to check for
 *     @return true if key exists, false otherwise
 */"
"public boolean hasKey(String key) {
    return attributes != null && attributes.containsKey(key);
}","public void test4145() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""W\""!ryb\"""", ""W\""!ryb\"""");
    boolean boolean0 = attributes0.hasKey(""J9/iSo/u(:j8s"");
    assertFalse(boolean0);
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key case-sensitive key to check for
 *     @return true if key exists, false otherwise
 */"
"public boolean hasKey(String key) {
    return attributes != null && attributes.containsKey(key);
}","public void test4246() throws Throwable {
    Attributes attributes0 = new Attributes();
    boolean boolean0 = attributes0.hasKey(""CommentStartDash"");
    assertFalse(boolean0);
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key case-sensitive key to check for
 *     @return true if key exists, false otherwise
 */"
"public void removeIgnoreCase(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return;
    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {
        String attrKey = it.next();
        if (attrKey.equalsIgnoreCase(key))
            attributes.remove(attrKey);
    }
}","public void test4347() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""W\""!ryb\"""", ""W\""!ryb\"""");
    attributes0.removeIgnoreCase("" "");
}","/**
 *     Remove an attribute by key. <b>Case insensitive.</b>
 *     @param key attribute key to remove
 */"
"public void removeIgnoreCase(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return;
    for (Iterator<String> it = attributes.keySet().iterator(); it.hasNext(); ) {
        String attrKey = it.next();
        if (attrKey.equalsIgnoreCase(key))
            attributes.remove(attrKey);
    }
}","public void test4448() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.removeIgnoreCase("" "");
}","/**
 *     Remove an attribute by key. <b>Case insensitive.</b>
 *     @param key attribute key to remove
 */"
"public void remove(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return;
    attributes.remove(key);
}","public void test4549() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""FSNv)KVf="", ""FSNv)KVf="");
    attributes0.remove(""FSNv)KVf="");
}","/**
 *     Remove an attribute by key. <b>Case sensitive.</b>
 *     @param key attribute key to remove
 */"
"public String getIgnoreCase(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return """";
    for (String attrKey : attributes.keySet()) {
        if (attrKey.equalsIgnoreCase(key))
            return attributes.get(attrKey).getValue();
    }
    return """";
}","public void test4650() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""entities-full.propert-es"", true);
    String string0 = attributes0.getIgnoreCase(""entities-full.propert-es"");
    assertEquals("""", string0);
}","/**
 * Get an attribute's value by case-insensitive key
 * @param key the attribute name
 * @return the first matching attribute value if set; or empty string if not set.
 */"
"public String getIgnoreCase(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return """";
    for (String attrKey : attributes.keySet()) {
        if (attrKey.equalsIgnoreCase(key))
            return attributes.get(attrKey).getValue();
    }
    return """";
}","public void test4751() throws Throwable {
    Attributes attributes0 = new Attributes();
    String string0 = attributes0.getIgnoreCase(""FSNv)KVf="");
    assertEquals("""", string0);
}","/**
 * Get an attribute's value by case-insensitive key
 * @param key the attribute name
 * @return the first matching attribute value if set; or empty string if not set.
 */"
"public String getIgnoreCase(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return """";
    for (String attrKey : attributes.keySet()) {
        if (attrKey.equalsIgnoreCase(key))
            return attributes.get(attrKey).getValue();
    }
    return """";
}","public void test4852() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""W\""!ryb\"""", ""W\""!ryb\"""");
    String string0 = attributes0.getIgnoreCase("" "");
    assertEquals("""", string0);
}","/**
 * Get an attribute's value by case-insensitive key
 * @param key the attribute name
 * @return the first matching attribute value if set; or empty string if not set.
 */"
"// linked hash map to preserve insertion order.
// null be default as so many elements have no attributes -- saves a good chunk of memory
/**
 *     Get an attribute value by key.
 *     @param key the (case-sensitive) attribute key
 *     @return the attribute value if set; or empty string if not set.
 *     @see #hasKey(String)
 */
public String get(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return """";
    Attribute attr = attributes.get(key);
    return attr != null ? attr.getValue() : """";
}","public void test4953() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""FSNv)KVf="", ""FSNv)KVf="");
    String string0 = attributes0.get(""FSNv)KVf="");
    assertEquals(""FSNv)KVf="", string0);
}",""
"// linked hash map to preserve insertion order.
// null be default as so many elements have no attributes -- saves a good chunk of memory
/**
 *     Get an attribute value by key.
 *     @param key the (case-sensitive) attribute key
 *     @return the attribute value if set; or empty string if not set.
 *     @see #hasKey(String)
 */
public String get(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return """";
    Attribute attr = attributes.get(key);
    return attr != null ? attr.getValue() : """";
}","public void test5054() throws Throwable {
    Attributes attributes0 = new Attributes();
    String string0 = attributes0.get(""entities-full.propert-es"");
    assertEquals("""", string0);
}",""
"// linked hash map to preserve insertion order.
// null be default as so many elements have no attributes -- saves a good chunk of memory
/**
 *     Get an attribute value by key.
 *     @param key the (case-sensitive) attribute key
 *     @return the attribute value if set; or empty string if not set.
 *     @see #hasKey(String)
 */
public String get(String key) {
    Validate.notEmpty(key);
    if (attributes == null)
        return """";
    Attribute attr = attributes.get(key);
    return attr != null ? attr.getValue() : """";
}","public void test5155() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""entities-full.properties"", true);
    String string0 = attributes0.get("" "");
    assertEquals("""", string0);
}",""
"public boolean hasKeyIgnoreCase(String key) {
    if (attributes == null)
        return false;
    for (String attrKey : attributes.keySet()) {
        if (attrKey.equalsIgnoreCase(key))
            return true;
    }
    return false;
}","public void test5256() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""inert"", ""y|"");
    boolean boolean0 = attributes0.hasKeyIgnoreCase(""inert"");
    assertTrue(boolean0);
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key key to check for
 *     @return true if key exists, false otherwise
 */"
"@Override
public String toString() {
    return html();
}","public void test5357() throws Throwable {
    Attributes attributes0 = new Attributes();
    String string0 = attributes0.toString();
    assertEquals("""", string0);
}",""
"public String html() {
    StringBuilder accum = new StringBuilder();
    try {
        // output settings a bit funky, but this html() seldom used
        html(accum, (new Document("""")).outputSettings());
    } catch (IOException e) {
        // ought never happen
        throw new SerializationException(e);
    }
    return accum.toString();
}","public void test5458() throws Throwable {
    Attributes attributes0 = new Attributes();
    String string0 = attributes0.html();
    assertEquals("""", string0);
}","/**
 *     Get the HTML representation of these attributes.
 *     @return HTML
 *     @throws SerializationException if the HTML representation of the attributes cannot be constructed.
 */"
