focal_method,test_prefix,docstring
"public Element insertChildren(int index, Collection<? extends Node> children) {
    Validate.notNull(children, ""Children collection to be inserted must not be null."");
    int currentSize = childNodeSize();
    // roll around
    if (index < 0)
        index += currentSize + 1;
    Validate.isTrue(index >= 0 && index <= currentSize, ""Insert position out of bounds."");
    ArrayList<Node> nodes = new ArrayList<Node>(children);
    Node[] nodeArray = nodes.toArray(new Node[nodes.size()]);
    addChildren(index, nodeArray);
    return this;
}","public void test011() throws Throwable {
    Tag tag0 = Tag.valueOf(""String must not be empty"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""java.lang.string@0000000055"", attributes0);
    Elements elements0 = formElement0.elements();
    Element element0 = formElement0.insertChildren(0, elements0);
    assertSame(formElement0, element0);
}","/**
 * Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
 * right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.
 *
 * @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the
 * end
 * @param children child nodes to insert
 * @return this element, for chaining.
 */"
"public String toString() {
    return outerHtml();
}","public void test022() throws Throwable {
    Document document0 = new Document(""output"");
    String string0 = document0.toString();
    assertEquals("""", string0);
}",""
"public String tagName() {
    return tag.getName();
}","public void test033() throws Throwable {
    Document document0 = new Document(""+h"");
    document0.tagName(""g*yh>x?:wx=)VJ"");
    assertEquals(""g*yh>x?:wx=)vj"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test044() throws Throwable {
    Tag tag0 = Tag.valueOf(""br"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""body"", attributes0);
    Tag tag1 = formElement0.tag();
    assertFalse(tag1.isData());
}","/**
 * Gets if this tag is a data only tag.
 *
 * @return if this tag is a data only tag
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test055() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    TextNode textNode0 = TextNode.createFromEncoded(""body"", ""formnovalidate"");
    Attributes attributes0 = textNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""body"", attributes0);
    Element element0 = formElement0.prepend(""1co_b"");
    assertTrue(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Element prepend(String html) {
    Validate.notNull(html);
    List<Node> nodes = Parser.parseFragment(html, this, baseUri());
    addChildren(0, nodes.toArray(new Node[nodes.size()]));
    return this;
}","public void test066() throws Throwable {
    Document document0 = new Document("""");
    Element element0 = document0.prepend("""");
    assertSame(document0, element0);
}","/**
 * Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children.
 * @param html HTML to add inside this element, before the existing HTML
 * @return this element
 * @see #html(String)
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test077() throws Throwable {
    Tag tag0 = Tag.valueOf(""#ja@KT#73XC"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""#ja@KT#73XC"", attributes0);
    Element element1 = element0.prependChild(element0);
    Element element2 = element1.parent();
    assertEquals(0, element2.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (o == null || getClass() != o.getClass())
        return false;
    if (!super.equals(o))
        return false;
    Element element = (Element) o;
    return tag.equals(element.tag);
}","public void test1313() throws Throwable {
    Tag tag0 = Tag.valueOf(""html"");
    Element element0 = new Element(tag0, ""html"");
    Element element1 = element0.clone();
    assertTrue(element1.equals((Object) element0));
}",""
"@Override
public Document clone() {
    Document clone = (Document) super.clone();
    clone.outputSettings = this.outputSettings.clone();
    return clone;
}","public void test1414() throws Throwable {
    Document document0 = new Document("""");
    Element element0 = document0.clone();
    assertNotSame(element0, document0);
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test1515() throws Throwable {
    Document document0 = new Document(""class"");
    Locale locale0 = Locale.ENGLISH;
    Set<String> set0 = locale0.getUnicodeLocaleAttributes();
    Element element0 = document0.classNames(set0);
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String className() {
    return attr(""class"").trim();
}","public void test1717() throws Throwable {
    Tag tag0 = Tag.valueOf(""[jyKV>"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""[jyKV>"", attributes0);
    Element element0 = formElement0.toggleClass(""[jyKV>"");
    String string0 = element0.className();
    assertNotNull(string0);
}","/**
 * Gets the literal value of this element's ""class"" attribute, which may include multiple class names, space
 * separated. (E.g. on <code>&lt;div class=""header gray""&gt;</code> returns, ""<code>header gray</code>"")
 * @return The literal class attribute, or <b>empty string</b> if no class attribute set.
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test1818() throws Throwable {
    Tag tag0 = Tag.valueOf(""Children collection to be inserted must not be null."");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""DEa1gj:Z;G "", attributes0);
    Element element0 = formElement0.appendElement(""body"");
    assertEquals(""body"", element0.nodeName());
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test1819() throws Throwable {
    Tag tag0 = Tag.valueOf(""Children collection to be inserted must not be null."");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""DEa1gj:Z;G "", attributes0);
    Element element0 = formElement0.appendElement(""body"");
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test1920() throws Throwable {
    Document document0 = new Document(""String must not be empty"");
    Element element0 = document0.append("""");
    assertEquals(0, element0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"@Override
public Element wrap(String html) {
    return (Element) super.wrap(html);
}","public void test2021() throws Throwable {
    Tag tag0 = Tag.valueOf("":nth-child(%d)"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, "":nth-child(%d)"", attributes0);
    // Undeclared exception!
    try {
        element0.wrap(""2aU(8*wN9L"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}","/**
 * Wrap the supplied HTML around this element.
 *
 * @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 * @return this element, for chaining.
 */"
"public Element toggleClass(String className) {
    Validate.notNull(className);
    Set<String> classes = classNames();
    if (classes.contains(className))
        classes.remove(className);
    else
        classes.add(className);
    classNames(classes);
    return this;
}","public void test2122() throws Throwable {
    Tag tag0 = Tag.valueOf(""org.jsoup.select.Evaluator$Tag"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""k:{zgh;sv!gwxui>g"", attributes0);
    // Undeclared exception!
    try {
        element0.toggleClass((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it.
 *     @param className class name to toggle
 *     @return this element
 */"
"public Elements select(String cssQuery) {
    return Selector.select(cssQuery, this);
}","public void test2223() throws Throwable {
    Tag tag0 = Tag.valueOf(""E6v,kRS9z"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""E6v,kRS9z"", attributes0);
    // Undeclared exception!
    try {
        formElement0.select(""E6v,kRS9z"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Could not parse query 'kRS9z': unexpected token at '9z'
        //
        verifyException(""org.jsoup.select.QueryParser"", e);
    }
}","/**
 * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements
 * may include this element, or any of its children.
 * <p>
 * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because
 * multiple filters can be combined, e.g.:
 * </p>
 * <ul>
 * <li>{@code el.select(""a[href]"")} - finds links ({@code a} tags with {@code href} attributes)
 * <li>{@code el.select(""a[href*=example.com]"")} - finds links pointing to example.com (loosely)
 * </ul>
 * <p>
 * See the query syntax documentation in {@link org.jsoup.select.Selector}.
 * </p>
 *
 * @param cssQuery a {@link Selector} CSS-like query
 * @return elements that match the query (empty if none match)
 * @see org.jsoup.select.Selector
 * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.
 */"
"public Elements select(String cssQuery) {
    return Selector.select(cssQuery, this);
}","public void test2324() throws Throwable {
    Document document0 = new Document(""String must not be empty"");
    // Undeclared exception!
    try {
        document0.select("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements
 * may include this element, or any of its children.
 * <p>
 * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because
 * multiple filters can be combined, e.g.:
 * </p>
 * <ul>
 * <li>{@code el.select(""a[href]"")} - finds links ({@code a} tags with {@code href} attributes)
 * <li>{@code el.select(""a[href*=example.com]"")} - finds links pointing to example.com (loosely)
 * </ul>
 * <p>
 * See the query syntax documentation in {@link org.jsoup.select.Selector}.
 * </p>
 *
 * @param cssQuery a {@link Selector} CSS-like query
 * @return elements that match the query (empty if none match)
 * @see org.jsoup.select.Selector
 * @throws Selector.SelectorParseException (unchecked) on an invalid CSS query.
 */"
"public Element removeClass(String className) {
    Validate.notNull(className);
    Set<String> classes = classNames();
    classes.remove(className);
    classNames(classes);
    return this;
}","public void test2425() throws Throwable {
    Tag tag0 = Tag.valueOf(""W<5#u?{W"");
    TextNode textNode0 = new TextNode(""W<5#u?{W"", ""W<5#u?{W"");
    Attributes attributes0 = textNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""W<5#u?{W"", attributes0);
    // Undeclared exception!
    try {
        formElement0.removeClass((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Remove a class name from this element's {@code class} attribute.
 *     @param className class name to remove
 *     @return this element
 */"
"public Element prependChild(Node child) {
    Validate.notNull(child);
    addChildren(0, child);
    return this;
}","public void test2526() throws Throwable {
    Tag tag0 = Tag.valueOf(""M:it7!U*"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""hw[}g|+GD8|0>X"", attributes0);
    // Undeclared exception!
    try {
        element0.prependChild((Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Add a node to the start of this element's children.
 *
 * @param child node to add.
 * @return this element, so that you can add more child nodes or elements.
 */"
"public Element prepend(String html) {
    Validate.notNull(html);
    List<Node> nodes = Parser.parseFragment(html, this, baseUri());
    addChildren(0, nodes.toArray(new Node[nodes.size()]));
    return this;
}","public void test2627() throws Throwable {
    Document document0 = new Document(""InFrameset"");
    // Undeclared exception!
    try {
        document0.prepend((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Add inner HTML into this element. The supplied HTML will be parsed, and each node prepended to the start of the element's children.
 * @param html HTML to add inside this element, before the existing HTML
 * @return this element
 * @see #html(String)
 */"
"public Elements getElementsMatchingOwnText(Pattern pattern) {
    return Collector.collect(new Evaluator.MatchesOwn(pattern), this);
}","public void test2728() throws Throwable {
    Tag tag0 = Tag.valueOf(""vFXBBE*jjl[oJ94wZ"");
    TextNode textNode0 = TextNode.createFromEncoded(""Insert position out of bounds."", ""vFXBBE*jjl[oJ94wZ"");
    Attributes attributes0 = textNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""5@"", attributes0);
    // Undeclared exception!
    try {
        formElement0.getElementsMatchingOwnText((Pattern) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.select.Evaluator$MatchesOwn"", e);
    }
}","/**
 * Find elements whose own text matches the supplied regular expression.
 * @param pattern regular expression to match text against
 * @return elements matching the supplied regular expression.
 * @see Element#ownText()
 */"
"public Elements getElementsByIndexEquals(int index) {
    return Collector.collect(new Evaluator.IndexEquals(index), this);
}","public void test2829() throws Throwable {
    Document document0 = new Document(""Xrh"");
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    document0.childNodes = (List<Node>) linkedList0;
    linkedList0.add((Node) document0);
    // Undeclared exception!
    document0.getElementsByIndexEquals(22);
}","/**
 * Find elements whose sibling index is equal to the supplied index.
 * @param index 0-based index
 * @return elements equal to index
 */"
"public Elements getElementsByAttributeValueNot(String key, String value) {
    return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);
}","public void test2930() throws Throwable {
    Tag tag0 = Tag.valueOf(""yRt2'T"");
    Element element0 = new Element(tag0, """");
    // Undeclared exception!
    try {
        element0.getElementsByAttributeValueNot(""yRt2'T"", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.
 *
 * @param key name of the attribute
 * @param value value of the attribute
 * @return elements that do not have a matching attribute
 */"
"public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) {
    return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);
}","public void test3031() throws Throwable {
    Document document0 = new Document(""org.jsoup.select.Evaluator"");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueMatching((String) null, (Pattern) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.select.Evaluator$AttributeWithValueMatching"", e);
    }
}","/**
 * Find elements that have attributes whose values match the supplied regular expression.
 * @param key name of the attribute
 * @param pattern compiled regular expression to match against attribute values
 * @return elements that have attributes matching this regular expression
 */"
"public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {
    return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this);
}","public void test3132() throws Throwable {
    Document document0 = new Document(""@Qn(k@"");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueEnding(""@Qn(k@"", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that have attributes that end with the value suffix. Case insensitive.
 *
 * @param key name of the attribute
 * @param valueSuffix end of the attribute value
 * @return elements that have attributes that end with the value suffix
 */"
"public Elements getElementsByAttributeValue(String key, String value) {
    return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);
}","public void test3233() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValue("""", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that have an attribute with the specific value. Case insensitive.
 *
 * @param key name of the attribute
 * @param value value of the attribute
 * @return elements that have this attribute with this value, empty if none
 */"
"public Elements getElementsByAttribute(String key) {
    Validate.notEmpty(key);
    key = key.trim().toLowerCase();
    return Collector.collect(new Evaluator.Attribute(key), this);
}","public void test3334() throws Throwable {
    Document document0 = new Document(""DpoM-as|6AmfaJ[$`'"");
    // Undeclared exception!
    try {
        document0.getElementsByAttribute("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that have a named attribute set. Case insensitive.
 *
 * @param key name of the attribute, e.g. {@code href}
 * @return elements that have this attribute, empty if none
 */"
"public Element firstElementSibling() {
    // todo: should firstSibling() exclude this?
    List<Element> siblings = parent().children();
    return siblings.size() > 1 ? siblings.get(0) : null;
}","public void test3435() throws Throwable {
    Document document0 = new Document(""dfn"");
    // Undeclared exception!
    try {
        document0.firstElementSibling();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}","/**
 * Gets the first element sibling of this element.
 * @return the first sibling that is an element (aka the parent's first element child)
 */"
"public Element child(int index) {
    return children().get(index);
}","public void test3536() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.child(35);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 35, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Get a child element of this element, by its 0-based index number.
 * <p>
 * Note that an element can have both mixed Nodes and Elements as children. This method inspects
 * a filtered list of children that are elements, and the index is based on that filtered list.
 * </p>
 *
 * @param index the index number of the element to retrieve
 * @return the child element, if it exists, otherwise throws an {@code IndexOutOfBoundsException}
 * @see #childNode(int)
 */"
"public Element child(int index) {
    return children().get(index);
}","public void test3637() throws Throwable {
    Document document0 = new Document(""P"");
    // Undeclared exception!
    try {
        document0.child((-1117));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Get a child element of this element, by its 0-based index number.
 * <p>
 * Note that an element can have both mixed Nodes and Elements as children. This method inspects
 * a filtered list of children that are elements, and the index is based on that filtered list.
 * </p>
 *
 * @param index the index number of the element to retrieve
 * @return the child element, if it exists, otherwise throws an {@code IndexOutOfBoundsException}
 * @see #childNode(int)
 */"
"@Override
public Element before(String html) {
    return (Element) super.before(html);
}","public void test3738() throws Throwable {
    Tag tag0 = Tag.valueOf(""%|r<"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""%|r<"", attributes0);
    // Undeclared exception!
    try {
        element0.before("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified HTML into the DOM before this element (as a preceding sibling).
 *
 * @param html HTML to add before this element
 * @return this element, for chaining
 * @see #after(String)
 */"
"public Element attr(String attributeKey, String attributeValue) {
    super.attr(attributeKey, attributeValue);
    return this;
}","public void test3839() throws Throwable {
    Document document0 = new Document(""+x4RH@Amv\u00079P&"");
    // Undeclared exception!
    try {
        document0.attr(""+x4RH@Amv\u00079P&"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Set an attribute value on this element. If this element already has an attribute with the
 * key, its value is updated; otherwise, a new attribute is added.
 *
 * @return this element
 */"
"public Element append(String html) {
    Validate.notNull(html);
    List<Node> nodes = Parser.parseFragment(html, this, baseUri());
    addChildren(nodes.toArray(new Node[nodes.size()]));
    return this;
}","public void test3940() throws Throwable {
    Tag tag0 = Tag.valueOf(""br"");
    TextNode textNode0 = TextNode.createFromEncoded(""p3m##Y#<5_6P62Ku3N"", ""&y2/ql|slJ"");
    Attributes attributes0 = textNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""k_A"", attributes0);
    // Undeclared exception!
    try {
        formElement0.append((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Add inner HTML to this element. The supplied HTML will be parsed, and each node appended to the end of the children.
 * @param html HTML to add inside this element, after the existing HTML
 * @return this element
 * @see #html(String)
 */"
"public Element(Tag tag, String baseUri, Attributes attributes) {
    super(baseUri, attributes);
    Validate.notNull(tag);
    this.tag = tag;
}","public void test4041() throws Throwable {
    Tag tag0 = Tag.valueOf(""itemscope"");
    Element element0 = null;
    try {
        element0 = new Element(tag0, ""itemscope"", (Attributes) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Create a new, standalone Element. (Standalone in that is has no parent.)
 *
 * @param tag tag of this element
 * @param baseUri the base URI
 * @param attributes initial attributes
 * @see #appendChild(Node)
 * @see #appendElement(String)
 */"
"public Element(Tag tag, String baseUri) {
    this(tag, baseUri, new Attributes());
}","public void test4142() throws Throwable {
    Element element0 = null;
    try {
        element0 = new Element((Tag) null, ""B#H2Cf1%+I/(e"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Create a new Element from a tag and a base URI.
 *
 * @param tag element tag
 * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty
 *            string, but not null.
 * @see Tag#valueOf(String)
 */"
"public String html() {
    StringBuilder accum = new StringBuilder();
    html(accum);
    return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();
}","public void test4243() throws Throwable {
    Document document0 = new Document("""");
    String string0 = document0.html();
    assertEquals("""", string0);
}","/**
 * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return
 * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)
 *
 * @return String of HTML.
 * @see #outerHtml()
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test4344() throws Throwable {
    Document document0 = new Document(""#=Q_1K'KenM!,"");
    Element element0 = document0.val(""#=Q_1K'KenM!,"");
    assertEquals(0, element0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public String val() {
    if (tagName().equals(""textarea""))
        return text();
    else
        return attr(""value"");
}","public void test4445() throws Throwable {
    Document document0 = new Document(""XPg)rWY^Nm.b5+/"");
    String string0 = document0.val();
    assertEquals("""", string0);
}","/**
 * Get the value of a form element (input, textarea, etc).
 * @return the value of the form element, or empty string if not set.
 */"
"public Integer elementSiblingIndex() {
    if (parent() == null)
        return 0;
    return indexInList(this, parent().children());
}","public void test4546() throws Throwable {
    Document document0 = new Document("""");
    Integer integer0 = document0.elementSiblingIndex();
    assertEquals(0, (int) integer0);
}","/**
 * Get the list index of this element in its element sibling list. I.e. if this is the first element
 * sibling, returns 0.
 * @return position in element sibling list
 */"
"public String cssSelector() {
    if (id().length() > 0)
        return ""#"" + id();
    StringBuilder selector = new StringBuilder(tagName());
    String classes = StringUtil.join(classNames(), ""."");
    if (classes.length() > 0)
        selector.append('.').append(classes);
    if (// don't add Document to selector, as will always have a html node
    parent() == null || parent() instanceof Document)
        return selector.toString();
    selector.insert(0, "" > "");
    if (parent().select(selector.toString()).size() > 1)
        selector.append(String.format("":nth-child(%d)"", elementSiblingIndex() + 1));
    return parent().cssSelector() + selector.toString();
}","public void test4647() throws Throwable {
    Document document0 = new Document(""pEqpZb${bEh%!a*"");
    String string0 = document0.cssSelector();
    assertEquals(""#root"", string0);
}","/**
 * Get a CSS selector that will uniquely select this element.
 * <p>
 * If the element has an ID, returns #id;
 * otherwise returns the parent (if any) CSS selector, followed by {@literal '>'},
 * followed by a unique selector for the element (tag.class.class:nth-child(n)).
 * </p>
 *
 * @return the CSS Path that can be used to retrieve the element in a selector.
 */"
"public Element insertChildren(int index, Collection<? extends Node> children) {
    Validate.notNull(children, ""Children collection to be inserted must not be null."");
    int currentSize = childNodeSize();
    // roll around
    if (index < 0)
        index += currentSize + 1;
    Validate.isTrue(index >= 0 && index <= currentSize, ""Insert position out of bounds."");
    ArrayList<Node> nodes = new ArrayList<Node>(children);
    Node[] nodeArray = nodes.toArray(new Node[nodes.size()]);
    addChildren(index, nodeArray);
    return this;
}","public void test4748() throws Throwable {
    Document document0 = new Document(""+h"");
    LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
    // Undeclared exception!
    try {
        document0.insertChildren(65536, linkedList0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Insert position out of bounds.
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
 * right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.
 *
 * @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the
 * end
 * @param children child nodes to insert
 * @return this element, for chaining.
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test5253() throws Throwable {
    Document document0 = new Document("""");
    boolean boolean0 = document0.isBlock();
    assertFalse(boolean0);
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Element empty() {
    childNodes.clear();
    return this;
}","public void test5556() throws Throwable {
    Tag tag0 = Tag.valueOf(""(XL7["");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""(XL7["", attributes0);
    Element element0 = formElement0.empty();
    assertSame(element0, formElement0);
}","/**
 * Remove all of the element's child nodes. Any attributes are left as-is.
 * @return this element
 */"
"public Element tagName(String tagName) {
    Validate.notEmpty(tagName, ""Tag name must not be empty."");
    tag = Tag.valueOf(tagName);
    return this;
}","public void test5657() throws Throwable {
    Document document0 = new Document(""C}ffUrV~rm4dY"");
    // Undeclared exception!
    try {
        document0.tagName((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Tag name must not be empty.
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Change the tag of this element. For example, convert a {@code <span>} to a {@code <div>} with
 * {@code el.tagName(""div"");}.
 *
 * @param tagName new tag name for this element
 * @return this element, for chaining
 */"
"public Elements getElementsMatchingOwnText(String regex) {
    Pattern pattern;
    try {
        pattern = Pattern.compile(regex);
    } catch (PatternSyntaxException e) {
        throw new IllegalArgumentException(""Pattern syntax error: "" + regex, e);
    }
    return getElementsMatchingOwnText(pattern);
}","public void test5859() throws Throwable {
    Document document0 = new Document(""#=Q_1K'KenM!,"");
    // Undeclared exception!
    try {
        document0.getElementsMatchingOwnText(""5NN[k2"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Pattern syntax error: 5NN[k2
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}","/**
 * Find elements whose text matches the supplied regular expression.
 * @param regex regular expression to match text against. You can use <a href=""http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded"">embedded flags</a> (such as (?i) and (?m) to control regex options.
 * @return elements matching the supplied regular expression.
 * @see Element#ownText()
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test5960() throws Throwable {
    Tag tag0 = Tag.valueOf(""[jyKV>"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""[jyKV>"", attributes0);
    String string0 = formElement0.nodeName();
    assertEquals(""[jykv>"", string0);
}",""
"static boolean preserveWhitespace(Node node) {
    // looks only at this element and one level up, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element element = (Element) node;
        return element.tag.preserveWhitespace() || element.parent() != null && element.parent().tag.preserveWhitespace();
    }
    return false;
}","public void test6465() throws Throwable {
    TextNode textNode0 = new TextNode(""cite"", ""cite"");
    boolean boolean0 = Element.preserveWhitespace(textNode0);
    assertFalse(boolean0);
}",""
"public Element previousElementSibling() {
    if (parentNode == null)
        return null;
    List<Element> siblings = parent().children();
    Integer index = indexInList(this, siblings);
    Validate.notNull(index);
    if (index > 0)
        return siblings.get(index - 1);
    else
        return null;
}","public void test6566() throws Throwable {
    Document document0 = new Document(""P"");
    Element element0 = document0.previousElementSibling();
    assertNull(element0);
}","/**
 * Gets the previous element sibling of this element.
 * @return the previous element, or null if there is no previous element
 * @see #nextElementSibling()
 */"
"public String cssSelector() {
    if (id().length() > 0)
        return ""#"" + id();
    StringBuilder selector = new StringBuilder(tagName());
    String classes = StringUtil.join(classNames(), ""."");
    if (classes.length() > 0)
        selector.append('.').append(classes);
    if (// don't add Document to selector, as will always have a html node
    parent() == null || parent() instanceof Document)
        return selector.toString();
    selector.insert(0, "" > "");
    if (parent().select(selector.toString()).size() > 1)
        selector.append(String.format("":nth-child(%d)"", elementSiblingIndex() + 1));
    return parent().cssSelector() + selector.toString();
}","public void test6667() throws Throwable {
    Tag tag0 = Tag.valueOf(""[jyKV>"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""[jyKV>"", attributes0);
    formElement0.toggleClass(""[jyKV>"");
    String string0 = formElement0.cssSelector();
    assertNotNull(string0);
}","/**
 * Get a CSS selector that will uniquely select this element.
 * <p>
 * If the element has an ID, returns #id;
 * otherwise returns the parent (if any) CSS selector, followed by {@literal '>'},
 * followed by a unique selector for the element (tag.class.class:nth-child(n)).
 * </p>
 *
 * @return the CSS Path that can be used to retrieve the element in a selector.
 */"
"public Element insertChildren(int index, Collection<? extends Node> children) {
    Validate.notNull(children, ""Children collection to be inserted must not be null."");
    int currentSize = childNodeSize();
    // roll around
    if (index < 0)
        index += currentSize + 1;
    Validate.isTrue(index >= 0 && index <= currentSize, ""Insert position out of bounds."");
    ArrayList<Node> nodes = new ArrayList<Node>(children);
    Node[] nodeArray = nodes.toArray(new Node[nodes.size()]);
    addChildren(index, nodeArray);
    return this;
}","public void test6768() throws Throwable {
    Tag tag0 = Tag.valueOf(""[jyKV>"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""[jyKV>"", attributes0);
    Elements elements0 = formElement0.elements();
    // Undeclared exception!
    try {
        formElement0.insertChildren((-3), elements0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Insert position out of bounds.
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
 * right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.
 *
 * @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the
 * end
 * @param children child nodes to insert
 * @return this element, for chaining.
 */"
"public Element insertChildren(int index, Collection<? extends Node> children) {
    Validate.notNull(children, ""Children collection to be inserted must not be null."");
    int currentSize = childNodeSize();
    // roll around
    if (index < 0)
        index += currentSize + 1;
    Validate.isTrue(index >= 0 && index <= currentSize, ""Insert position out of bounds."");
    ArrayList<Node> nodes = new ArrayList<Node>(children);
    Node[] nodeArray = nodes.toArray(new Node[nodes.size()]);
    addChildren(index, nodeArray);
    return this;
}","public void test6869() throws Throwable {
    Tag tag0 = Tag.valueOf(""[jyKV>"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""[jyKV>"", attributes0);
    Elements elements0 = formElement0.getElementsByAttributeStarting(""RWM0zO.\""z$c2 "");
    Element element0 = formElement0.insertChildren((-1), elements0);
    assertSame(formElement0, element0);
}","/**
 * Inserts the given child nodes into this element at the specified index. Current nodes will be shifted to the
 * right. The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.
 *
 * @param index 0-based index to insert children at. Specify {@code 0} to insert at the start, {@code -1} at the
 * end
 * @param children child nodes to insert
 * @return this element, for chaining.
 */"
"@Override
public Element after(Node node) {
    return (Element) super.after(node);
}","public void test7071() throws Throwable {
    Tag tag0 = Tag.valueOf(""l"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, """", attributes0);
    // Undeclared exception!
    try {
        element0.after((Node) element0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified node into the DOM after this node (as a following sibling).
 * @param node to add after this element
 * @return this element, for chaining
 * @see #before(Node)
 */"
"@Override
public Element after(String html) {
    return (Element) super.after(html);
}","public void test7374() throws Throwable {
    Tag tag0 = Tag.valueOf(""[jyKV>"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""[jyKV>"", attributes0);
    // Undeclared exception!
    try {
        formElement0.after(""RWM0zO.\""z$c2 "");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified HTML into the DOM after this element (as a following sibling).
 *
 * @param html HTML to add after this element
 * @return this element, for chaining
 * @see #before(String)
 */"
"public String tagName() {
    return tag.getName();
}","public void test7576() throws Throwable {
    Tag tag0 = Tag.valueOf(""l"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, """", attributes0);
    Element element1 = element0.prependText(""9"");
    assertEquals(""l"", element1.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"public Document normalise() {
    Element htmlEl = findFirstElementByTagName(""html"", this);
    if (htmlEl == null)
        htmlEl = appendElement(""html"");
    if (head() == null)
        htmlEl.prependElement(""head"");
    if (body() == null)
        htmlEl.appendElement(""body"");
    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care
    // of. do in inverse order to maintain text order.
    normaliseTextNodes(head());
    normaliseTextNodes(htmlEl);
    normaliseTextNodes(this);
    normaliseStructure(""head"", htmlEl);
    normaliseStructure(""body"", htmlEl);
    ensureMetaCharsetElement();
    return this;
}","public void test7677() throws Throwable {
    Document document0 = new Document(""A;7c}W35$8 Oo<n"");
    // Undeclared exception!
    try {
        document0.normalise();
        //  fail(""Expecting exception: NoSuchElementException"");
        // Unstable assertion
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 *     Normalise the document. This happens after the parse phase so generally does not need to be called.
 *     Moves any text content that is not in the body element into the body.
 *     @return this document after normalisation
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test7778() throws Throwable {
    // Undeclared exception!
    try {
        Document.createShell("""");
        //  fail(""Expecting exception: NoSuchElementException"");
        // Unstable assertion
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
