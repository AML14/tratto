focal_method,test_prefix,docstring
"void replaceActiveFormattingElement(Element out, Element in) {
    replaceInQueue(formattingElements, out, in);
}","public void test0000() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", ""aside"");
    Document document1 = document0.clone();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceActiveFormattingElement(document1, document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inScope(String[] targetNames) {
    return inSpecificScope(targetNames, TagsSearchInScope, null);
}","public void test0011() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String[] stringArray0 = new String[1];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test0022() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean inScope(String targetName, String[] extras) {
    return inSpecificScope(targetName, TagsSearchInScope, extras);
    // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml
    // todo: in svg namespace: forignOjbect, desc, title
}","public void test0023() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    boolean boolean0 = htmlTreeBuilder0.inScope(""textarea"", htmlTreeBuilder0.TagsSearchInScope);
    assertFalse(boolean0);
}",""
"void replaceOnStack(Element out, Element in) {
    replaceInQueue(stack, out, in);
}","public void test0034() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    Element element0 = document0.head();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceOnStack(document0, element0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void insertOnStackAfter(Element after, Element in) {
    int i = stack.lastIndexOf(after);
    Validate.isTrue(i != -1);
    stack.add(i + 1, in);
}","public void test0045() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@13, state=InBody, currentElement=<body>\n _\n</body>}"", ""aV"");
    Document document1 = document0.clone();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertOnStackAfter(document1, document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test0056() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""F"", ""F"", (ParseErrorList) null);
    htmlTreeBuilder0.insertInFosterParent(document0);
    assertEquals(2, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test0078() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""sGCm Tw\""jt+7rNsfGIS"", ""sGCm Tw\""jt+7rNsfGIS"", (ParseErrorList) null);
    htmlTreeBuilder0.insert(document0);
    assertEquals(1, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test0079() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""sGCm Tw\""jt+7rNsfGIS"", ""sGCm Tw\""jt+7rNsfGIS"", (ParseErrorList) null);
    htmlTreeBuilder0.insert(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"void transition(HtmlTreeBuilderState state) {
    this.state = state;
}","public void test00810() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterFrameset;
    htmlTreeBuilder0.transition(htmlTreeBuilderState0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test00911() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.setHeadElement(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"void reconstructFormattingElements() {
    Element last = lastFormattingElement();
    if (last == null || onStack(last))
        return;
    Element entry = last;
    int size = formattingElements.size();
    int pos = size - 1;
    boolean skip = false;
    while (true) {
        if (pos == 0) {
            // step 4. if none before, skip to 8
            skip = true;
            break;
        }
        // step 5. one earlier than entry
        entry = formattingElements.get(--pos);
        if (// step 6 - neither marker nor on stack
        entry == null || onStack(entry))
            // jump to 8, else continue back to 4
            break;
    }
    while (true) {
        if (// step 7: on later than entry
        !skip)
            entry = formattingElements.get(++pos);
        // should not occur, as we break at last element
        Validate.notNull(entry);
        // 8. create new element from element, 9 insert into current node, onto stack
        // can only skip increment from 4.
        skip = false;
        // todo: avoid fostering here?
        Element newEl = insertStartTag(entry.nodeName());
        // newEl.namespace(entry.namespace()); // todo: namespaces
        newEl.attributes().addAll(entry.attributes());
        // 10. replace entry with new entry
        formattingElements.set(pos, newEl);
        // 11
        if (// if not last entry in list, jump to 7
        pos == size - 1)
            break;
    }
}","public void test01012() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.reconstructFormattingElements();
}",""
"void replaceActiveFormattingElement(Element out, Element in) {
    replaceInQueue(formattingElements, out, in);
}","public void test01113() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
    htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
}",""
"Element insertEmpty(Token.StartTag startTag) {
    Tag tag = Tag.valueOf(startTag.name());
    Element el = new Element(tag, baseUri, startTag.attributes);
    insertNode(el);
    if (startTag.isSelfClosing()) {
        if (tag.isKnownTag()) {
            // if not acked, promulagates error
            if (tag.isSelfClosing())
                tokeniser.acknowledgeSelfClosingFlag();
        } else {
            // unknown tag, remember this is self closing for output
            tag.setSelfClosing();
            // not an distinct error
            tokeniser.acknowledgeSelfClosingFlag();
        }
    }
    return el;
}","public void test01214() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""h6"", attributes0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertEmpty(token_StartTag1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void clearStackToTableRowContext() {
    clearStackToContext(""tr"");
}","public void test01315() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    htmlTreeBuilder0.clearStackToTableRowContext();
}",""
"void clearStackToTableBodyContext() {
    clearStackToContext(""tbody"", ""tfoot"", ""thead"");
}","public void test01416() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    htmlTreeBuilder0.clearStackToTableBodyContext();
}",""
"@Override
public String toString() {
    return ""TreeBuilder{"" + ""currentToken="" + currentToken + "", state="" + state + "", currentElement="" + currentElement() + '}';
}","public void test01517() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    String string0 = htmlTreeBuilder0.toString();
    assertNotNull(string0);
}",""
"HtmlTreeBuilderState state() {
    return state;
}","public void test01618() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    htmlTreeBuilder0.state();
}",""
"@Override
protected boolean process(Token token) {
    currentToken = token;
    return this.state.process(token, this);
}","public void test01719() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    CharacterReader characterReader0 = htmlTreeBuilder0.reader;
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token.Comment token_Comment0 = tokeniser0.commentPending;
    boolean boolean0 = htmlTreeBuilder0.process(token_Comment0);
    assertTrue(boolean0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test01820() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.pop();
    assertEquals(""uS\""c%)-V"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test01821() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.pop();
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !StringUtil.in(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test01822() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.pop();
    boolean boolean0 = htmlTreeBuilder0.inSelectScope(""'TjF"");
    assertFalse(boolean0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test01923() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{btCo,W<8"", ""Q[{btCo,W<8"");
    Element element0 = document0.head();
    boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"boolean isSpecial(Element el) {
    // todo: mathml's mi, mo, mn
    // todo: svg's foreigObject, desc, title
    String name = el.nodeName();
    return StringUtil.in(name, TagSearchSpecial);
}","public void test01924() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{btCo,W<8"", ""Q[{btCo,W<8"");
    Element element0 = document0.head();
    boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
    assertTrue(boolean0);
}",""
"boolean isSpecial(Element el) {
    // todo: mathml's mi, mo, mn
    // todo: svg's foreigObject, desc, title
    String name = el.nodeName();
    return StringUtil.in(name, TagSearchSpecial);
}","public void test02025() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""colgroup"");
    boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
    assertFalse(boolean0);
}",""
"boolean isFosterInserts() {
    return fosterInserts;
}","public void test02126() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
    assertFalse(boolean0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test02227() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Element element0 = htmlTreeBuilder0.insertStartTag(""style"");
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test02328() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Vl};:e"", ""progress"");
    CharacterReader characterReader0 = new CharacterReader(""noscript"");
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
    Token.StartTag token_StartTag0 = tokeniser0.startPending;
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""RKjuL-3TR3)%"", attributes0);
    Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test02329() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Vl};:e"", ""progress"");
    CharacterReader characterReader0 = new CharacterReader(""noscript"");
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
    Token.StartTag token_StartTag0 = tokeniser0.startPending;
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""RKjuL-3TR3)%"", attributes0);
    Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
    assertEquals(""progress"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test02430() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""thead"", "" > "");
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public String baseUri() {
    return baseUri;
}","public void test02431() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""thead"", "" > "");
    assertEquals("">"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"boolean inTableScope(String targetName) {
    return inSpecificScope(targetName, TagSearchTableScope, null);
}","public void test02432() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""thead"", "" > "");
    boolean boolean0 = htmlTreeBuilder0.inTableScope(""EgTf$"");
    assertFalse(boolean0);
}",""
"public String location() {
    return location;
}","public void test02533() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    assertEquals(""uS\""c%)-V"", document0.location());
}","/**
 * Get the URL this Document was parsed from. If the starting URL is a redirect,
 * this will return the final URL from which the document was served from.
 * @return location
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test02534() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean inScope(String targetName, String[] extras) {
    return inSpecificScope(targetName, TagsSearchInScope, extras);
    // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml
    // todo: in svg namespace: forignOjbect, desc, title
}","public void test02535() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.inScope(""body"", htmlTreeBuilder0.TagsSearchInScope);
    assertTrue(boolean0);
}",""
"ArrayList<Element> getStack() {
    return stack;
}","public void test02636() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
    assertNull(arrayList0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test02838() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.getHeadElement();
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test02839() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.getHeadElement();
    assertEquals(""uS\""c%)-V"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test02840() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.getHeadElement();
    assertEquals(0, element0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"Element getFromStack(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.nodeName().equals(elName)) {
            return next;
        }
    }
    return null;
}","public void test02941() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Element element0 = htmlTreeBuilder0.getFromStack(""TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@13, state=InBody, currentElement=<body />}"");
    assertNull(element0);
}",""
"public String location() {
    return location;
}","public void test03042() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.initialiseParse(""Ca"", ""'jF"", (ParseErrorList) null);
    Document document0 = htmlTreeBuilder0.getDocument();
    assertEquals(""'jF"", document0.location());
}","/**
 * Get the URL this Document was parsed from. If the starting URL is a redirect,
 * this will return the final URL from which the document was served from.
 * @return location
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test03143() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""F"", ""F"", (ParseErrorList) null);
    Document document0 = htmlTreeBuilder0.getDocument();
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"String getBaseUri() {
    return baseUri;
}","public void test03244() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    String string0 = htmlTreeBuilder0.getBaseUri();
    assertEquals("""", string0);
}",""
"boolean framesetOk() {
    return framesetOk;
}","public void test03345() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.framesetOk();
    assertTrue(boolean0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test03447() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    assertEquals(""uS\""c%)-V"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"boolean framesetOk() {
    return framesetOk;
}","public void test03448() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.framesetOk();
    assertFalse(boolean0);
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""td"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test03549() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.resetInsertionMode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void replaceOnStack(Element out, Element in) {
    replaceInQueue(stack, out, in);
}","public void test03650() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean removeFromStack(Element el) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            stack.remove(pos);
            return true;
        }
    }
    return false;
}","public void test03751() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""WyEI]'7rN"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.removeFromStack(document0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void push(Element element) {
    stack.add(element);
}","public void test03852() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.push((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean process(Token token, HtmlTreeBuilderState state) {
    currentToken = token;
    return state.process(token, this);
}","public void test03953() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterFrameset;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process((Token) null, htmlTreeBuilderState0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilderState$22"", e);
    }
}",""
"boolean process(Token token, HtmlTreeBuilderState state) {
    currentToken = token;
    return state.process(token, this);
}","public void test04054() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    CharacterReader characterReader0 = new CharacterReader(""pre"");
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(1223);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token.Tag token_Tag0 = tokeniser0.createTagPending(true);
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InHeadNoscript;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process(token_Tag0, htmlTreeBuilderState0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be false
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean process(Token token, HtmlTreeBuilderState state) {
    currentToken = token;
    return state.process(token, this);
}","public void test04155() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    CharacterReader characterReader0 = new CharacterReader(""table"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token.Doctype token_Doctype0 = tokeniser0.doctypePending;
    Token.TokenType token_TokenType0 = Token.TokenType.Character;
    token_Doctype0.type = token_TokenType0;
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHead;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Character
        //
        verifyException(""org.jsoup.parser.Token"", e);
    }
}",""
"@Override
protected boolean process(Token token) {
    currentToken = token;
    return this.state.process(token, this);
}","public void test04256() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    CharacterReader characterReader0 = new CharacterReader(""f2*BS>:okK]H<=p([+:"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token.Doctype token_Doctype0 = tokeniser0.doctypePending;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process(token_Doctype0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"@Override
protected boolean process(Token token) {
    currentToken = token;
    return this.state.process(token, this);
}","public void test04357() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""center"", ""center"");
    Token.StartTag token_StartTag0 = new Token.StartTag();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process(token_StartTag0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be false
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void popStackToClose(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        stack.remove(pos);
        if (next.nodeName().equals(elName))
            break;
    }
}","public void test04458() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.popStackToClose(""5"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void popStackToBefore(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.nodeName().equals(elName)) {
            break;
        } else {
            stack.remove(pos);
        }
    }
}","public void test04559() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.popStackToBefore((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element pop() {
    int size = stack.size();
    return stack.remove(size - 1);
}","public void test04660() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.pop();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors) {
    // context may be null
    state = HtmlTreeBuilderState.Initial;
    initialiseParse(inputFragment, baseUri, errors);
    contextElement = context;
    fragmentParsing = true;
    Element root = null;
    if (context != null) {
        if (// quirks setup:
        context.ownerDocument() != null)
            doc.quirksMode(context.ownerDocument().quirksMode());
        // initialise the tokeniser state:
        String contextTag = context.tagName();
        if (StringUtil.in(contextTag, ""title"", ""textarea""))
            tokeniser.transition(TokeniserState.Rcdata);
        else if (StringUtil.in(contextTag, ""iframe"", ""noembed"", ""noframes"", ""style"", ""xmp""))
            tokeniser.transition(TokeniserState.Rawtext);
        else if (contextTag.equals(""script""))
            tokeniser.transition(TokeniserState.ScriptData);
        else if (contextTag.equals((""noscript"")))
            // if scripting enabled, rawtext
            tokeniser.transition(TokeniserState.Data);
        else if (contextTag.equals(""plaintext""))
            tokeniser.transition(TokeniserState.Data);
        else
            // default
            tokeniser.transition(TokeniserState.Data);
        root = new Element(Tag.valueOf(""html""), baseUri);
        doc.appendChild(root);
        stack.add(root);
        resetInsertionMode();
        // setup form element to nearest form on context (up ancestor chain). ensures form controls are associated
        // with form correctly
        Elements contextChain = context.parents();
        contextChain.add(0, context);
        for (Element parent : contextChain) {
            if (parent instanceof FormElement) {
                formElement = (FormElement) parent;
                break;
            }
        }
    }
    runParser();
    if (context != null && root != null)
        return root.childNodes();
    else
        return doc.childNodes();
}","public void test04761() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    ParseErrorList parseErrorList0 = ParseErrorList.tracking((-684));
    // Undeclared exception!
    try {
        htmlTreeBuilder0.parseFragment((String) null, document0, ""utf"", parseErrorList0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String input must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
Document parse(String input, String baseUri, ParseErrorList errors) {
    state = HtmlTreeBuilderState.Initial;
    baseUriSetFromDoc = false;
    return super.parse(input, baseUri, errors);
}","public void test04862() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(1186);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.parse(""StartTag"", (String) null, parseErrorList0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // BaseURI must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean onStack(Element el) {
    return isElementInQueue(stack, el);
}","public void test04963() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.onStack((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void maybeSetBaseUri(Element base) {
    if (// only listen to the first <base href> in parse
    baseUriSetFromDoc)
        return;
    String href = base.absUrl(""href"");
    if (href.length() != 0) {
        // ignore <base target> etc
        baseUri = href;
        baseUriSetFromDoc = true;
        // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants
        doc.setBaseUri(href);
    }
}","public void test05064() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element insertStartTag(String startTagName) {
    Element el = new Element(Tag.valueOf(startTagName), baseUri);
    insert(el);
    return el;
}","public void test05165() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertStartTag("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void insertOnStackAfter(Element after, Element in) {
    int i = stack.lastIndexOf(after);
    Validate.isTrue(i != -1);
    stack.add(i + 1, in);
}","public void test05266() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Tag tag0 = Tag.valueOf(""3y8r]MK("");
    TextNode textNode0 = TextNode.createFromEncoded(""sQ+V0KT4wmmv6.e=t"", ""sQ+V0KT4wmmv6.e=t"");
    Attributes attributes0 = textNode0.attributes();
    Element element0 = new Element(tag0, ""sQ+V0KT4wmmv6.e=t"", attributes0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertOnStackAfter(element0, element0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void insertInFosterParent(Node in) {
    Element fosterParent;
    Element lastTable = getFromStack(""table"");
    boolean isLastTableParent = false;
    if (lastTable != null) {
        if (lastTable.parent() != null) {
            fosterParent = lastTable.parent();
            isLastTableParent = true;
        } else
            fosterParent = aboveOnStack(lastTable);
    } else {
        // no table == frag
        fosterParent = stack.get(0);
    }
    if (isLastTableParent) {
        // last table cannot be null by this point.
        Validate.notNull(lastTable);
        lastTable.before(in);
    } else
        fosterParent.appendChild(in);
}","public void test05367() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void insertInFosterParent(Node in) {
    Element fosterParent;
    Element lastTable = getFromStack(""table"");
    boolean isLastTableParent = false;
    if (lastTable != null) {
        if (lastTable.parent() != null) {
            fosterParent = lastTable.parent();
            isLastTableParent = true;
        } else
            fosterParent = aboveOnStack(lastTable);
    } else {
        // no table == frag
        fosterParent = stack.get(0);
    }
    if (isLastTableParent) {
        // last table cannot be null by this point.
        Validate.notNull(lastTable);
        lastTable.before(in);
    } else
        fosterParent.appendChild(in);
}","public void test05468() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""Q[{bt1CoW<8"";
    stringArray0[1] = ""Q[{bt1CoW<8"";
    htmlTreeBuilder0.popStackToClose(stringArray0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"FormElement insertForm(Token.StartTag startTag, boolean onStack) {
    Tag tag = Tag.valueOf(startTag.name());
    FormElement el = new FormElement(tag, baseUri, startTag.attributes);
    setFormElement(el);
    insertNode(el);
    if (onStack)
        stack.add(el);
    return el;
}","public void test05569() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertForm((Token.StartTag) null, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"FormElement insertForm(Token.StartTag startTag, boolean onStack) {
    Tag tag = Tag.valueOf(startTag.name());
    FormElement el = new FormElement(tag, baseUri, startTag.attributes);
    setFormElement(el);
    insertNode(el);
    if (onStack)
        stack.add(el);
    return el;
}","public void test05670() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    CharacterReader characterReader0 = new CharacterReader("""");
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
    Token.StartTag token_StartTag0 = tokeniser0.startPending;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be false
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Element insertEmpty(Token.StartTag startTag) {
    Tag tag = Tag.valueOf(startTag.name());
    Element el = new Element(tag, baseUri, startTag.attributes);
    insertNode(el);
    if (startTag.isSelfClosing()) {
        if (tag.isKnownTag()) {
            // if not acked, promulagates error
            if (tag.isSelfClosing())
                tokeniser.acknowledgeSelfClosingFlag();
        } else {
            // unknown tag, remember this is self closing for output
            tag.setSelfClosing();
            // not an distinct error
            tokeniser.acknowledgeSelfClosingFlag();
        }
    }
    return el;
}","public void test05771() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element insert(Token.StartTag startTag) {
    // handle empty unknown tags
    // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
    if (startTag.isSelfClosing()) {
        Element el = insertEmpty(startTag);
        stack.add(el);
        // handles <script />, otherwise needs breakout steps from script data
        tokeniser.transition(TokeniserState.Data);
        // ensure we get out of whatever state we are in. emitted for yielded processing
        tokeniser.emit(emptyEnd.reset().name(el.tagName()));
        return el;
    }
    Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
    insert(el);
    return el;
}","public void test05872() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert((Token.StartTag) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void insert(Token.Comment commentToken) {
    Comment comment = new Comment(commentToken.getData(), baseUri);
    insertNode(comment);
}","public void test05973() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert((Token.Comment) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void insert(Token.Character characterToken) {
    Node node;
    // characters in script and style go in as datanodes, not text nodes
    String tagName = currentElement().tagName();
    if (tagName.equals(""script"") || tagName.equals(""style""))
        node = new DataNode(characterToken.getData(), baseUri);
    else
        node = new TextNode(characterToken.getData(), baseUri);
    // doesn't use insertNode, because we don't foster these; and will always have a stack.
    currentElement().appendChild(node);
}","public void test06074() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert((Token.Character) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"void insert(Element el) {
    insertNode(el);
    stack.add(el);
}","public void test06175() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"boolean inTableScope(String targetName) {
    return inSpecificScope(targetName, TagSearchTableScope, null);
}","public void test06276() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""Q[{bt1CoW<8"";
    stringArray0[1] = ""Q[{bt1CoW<8"";
    htmlTreeBuilder0.popStackToClose(stringArray0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inTableScope(""Q[{bt1CoW<8"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !StringUtil.in(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test06377() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inSelectScope((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean inScope(String targetName, String[] extras) {
    return inSpecificScope(targetName, TagsSearchInScope, extras);
    // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml
    // todo: in svg namespace: forignOjbect, desc, title
}","public void test06478() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.popStackToClose(""AfterDoctypeSystemIdentifier"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(""textarea"", htmlTreeBuilder0.TagsSearchInScope);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Element getFromStack(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.nodeName().equals(elName)) {
            return next;
        }
    }
    return null;
}","public void test06579() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.getFromStack((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void generateImpliedEndTags(String excludeTag) {
    while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && StringUtil.in(currentElement().nodeName(), TagSearchEndTags)) pop();
}","public void test06680() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.generateImpliedEndTags("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}","/**
 *     11.2.5.2 Closing elements that have implied end tags<p/>
 *     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
 *     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
 *     the UA must pop the current node off the stack of open elements.
 *
 *     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the
 *     process, then the UA must perform the above steps as if that element was not in the above list.
 */"
"void error(HtmlTreeBuilderState state) {
    if (errors.canAddError())
        errors.add(new ParseError(reader.pos(), ""Unexpected token [%s] when in state [%s]"", currentToken.tokenType(), state));
}","public void test06781() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterFrameset;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element aboveOnStack(Element el) {
    assert onStack(el);
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            return stack.get(pos - 1);
        }
    }
    return null;
}","public void test06882() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.aboveOnStack((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void clearFormattingElementsToLastMarker() {
    while (!formattingElements.isEmpty()) {
        Element el = removeLastFormattingElement();
        if (el == null)
            break;
    }
}","public void test06983() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.clearFormattingElementsToLastMarker();
}",""
"void generateImpliedEndTags(String excludeTag) {
    while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && StringUtil.in(currentElement().nodeName(), TagSearchEndTags)) pop();
}","public void test07084() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = new ParseErrorList(19, (-1444061932));
    htmlTreeBuilder0.parse(""TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@13, state=InBody, currentElement=<body />}"", ""body"", parseErrorList0);
    htmlTreeBuilder0.generateImpliedEndTags(""TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@13, state=InBody, currentElement=<body />}"");
}","/**
 *     11.2.5.2 Closing elements that have implied end tags<p/>
 *     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
 *     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
 *     the UA must pop the current node off the stack of open elements.
 *
 *     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the
 *     process, then the UA must perform the above steps as if that element was not in the above list.
 */"
"Element aboveOnStack(Element el) {
    assert onStack(el);
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            return stack.get(pos - 1);
        }
    }
    return null;
}","public void test07185() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.aboveOnStack(document0);
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"void popStackToBefore(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.nodeName().equals(elName)) {
            break;
        } else {
            stack.remove(pos);
        }
    }
}","public void test07286() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    htmlTreeBuilder0.popStackToBefore("" N/A6$h"");
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test07387() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
    Token.StartTag token_StartTag0 = tokeniser0.startPending;
    TextNode textNode0 = new TextNode(""uS\""c%)-V"", ""Q[{bt1CoW<8"");
    Attributes attributes0 = textNode0.attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""style"", attributes0);
    FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
    assertEquals(1, formElement0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test07488() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Tag tag0 = Tag.valueOf(""BZ(%L.wD^u+"");
    TextNode textNode0 = TextNode.createFromEncoded(""BZ(%L.wD^u+"", ""2 =`hrBUh16cL="");
    Attributes attributes0 = textNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""BZ(%L.wD^u+"", attributes0);
    htmlTreeBuilder0.maybeSetBaseUri(formElement0);
    assertEquals(0, formElement0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean inListItemScope(String targetName) {
    return inScope(targetName, TagSearchList);
}","public void test07589() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inListItemScope(""Q[{bt1CoW<8"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void newPendingTableCharacters() {
    pendingTableCharacters = new ArrayList<String>();
}","public void test07690() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.newPendingTableCharacters();
}",""
"void setFormElement(FormElement formElement) {
    this.formElement = formElement;
}","public void test07791() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.setFormElement((FormElement) null);
}",""
"Document getDocument() {
    return doc;
}","public void test07892() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.getDocument();
    assertNull(document0);
}",""
"String getBaseUri() {
    return baseUri;
}","public void test07993() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String string0 = htmlTreeBuilder0.getBaseUri();
    assertNull(string0);
}",""
"Element getActiveFormattingElement(String nodeName) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (// scope marker
        next == null)
            break;
        else if (next.nodeName().equals(nodeName))
            return next;
    }
    return null;
}","public void test08094() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
    Element element0 = htmlTreeBuilder0.getActiveFormattingElement(""7Sy~(C-Jv"");
    assertNull(element0);
}",""
"Element getActiveFormattingElement(String nodeName) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (// scope marker
        next == null)
            break;
        else if (next.nodeName().equals(nodeName))
            return next;
    }
    return null;
}","public void test08195() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Element element0 = htmlTreeBuilder0.getActiveFormattingElement(""%>vDE"");
    assertNull(element0);
}",""
"void removeFromActiveFormattingElements(Element el) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (next == el) {
            formattingElements.remove(pos);
            break;
        }
    }
}","public void test08296() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
}",""
"Element removeLastFormattingElement() {
    int size = formattingElements.size();
    if (size > 0)
        return formattingElements.remove(size - 1);
    else
        return null;
}","public void test08397() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
    assertNull(element0);
}",""
"Element lastFormattingElement() {
    return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size() - 1) : null;
}","public void test08498() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
    Element element0 = htmlTreeBuilder0.lastFormattingElement();
    assertNull(element0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test08599() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""body"", parseErrorList0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !StringUtil.in(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test085100() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""body"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.inSelectScope(""body"");
    assertTrue(boolean0);
}",""
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !StringUtil.in(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test086101() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    htmlTreeBuilder0.popStackToClose(""sGCm 3w\""jt+7rNsfIS"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inSelectScope(""'QjF"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inButtonScope(String targetName) {
    return inScope(targetName, TagSearchButton);
}","public void test087104() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.inButtonScope(""Qu.e9l!"");
    assertFalse(boolean0);
}",""
"boolean inButtonScope(String targetName) {
    return inScope(targetName, TagSearchButton);
}","public void test088107() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.inButtonScope(""body"");
    assertTrue(boolean0);
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""td"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test089108() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""thead"", "" > "");
    htmlTreeBuilder0.push(document0);
    htmlTreeBuilder0.resetInsertionMode();
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test090109() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    Element element0 = document0.head();
    ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""Q[{bt1CoW<8"", element0, ""Q[{bt1CoW<8"", parseErrorList0);
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test090110() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    Element element0 = document0.head();
    ParseErrorList parseErrorList0 = htmlTreeBuilder0.errors;
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""Q[{bt1CoW<8"", element0, ""Q[{bt1CoW<8"", parseErrorList0);
    assertEquals(0, element0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test091112() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    htmlTreeBuilder0.push(document0);
    htmlTreeBuilder0.replaceOnStack(document0, document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"void clearStackToTableContext() {
    clearStackToContext(""table"");
}","public void test092113() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    htmlTreeBuilder0.clearStackToTableContext();
}",""
"void popStackToBefore(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.nodeName().equals(elName)) {
            break;
        } else {
            stack.remove(pos);
        }
    }
}","public void test093114() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    htmlTreeBuilder0.popStackToBefore(""html"");
}",""
"void popStackToClose(String... elNames) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        stack.remove(pos);
        if (StringUtil.in(next.nodeName(), elNames))
            break;
    }
}","public void test094115() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    htmlTreeBuilder0.popStackToClose(htmlTreeBuilder0.TagsSearchInScope);
}",""
"boolean inScope(String targetName) {
    return inScope(targetName, null);
}","public void test095116() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""Q[{bt1CoW<8"";
    stringArray0[1] = ""Q[{bt1CoW<8"";
    htmlTreeBuilder0.popStackToClose(stringArray0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(""Q[{bt1CoW<8"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean removeFromStack(Element el) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            stack.remove(pos);
            return true;
        }
    }
    return false;
}","public void test096117() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertFalse(boolean0);
}",""
"public String location() {
    return location;
}","public void test096118() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertEquals(""uS\""c%)-V"", document0.location());
}","/**
 * Get the URL this Document was parsed from. If the starting URL is a redirect,
 * this will return the final URL from which the document was served from.
 * @return location
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test096119() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""body"", ""uS\""c%)-V"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"Element getFromStack(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.nodeName().equals(elName)) {
            return next;
        }
    }
    return null;
}","public void test097120() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""body"", ""body"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.getFromStack(""body"");
    assertNotNull(element0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test097121() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""body"", ""body"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.getFromStack(""body"");
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"boolean onStack(Element el) {
    return isElementInQueue(stack, el);
}","public void test098122() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    Element element0 = htmlTreeBuilder0.currentElement();
    boolean boolean0 = htmlTreeBuilder0.onStack(element0);
    assertTrue(boolean0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test098123() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    Element element0 = htmlTreeBuilder0.currentElement();
    boolean boolean0 = htmlTreeBuilder0.onStack(element0);
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test099124() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    Element element0 = htmlTreeBuilder0.insertStartTag(""input"");
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"void insert(Token.Comment commentToken) {
    Comment comment = new Comment(commentToken.getData(), baseUri);
    insertNode(comment);
}","public void test100125() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""Q[{btCo,W<8"", ""Q[{btCo,W<8"");
    Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
    Token.Comment token_Comment0 = tokeniser0.commentPending;
    htmlTreeBuilder0.insert(token_Comment0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test101126() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.setFosterInserts(true);
    Element element0 = htmlTreeBuilder0.insertStartTag(""systemId"");
    assertEquals(2, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"Element insert(Token.StartTag startTag) {
    // handle empty unknown tags
    // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
    if (startTag.isSelfClosing()) {
        Element el = insertEmpty(startTag);
        stack.add(el);
        // handles <script />, otherwise needs breakout steps from script data
        tokeniser.transition(TokeniserState.Data);
        // ensure we get out of whatever state we are in. emitted for yielded processing
        tokeniser.emit(emptyEnd.reset().name(el.tagName()));
        return el;
    }
    Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
    insert(el);
    return el;
}","public void test102127() throws Throwable {
    Token.StartTag token_StartTag0 = new Token.StartTag();
    token_StartTag0.selfClosing = true;
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert(token_StartTag0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be false
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test103129() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = new ParseErrorList(512, 512);
    Document document0 = htmlTreeBuilder0.parse(""TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@13, state=InBody, currentElement=<body />}"", ""TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@13, state=InBody, currentElement=<body />}"", parseErrorList0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean isFragmentParsing() {
    return fragmentParsing;
}","public void test104130() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""thead"", "" > "");
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(1302);
    htmlTreeBuilder0.parseFragment(""thead"", document0, ""-(<(LWqCI8<W5Pk"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
    assertTrue(boolean0);
}",""
"void clearStackToTableContext() {
    clearStackToContext(""table"");
}","public void test106132() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.clearStackToTableContext();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"HtmlTreeBuilderState originalState() {
    return originalState;
}","public void test107133() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.originalState();
}",""
"boolean inTableScope(String targetName) {
    return inSpecificScope(targetName, TagSearchTableScope, null);
}","public void test108134() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inTableScope(""Q[{bt1CoW<8"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void insert(Token.Comment commentToken) {
    Comment comment = new Comment(commentToken.getData(), baseUri);
    insertNode(comment);
}","public void test109135() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.Comment token_Comment0 = new Token.Comment();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert(token_Comment0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean isSpecial(Element el) {
    // todo: mathml's mi, mo, mn
    // todo: svg's foreigObject, desc, title
    String name = el.nodeName();
    return StringUtil.in(name, TagSearchSpecial);
}","public void test110136() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.isSpecial((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean removeFromStack(Element el) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            stack.remove(pos);
            return true;
        }
    }
    return false;
}","public void test111137() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    htmlTreeBuilder0.push(document0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertTrue(boolean0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test111138() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    htmlTreeBuilder0.push(document0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean isFosterInserts() {
    return fosterInserts;
}","public void test112139() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.setFosterInserts(true);
    boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
    assertTrue(boolean0);
}",""
"boolean isFragmentParsing() {
    return fragmentParsing;
}","public void test113140() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
    assertFalse(boolean0);
}",""
"boolean onStack(Element el) {
    return isElementInQueue(stack, el);
}","public void test114141() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    boolean boolean0 = htmlTreeBuilder0.onStack(document0);
    assertFalse(boolean0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test114142() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""Q[{bt1CoW<8"", ""Q[{bt1CoW<8"");
    boolean boolean0 = htmlTreeBuilder0.onStack(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean inScope(String targetName) {
    return inScope(targetName, null);
}","public void test116144() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(""n7{>J#A%Cur/S3{A="");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"HtmlTreeBuilderState state() {
    return state;
}","public void test118146() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.state();
}",""
"void clearStackToTableRowContext() {
    clearStackToContext(""tr"");
}","public void test119147() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"FormElement getFormElement() {
    return formElement;
}","public void test120148() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    FormElement formElement0 = htmlTreeBuilder0.getFormElement();
    assertNull(formElement0);
}",""
"void clearFormattingElementsToLastMarker() {
    while (!formattingElements.isEmpty()) {
        Element el = removeLastFormattingElement();
        if (el == null)
            break;
    }
}","public void test121149() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.insertMarkerToFormattingElements();
    htmlTreeBuilder0.clearFormattingElementsToLastMarker();
}",""
"void generateImpliedEndTags() {
    generateImpliedEndTags(null);
}","public void test122150() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.generateImpliedEndTags();
}",""
"void markInsertionMode() {
    originalState = state;
}","public void test123151() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.markInsertionMode();
}",""
"boolean process(Token token, HtmlTreeBuilderState state) {
    currentToken = token;
    return state.process(token, this);
}","public void test124152() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.EOF token_EOF0 = new Token.EOF();
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterFrameset;
    boolean boolean0 = htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
    assertTrue(boolean0);
}",""
"@Override
public String toString() {
    return ""TreeBuilder{"" + ""currentToken="" + currentToken + "", state="" + state + "", currentElement="" + currentElement() + '}';
}","public void test125153() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"void clearStackToTableBodyContext() {
    clearStackToContext(""tbody"", ""tfoot"", ""thead"");
}","public void test126154() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element getHeadElement() {
    return headElement;
}","public void test127155() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Element element0 = htmlTreeBuilder0.getHeadElement();
    assertNull(element0);
}",""
