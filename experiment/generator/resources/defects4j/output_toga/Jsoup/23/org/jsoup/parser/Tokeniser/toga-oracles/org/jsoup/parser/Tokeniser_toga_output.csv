project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, (ParseErrorList) null);
    tokeniser0.createTempBuffer();
}",0,
project,0,test011,"public void test011() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""P#fU2u2;RkV/OVC_N}{"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    // Undeclared exception!
    try {
        tokeniser0.appropriateEndTagName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.Tokeniser"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""NotLessTilde"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    // Undeclared exception!
    try {
        tokeniser0.emitDoctypePending();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",1,
project,0,test033,"public void test033() throws Throwable {
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, (ParseErrorList) null);
    tokeniser0.acknowledgeSelfClosingFlag();
}",0,
project,0,test044,"public void test044() throws Throwable {
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, (ParseErrorList) null);
    tokeniser0.createCommentPending();
}",0,
project,0,test055,"public void test055() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""varphi"");
    ParseErrorList parseErrorList0 = new ParseErrorList(10765, 10765);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    // Undeclared exception!
    try {
        tokeniser0.isAppropriateEndTagToken();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.Tokeniser"", e);
    }
}",0,
project,0,test066,"public void test066() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""oO#k]W=uBw6Dy=~&"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token token0 = tokeniser0.read();
    assertEquals("""", characterReader0.toString());
}",0,
project,0,test078,"public void test078() throws Throwable {
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, (ParseErrorList) null);
    // Undeclared exception!
    try {
        tokeniser0.emitTagPending();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.Tokeniser"", e);
    }
}",0,
project,0,test089,"public void test089() throws Throwable {
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, (ParseErrorList) null);
    // Undeclared exception!
    try {
        tokeniser0.emitCommentPending();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test0910,"public void test0910() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""varphi"");
    ParseErrorList parseErrorList0 = new ParseErrorList(10765, 10765);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    boolean boolean0 = tokeniser0.currentNodeInHtmlNS();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1011,"public void test1011() throws Throwable {
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, (ParseErrorList) null);
    tokeniser0.createDoctypePending();
}",0,
project,0,test1112,"public void test1112() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""P#fU2u2;RkV/OVC_N}{"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    tokeniser0.getState();
}",0,
project,0,test1213,"public void test1213() throws Throwable {
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(881);
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
    Token.Tag token_Tag0 = tokeniser0.createTagPending(true);
    token_Tag0.selfClosing = true;
    tokeniser0.emit(token_Tag0);
    // Undeclared exception!
    try {
        tokeniser0.read();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.Tokeniser"", e);
    }
}",0,
project,0,test1314,"public void test1314() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
    Token token0 = tokeniser0.read();
    assertNotNull(token0);
}",0,assertNotNull(token0)
project,0,test1415,"public void test1415() throws Throwable {
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, (ParseErrorList) null);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    tokeniser0.emit(token_StartTag0);
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
    Token.EndTag token_EndTag0 = new Token.EndTag();
    tokeniser0.emit(token_EndTag0);
}",0,
project,0,test1617,"public void test1617() throws Throwable {
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
    Token.EndTag token_EndTag0 = new Token.EndTag();
    token_EndTag0.appendAttributeName(""[__KIY65"");
    token_EndTag0.newAttribute();
    tokeniser0.emit(token_EndTag0);
}",0,
project,0,test1718,"public void test1718() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xb>/:&CH'<B^oZI|y{"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token token0 = tokeniser0.read();
    assertNotNull(token0);
}",0,assertNotNull(token0)
project,0,test1821,"public void test1821() throws Throwable {
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    CharacterReader characterReader0 = new CharacterReader(""ii;>,Xd1)2,tCu~"");
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Character character0 = Character.valueOf('7');
    tokeniser0.consumeCharacterReference(character0, true);
    assertEquals("">,Xd1)2,tCu~"", characterReader0.toString());
}",0,
project,0,test1922,"public void test1922() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""There is an unread token pending!"");
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
    Character character0 = Character.valueOf('T');
    Character character1 = tokeniser0.consumeCharacterReference(character0, false);
    assertNull(character1);
}",0,
project,0,test2023,"public void test2023() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""&]5_I/<z9qJ"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
    assertNull(character0);
}",0,
project,0,test2124,"public void test2124() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#X3"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    tokeniser0.consumeCharacterReference((Character) null, true);
    assertEquals("""", characterReader0.toString());
}",0,assertNotNull(characterReader0.toString())
project,0,test2225,"public void test2225() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#1"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    tokeniser0.consumeCharacterReference((Character) null, false);
    assertEquals("""", characterReader0.toString());
}",0,assertNotNull(characterReader0.toString())
project,0,test2326,"public void test2326() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
    assertNull(character0);
}",0,
project,0,test2328,"public void test2328() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
    assertEquals(""#"", characterReader0.toString());
}",0,
project,0,test2430,"public void test2430() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""E=F&;bMGiwQG^+>F"");
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(3301);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    tokeniser0.read();
    assertEquals("""", characterReader0.toString());
}",0,assertNotNull(characterReader0.toString())
project,0,test2531,"public void test2531() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""planck"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    tokeniser0.consumeCharacterReference((Character) null, false);
    assertEquals("""", characterReader0.toString());
}",0,assertNotNull(characterReader0.toString())
project,0,test2633,"public void test2633() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""numeric reference with no numerals"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Character character0 = tokeniser0.consumeCharacterReference((Character) null, true);
    assertNull(character0);
}",0,
project,0,test2836,"public void test2836() throws Throwable {
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
    Token.Tag token_Tag0 = tokeniser0.createTagPending(false);
    assertNotNull(token_Tag0);
}",0,assertNotNull(token_Tag0)
project,0,test2937,"public void test2937() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""BW{A@<"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    tokeniser0.read();
    assertEquals("""", characterReader0.toString());
}",0,assertNotNull(characterReader0.toString())
project,0,test3039,"public void test3039() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("" X<"");
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(88);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token token0 = tokeniser0.read();
    assertEquals("""", characterReader0.toString());
}",0,
