{
  "test00" : {
    "methodSignature" : "public boolean isValid(Document dirtyDocument)",
    "methodName" : "isValid",
    "className" : "org.jsoup.safety.Cleaner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Whitelist whitelist0 = Whitelist.basicWithImages();\n    Cleaner cleaner0 = new Cleaner(whitelist0);\n    Document document0 = new Document(\"\");\n    cleaner0.isValid(document0);\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public boolean isValid(Document dirtyDocument)",
    "methodName" : "isValid",
    "className" : "org.jsoup.safety.Cleaner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Whitelist whitelist0 = Whitelist.basic();\n    Cleaner cleaner0 = new Cleaner(whitelist0);\n    cleaner0.isValid((Document) null);\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public Document clean(Document dirtyDocument)",
    "methodName" : "clean",
    "className" : "org.jsoup.safety.Cleaner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Whitelist whitelist0 = Whitelist.relaxed();\n    Cleaner cleaner0 = new Cleaner(whitelist0);\n    Document document0 = new Document(\"lf.>\\\"\");\n    cleaner0.clean(document0);\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public Document clean(Document dirtyDocument)",
    "methodName" : "clean",
    "className" : "org.jsoup.safety.Cleaner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Whitelist whitelist0 = new Whitelist();\n    Cleaner cleaner0 = new Cleaner(whitelist0);\n    cleaner0.clean((Document) null);\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "public boolean isValid(Document dirtyDocument)",
    "methodName" : "isValid",
    "className" : "org.jsoup.safety.Cleaner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Whitelist whitelist0 = Whitelist.basic();\n    Cleaner cleaner0 = new Cleaner(whitelist0);\n    Document document0 = Document.createShell(\"hT\");\n    document0.text(\"hT\");\n    boolean boolean0 = cleaner0.isValid(document0);\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "public Document clean(Document dirtyDocument)",
    "methodName" : "clean",
    "className" : "org.jsoup.safety.Cleaner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    Whitelist whitelist0 = Whitelist.basic();\n    Cleaner cleaner0 = new Cleaner(whitelist0);\n    Document document0 = Document.createShell(\"F~+?x1bgjG2'0\");\n    Document document1 = cleaner0.clean(document0);\n}",
    "testName" : "test55"
  },
  "test66" : {
    "methodSignature" : "public Cleaner(Whitelist whitelist)",
    "methodName" : "Cleaner",
    "className" : "org.jsoup.safety.Cleaner",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    Cleaner cleaner0 = null;\n    cleaner0 = new Cleaner((Whitelist) null);\n}",
    "testName" : "test66"
  }
}