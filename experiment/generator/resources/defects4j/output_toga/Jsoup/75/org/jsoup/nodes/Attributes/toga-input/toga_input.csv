focal_method,test_prefix,docstring
"public int size() {
    return size;
}","public void test000() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = Attribute.createFromEncoded(""org.jsoup.nodes.Attributes"", ""org.jsoup.nodes.Attributes"");
    Attributes attributes1 = attributes0.put(attribute0);
    attributes1.hashCode();
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test011() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    assertEquals(0, attributes1.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test012() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    Attributes attributes2 = attributes1.put(""=\"""", """");
    boolean boolean0 = attributes2.equals(attributes0);
    assertEquals(1, attributes1.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (o == null || getClass() != o.getClass())
        return false;
    Attributes that = (Attributes) o;
    if (size != that.size)
        return false;
    if (!Arrays.equals(keys, that.keys))
        return false;
    return Arrays.equals(vals, that.vals);
}","public void test013() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    Attributes attributes2 = attributes1.put(""=\"""", """");
    boolean boolean0 = attributes2.equals(attributes0);
    assertFalse(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"public int size() {
    return size;
}","public void test024() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""meta[charset]"", ""pS{q6zGQ?+REZy+?Js"");
    attributes0.putIgnoreCase("""", """");
    attributes0.remove("""");
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test035() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = new Attribute(""b.2NM"", ""9WZhldeAMNnU"", attributes0);
    Attributes attributes1 = attributes0.put(attribute0);
    Attributes attributes2 = attributes1.put(""LV?0B<|imMs _P3uz"", true);
    attributes2.putIgnoreCase(""9~h7&;@\""ukvksw+"", ""(eDMN-lh&2oXV"");
    Attributes attributes3 = attributes2.put(""mMkaS)^f1kh<8FK@"", ""9WZhldeAMNnU"");
    attributes2.put(""qK%e4xM@jmRp*(vCu{v"", true);
    attributes3.addAll(attributes1);
    assertEquals(5, attributes2.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test036() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = new Attribute(""b.2NM"", ""9WZhldeAMNnU"", attributes0);
    Attributes attributes1 = attributes0.put(attribute0);
    Attributes attributes2 = attributes1.put(""LV?0B<|imMs _P3uz"", true);
    attributes2.putIgnoreCase(""9~h7&;@\""ukvksw+"", ""(eDMN-lh&2oXV"");
    Attributes attributes3 = attributes2.put(""mMkaS)^f1kh<8FK@"", ""9WZhldeAMNnU"");
    attributes2.put(""qK%e4xM@jmRp*(vCu{v"", true);
    attributes3.addAll(attributes1);
    assertEquals(5, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test047() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    Attributes attributes2 = attributes1.put(""`\""Mxiv?X8|=rS#"", ""wlq8hR*hLL`$^%O"");
    Attribute attribute0 = new Attribute(""wlq8hR*hLL`$^%O"", ""4%'Z\"""", attributes2);
    attributes2.put(attribute0);
    String[] stringArray0 = new String[3];
    attributes1.keys = stringArray0;
    attributes2.put("""", ""4%'Z\"""");
    assertEquals(3, attributes1.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public Attributes put(String key, String value) {
    int i = indexOfKey(key);
    if (i != NotFound)
        vals[i] = value;
    else
        add(key, value);
    return this;
}","public void test048() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    Attributes attributes2 = attributes1.put(""`\""Mxiv?X8|=rS#"", ""wlq8hR*hLL`$^%O"");
    Attribute attribute0 = new Attribute(""wlq8hR*hLL`$^%O"", ""4%'Z\"""", attributes2);
    attributes2.put(attribute0);
    String[] stringArray0 = new String[3];
    attributes1.keys = stringArray0;
    attributes2.put("""", ""4%'Z\"""");
    assertNotSame(attributes0, attributes2);
}","/**
 * Set a new attribute, or replace an existing one by key.
 * @param key case sensitive attribute key
 * @param value attribute value
 * @return these attributes, for chaining
 */"
"public int size() {
    return size;
}","public void test059() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = new Attribute(""org.jsoup.nodes.Attributes$Dataset"", ""org.jsoup.nodes.Attributes$Dataset"", attributes0);
    Attributes attributes1 = attributes0.put(attribute0);
    int int0 = attributes1.size();
    assertEquals(1, int0);
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public Iterator<Attribute> iterator() {
    return new Iterator<Attribute>() {

        int i = 0;

        @Override
        public boolean hasNext() {
            return i < size;
        }

        @Override
        public Attribute next() {
            final Attribute attr = new Attribute(keys[i], vals[i], Attributes.this);
            i++;
            return attr;
        }

        @Override
        public void remove() {
            // next() advanced, so rewind
            Attributes.this.remove(--i);
        }
    };
}","public void test0610() throws Throwable {
    Attributes attributes0 = new Attributes();
    Iterator<Attribute> iterator0 = attributes0.iterator();
    assertNotNull(iterator0);
}",""
"public int size() {
    return size;
}","public void test0711() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    Attributes attributes2 = attributes1.put(""=\"""", false);
    attributes2.put(""=\"""", """");
    String[] stringArray0 = new String[5];
    stringArray0[0] = """";
    attributes1.keys = stringArray0;
    int int0 = attributes2.indexOfKey("""");
    assertEquals(1, attributes2.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"int indexOfKey(String key) {
    Validate.notNull(key);
    for (int i = 0; i < size; i++) {
        if (key.equals(keys[i]))
            return i;
    }
    return NotFound;
}","public void test0712() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    Attributes attributes2 = attributes1.put(""=\"""", false);
    attributes2.put(""=\"""", """");
    String[] stringArray0 = new String[5];
    stringArray0[0] = """";
    attributes1.keys = stringArray0;
    int int0 = attributes2.indexOfKey("""");
    assertEquals(0, int0);
}",""
"public int size() {
    return size;
}","public void test0813() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.putIgnoreCase(""`EEuNYv:nJ+J{L"", (String) null);
    Attributes attributes1 = attributes0.put(""b, s&(&qS"", true);
    int int0 = attributes1.indexOfKey(""b, s&(&qS"");
    assertEquals(2, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"int indexOfKey(String key) {
    Validate.notNull(key);
    for (int i = 0; i < size; i++) {
        if (key.equals(keys[i]))
            return i;
    }
    return NotFound;
}","public void test0814() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.putIgnoreCase(""`EEuNYv:nJ+J{L"", (String) null);
    Attributes attributes1 = attributes0.put(""b, s&(&qS"", true);
    int int0 = attributes1.indexOfKey(""b, s&(&qS"");
    assertEquals(1, int0);
}",""
"int indexOfKey(String key) {
    Validate.notNull(key);
    for (int i = 0; i < size; i++) {
        if (key.equals(keys[i]))
            return i;
    }
    return NotFound;
}","public void test0915() throws Throwable {
    Attributes attributes0 = new Attributes();
    int int0 = attributes0.indexOfKey(""VMdmBBfd"");
    assertEquals((-1), int0);
}",""
"public String html() {
    StringBuilder accum = new StringBuilder();
    try {
        // output settings a bit funky, but this html() seldom used
        html(accum, (new Document("""")).outputSettings());
    } catch (IOException e) {
        // ought never happen
        throw new SerializationException(e);
    }
    return accum.toString();
}","public void test1016() throws Throwable {
    Attributes attributes0 = new Attributes();
    String string0 = attributes0.html();
    assertEquals("""", string0);
}","/**
 *     Get the HTML representation of these attributes.
 *     @return HTML
 *     @throws SerializationException if the HTML representation of the attributes cannot be constructed.
 */"
"public int size() {
    return size;
}","public void test1117() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""5L-%=Hl*7I3]8g2k1"", ""5L-%=Hl*7I3]8g2k1"");
    String string0 = attributes1.getIgnoreCase(""5L-%=Hl*7I3]8g2k1"");
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public String getIgnoreCase(String key) {
    int i = indexOfKeyIgnoreCase(key);
    return i == NotFound ? EmptyString : checkNotNull(vals[i]);
}","public void test1118() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""5L-%=Hl*7I3]8g2k1"", ""5L-%=Hl*7I3]8g2k1"");
    String string0 = attributes1.getIgnoreCase(""5L-%=Hl*7I3]8g2k1"");
    assertEquals(""5L-%=Hl*7I3]8g2k1"", string0);
}","/**
 * Get an attribute's value by case-insensitive key
 * @param key the attribute name
 * @return the first matching attribute value if set; or empty string if not set (ora boolean attribute).
 */"
"// we track boolean attributes as null in values - they're just keys. so returns empty for consumers
static String checkNotNull(String val) {
    return val == null ? EmptyString : val;
}","public void test1219() throws Throwable {
    String string0 = Attributes.checkNotNull("""");
    assertEquals("""", string0);
}",""
"@Override
public String toString() {
    return html();
}","public void test1320() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    Attribute attribute0 = new Attribute(""RCDATAEndTagOpen"", ""RCDATAEndTagOpen"");
    attributes1.put(attribute0);
    attributes1.keys = null;
    // Undeclared exception!
    try {
        attributes1.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public void removeIgnoreCase(String key) {
    int i = indexOfKeyIgnoreCase(key);
    if (i != NotFound)
        remove(i);
}","public void test1421() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""data-"", ""SHeyv0VWK;r*"");
    attributes1.keys = null;
    // Undeclared exception!
    try {
        attributes0.removeIgnoreCase("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 *     Remove an attribute by key. <b>Case insensitive.</b>
 *     @param key attribute key to remove
 */"
"public void removeIgnoreCase(String key) {
    int i = indexOfKeyIgnoreCase(key);
    if (i != NotFound)
        remove(i);
}","public void test1522() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.removeIgnoreCase((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Remove an attribute by key. <b>Case insensitive.</b>
 *     @param key attribute key to remove
 */"
"public void removeIgnoreCase(String key) {
    int i = indexOfKeyIgnoreCase(key);
    if (i != NotFound)
        remove(i);
}","public void test1623() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.putIgnoreCase("""", ""data-"");
    Attributes attributes1 = attributes0.put(""data-"", ""SHeyv0VWK;r*"");
    String[] stringArray0 = new String[1];
    attributes1.vals = stringArray0;
    // Undeclared exception!
    try {
        attributes0.removeIgnoreCase("""");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
    }
}","/**
 *     Remove an attribute by key. <b>Case insensitive.</b>
 *     @param key attribute key to remove
 */"
"public void remove(String key) {
    int i = indexOfKey(key);
    if (i != NotFound)
        remove(i);
}","public void test1724() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""Should not be reachable"", ""org.jsoup.nodes.Attributes$Dataset$DatasetIterator"");
    Attributes attributes2 = attributes1.clone();
    attributes2.keys = null;
    // Undeclared exception!
    try {
        attributes2.remove(""org.jsoup.nodes.Attributes$Dataset$DatasetIterator"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 *     Remove an attribute by key. <b>Case sensitive.</b>
 *     @param key attribute key to remove
 */"
"public void remove(String key) {
    int i = indexOfKey(key);
    if (i != NotFound)
        remove(i);
}","public void test1825() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.remove((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Remove an attribute by key. <b>Case sensitive.</b>
 *     @param key attribute key to remove
 */"
"public void remove(String key) {
    int i = indexOfKey(key);
    if (i != NotFound)
        remove(i);
}","public void test1926() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = new Attribute(""I"", ""I"");
    Attributes attributes1 = attributes0.put(attribute0);
    attributes1.put("" i=\""I\"""", ""I"");
    Attributes attributes2 = attributes1.put("">"", "">"");
    String[] stringArray0 = new String[2];
    attributes2.keys = stringArray0;
    // Undeclared exception!
    try {
        attributes0.remove(""O*tr^"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 2
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 *     Remove an attribute by key. <b>Case sensitive.</b>
 *     @param key attribute key to remove
 */"
"void putIgnoreCase(String key, String value) {
    int i = indexOfKeyIgnoreCase(key);
    if (i != NotFound) {
        vals[i] = value;
        if (// case changed, update
        !keys[i].equals(key))
            keys[i] = key;
    } else
        add(key, value);
}","public void test2027() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.putIgnoreCase((String) null, ""org.jsoup.nodes.Attributes$1"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void putIgnoreCase(String key, String value) {
    int i = indexOfKeyIgnoreCase(key);
    if (i != NotFound) {
        vals[i] = value;
        if (// case changed, update
        !keys[i].equals(key))
            keys[i] = key;
    } else
        add(key, value);
}","public void test2128() throws Throwable {
    Attributes attributes0 = new Attributes();
    String[] stringArray0 = new String[2];
    attributes0.keys = stringArray0;
    // Undeclared exception!
    try {
        attributes0.putIgnoreCase(""reversed"", """");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public Attributes put(Attribute attribute) {
    Validate.notNull(attribute);
    put(attribute.getKey(), attribute.getValue());
    attribute.parent = this;
    return this;
}","public void test2229() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.vals = null;
    Attribute attribute0 = Attribute.createFromEncoded(""}CBA}@k%:m(lc7d,$"", ""0 #1,unlyI\""F<d ("");
    // Undeclared exception!
    try {
        attributes0.put(attribute0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 *     Set a new attribute, or replace an existing one by key.
 *     @param attribute attribute with case sensitive key
 *     @return these attributes, for chaining
 */"
"public Attributes put(Attribute attribute) {
    Validate.notNull(attribute);
    put(attribute.getKey(), attribute.getValue());
    attribute.parent = this;
    return this;
}","public void test2330() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.put((Attribute) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Set a new attribute, or replace an existing one by key.
 *     @param attribute attribute with case sensitive key
 *     @return these attributes, for chaining
 */"
"public Attributes put(Attribute attribute) {
    Validate.notNull(attribute);
    put(attribute.getKey(), attribute.getValue());
    attribute.parent = this;
    return this;
}","public void test2431() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = Attribute.createFromEncoded(""&quot;"", ""t8}n(Ukq@WGX"");
    Attributes attributes1 = attributes0.put(attribute0);
    String[] stringArray0 = new String[0];
    attributes1.keys = stringArray0;
    // Undeclared exception!
    try {
        attributes1.put(attribute0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 *     Set a new attribute, or replace an existing one by key.
 *     @param attribute attribute with case sensitive key
 *     @return these attributes, for chaining
 */"
"public Attributes put(String key, boolean value) {
    if (value)
        putIgnoreCase(key, null);
    else
        remove(key);
    return this;
}","public void test2532() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.vals = null;
    // Undeclared exception!
    try {
        attributes0.put(""org.jsoup.nodes.Attributes$1"", true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Set a new boolean attribute, remove attribute if value is false.
 * @param key case <b>insensitive</b> attribute key
 * @param value attribute value
 * @return these attributes, for chaining
 */"
"public Attributes put(String key, boolean value) {
    if (value)
        putIgnoreCase(key, null);
    else
        remove(key);
    return this;
}","public void test2633() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.put((String) null, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Set a new boolean attribute, remove attribute if value is false.
 * @param key case <b>insensitive</b> attribute key
 * @param value attribute value
 * @return these attributes, for chaining
 */"
"public Attributes put(String key, boolean value) {
    if (value)
        putIgnoreCase(key, null);
    else
        remove(key);
    return this;
}","public void test2734() throws Throwable {
    Attributes attributes0 = new Attributes();
    String[] stringArray0 = new String[6];
    attributes0.keys = stringArray0;
    // Undeclared exception!
    try {
        attributes0.put("""", true);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Set a new boolean attribute, remove attribute if value is false.
 * @param key case <b>insensitive</b> attribute key
 * @param value attribute value
 * @return these attributes, for chaining
 */"
"public Attributes put(String key, String value) {
    int i = indexOfKey(key);
    if (i != NotFound)
        vals[i] = value;
    else
        add(key, value);
    return this;
}","public void test2835() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    attributes1.keys = null;
    // Undeclared exception!
    try {
        attributes1.put(""tik7i"", ""h"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 * Set a new attribute, or replace an existing one by key.
 * @param key case sensitive attribute key
 * @param value attribute value
 * @return these attributes, for chaining
 */"
"public Attributes put(String key, String value) {
    int i = indexOfKey(key);
    if (i != NotFound)
        vals[i] = value;
    else
        add(key, value);
    return this;
}","public void test2936() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.put((String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Set a new attribute, or replace an existing one by key.
 * @param key case sensitive attribute key
 * @param value attribute value
 * @return these attributes, for chaining
 */"
"public Attributes put(String key, String value) {
    int i = indexOfKey(key);
    if (i != NotFound)
        vals[i] = value;
    else
        add(key, value);
    return this;
}","public void test3037() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    String[] stringArray0 = new String[6];
    attributes1.keys = stringArray0;
    // Undeclared exception!
    try {
        attributes1.put(""PBXi|eE-"", """");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Set a new attribute, or replace an existing one by key.
 * @param key case sensitive attribute key
 * @param value attribute value
 * @return these attributes, for chaining
 */"
"int indexOfKey(String key) {
    Validate.notNull(key);
    for (int i = 0; i < size; i++) {
        if (key.equals(keys[i]))
            return i;
    }
    return NotFound;
}","public void test3138() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.indexOfKey((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
    final int sz = size;
    for (int i = 0; i < sz; i++) {
        // inlined from Attribute.html()
        final String key = keys[i];
        final String val = vals[i];
        accum.append(' ').append(key);
        // collapse checked=null, checked="""", checked=checked; write out others
        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
            accum.append(""=\"""");
            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
            accum.append('""');
        }
    }
}","public void test3239() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = new Attribute(""org.jsoup.nodes.Attributes$Dataset"", ""org.jsoup.nodes.Attributes$Dataset"", attributes0);
    Attributes attributes1 = attributes0.put(attribute0);
    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""org.jsoup.parser.Token$Tag"");
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    // Undeclared exception!
    try {
        attributes1.html((Appendable) charBuffer0, document_OutputSettings0);
        fail(""Expecting exception: ReadOnlyBufferException"");
    } catch (ReadOnlyBufferException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.StringCharBuffer"", e);
    }
}",""
"final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
    final int sz = size;
    for (int i = 0; i < sz; i++) {
        // inlined from Attribute.html()
        final String key = keys[i];
        final String val = vals[i];
        accum.append(' ').append(key);
        // collapse checked=null, checked="""", checked=checked; write out others
        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
            accum.append(""=\"""");
            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
            accum.append('""');
        }
    }
}","public void test3340() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put("""", true);
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    // Undeclared exception!
    try {
        attributes1.html((Appendable) charBuffer0, document_OutputSettings0);
        fail(""Expecting exception: BufferOverflowException"");
    } catch (BufferOverflowException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.Buffer"", e);
    }
}",""
"final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
    final int sz = size;
    for (int i = 0; i < sz; i++) {
        // inlined from Attribute.html()
        final String key = keys[i];
        final String val = vals[i];
        accum.append(' ').append(key);
        // collapse checked=null, checked="""", checked=checked; write out others
        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
            accum.append(""=\"""");
            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
            accum.append('""');
        }
    }
}","public void test3441() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = new Attribute(""RCDATAEndTagOpen"", ""RCDATAEndTagOpen"");
    attributes0.put(attribute0);
    StringWriter stringWriter0 = new StringWriter();
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    document_OutputSettings0.charset((Charset) null);
    // Undeclared exception!
    try {
        attributes0.html((Appendable) stringWriter0, document_OutputSettings0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Document$OutputSettings"", e);
    }
}",""
"final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
    final int sz = size;
    for (int i = 0; i < sz; i++) {
        // inlined from Attribute.html()
        final String key = keys[i];
        final String val = vals[i];
        accum.append(' ').append(key);
        // collapse checked=null, checked="""", checked=checked; write out others
        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
            accum.append(""=\"""");
            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
            accum.append('""');
        }
    }
}","public void test3542() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = new Attribute(""b.2NM"", ""9WZhldeAMNnU"", attributes0);
    Attributes attributes1 = attributes0.put(attribute0);
    Attributes attributes2 = attributes1.put(""LV?0B<|imMs _P3uz"", true);
    attributes2.put(""mMkaS)^f1kh<8FK@"", ""9WZhldeAMNnU"");
    Attributes attributes3 = attributes1.clone();
    String[] stringArray0 = new String[2];
    attributes3.vals = stringArray0;
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    // Undeclared exception!
    try {
        attributes3.html((Appendable) outputStreamWriter0, document_OutputSettings0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"final void html(final Appendable accum, final Document.OutputSettings out) throws IOException {
    final int sz = size;
    for (int i = 0; i < sz; i++) {
        // inlined from Attribute.html()
        final String key = keys[i];
        final String val = vals[i];
        accum.append(' ').append(key);
        // collapse checked=null, checked="""", checked=checked; write out others
        if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {
            accum.append(""=\"""");
            Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false);
            accum.append('""');
        }
    }
}","public void test3643() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""z|b:q)cv6rpgml"", ""z|b:q)cv6rpgml"");
    PipedWriter pipedWriter0 = new PipedWriter();
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    try {
        attributes1.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedWriter"", e);
    }
}",""
"public String html() {
    StringBuilder accum = new StringBuilder();
    try {
        // output settings a bit funky, but this html() seldom used
        html(accum, (new Document("""")).outputSettings());
    } catch (IOException e) {
        // ought never happen
        throw new SerializationException(e);
    }
    return accum.toString();
}","public void test3744() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""data-"", ""X^XL_Gwy9 8GsB"");
    attributes1.vals = null;
    // Undeclared exception!
    try {
        attributes0.html();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 *     Get the HTML representation of these attributes.
 *     @return HTML
 *     @throws SerializationException if the HTML representation of the attributes cannot be constructed.
 */"
"public boolean hasKeyIgnoreCase(String key) {
    return indexOfKeyIgnoreCase(key) != NotFound;
}","public void test3845() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.hasKeyIgnoreCase((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key key to check for
 *     @return true if key exists, false otherwise
 */"
"public boolean hasKeyIgnoreCase(String key) {
    return indexOfKeyIgnoreCase(key) != NotFound;
}","public void test3946() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""&=ykP@l1G)"", ""&=ykP@l1G)"");
    String[] stringArray0 = new String[0];
    attributes1.keys = stringArray0;
    // Undeclared exception!
    try {
        attributes0.hasKeyIgnoreCase(""%vAi"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key key to check for
 *     @return true if key exists, false otherwise
 */"
"public boolean hasKey(String key) {
    return indexOfKey(key) != NotFound;
}","public void test4047() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.hasKey((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key case-sensitive key to check for
 *     @return true if key exists, false otherwise
 */"
"public String getIgnoreCase(String key) {
    int i = indexOfKeyIgnoreCase(key);
    return i == NotFound ? EmptyString : checkNotNull(vals[i]);
}","public void test4148() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = new Attribute(""c{>}MhF"", ""V{;JIf<qV8ex5MC#"", attributes0);
    Attributes attributes1 = attributes0.put(attribute0);
    attributes1.vals = null;
    // Undeclared exception!
    try {
        attributes0.getIgnoreCase(""c{>}MhF"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 * Get an attribute's value by case-insensitive key
 * @param key the attribute name
 * @return the first matching attribute value if set; or empty string if not set (ora boolean attribute).
 */"
"public String getIgnoreCase(String key) {
    int i = indexOfKeyIgnoreCase(key);
    return i == NotFound ? EmptyString : checkNotNull(vals[i]);
}","public void test4249() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.getIgnoreCase((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Get an attribute's value by case-insensitive key
 * @param key the attribute name
 * @return the first matching attribute value if set; or empty string if not set (ora boolean attribute).
 */"
"public String get(String key) {
    int i = indexOfKey(key);
    return i == NotFound ? EmptyString : checkNotNull(vals[i]);
}","public void test4350() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""org.jsoup.nodes.XmlDeclaration"", ""QAEXrY-H:?Q:KL9"");
    Attributes attributes2 = attributes1.put(""QAEXrY-H:?Q:KL9"", false);
    attributes2.keys = null;
    // Undeclared exception!
    try {
        attributes2.get(""org.jsoup.nodes.XmlDeclaration"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 *     Get an attribute value by key.
 *     @param key the (case-sensitive) attribute key
 *     @return the attribute value if set; or empty string if not set (or a boolean attribute).
 *     @see #hasKey(String)
 */"
"public String get(String key) {
    int i = indexOfKey(key);
    return i == NotFound ? EmptyString : checkNotNull(vals[i]);
}","public void test4451() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.get((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Get an attribute value by key.
 *     @param key the (case-sensitive) attribute key
 *     @return the attribute value if set; or empty string if not set (or a boolean attribute).
 *     @see #hasKey(String)
 */"
"@Override
public Attributes clone() {
    Attributes clone;
    try {
        clone = (Attributes) super.clone();
    } catch (CloneNotSupportedException e) {
        throw new RuntimeException(e);
    }
    clone.size = size;
    keys = copyOf(keys, size);
    vals = copyOf(vals, size);
    return clone;
}","public void test4552() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.vals = null;
    // Undeclared exception!
    try {
        attributes0.clone();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public List<Attribute> asList() {
    ArrayList<Attribute> list = new ArrayList<>(size);
    for (int i = 0; i < size; i++) {
        Attribute attr = vals[i] == null ? // deprecated class, but maybe someone still wants it
        new BooleanAttribute(keys[i]) : new Attribute(keys[i], vals[i], Attributes.this);
        list.add(attr);
    }
    return Collections.unmodifiableList(list);
}","public void test4653() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""data-"", true);
    attributes1.vals = null;
    // Undeclared exception!
    try {
        attributes1.asList();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 *     Get the attributes as a List, for iteration.
 *     @return an view of the attributes as an unmodifialbe List.
 */"
"public void addAll(Attributes incoming) {
    if (incoming.size() == 0)
        return;
    checkCapacity(size + incoming.size);
    for (Attribute attr : incoming) {
        // todo - should this be case insensitive?
        put(attr);
    }
}","public void test4754() throws Throwable {
    Attributes attributes0 = new Attributes();
    // Undeclared exception!
    try {
        attributes0.addAll((Attributes) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Attributes"", e);
    }
}","/**
 *     Add all the attributes from the incoming set to this set.
 *     @param incoming attributes to add to these attributes.
 */"
"public void addAll(Attributes incoming) {
    if (incoming.size() == 0)
        return;
    checkCapacity(size + incoming.size);
    for (Attribute attr : incoming) {
        // todo - should this be case insensitive?
        put(attr);
    }
}","public void test4855() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put("""", """");
    // Undeclared exception!
    try {
        attributes0.addAll(attributes0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Add all the attributes from the incoming set to this set.
 *     @param incoming attributes to add to these attributes.
 */"
"public void addAll(Attributes incoming) {
    if (incoming.size() == 0)
        return;
    checkCapacity(size + incoming.size);
    for (Attribute attr : incoming) {
        // todo - should this be case insensitive?
        put(attr);
    }
}","public void test4956() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = Attribute.createFromEncoded(""=\"""", ""=\"""");
    Attributes attributes1 = attributes0.put(attribute0);
    Attributes attributes2 = attributes0.put(""Tz5kUs>*N:>gWj~^uN"", false);
    String[] stringArray0 = new String[0];
    attributes2.vals = stringArray0;
    // Undeclared exception!
    try {
        attributes2.addAll(attributes1);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 0
        //
        verifyException(""org.jsoup.nodes.Attributes$1"", e);
    }
}","/**
 *     Add all the attributes from the incoming set to this set.
 *     @param incoming attributes to add to these attributes.
 */"
"public int size() {
    return size;
}","public void test5057() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""c- 12< @/fo6k-s.ZFx"", ""c- 12< @/fo6k-s.ZFx"");
    String[] stringArray0 = new String[8];
    attributes0.keys = stringArray0;
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    Charset charset0 = Charset.defaultCharset();
    OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charset0);
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    attributes0.html((Appendable) outputStreamWriter0, document_OutputSettings0);
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test5158() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.remove(""-.nWAJ>%fpJ7FB[TH_"");
    assertEquals(0, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test5259() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = Attribute.createFromEncoded(""D"", ""dnc4Tc?E"");
    Attributes attributes1 = attributes0.put(attribute0);
    attributes1.put(""D"", ""D"");
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test5360() throws Throwable {
    Attributes attributes0 = new Attributes();
    int int0 = attributes0.size();
    assertEquals(0, int0);
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test5461() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""org.jsoup.nodes.Attributes"", true);
    Attributes attributes2 = attributes0.clone();
    boolean boolean0 = attributes1.equals(attributes2);
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (o == null || getClass() != o.getClass())
        return false;
    Attributes that = (Attributes) o;
    if (size != that.size)
        return false;
    if (!Arrays.equals(keys, that.keys))
        return false;
    return Arrays.equals(vals, that.vals);
}","public void test5462() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""org.jsoup.nodes.Attributes"", true);
    Attributes attributes2 = attributes0.clone();
    boolean boolean0 = attributes1.equals(attributes2);
    assertFalse(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"public int size() {
    return size;
}","public void test5563() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = new Attributes();
    attributes0.put("""", """");
    boolean boolean0 = attributes1.equals(attributes0);
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (o == null || getClass() != o.getClass())
        return false;
    Attributes that = (Attributes) o;
    if (size != that.size)
        return false;
    if (!Arrays.equals(keys, that.keys))
        return false;
    return Arrays.equals(vals, that.vals);
}","public void test5564() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = new Attributes();
    attributes0.put("""", """");
    boolean boolean0 = attributes1.equals(attributes0);
    assertFalse(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (o == null || getClass() != o.getClass())
        return false;
    Attributes that = (Attributes) o;
    if (size != that.size)
        return false;
    if (!Arrays.equals(keys, that.keys))
        return false;
    return Arrays.equals(vals, that.vals);
}","public void test5665() throws Throwable {
    Attributes attributes0 = new Attributes();
    boolean boolean0 = attributes0.equals((Object) null);
    assertFalse(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (o == null || getClass() != o.getClass())
        return false;
    Attributes that = (Attributes) o;
    if (size != that.size)
        return false;
    if (!Arrays.equals(keys, that.keys))
        return false;
    return Arrays.equals(vals, that.vals);
}","public void test5766() throws Throwable {
    Attributes attributes0 = new Attributes();
    boolean boolean0 = attributes0.equals(attributes0);
    assertTrue(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (o == null || getClass() != o.getClass())
        return false;
    Attributes that = (Attributes) o;
    if (size != that.size)
        return false;
    if (!Arrays.equals(keys, that.keys))
        return false;
    return Arrays.equals(vals, that.vals);
}","public void test5867() throws Throwable {
    Attributes attributes0 = new Attributes();
    boolean boolean0 = attributes0.equals(""org.jsoup.nodes.Attributes"");
    assertFalse(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"public int size() {
    return size;
}","public void test5968() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""formnovalidate"", ""formnovalidate"");
    attributes0.toString();
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test6069() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = Attribute.createFromEncoded(""org.jsoup.nodes.Attributes"", ""org.jsoup.nodes.Attributes"");
    attributes0.put(attribute0);
    attributes0.toString();
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test6170() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put("""", true);
    String string0 = attributes1.html();
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public String html() {
    StringBuilder accum = new StringBuilder();
    try {
        // output settings a bit funky, but this html() seldom used
        html(accum, (new Document("""")).outputSettings());
    } catch (IOException e) {
        // ought never happen
        throw new SerializationException(e);
    }
    return accum.toString();
}","public void test6171() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put("""", true);
    String string0 = attributes1.html();
    assertEquals("" "", string0);
}","/**
 *     Get the HTML representation of these attributes.
 *     @return HTML
 *     @throws SerializationException if the HTML representation of the attributes cannot be constructed.
 */"
"public int size() {
    return size;
}","public void test6272() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""1)0Gd3R@_DXgfy)mM"", true);
    CharArrayWriter charArrayWriter0 = new CharArrayWriter(0);
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
    Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
    attributes0.html((Appendable) charArrayWriter0, document_OutputSettings1);
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public List<Attribute> asList() {
    ArrayList<Attribute> list = new ArrayList<>(size);
    for (int i = 0; i < size; i++) {
        Attribute attr = vals[i] == null ? // deprecated class, but maybe someone still wants it
        new BooleanAttribute(keys[i]) : new Attribute(keys[i], vals[i], Attributes.this);
        list.add(attr);
    }
    return Collections.unmodifiableList(list);
}","public void test6373() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put("""", true);
    // Undeclared exception!
    try {
        attributes0.asList();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Get the attributes as a List, for iteration.
 *     @return an view of the attributes as an unmodifialbe List.
 */"
"public int size() {
    return size;
}","public void test6474() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""SHeyv0VWK;r*"", ""m?j49`a"");
    attributes1.asList();
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test6575() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.addAll(attributes0);
    assertEquals(0, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test6676() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""SHeyv0VWK;r*"", ""m?j49`a"");
    boolean boolean0 = attributes1.hasKeyIgnoreCase(""SHeyv0VWK;r*"");
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public boolean hasKeyIgnoreCase(String key) {
    return indexOfKeyIgnoreCase(key) != NotFound;
}","public void test6677() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""SHeyv0VWK;r*"", ""m?j49`a"");
    boolean boolean0 = attributes1.hasKeyIgnoreCase(""SHeyv0VWK;r*"");
    assertTrue(boolean0);
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key key to check for
 *     @return true if key exists, false otherwise
 */"
"public boolean hasKeyIgnoreCase(String key) {
    return indexOfKeyIgnoreCase(key) != NotFound;
}","public void test6778() throws Throwable {
    Attributes attributes0 = new Attributes();
    boolean boolean0 = attributes0.hasKeyIgnoreCase(""1)0Gd3R@_DXgfy)mM"");
    assertFalse(boolean0);
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key key to check for
 *     @return true if key exists, false otherwise
 */"
"public int size() {
    return size;
}","public void test6879() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = Attribute.createFromEncoded(""j"", ""j"");
    Attributes attributes1 = attributes0.put(attribute0);
    boolean boolean0 = attributes1.hasKey(""j"");
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public boolean hasKey(String key) {
    return indexOfKey(key) != NotFound;
}","public void test6880() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = Attribute.createFromEncoded(""j"", ""j"");
    Attributes attributes1 = attributes0.put(attribute0);
    boolean boolean0 = attributes1.hasKey(""j"");
    assertTrue(boolean0);
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key case-sensitive key to check for
 *     @return true if key exists, false otherwise
 */"
"public boolean hasKey(String key) {
    return indexOfKey(key) != NotFound;
}","public void test6981() throws Throwable {
    Attributes attributes0 = new Attributes();
    boolean boolean0 = attributes0.hasKey(""org.jsoup.parser.Token$Tag"");
    assertFalse(boolean0);
}","/**
 *     Tests if these attributes contain an attribute with this key.
 *     @param key case-sensitive key to check for
 *     @return true if key exists, false otherwise
 */"
"public int size() {
    return size;
}","public void test7082() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.removeIgnoreCase(""org.jsoup.nodes.Attributes"");
    assertEquals(0, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test7183() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = new Attribute(""I"", ""I"");
    Attributes attributes1 = attributes0.put(attribute0);
    attributes1.normalize();
    attributes1.put(""I"", true);
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public int size() {
    return size;
}","public void test7284() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.put(""1)0Gd3R@_DXgfy)mM"", true);
    attributes0.put(""1)0Gd3R@_DXgfy)mM"", true);
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public String getIgnoreCase(String key) {
    int i = indexOfKeyIgnoreCase(key);
    return i == NotFound ? EmptyString : checkNotNull(vals[i]);
}","public void test7385() throws Throwable {
    Attributes attributes0 = new Attributes();
    String string0 = attributes0.getIgnoreCase(""org.jsoup.nodes.Attributes$Dataset"");
    assertEquals("""", string0);
}","/**
 * Get an attribute's value by case-insensitive key
 * @param key the attribute name
 * @return the first matching attribute value if set; or empty string if not set (ora boolean attribute).
 */"
"public String get(String key) {
    int i = indexOfKey(key);
    return i == NotFound ? EmptyString : checkNotNull(vals[i]);
}","public void test7486() throws Throwable {
    Attributes attributes0 = new Attributes();
    String string0 = attributes0.get(""40W+k;$"");
    assertEquals("""", string0);
}","/**
 *     Get an attribute value by key.
 *     @param key the (case-sensitive) attribute key
 *     @return the attribute value if set; or empty string if not set (or a boolean attribute).
 *     @see #hasKey(String)
 */"
"public int size() {
    return size;
}","public void test7587() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = Attribute.createFromEncoded(""org.jsoup.nodes.Attributes"", ""org.jsoup.nodes.Attributes"");
    Attributes attributes1 = attributes0.put(attribute0);
    String string0 = attributes1.get(""org.jsoup.nodes.Attributes"");
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public String get(String key) {
    int i = indexOfKey(key);
    return i == NotFound ? EmptyString : checkNotNull(vals[i]);
}","public void test7588() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = Attribute.createFromEncoded(""org.jsoup.nodes.Attributes"", ""org.jsoup.nodes.Attributes"");
    Attributes attributes1 = attributes0.put(attribute0);
    String string0 = attributes1.get(""org.jsoup.nodes.Attributes"");
    assertEquals(""org.jsoup.nodes.Attributes"", string0);
}","/**
 *     Get an attribute value by key.
 *     @param key the (case-sensitive) attribute key
 *     @return the attribute value if set; or empty string if not set (or a boolean attribute).
 *     @see #hasKey(String)
 */"
"// we track boolean attributes as null in values - they're just keys. so returns empty for consumers
static String checkNotNull(String val) {
    return val == null ? EmptyString : val;
}","public void test7689() throws Throwable {
    String string0 = Attributes.checkNotNull(""S^+er=_dEQFhCB,5"");
    assertEquals(""S^+er=_dEQFhCB,5"", string0);
}",""
"public int size() {
    return size;
}","public void test7790() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""x:=:@"", true);
    String string0 = attributes1.getIgnoreCase(""x:=:@"");
    assertEquals(1, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"public String getIgnoreCase(String key) {
    int i = indexOfKeyIgnoreCase(key);
    return i == NotFound ? EmptyString : checkNotNull(vals[i]);
}","public void test7791() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.put(""x:=:@"", true);
    String string0 = attributes1.getIgnoreCase(""x:=:@"");
    assertEquals("""", string0);
}","/**
 * Get an attribute's value by case-insensitive key
 * @param key the attribute name
 * @return the first matching attribute value if set; or empty string if not set (ora boolean attribute).
 */"
"public int size() {
    return size;
}","public void test7892() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attribute attribute0 = new Attribute(""b.2NM"", ""9WZhldeAMNnU"", attributes0);
    Attributes attributes1 = attributes0.put(attribute0);
    Attributes attributes2 = attributes1.put(""LV?0B<|imMs _P3uz"", true);
    attributes2.putIgnoreCase(""9~h7&;@\""ukvksw+"", ""(eDMN-lh&2oXV"");
    Attributes attributes3 = attributes1.clone();
    attributes2.addAll(attributes3);
    assertEquals(3, attributes0.size());
}","/**
 *     Get the number of attributes in this set.
 *     @return size
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (o == null || getClass() != o.getClass())
        return false;
    Attributes that = (Attributes) o;
    if (size != that.size)
        return false;
    if (!Arrays.equals(keys, that.keys))
        return false;
    return Arrays.equals(vals, that.vals);
}","public void test7993() throws Throwable {
    Attributes attributes0 = new Attributes();
    Attributes attributes1 = attributes0.clone();
    boolean boolean0 = attributes0.equals(attributes1);
    assertTrue(boolean0);
}","/**
 * Checks if these attributes are equal to another set of attributes, by comparing the two sets
 * @param o attributes to compare with
 * @return if both sets of attributes have the same content
 */"
"@Override
public int hashCode() {
    int result = size;
    result = 31 * result + Arrays.hashCode(keys);
    result = 31 * result + Arrays.hashCode(vals);
    return result;
}","public void test8095() throws Throwable {
    Attributes attributes0 = new Attributes();
    attributes0.hashCode();
}","/**
 * Calculates the hashcode of these attributes, by iterating all attributes and summing their hashcodes.
 * @return calculated hashcode
 */"
"@Override
public String toString() {
    return html();
}","public void test8297() throws Throwable {
    Attributes attributes0 = new Attributes();
    String string0 = attributes0.toString();
    assertEquals("""", string0);
}",""
