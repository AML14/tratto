focal_method,test_prefix,docstring
"static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) {
    if (count == cached.length()) {
        int i = start;
        int j = 0;
        while (count-- != 0) {
            if (charBuf[i++] != cached.charAt(j++))
                return false;
        }
        return true;
    }
    return false;
}","public void test0000() throws Throwable {
    boolean boolean0 = CharacterReader.rangeEquals((char[]) null, 24576, 65, ""nC6^PS%"");
    assertFalse(boolean0);
}","/**
 * Check if the value of the provided range equals the string.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test0011() throws Throwable {
    StringReader stringReader0 = new StringReader(""9*:4vK840PJ5:}"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 114);
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test0012() throws Throwable {
    StringReader stringReader0 = new StringReader(""9*:4vK840PJ5:}"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 114);
    boolean boolean0 = characterReader0.matchesDigit();
    assertTrue(boolean0);
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test0023() throws Throwable {
    StringReader stringReader0 = new StringReader(""zTtz=e,hwf^k$mQCi."");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test0024() throws Throwable {
    StringReader stringReader0 = new StringReader(""zTtz=e,hwf^k$mQCi."");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test0035() throws Throwable {
    StringReader stringReader0 = new StringReader(""A>@w,4Gt<"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test0036() throws Throwable {
    StringReader stringReader0 = new StringReader(""A>@w,4Gt<"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test0047() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""'RNc95j|26"");
    char[] charArray0 = new char[7];
    charArray0[0] = '3';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test0048() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""'RNc95j|26"");
    char[] charArray0 = new char[7];
    charArray0[0] = '3';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test0059() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.consumeLetterSequence();
    characterReader0.consume();
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""acjj_oDg#}MGZ"");
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test00510() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.consumeLetterSequence();
    characterReader0.consume();
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""acjj_oDg#}MGZ"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test00611() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""QMW*:PsQsP|6FhL4t"");
    boolean boolean0 = characterReader0.matchConsume(""QMW"");
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchConsume(String seq) {
    bufferUp();
    if (matches(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test00612() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""QMW*:PsQsP|6FhL4t"");
    boolean boolean0 = characterReader0.matchConsume(""QMW"");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test00713() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3}k"");
    characterReader0.matchConsume(""3}k"");
    characterReader0.consume();
    characterReader0.consumeDigitSequence();
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test00814() throws Throwable {
    StringReader stringReader0 = new StringReader(""fWz{OVF}wc{y` "");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
    characterReader0.consumeHexSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test00915() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    characterReader0.consumeHexSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01016() throws Throwable {
    StringReader stringReader0 = new StringReader(""#9U3CI2K/O)rsC`"");
    stringReader0.read();
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeHexSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01117() throws Throwable {
    StringReader stringReader0 = new StringReader(""0KA?gl)s]xv)*-Xb-"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeHexSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01218() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3}k"");
    characterReader0.matchConsume(""3}k"");
    characterReader0.consume();
    characterReader0.consumeHexSequence();
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01319() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""9s}3RU"");
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01420() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""0+"");
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01521() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(5, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01622() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.advance();
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01723() throws Throwable {
    StringReader stringReader0 = new StringReader(""fWz{OVF}wc{y` "");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
    characterReader0.consumeLetterSequence();
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01824() throws Throwable {
    StringReader stringReader0 = new StringReader(""Array must not contain any null objects"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1053);
    characterReader0.consumeLetterSequence();
    assertEquals(5, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01925() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""|"");
    characterReader0.advance();
    characterReader0.advance();
    characterReader0.consumeLetterSequence();
    assertEquals(2, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02026() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3}k"");
    characterReader0.matchConsume(""3}k"");
    characterReader0.consume();
    characterReader0.consumeTagName();
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02127() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.advance();
    characterReader0.consumeData();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02228() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""8m/,~q.CI"");
    char[] charArray0 = new char[1];
    characterReader0.consumeDigitSequence();
    characterReader0.consumeToAnySorted(charArray0);
    assertEquals(9, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02329() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">g>^(D`^eJPu@ZV"");
    char[] charArray0 = new char[1];
    charArray0[0] = '@';
    characterReader0.consumeToAnySorted(charArray0);
    assertEquals(12, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02430() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3}k"");
    characterReader0.matchConsume(""3}k"");
    characterReader0.consume();
    char[] charArray0 = new char[1];
    characterReader0.consumeToAnySorted(charArray0);
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02531() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""S336`Aet#0vkgpL"");
    characterReader0.consume();
    char[] charArray0 = new char[3];
    characterReader0.consumeToAny(charArray0);
    assertEquals(15, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02632() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""D"");
    characterReader0.consumeTo('Z');
    characterReader0.consume();
    char[] charArray0 = new char[0];
    characterReader0.consumeToAny(charArray0);
    assertEquals(2, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02733() throws Throwable {
    StringReader stringReader0 = new StringReader(""N~IO2 dKo1e4%9%$Iz9"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeTo('e');
    assertEquals(10, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02834() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.consumeLetterSequence();
    characterReader0.consumeTo(""3>q<xJw01\""a!9-$C"");
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test02935() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""A)4e8XbXWvoVf#'"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""A)4e8XbXWvoVf#'"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test03036() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""0^"");
    characterReader0.consumeData();
    characterReader0.consume();
    characterReader0.nextIndexOf('\uFFFF');
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test03137() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3}k"");
    characterReader0.matchConsume(""3}k"");
    characterReader0.consume();
    char[] charArray0 = new char[1];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test03138() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3}k"");
    characterReader0.matchConsume(""3}k"");
    characterReader0.consume();
    char[] charArray0 = new char[1];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test03239() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.toString();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) {
    if (count == cached.length()) {
        int i = start;
        int j = 0;
        while (count-- != 0) {
            if (charBuf[i++] != cached.charAt(j++))
                return false;
        }
        return true;
    }
    return false;
}","public void test03340() throws Throwable {
    char[] charArray0 = new char[2];
    boolean boolean0 = CharacterReader.rangeEquals(charArray0, 0, 0, """");
    assertTrue(boolean0);
}","/**
 * Check if the value of the provided range equals the string.
 */"
"static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) {
    if (count == cached.length()) {
        int i = start;
        int j = 0;
        while (count-- != 0) {
            if (charBuf[i++] != cached.charAt(j++))
                return false;
        }
        return true;
    }
    return false;
}","public void test03441() throws Throwable {
    char[] charArray0 = new char[7];
    boolean boolean0 = CharacterReader.rangeEquals(charArray0, 70, (-875), """");
    assertFalse(boolean0);
}","/**
 * Check if the value of the provided range equals the string.
 */"
"// just used for testing
boolean rangeEquals(final int start, final int count, final String cached) {
    return rangeEquals(charBuf, start, count, cached);
}","public void test03542() throws Throwable {
    StringReader stringReader0 = new StringReader(""fWz{OVF}wc{y` "");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
    boolean boolean0 = characterReader0.rangeEquals(9, 0, """");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test03543() throws Throwable {
    StringReader stringReader0 = new StringReader(""fWz{OVF}wc{y` "");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
    boolean boolean0 = characterReader0.rangeEquals(9, 0, """");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test03644() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#n(NDKMwc"");
    char[] charArray0 = new char[6];
    characterReader0.consumeToAny(charArray0);
    int int0 = characterReader0.pos();
    assertEquals(9, int0);
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test03745() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""37K:P<I|'/>n"");
    int int0 = characterReader0.nextIndexOf(""37K:P<I|'/>n"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test03746() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""37K:P<I|'/>n"");
    int int0 = characterReader0.nextIndexOf(""37K:P<I|'/>n"");
    assertEquals(0, int0);
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test03847() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""%Pp"");
    characterReader0.consumeTo('(');
    int int0 = characterReader0.nextIndexOf(""%Pp"");
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test03848() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""%Pp"");
    characterReader0.consumeTo('(');
    int int0 = characterReader0.nextIndexOf(""%Pp"");
    assertEquals((-1), int0);
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test03949() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.consumeLetterSequence();
    int int0 = characterReader0.nextIndexOf('}');
    assertEquals(2, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"int nextIndexOf(char c) {
    // doesn't handle scanning for surrogates
    bufferUp();
    for (int i = bufPos; i < bufLength; i++) {
        if (c == charBuf[i])
            return i - bufPos;
    }
    return -1;
}","public void test03950() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.consumeLetterSequence();
    int int0 = characterReader0.nextIndexOf('}');
    assertEquals(0, int0);
}","/**
 * Returns the number of characters between the current position and the next instance of the input char
 * @param c scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04051() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    int int0 = characterReader0.nextIndexOf('}');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"int nextIndexOf(char c) {
    // doesn't handle scanning for surrogates
    bufferUp();
    for (int i = bufPos; i < bufLength; i++) {
        if (c == charBuf[i])
            return i - bufPos;
    }
    return -1;
}","public void test04052() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    int int0 = characterReader0.nextIndexOf('}');
    assertEquals(2, int0);
}","/**
 * Returns the number of characters between the current position and the next instance of the input char
 * @param c scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04153() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""1P"");
    boolean boolean0 = characterReader0.matchesIgnoreCase(""1P"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test04154() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""1P"");
    boolean boolean0 = characterReader0.matchesIgnoreCase(""1P"");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test04255() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""1P"");
    char char0 = characterReader0.current();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public char current() {
    bufferUp();
    return isEmptyNoBufferUp() ? EOF : charBuf[bufPos];
}","public void test04256() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""1P"");
    char char0 = characterReader0.current();
    assertEquals('1', char0);
}","/**
 * Get the char at the current position.
 * @return char
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04357() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""%Pp"");
    characterReader0.consumeTo('(');
    characterReader0.consumeToEnd();
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04458() throws Throwable {
    StringReader stringReader0 = new StringReader(""ej2YZtm_``3&"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeLetterSequence();
    characterReader0.consume();
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(7, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"@Override
public String toString() {
    return new String(charBuf, bufPos, bufLength - bufPos);
}","public void test04559() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3}k"");
    characterReader0.matchConsume(""3}k"");
    characterReader0.consume();
    // Undeclared exception!
    try {
        characterReader0.toString();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) {
    if (count == cached.length()) {
        int i = start;
        int j = 0;
        while (count-- != 0) {
            if (charBuf[i++] != cached.charAt(j++))
                return false;
        }
        return true;
    }
    return false;
}","public void test04660() throws Throwable {
    char[] charArray0 = new char[9];
    // Undeclared exception!
    try {
        CharacterReader.rangeEquals(charArray0, 0, 0, (String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Check if the value of the provided range equals the string.
 */"
"static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) {
    if (count == cached.length()) {
        int i = start;
        int j = 0;
        while (count-- != 0) {
            if (charBuf[i++] != cached.charAt(j++))
                return false;
        }
        return true;
    }
    return false;
}","public void test04761() throws Throwable {
    char[] charArray0 = new char[2];
    // Undeclared exception!
    try {
        CharacterReader.rangeEquals(charArray0, 650, 2, ""0^"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 650
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Check if the value of the provided range equals the string.
 */"
"// just used for testing
boolean rangeEquals(final int start, final int count, final String cached) {
    return rangeEquals(charBuf, start, count, cached);
}","public void test04862() throws Throwable {
    StringReader stringReader0 = new StringReader(""REfZB`-s?"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    // Undeclared exception!
    try {
        characterReader0.rangeEquals(0, 82, (String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test04963() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.nextIndexOf("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test05064() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
    // Undeclared exception!
    try {
        characterReader0.nextIndexOf((CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test05165() throws Throwable {
    StringReader stringReader0 = new StringReader(""@}gPC@2M'~"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    CharBuffer charBuffer0 = CharBuffer.allocate(45);
    charBuffer0.compact();
    // Undeclared exception!
    try {
        characterReader0.nextIndexOf(charBuffer0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // 45
        //
        verifyException(""java.nio.HeapCharBuffer"", e);
    }
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"int nextIndexOf(char c) {
    // doesn't handle scanning for surrogates
    bufferUp();
    for (int i = bufPos; i < bufLength; i++) {
        if (c == charBuf[i])
            return i - bufPos;
    }
    return -1;
}","public void test05266() throws Throwable {
    StringReader stringReader0 = new StringReader(""-ToLe"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeTo('i');
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.nextIndexOf('*');
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Returns the number of characters between the current position and the next instance of the input char
 * @param c scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"int nextIndexOf(char c) {
    // doesn't handle scanning for surrogates
    bufferUp();
    for (int i = bufPos; i < bufLength; i++) {
        if (c == charBuf[i])
            return i - bufPos;
    }
    return -1;
}","public void test05367() throws Throwable {
    StringReader stringReader0 = new StringReader("" [P#"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 261);
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.nextIndexOf('');
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Returns the number of characters between the current position and the next instance of the input char
 * @param c scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test05468() throws Throwable {
    StringReader stringReader0 = new StringReader(""nBHIF{ZS29(+NhU"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    char[] charArray0 = new char[3];
    stringReader0.close();
    characterReader0.consumeToAnySorted(charArray0);
    // Undeclared exception!
    try {
        characterReader0.matchesLetter();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test05569() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesLetter();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test05670() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.helper.Validate"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    characterReader0.consumeTo(""org.jsoup.parser.CharacterReader"");
    // Undeclared exception!
    try {
        characterReader0.matchesIgnoreCase("""");
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test05771() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""PDoXQaOS&]"");
    // Undeclared exception!
    try {
        characterReader0.matchesIgnoreCase((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test05872() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesIgnoreCase(""org.jsoup.UncheckedIOException"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test05973() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.matchesDigit();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test06074() throws Throwable {
    StringReader stringReader0 = new StringReader("" [P#"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 261);
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesDigit();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test06175() throws Throwable {
    StringReader stringReader0 = new StringReader(""Y+cEYWXU;fQ+"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 3785);
    char[] charArray0 = new char[4];
    characterReader0.consumeData();
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.matchesAnySorted(charArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test06276() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""37K:P<I|'/>n"");
    // Undeclared exception!
    try {
        characterReader0.matchesAnySorted((char[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Arrays"", e);
    }
}",""
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test06377() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""PDoXQaOS&]"");
    char[] charArray0 = new char[8];
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesAnySorted(charArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test06478() throws Throwable {
    StringReader stringReader0 = new StringReader(""!"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeTagName();
    stringReader0.close();
    char[] charArray0 = new char[6];
    // Undeclared exception!
    try {
        characterReader0.matchesAny(charArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test06579() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    // Undeclared exception!
    try {
        characterReader0.matchesAny((char[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test06680() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 2172);
    char[] charArray0 = new char[8];
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesAny(charArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matches(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) if (seq.charAt(offset) != charBuf[bufPos + offset])
        return false;
    return true;
}","public void test06781() throws Throwable {
    StringReader stringReader0 = new StringReader(""w"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeTagName();
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.matches("""");
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matches(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) if (seq.charAt(offset) != charBuf[bufPos + offset])
        return false;
    return true;
}","public void test06882() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.matches((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matches(char c) {
    return !isEmpty() && charBuf[bufPos] == c;
}","public void test06983() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matches('#');
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test07084() throws Throwable {
    StringReader stringReader0 = new StringReader(""&H7'Ya"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
    stringReader0.close();
    characterReader0.consumeTo('@');
    // Undeclared exception!
    try {
        characterReader0.matchConsumeIgnoreCase(""[+Wr8TBL"");
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test07185() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test07286() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""\""<VF,#nkE"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchConsumeIgnoreCase(""\""<VF,#nkE"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchConsume(String seq) {
    bufferUp();
    if (matches(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test07387() throws Throwable {
    StringReader stringReader0 = new StringReader(""3jR9"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    char[] charArray0 = new char[6];
    stringReader0.close();
    characterReader0.consumeToAny(charArray0);
    // Undeclared exception!
    try {
        characterReader0.matchConsume("""");
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchConsume(String seq) {
    bufferUp();
    if (matches(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test07488() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.parser.CharacterReader"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
    // Undeclared exception!
    try {
        characterReader0.matchConsume((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public boolean isEmpty() {
    bufferUp();
    return bufPos >= bufLength;
}","public void test07589() throws Throwable {
    StringReader stringReader0 = new StringReader(""5?:Q=271"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.matchConsumeIgnoreCase(""5?:Q=271"");
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.isEmpty();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public char current() {
    bufferUp();
    return isEmptyNoBufferUp() ? EOF : charBuf[bufPos];
}","public void test07690() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.current();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Get the char at the current position.
 * @return char
 */"
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test07791() throws Throwable {
    StringReader stringReader0 = new StringReader(""uME%Kt"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    characterReader0.consumeTo('*');
    // Undeclared exception!
    try {
        characterReader0.containsIgnoreCase("""");
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test07892() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.containsIgnoreCase("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test07993() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""y9?Q{4"");
    // Undeclared exception!
    try {
        characterReader0.containsIgnoreCase((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test08094() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.parser.CharacterReader"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.containsIgnoreCase(""org.jsoup.parser.CharacterReader"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeToEnd() {
    bufferUp();
    String data = cacheString(charBuf, stringCache, bufPos, bufLength - bufPos);
    bufPos = bufLength;
    return data;
}","public void test08195() throws Throwable {
    StringReader stringReader0 = new StringReader(""fWz{OVF}wc{y` "");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeToEnd();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeToEnd() {
    bufferUp();
    String data = cacheString(charBuf, stringCache, bufPos, bufLength - bufPos);
    bufPos = bufLength;
    return data;
}","public void test08296() throws Throwable {
    StringReader stringReader0 = new StringReader(""@\""E~V3pM[UKj~^:"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeToEnd();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeToAnySorted(final char... chars) {
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        if (Arrays.binarySearch(chars, val[bufPos]) >= 0)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test08397() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
    char[] charArray0 = new char[3];
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeToAnySorted(charArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeToAnySorted(final char... chars) {
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        if (Arrays.binarySearch(chars, val[bufPos]) >= 0)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test08498() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.parser.CharacterReader"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 70);
    // Undeclared exception!
    try {
        characterReader0.consumeToAnySorted((char[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Arrays"", e);
    }
}",""
"public String consumeToAny(final char... chars) {
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    OUTER: while (bufPos < remaining) {
        for (char c : chars) {
            if (val[bufPos] == c)
                break OUTER;
        }
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test08599() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 2059);
    char[] charArray0 = new char[9];
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeToAny(charArray0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Read characters until the first of any delimiters is found.
 * @param chars delimiters to scan for
 * @return characters read up to the matched delimiter.
 */"
"public String consumeToAny(final char... chars) {
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    OUTER: while (bufPos < remaining) {
        for (char c : chars) {
            if (val[bufPos] == c)
                break OUTER;
        }
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test086100() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""mb,DN~dP@v"");
    // Undeclared exception!
    try {
        characterReader0.consumeToAny((char[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Read characters until the first of any delimiters is found.
 * @param chars delimiters to scan for
 * @return characters read up to the matched delimiter.
 */"
"public String consumeToAny(final char... chars) {
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    OUTER: while (bufPos < remaining) {
        for (char c : chars) {
            if (val[bufPos] == c)
                break OUTER;
        }
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test087101() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Fx]"");
    char[] charArray0 = new char[9];
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeToAny(charArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Read characters until the first of any delimiters is found.
 * @param chars delimiters to scan for
 * @return characters read up to the matched delimiter.
 */"
"String consumeTo(String seq) {
    int offset = nextIndexOf(seq);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test088102() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeTo(""xsk"");
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeTo(String seq) {
    int offset = nextIndexOf(seq);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test089103() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.consumeTo("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"String consumeTo(String seq) {
    int offset = nextIndexOf(seq);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test090104() throws Throwable {
    StringReader stringReader0 = new StringReader(""fWz{OVF}wc{y` "");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
    // Undeclared exception!
    try {
        characterReader0.consumeTo((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public String consumeTo(char c) {
    int offset = nextIndexOf(c);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test091105() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 99);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeTo('$');
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Reads characters up to the specific char.
 * @param c the delimiter
 * @return the chars read
 */"
"public String consumeTo(char c) {
    int offset = nextIndexOf(c);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test092106() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 31);
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeTo('h');
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Reads characters up to the specific char.
 * @param c the delimiter
 * @return the chars read
 */"
"String consumeTagName() {
    // '\t', '\n', '\r', '\f', ' ', '/', '>', nullChar
    // NOTE: out of spec, added '<' to fix common author bugs
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        final char c = val[bufPos];
        if (c == '\t' || c == '\n' || c == '\r' || c == '\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test093107() throws Throwable {
    StringReader stringReader0 = new StringReader(""!"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeTagName();
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeTagName();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeLetterThenDigitSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))
            bufPos++;
        else
            break;
    }
    while (!isEmptyNoBufferUp()) {
        char c = charBuf[bufPos];
        if (c >= '0' && c <= '9')
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test094108() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeLetterThenDigitSequence();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeLetterSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test095109() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Must be true"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeLetterSequence();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeHexSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test096110() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeHexSequence();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeHexSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test097111() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeHexSequence();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeDigitSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if (c >= '0' && c <= '9')
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test098112() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeDigitSequence();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeData() {
    // &, <, null
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        final char c = val[bufPos];
        if (c == '&' || c == '<' || c == TokeniserState.nullChar)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test099113() throws Throwable {
    StringReader stringReader0 = new StringReader(""[rc"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeData();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeData() {
    // &, <, null
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        final char c = val[bufPos];
        if (c == '&' || c == '<' || c == TokeniserState.nullChar)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test100114() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">g>^(D`^eJPu@ZV"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeData();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"char consume() {
    bufferUp();
    char val = isEmptyNoBufferUp() ? EOF : charBuf[bufPos];
    bufPos++;
    return val;
}","public void test101115() throws Throwable {
    StringReader stringReader0 = new StringReader(""g27otn $"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consume();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public CharacterReader(String input) {
    this(new StringReader(input), input.length());
}","public void test102116() throws Throwable {
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public CharacterReader(Reader input, int sz) {
    Validate.notNull(input);
    Validate.isTrue(input.markSupported());
    reader = input;
    charBuf = new char[sz > maxBufferLen ? maxBufferLen : sz];
    bufferUp();
}","public void test103117() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    stringReader0.close();
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader(stringReader0, 48);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public CharacterReader(Reader input, int sz) {
    Validate.notNull(input);
    Validate.isTrue(input.markSupported());
    reader = input;
    charBuf = new char[sz > maxBufferLen ? maxBufferLen : sz];
    bufferUp();
}","public void test104118() throws Throwable {
    StringReader stringReader0 = new StringReader(""(F"");
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader(stringReader0, (-123));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public CharacterReader(Reader input, int sz) {
    Validate.notNull(input);
    Validate.isTrue(input.markSupported());
    reader = input;
    charBuf = new char[sz > maxBufferLen ? maxBufferLen : sz];
    bufferUp();
}","public void test105119() throws Throwable {
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader((Reader) null, 3297);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public CharacterReader(Reader input) {
    this(input, maxBufferLen);
}","public void test106120() throws Throwable {
    StringReader stringReader0 = new StringReader(""yKY4(lYjkm,"");
    stringReader0.close();
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader(stringReader0);
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test107121() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""2{`vC"");
    characterReader0.consumeTagName();
    characterReader0.rewindToMark();
    characterReader0.consumeTo('0');
    assertEquals(5, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test108122() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">g>^(D`^eJPu@ZV"");
    characterReader0.consumeData();
    boolean boolean0 = characterReader0.isEmpty();
    assertEquals(15, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    bufferUp();
    return bufPos >= bufLength;
}","public void test108123() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">g>^(D`^eJPu@ZV"");
    characterReader0.consumeData();
    boolean boolean0 = characterReader0.isEmpty();
    assertTrue(boolean0);
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test109124() throws Throwable {
    StringReader stringReader0 = new StringReader(""5?:Q=271"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    boolean boolean0 = characterReader0.containsIgnoreCase(""5?:Q=271"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test109125() throws Throwable {
    StringReader stringReader0 = new StringReader(""5?:Q=271"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    boolean boolean0 = characterReader0.containsIgnoreCase(""5?:Q=271"");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test110126() throws Throwable {
    StringReader stringReader0 = new StringReader(""}=7'"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 62);
    boolean boolean0 = characterReader0.containsIgnoreCase(""}=7'"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test110127() throws Throwable {
    StringReader stringReader0 = new StringReader(""}=7'"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 62);
    boolean boolean0 = characterReader0.containsIgnoreCase(""}=7'"");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test111128() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    characterReader0.consumeTagName();
    boolean boolean0 = characterReader0.matchConsume(""org.jsoup.parser.CharacterReader"");
    assertEquals(32, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchConsume(String seq) {
    bufferUp();
    if (matches(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test111129() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    characterReader0.consumeTagName();
    boolean boolean0 = characterReader0.matchConsume(""org.jsoup.parser.CharacterReader"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test112130() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.consumeLetterSequence();
    characterReader0.consume();
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test112131() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.consumeLetterSequence();
    characterReader0.consume();
    boolean boolean0 = characterReader0.matchesDigit();
    assertTrue(boolean0);
}",""
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test113132() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""'wU|!mYV\""j[yG}&"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test113133() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""'wU|!mYV\""j[yG}&"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test114134() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test114135() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test115136() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""\""<VF,#nkE"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test115137() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""\""<VF,#nkE"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test116138() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""F4d"");
    characterReader0.consumeHexSequence();
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test116139() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""F4d"");
    characterReader0.consumeHexSequence();
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test117140() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""mb,DN~dP@v"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test117141() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""mb,DN~dP@v"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test118142() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    characterReader0.consumeLetterSequence();
    characterReader0.consume();
    char[] charArray0 = new char[4];
    charArray0[1] = 'j';
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test118143() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    characterReader0.consumeLetterSequence();
    characterReader0.consume();
    char[] charArray0 = new char[4];
    charArray0[1] = 'j';
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertTrue(boolean0);
}",""
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test119144() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">g>^(D`^eJPu@ZV"");
    char[] charArray0 = new char[0];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test119145() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">g>^(D`^eJPu@ZV"");
    char[] charArray0 = new char[0];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test120146() throws Throwable {
    StringReader stringReader0 = new StringReader(""3jR9"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    char[] charArray0 = new char[6];
    charArray0[5] = '3';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test120147() throws Throwable {
    StringReader stringReader0 = new StringReader(""3jR9"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    char[] charArray0 = new char[6];
    charArray0[5] = '3';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test121148() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""F4d"");
    characterReader0.consumeHexSequence();
    boolean boolean0 = characterReader0.matchesAny((char[]) null);
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test121149() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""F4d"");
    characterReader0.consumeHexSequence();
    boolean boolean0 = characterReader0.matchesAny((char[]) null);
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test122150() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""acjj_oDg#}MGZ"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test122151() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""acjj_oDg#}MGZ"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test123152() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""mb,DN~dP@v"");
    boolean boolean0 = characterReader0.matchesIgnoreCase("".^p2Yxl~w=F"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test123153() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""mb,DN~dP@v"");
    boolean boolean0 = characterReader0.matchesIgnoreCase("".^p2Yxl~w=F"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test124154() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.parser.CharacterReader"");
    stringReader0.read();
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
    characterReader0.consumeTo(""org.jsoup.parser.CharacterReader"");
    characterReader0.consumeToEnd();
    characterReader0.advance();
    characterReader0.advance();
    characterReader0.consumeLetterThenDigitSequence();
    boolean boolean0 = characterReader0.matches(""s"");
    assertEquals(5, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matches(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) if (seq.charAt(offset) != charBuf[bufPos + offset])
        return false;
    return true;
}","public void test124155() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.parser.CharacterReader"");
    stringReader0.read();
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
    characterReader0.consumeTo(""org.jsoup.parser.CharacterReader"");
    characterReader0.consumeToEnd();
    characterReader0.advance();
    characterReader0.advance();
    characterReader0.consumeLetterThenDigitSequence();
    boolean boolean0 = characterReader0.matches(""s"");
    assertFalse(boolean0);
}",""
"boolean matches(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) if (seq.charAt(offset) != charBuf[bufPos + offset])
        return false;
    return true;
}","public void test125156() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""'wU|!mYV\""j[yG}&"");
    boolean boolean0 = characterReader0.matches(""'wU|!mYV\""j[yG}&"");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test125157() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""'wU|!mYV\""j[yG}&"");
    boolean boolean0 = characterReader0.matches(""'wU|!mYV\""j[yG}&"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test126158() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    characterReader0.consumeTagName();
    characterReader0.unconsume();
    characterReader0.consume();
    characterReader0.unconsume();
    characterReader0.advance();
    characterReader0.unconsume();
    boolean boolean0 = characterReader0.matches('r');
    assertEquals(31, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matches(char c) {
    return !isEmpty() && charBuf[bufPos] == c;
}","public void test126159() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    characterReader0.consumeTagName();
    characterReader0.unconsume();
    characterReader0.consume();
    characterReader0.unconsume();
    characterReader0.advance();
    characterReader0.unconsume();
    boolean boolean0 = characterReader0.matches('r');
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test127160() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""mb,DN~dP@v"");
    boolean boolean0 = characterReader0.matches('5');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matches(char c) {
    return !isEmpty() && charBuf[bufPos] == c;
}","public void test127161() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""mb,DN~dP@v"");
    boolean boolean0 = characterReader0.matches('5');
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test128162() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""\""<VF,#nkE"");
    characterReader0.matchConsumeIgnoreCase(""\""<VF,#nkE"");
    characterReader0.matches('4');
    assertEquals(9, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test129163() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""'wU|!mYV\""j[yG}&"");
    String string0 = characterReader0.consumeDigitSequence();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"String consumeDigitSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if (c >= '0' && c <= '9')
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test129164() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""'wU|!mYV\""j[yG}&"");
    String string0 = characterReader0.consumeDigitSequence();
    assertEquals("""", string0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test130165() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""8m/,~q.CI"");
    characterReader0.consumeDigitSequence();
    characterReader0.consumeTagName();
    assertEquals(2, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test131166() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""mb,DN~dP@v"");
    characterReader0.consumeTagName();
    characterReader0.consumeDigitSequence();
    assertEquals(10, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test132167() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""%Pp"");
    characterReader0.consumeHexSequence();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test133168() throws Throwable {
    StringReader stringReader0 = new StringReader(""fWz{OVF}wc{y` "");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
    characterReader0.consumeLetterThenDigitSequence();
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test133169() throws Throwable {
    StringReader stringReader0 = new StringReader(""fWz{OVF}wc{y` "");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 9);
    characterReader0.consumeLetterThenDigitSequence();
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test134170() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.consumeLetterSequence();
    characterReader0.consumeTo(""Xy"");
    characterReader0.unconsume();
    characterReader0.consumeLetterThenDigitSequence();
    characterReader0.unconsume();
    characterReader0.consumeData();
    assertEquals(19, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test135171() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""mb,DN~dP@v"");
    characterReader0.consumeLetterSequence();
    characterReader0.matches('5');
    assertEquals(2, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test136172() throws Throwable {
    StringReader stringReader0 = new StringReader(""@\""E~V3pM[UKj~^:"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    characterReader0.consumeLetterSequence();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test137173() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">g>^(D`^eJPu@ZV"");
    characterReader0.consumeTagName();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test138174() throws Throwable {
    StringReader stringReader0 = new StringReader(""[c* '@7oPxiE2_2c>b"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 8);
    characterReader0.consumeTagName();
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"String consumeData() {
    // &, <, null
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        final char c = val[bufPos];
        if (c == '&' || c == '<' || c == TokeniserState.nullChar)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test139175() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""\""<VF,#nkE"");
    String string0 = characterReader0.consumeData();
    assertEquals(""\"""", string0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test139176() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""\""<VF,#nkE"");
    String string0 = characterReader0.consumeData();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test140177() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""'wU|!mYV\""j[yG}&"");
    characterReader0.consumeData();
    assertEquals(16, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test141178() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    char[] charArray0 = new char[4];
    charArray0[1] = 'j';
    characterReader0.consumeToAnySorted(charArray0);
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test142179() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""A)4e8XbXWvoVf#'"");
    char[] charArray0 = new char[4];
    charArray0[0] = 'W';
    characterReader0.consumeToAny(charArray0);
    assertEquals(8, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test143180() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.consumeTo(""Xy"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test144181() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    int int0 = characterReader0.nextIndexOf(""jsop.UnheckedIOException"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test144182() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    int int0 = characterReader0.nextIndexOf(""jsop.UnheckedIOException"");
    assertEquals(4, int0);
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test145183() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.consumeTo('X');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public char current() {
    bufferUp();
    return isEmptyNoBufferUp() ? EOF : charBuf[bufPos];
}","public void test146184() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    char char0 = characterReader0.current();
    assertEquals('o', char0);
}","/**
 * Get the char at the current position.
 * @return char
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test146185() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    char char0 = characterReader0.current();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test147186() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    characterReader0.consumeData();
    char char0 = characterReader0.current();
    assertEquals(28, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public char current() {
    bufferUp();
    return isEmptyNoBufferUp() ? EOF : charBuf[bufPos];
}","public void test147187() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    characterReader0.consumeData();
    char char0 = characterReader0.current();
    assertEquals('\uFFFF', char0);
}","/**
 * Get the char at the current position.
 * @return char
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test148188() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    boolean boolean0 = characterReader0.isEmpty();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    bufferUp();
    return bufPos >= bufLength;
}","public void test148189() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    boolean boolean0 = characterReader0.isEmpty();
    assertFalse(boolean0);
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test149190() throws Throwable {
    StringReader stringReader0 = new StringReader(""x5H@H5"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test150191() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsop.UnheckedIOException"");
    int int0 = characterReader0.pos();
    assertEquals(0, int0);
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test151192() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""8m/,~q.CI"");
    boolean boolean0 = characterReader0.rangeEquals(0, 1, "".?#7b`4XDE[>+9B'o{x"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"// just used for testing
boolean rangeEquals(final int start, final int count, final String cached) {
    return rangeEquals(charBuf, start, count, cached);
}","public void test151193() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""8m/,~q.CI"");
    boolean boolean0 = characterReader0.rangeEquals(0, 1, "".?#7b`4XDE[>+9B'o{x"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test152194() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.consumeLetterSequence();
    characterReader0.consumeTo(""Xy"");
    characterReader0.matchesDigit();
    assertEquals(19, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test153195() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    String string0 = characterReader0.toString();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"@Override
public String toString() {
    return new String(charBuf, bufPos, bufLength - bufPos);
}","public void test153196() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    String string0 = characterReader0.toString();
    assertEquals(""Xy}3>q<xJw01\""a!9-$C"", string0);
}",""
"String consumeLetterThenDigitSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))
            bufPos++;
        else
            break;
    }
    while (!isEmptyNoBufferUp()) {
        char c = charBuf[bufPos];
        if (c >= '0' && c <= '9')
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test154197() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeLetterThenDigitSequence();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test155198() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Xy}3>q<xJw01\""a!9-$C"");
    characterReader0.mark();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public CharacterReader(Reader input) {
    this(input, maxBufferLen);
}","public void test156199() throws Throwable {
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader((Reader) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
