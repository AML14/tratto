focal_method,test_prefix,docstring
"Element getHeadElement() {
    return headElement;
}","public void test000() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Element element0 = htmlTreeBuilder0.getHeadElement();
    assertNull(element0);
}",""
"protected boolean processStartTag(String name) {
    if (currentToken == start) {
        // don't recycle an in-use token
        return process(new Token.StartTag().name(name));
    }
    return process(start.reset().name(name));
}","public void test011() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""isindex"", (Element) null, ""isindex"", parser0);
    htmlTreeBuilder0.processStartTag(""isindex"");
}",""
"boolean inListItemScope(String targetName) {
    return inScope(targetName, TagSearchList);
}","public void test022() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inListItemScope("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"@Override
public String toString() {
    return ""TreeBuilder{"" + ""currentToken="" + currentToken + "", state="" + state + "", currentElement="" + currentElement() + '}';
}","public void test033() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"protected boolean processStartTag(String name) {
    if (currentToken == start) {
        // don't recycle an in-use token
        return process(new Token.StartTag().name(name));
    }
    return process(start.reset().name(name));
}","public void test044() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""table"", (Element) null, ""table"", parser0);
    htmlTreeBuilder0.processStartTag(""table"");
    boolean boolean0 = htmlTreeBuilder0.processStartTag(""v"");
    assertTrue(boolean0);
}",""
"void insertMarkerToFormattingElements() {
    formattingElements.add(null);
}","public void test066() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"protected boolean processStartTag(String name) {
    if (currentToken == start) {
        // don't recycle an in-use token
        return process(new Token.StartTag().name(name));
    }
    return process(start.reset().name(name));
}","public void test077() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""class"", (Element) null, ""class"", parser0);
    boolean boolean0 = htmlTreeBuilder0.processStartTag(""select"");
    assertTrue(boolean0);
}",""
"boolean inScope(String[] targetNames) {
    return inSpecificScope(targetNames, TagsSearchInScope, null);
}","public void test088() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String[] stringArray0 = new String[1];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"String getBaseUri() {
    return baseUri;
}","public void test099() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String string0 = htmlTreeBuilder0.getBaseUri();
    assertNull(string0);
}",""
"boolean isInActiveFormattingElements(Element el) {
    return isElementInQueue(formattingElements, el);
}","public void test1010() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Parser.parseBodyFragment(""colgroup"", ""colgroup"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.isInActiveFormattingElements(document0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"boolean isFragmentParsing() {
    return fragmentParsing;
}","public void test1111() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
    assertFalse(boolean0);
}",""
"void push(Element element) {
    stack.add(element);
}","public void test1212() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.push((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean isSpecial(Element el) {
    // todo: mathml's mi, mo, mn
    // todo: svg's foreigObject, desc, title
    String name = el.nodeName();
    return inSorted(name, TagSearchSpecial);
}","public void test1313() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.isSpecial((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test1414() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""T>tr4<?A{:"", ""Z'@$a7VC"");
    assertEquals(1, document0.childNodeSize());
}",""
"protected boolean processStartTag(String name) {
    if (currentToken == start) {
        // don't recycle an in-use token
        return process(new Token.StartTag().name(name));
    }
    return process(start.reset().name(name));
}","public void test1515() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""table"", (Element) null, ""table"", parser0);
    htmlTreeBuilder0.processStartTag(""table"");
    boolean boolean0 = htmlTreeBuilder0.processStartTag(""table"");
    assertTrue(boolean0);
}",""
"void clearStackToTableContext() {
    clearStackToContext(""table"");
}","public void test1616() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.clearStackToTableContext();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void clearStackToTableRowContext() {
    clearStackToContext(""tr"", ""template"");
}","public void test2222() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Tag tag0 = Tag.valueOf(""DoG`xhU<izQ:f+>h"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""DoG`xhU<izQ:f+>h"", attributes0);
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment(""DoG`xhU<izQ:f+>h"", formElement0, ""DoG`xhU<izQ:f+>h"", parser0);
    htmlTreeBuilder0.clearStackToTableRowContext();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"@Override
public String baseUri() {
    return baseUri;
}","public void test2323() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment(""`<*gZl$Gv_n"", (Element) null, ""th"", parser0);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    token_StartTag0.nameAttr(""th"", attributes0);
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    htmlTreeBuilder0.maybeSetBaseUri(element0);
    assertEquals(""th"", element0.baseUri());
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test2324() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment(""`<*gZl$Gv_n"", (Element) null, ""th"", parser0);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    token_StartTag0.nameAttr(""th"", attributes0);
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    htmlTreeBuilder0.maybeSetBaseUri(element0);
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test2526() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Parser.parseBodyFragment(""Hr"", ""Hr"");
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""Hr"", document0, ""Hr"", parser0);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""Hr"", attributes0);
    token_StartTag1.selfClosing = true;
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    assertTrue(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public boolean hasParent() {
    return parentNode != null;
}","public void test2627() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""W]C?QUKW:]-//0vj"");
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment(""W]C?QUKW:]-//0vj"", document0, ""W]C?QUKW:]-//0vj"", parser0);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""W]C?QUKW:]-//0vj"", attributes0);
    token_StartTag1.selfClosing = true;
    Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
    assertTrue(element0.hasParent());
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test2728() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""tr"");
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""tr"", document0, ""tr"", parser0);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""tr"", attributes0);
    token_StartTag1.selfClosing = true;
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    assertEquals(0, element0.childNodeSize());
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test2829() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment(""."", (Element) null, ""InCaption"", parser0);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""."", attributes0);
    FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
    assertEquals(1, formElement0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String baseUri() {
    return baseUri;
}","public void test2830() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment(""."", (Element) null, ""InCaption"", parser0);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""."", attributes0);
    FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
    assertEquals(""InCaption"", formElement0.baseUri());
}",""
"void insert(Token.Character characterToken) {
    final Node node;
    final Element el = currentElement();
    final String tagName = el.tagName();
    final String data = characterToken.getData();
    if (characterToken.isCData())
        node = new CDataNode(data);
    else if (tagName.equals(""script"") || tagName.equals(""style""))
        node = new DataNode(data);
    else
        node = new TextNode(data);
    // doesn't use insertNode, because we don't foster these; and will always have a stack.
    el.appendChild(node);
}","public void test3032() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    htmlTreeBuilder0.parseFragment(""script"", (Element) null, ""script"", parser0);
    htmlTreeBuilder0.processStartTag(""script"");
    Token.Character token_Character0 = new Token.Character();
    htmlTreeBuilder0.insert(token_Character0);
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void insert(Token.Character characterToken) {
    final Node node;
    final Element el = currentElement();
    final String tagName = el.tagName();
    final String data = characterToken.getData();
    if (characterToken.isCData())
        node = new CDataNode(data);
    else if (tagName.equals(""script"") || tagName.equals(""style""))
        node = new DataNode(data);
    else
        node = new TextNode(data);
    // doesn't use insertNode, because we don't foster these; and will always have a stack.
    el.appendChild(node);
}","public void test3133() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment("":%s(%d)"", (Element) null, ""style"", parser0);
    htmlTreeBuilder0.processStartTag(""style"");
    Token.Character token_Character0 = new Token.Character();
    htmlTreeBuilder0.insert(token_Character0);
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"Element aboveOnStack(Element el) {
    assert onStack(el);
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            return stack.get(pos - 1);
        }
    }
    return null;
}","public void test3234() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""A:lmzfB-o|+{"", ""A:lmzfB-o|+{"");
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Elements elements0 = document0.getElementsContainingText(""A:lmzfB-o|+{"");
    htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.aboveOnStack(document0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"void insertInFosterParent(Node in) {
    Element fosterParent;
    Element lastTable = getFromStack(""table"");
    boolean isLastTableParent = false;
    if (lastTable != null) {
        if (lastTable.parent() != null) {
            fosterParent = lastTable.parent();
            isLastTableParent = true;
        } else
            fosterParent = aboveOnStack(lastTable);
    } else {
        // no table == frag
        fosterParent = stack.get(0);
    }
    if (isLastTableParent) {
        // last table cannot be null by this point.
        Validate.notNull(lastTable);
        lastTable.before(in);
    } else
        fosterParent.appendChild(in);
}","public void test3335() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""isindex"", (Element) null, ""isindex"", parser0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean removeFromStack(Element el) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            stack.remove(pos);
            return true;
        }
    }
    return false;
}","public void test3437() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""th"", (Element) null, ""th"", parser0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack((Element) null);
    assertFalse(boolean0);
}",""
"void popStackToClose(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        stack.remove(pos);
        if (next.nodeName().equals(elName))
            break;
    }
}","public void test3538() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""DoG`xhU<izQ:f+>h"", (Element) null, ""DoG`xhU<izQ:f+>h"", parser0);
    htmlTreeBuilder0.popStackToClose(""DoG`xhU<izQ:f+>h"");
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"// elnames is sorted, comes from Constants
void popStackToClose(String... elNames) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        stack.remove(pos);
        if (inSorted(next.nodeName(), elNames))
            break;
    }
}","public void test3639() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""]'eTe 1x6Jb5O#Xv|"", ""]'eTe 1x6Jb5O#Xv|"");
    String[] stringArray0 = new String[1];
    stringArray0[0] = ""]'eTe 1x6Jb5O#Xv|"";
    htmlTreeBuilder0.popStackToClose(stringArray0);
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"// elnames is sorted, comes from Constants
void popStackToClose(String... elNames) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        stack.remove(pos);
        if (inSorted(next.nodeName(), elNames))
            break;
    }
}","public void test3740() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Tag tag0 = Tag.valueOf(""9H@s& my2he^]"");
    Element element0 = new Element(tag0, ""|rRJDLJiC>/]GI"");
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""?ONYK"", element0, ""script"", parser0);
    String[] stringArray0 = new String[3];
    stringArray0[1] = ""?ONYK"";
    stringArray0[2] = ""html"";
    htmlTreeBuilder0.popStackToClose(stringArray0);
    assertEquals(3, stringArray0.length);
}",""
"boolean inButtonScope(String targetName) {
    return inScope(targetName, TagSearchButton);
}","public void test3841() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""Should not be reachable"", ""Should not be reachable"");
    htmlTreeBuilder0.popStackToBefore(""Should not be reachable"");
    boolean boolean0 = htmlTreeBuilder0.inButtonScope(""Should not be reachable"");
    assertFalse(boolean0);
}",""
"void popStackToBefore(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.nodeName().equals(elName)) {
            break;
        } else {
            stack.remove(pos);
        }
    }
}","public void test3942() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""table"", (Element) null, ""table"", parser0);
    htmlTreeBuilder0.insertStartTag(""plaintext"");
    htmlTreeBuilder0.popStackToBefore(""plaintext"");
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void clearStackToTableBodyContext() {
    clearStackToContext(""tbody"", ""tfoot"", ""thead"", ""template"");
}","public void test4043() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ArrayList<Document> arrayList0 = new ArrayList<Document>();
    ArrayList<Element> arrayList1 = new ArrayList<Element>(arrayList0);
    htmlTreeBuilder0.stack = arrayList1;
    htmlTreeBuilder0.clearStackToTableBodyContext();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void clearStackToTableRowContext() {
    clearStackToContext(""tr"", ""template"");
}","public void test4144() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""tr"");
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""tr"", document0, ""tr"", parser0);
    htmlTreeBuilder0.clearStackToTableRowContext();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void clearStackToTableRowContext() {
    clearStackToContext(""tr"", ""template"");
}","public void test4245() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""tr"");
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""tr"", document0, ""tr"", parser0);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    token_StartTag0.nameAttr(""tr"", attributes0);
    htmlTreeBuilder0.insert(token_StartTag0);
    htmlTreeBuilder0.clearStackToTableRowContext();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"Element aboveOnStack(Element el) {
    assert onStack(el);
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            return stack.get(pos - 1);
        }
    }
    return null;
}","public void test4346() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""rp"", ""rp"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.aboveOnStack(document0);
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"void insertOnStackAfter(Element after, Element in) {
    int i = stack.lastIndexOf(after);
    Validate.isTrue(i != -1);
    stack.add(i + 1, in);
}","public void test4447() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""tfoot"", ""tfoot"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test4549() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Parser.parseBodyFragmentRelaxed(""v[#HsZj5%"", ""v[#HsZj5%"");
    Parser parser0 = Parser.htmlParser();
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""v[#HsZj5%"", document0, ""v[#HsZj5%"", parser0);
    Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
    Token.StartTag token_StartTag0 = tokeniser0.startPending;
    Attributes attributes0 = new Attributes();
    token_StartTag0.nameAttr(""v[#HsZj5%"", attributes0);
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    htmlTreeBuilder0.insertOnStackAfter(element0, document0);
    assertEquals(1, document0.childNodeSize());
}",""
"void replaceActiveFormattingElement(Element out, Element in) {
    replaceInQueue(formattingElements, out, in);
}","public void test4650() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment("""", (Element) null, """", parser0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void replaceOnStack(Element out, Element in) {
    replaceInQueue(stack, out, in);
}","public void test4751() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""A:lmzfB-o|+{"", ""A:lmzfB-o|+{"");
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Elements elements0 = document0.getElementsContainingText(""A:lmzfB-o|+{"");
    htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
    htmlTreeBuilder0.replaceOnStack(document0, document0);
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""th"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test4852() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader(""-U*A/zT|"");
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.initialiseParse(stringReader0, ""dI]F?"", parser0);
    htmlTreeBuilder0.resetInsertionMode();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test4953() throws Throwable {
    Element element0 = new Element(""select"");
    element0.prepend(""select"");
    assertEquals(1, element0.childNodeSize());
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""th"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test5155() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment(""`<*gZl$Gv_n"", (Element) null, ""th"", parser0);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    token_StartTag0.nameAttr(""th"", attributes0);
    htmlTreeBuilder0.insert(token_StartTag0);
    htmlTreeBuilder0.resetInsertionMode();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""th"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test6064() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""DoG`xhU<izQ:$+>h"", (Element) null, ""DoG`xhU<izQ:$+>h"", parser0);
    htmlTreeBuilder0.resetInsertionMode();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"boolean inScope(String targetName) {
    return inScope(targetName, null);
}","public void test6166() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""~P;ovM"", (Element) null, ""~P;ovM"", parser0);
    boolean boolean0 = htmlTreeBuilder0.inScope(""~P;ovM"");
    assertFalse(boolean0);
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test6267() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""h6"", ""h6"");
    assertEquals(1, document0.childNodeSize());
}",""
"boolean inScope(String targetName, String[] extras) {
    return inSpecificScope(targetName, TagsSearchInScope, extras);
    // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml
    // todo: in svg namespace: forignOjbect, desc, title
}","public void test6268() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""h6"", ""h6"");
    htmlTreeBuilder0.processStartTag(""h6"");
    String[] stringArray0 = new String[4];
    stringArray0[1] = ""h6"";
    boolean boolean0 = htmlTreeBuilder0.inScope(""O[%"", stringArray0);
    assertFalse(boolean0);
}",""
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !inSorted(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test6369() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""Should not be reachable"", ""Should not be reachable"");
    htmlTreeBuilder0.popStackToBefore(""Should not be reachable"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inSelectScope(""Should not be reachable"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !inSorted(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test6471() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.xmlParser();
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""`<*gZl$Gv_n"", (Element) null, ""th"", parser0);
    boolean boolean0 = htmlTreeBuilder0.inSelectScope(""template"");
    assertFalse(boolean0);
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test6572() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""body"", ""body"");
    assertEquals(1, document0.childNodeSize());
}",""
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !inSorted(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test6573() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""body"", ""body"");
    boolean boolean0 = htmlTreeBuilder0.inSelectScope(""body"");
    assertTrue(boolean0);
}",""
"void generateImpliedEndTags(String excludeTag) {
    while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop();
}","public void test6674() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""rp"", ""rp"");
    Token.StartTag token_StartTag0 = new Token.StartTag();
    CDataNode cDataNode0 = new CDataNode((String) null);
    Attributes attributes0 = cDataNode0.attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""rp"", attributes0);
    htmlTreeBuilder0.insert(token_StartTag1);
    htmlTreeBuilder0.generateImpliedEndTags("""");
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}","/**
 *     11.2.5.2 Closing elements that have implied end tags<p/>
 *     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
 *     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
 *     the UA must pop the current node off the stack of open elements.
 *
 *     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the
 *     process, then the UA must perform the above steps as if that element was not in the above list.
 */"
"Element removeLastFormattingElement() {
    int size = formattingElements.size();
    if (size > 0)
        return formattingElements.remove(size - 1);
    else
        return null;
}","public void test6775() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""z"", ""z"");
    Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
    assertNull(element0);
}",""
"void reconstructFormattingElements() {
    Element last = lastFormattingElement();
    if (last == null || onStack(last))
        return;
    Element entry = last;
    int size = formattingElements.size();
    int pos = size - 1;
    boolean skip = false;
    while (true) {
        if (pos == 0) {
            // step 4. if none before, skip to 8
            skip = true;
            break;
        }
        // step 5. one earlier than entry
        entry = formattingElements.get(--pos);
        if (// step 6 - neither marker nor on stack
        entry == null || onStack(entry))
            // jump to 8, else continue back to 4
            break;
    }
    while (true) {
        if (// step 7: on later than entry
        !skip)
            entry = formattingElements.get(++pos);
        // should not occur, as we break at last element
        Validate.notNull(entry);
        // 8. create new element from element, 9 insert into current node, onto stack
        // can only skip increment from 4.
        skip = false;
        Element newEl = insertStartTag(entry.nodeName());
        // newEl.namespace(entry.namespace()); // todo: namespaces
        newEl.attributes().addAll(entry.attributes());
        // 10. replace entry with new entry
        formattingElements.set(pos, newEl);
        // 11
        if (// if not last entry in list, jump to 7
        pos == size - 1)
            break;
    }
}","public void test6876() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Tag tag0 = Tag.valueOf(""area"");
    Element element0 = new Element(tag0, ""area"");
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""area"", element0, ""area"", parser0);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    htmlTreeBuilder0.reconstructFormattingElements();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void reconstructFormattingElements() {
    Element last = lastFormattingElement();
    if (last == null || onStack(last))
        return;
    Element entry = last;
    int size = formattingElements.size();
    int pos = size - 1;
    boolean skip = false;
    while (true) {
        if (pos == 0) {
            // step 4. if none before, skip to 8
            skip = true;
            break;
        }
        // step 5. one earlier than entry
        entry = formattingElements.get(--pos);
        if (// step 6 - neither marker nor on stack
        entry == null || onStack(entry))
            // jump to 8, else continue back to 4
            break;
    }
    while (true) {
        if (// step 7: on later than entry
        !skip)
            entry = formattingElements.get(++pos);
        // should not occur, as we break at last element
        Validate.notNull(entry);
        // 8. create new element from element, 9 insert into current node, onto stack
        // can only skip increment from 4.
        skip = false;
        Element newEl = insertStartTag(entry.nodeName());
        // newEl.namespace(entry.namespace()); // todo: namespaces
        newEl.attributes().addAll(entry.attributes());
        // 10. replace entry with new entry
        formattingElements.set(pos, newEl);
        // 11
        if (// if not last entry in list, jump to 7
        pos == size - 1)
            break;
    }
}","public void test6977() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Tag tag0 = Tag.valueOf(""area"");
    Element element0 = new Element(tag0, ""area"");
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""area"", element0, ""area"", parser0);
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    htmlTreeBuilder0.reconstructFormattingElements();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test7079() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Parser.parseBodyFragmentRelaxed(""{[#HsZj5%"", ""{[#HsZj5%"");
    Parser parser0 = Parser.htmlParser();
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""{[#HsZj5%"", document0, ""{[#HsZj5%"", parser0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    assertEquals(1, document0.childNodeSize());
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test7180() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Tag tag0 = Tag.valueOf(""AfterHead"");
    Element element0 = new Element(tag0, ""afterhead"");
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""afterhead"", element0, ""O U"", parser0);
    CDataNode cDataNode0 = new CDataNode(""nosquirks"");
    Attributes attributes0 = cDataNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""2?xlb;}YQc"", attributes0);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
    assertEquals(0, formElement0.childNodeSize());
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test7281() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""P.<S<:e*y!rY=*hxh"", ""ylnT=[7H{aPFeq"");
    assertEquals(1, document0.childNodeSize());
}",""
"void reconstructFormattingElements() {
    Element last = lastFormattingElement();
    if (last == null || onStack(last))
        return;
    Element entry = last;
    int size = formattingElements.size();
    int pos = size - 1;
    boolean skip = false;
    while (true) {
        if (pos == 0) {
            // step 4. if none before, skip to 8
            skip = true;
            break;
        }
        // step 5. one earlier than entry
        entry = formattingElements.get(--pos);
        if (// step 6 - neither marker nor on stack
        entry == null || onStack(entry))
            // jump to 8, else continue back to 4
            break;
    }
    while (true) {
        if (// step 7: on later than entry
        !skip)
            entry = formattingElements.get(++pos);
        // should not occur, as we break at last element
        Validate.notNull(entry);
        // 8. create new element from element, 9 insert into current node, onto stack
        // can only skip increment from 4.
        skip = false;
        Element newEl = insertStartTag(entry.nodeName());
        // newEl.namespace(entry.namespace()); // todo: namespaces
        newEl.attributes().addAll(entry.attributes());
        // 10. replace entry with new entry
        formattingElements.set(pos, newEl);
        // 11
        if (// if not last entry in list, jump to 7
        pos == size - 1)
            break;
    }
}","public void test7382() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Parser.parseBodyFragmentRelaxed(""{[#HsZj5%"", ""{[#HsZj5%"");
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""{[#HsZj5%"", document0, ""{[#HsZj5%"", parser0);
    CharacterReader characterReader0 = htmlTreeBuilder0.reader;
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(405);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    CDataNode cDataNode0 = new CDataNode(""{[#HsZj5%"");
    Attributes attributes0 = cDataNode0.attributes();
    Token.StartTag token_StartTag0 = tokeniser0.startPending;
    token_StartTag0.nameAttr(""{[#HsZj5%"", attributes0);
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.reconstructFormattingElements();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void clearFormattingElementsToLastMarker() {
    while (!formattingElements.isEmpty()) {
        Element el = removeLastFormattingElement();
        if (el == null)
            break;
    }
}","public void test7483() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Tag tag0 = Tag.valueOf(""caption"");
    Element element0 = new Element(tag0, ""caption"");
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""?ONYK"", element0, ""caption"", parser0);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    htmlTreeBuilder0.clearFormattingElementsToLastMarker();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void clearFormattingElementsToLastMarker() {
    while (!formattingElements.isEmpty()) {
        Element el = removeLastFormattingElement();
        if (el == null)
            break;
    }
}","public void test7584() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment(""caption"", (Element) null, ""<Mz4 'M"", parser0);
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
    htmlTreeBuilder0.clearFormattingElementsToLastMarker();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void removeFromActiveFormattingElements(Element el) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (next == el) {
            formattingElements.remove(pos);
            break;
        }
    }
}","public void test7685() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.getDocument();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""~P;ovM"", (Element) null, ""~P;ovM"", parser0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void removeFromActiveFormattingElements(Element el) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (next == el) {
            formattingElements.remove(pos);
            break;
        }
    }
}","public void test7786() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""~P;ovM"", (Element) null, ""~P;ovM"", parser0);
    CDataNode cDataNode0 = new CDataNode(""~P;ovM"");
    Attributes attributes0 = cDataNode0.attributes();
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""~P;ovM"", attributes0);
    Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"Element getActiveFormattingElement(String nodeName) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (// scope marker
        next == null)
            break;
        else if (next.nodeName().equals(nodeName))
            return next;
    }
    return null;
}","public void test7887() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Parser.parseBodyFragmentRelaxed(""{[#HsZj5%"", ""{[#HsZj5%"");
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""{[#HsZj5%"", document0, ""{[#HsZj5%"", parser0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    Element element0 = htmlTreeBuilder0.getActiveFormattingElement(""{[#HsZj5%"");
    assertNull(element0);
}",""
"Element getActiveFormattingElement(String nodeName) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (// scope marker
        next == null)
            break;
        else if (next.nodeName().equals(nodeName))
            return next;
    }
    return null;
}","public void test7988() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment(""V:Q!l(<z=mV"", (Element) null, ""V:Q!l(<z=mV"", parser0);
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
    Element element0 = htmlTreeBuilder0.getActiveFormattingElement(""V:Q!l(<z=mV"");
    assertNull(element0);
}",""
"Element getActiveFormattingElement(String nodeName) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (// scope marker
        next == null)
            break;
        else if (next.nodeName().equals(nodeName))
            return next;
    }
    return null;
}","public void test8089() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""hgrup"", (Element) null, ""hgrup"", parser0);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""hgrup"", attributes0);
    Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    Element element1 = htmlTreeBuilder0.getActiveFormattingElement(""hgrup"");
    assertNotNull(element1);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test8090() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    htmlTreeBuilder0.parseFragment(""hgrup"", (Element) null, ""hgrup"", parser0);
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""hgrup"", attributes0);
    Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    Element element1 = htmlTreeBuilder0.getActiveFormattingElement(""hgrup"");
    assertEquals(1, element1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
