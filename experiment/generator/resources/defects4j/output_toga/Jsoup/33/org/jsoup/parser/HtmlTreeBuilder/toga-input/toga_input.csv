focal_method,test_prefix,docstring
"void replaceActiveFormattingElement(Element out, Element in) {
    replaceInQueue(formattingElements, out, in);
}","public void test0000() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    Document document1 = document0.clone();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public String baseUri() {
    return baseUri;
}","public void test0011() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""HBHSueiz-#]w7,"");
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1624010227));
    htmlTreeBuilder0.parseFragment(""N@*&~sm~"", document0, ""N@*&~sm~"", parseErrorList0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    assertEquals(""HBHSueiz-#]w7,"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"void insertOnStackAfter(Element after, Element in) {
    int i = stack.lastIndexOf(after);
    Validate.isTrue(i != -1);
    stack.add(i + 1, in);
}","public void test0022() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    Document document1 = document0.clone();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertOnStackAfter(document0, document1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void error(HtmlTreeBuilderState state) {
    if (errors.canAddError())
        errors.add(new ParseError(reader.pos(), ""Unexpected token [%s] when in state [%s]"", currentToken.tokenType(), state));
}","public void test0033() throws Throwable {
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterBody;
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(2229);
    htmlTreeBuilder0.parse(""hQJU}$)"", ""X34>-\""Dmu_W.y0j?bg"", parseErrorList0);
    htmlTreeBuilder0.error(htmlTreeBuilderState0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test0044() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.insertInFosterParent(document0);
    assertEquals(2, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"void insert(Token.Comment commentToken) {
    Comment comment = new Comment(commentToken.getData(), baseUri);
    insertNode(comment);
}","public void test0055() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""k6Q5Y~;ry'gnhZv"", ""k6Q5Y~;ry'gnhZv"");
    Token.Comment token_Comment0 = new Token.Comment();
    htmlTreeBuilder0.insert(token_Comment0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test0077() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("":>Jt__{Tx2Sb DQ#"", """");
    htmlTreeBuilder0.insert(document0);
    assertEquals(1, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test0078() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("":>Jt__{Tx2Sb DQ#"", """");
    htmlTreeBuilder0.insert(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"void transition(HtmlTreeBuilderState state) {
    this.state = state;
}","public void test0089() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
    htmlTreeBuilder0.transition(htmlTreeBuilderState0);
}",""
"public String tagName() {
    return tag.getName();
}","public void test00910() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""HBHSueiz-#]w7,"");
    htmlTreeBuilder0.setHeadElement(document0);
    assertEquals(""#root"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test01011() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Tag tag0 = Tag.valueOf(""xFrmeN"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""xFrmeN"", attributes0);
    htmlTreeBuilder0.setFormElement(formElement0);
    assertFalse(formElement0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"void framesetOk(boolean framesetOk) {
    this.framesetOk = framesetOk;
}","public void test01112() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.framesetOk(true);
}",""
"void replaceActiveFormattingElement(Element out, Element in) {
    replaceInQueue(formattingElements, out, in);
}","public void test01213() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
    htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
}",""
"void clearStackToTableRowContext() {
    clearStackToContext(""tr"");
}","public void test01314() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.clearStackToTableRowContext();
}",""
"@Override
public String toString() {
    return ""TreeBuilder{"" + ""currentToken="" + currentToken + "", state="" + state + "", currentElement="" + currentElement() + '}';
}","public void test01415() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    String string0 = htmlTreeBuilder0.toString();
    assertNotNull(string0);
}",""
"HtmlTreeBuilderState state() {
    return state;
}","public void test01516() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.state();
}",""
"@Override
protected boolean process(Token token) {
    currentToken = token;
    return this.state.process(token, this);
}","public void test01617() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Token.StartTag token_StartTag0 = new Token.StartTag("" <%s>"");
    boolean boolean0 = htmlTreeBuilder0.process(token_StartTag0);
    assertTrue(boolean0);
}",""
"@Override
protected boolean process(Token token) {
    currentToken = token;
    return this.state.process(token, this);
}","public void test01718() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""X34>-\""Dmu_W.y0j?bg"", ""X34>-\""Dmu_W.y0j?bg"");
    Token.Doctype token_Doctype0 = new Token.Doctype();
    boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
    assertFalse(boolean0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test01819() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Token.StartTag token_StartTag0 = new Token.StartTag("" <%s>"");
    htmlTreeBuilder0.insert(token_StartTag0);
    Element element0 = htmlTreeBuilder0.pop();
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test01920() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Element element0 = htmlTreeBuilder0.pop();
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test02021() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""X34>-\""Dmu_W.y0j?bg"", ""Rawtext"", (ParseErrorList) null);
    Element element0 = htmlTreeBuilder0.pop();
    assertEquals(""Rawtext"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test02022() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""X34>-\""Dmu_W.y0j?bg"", ""Rawtext"", (ParseErrorList) null);
    Element element0 = htmlTreeBuilder0.pop();
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"boolean onStack(Element el) {
    return isElementInQueue(stack, el);
}","public void test02123() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    boolean boolean0 = htmlTreeBuilder0.onStack(document0);
    assertFalse(boolean0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test02124() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    boolean boolean0 = htmlTreeBuilder0.onStack(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean isSpecial(Element el) {
    // todo: mathml's mi, mo, mn
    // todo: svg's foreigObject, desc, title
    String name = el.nodeName();
    return StringUtil.in(name, ""address"", ""applet"", ""area"", ""article"", ""aside"", ""base"", ""basefont"", ""bgsound"", ""blockquote"", ""body"", ""br"", ""button"", ""caption"", ""center"", ""col"", ""colgroup"", ""command"", ""dd"", ""details"", ""dir"", ""div"", ""dl"", ""dt"", ""embed"", ""fieldset"", ""figcaption"", ""figure"", ""footer"", ""form"", ""frame"", ""frameset"", ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"", ""head"", ""header"", ""hgroup"", ""hr"", ""html"", ""iframe"", ""img"", ""input"", ""isindex"", ""li"", ""link"", ""listing"", ""marquee"", ""menu"", ""meta"", ""nav"", ""noembed"", ""noframes"", ""noscript"", ""object"", ""ol"", ""p"", ""param"", ""plaintext"", ""pre"", ""script"", ""section"", ""select"", ""style"", ""summary"", ""table"", ""tbody"", ""td"", ""textarea"", ""tfoot"", ""th"", ""thead"", ""title"", ""tr"", ""ul"", ""wbr"", ""xmp"");
}","public void test02225() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""&;~~sy1>9="");
    Element element0 = document0.createElement(""h3"");
    boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
    assertTrue(boolean0);
}",""
"boolean isFragmentParsing() {
    return fragmentParsing;
}","public void test02326() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parseFragment(""q"", document0, ""<{'a_Id_QlqU"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
    assertTrue(boolean0);
}",""
"boolean isFosterInserts() {
    return fosterInserts;
}","public void test02427() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
    assertFalse(boolean0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test02528() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(2229);
    htmlTreeBuilder0.parse(""hQJU}$)"", ""X34>-\""Dmu_W.y0j?bg"", parseErrorList0);
    Token.StartTag token_StartTag0 = new Token.StartTag(""div"");
    FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
    assertEquals(1, formElement0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test02529() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(2229);
    htmlTreeBuilder0.parse(""hQJU}$)"", ""X34>-\""Dmu_W.y0j?bg"", parseErrorList0);
    Token.StartTag token_StartTag0 = new Token.StartTag(""div"");
    FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
    assertEquals(""X34>-\""Dmu_W.y0j?bg"", formElement0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test02630() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag0 = new Token.StartTag(""base"", attributes0);
    htmlTreeBuilder0.insert("");0J$G_kEQ@XbyXJ"");
    Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test02731() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Token.StartTag token_StartTag0 = new Token.StartTag("" <%s>"");
    token_StartTag0.tagName = ""table"";
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test02832() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""X34>-\""Dmu_W.y0j?bg"", ""Rawtext"", (ParseErrorList) null);
    Element element0 = htmlTreeBuilder0.insert(""frameset"");
    assertEquals(""Rawtext"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test02833() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""X34>-\""Dmu_W.y0j?bg"", ""Rawtext"", (ParseErrorList) null);
    Element element0 = htmlTreeBuilder0.insert(""frameset"");
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test02934() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean inTableScope(String targetName) {
    return inSpecificScope(targetName, new String[] { ""html"", ""table"" }, null);
}","public void test02935() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    boolean boolean0 = htmlTreeBuilder0.inTableScope(""html"");
    assertTrue(boolean0);
}",""
"boolean inTableScope(String targetName) {
    return inSpecificScope(targetName, new String[] { ""html"", ""table"" }, null);
}","public void test03037() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    boolean boolean0 = htmlTreeBuilder0.inTableScope(""<{'a_Id_QlqU"");
    assertFalse(boolean0);
}",""
"boolean inScope(String[] targetNames) {
    return inSpecificScope(targetNames, new String[] { ""applet"", ""caption"", ""html"", ""table"", ""td"", ""th"", ""marquee"", ""object"" }, null);
}","public void test03138() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    String[] stringArray0 = new String[8];
    stringArray0[0] = ""org.jsoup.nodes.Element$1"";
    stringArray0[1] = ""applet"";
    stringArray0[2] = "");0J$G_kEQ@XbyXJ"";
    stringArray0[3] = ""V,1}6}Z!-[~"";
    stringArray0[4] = ""applet"";
    stringArray0[5] = ""applet"";
    stringArray0[6] = ""org.jsoup.parser.TreeBuilder"";
    stringArray0[7] = ""org.jsoup.parser.TreeBuilder"";
    boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
    assertFalse(boolean0);
}",""
"boolean inListItemScope(String targetName) {
    return inScope(targetName, new String[] { ""ol"", ""ul"" });
}","public void test03240() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    boolean boolean0 = htmlTreeBuilder0.inListItemScope(""html"");
    assertTrue(boolean0);
}",""
"boolean inListItemScope(String targetName) {
    return inScope(targetName, new String[] { ""ol"", ""ul"" });
}","public void test03341() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document("""");
    htmlTreeBuilder0.parseFragment(""html"", document0, """", (ParseErrorList) null);
    boolean boolean0 = htmlTreeBuilder0.inListItemScope("""");
    assertFalse(boolean0);
}",""
"boolean inButtonScope(String targetName) {
    return inScope(targetName, new String[] { ""button"" });
}","public void test03443() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    boolean boolean0 = htmlTreeBuilder0.inButtonScope(""<{'a_Id_QlqU"");
    assertFalse(boolean0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test03747() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""X34>-\""Dmu_W.y0j?bg"", ""Rawtext"", (ParseErrorList) null);
    Element element0 = document0.head();
    element0.before((Node) document0);
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test03748() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""X34>-\""Dmu_W.y0j?bg"", ""Rawtext"", (ParseErrorList) null);
    Element element0 = document0.head();
    element0.before((Node) document0);
    Element element1 = htmlTreeBuilder0.getHeadElement();
    assertEquals(1, element1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"Element getFromStack(String elName) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next.nodeName().equals(elName)) {
            return next;
        }
    }
    return null;
}","public void test03849() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Element element0 = htmlTreeBuilder0.getFromStack(""q"");
    assertNull(element0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test03950() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Document document0 = htmlTreeBuilder0.getDocument();
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test04051() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parseFragment(""q"", document0, ""<{'a_Id_QlqU"", parseErrorList0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"String getBaseUri() {
    return baseUri;
}","public void test04052() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parseFragment(""q"", document0, ""<{'a_Id_QlqU"", parseErrorList0);
    String string0 = htmlTreeBuilder0.getBaseUri();
    assertEquals(""<{'a_Id_QlqU"", string0);
}",""
"String getBaseUri() {
    return baseUri;
}","public void test04153() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    String string0 = htmlTreeBuilder0.getBaseUri();
    assertEquals("""", string0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test04254() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.reconstructFormattingElements();
    Element element0 = htmlTreeBuilder0.insert(""org.jsoup.parser.TreeBuilder"");
    Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
    assertEquals(1, element1.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"Element aboveOnStack(Element el) {
    assert onStack(el);
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next == el) {
            return it.next();
        }
    }
    return null;
}","public void test04255() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.reconstructFormattingElements();
    Element element0 = htmlTreeBuilder0.insert(""org.jsoup.parser.TreeBuilder"");
    Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
    assertNotNull(element1);
}",""
"@Override
public String nodeName() {
    return tag.getName();
}","public void test04256() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.reconstructFormattingElements();
    Element element0 = htmlTreeBuilder0.insert(""org.jsoup.parser.TreeBuilder"");
    Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
    assertEquals(""#document"", element1.nodeName());
}",""
"@Override
public String toString() {
    return ""TreeBuilder{"" + ""currentToken="" + currentToken + "", state="" + state + "", currentElement="" + currentElement() + '}';
}","public void test04357() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.popStackToBefore("""");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.toString();
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}",""
"void resetInsertionMode() {
    boolean last = false;
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element node = it.next();
        if (!it.hasNext()) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""td"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test04458() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.resetInsertionMode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void replaceOnStack(Element out, Element in) {
    replaceInQueue(stack, out, in);
}","public void test04559() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Tag tag0 = Tag.valueOf("">gK1"");
    TextNode textNode0 = TextNode.createFromEncoded(""qVfX=[)|"", ""TEq#r\"")5HK"");
    Attributes attributes0 = textNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, "">gK1"", attributes0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceOnStack(formElement0, formElement0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean removeFromStack(Element el) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next == el) {
            it.remove();
            return true;
        }
    }
    return false;
}","public void test04660() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.removeFromStack((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void reconstructFormattingElements() {
    int size = formattingElements.size();
    if (size == 0 || formattingElements.getLast() == null || onStack(formattingElements.getLast()))
        return;
    Element entry = formattingElements.getLast();
    int pos = size - 1;
    boolean skip = false;
    while (true) {
        if (pos == 0) {
            // step 4. if none before, skip to 8
            skip = true;
            break;
        }
        // step 5. one earlier than entry
        entry = formattingElements.get(--pos);
        if (// step 6 - neither marker nor on stack
        entry == null || onStack(entry))
            // jump to 8, else continue back to 4
            break;
    }
    while (true) {
        if (// step 7: on later than entry
        !skip)
            entry = formattingElements.get(++pos);
        // should not occur, as we break at last element
        Validate.notNull(entry);
        // 8. create new element from element, 9 insert into current node, onto stack
        // can only skip increment from 4.
        skip = false;
        // todo: avoid fostering here?
        Element newEl = insert(entry.nodeName());
        // newEl.namespace(entry.namespace()); // todo: namespaces
        newEl.attributes().addAll(entry.attributes());
        // 10. replace entry with new entry
        formattingElements.add(pos, newEl);
        formattingElements.remove(pos + 1);
        // 11
        if (// if not last entry in list, jump to 7
        pos == size - 1)
            break;
    }
}","public void test04761() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document("" ?T;P7hKJZ"");
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.reconstructFormattingElements();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"// active formatting elements
void pushActiveFormattingElements(Element in) {
    int numSeen = 0;
    Iterator<Element> iter = formattingElements.descendingIterator();
    while (iter.hasNext()) {
        Element el = iter.next();
        if (// marker
        el == null)
            break;
        if (isSameFormattingElement(in, el))
            numSeen++;
        if (numSeen == 3) {
            iter.remove();
            break;
        }
    }
    formattingElements.add(in);
}","public void test04862() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""HBHSueiz-#]w7,"");
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void push(Element element) {
    stack.add(element);
}","public void test04963() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell("""");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.push(document0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean process(Token token, HtmlTreeBuilderState state) {
    currentToken = token;
    return state.process(token, this);
}","public void test05064() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("":>Jt__{Tx2Sb DQ#"", """");
    htmlTreeBuilder0.popStackToClose(""T|j&Iz#65l-HYJ"");
    Token.Character token_Character0 = new Token.Character(""T|j&Iz#65l-HYJ"");
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHead;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process(token_Character0, htmlTreeBuilderState0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}",""
"boolean process(Token token, HtmlTreeBuilderState state) {
    currentToken = token;
    return state.process(token, this);
}","public void test05165() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process((Token) null, htmlTreeBuilderState0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilderState$9"", e);
    }
}",""
"boolean process(Token token, HtmlTreeBuilderState state) {
    currentToken = token;
    return state.process(token, this);
}","public void test05266() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.Doctype token_Doctype0 = new Token.Doctype();
    Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
    token_Doctype0.type = token_TokenType0;
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag
        //
        verifyException(""org.jsoup.parser.Token"", e);
    }
}",""
"@Override
protected boolean process(Token token) {
    currentToken = token;
    return this.state.process(token, this);
}","public void test05367() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.StartTag token_StartTag0 = new Token.StartTag();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process(token_StartTag0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void popStackToClose(String... elNames) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (StringUtil.in(next.nodeName(), elNames)) {
            it.remove();
            break;
        } else {
            it.remove();
        }
    }
}","public void test05468() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String[] stringArray0 = new String[2];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void popStackToClose(String elName) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next.nodeName().equals(elName)) {
            it.remove();
            break;
        } else {
            it.remove();
        }
    }
}","public void test05569() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.popStackToClose((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void popStackToBefore(String elName) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next.nodeName().equals(elName)) {
            break;
        } else {
            it.remove();
        }
    }
}","public void test05670() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.popStackToBefore(""`"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element pop() {
    // todo - dev, remove validation check
    if (stack.peekLast().nodeName().equals(""td"") && !state.name().equals(""InCell""))
        Validate.isFalse(true, ""pop td not in cell"");
    if (stack.peekLast().nodeName().equals(""html""))
        Validate.isFalse(true, ""popping html!"");
    return stack.pollLast();
}","public void test05771() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.pop();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors) {
    // context may be null
    state = HtmlTreeBuilderState.Initial;
    initialiseParse(inputFragment, baseUri, errors);
    contextElement = context;
    fragmentParsing = true;
    Element root = null;
    if (context != null) {
        if (// quirks setup:
        context.ownerDocument() != null)
            doc.quirksMode(context.ownerDocument().quirksMode());
        // initialise the tokeniser state:
        String contextTag = context.tagName();
        if (StringUtil.in(contextTag, ""title"", ""textarea""))
            tokeniser.transition(TokeniserState.Rcdata);
        else if (StringUtil.in(contextTag, ""iframe"", ""noembed"", ""noframes"", ""style"", ""xmp""))
            tokeniser.transition(TokeniserState.Rawtext);
        else if (contextTag.equals(""script""))
            tokeniser.transition(TokeniserState.ScriptData);
        else if (contextTag.equals((""noscript"")))
            // if scripting enabled, rawtext
            tokeniser.transition(TokeniserState.Data);
        else if (contextTag.equals(""plaintext""))
            tokeniser.transition(TokeniserState.Data);
        else
            // default
            tokeniser.transition(TokeniserState.Data);
        root = new Element(Tag.valueOf(""html""), baseUri);
        doc.appendChild(root);
        stack.push(root);
        resetInsertionMode();
        // setup form element to nearest form on context (up ancestor chain). ensures form controls are associated
        // with form correctly
        Elements contextChain = context.parents();
        contextChain.add(0, context);
        for (Element parent : contextChain) {
            if (parent instanceof FormElement) {
                formElement = (FormElement) parent;
                break;
            }
        }
    }
    runParser();
    if (context != null)
        return root.childNodes();
    else
        return doc.childNodes();
}","public void test05872() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(59);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.parseFragment((String) null, (Element) null, """", parseErrorList0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String input must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
Document parse(String input, String baseUri, ParseErrorList errors) {
    state = HtmlTreeBuilderState.Initial;
    return super.parse(input, baseUri, errors);
}","public void test05973() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.parse((String) null, (String) null, (ParseErrorList) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String input must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean onStack(Element el) {
    return isElementInQueue(stack, el);
}","public void test06074() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.onStack((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"void maybeSetBaseUri(Element base) {
    if (// only listen to the first <base href> in parse
    baseUriSetFromDoc)
        return;
    String href = base.absUrl(""href"");
    if (href.length() != 0) {
        // ignore <base target> etc
        baseUri = href;
        baseUriSetFromDoc = true;
        // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants
        doc.setBaseUri(href);
    }
}","public void test06175() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean isSpecial(Element el) {
    // todo: mathml's mi, mo, mn
    // todo: svg's foreigObject, desc, title
    String name = el.nodeName();
    return StringUtil.in(name, ""address"", ""applet"", ""area"", ""article"", ""aside"", ""base"", ""basefont"", ""bgsound"", ""blockquote"", ""body"", ""br"", ""button"", ""caption"", ""center"", ""col"", ""colgroup"", ""command"", ""dd"", ""details"", ""dir"", ""div"", ""dl"", ""dt"", ""embed"", ""fieldset"", ""figcaption"", ""figure"", ""footer"", ""form"", ""frame"", ""frameset"", ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"", ""head"", ""header"", ""hgroup"", ""hr"", ""html"", ""iframe"", ""img"", ""input"", ""isindex"", ""li"", ""link"", ""listing"", ""marquee"", ""menu"", ""meta"", ""nav"", ""noembed"", ""noframes"", ""noscript"", ""object"", ""ol"", ""p"", ""param"", ""plaintext"", ""pre"", ""script"", ""section"", ""select"", ""style"", ""summary"", ""table"", ""tbody"", ""td"", ""textarea"", ""tfoot"", ""th"", ""thead"", ""title"", ""tr"", ""ul"", ""wbr"", ""xmp"");
}","public void test06276() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.isSpecial((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void insertOnStackAfter(Element after, Element in) {
    int i = stack.lastIndexOf(after);
    Validate.isTrue(i != -1);
    stack.add(i + 1, in);
}","public void test06377() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void insertInFosterParent(Node in) {
    Element fosterParent = null;
    Element lastTable = getFromStack(""table"");
    boolean isLastTableParent = false;
    if (lastTable != null) {
        if (lastTable.parent() != null) {
            fosterParent = lastTable.parent();
            isLastTableParent = true;
        } else
            fosterParent = aboveOnStack(lastTable);
    } else {
        // no table == frag
        fosterParent = stack.get(0);
    }
    if (isLastTableParent) {
        // last table cannot be null by this point.
        Validate.notNull(lastTable);
        lastTable.before(in);
    } else
        fosterParent.appendChild(in);
}","public void test06478() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"FormElement insertForm(Token.StartTag startTag, boolean onStack) {
    Tag tag = Tag.valueOf(startTag.name());
    FormElement el = new FormElement(tag, baseUri, startTag.attributes);
    setFormElement(el);
    insertNode(el);
    if (onStack)
        stack.add(el);
    return el;
}","public void test06579() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag0 = new Token.StartTag((String) null, attributes0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"FormElement insertForm(Token.StartTag startTag, boolean onStack) {
    Tag tag = Tag.valueOf(startTag.name());
    FormElement el = new FormElement(tag, baseUri, startTag.attributes);
    setFormElement(el);
    insertNode(el);
    if (onStack)
        stack.add(el);
    return el;
}","public void test06680() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag0 = new Token.StartTag(""@YWxG2 -"", attributes0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertForm(token_StartTag0, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Element insertEmpty(Token.StartTag startTag) {
    Tag tag = Tag.valueOf(startTag.name());
    Element el = new Element(tag, baseUri, startTag.attributes);
    insertNode(el);
    if (startTag.isSelfClosing()) {
        if (tag.isKnownTag()) {
            // if not acked, promulagates error
            if (tag.isSelfClosing())
                tokeniser.acknowledgeSelfClosingFlag();
        } else {
            // unknown tag, remember this is self closing for output
            tag.setSelfClosing();
            // not an distinct error
            tokeniser.acknowledgeSelfClosingFlag();
        }
    }
    return el;
}","public void test06781() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.StartTag token_StartTag0 = new Token.StartTag((String) null);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"Element insertEmpty(Token.StartTag startTag) {
    Tag tag = Tag.valueOf(startTag.name());
    Element el = new Element(tag, baseUri, startTag.attributes);
    insertNode(el);
    if (startTag.isSelfClosing()) {
        if (tag.isKnownTag()) {
            // if not acked, promulagates error
            if (tag.isSelfClosing())
                tokeniser.acknowledgeSelfClosingFlag();
        } else {
            // unknown tag, remember this is self closing for output
            tag.setSelfClosing();
            // not an distinct error
            tokeniser.acknowledgeSelfClosingFlag();
        }
    }
    return el;
}","public void test06882() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.StartTag token_StartTag0 = new Token.StartTag(""*z_"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Element insert(Token.StartTag startTag) {
    // handle empty unknown tags
    // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
    if (startTag.isSelfClosing()) {
        Element el = insertEmpty(startTag);
        stack.add(el);
        // ensure we get out of whatever state we are in. emitted for yielded processing
        tokeniser.emit(new Token.EndTag(el.tagName()));
        return el;
    }
    Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
    insert(el);
    return el;
}","public void test06983() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert((Token.StartTag) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"void insert(Token.Comment commentToken) {
    Comment comment = new Comment(commentToken.getData(), baseUri);
    insertNode(comment);
}","public void test07084() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert((Token.Comment) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void insert(Token.Comment commentToken) {
    Comment comment = new Comment(commentToken.getData(), baseUri);
    insertNode(comment);
}","public void test07185() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.Comment token_Comment0 = new Token.Comment();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert(token_Comment0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void insert(Token.Character characterToken) {
    Node node;
    // characters in script and style go in as datanodes, not text nodes
    if (StringUtil.in(currentElement().tagName(), ""script"", ""style""))
        node = new DataNode(characterToken.getData(), baseUri);
    else
        node = new TextNode(characterToken.getData(), baseUri);
    // doesn't use insertNode, because we don't foster these; and will always have a stack.
    currentElement().appendChild(node);
}","public void test07286() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.popStackToBefore("""");
    Token.Character token_Character0 = new Token.Character(""<{'a_Id_QlqU"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert(token_Character0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}",""
"void insert(Token.Character characterToken) {
    Node node;
    // characters in script and style go in as datanodes, not text nodes
    if (StringUtil.in(currentElement().tagName(), ""script"", ""style""))
        node = new DataNode(characterToken.getData(), baseUri);
    else
        node = new TextNode(characterToken.getData(), baseUri);
    // doesn't use insertNode, because we don't foster these; and will always have a stack.
    currentElement().appendChild(node);
}","public void test07387() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.Character token_Character0 = new Token.Character("""");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert(token_Character0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"void insert(Element el) {
    insertNode(el);
    stack.add(el);
}","public void test07488() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"Element insert(String startTagName) {
    Element el = new Element(Tag.valueOf(startTagName), baseUri);
    insert(el);
    return el;
}","public void test07589() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inTableScope(String targetName) {
    return inSpecificScope(targetName, new String[] { ""html"", ""table"" }, null);
}","public void test07690() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""missing semicolon"", ""z}YMjG+,4"", parseErrorList0);
    htmlTreeBuilder0.popStackToBefore(""missing semicolon"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inTableScope(""02Gpvyl[m6yRs\"""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inSelectScope(String targetName) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element el = it.next();
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !StringUtil.in(elName, ""optgroup"", ""option""))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test07791() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inSelectScope(""Lvb.Fsa#w\"""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean inScope(String[] targetNames) {
    return inSpecificScope(targetNames, new String[] { ""applet"", ""caption"", ""html"", ""table"", ""td"", ""th"", ""marquee"", ""object"" }, null);
}","public void test07892() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""#Z7e}.-*x{SqAm5p"", ""#Z7e}.-*x{SqAm5p"");
    htmlTreeBuilder0.popStackToClose(""#Z7e}.-*x{SqAm5p"");
    String[] stringArray0 = new String[7];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inScope(String targetName, String[] extras) {
    return inSpecificScope(targetName, new String[] { ""applet"", ""caption"", ""html"", ""table"", ""td"", ""th"", ""marquee"", ""object"" }, extras);
    // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml
    // todo: in svg namespace: forignOjbect, desc, title
}","public void test07993() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.popStackToBefore("""");
    String[] stringArray0 = new String[4];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(""0YOq;^*>uH`u}4p50Hq"", stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inScope(String targetName) {
    return inScope(targetName, null);
}","public void test08094() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.popStackToClose(""applet"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(""org.jsoup.parser.TreeBuilder"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inListItemScope(String targetName) {
    return inScope(targetName, new String[] { ""ol"", ""ul"" });
}","public void test08195() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.popStackToClose(""4K}ahDkT(u+,t"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inListItemScope(""q"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Element getFromStack(String elName) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next.nodeName().equals(elName)) {
            return next;
        }
    }
    return null;
}","public void test08296() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.getFromStack((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element aboveOnStack(Element el) {
    assert onStack(el);
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next == el) {
            return it.next();
        }
    }
    return null;
}","public void test08397() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Tag tag0 = Tag.valueOf(""dir"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""dir"", attributes0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.aboveOnStack(element0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test08498() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""k6Q5Y~;ry'gnhZv"", ""k6Q5Y~;ry'gnhZv"");
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean framesetOk() {
    return framesetOk;
}","public void test08499() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""k6Q5Y~;ry'gnhZv"", ""k6Q5Y~;ry'gnhZv"");
    boolean boolean0 = htmlTreeBuilder0.framesetOk();
    assertFalse(boolean0);
}",""
"Element getActiveFormattingElement(String nodeName) {
    Iterator<Element> it = formattingElements.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (// scope marker
        next == null)
            break;
        else if (next.nodeName().equals(nodeName))
            return next;
    }
    return null;
}","public void test085100() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
    Element element0 = htmlTreeBuilder0.getActiveFormattingElement("" ?T;P7hKJZ"");
    assertNull(element0);
}",""
"Element getActiveFormattingElement(String nodeName) {
    Iterator<Element> it = formattingElements.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (// scope marker
        next == null)
            break;
        else if (next.nodeName().equals(nodeName))
            return next;
    }
    return null;
}","public void test086101() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    Element element0 = htmlTreeBuilder0.getActiveFormattingElement(""VK:{Z"");
    assertNull(element0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test087102() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.getHeadElement();
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test088103() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"void clearFormattingElementsToLastMarker() {
    while (!formattingElements.isEmpty()) {
        Element el = formattingElements.peekLast();
        formattingElements.removeLast();
        if (el == null)
            break;
    }
}","public void test089104() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""HBHSueiz-#]w7,"");
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.clearFormattingElementsToLastMarker();
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test090105() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""HBHSueiz-#]w7,"");
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1624010227));
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    Document document1 = htmlTreeBuilder0.parse(""Z8|)~vg_"", ""org.jsoup.select.Evaluator$AttributeWithValueMatching"", parseErrorList0);
    assertEquals(1, document1.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"void reconstructFormattingElements() {
    int size = formattingElements.size();
    if (size == 0 || formattingElements.getLast() == null || onStack(formattingElements.getLast()))
        return;
    Element entry = formattingElements.getLast();
    int pos = size - 1;
    boolean skip = false;
    while (true) {
        if (pos == 0) {
            // step 4. if none before, skip to 8
            skip = true;
            break;
        }
        // step 5. one earlier than entry
        entry = formattingElements.get(--pos);
        if (// step 6 - neither marker nor on stack
        entry == null || onStack(entry))
            // jump to 8, else continue back to 4
            break;
    }
    while (true) {
        if (// step 7: on later than entry
        !skip)
            entry = formattingElements.get(++pos);
        // should not occur, as we break at last element
        Validate.notNull(entry);
        // 8. create new element from element, 9 insert into current node, onto stack
        // can only skip increment from 4.
        skip = false;
        // todo: avoid fostering here?
        Element newEl = insert(entry.nodeName());
        // newEl.namespace(entry.namespace()); // todo: namespaces
        newEl.attributes().addAll(entry.attributes());
        // 10. replace entry with new entry
        formattingElements.add(pos, newEl);
        formattingElements.remove(pos + 1);
        // 11
        if (// if not last entry in list, jump to 7
        pos == size - 1)
            break;
    }
}","public void test091106() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
    htmlTreeBuilder0.reconstructFormattingElements();
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test092107() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.getHeadElement();
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"// active formatting elements
void pushActiveFormattingElements(Element in) {
    int numSeen = 0;
    Iterator<Element> iter = formattingElements.descendingIterator();
    while (iter.hasNext()) {
        Element el = iter.next();
        if (// marker
        el == null)
            break;
        if (isSameFormattingElement(in, el))
            numSeen++;
        if (numSeen == 3) {
            iter.remove();
            break;
        }
    }
    formattingElements.add(in);
}","public void test093108() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
}",""
"void generateImpliedEndTags(String excludeTag) {
    while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && StringUtil.in(currentElement().nodeName(), ""dd"", ""dt"", ""li"", ""option"", ""optgroup"", ""p"", ""rp"", ""rt"")) pop();
}","public void test094109() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.generateImpliedEndTags(""hpjH`/1_94X/S"");
}","/**
 *     11.2.5.2 Closing elements that have implied end tags<p/>
 *     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
 *     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
 *     the UA must pop the current node off the stack of open elements.
 *
 *     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the
 *     process, then the UA must perform the above steps as if that element was not in the above list.
 */"
"void generateImpliedEndTags(String excludeTag) {
    while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && StringUtil.in(currentElement().nodeName(), ""dd"", ""dt"", ""li"", ""option"", ""optgroup"", ""p"", ""rp"", ""rt"")) pop();
}","public void test095110() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.clearStackToTableContext();
    htmlTreeBuilder0.generateImpliedEndTags(""html"");
}","/**
 *     11.2.5.2 Closing elements that have implied end tags<p/>
 *     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
 *     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
 *     the UA must pop the current node off the stack of open elements.
 *
 *     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the
 *     process, then the UA must perform the above steps as if that element was not in the above list.
 */"
"void generateImpliedEndTags(String excludeTag) {
    while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && StringUtil.in(currentElement().nodeName(), ""dd"", ""dt"", ""li"", ""option"", ""optgroup"", ""p"", ""rp"", ""rt"")) pop();
}","public void test096111() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.generateImpliedEndTags(""hpjH`/1_94X/S"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}","/**
 *     11.2.5.2 Closing elements that have implied end tags<p/>
 *     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
 *     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
 *     the UA must pop the current node off the stack of open elements.
 *
 *     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the
 *     process, then the UA must perform the above steps as if that element was not in the above list.
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test097112() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean inSelectScope(String targetName) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element el = it.next();
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !StringUtil.in(elName, ""optgroup"", ""option""))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test097113() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.inSelectScope(""TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@b, state=InBody, currentElement=<body>\n org.jsoup.parser.TreeBuilder\n</body>}"");
    assertFalse(boolean0);
}",""
"boolean inSelectScope(String targetName) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element el = it.next();
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !StringUtil.in(elName, ""optgroup"", ""option""))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test098114() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.popStackToBefore("""");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inSelectScope("", currentElement="");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test099115() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""HBHSueiz-#]w7,"", ""HBHSueiz-#]w7,"");
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean inScope(String targetName, String[] extras) {
    return inSpecificScope(targetName, new String[] { ""applet"", ""caption"", ""html"", ""table"", ""td"", ""th"", ""marquee"", ""object"" }, extras);
    // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml
    // todo: in svg namespace: forignOjbect, desc, title
}","public void test099116() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""HBHSueiz-#]w7,"", ""HBHSueiz-#]w7,"");
    String[] stringArray0 = new String[4];
    stringArray0[0] = ""HBHSueiz-#]w7,"";
    stringArray0[1] = """";
    stringArray0[2] = ""N@*&~sm~"";
    stringArray0[3] = ""N@*&~sm~"";
    boolean boolean0 = htmlTreeBuilder0.inScope("""", stringArray0);
    assertFalse(boolean0);
}",""
"boolean inScope(String targetName, String[] extras) {
    return inSpecificScope(targetName, new String[] { ""applet"", ""caption"", ""html"", ""table"", ""td"", ""th"", ""marquee"", ""object"" }, extras);
    // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml
    // todo: in svg namespace: forignOjbect, desc, title
}","public void test100117() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""HBHSueiz-#]w7,"", ""HBHSueiz-#]w7,"");
    String[] stringArray0 = new String[4];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope("""", stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"boolean inScope(String targetName) {
    return inScope(targetName, null);
}","public void test101119() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.inScope(""html"");
    assertTrue(boolean0);
}",""
"boolean inScope(String targetName) {
    return inScope(targetName, null);
}","public void test102121() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.inScope(""org.jsoup.parser.TreeBuilder"");
    assertFalse(boolean0);
}",""
"boolean inButtonScope(String targetName) {
    return inScope(targetName, new String[] { ""button"" });
}","public void test103122() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.popStackToBefore("""");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inButtonScope(""hpjH`/1_94X/S"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void resetInsertionMode() {
    boolean last = false;
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element node = it.next();
        if (!it.hasNext()) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""td"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test104123() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Token.StartTag token_StartTag0 = new Token.StartTag("" <%s>"");
    htmlTreeBuilder0.insert(token_StartTag0);
    htmlTreeBuilder0.resetInsertionMode();
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test105124() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.getHeadElement();
    Element element1 = element0.after("");0J$G_kEQ@XbyXJ"");
    assertEquals(0, element1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"void resetInsertionMode() {
    boolean last = false;
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element node = it.next();
        if (!it.hasNext()) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""td"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test107126() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.popStackToClose(""applet"");
    htmlTreeBuilder0.resetInsertionMode();
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test108127() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    Token.StartTag token_StartTag0 = new Token.StartTag("" <%s>"");
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    htmlTreeBuilder0.replaceOnStack(element0, document0);
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test109128() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.insert(""org.jsoup.parser.TreeBuilder"");
    Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
    assertEquals(2, element1.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test109129() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.insert(""org.jsoup.parser.TreeBuilder"");
    Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
    assertEquals(""body"", element1.nodeName());
}",""
"Element aboveOnStack(Element el) {
    assert onStack(el);
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next == el) {
            return it.next();
        }
    }
    return null;
}","public void test109130() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.insert(""org.jsoup.parser.TreeBuilder"");
    Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
    assertNotNull(element1);
}",""
"Element aboveOnStack(Element el) {
    assert onStack(el);
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next == el) {
            return it.next();
        }
    }
    return null;
}","public void test110131() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.aboveOnStack(document0);
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"void clearStackToTableBodyContext() {
    clearStackToContext(""tbody"", ""tfoot"", ""thead"");
}","public void test111132() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.clearStackToTableBodyContext();
}",""
"void clearStackToTableContext() {
    clearStackToContext(""table"");
}","public void test112133() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    htmlTreeBuilder0.popStackToBefore("""");
    htmlTreeBuilder0.clearStackToTableContext();
}",""
"void insertInFosterParent(Node in) {
    Element fosterParent = null;
    Element lastTable = getFromStack(""table"");
    boolean isLastTableParent = false;
    if (lastTable != null) {
        if (lastTable.parent() != null) {
            fosterParent = lastTable.parent();
            isLastTableParent = true;
        } else
            fosterParent = aboveOnStack(lastTable);
    } else {
        // no table == frag
        fosterParent = stack.get(0);
    }
    if (isLastTableParent) {
        // last table cannot be null by this point.
        Validate.notNull(lastTable);
        lastTable.before(in);
    } else
        fosterParent.appendChild(in);
}","public void test113134() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse(""y<"", ""y<"");
    htmlTreeBuilder0.popStackToBefore(""y<"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.LinkedList"", e);
    }
}",""
"void popStackToClose(String... elNames) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (StringUtil.in(next.nodeName(), elNames)) {
            it.remove();
            break;
        } else {
            it.remove();
        }
    }
}","public void test114135() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document("""");
    htmlTreeBuilder0.parseFragment(""html"", document0, """", (ParseErrorList) null);
    String[] stringArray0 = new String[6];
    stringArray0[0] = ""gRf4iGxcy2#=Z0oF,"";
    stringArray0[1] = """";
    stringArray0[2] = ""noframes"";
    stringArray0[3] = ""html"";
    htmlTreeBuilder0.popStackToClose(stringArray0);
    assertEquals(6, stringArray0.length);
}",""
"void popStackToClose(String... elNames) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (StringUtil.in(next.nodeName(), elNames)) {
            it.remove();
            break;
        } else {
            it.remove();
        }
    }
}","public void test115136() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    String[] stringArray0 = new String[6];
    stringArray0[0] = ""applet"";
    stringArray0[1] = "");0J$G_kEQ@XbyXJ"";
    stringArray0[2] = ""applet"";
    stringArray0[3] = "");0J$G_kEQ@XbyXJ"";
    stringArray0[4] = ""org.jsoup.parser.TreeBuilder"";
    stringArray0[5] = ""0GUo"";
    htmlTreeBuilder0.popStackToClose(stringArray0);
    assertEquals(6, stringArray0.length);
}",""
"void generateImpliedEndTags(String excludeTag) {
    while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && StringUtil.in(currentElement().nodeName(), ""dd"", ""dt"", ""li"", ""option"", ""optgroup"", ""p"", ""rp"", ""rt"")) pop();
}","public void test116137() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.popStackToClose(""%osdsm~j-ew;q"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.generateImpliedEndTags(""w7$-b}"");
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 *     11.2.5.2 Closing elements that have implied end tags<p/>
 *     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
 *     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
 *     the UA must pop the current node off the stack of open elements.
 *
 *     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the
 *     process, then the UA must perform the above steps as if that element was not in the above list.
 */"
"boolean removeFromStack(Element el) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next == el) {
            it.remove();
            return true;
        }
    }
    return false;
}","public void test117138() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.push(document0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertTrue(boolean0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test117139() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.push(document0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test118140() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(2229);
    Document document0 = htmlTreeBuilder0.parse(""hQJU}$)"", ""X34>-\""Dmu_W.y0j?bg"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean removeFromStack(Element el) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next == el) {
            it.remove();
            return true;
        }
    }
    return false;
}","public void test118141() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(2229);
    Document document0 = htmlTreeBuilder0.parse(""hQJU}$)"", ""X34>-\""Dmu_W.y0j?bg"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertFalse(boolean0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test118142() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(2229);
    Document document0 = htmlTreeBuilder0.parse(""hQJU}$)"", ""X34>-\""Dmu_W.y0j?bg"", parseErrorList0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertEquals(""X34>-\""Dmu_W.y0j?bg"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"Element getFromStack(String elName) {
    Iterator<Element> it = stack.descendingIterator();
    while (it.hasNext()) {
        Element next = it.next();
        if (next.nodeName().equals(elName)) {
            return next;
        }
    }
    return null;
}","public void test119143() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Element element0 = htmlTreeBuilder0.getFromStack(""html"");
    assertNotNull(element0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test119144() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Element element0 = htmlTreeBuilder0.getFromStack(""html"");
    assertEquals(2, element0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test120145() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(2229);
    htmlTreeBuilder0.parse(""hQJU}$)"", ""X34>-\""Dmu_W.y0j?bg"", parseErrorList0);
    Token.StartTag token_StartTag0 = new Token.StartTag("":>Jt__{Tx2Sb DQ#"");
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    boolean boolean0 = htmlTreeBuilder0.onStack(element0);
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"boolean onStack(Element el) {
    return isElementInQueue(stack, el);
}","public void test120146() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(2229);
    htmlTreeBuilder0.parse(""hQJU}$)"", ""X34>-\""Dmu_W.y0j?bg"", parseErrorList0);
    Token.StartTag token_StartTag0 = new Token.StartTag("":>Jt__{Tx2Sb DQ#"");
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    boolean boolean0 = htmlTreeBuilder0.onStack(element0);
    assertTrue(boolean0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test120147() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(2229);
    htmlTreeBuilder0.parse(""hQJU}$)"", ""X34>-\""Dmu_W.y0j?bg"", parseErrorList0);
    Token.StartTag token_StartTag0 = new Token.StartTag("":>Jt__{Tx2Sb DQ#"");
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    boolean boolean0 = htmlTreeBuilder0.onStack(element0);
    assertEquals(""X34>-\""Dmu_W.y0j?bg"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"Element pop() {
    // todo - dev, remove validation check
    if (stack.peekLast().nodeName().equals(""td"") && !state.name().equals(""InCell""))
        Validate.isFalse(true, ""pop td not in cell"");
    if (stack.peekLast().nodeName().equals(""html""))
        Validate.isFalse(true, ""popping html!"");
    return stack.pollLast();
}","public void test121148() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.parse("""", """");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parseFragment("""", document0, ""<{'a_Id_QlqU"", parseErrorList0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.pop();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // popping html!
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test122149() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    Element element0 = htmlTreeBuilder0.insert(""object"");
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"boolean process(Token token, HtmlTreeBuilderState state) {
    currentToken = token;
    return state.process(token, this);
}","public void test123150() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    Token.Comment token_Comment0 = new Token.Comment();
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InRow;
    boolean boolean0 = htmlTreeBuilder0.process(token_Comment0, htmlTreeBuilderState0);
    assertTrue(boolean0);
}",""
"public String tagName() {
    return tag.getName();
}","public void test124151() throws Throwable {
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Token.StartTag token_StartTag0 = new Token.StartTag("" <%s>"");
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.initialiseParse("":m5{^0dh :_"", "":m5{^0dh :_"", parseErrorList0);
    FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
    assertEquals(""<%s>"", formElement0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test125152() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    Token.StartTag token_StartTag0 = new Token.StartTag("" <%s>"");
    token_StartTag0.selfClosing = true;
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test126153() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse(""HBHSueiz-#]w7,"", ""HBHSueiz-#]w7,"");
    Token.StartTag token_StartTag0 = new Token.StartTag(""l'mx"");
    Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"Element insert(Token.StartTag startTag) {
    // handle empty unknown tags
    // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
    if (startTag.isSelfClosing()) {
        Element el = insertEmpty(startTag);
        stack.add(el);
        // ensure we get out of whatever state we are in. emitted for yielded processing
        tokeniser.emit(new Token.EndTag(el.tagName()));
        return el;
    }
    Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes);
    insert(el);
    return el;
}","public void test127154() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.StartTag token_StartTag0 = new Token.StartTag("" <%s>"");
    token_StartTag0.selfClosing = true;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert(token_StartTag0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void error(HtmlTreeBuilderState state) {
    if (errors.canAddError())
        errors.add(new ParseError(reader.pos(), ""Unexpected token [%s] when in state [%s]"", currentToken.tokenType(), state));
}","public void test128155() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = new ParseErrorList(1445, 2120);
    htmlTreeBuilder0.initialiseParse(""nullChar"", ""^dGFSh"", parseErrorList0);
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelectInTable;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void error(HtmlTreeBuilderState state) {
    if (errors.canAddError())
        errors.add(new ParseError(reader.pos(), ""Unexpected token [%s] when in state [%s]"", currentToken.tokenType(), state));
}","public void test129156() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.parse("""", """");
    HtmlTreeBuilderState htmlTreeBuilderState0 = htmlTreeBuilder0.originalState();
    htmlTreeBuilder0.error(htmlTreeBuilderState0);
}",""
"public String tagName() {
    return tag.getName();
}","public void test130157() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""HBHSueiz-#]w7,"");
    htmlTreeBuilder0.maybeSetBaseUri(document0);
    assertEquals(""#root"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test131158() throws Throwable {
    Document document0 = Document.createShell(""&;~~sy1>9="");
    Element element0 = document0.createElement(""h3"");
    Element element1 = element0.prepend(""1of+`4"");
    assertEquals(""h3"", element1.nodeName());
}",""
"void clearStackToTableContext() {
    clearStackToContext(""table"");
}","public void test133160() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.clearStackToTableContext();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean inTableScope(String targetName) {
    return inSpecificScope(targetName, new String[] { ""html"", ""table"" }, null);
}","public void test134161() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inTableScope(""Unexpected character '%s' in input state [%s]"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean isSpecial(Element el) {
    // todo: mathml's mi, mo, mn
    // todo: svg's foreigObject, desc, title
    String name = el.nodeName();
    return StringUtil.in(name, ""address"", ""applet"", ""area"", ""article"", ""aside"", ""base"", ""basefont"", ""bgsound"", ""blockquote"", ""body"", ""br"", ""button"", ""caption"", ""center"", ""col"", ""colgroup"", ""command"", ""dd"", ""details"", ""dir"", ""div"", ""dl"", ""dt"", ""embed"", ""fieldset"", ""figcaption"", ""figure"", ""footer"", ""form"", ""frame"", ""frameset"", ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"", ""head"", ""header"", ""hgroup"", ""hr"", ""html"", ""iframe"", ""img"", ""input"", ""isindex"", ""li"", ""link"", ""listing"", ""marquee"", ""menu"", ""meta"", ""nav"", ""noembed"", ""noframes"", ""noscript"", ""object"", ""ol"", ""p"", ""param"", ""plaintext"", ""pre"", ""script"", ""section"", ""select"", ""style"", ""summary"", ""table"", ""tbody"", ""td"", ""textarea"", ""tfoot"", ""th"", ""thead"", ""title"", ""tr"", ""ul"", ""wbr"", ""xmp"");
}","public void test135162() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document("""");
    boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
    assertFalse(boolean0);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test136163() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.setFosterInserts(true);
    Document document0 = htmlTreeBuilder0.parse("""", """");
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"boolean isFragmentParsing() {
    return fragmentParsing;
}","public void test137164() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
    assertFalse(boolean0);
}",""
"boolean isInActiveFormattingElements(Element el) {
    return isElementInQueue(formattingElements, el);
}","public void test138165() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
    assertFalse(boolean0);
}",""
"void reconstructFormattingElements() {
    int size = formattingElements.size();
    if (size == 0 || formattingElements.getLast() == null || onStack(formattingElements.getLast()))
        return;
    Element entry = formattingElements.getLast();
    int pos = size - 1;
    boolean skip = false;
    while (true) {
        if (pos == 0) {
            // step 4. if none before, skip to 8
            skip = true;
            break;
        }
        // step 5. one earlier than entry
        entry = formattingElements.get(--pos);
        if (// step 6 - neither marker nor on stack
        entry == null || onStack(entry))
            // jump to 8, else continue back to 4
            break;
    }
    while (true) {
        if (// step 7: on later than entry
        !skip)
            entry = formattingElements.get(++pos);
        // should not occur, as we break at last element
        Validate.notNull(entry);
        // 8. create new element from element, 9 insert into current node, onto stack
        // can only skip increment from 4.
        skip = false;
        // todo: avoid fostering here?
        Element newEl = insert(entry.nodeName());
        // newEl.namespace(entry.namespace()); // todo: namespaces
        newEl.attributes().addAll(entry.attributes());
        // 10. replace entry with new entry
        formattingElements.add(pos, newEl);
        formattingElements.remove(pos + 1);
        // 11
        if (// if not last entry in list, jump to 7
        pos == size - 1)
            break;
    }
}","public void test139166() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Document document0 = htmlTreeBuilder0.parse(""org.jsoup.parser.TreeBuilder"", ""org.jsoup.parser.TreeBuilder"", parseErrorList0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.reconstructFormattingElements();
    htmlTreeBuilder0.reconstructFormattingElements();
}",""
"String getBaseUri() {
    return baseUri;
}","public void test141168() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String string0 = htmlTreeBuilder0.getBaseUri();
    assertNull(string0);
}",""
"boolean inScope(String targetName) {
    return inScope(targetName, null);
}","public void test142169() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(""org.jsoup.parser.TreeBuilder"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Document getDocument() {
    return doc;
}","public void test143170() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.getDocument();
    assertNull(document0);
}",""
"boolean framesetOk() {
    return framesetOk;
}","public void test145172() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.framesetOk();
    assertTrue(boolean0);
}",""
"boolean inScope(String[] targetNames) {
    return inSpecificScope(targetNames, new String[] { ""applet"", ""caption"", ""html"", ""table"", ""td"", ""th"", ""marquee"", ""object"" }, null);
}","public void test146173() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String[] stringArray0 = new String[8];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"HtmlTreeBuilderState state() {
    return state;
}","public void test147174() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.state();
}",""
"void clearStackToTableRowContext() {
    clearStackToContext(""tr"");
}","public void test148175() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"FormElement getFormElement() {
    return formElement;
}","public void test149176() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    FormElement formElement0 = htmlTreeBuilder0.getFormElement();
    assertNull(formElement0);
}",""
"void newPendingTableCharacters() {
    pendingTableCharacters = new ArrayList<Token.Character>();
}","public void test150177() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.newPendingTableCharacters();
}",""
"boolean isInActiveFormattingElements(Element el) {
    return isElementInQueue(formattingElements, el);
}","public void test151178() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.insertMarkerToFormattingElements();
    boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
    assertTrue(boolean0);
}",""
"void generateImpliedEndTags() {
    generateImpliedEndTags(null);
}","public void test152179() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.generateImpliedEndTags();
}",""
"void markInsertionMode() {
    originalState = state;
}","public void test153180() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.markInsertionMode();
}",""
"boolean process(Token token, HtmlTreeBuilderState state) {
    currentToken = token;
    return state.process(token, this);
}","public void test154181() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.Comment token_Comment0 = new Token.Comment();
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InRow;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process(token_Comment0, htmlTreeBuilderState0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
public String toString() {
    return ""TreeBuilder{"" + ""currentToken="" + currentToken + "", state="" + state + "", currentElement="" + currentElement() + '}';
}","public void test155182() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"boolean inListItemScope(String targetName) {
    return inScope(targetName, new String[] { ""ol"", ""ul"" });
}","public void test156183() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inListItemScope(""org.jsoup.parser.TreeBuilder"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void clearStackToTableBodyContext() {
    clearStackToContext(""tbody"", ""tfoot"", ""thead"");
}","public void test157184() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element getHeadElement() {
    return headElement;
}","public void test158185() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Element element0 = htmlTreeBuilder0.getHeadElement();
    assertNull(element0);
}",""
"DescendableLinkedList<Element> getStack() {
    return stack;
}","public void test159186() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    DescendableLinkedList<Element> descendableLinkedList0 = htmlTreeBuilder0.getStack();
    assertNull(descendableLinkedList0);
}",""
"void replaceOnStack(Element out, Element in) {
    replaceInQueue(stack, out, in);
}","public void test160187() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(2229);
    Document document0 = htmlTreeBuilder0.parse(""hQJU}$)"", ""org.jsoup.parser.treebuilder"", parseErrorList0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inButtonScope(String targetName) {
    return inScope(targetName, new String[] { ""button"" });
}","public void test161188() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inButtonScope(""hpjH`/1_94X/S"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
