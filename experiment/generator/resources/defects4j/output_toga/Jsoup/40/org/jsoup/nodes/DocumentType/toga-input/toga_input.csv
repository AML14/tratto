focal_method,test_prefix,docstring
"@Override
void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {
    accum.append(""<!DOCTYPE"");
    if (!StringUtil.isBlank(attr(""name"")))
        accum.append("" "").append(attr(""name""));
    if (!StringUtil.isBlank(attr(""publicId"")))
        accum.append("" PUBLIC \"""").append(attr(""publicId"")).append('""');
    if (!StringUtil.isBlank(attr(""systemId"")))
        accum.append("" \"""").append(attr(""systemId"")).append('""');
    accum.append('>');
}","public void test22() throws Throwable {
    DocumentType documentType0 = new DocumentType(""e`p|^x3[uC"", ""e`p|^x3[uC"", ""e`p|^x3[uC"", ""e`p|^x3[uC"");
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    // Undeclared exception!
    try {
        documentType0.outerHtmlHead((StringBuilder) null, 0, document_OutputSettings0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.DocumentType"", e);
    }
}",""
"// todo: quirk mode from publicId and systemId
/**
 * Create a new doctype element.
 * @param name the doctype's name
 * @param publicId the doctype's public ID
 * @param systemId the doctype's system ID
 * @param baseUri the doctype's base URI
 */
public DocumentType(String name, String publicId, String systemId, String baseUri) {
    super(baseUri);
    Validate.notEmpty(name);
    attr(""name"", name);
    attr(""publicId"", publicId);
    attr(""systemId"", systemId);
}","public void test33() throws Throwable {
    DocumentType documentType0 = null;
    try {
        documentType0 = new DocumentType("""", """", """", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
public String nodeName() {
    return ""#doctype"";
}","public void test44() throws Throwable {
    DocumentType documentType0 = new DocumentType(""big"", ""big"", ""big"", ""5YcO{Qh!-zLrhAvr}H"");
    String string0 = documentType0.nodeName();
    assertEquals(""#doctype"", string0);
}",""
"@Override
public String nodeName() {
    return ""#doctype"";
}","public void test55() throws Throwable {
    DocumentType documentType0 = new DocumentType("" "", "" "", "" "", "" "");
    String string0 = documentType0.toString();
    assertEquals(""#doctype"", documentType0.nodeName());
}",""
"public String toString() {
    return outerHtml();
}","public void test56() throws Throwable {
    DocumentType documentType0 = new DocumentType("" "", "" "", "" "", "" "");
    String string0 = documentType0.toString();
    assertEquals(""<!DOCTYPE>"", string0);
}",""
