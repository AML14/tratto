focal_method,test_prefix,docstring
"public String baseUri() {
    return baseUri;
}","public void test00() throws Throwable {
    DocumentType documentType0 = new DocumentType(""e8?up$s./(0_%:bHdN|"", """", ""e8?up$s./(0_%:bHdN|"", ""e8?up$s./(0_%:bHdN|"");
    StringBuilder stringBuilder0 = new StringBuilder(0);
    documentType0.outerHtmlTail(stringBuilder0, 1808, (Document.OutputSettings) null);
    assertEquals(""e8?up$s./(0_%:bHdN|"", documentType0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
    if (out.syntax() == Syntax.html && !has(PUBLIC_ID) && !has(SYSTEM_ID)) {
        // looks like a html5 doctype, go lowercase for aesthetics
        accum.append(""<!doctype"");
    } else {
        accum.append(""<!DOCTYPE"");
    }
    if (has(NAME))
        accum.append("" "").append(attr(NAME));
    if (has(PUBLIC_ID))
        accum.append("" PUBLIC \"""").append(attr(PUBLIC_ID)).append('""');
    if (has(SYSTEM_ID))
        accum.append("" \"""").append(attr(SYSTEM_ID)).append('""');
    accum.append('>');
}","public void test11() throws Throwable {
    DocumentType documentType0 = new DocumentType(""*x]w,%gE4Y$_EE"", "":SDJ"", ""*x]w,%gE4Y$_EE"", ""AttributeValue_doubleQuoted"");
    CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""PUBLIC"", 1, 1);
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    // Undeclared exception!
    try {
        documentType0.outerHtmlHead(charBuffer0, (-1617), document_OutputSettings0);
        fail(""Expecting exception: ReadOnlyBufferException"");
    } catch (ReadOnlyBufferException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.CharBuffer"", e);
    }
}",""
"@Override
void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
    if (out.syntax() == Syntax.html && !has(PUBLIC_ID) && !has(SYSTEM_ID)) {
        // looks like a html5 doctype, go lowercase for aesthetics
        accum.append(""<!doctype"");
    } else {
        accum.append(""<!DOCTYPE"");
    }
    if (has(NAME))
        accum.append("" "").append(attr(NAME));
    if (has(PUBLIC_ID))
        accum.append("" PUBLIC \"""").append(attr(PUBLIC_ID)).append('""');
    if (has(SYSTEM_ID))
        accum.append("" \"""").append(attr(SYSTEM_ID)).append('""');
    accum.append('>');
}","public void test22() throws Throwable {
    DocumentType documentType0 = new DocumentType(""M9@)Y_%RC6pN_I3:)"", """", """", ""M9@)Y_%RC6pN_I3:)"");
    Document.OutputSettings document_OutputSettings0 = documentType0.getOutputSettings();
    CharBuffer charBuffer0 = CharBuffer.allocate(0);
    // Undeclared exception!
    try {
        documentType0.outerHtmlHead(charBuffer0, 0, document_OutputSettings0);
        fail(""Expecting exception: BufferOverflowException"");
    } catch (BufferOverflowException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.CharBuffer"", e);
    }
}",""
"@Override
void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
    if (out.syntax() == Syntax.html && !has(PUBLIC_ID) && !has(SYSTEM_ID)) {
        // looks like a html5 doctype, go lowercase for aesthetics
        accum.append(""<!doctype"");
    } else {
        accum.append(""<!DOCTYPE"");
    }
    if (has(NAME))
        accum.append("" "").append(attr(NAME));
    if (has(PUBLIC_ID))
        accum.append("" PUBLIC \"""").append(attr(PUBLIC_ID)).append('""');
    if (has(SYSTEM_ID))
        accum.append("" \"""").append(attr(SYSTEM_ID)).append('""');
    accum.append('>');
}","public void test33() throws Throwable {
    DocumentType documentType0 = new DocumentType(""name"", ""name"", ""s"", ""LRs'Ti^7lA'`1*vz+"");
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    // Undeclared exception!
    try {
        documentType0.outerHtmlHead((Appendable) null, 0, document_OutputSettings0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.DocumentType"", e);
    }
}",""
"// todo: quirk mode from publicId and systemId
/**
 * Create a new doctype element.
 * @param name the doctype's name
 * @param publicId the doctype's public ID
 * @param systemId the doctype's system ID
 * @param baseUri the doctype's base URI
 */
public DocumentType(String name, String publicId, String systemId, String baseUri) {
    super(baseUri);
    attr(NAME, name);
    attr(PUBLIC_ID, publicId);
    attr(SYSTEM_ID, systemId);
}","public void test44() throws Throwable {
    DocumentType documentType0 = null;
    try {
        documentType0 = new DocumentType((String) null, (String) null, ""org.jsoup.select.Evaluator$AttributeWithValueContaining"", ""org.jsoup.select.Evaluator$AttributeWithValueContaining"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
public String nodeName() {
    return ""#doctype"";
}","public void test55() throws Throwable {
    DocumentType documentType0 = new DocumentType(""e8?up$s./(0_%:bHdN|"", """", ""e8?up$s./(0_%:bHdN|"", ""e8?up$s./(0_%:bHdN|"");
    String string0 = documentType0.nodeName();
    assertEquals(""#doctype"", string0);
}","/**
 * Create a new doctype element.
 * @param name the doctype's name
 * @param publicId the doctype's public ID
 * @param systemId the doctype's system ID
 * @param baseUri the doctype's base URI
 */"
"public String outerHtml() {
    StringBuilder accum = new StringBuilder(128);
    outerHtml(accum);
    return accum.toString();
}","public void test66() throws Throwable {
    DocumentType documentType0 = new DocumentType(""X1$&o9Q]63Jhm>`E,Z5"", """", ""X1$&o9Q]63Jhm>`E,Z5"", ""X1$&o9Q]63Jhm>`E,Z5"");
    String string0 = documentType0.outerHtml();
    assertEquals(""<!DOCTYPE X1$&o9Q]63Jhm>`E,Z5 \""X1$&o9Q]63Jhm>`E,Z5\"">"", string0);
}","/**
 *     Get the outer HTML of this node.
 *     @return HTML
 */"
"@Override
public String nodeName() {
    return ""#doctype"";
}","public void test67() throws Throwable {
    DocumentType documentType0 = new DocumentType(""X1$&o9Q]63Jhm>`E,Z5"", """", ""X1$&o9Q]63Jhm>`E,Z5"", ""X1$&o9Q]63Jhm>`E,Z5"");
    String string0 = documentType0.outerHtml();
    assertEquals(""#doctype"", documentType0.nodeName());
}","/**
 * Create a new doctype element.
 * @param name the doctype's name
 * @param publicId the doctype's public ID
 * @param systemId the doctype's system ID
 * @param baseUri the doctype's base URI
 */"
"@Override
public String nodeName() {
    return ""#doctype"";
}","public void test78() throws Throwable {
    DocumentType documentType0 = new DocumentType(""FVfX22"", ""FVfX22"", ""FVfX22"", ""FVfX22"");
    String string0 = documentType0.toString();
    assertEquals(""#doctype"", documentType0.nodeName());
}","/**
 * Create a new doctype element.
 * @param name the doctype's name
 * @param publicId the doctype's public ID
 * @param systemId the doctype's system ID
 * @param baseUri the doctype's base URI
 */"
"public String toString() {
    return outerHtml();
}","public void test79() throws Throwable {
    DocumentType documentType0 = new DocumentType(""FVfX22"", ""FVfX22"", ""FVfX22"", ""FVfX22"");
    String string0 = documentType0.toString();
    assertEquals(""<!DOCTYPE FVfX22 PUBLIC \""FVfX22\"" \""FVfX22\"">"", string0);
}",""
"@Override
void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException {
    if (out.syntax() == Syntax.html && !has(PUBLIC_ID) && !has(SYSTEM_ID)) {
        // looks like a html5 doctype, go lowercase for aesthetics
        accum.append(""<!doctype"");
    } else {
        accum.append(""<!DOCTYPE"");
    }
    if (has(NAME))
        accum.append("" "").append(attr(NAME));
    if (has(PUBLIC_ID))
        accum.append("" PUBLIC \"""").append(attr(PUBLIC_ID)).append('""');
    if (has(SYSTEM_ID))
        accum.append("" \"""").append(attr(SYSTEM_ID)).append('""');
    accum.append('>');
}","public void test911() throws Throwable {
    DocumentType documentType0 = new DocumentType("" PUBLIC \"""", "" PUBLIC \"""", ""Zur`0X0?1G`1b ^\"""", "" PUBLIC \"""");
    PipedWriter pipedWriter0 = new PipedWriter();
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    try {
        documentType0.outerHtmlHead(pipedWriter0, 225, document_OutputSettings0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedWriter"", e);
    }
}",""
