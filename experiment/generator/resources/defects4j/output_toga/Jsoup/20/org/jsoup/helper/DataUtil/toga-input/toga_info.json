{
  "test1212" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-60), (byte) 45);\n    Parser parser0 = Parser.xmlParser();\n    DataUtil.load((InputStream) byteArrayInputStream0, (String) null, \"8j}[~{K\", parser0);\n}",
    "testName" : "test1212"
  },
  "test2323" : {
    "methodSignature" : "public String baseUri()",
    "methodName" : "baseUri",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    byte[] byteArray0 = new byte[3];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, \"VO;h9!Ubi*B\");\n    document0.baseUri();\n}",
    "testName" : "test2323"
  },
  "test1313" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    Parser parser0 = Parser.xmlParser();\n    DataUtil.load((InputStream) pipedInputStream0, \"l%KuX':e\", \"Tb=0.jI'\", parser0);\n}",
    "testName" : "test1313"
  },
  "test2425" : {
    "methodSignature" : "public String baseUri()",
    "methodName" : "baseUri",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2425() throws Throwable {\n    File file0 = MockFile.createTempFile(\"?DDX4fCsL(]\", \"UTF-8\");\n    Document document0 = DataUtil.load(file0, \"UTF-8\", \"TU<]{!@.9<s7G\");\n    document0.baseUri();\n}",
    "testName" : "test2425"
  },
  "test2424" : {
    "methodSignature" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    File file0 = MockFile.createTempFile(\"?DDX4fCsL(]\", \"UTF-8\");\n    Document document0 = DataUtil.load(file0, \"UTF-8\", \"TU<]{!@.9<s7G\");\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Parser parser0 = Parser.htmlParser();\n    DataUtil.load((InputStream) null, \"acronym\", \"acronym\", parser0);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "static String getCharsetFromContentType(String contentType)",
    "methodName" : "getCharsetFromContentType",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    String string0 = DataUtil.getCharsetFromContentType((String) null);\n}",
    "testName" : "test2121"
  },
  "test1111" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 2);\n    Parser parser0 = Parser.xmlParser();\n    DataUtil.load((InputStream) pushbackInputStream0, \"\", \"\", parser0);\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "static String getCharsetFromContentType(String contentType)",
    "methodName" : "getCharsetFromContentType",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    String string0 = DataUtil.getCharsetFromContentType(\"\");\n}",
    "testName" : "test2222"
  },
  "test011" : {
    "methodSignature" : "public String baseUri()",
    "methodName" : "baseUri",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);\n    Parser parser0 = Parser.htmlParser();\n    Document document0 = DataUtil.load((InputStream) pushbackInputStream0, (String) null, \"'3C^L}bw\", parser0);\n    document0.baseUri();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
    "methodName" : "readToByteBuffer",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    FileDescriptor fileDescriptor0 = new FileDescriptor();\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);\n    DataUtil.readToByteBuffer(mockFileInputStream0);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser)",
    "methodName" : "parseByteData",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1270);\n    DataUtil.parseByteData(byteBuffer0, \"DGv\", (String) null, (Parser) null);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser)",
    "methodName" : "parseByteData",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Parser parser0 = Parser.htmlParser();\n    DataUtil.parseByteData((ByteBuffer) null, (String) null, (String) null, parser0);\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    File file0 = MockFile.createTempFile(\"\\\"uL]>WwZ)Ve\", \"\\\"uL]>WwZ)Ve\");\n    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);\n    Parser parser0 = Parser.xmlParser();\n    DataUtil.load((InputStream) mockFileInputStream0, \"i1a5{:mf)xf~&LO\", \"(?i)\\bcharset=s*\\\"?([^s;\\\"]*)\", parser0);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    byte[] byteArray0 = new byte[0];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);\n    DataUtil.load((InputStream) pushbackInputStream0, \"\", \"\");\n}",
    "testName" : "test1616"
  },
  "test2728" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2728() throws Throwable {\n    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);\n    DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);\n    DataUtil.load((InputStream) dataInputStream0, \"base\", \"base\", (Parser) null);\n}",
    "testName" : "test2728"
  },
  "test1717" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    DataUtil.load((InputStream) pipedInputStream0, (String) null, \"\");\n}",
    "testName" : "test1717"
  },
  "test2829" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2829() throws Throwable {\n    DataUtil.load((InputStream) null, (String) null, \"\");\n}",
    "testName" : "test2829"
  },
  "test1414" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    byte[] byteArray0 = new byte[8];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 0, (byte) 0);\n    DataUtil.load((InputStream) byteArrayInputStream0, \"param\", \"!cw?O'\");\n}",
    "testName" : "test1414"
  },
  "test2526" : {
    "methodSignature" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2526() throws Throwable {\n    File file0 = MockFile.createTempFile(\"?DDX4fCsL(]\", (String) null);\n    DataUtil.load(file0, \"x\", \"TU<]{!@.9<s7G\");\n}",
    "testName" : "test2526"
  },
  "test1515" : {
    "methodSignature" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    byte[] byteArray0 = new byte[0];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);\n    DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);\n    DataUtil.load((InputStream) dataInputStream0, \"meta[http-equiv=content-type], meta[charset]\", \"S&Te\");\n}",
    "testName" : "test1515"
  },
  "test2627" : {
    "methodSignature" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2627() throws Throwable {\n    DataUtil.load((File) null, \"\", \"\");\n}",
    "testName" : "test2627"
  },
  "test2020" : {
    "methodSignature" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    MockFile mockFile0 = new MockFile(\"(?i)\\bcharset=s*\\\"?([^s;\\\"]*)\");\n    DataUtil.load((File) mockFile0, \"(?i)\\bcharset=s*\\\"?([^s;\\\"]*)\", \"\");\n}",
    "testName" : "test2020"
  },
  "test000" : {
    "methodSignature" : "public String baseUri()",
    "methodName" : "baseUri",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    byte[] byteArray0 = new byte[1];\n    ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);\n    Parser parser0 = Parser.htmlParser();\n    Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\", parser0);\n    document0.baseUri();\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
    "methodName" : "readToByteBuffer",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    DataUtil.readToByteBuffer((InputStream) null);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser)",
    "methodName" : "parseByteData",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    ByteBuffer byteBuffer0 = ByteBuffer.allocate(9834);\n    Parser parser0 = Parser.xmlParser();\n    // Undeclared exception!\n    DataUtil.parseByteData(byteBuffer0, (String) null, \"iy4MO\", parser0);\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser)",
    "methodName" : "parseByteData",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);\n    DataUtil.parseByteData(byteBuffer0, \"cZ<\", \"cZ<\", (Parser) null);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser)",
    "methodName" : "parseByteData",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    byte[] byteArray0 = new byte[5];\n    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 131072, 0);\n    ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(byteArrayInputStream0);\n    Parser parser0 = Parser.htmlParser();\n    DataUtil.parseByteData(byteBuffer0, \"\", \"n;~5OBK\", parser0);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    File file0 = MockFile.createTempFile(\"meta[http-equiv=content-type], meta[charset]\", \"o\");\n    DataUtil.load(file0, \"\\\",>tv)7\", \"[%s^=%s]\");\n}",
    "testName" : "test1818"
  },
  "test1919" : {
    "methodSignature" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
    "methodName" : "load",
    "className" : "org.jsoup.helper.DataUtil",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    File file0 = MockFile.createTempFile(\"J^bQ? uQNA!jS\", \"J^bQ? uQNA!jS\");\n    DataUtil.load(file0, \"\", \"S_5\");\n}",
    "testName" : "test1919"
  }
}