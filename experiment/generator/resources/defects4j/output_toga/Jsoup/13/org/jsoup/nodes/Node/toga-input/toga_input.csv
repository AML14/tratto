focal_method,test_prefix,docstring
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test000() throws Throwable {
    Document document0 = Document.createShell(""`711./t<5S"");
    Document document1 = document0.clone();
    document1.setParentNode(document0);
    Element element0 = document1.addClass(""mZJ!:+~\""y|k\""vv"");
    Element element1 = element0.text(""`711./t<5S"");
    Element element2 = element1.prepend(""org.jsoup.nodes.Document$QuirksMode"");
    element1.siblingIndex = 600;
    Elements elements0 = element2.getElementsContainingText(""#,7n8{Oq"");
    assertEquals(0, elements0.size());
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test011() throws Throwable {
    Document document0 = Document.createShell(""K>(-qM(Mw1J9j"");
    Element element0 = document0.appendElement(""publ"");
    Element element1 = document0.clone();
    element0.after((Node) element1);
    assertEquals(2, element1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test033() throws Throwable {
    Document document0 = Document.createShell(""^n44$sv"");
    Element element0 = document0.appendElement(""^n44$sv"");
    document0.removeChild(element0);
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#comment"";
}","public void test055() throws Throwable {
    Comment comment0 = new Comment("""", """");
    Node[] nodeArray0 = new Node[0];
    comment0.addChildren(nodeArray0);
    assertEquals(""#comment"", comment0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test066() throws Throwable {
    Document document0 = new Document(""YM\""%^ftzn$'j?>|VI@"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(0, nodeArray0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test077() throws Throwable {
    Document document0 = new Document(""wS -"");
    document0.setSiblingIndex((-2065));
    assertEquals((-2065), document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test088() throws Throwable {
    Document document0 = new Document(""TPE*="");
    document0.setBaseUri(""TPE*="");
    assertEquals(0, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test099() throws Throwable {
    Document document0 = new Document(""5f9}"");
    Element element0 = document0.appendElement(""5f9}"");
    element0.remove();
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String toString() {
    return outerHtml();
}","public void test1010() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration("""", """", false);
    String string0 = xmlDeclaration0.toString();
    assertEquals(""<?>"", string0);
}",""
"public abstract String nodeName();","public void test1111() throws Throwable {
    Document document0 = new Document(""iQ[D=n&^*_N,]XwD[Z0"");
    Node node0 = document0.removeAttr(""yWHRhjXTKtYoV"");
    assertEquals(""#document"", node0.nodeName());
}","/**
 *     Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).
 *     @return node name
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test1212() throws Throwable {
    Document document0 = Document.createShell(""Pfr"");
    document0.siblingIndex = (-2406);
    Document document1 = document0.ownerDocument();
    assertEquals((-2406), document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String outerHtml() {
    // no outer wrapper tag
    return super.html();
}","public void test1313() throws Throwable {
    Document document0 = new Document(""iQ[D=n&^*_N,]XwD[Z0"");
    String string0 = document0.outerHtml();
    assertEquals("""", string0);
}",""
"public String nodeName() {
    return ""#text"";
}","public void test1414() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""?"", ""?"");
    String string0 = textNode0.nodeName();
    assertEquals(""#text"", string0);
}",""
"@Override
public boolean equals(Object o) {
    return this == o;
}","public void test1515() throws Throwable {
    Tag tag0 = Tag.valueOf(""?"");
    Element element0 = new Element(tag0, ""?"");
    Document document0 = new Document(""CommentEndDash"");
    boolean boolean0 = element0.equals(document0);
    assertFalse(boolean0);
}",""
"protected Node[] childNodesAsArray() {
    return childNodes.toArray(new Node[childNodes().size()]);
}","public void test1616() throws Throwable {
    Document document0 = Document.createShell(""`711./t<5S"");
    Node[] nodeArray0 = document0.childNodesAsArray();
    assertEquals(1, nodeArray0.length);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test1717() throws Throwable {
    Document document0 = new Document(""abs:succapprox"");
    TextNode textNode0 = new TextNode((String) null, ""#tex"");
    document0.prependChild(textNode0);
    textNode0.before((Node) document0);
    assertEquals(1, textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test1718() throws Throwable {
    Document document0 = new Document(""abs:succapprox"");
    TextNode textNode0 = new TextNode((String) null, ""#tex"");
    document0.prependChild(textNode0);
    textNode0.before((Node) document0);
    assertEquals(0, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test1819() throws Throwable {
    Document document0 = new Document(""(.s>"");
    String string0 = document0.baseUri();
    assertEquals(""(.s>"", string0);
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Node wrap(String html) {
    Validate.notEmpty(html);
    Element context = parent() instanceof Element ? (Element) parent() : null;
    List<Node> wrapChildren = Parser.parseFragment(html, context, baseUri());
    Node wrapNode = wrapChildren.get(0);
    if (// nothing to wrap with; noop
    wrapNode == null || !(wrapNode instanceof Element))
        return null;
    Element wrap = (Element) wrapNode;
    Element deepest = getDeepChild(wrap);
    parentNode.replaceChild(this, wrap);
    deepest.addChildren(this);
    // remainder (unbalanced wrap, like <div></div><p></p> -- The <p> is remainder
    if (wrapChildren.size() > 0) {
        for (int i = 0; i < wrapChildren.size(); i++) {
            Node remainder = wrapChildren.get(i);
            remainder.parentNode.removeChild(remainder);
            wrap.appendChild(remainder);
        }
    }
    return this;
}","public void test1920() throws Throwable {
    TextNode textNode0 = new TextNode(""9.3YfzTtz=e"", ""9.3YfzTtz=e"");
    // Undeclared exception!
    try {
        textNode0.wrap("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Wrap the supplied HTML around this node.
 *     @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 *     @return this node, for chaining.
 */"
"protected void removeChild(Node out) {
    Validate.isTrue(out.parentNode == this);
    int index = out.siblingIndex();
    childNodes.remove(index);
    reindexChildren();
    out.parentNode = null;
}","public void test2021() throws Throwable {
    Document document0 = new Document(""nvdash"");
    DocumentType documentType0 = new DocumentType(""nvdash"", ""_e+\""7r~{()clj!&K'2"", """", """");
    documentType0.parentNode = (Node) document0;
    // Undeclared exception!
    try {
        document0.removeChild(documentType0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"public Node previousSibling() {
    List<Node> siblings = parentNode.childNodes;
    Integer index = siblingIndex();
    Validate.notNull(index);
    if (index > 0)
        return siblings.get(index - 1);
    else
        return null;
}","public void test2122() throws Throwable {
    Document document0 = Document.createShell(""org.jsoup.nodes.Node"");
    // Undeclared exception!
    try {
        document0.previousSibling();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}","/**
 *     Get this node's previous sibling.
 *     @return the previous sibling, or null if this is the first sibling
 */"
"protected void outerHtml(StringBuilder accum) {
    new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);
}","public void test2223() throws Throwable {
    TextNode textNode0 = new TextNode(""?"", ""?"");
    // Undeclared exception!
    try {
        textNode0.outerHtml((StringBuilder) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {
    accum.append(""\n"").append(StringUtil.padding(depth * out.indentAmount()));
}","public void test2324() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""succapprox"", ""?"");
    StringBuilder stringBuilder0 = new StringBuilder();
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1919);
    // Undeclared exception!
    textNode0.indent(stringBuilder0, 894, document_OutputSettings1);
}",""
"protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {
    accum.append(""\n"").append(StringUtil.padding(depth * out.indentAmount()));
}","public void test2425() throws Throwable {
    Document document0 = new Document("";p%NHpo40W+k;$J4L"");
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    // Undeclared exception!
    try {
        document0.indent((StringBuilder) null, 0, document_OutputSettings0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public Node childNode(int index) {
    return childNodes.get(index);
}","public void test2526() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.childNode(677);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 677, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 *     Get a child node by index
 *     @param index index of child node
 *     @return the child node at this index.
 */"
"@Override
public Node attr(String attributeKey, String attributeValue) {
    ensureAttributes();
    return super.attr(attributeKey, attributeValue);
}","public void test2627() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""gv.`hUM_V?f9"", ""*J,?T^9a"");
    // Undeclared exception!
    try {
        textNode0.attr("""", ""org.jsoup.nodes.Node$OuterHtmlVisitor"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public String attr(String attributeKey) {
    Validate.notNull(attributeKey);
    if (attributes.hasKey(attributeKey))
        return attributes.get(attributeKey);
    else if (attributeKey.toLowerCase().startsWith(""abs:""))
        return absUrl(attributeKey.substring(""abs:"".length()));
    else
        return """";
}","public void test2728() throws Throwable {
    Document document0 = new Document(""TPE*="");
    // Undeclared exception!
    try {
        document0.attr((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Get an attribute's value by its key.
 * <p/>
 * To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>,
 * which is a shortcut to the {@link #absUrl} method.
 * E.g.: <blockquote><code>String url = a.attr(""abs:href"");</code></blockquote>
 * @param attributeKey The attribute key.
 * @return The attribute, or empty string if not present (to avoid nulls).
 * @see #attributes()
 * @see #hasAttr(String)
 * @see #absUrl(String)
 */"
"@Override
public Element after(Node node) {
    return (Element) super.after(node);
}","public void test2829() throws Throwable {
    Tag tag0 = Tag.valueOf(""?"");
    Element element0 = new Element(tag0, ""varepsilon"");
    DataNode dataNode0 = DataNode.createFromEncoded(""?"", ""org.jsoup.nodes.Node$OuterHtmlVisitor"");
    element0.setParentNode(dataNode0);
    // Undeclared exception!
    try {
        element0.after((Node) dataNode0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Insert the specified node into the DOM after this node (i.e. as a following sibling).
 * @param node to add after this element
 * @return this element, for chaining
 * @see #before(Node)
 */"
"protected void addChildren(Node... children) {
    //most used. short circuit addChildren(int), which hits reindex children and array copy
    for (Node child : children) {
        reparentChild(child);
        childNodes.add(child);
        child.setSiblingIndex(childNodes.size() - 1);
    }
}","public void test2930() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""Fv%#VPEt/2h|qXI,"", ""Fv%#VPEt/2h|qXI,"");
    Node[] nodeArray0 = new Node[2];
    nodeArray0[0] = (Node) textNode0;
    // Undeclared exception!
    try {
        textNode0.addChildren(nodeArray0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.AbstractList"", e);
    }
}",""
"protected void addChildren(int index, Node... children) {
    Validate.noNullElements(children);
    for (int i = children.length - 1; i >= 0; i--) {
        Node in = children[i];
        reparentChild(in);
        childNodes.add(index, in);
    }
    reindexChildren();
}","public void test3031() throws Throwable {
    Document document0 = new Document("""");
    Node[] nodeArray0 = new Node[3];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    // Undeclared exception!
    try {
        document0.addChildren(2361, nodeArray0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2361, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"public String absUrl(String attributeKey) {
    Validate.notEmpty(attributeKey);
    String relUrl = attr(attributeKey);
    if (!hasAttr(attributeKey)) {
        // nothing to make absolute with
        return """";
    } else {
        URL base;
        try {
            try {
                base = new URL(baseUri);
            } catch (MalformedURLException e) {
                // the base is unsuitable, but the attribute may be abs on its own, so try that
                URL abs = new URL(relUrl);
                return abs.toExternalForm();
            }
            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
            if (relUrl.startsWith(""?""))
                relUrl = base.getPath() + relUrl;
            URL abs = new URL(base, relUrl);
            return abs.toExternalForm();
        } catch (MalformedURLException e) {
            return """";
        }
    }
}","public void test3132() throws Throwable {
    Comment comment0 = new Comment("""", """");
    // Undeclared exception!
    try {
        comment0.absUrl("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
 * <code>&lt;img src></code>).
 * <p/>
 * E.g.: <code>String absUrl = linkEl.absUrl(""href"");</code>
 * <p/>
 * If the attribute value is already absolute (i.e. it starts with a protocol, like
 * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
 * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
 * absolute using that.
 * <p/>
 * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
 * <code>String absUrl = linkEl.attr(""abs:href"");</code>
 *
 * @param attributeKey The attribute key
 * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
 * could not be made successfully into a URL.
 * @see #attr
 * @see java.net.URL#URL(java.net.URL, String)
 */"
"@Override
public int hashCode() {
    int result = parentNode != null ? parentNode.hashCode() : 0;
    // not children, or will block stack as they go back up to parent)
    result = 31 * result + (attributes != null ? attributes.hashCode() : 0);
    return result;
}","public void test3233() throws Throwable {
    TextNode textNode0 = new TextNode(""rightleftharpoons"", ""\n<!---->"");
    textNode0.absUrl(""#text"");
    textNode0.hashCode();
}",""
"public Node nextSibling() {
    if (parentNode == null)
        // root
        return null;
    List<Node> siblings = parentNode.childNodes;
    Integer index = siblingIndex();
    Validate.notNull(index);
    if (siblings.size() > index + 1)
        return siblings.get(index + 1);
    else
        return null;
}","public void test3334() throws Throwable {
    Document document0 = new Document("""");
    Node node0 = document0.nextSibling();
    assertNull(node0);
}","/**
 *     Get this node's next sibling.
 *     @return next sibling, or null if this is the last sibling
 */"
"protected void addChildren(Node... children) {
    //most used. short circuit addChildren(int), which hits reindex children and array copy
    for (Node child : children) {
        reparentChild(child);
        childNodes.add(child);
        child.setSiblingIndex(childNodes.size() - 1);
    }
}","public void test3435() throws Throwable {
    Document document0 = Document.createShell(""(Ou]rYY'S"");
    Node[] nodeArray0 = new Node[4];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    // Undeclared exception!
    try {
        document0.addChildren(nodeArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}",""
"public Document ownerDocument() {
    if (this instanceof Document)
        return (Document) this;
    else if (parentNode == null)
        return null;
    else
        return parentNode.ownerDocument();
}","public void test3536() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""gv.`hUM_V?f9"", ""*J,?T^9a"");
    Document document0 = textNode0.ownerDocument();
    assertNull(document0);
}","/**
 * Gets the Document associated with this Node.
 * @return the Document associated with this Node, or null if there is no such Document.
 */"
"public Document ownerDocument() {
    if (this instanceof Document)
        return (Document) this;
    else if (parentNode == null)
        return null;
    else
        return parentNode.ownerDocument();
}","public void test3637() throws Throwable {
    Document document0 = Document.createShell(""prnsim"");
    Element element0 = document0.prependElement(""AMP"");
    Document document1 = element0.ownerDocument();
    assertNotNull(document1);
}","/**
 * Gets the Document associated with this Node.
 * @return the Document associated with this Node, or null if there is no such Document.
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test3638() throws Throwable {
    Document document0 = Document.createShell(""prnsim"");
    Element element0 = document0.prependElement(""AMP"");
    Document document1 = element0.ownerDocument();
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String attr(String attributeKey) {
    Validate.notNull(attributeKey);
    if (attributes.hasKey(attributeKey))
        return attributes.get(attributeKey);
    else if (attributeKey.toLowerCase().startsWith(""abs:""))
        return absUrl(attributeKey.substring(""abs:"".length()));
    else
        return """";
}","public void test3739() throws Throwable {
    Document document0 = Document.createShell(""t#T"");
    String string0 = document0.attr(""y>0m-0L0K)"");
    assertEquals("""", string0);
}","/**
 * Get an attribute's value by its key.
 * <p/>
 * To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>,
 * which is a shortcut to the {@link #absUrl} method.
 * E.g.: <blockquote><code>String url = a.attr(""abs:href"");</code></blockquote>
 * @param attributeKey The attribute key.
 * @return The attribute, or empty string if not present (to avoid nulls).
 * @see #attributes()
 * @see #hasAttr(String)
 * @see #absUrl(String)
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test3941() throws Throwable {
    TextNode textNode0 = new TextNode(""^xYza6M*RD\u0005'ET$Qj("", (String) null);
    int int0 = textNode0.siblingIndex();
    assertEquals(0, int0);
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Node after(Node node) {
    Validate.notNull(node);
    Validate.notNull(parentNode);
    parentNode.addChildren(siblingIndex() + 1, node);
    return this;
}","public void test4042() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("""", ""\u0006}-BeBAV&OK"");
    Document document0 = Document.createShell(""nequiv"");
    // Undeclared exception!
    try {
        textNode0.after((Node) document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified node into the DOM after this node (i.e. as a following sibling).
 * @param node to add after this node
 * @return this node, for chaining
 * @see #before(Node)
 */"
"public Element head() {
    return findFirstElementByTagName(""head"", this);
}","public void test4143() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    assertNotNull(element0);
}","/**
 *     Accessor to the document's {@code head} element.
 *     @return {@code head}
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test4144() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    element0.outerHtml();
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test4245() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""nRWVc_ysz"", ""nRWVc_ysz"");
    StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ""nRWVc_ysz"");
    textNode0.outerHtml(stringBuilder0);
    assertEquals(0, textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test4346() throws Throwable {
    DataNode dataNode0 = new DataNode(""LA|OV1$Kj>Z]1 OWk^"", """");
    Node node0 = dataNode0.clone();
    assertEquals(0, node0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public Node clone() {
    // splits for orphan
    return doClone(null);
}","public void test4347() throws Throwable {
    DataNode dataNode0 = new DataNode(""LA|OV1$Kj>Z]1 OWk^"", """");
    Node node0 = dataNode0.clone();
    assertNotSame(node0, dataNode0);
}","/**
 * Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or
 * parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the
 * original node.
 * <p>
 * The cloned node may be adopted into another Document or node structure using {@link Element#appendChild(Node)}.
 * @return stand-alone cloned node
 */"
"public String baseUri() {
    return baseUri;
}","public void test4448() throws Throwable {
    Document document0 = new Document("""");
    String string0 = document0.baseUri();
    assertEquals("""", string0);
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Node parent() {
    return parentNode;
}","public void test4549() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration("""", """", false);
    Node node0 = xmlDeclaration0.parent();
    assertNull(node0);
}","/**
 *     Gets this node's parent node.
 *     @return parent node; or null if no parent.
 */"
"public Node childNode(int index) {
    return childNodes.get(index);
}","public void test4650() throws Throwable {
    Document document0 = Document.createShell(""{T#"");
    // Undeclared exception!
    try {
        document0.childNode((-1522));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 *     Get a child node by index
 *     @param index index of child node
 *     @return the child node at this index.
 */"
"public Attributes attributes() {
    return attributes;
}","public void test4751() throws Throwable {
    Document document0 = Document.createShell(""uIL&1\"""");
    Attributes attributes0 = document0.attributes();
    assertNotNull(attributes0);
}","/**
 * Get all of the element's attributes.
 * @return attributes (which implements iterable, in same order as presented in original HTML).
 */"
"public Node attr(String attributeKey, String attributeValue) {
    attributes.put(attributeKey, attributeValue);
    return this;
}","public void test4852() throws Throwable {
    Comment comment0 = new Comment("""", """");
    Node node0 = comment0.attr(""7f0y"", ""7f0y"");
    assertSame(comment0, node0);
}","/**
 * Set an attribute (key=value). If the attribute already exists, it is replaced.
 * @param attributeKey The attribute key.
 * @param attributeValue The attribute value.
 * @return this (for chaining)
 */"
"public boolean hasAttr(String attributeKey) {
    Validate.notNull(attributeKey);
    return attributes.hasKey(attributeKey);
}","public void test4953() throws Throwable {
    Document document0 = new Document("" wd$D"");
    boolean boolean0 = document0.hasAttr("",{J=fV"");
    assertFalse(boolean0);
}","/**
 * Test if this element has an attribute.
 * @param attributeKey The attribute key to check.
 * @return true if the attribute exists, false if not.
 */"
"public Node before(Node node) {
    Validate.notNull(node);
    Validate.notNull(parentNode);
    parentNode.addChildren(siblingIndex(), node);
    return this;
}","public void test5054() throws Throwable {
    Document document0 = new Document(""abs:succapprox"");
    TextNode textNode0 = new TextNode((String) null, ""#tex"");
    // Undeclared exception!
    try {
        textNode0.before((Node) document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified node into the DOM before this node (i.e. as a preceeding sibling).
 * @param node to add before this node
 * @return this node, for chaining
 * @see #after(Node)
 */"
"public Node before(String html) {
    addSiblingHtml(siblingIndex(), html);
    return this;
}","public void test5155() throws Throwable {
    Comment comment0 = new Comment(""}uTFEjqb/"", ""}uTFEjqb/"");
    // Undeclared exception!
    try {
        comment0.before("":IeT9%M.4T"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified HTML into the DOM before this node (i.e. as a preceeding sibling).
 * @param html HTML to add before this node
 * @return this node, for chaining
 * @see #after(String)
 */"
"@Override
public int hashCode() {
    int result = parentNode != null ? parentNode.hashCode() : 0;
    // not children, or will block stack as they go back up to parent)
    result = 31 * result + (attributes != null ? attributes.hashCode() : 0);
    return result;
}","public void test5256() throws Throwable {
    Comment comment0 = new Comment("""", """");
    TextNode textNode0 = new TextNode(""rightleftharpoons"", ""\n<!---->"");
    Node node0 = textNode0.doClone(comment0);
    node0.hashCode();
    assertNotSame(node0, textNode0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test5257() throws Throwable {
    Comment comment0 = new Comment("""", """");
    TextNode textNode0 = new TextNode(""rightleftharpoons"", ""\n<!---->"");
    Node node0 = textNode0.doClone(comment0);
    node0.hashCode();
    assertEquals(0, node0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"protected void removeChild(Node out) {
    Validate.isTrue(out.parentNode == this);
    int index = out.siblingIndex();
    childNodes.remove(index);
    reindexChildren();
    out.parentNode = null;
}","public void test5358() throws Throwable {
    Document document0 = new Document("">5~"");
    // Undeclared exception!
    try {
        document0.removeChild(document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public void replaceWith(Node in) {
    Validate.notNull(in);
    Validate.notNull(parentNode);
    parentNode.replaceChild(this, in);
}","public void test5459() throws Throwable {
    Comment comment0 = new Comment("""", """");
    TextNode textNode0 = new TextNode(""rightleftharpoons"", ""\n<!---->"");
    Node node0 = textNode0.doClone(comment0);
    // Undeclared exception!
    try {
        node0.replaceWith(comment0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Replace this node in the DOM with the supplied node.
 * @param in the node that will will replace the existing node.
 */"
"protected void replaceChild(Node out, Node in) {
    Validate.isTrue(out.parentNode == this);
    Validate.notNull(in);
    if (in.parentNode != null)
        in.parentNode.removeChild(in);
    Integer index = out.siblingIndex();
    childNodes.set(index, in);
    in.parentNode = this;
    in.setSiblingIndex(index);
    out.parentNode = null;
}","public void test5560() throws Throwable {
    Document document0 = Document.createShell(""lbrace"");
    // Undeclared exception!
    try {
        document0.replaceChild(document0, (Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
public Element wrap(String html) {
    return (Element) super.wrap(html);
}","public void test5661() throws Throwable {
    Document document0 = new Document(""!M%\""icZur"");
    document0.prependChild(document0);
    Element element0 = document0.wrap(""!M%\""icZur"");
    assertNull(element0);
}","/**
 * Wrap the supplied HTML around this element.
 *
 * @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 * @return this element, for chaining.
 */"
"public Node wrap(String html) {
    Validate.notEmpty(html);
    Element context = parent() instanceof Element ? (Element) parent() : null;
    List<Node> wrapChildren = Parser.parseFragment(html, context, baseUri());
    Node wrapNode = wrapChildren.get(0);
    if (// nothing to wrap with; noop
    wrapNode == null || !(wrapNode instanceof Element))
        return null;
    Element wrap = (Element) wrapNode;
    Element deepest = getDeepChild(wrap);
    parentNode.replaceChild(this, wrap);
    deepest.addChildren(this);
    // remainder (unbalanced wrap, like <div></div><p></p> -- The <p> is remainder
    if (wrapChildren.size() > 0) {
        for (int i = 0; i < wrapChildren.size(); i++) {
            Node remainder = wrapChildren.get(i);
            remainder.parentNode.removeChild(remainder);
            wrap.appendChild(remainder);
        }
    }
    return this;
}","public void test5762() throws Throwable {
    TextNode textNode0 = new TextNode(""rightleftharpoons"", ""\n<!---->"");
    // Undeclared exception!
    try {
        textNode0.wrap(""_hve%K.B_"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}","/**
 *     Wrap the supplied HTML around this node.
 *     @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 *     @return this node, for chaining.
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test5863() throws Throwable {
    Document document0 = new Document(""!M%\""icZur"");
    document0.prependChild(document0);
    document0.after(""!M%\""icZur"");
    assertEquals(0, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String absUrl(String attributeKey) {
    Validate.notEmpty(attributeKey);
    String relUrl = attr(attributeKey);
    if (!hasAttr(attributeKey)) {
        // nothing to make absolute with
        return """";
    } else {
        URL base;
        try {
            try {
                base = new URL(baseUri);
            } catch (MalformedURLException e) {
                // the base is unsuitable, but the attribute may be abs on its own, so try that
                URL abs = new URL(relUrl);
                return abs.toExternalForm();
            }
            // workaround: java resolves '//path/file + ?foo' to '//path/?foo', not '//path/file?foo' as desired
            if (relUrl.startsWith(""?""))
                relUrl = base.getPath() + relUrl;
            URL abs = new URL(base, relUrl);
            return abs.toExternalForm();
        } catch (MalformedURLException e) {
            return """";
        }
    }
}","public void test5964() throws Throwable {
    DataNode dataNode0 = new DataNode(""[[*=A,X"", ""7"");
    String string0 = dataNode0.absUrl(""[[*=A,X"");
    assertEquals("""", string0);
}","/**
 * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
 * <code>&lt;img src></code>).
 * <p/>
 * E.g.: <code>String absUrl = linkEl.absUrl(""href"");</code>
 * <p/>
 * If the attribute value is already absolute (i.e. it starts with a protocol, like
 * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
 * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
 * absolute using that.
 * <p/>
 * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
 * <code>String absUrl = linkEl.attr(""abs:href"");</code>
 *
 * @param attributeKey The attribute key
 * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
 * could not be made successfully into a URL.
 * @see #attr
 * @see java.net.URL#URL(java.net.URL, String)
 */"
"public Elements getElementsByAttributeValueNot(String key, String value) {
    return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);
}","public void test6065() throws Throwable {
    Document document0 = new Document(""org.jsoup.nodes.Node"");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueNot(""abs:"", ""org.jsoup.nodes.Node"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.
 *
 * @param key name of the attribute
 * @param value value of the attribute
 * @return elements that do not have a matching attribute
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test6166() throws Throwable {
    Document document0 = Document.createShell(""lbrace"");
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Element element0 = document0.classNames((Set<String>) linkedHashSet0);
    Element element1 = document0.clone();
    assertEquals(0, element1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public Document clone() {
    Document clone = (Document) super.clone();
    clone.outputSettings = this.outputSettings.clone();
    return clone;
}","public void test6167() throws Throwable {
    Document document0 = Document.createShell(""lbrace"");
    LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
    Element element0 = document0.classNames((Set<String>) linkedHashSet0);
    Element element1 = document0.clone();
    assertNotSame(element1, element0);
}",""
"public List<Node> siblingNodes() {
    // TODO: should this strip out this node? i.e. not a sibling of self?
    return parent().childNodes();
}","public void test6268() throws Throwable {
    Document document0 = new Document(""!M%\""icZur"");
    // Undeclared exception!
    try {
        document0.siblingNodes();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}","/**
 *     Retrieves this node's sibling nodes. Effectively, {@link #childNodes()  node.parent.childNodes()}.
 *     @return node siblings, including this node
 */"
"public void replaceWith(Node in) {
    Validate.notNull(in);
    Validate.notNull(parentNode);
    parentNode.replaceChild(this, in);
}","public void test6369() throws Throwable {
    Comment comment0 = new Comment("""", """");
    TextNode textNode0 = new TextNode(""rightleftharpoons"", ""\n<!---->"");
    // Undeclared exception!
    try {
        textNode0.replaceWith(comment0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Replace this node in the DOM with the supplied node.
 * @param in the node that will will replace the existing node.
 */"
"public Node removeAttr(String attributeKey) {
    Validate.notNull(attributeKey);
    attributes.remove(attributeKey);
    return this;
}","public void test6470() throws Throwable {
    Document document0 = new Document(""c?E1wKu0iW&P"");
    // Undeclared exception!
    try {
        document0.removeAttr("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Remove an attribute from this element.
 * @param attributeKey The attribute to remove.
 * @return this (for chaining)
 */"
"public void remove() {
    Validate.notNull(parentNode);
    parentNode.removeChild(this);
}","public void test6571() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""Fv%#VPEt/2h|qXI,"", ""Fv%#VPEt/2h|qXI,"");
    // Undeclared exception!
    try {
        textNode0.remove();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.
 */"
"protected Node[] childNodesAsArray() {
    return childNodes.toArray(new Node[childNodes().size()]);
}","public void test6672() throws Throwable {
    Document document0 = new Document(""!M%\""icZur"");
    Node[] nodeArray0 = document0.childNodesAsArray();
    assertEquals(0, nodeArray0.length);
}",""
"public Node after(String html) {
    addSiblingHtml(siblingIndex() + 1, html);
    return this;
}","public void test6773() throws Throwable {
    Comment comment0 = new Comment("""", """");
    // Undeclared exception!
    try {
        comment0.after("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified HTML into the DOM after this node (i.e. as a following sibling).
 * @param html HTML to add after this node
 * @return this node, for chaining
 * @see #before(String)
 */"
"public void setBaseUri(String baseUri) {
    Validate.notNull(baseUri);
    this.baseUri = baseUri;
}","public void test6874() throws Throwable {
    Document document0 = new Document(""Rnu{"");
    // Undeclared exception!
    try {
        document0.setBaseUri((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Update the base URI of this node.
 *     @param baseUri base URI to set
 */"
