focal_method,test_prefix,docstring
"Connection data(String... keyvals);","public void test033() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    String[] stringArray0 = new String[12];
    stringArray0[0] = ""Method must not be null"";
    // Undeclared exception!
    try {
        connection0.data(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Data value must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Add a number of request data parameters. Multiple parameters may be set at once, e.g.: <code>.data(""name"",
 * ""jsoup"", ""language"", ""Java"", ""language"", ""English"");</code> creates a query string like:
 * <code>{@literal ?name=jsoup&language=Java&language=English}</code>
 * @param keyvals a set of key value pairs.
 * @return this Connection, for chaining
 */"
"Connection postDataCharset(String charset);","public void test044() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    // Undeclared exception!
    try {
        connection0.postDataCharset(""u<r-agent"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // u<r-agent
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Sets the default post data character set for x-www-form-urlencoded post data
 * @param charset character set to encode post data
 * @return this Connection, for chaining
 */"
"Connection header(String name, String value);","public void test055() throws Throwable {
    URL uRL0 = MockURL.getFileExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    // Undeclared exception!
    try {
        connection0.header("""", ""-$A';FJS!u\""w"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Header name must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Set a request header.
 * @param name header name
 * @param value header value
 * @return this Connection, for chaining
 * @see org.jsoup.Connection.Request#headers()
 */"
"Document get() throws IOException;","public void test066() throws Throwable {
    URL uRL0 = MockURL.getFileExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    try {
        connection0.get();
        fail(""Expecting exception: MalformedURLException"");
    } catch (MalformedURLException e) {
        //
        // Only http & https protocols supported
        //
        verifyException(""org.jsoup.helper.HttpConnection$Response"", e);
    }
}","/**
 * Execute the request as a GET, and parse the result.
 * @return parsed Document
 * @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
 * @throws HttpStatusException if the response is not OK and HTTP response errors are not ignored
 * @throws UnsupportedMimeTypeException if the response mime type is not supported and those errors are not ignored
 * @throws java.net.SocketTimeoutException if the connection times out
 * @throws IOException on error
 */"
"Connection cookies(Map<String, String> cookies);","public void test077() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    // Undeclared exception!
    try {
        connection0.cookies((Map<String, String>) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Cookie map must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Adds each of the supplied cookies to the request.
 * @param cookies map of cookie name {@literal ->} value pairs
 * @return this Connection, for chaining
 */"
"public static Connection connect(URL url) {
    Connection con = new HttpConnection();
    con.url(url);
    return con;
}","public void test088() throws Throwable {
    // Undeclared exception!
    try {
        HttpConnection.connect((URL) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // URL must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Connection url(String url);","public void test1011() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    // Undeclared exception!
    try {
        connection0.url((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must supply a valid URL
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Set the request URL to fetch. The protocol must be HTTP or HTTPS.
 * @param url URL to connect to
 * @return this Connection, for chaining
 */"
"Connection url(URL url);","public void test1112() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection connection1 = connection0.url(uRL0);
    assertSame(connection0, connection1);
}","/**
 * Set the request URL to fetch. The protocol must be HTTP or HTTPS.
 * @param url URL to connect to
 * @return this Connection, for chaining
 */"
"Response execute() throws IOException;","public void test1822() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    try {
        connection0.execute();
        fail(""Expecting exception: MalformedURLException"");
    } catch (MalformedURLException e) {
        //
        // Only http & https protocols supported
        //
        verifyException(""org.jsoup.helper.HttpConnection$Response"", e);
    }
}","/**
 * Execute the request.
 * @return a response object
 * @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
 * @throws HttpStatusException if the response is not OK and HTTP response errors are not ignored
 * @throws UnsupportedMimeTypeException if the response mime type is not supported and those errors are not ignored
 * @throws java.net.SocketTimeoutException if the connection times out
 * @throws IOException on error
 */"
"Connection maxBodySize(int bytes);","public void test1923() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    // Undeclared exception!
    try {
        connection0.maxBodySize((-1841796721));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // maxSize must be 0 (unlimited) or larger
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed,
 * and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded
 * only by your patience and the memory available on your machine).
 * @param bytes number of bytes to read from the input before truncating
 * @return this Connection, for chaining
 */"
"Connection cookies(Map<String, String> cookies);","public void test2125() throws Throwable {
    URL uRL0 = MockURL.getFileExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    Attributes attributes0 = new Attributes();
    Map<String, String> map0 = attributes0.dataset();
    Connection connection1 = connection0.cookies(map0);
    assertSame(connection1, connection0);
}","/**
 * Adds each of the supplied cookies to the request.
 * @param cookies map of cookie name {@literal ->} value pairs
 * @return this Connection, for chaining
 */"
"Connection data(String... keyvals);","public void test2226() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    String[] stringArray0 = new String[0];
    Connection connection1 = connection0.data(stringArray0);
    assertSame(connection1, connection0);
}","/**
 * Add a number of request data parameters. Multiple parameters may be set at once, e.g.: <code>.data(""name"",
 * ""jsoup"", ""language"", ""Java"", ""language"", ""English"");</code> creates a query string like:
 * <code>{@literal ?name=jsoup&language=Java&language=English}</code>
 * @param keyvals a set of key value pairs.
 * @return this Connection, for chaining
 */"
"Connection data(String... keyvals);","public void test2327() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    String[] stringArray0 = new String[1];
    // Undeclared exception!
    try {
        connection0.data(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must supply an even number of key value pairs
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Add a number of request data parameters. Multiple parameters may be set at once, e.g.: <code>.data(""name"",
 * ""jsoup"", ""language"", ""Java"", ""language"", ""English"");</code> creates a query string like:
 * <code>{@literal ?name=jsoup&language=Java&language=English}</code>
 * @param keyvals a set of key value pairs.
 * @return this Connection, for chaining
 */"
"Connection referrer(String referrer);","public void test3440() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection connection1 = connection0.referrer(""user-agent"");
    assertSame(connection1, connection0);
}","/**
 * Set the request referrer (aka ""referer"") header.
 * @param referrer referrer to use
 * @return this Connection, for chaining
 */"
"Connection header(String name, String value);","public void test3541() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection connection1 = connection0.header(""Content-Encoding"", ""4p-ijQ'56@U6dQ"");
    assertSame(connection1, connection0);
}","/**
 * Set a request header.
 * @param name header name
 * @param value header value
 * @return this Connection, for chaining
 * @see org.jsoup.Connection.Request#headers()
 */"
"Connection method(Method method);","public void test3749() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection.Method connection_Method0 = Connection.Method.PATCH;
    Connection connection1 = connection0.method(connection_Method0);
    assertSame(connection1, connection0);
}","/**
 * Set the request method to use, GET or POST. Default is GET.
 * @param method HTTP request method
 * @return this Connection, for chaining
 */"
"Connection data(String key, String value);","public void test3850() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    // Undeclared exception!
    try {
        connection0.data((String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Data key must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Add a request data parameter. Request parameters are sent in the request query string for GETs, and in the
 * request body for POSTs. A request may have multiple values of the same name.
 * @param key data key
 * @param value data value
 * @return this Connection, for chaining
 */"
"Connection timeout(int millis);","public void test3951() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection connection1 = connection0.timeout(48);
    assertSame(connection0, connection1);
}","/**
 * Set the request timeouts (connect and read). If a timeout occurs, an IOException will be thrown. The default
 * timeout is 3 seconds (3000 millis). A timeout of zero is treated as an infinite timeout.
 * @param millis number of milliseconds (thousandths of a second) before timing out connects or reads.
 * @return this Connection, for chaining
 */"
"Connection postDataCharset(String charset);","public void test4052() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    // Undeclared exception!
    try {
        connection0.postDataCharset(""put"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // put
        //
        verifyException(""org.jsoup.helper.HttpConnection$Request"", e);
    }
}","/**
 * Sets the default post data character set for x-www-form-urlencoded post data
 * @param charset character set to encode post data
 * @return this Connection, for chaining
 */"
"public static Connection connect(String url) {
    Connection con = new HttpConnection();
    con.url(url);
    return con;
}","public void test4153() throws Throwable {
    // Undeclared exception!
    try {
        HttpConnection.connect(""`^Bp5z}U|}|We"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Malformed URL: `^Bp5z}U|}|We
        //
        verifyException(""org.jsoup.helper.HttpConnection"", e);
    }
}",""
"Connection maxBodySize(int bytes);","public void test4254() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection connection1 = connection0.maxBodySize(48);
    assertSame(connection0, connection1);
}","/**
 * Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed,
 * and the input truncated. The default maximum is 1MB. A max size of zero is treated as an infinite amount (bounded
 * only by your patience and the memory available on your machine).
 * @param bytes number of bytes to read from the input before truncating
 * @return this Connection, for chaining
 */"
"Document get() throws IOException;","public void test4355() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    try {
        connection0.get();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // HTTP error fetching URL
        //
        verifyException(""org.jsoup.helper.HttpConnection$Response"", e);
    }
}","/**
 * Execute the request as a GET, and parse the result.
 * @return parsed Document
 * @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
 * @throws HttpStatusException if the response is not OK and HTTP response errors are not ignored
 * @throws UnsupportedMimeTypeException if the response mime type is not supported and those errors are not ignored
 * @throws java.net.SocketTimeoutException if the connection times out
 * @throws IOException on error
 */"
"Connection cookie(String name, String value);","public void test4456() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection connection1 = connection0.cookie(""user-agent"", ""[6fu2"");
    assertSame(connection0, connection1);
}","/**
 * Set a cookie to be sent in the request.
 * @param name name of cookie
 * @param value value of cookie
 * @return this Connection, for chaining
 */"
"Connection validateTLSCertificates(boolean value);","public void test4658() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection connection1 = connection0.validateTLSCertificates(true);
    assertSame(connection1, connection0);
}","/**
 * Disable/enable TSL certificates validation for HTTPS requests.
 * <p>
 * By default this is <b>true</b>; all
 * connections over HTTPS perform normal validation of certificates, and will abort requests if the provided
 * certificate does not validate.
 * </p>
 * <p>
 * Some servers use expired, self-generated certificates; or your JDK may not
 * support SNI hosts. In which case, you may want to enable this setting.
 * </p>
 * <p>
 * <b>Be careful</b> and understand why you need to disable these validations.
 * </p>
 * @param value if should validate TSL (SSL) certificates. <b>true</b> by default.
 * @return this Connection, for chaining
 */"
"Connection ignoreContentType(boolean ignoreContentType);","public void test4759() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection connection1 = connection0.ignoreContentType(false);
    assertSame(connection1, connection0);
}","/**
 * Ignore the document's Content-Type when parsing the response. By default this is <b>false</b>, an unrecognised
 * content-type will cause an IOException to be thrown. (This is to prevent producing garbage by attempting to parse
 * a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type.
 * @param ignoreContentType set to true if you would like the content type ignored on parsing the response into a
 * Document.
 * @return this Connection, for chaining
 */"
"Response execute() throws IOException;","public void test4860() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    try {
        connection0.execute();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // HTTP error fetching URL
        //
        verifyException(""org.jsoup.helper.HttpConnection$Response"", e);
    }
}","/**
 * Execute the request.
 * @return a response object
 * @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
 * @throws HttpStatusException if the response is not OK and HTTP response errors are not ignored
 * @throws UnsupportedMimeTypeException if the response mime type is not supported and those errors are not ignored
 * @throws java.net.SocketTimeoutException if the connection times out
 * @throws IOException on error
 */"
"Connection parser(Parser parser);","public void test4961() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    Parser parser0 = Parser.xmlParser();
    Connection connection1 = connection0.parser(parser0);
    assertSame(connection0, connection1);
}","/**
 * Provide an alternate parser to use when parsing the response to a Document. If not set, defaults to the HTML
 * parser, unless the response content-type is XML, in which case the XML parser is used.
 * @param parser alternate parser
 * @return this Connection, for chaining
 */"
"Connection data(String key, String filename, InputStream inputStream);","public void test5062() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    URL uRL0 = MockURI.toURL(uRI0);
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection connection1 = connection0.data(""(m)"", ""j?oGgW_86|C"", (InputStream) null);
    assertSame(connection1, connection0);
}","/**
 * Add an input stream as a request data paramater. For GETs, has no effect, but for POSTS this will upload the
 * input stream.
 * @param key data key (form item name)
 * @param filename the name of the file to present to the remove server. Typically just the name, not path,
 * component.
 * @param inputStream the input stream to upload, that you probably obtained from a {@link java.io.FileInputStream}.
 * You must close the InputStream in a {@code finally} block.
 * @return this Connections, for chaining
 */"
"Document post() throws IOException;","public void test5163() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    try {
        connection0.post();
        fail(""Expecting exception: UnknownServiceException"");
    } catch (UnknownServiceException e) {
        //
        // protocol doesn't support output
        //
        verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
    }
}","/**
 * Execute the request as a POST, and parse the result.
 * @return parsed Document
 * @throws java.net.MalformedURLException if the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
 * @throws HttpStatusException if the response is not OK and HTTP response errors are not ignored
 * @throws UnsupportedMimeTypeException if the response mime type is not supported and those errors are not ignored
 * @throws java.net.SocketTimeoutException if the connection times out
 * @throws IOException on error
 */"
"Connection ignoreHttpErrors(boolean ignoreHttpErrors);","public void test5264() throws Throwable {
    URL uRL0 = MockURL.getHttpExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection connection1 = connection0.ignoreHttpErrors(true);
    assertSame(connection1, connection0);
}","/**
 * Configures the connection to not throw exceptions when a HTTP error occurs. (4xx - 5xx, e.g. 404 or 500). By
 * default this is <b>false</b>; an IOException is thrown if an error is encountered. If set to <b>true</b>, the
 * response is populated with the error body, and the status message will reflect the error.
 * @param ignoreHttpErrors - false (default) if HTTP errors should be ignored.
 * @return this Connection, for chaining
 */"
"Connection followRedirects(boolean followRedirects);","public void test5365() throws Throwable {
    URL uRL0 = MockURL.getFileExample();
    Connection connection0 = HttpConnection.connect(uRL0);
    Connection connection1 = connection0.followRedirects(false);
    assertSame(connection1, connection0);
}","/**
 * Configures the connection to (not) follow server redirects. By default this is <b>true</b>.
 * @param followRedirects true if server redirects should be followed.
 * @return this Connection, for chaining
 */"
