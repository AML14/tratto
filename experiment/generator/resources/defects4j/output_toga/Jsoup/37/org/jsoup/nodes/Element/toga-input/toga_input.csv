focal_method,test_prefix,docstring
"@Override
public Element before(String html) {
    return (Element) super.before(html);
}","public void test000() throws Throwable {
    Tag tag0 = Tag.valueOf(""\n * "");
    TextNode textNode0 = new TextNode(""\n * "", ""n9;?.82U0g"");
    Attributes attributes0 = textNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""\n * "", attributes0);
    // Undeclared exception!
    try {
        formElement0.before("" />"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified HTML into the DOM before this element (as a preceding sibling).
 *
 * @param html HTML to add before this element
 * @return this element, for chaining
 * @see #after(String)
 */"
"public Document normalise() {
    Element htmlEl = findFirstElementByTagName(""html"", this);
    if (htmlEl == null)
        htmlEl = appendElement(""html"");
    if (head() == null)
        htmlEl.prependElement(""head"");
    if (body() == null)
        htmlEl.appendElement(""body"");
    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care
    // of. do in inverse order to maintain text order.
    normaliseTextNodes(head());
    normaliseTextNodes(htmlEl);
    normaliseTextNodes(this);
    normaliseStructure(""head"", htmlEl);
    normaliseStructure(""body"", htmlEl);
    return this;
}","public void test011() throws Throwable {
    Document document0 = new Document(""!"");
    // Undeclared exception!
    try {
        document0.normalise();
        //  fail(""Expecting exception: NoSuchElementException"");
        // Unstable assertion
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 *     Normalise the document. This happens after the parse phase so generally does not need to be called.
 *     Moves any text content that is not in the body element into the body.
 *     @return this document after normalisation
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test033() throws Throwable {
    Tag tag0 = Tag.valueOf(""j`ah9"");
    Element element0 = new Element(tag0, ""org.jsoup.nodes.Element"");
    Element element1 = element0.prepend("""");
    assertEquals(0, element1.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test044() throws Throwable {
    Document document0 = new Document("""");
    Element element0 = document0.toggleClass("""");
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String toString() {
    return outerHtml();
}","public void test055() throws Throwable {
    Document document0 = new Document("" X&BodRu"");
    document0.prependText("" X&BodRu"");
    String string0 = document0.toString();
    assertEquals(""X&amp;BodRu"", string0);
}",""
"public String text() {
    final StringBuilder accum = new StringBuilder();
    new NodeTraversor(new NodeVisitor() {

        public void head(Node node, int depth) {
            if (node instanceof TextNode) {
                TextNode textNode = (TextNode) node;
                appendNormalisedText(accum, textNode);
            } else if (node instanceof Element) {
                Element element = (Element) node;
                if (accum.length() > 0 && (element.isBlock() || element.tag.getName().equals(""br"")) && !TextNode.lastCharIsWhitespace(accum))
                    accum.append("" "");
            }
        }

        public void tail(Node node, int depth) {
        }
    }).traverse(this);
    return accum.toString().trim();
}","public void test066() throws Throwable {
    Document document0 = new Document("""");
    TextNode textNode0 = new TextNode(""\n * "", ""\n * "");
    document0.appendChild(textNode0);
    String string0 = document0.text();
    assertEquals(""*"", string0);
}","/**
 * Gets the combined text of this element and all its children.
 * <p>
 * For example, given HTML {@code <p>Hello <b>there</b> now!</p>}, {@code p.text()} returns {@code ""Hello there now!""}
 *
 * @return unencoded text, or empty string if none.
 * @see #ownText()
 * @see #textNodes()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test077() throws Throwable {
    Tag tag0 = Tag.valueOf(""Q\""c"");
    Element element0 = new Element(tag0, ""org.jsoup.nodes.Element$1"");
    Element element1 = element0.tagName(""org.jsoup.nodes.Element$1"");
    assertEquals(0, element1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test088() throws Throwable {
    Document document0 = new Document(""\""c"");
    Elements elements0 = document0.select(""6"");
    assertTrue(elements0.isEmpty());
}",""
"public Element removeClass(String className) {
    Validate.notNull(className);
    Set<String> classes = classNames();
    classes.remove(className);
    classNames(classes);
    return this;
}","public void test099() throws Throwable {
    Document document0 = new Document(""Bp!w#X_F="");
    Element element0 = document0.appendChild(document0);
    Element element1 = element0.removeClass(""textarea"");
    assertSame(element0, element1);
}","/**
 *     Remove a class name from this element's {@code class} attribute.
 *     @param className class name to remove
 *     @return this element
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1010() throws Throwable {
    Document document0 = new Document("""");
    Elements elements0 = document0.parents();
    assertEquals(0, elements0.size());
}",""
"public String ownText() {
    StringBuilder sb = new StringBuilder();
    ownText(sb);
    return sb.toString().trim();
}","public void test1111() throws Throwable {
    Document document0 = new Document(""s+"");
    String string0 = document0.ownText();
    assertEquals("""", string0);
}","/**
 * Gets the text owned by this element only; does not get the combined text of all children.
 * <p>
 * For example, given HTML {@code <p>Hello <b>there</b> now!</p>}, {@code p.ownText()} returns {@code ""Hello now!""},
 * whereas {@code p.text()} returns {@code ""Hello there now!""}.
 * Note that the text within the {@code b} element is not returned, as it is not a direct child of the {@code p} element.
 *
 * @return unencoded text, or empty string if none.
 * @see #text()
 * @see #textNodes()
 */"
"public String html() {
    StringBuilder accum = new StringBuilder();
    html(accum);
    return accum.toString().trim();
}","public void test1212() throws Throwable {
    Document document0 = new Document(""&56t6i`d/)tHS B"");
    String string0 = document0.html();
    assertEquals("""", string0);
}","/**
 * Retrieves the element's inner HTML. E.g. on a {@code <div>} with one empty {@code <p>}, would return
 * {@code <p></p>}. (Whereas {@link #outerHtml()} would return {@code <div><p></p></div>}.)
 *
 * @return String of HTML.
 * @see #outerHtml()
 */"
"public boolean hasClass(String className) {
    Set<String> classNames = classNames();
    for (String name : classNames) {
        if (className.equalsIgnoreCase(name))
            return true;
    }
    return false;
}","public void test1313() throws Throwable {
    Tag tag0 = Tag.valueOf(""org.jsoup.select.Evaluator$MatchesOwn"");
    TextNode textNode0 = new TextNode(""org.jsoup.select.Evaluator$MatchesOwn"", (String) null);
    Attributes attributes0 = textNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""org.jsoup.select.Evaluator$MatchesOwn"", attributes0);
    boolean boolean0 = formElement0.hasClass("":eQ_NF1 4TZ"");
    assertFalse(boolean0);
}","/**
 * Tests if this element has a class. Case insensitive.
 * @param className name of class to check for
 * @return true if it does, false if not
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1414() throws Throwable {
    Document document0 = new Document(""&56t6i`d/)tHS B"");
    Element element0 = document0.createElement(""&56t6i`d/)tHS B"");
    Elements elements0 = element0.getElementsByTag(""&56t6i`d/)tHS B"");
    assertEquals(1, elements0.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1515() throws Throwable {
    Document document0 = new Document("""");
    Elements elements0 = document0.getElementsByIndexGreaterThan(124);
    assertEquals(0, elements0.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1616() throws Throwable {
    Document document0 = new Document(""o\""DsH)hSM"");
    Elements elements0 = document0.getElementsByAttributeValueMatching(""-?lQOQU]y"", ""`"");
    assertEquals(0, elements0.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1717() throws Throwable {
    Document document0 = new Document(""m~xW|,Noq@2)3W"");
    Elements elements0 = document0.getElementsByAttribute("" />"");
    assertEquals(0, elements0.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1818() throws Throwable {
    Document document0 = new Document(""o\""DsH)hSM"");
    Elements elements0 = document0.getAllElements();
    assertEquals(1, elements0.size());
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test1919() throws Throwable {
    Document document0 = new Document("""");
    Locale locale0 = Locale.KOREAN;
    document0.prepend(""org.jsoup.parser.CharacterReader"");
    Set<String> set0 = locale0.getUnicodeLocaleKeys();
    document0.classNames(set0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public String tagName() {
    return tag.getName();
}","public void test2020() throws Throwable {
    Document document0 = new Document(""#root"");
    Element element0 = document0.attr(""4"", ""4"");
    assertEquals(""#root"", element0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test2121() throws Throwable {
    Document document0 = new Document(""m~xW|,Noq@2)3W"");
    Element element0 = document0.appendElement("" />"");
    assertEquals(""/>"", element0.nodeName());
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test2222() throws Throwable {
    Document document0 = new Document(""s+"");
    Element element0 = document0.addClass("""");
    assertEquals(0, element0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"@Override
public Element wrap(String html) {
    return (Element) super.wrap(html);
}","public void test2323() throws Throwable {
    Tag tag0 = Tag.valueOf(""org.jsoup.nodes.Element$1"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""org.jsoup.nodes.Element$1"", attributes0);
    // Undeclared exception!
    try {
        formElement0.wrap(""org.jsoup.nodes.Element$1"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}","/**
 * Wrap the supplied HTML around this element.
 *
 * @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 * @return this element, for chaining.
 */"
"@Override
public Element wrap(String html) {
    return (Element) super.wrap(html);
}","public void test2424() throws Throwable {
    Tag tag0 = Tag.valueOf(""s>"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""s>"", attributes0);
    // Undeclared exception!
    try {
        element0.wrap((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Wrap the supplied HTML around this element.
 *
 * @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 * @return this element, for chaining.
 */"
"public Elements select(String cssQuery) {
    return Selector.select(cssQuery, this);
}","public void test2525() throws Throwable {
    Tag tag0 = Tag.valueOf(""Q\""c"");
    Element element0 = new Element(tag0, ""org.jsoup.nodes.Element$1"");
    // Undeclared exception!
    try {
        element0.select("":"");
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Could not parse query ':': unexpected token at ':'
        //
        verifyException(""org.jsoup.select.QueryParser"", e);
    }
}","/**
 * Find elements that match the {@link Selector} CSS query, with this element as the starting context. Matched elements
 * may include this element, or any of its children.
 * <p/>
 * This method is generally more powerful to use than the DOM-type {@code getElementBy*} methods, because
 * multiple filters can be combined, e.g.:
 * <ul>
 * <li>{@code el.select(""a[href]"")} - finds links ({@code a} tags with {@code href} attributes)
 * <li>{@code el.select(""a[href*=example.com]"")} - finds links pointing to example.com (loosely)
 * </ul>
 * <p/>
 * See the query syntax documentation in {@link org.jsoup.select.Selector}.
 *
 * @param cssQuery a {@link Selector} CSS-like query
 * @return elements that match the query (empty if none match)
 * @see org.jsoup.select.Selector
 */"
"public Element removeClass(String className) {
    Validate.notNull(className);
    Set<String> classes = classNames();
    classes.remove(className);
    classNames(classes);
    return this;
}","public void test2626() throws Throwable {
    Tag tag0 = Tag.valueOf(""=$Z@-n+Hh:gn()"");
    TextNode textNode0 = new TextNode(""=$Z@-n+Hh:gn()"", ""head"");
    Attributes attributes0 = textNode0.attributes();
    Element element0 = new Element(tag0, ""=$Z@-n+Hh:gn()"", attributes0);
    // Undeclared exception!
    try {
        element0.removeClass((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Remove a class name from this element's {@code class} attribute.
 *     @param className class name to remove
 *     @return this element
 */"
"public Element lastElementSibling() {
    List<Element> siblings = parent().children();
    return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;
}","public void test2727() throws Throwable {
    Document document0 = new Document(""v=]LaKF/X[ "");
    // Undeclared exception!
    try {
        document0.lastElementSibling();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}","/**
 * Gets the last element sibling of this element
 * @return the last sibling that is an element (aka the parent's last element child)
 */"
"public Elements getElementsMatchingText(Pattern pattern) {
    return Collector.collect(new Evaluator.Matches(pattern), this);
}","public void test2828() throws Throwable {
    Tag tag0 = Tag.valueOf(""s>"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""z@9R#W8%Q&dA}l\"""", attributes0);
    // Undeclared exception!
    try {
        element0.getElementsMatchingText((Pattern) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.select.Evaluator$Matches"", e);
    }
}","/**
 * Find elements whose text matches the supplied regular expression.
 * @param pattern regular expression to match text against
 * @return elements matching the supplied regular expression.
 * @see Element#text()
 */"
"public Elements getElementsMatchingOwnText(String regex) {
    Pattern pattern;
    try {
        pattern = Pattern.compile(regex);
    } catch (PatternSyntaxException e) {
        throw new IllegalArgumentException(""Pattern syntax error: "" + regex, e);
    }
    return getElementsMatchingOwnText(pattern);
}","public void test2929() throws Throwable {
    Document document0 = new Document(""textarea"");
    // Undeclared exception!
    try {
        document0.getElementsMatchingOwnText("")G.8:8S]U@1X4-0G-A!"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Pattern syntax error: )G.8:8S]U@1X4-0G-A!
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}","/**
 * Find elements whose text matches the supplied regular expression.
 * @param regex regular expression to match text against. You can use <a href=""http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded"">embedded flags</a> (such as (?i) and (?m) to control regex options.
 * @return elements matching the supplied regular expression.
 * @see Element#ownText()
 */"
"// DOM type methods
/**
 * Finds elements, including and recursively under this element, with the specified tag name.
 * @param tagName The tag name to search for (case insensitively).
 * @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.
 */
public Elements getElementsByTag(String tagName) {
    Validate.notEmpty(tagName);
    tagName = tagName.toLowerCase().trim();
    return Collector.collect(new Evaluator.Tag(tagName), this);
}","public void test3030() throws Throwable {
    Document document0 = new Document("">"");
    Node[] nodeArray0 = new Node[6];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    document0.addChildren(nodeArray0);
    // Undeclared exception!
    document0.getElementsByTag("">"");
}",""
"public Elements getElementsByClass(String className) {
    Validate.notEmpty(className);
    return Collector.collect(new Evaluator.Class(className), this);
}","public void test3131() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.getElementsByClass("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that have this class, including or under this element. Case insensitive.
 * <p>
 * Elements can have multiple classes (e.g. {@code <div class=""header round first"">}. This method
 * checks each class, so you can find the above with {@code el.getElementsByClass(""header"");}.
 *
 * @param className the name of the class to search for.
 * @return elements with the supplied class name, empty if none
 * @see #hasClass(String)
 * @see #classNames()
 */"
"public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) {
    return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this);
}","public void test3232() throws Throwable {
    Document document0 = new Document(""m~xW|,Noq@2)3W"");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueStarting("""", ""&p(LGM#\""#FgRE`M$"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that have attributes that start with the value prefix. Case insensitive.
 *
 * @param key name of the attribute
 * @param valuePrefix start of attribute value
 * @return elements that have attributes that start with the value prefix
 */"
"public Elements getElementsByAttributeValueNot(String key, String value) {
    return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this);
}","public void test3333() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueNot(""053/!aN"", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that either do not have this attribute, or have it with a different value. Case insensitive.
 *
 * @param key name of the attribute
 * @param value value of the attribute
 * @return elements that do not have a matching attribute
 */"
"public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) {
    return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this);
}","public void test3434() throws Throwable {
    Tag tag0 = Tag.valueOf(""kbd"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""*t%"", attributes0);
    Pattern pattern0 = Pattern.compile(""kbd"", (-3029));
    // Undeclared exception!
    try {
        element0.getElementsByAttributeValueMatching((String) null, pattern0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.select.Evaluator$AttributeWithValueMatching"", e);
    }
}","/**
 * Find elements that have attributes whose values match the supplied regular expression.
 * @param key name of the attribute
 * @param pattern compiled regular expression to match against attribute values
 * @return elements that have attributes matching this regular expression
 */"
"public Elements getElementsByAttributeValue(String key, String value) {
    return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);
}","public void test3535() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValue("""", "">JeW"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that have an attribute with the specific value. Case insensitive.
 *
 * @param key name of the attribute
 * @param value value of the attribute
 * @return elements that have this attribute with this value, empty if none
 */"
"public Elements getElementsByAttributeStarting(String keyPrefix) {
    Validate.notEmpty(keyPrefix);
    keyPrefix = keyPrefix.trim().toLowerCase();
    return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this);
}","public void test3636() throws Throwable {
    Document document0 = new Document(""0=^"");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeStarting("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Find elements that have an attribute name starting with the supplied prefix. Use {@code data-} to find elements
 * that have HTML5 datasets.
 * @param keyPrefix name prefix of the attribute e.g. {@code data-}
 * @return elements that have attribute names that start with with the prefix, empty if none.
 */"
"public Element firstElementSibling() {
    // todo: should firstSibling() exclude this?
    List<Element> siblings = parent().children();
    return siblings.size() > 1 ? siblings.get(0) : null;
}","public void test3737() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.firstElementSibling();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}","/**
 * Gets the first element sibling of this element.
 * @return the first sibling that is an element (aka the parent's first element child)
 */"
"public Element child(int index) {
    return children().get(index);
}","public void test3838() throws Throwable {
    Document document0 = new Document(""0:6qMH{Y|@0C@S3y"");
    // Undeclared exception!
    try {
        document0.child(2617);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 2617, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Get a child element of this element, by its 0-based index number.
 * <p/>
 * Note that an element can have both mixed Nodes and Elements as children. This method inspects
 * a filtered list of children that are elements, and the index is based on that filtered list.
 *
 * @param index the index number of the element to retrieve
 * @return the child element, if it exists, otherwise throws an {@code IndexOutOfBoundsException}
 * @see #childNode(int)
 */"
"public Element child(int index) {
    return children().get(index);
}","public void test3939() throws Throwable {
    Document document0 = new Document(""&56t6i`d/)tHS B"");
    // Undeclared exception!
    try {
        document0.child((-65));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 * Get a child element of this element, by its 0-based index number.
 * <p/>
 * Note that an element can have both mixed Nodes and Elements as children. This method inspects
 * a filtered list of children that are elements, and the index is based on that filtered list.
 *
 * @param index the index number of the element to retrieve
 * @return the child element, if it exists, otherwise throws an {@code IndexOutOfBoundsException}
 * @see #childNode(int)
 */"
"public Element appendChild(Node child) {
    Validate.notNull(child);
    addChildren(child);
    return this;
}","public void test4040() throws Throwable {
    Document document0 = new Document(""Bp!w#X_F="");
    // Undeclared exception!
    try {
        document0.appendChild((Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Add a node child node to this element.
 *
 * @param child node to add.
 * @return this element, so that you can add more child nodes or elements.
 */"
"@Override
public Element after(Node node) {
    return (Element) super.after(node);
}","public void test4141() throws Throwable {
    Tag tag0 = Tag.valueOf(""=$Z@-n+Hh:gn()"");
    TextNode textNode0 = new TextNode(""=$Z@-n+Hh:gn()"", ""head"");
    Attributes attributes0 = textNode0.attributes();
    Element element0 = new Element(tag0, ""=$Z@-n+Hh:gn()"", attributes0);
    Element element1 = (Element) element0.doClone(textNode0);
    // Undeclared exception!
    try {
        element1.after((Node) element0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.AbstractList"", e);
    }
}","/**
 * Insert the specified node into the DOM after this node (as a following sibling).
 * @param node to add after this element
 * @return this element, for chaining
 * @see #before(Node)
 */"
"public Element(Tag tag, String baseUri, Attributes attributes) {
    super(baseUri, attributes);
    Validate.notNull(tag);
    this.tag = tag;
}","public void test4242() throws Throwable {
    Attributes attributes0 = new Attributes();
    Element element0 = null;
    try {
        element0 = new Element((Tag) null, ""j1x-b2P,obrHA.QS"", attributes0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Create a new, standalone Element. (Standalone in that is has no parent.)
 *
 * @param tag tag of this element
 * @param baseUri the base URI
 * @param attributes initial attributes
 * @see #appendChild(Node)
 * @see #appendElement(String)
 */"
"public Element(Tag tag, String baseUri) {
    this(tag, baseUri, new Attributes());
}","public void test4343() throws Throwable {
    Element element0 = null;
    try {
        element0 = new Element((Tag) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Create a new Element from a tag and a base URI.
 *
 * @param tag element tag
 * @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty
 *            string, but not null.
 * @see Tag#valueOf(String)
 */"
"public boolean hasClass(String className) {
    Set<String> classNames = classNames();
    for (String name : classNames) {
        if (className.equalsIgnoreCase(name))
            return true;
    }
    return false;
}","public void test4444() throws Throwable {
    Document document0 = new Document("""");
    boolean boolean0 = document0.hasClass("""");
    assertTrue(boolean0);
}","/**
 * Tests if this element has a class. Case insensitive.
 * @param className name of class to check for
 * @return true if it does, false if not
 */"
"public boolean hasText() {
    for (Node child : childNodes) {
        if (child instanceof TextNode) {
            TextNode textNode = (TextNode) child;
            if (!textNode.isBlank())
                return true;
        } else if (child instanceof Element) {
            Element el = (Element) child;
            if (el.hasText())
                return true;
        }
    }
    return false;
}","public void test4646() throws Throwable {
    Document document0 = new Document(""m~xW|,Noq@2)3W"");
    boolean boolean0 = document0.hasText();
    assertFalse(boolean0);
}","/**
 *     Test if this element has any text content (that is not just whitespace).
 *     @return true if element has non-blank text content.
 */"
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test4747() throws Throwable {
    Document document0 = new Document("""");
    TextNode textNode0 = new TextNode(""\n * "", ""\n * "");
    document0.appendChild(textNode0);
    Elements elements0 = document0.getElementsMatchingText("""");
    assertFalse(elements0.isEmpty());
}",""
"public Element getElementById(String id) {
    Validate.notEmpty(id);
    Elements elements = Collector.collect(new Evaluator.Id(id), this);
    if (elements.size() > 0)
        return elements.get(0);
    else
        return null;
}","public void test4848() throws Throwable {
    Document document0 = new Document(""K"");
    Element element0 = document0.getElementById(""nT:"");
    assertNull(element0);
}","/**
 * Find an element by ID, including or under this element.
 * <p>
 * Note that this finds the first matching ID, starting with this element. If you search down from a different
 * starting point, it is possible to find a different element by ID. For unique element by ID within a Document,
 * use {@link Document#getElementById(String)}
 * @param id The ID to search for.
 * @return The first matching element by ID, starting with this element, or null if none found.
 */"
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test4949() throws Throwable {
    Document document0 = new Document("""");
    Elements elements0 = document0.children();
    assertTrue(elements0.isEmpty());
}",""
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test5050() throws Throwable {
    Document document0 = new Document(""m~xW|,Noq@2)3W"");
    Elements elements0 = document0.getElementsByAttributeStarting("" />"");
    assertTrue(elements0.isEmpty());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test5151() throws Throwable {
    Document document0 = new Document("""");
    Elements elements0 = document0.getElementsByTag(""s#V;3_PYcZ&lHlY)"");
    assertEquals(0, elements0.size());
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test5252() throws Throwable {
    Document document0 = new Document("""");
    Locale locale0 = Locale.KOREAN;
    Set<String> set0 = locale0.getUnicodeLocaleKeys();
    Element element0 = document0.classNames(set0);
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Element removeClass(String className) {
    Validate.notNull(className);
    Set<String> classes = classNames();
    classes.remove(className);
    classNames(classes);
    return this;
}","public void test5353() throws Throwable {
    Document document0 = new Document(""Bp!w#X_F="");
    Element element0 = document0.removeClass(""textarea"");
    assertSame(element0, document0);
}","/**
 *     Remove a class name from this element's {@code class} attribute.
 *     @param className class name to remove
 *     @return this element
 */"
"@Override
public final Element parent() {
    return (Element) parentNode;
}","public void test5454() throws Throwable {
    Tag tag0 = Tag.valueOf(""Pattern syntax error: "");
    TextNode textNode0 = new TextNode("""", """");
    Attributes attributes0 = textNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""Pattern syntax error: "", attributes0);
    Element element0 = formElement0.parent();
    assertNull(element0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test5555() throws Throwable {
    Tag tag0 = Tag.valueOf(""nyi>lm{u}e3,4v"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""7w(u`cg'Wq}wrBc&/ZT"", attributes0);
    Element element0 = formElement0.text(""#root"");
    assertEquals(""7w(u`cg'Wq}wrBc&/ZT"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test5656() throws Throwable {
    Tag tag0 = Tag.valueOf(""s>"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""s>"", attributes0);
    Elements elements0 = element0.getElementsByIndexEquals(0);
    assertFalse(elements0.isEmpty());
}",""
"public Element empty() {
    childNodes.clear();
    return this;
}","public void test5757() throws Throwable {
    Document document0 = new Document(""m~xW|,Noq@2)3W"");
    Element element0 = document0.empty();
    assertSame(element0, document0);
}","/**
 * Remove all of the element's child nodes. Any attributes are left as-is.
 * @return this element
 */"
"public String baseUri() {
    return baseUri;
}","public void test5858() throws Throwable {
    Document document0 = new Document("""");
    Element element0 = document0.prependChild(document0);
    assertEquals("""", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Elements getElementsByAttributeValueMatching(String key, String regex) {
    Pattern pattern;
    try {
        pattern = Pattern.compile(regex);
    } catch (PatternSyntaxException e) {
        throw new IllegalArgumentException(""Pattern syntax error: "" + regex, e);
    }
    return getElementsByAttributeValueMatching(key, pattern);
}","public void test6060() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.getElementsByAttributeValueMatching(""dkY_%~Z=&E?Gv\t"", "")T[9"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Pattern syntax error: )T[9
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}","/**
 * Find elements that have attributes whose values match the supplied regular expression.
 * @param key name of the attribute
 * @param regex regular expression to match against attribute values. You can use <a href=""http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded"">embedded flags</a> (such as (?i) and (?m) to control regex options.
 * @return elements that have attributes matching this regular expression
 */"
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test6161() throws Throwable {
    Document document0 = new Document("""");
    TextNode textNode0 = new TextNode(""\n * "", ""\n * "");
    document0.appendChild(textNode0);
    Elements elements0 = document0.children();
    assertTrue(elements0.isEmpty());
}",""
"@Override
public Element clone() {
    Element clone = (Element) super.clone();
    // derived on first hit, otherwise gets a pointer to source classnames
    clone.classNames = null;
    return clone;
}","public void test6262() throws Throwable {
    Tag tag0 = Tag.valueOf(""org.jsoup.nodes.Element$1"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""org.jsoup.nodes.Element$1"", attributes0);
    Element element0 = formElement0.clone();
    assertNotSame(element0, formElement0);
}",""
"public Element tagName(String tagName) {
    Validate.notEmpty(tagName, ""Tag name must not be empty."");
    tag = Tag.valueOf(tagName);
    return this;
}","public void test6363() throws Throwable {
    Document document0 = new Document(""Children collection to be inserted must not be null."");
    Element element0 = document0.appendText(""u#QCBq:G\""*zumUx/!^%"");
    Element element1 = element0.tagName(""Children collection to be inserted must not be null."");
    assertSame(element1, document0);
}","/**
 * Change the tag of this element. For example, convert a {@code <span>} to a {@code <div>} with
 * {@code el.tagName(""div"");}.
 *
 * @param tagName new tag name for this element
 * @return this element, for chaining
 */"
"public String text() {
    final StringBuilder accum = new StringBuilder();
    new NodeTraversor(new NodeVisitor() {

        public void head(Node node, int depth) {
            if (node instanceof TextNode) {
                TextNode textNode = (TextNode) node;
                appendNormalisedText(accum, textNode);
            } else if (node instanceof Element) {
                Element element = (Element) node;
                if (accum.length() > 0 && (element.isBlock() || element.tag.getName().equals(""br"")) && !TextNode.lastCharIsWhitespace(accum))
                    accum.append("" "");
            }
        }

        public void tail(Node node, int depth) {
        }
    }).traverse(this);
    return accum.toString().trim();
}","public void test6464() throws Throwable {
    Document document0 = new Document("""");
    String string0 = document0.text();
    assertEquals("""", string0);
}","/**
 * Gets the combined text of this element and all its children.
 * <p>
 * For example, given HTML {@code <p>Hello <b>there</b> now!</p>}, {@code p.text()} returns {@code ""Hello there now!""}
 *
 * @return unencoded text, or empty string if none.
 * @see #ownText()
 * @see #textNodes()
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test6565() throws Throwable {
    Document document0 = new Document(""K"");
    Elements elements0 = document0.getElementsByAttributeValueStarting(""W``Y6ACjEjd5R|eeb"", ""K"");
    assertEquals(0, elements0.size());
}",""
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test6666() throws Throwable {
    Document document0 = new Document(""nDL#%/L\""dsj!_"");
    Elements elements0 = document0.getElementsContainingText(""PFf<MRO']cW^P*drm"");
    assertTrue(elements0.isEmpty());
}",""
"@Override
public Element after(String html) {
    return (Element) super.after(html);
}","public void test6767() throws Throwable {
    Document document0 = new Document("" X&BodRu"");
    // Undeclared exception!
    try {
        document0.after((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified HTML into the DOM after this element (as a following sibling).
 *
 * @param html HTML to add after this element
 * @return this element, for chaining
 * @see #before(String)
 */"
"public String data() {
    StringBuilder sb = new StringBuilder();
    for (Node childNode : childNodes) {
        if (childNode instanceof DataNode) {
            DataNode data = (DataNode) childNode;
            sb.append(data.getWholeData());
        } else if (childNode instanceof Element) {
            Element element = (Element) childNode;
            String elementData = element.data();
            sb.append(elementData);
        }
    }
    return sb.toString();
}","public void test6868() throws Throwable {
    Document document0 = new Document("" X&BodRu"");
    document0.prependText("" X&BodRu"");
    String string0 = document0.data();
    assertEquals("""", string0);
}","/**
 * Get the combined data of this element. Data is e.g. the inside of a {@code script} tag.
 * @return the data, or empty string if none
 *
 * @see #dataNodes()
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test6969() throws Throwable {
    Document document0 = new Document("" X&BodRu"");
    document0.prependText("" X&BodRu"");
    Pattern pattern0 = Pattern.compile("" X&BodRu"", (-1557));
    Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
    assertEquals(0, elements0.size());
}",""
"static boolean preserveWhitespace(Node node) {
    // looks only at this element and one level up, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element element = (Element) node;
        return element.tag.preserveWhitespace() || element.parent() != null && element.parent().tag.preserveWhitespace();
    }
    return false;
}","public void test7070() throws Throwable {
    TextNode textNode0 = new TextNode(""RtRkv^"", ""RtRkv^"");
    boolean boolean0 = Element.preserveWhitespace(textNode0);
    assertFalse(boolean0);
}",""
"static boolean preserveWhitespace(Node node) {
    // looks only at this element and one level up, to prevent recursion & needless stack searches
    if (node != null && node instanceof Element) {
        Element element = (Element) node;
        return element.tag.preserveWhitespace() || element.parent() != null && element.parent().tag.preserveWhitespace();
    }
    return false;
}","public void test7171() throws Throwable {
    boolean boolean0 = Element.preserveWhitespace((Node) null);
    assertFalse(boolean0);
}",""
"public String toString() {
    return outerHtml();
}","public void test7272() throws Throwable {
    Document document0 = new Document("" X&BodRu"");
    String string0 = document0.toString();
    assertEquals("""", string0);
}",""
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test7373() throws Throwable {
    Tag tag0 = Tag.valueOf(""DjIqCR_4glAVw"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""I[`6"", attributes0);
    Elements elements0 = formElement0.getElementsByAttributeValueEnding(""<djiqcr_4glavw></djiqcr_4glavw>"", ""org.jsoup.nodes.Element$1"");
    assertTrue(elements0.isEmpty());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test7474() throws Throwable {
    Tag tag0 = Tag.valueOf(""DjIqCR_4glAVw"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""I[`6"", attributes0);
    Elements elements0 = formElement0.select(""DjIqCR_4glAVw"");
    assertEquals(1, elements0.size());
}",""
"public Element html(String html) {
    empty();
    append(html);
    return this;
}","public void test7575() throws Throwable {
    Document document0 = new Document(""&56t6i`d/)tHS B"");
    // Undeclared exception!
    try {
        document0.html(""&56t6i`d/)tHS B"");
        //  fail(""Expecting exception: NoSuchElementException"");
        // Unstable assertion
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 * Set this element's inner HTML. Clears the existing HTML first.
 * @param html HTML to parse and set into this element
 * @return this element
 * @see #append(String)
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test7676() throws Throwable {
    // Undeclared exception!
    try {
        Document.createShell("""");
        //  fail(""Expecting exception: NoSuchElementException"");
        // Unstable assertion
    } catch (NoSuchElementException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.LinkedList"", e);
    }
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
