focal_method,test_prefix,docstring
"@Override
public String nodeName() {
    return ""#document"";
}","public void test000() throws Throwable {
    Document document0 = new Document(""S2#%*>BG"");
    document0.appendText(""M[#[["");
    document0.appendText(""M[#[["");
    Document document1 = document0.normalise();
    assertEquals(""#document"", document1.nodeName());
}",""
"@Override
public String nodeName() {
    return tag.getName();
}","public void test0611() throws Throwable {
    Document document0 = new Document(""7;~eiyx`f"");
    document0.normalise();
    Element element0 = document0.text("""");
    assertEquals(""#document"", element0.nodeName());
}",""
"@Override
public String outerHtml() {
    // no outer wrapper tag
    return super.html();
}","public void test0918() throws Throwable {
    Document document0 = new Document("""");
    String string0 = document0.outerHtml();
    assertEquals("""", string0);
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1019() throws Throwable {
    Document document0 = new Document(""Kopf"");
    Document document1 = document0.normalise();
    document1.head();
    assertEquals(""#document"", document1.nodeName());
}",""
"@Override
public String nodeName() {
    return tag.getName();
}","public void test1120() throws Throwable {
    Document document0 = Document.createShell(""CFrcn=wm`]6U?7!oF~J"");
    Element element0 = document0.createElement(""head"");
    assertEquals(""head"", element0.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1221() throws Throwable {
    Document document0 = new Document(""Kopf"");
    Document document1 = document0.normalise();
    Element element0 = document1.body();
    assertEquals(""#document"", document1.nodeName());
}",""
"public Element body() {
    return findFirstElementByTagName(""body"", this);
}","public void test1222() throws Throwable {
    Document document0 = new Document(""Kopf"");
    Document document1 = document0.normalise();
    Element element0 = document1.body();
    assertNotNull(element0);
}","/**
 *     Accessor to the document's {@code body} element.
 *     @return {@code body}
 */"
"public void title(String title) {
    Validate.notNull(title);
    Element titleEl = getElementsByTag(""title"").first();
    if (titleEl == null) {
        // add to head
        head().appendElement(""title"").text(title);
    } else {
        titleEl.text(title);
    }
}","public void test1323() throws Throwable {
    Document document0 = Document.createShell(""pWRv[&yJyv!x"");
    Node[] nodeArray0 = new Node[3];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    document0.addChildren(nodeArray0);
    // Undeclared exception!
    document0.title(""#text"");
}","/**
 *     Set the document's {@code title} element. Updates the existing element, or adds {@code title} to {@code head} if
 *     not present
 *     @param title string to set as title
 */"
"public void title(String title) {
    Validate.notNull(title);
    Element titleEl = getElementsByTag(""title"").first();
    if (titleEl == null) {
        // add to head
        head().appendElement(""title"").text(title);
    } else {
        titleEl.text(title);
    }
}","public void test1424() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.title("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Document"", e);
    }
}","/**
 *     Set the document's {@code title} element. Updates the existing element, or adds {@code title} to {@code head} if
 *     not present
 *     @param title string to set as title
 */"
"public void title(String title) {
    Validate.notNull(title);
    Element titleEl = getElementsByTag(""title"").first();
    if (titleEl == null) {
        // add to head
        head().appendElement(""title"").text(title);
    } else {
        titleEl.text(title);
    }
}","public void test1525() throws Throwable {
    Document document0 = Document.createShell(""tBz6;U"");
    // Undeclared exception!
    try {
        document0.title((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Set the document's {@code title} element. Updates the existing element, or adds {@code title} to {@code head} if
 *     not present
 *     @param title string to set as title
 */"
"public String title() {
    Element titleEl = getElementsByTag(""title"").first();
    return titleEl != null ? titleEl.text().trim() : """";
}","public void test1626() throws Throwable {
    Document document0 = new Document(""radic"");
    document0.prependChild(document0);
    // Undeclared exception!
    document0.title();
}","/**
 *     Get the string contents of the document's {@code title} element.
 *     @return Trimed title, or empty string if none set.
 */"
"@Override
public Element text(String text) {
    // overridden to not nuke doc structure
    body().text(text);
    return this;
}","public void test1727() throws Throwable {
    Document document0 = new Document(""harr"");
    // Undeclared exception!
    try {
        document0.text(""harr"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Document"", e);
    }
}","/**
 *     Set the text of the {@code body} of this document. Any existing nodes within the body will be cleared.
 *     @param text unencoded text
 *     @return this document
 */"
"@Override
public String outerHtml() {
    // no outer wrapper tag
    return super.html();
}","public void test1828() throws Throwable {
    Document document0 = new Document(""#text"");
    Node[] nodeArray0 = new Node[3];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    document0.addChildren(nodeArray0);
    // Undeclared exception!
    document0.outerHtml();
}",""
"public Document normalise() {
    Element htmlEl = findFirstElementByTagName(""html"", this);
    if (htmlEl == null)
        htmlEl = appendElement(""html"");
    if (head() == null)
        htmlEl.prependElement(""head"");
    if (body() == null)
        htmlEl.appendElement(""body"");
    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care
    // of. do in inverse order to maintain text order.
    normaliseTextNodes(head());
    normaliseTextNodes(htmlEl);
    normaliseTextNodes(this);
    return this;
}","public void test1929() throws Throwable {
    Document document0 = new Document("""");
    document0.childNodes = null;
    // Undeclared exception!
    try {
        document0.normalise();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 *     Normalise the document. This happens after the parse phase so generally does not need to be called.
 *     Moves any text content that is not in the body element into the body.
 *     @return this document after normalisation
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test2030() throws Throwable {
    // Undeclared exception!
    try {
        Document.createShell((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public Element createElement(String tagName) {
    return new Element(Tag.valueOf(tagName), this.baseUri());
}","public void test2131() throws Throwable {
    Document document0 = Document.createShell(""html"");
    // Undeclared exception!
    try {
        document0.createElement("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Create a new Element, with this document's base uri. Does not make the new element a child of this document.
 *     @param tagName element tag name (e.g. {@code a})
 *     @return new element
 */"
"public Document(String baseUri) {
    super(Tag.valueOf(""#root""), baseUri);
}","public void test2232() throws Throwable {
    Document document0 = null;
    try {
        document0 = new Document((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Create a new, empty Document.
 *     @param baseUri base URI of document
 *     @see org.jsoup.Jsoup#parse
 *     @see #createShell
 */"
"public String tagName() {
    return tag.getName();
}","public void test2333() throws Throwable {
    Document document0 = new Document(""Kopf"");
    Element element0 = document0.createElement("",V^6EmI&E"");
    document0.prependChild(element0);
    assertEquals("",v^6emi&e"", element0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test2334() throws Throwable {
    Document document0 = new Document(""Kopf"");
    Element element0 = document0.createElement("",V^6EmI&E"");
    document0.prependChild(element0);
    Element element1 = document0.head();
    assertEquals(""#document"", document0.nodeName());
}",""
"public Element head() {
    return findFirstElementByTagName(""head"", this);
}","public void test2335() throws Throwable {
    Document document0 = new Document(""Kopf"");
    Element element0 = document0.createElement("",V^6EmI&E"");
    document0.prependChild(element0);
    Element element1 = document0.head();
    assertNull(element1);
}","/**
 *     Accessor to the document's {@code head} element.
 *     @return {@code head}
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test2436() throws Throwable {
    Document document0 = Document.createShell(""Eta"");
    document0.prependText(""ziL8N5Xye})SGoac"");
    Document document1 = document0.normalise();
    assertEquals(""#document"", document1.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test2537() throws Throwable {
    Document document0 = new Document(""Kopf"");
    Element element0 = document0.body();
    assertEquals(""#document"", document0.nodeName());
}",""
"public Element body() {
    return findFirstElementByTagName(""body"", this);
}","public void test2538() throws Throwable {
    Document document0 = new Document(""Kopf"");
    Element element0 = document0.body();
    assertNull(element0);
}","/**
 *     Accessor to the document's {@code body} element.
 *     @return {@code body}
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test2639() throws Throwable {
    Document document0 = new Document(""Kopf"");
    String string0 = document0.nodeName();
    assertEquals(""#document"", string0);
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test2942() throws Throwable {
    Document document0 = Document.createShell(""C"");
    document0.appendText((String) null);
    Document document1 = document0.normalise();
    assertEquals(""#document"", document1.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test3043() throws Throwable {
    Document document0 = Document.createShell(""pWRv[&yJyv!x"");
    document0.title(""pWRv[&yJyv!x"");
    document0.title(""pWRv[&yJyv!x"");
    assertEquals(""#document"", document0.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test3144() throws Throwable {
    Document document0 = Document.createShell(""pWRv[&yJyv!x"");
    document0.title(""pWRv[&yJyv!x"");
    document0.title();
    assertEquals(""#document"", document0.nodeName());
}",""
"public String title() {
    Element titleEl = getElementsByTag(""title"").first();
    return titleEl != null ? titleEl.text().trim() : """";
}","public void test3245() throws Throwable {
    Document document0 = Document.createShell(""8K{Eu?>*GR?7"");
    String string0 = document0.title();
    assertEquals("""", string0);
}","/**
 *     Get the string contents of the document's {@code title} element.
 *     @return Trimed title, or empty string if none set.
 */"
"@Override
public Element text(String text) {
    // overridden to not nuke doc structure
    body().text(text);
    return this;
}","public void test3346() throws Throwable {
    Document document0 = Document.createShell(""@qM3"");
    // Undeclared exception!
    try {
        document0.text((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Set the text of the {@code body} of this document. Any existing nodes within the body will be cleared.
 *     @param text unencoded text
 *     @return this document
 */"
"@Override
public String outerHtml() {
    // no outer wrapper tag
    return super.html();
}","public void test3549() throws Throwable {
    Document document0 = Document.createShell(""l;694tx2:4Q3.eB"");
    Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
    document_OutputSettings0.escapeMode((Entities.EscapeMode) null);
    document0.title("":68pG[y9?Q{4;Q/PR^"");
    // Undeclared exception!
    try {
        document0.outerHtml();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Entities"", e);
    }
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test3752() throws Throwable {
    Document document0 = Document.createShell(""l;694tx2:4Q3.eB"");
    document0.title(""l;694tx2:4Q3.eB"");
    String string0 = document0.outerHtml();
    assertEquals(""#document"", document0.nodeName());
}",""
"@Override
public String outerHtml() {
    // no outer wrapper tag
    return super.html();
}","public void test3753() throws Throwable {
    Document document0 = Document.createShell(""l;694tx2:4Q3.eB"");
    document0.title(""l;694tx2:4Q3.eB"");
    String string0 = document0.outerHtml();
    assertEquals(""<html>\n <head>\n  <title>l;694tx2:4Q3.eB</title>\n </head>\n <body></body>\n</html>"", string0);
}",""
