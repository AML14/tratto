focal_method,test_prefix,docstring
"public int pos() {
    return readerPos + bufPos;
}","public void test000() throws Throwable {
    StringReader stringReader0 = new StringReader(""E]lMjv&;Vd1hxBZ"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test011() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    characterReader0.mark();
    characterReader0.rewindToMark();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test022() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3Uoso]x\""=X$.Kc;-"");
    characterReader0.advance();
    characterReader0.consumeLetterSequence();
    characterReader0.consumeData();
    assertEquals(16, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test033() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("";"");
    String string0 = characterReader0.toString();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"@Override
public String toString() {
    return new String(charBuf, bufPos, bufLength - bufPos);
}","public void test034() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("";"");
    String string0 = characterReader0.toString();
    assertEquals("";"", string0);
}","/**
 *  Heuristic to determine if the current buffer looks like binary content. Reader will already hopefully be
 *  decoded correctly, so a bunch of NULLs indicates a binary file
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test045() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Arra- must not cFntain an null obects"");
    characterReader0.consumeTo(""iiC\""t'(y5Kc5%>>"");
    assertEquals(37, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"// just used for testing
boolean rangeEquals(final int start, final int count, final String cached) {
    return rangeEquals(charBuf, start, count, cached);
}","public void test056() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Must be tue"");
    boolean boolean0 = characterReader0.rangeEquals('l', 'l', ""Must"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test057() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Must be tue"");
    boolean boolean0 = characterReader0.rangeEquals('l', 'l', ""Must"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test068() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Must be false"");
    int int0 = characterReader0.pos();
    assertEquals(0, int0);
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test079() throws Throwable {
    StringReader stringReader0 = new StringReader(""A7C-\""[uNJPMArCA`@I"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"String consumeData() {
    // &, <, null
    //bufferUp(); // no need to bufferUp, just called consume()
    int pos = bufPos;
    final int start = pos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    OUTER: while (pos < remaining) {
        switch(val[pos]) {
            case '&':
            case '<':
            case TokeniserState.nullChar:
                break OUTER;
            default:
                pos++;
        }
    }
    bufPos = pos;
    return pos > start ? cacheString(charBuf, stringCache, start, pos - start) : """";
}","public void test0810() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">"");
    String string0 = characterReader0.consumeData();
    assertEquals("">"", string0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test0811() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">"");
    String string0 = characterReader0.consumeData();
    boolean boolean0 = characterReader0.matchConsume("">"");
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchConsume(String seq) {
    bufferUp();
    if (matches(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test0812() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">"");
    String string0 = characterReader0.consumeData();
    boolean boolean0 = characterReader0.matchConsume("">"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test0913() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Arra- must not cFntain an null obects"");
    char[] charArray0 = new char[4];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test0914() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Arra- must not cFntain an null obects"");
    char[] charArray0 = new char[4];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertFalse(boolean0);
}",""
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test1015() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char[] charArray0 = new char[0];
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test1016() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char[] charArray0 = new char[0];
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test1117() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""k3F+++ /w,"");
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(2, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test1218() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""o"");
    String string0 = characterReader0.consumeLetterThenDigitSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"String consumeLetterThenDigitSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))
            bufPos++;
        else
            break;
    }
    while (!isEmptyNoBufferUp()) {
        char c = charBuf[bufPos];
        if (c >= '0' && c <= '9')
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test1219() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""o"");
    String string0 = characterReader0.consumeLetterThenDigitSequence();
    assertEquals(""o"", string0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test1320() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""OWV<_idrq"");
    char char0 = characterReader0.current();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public char current() {
    bufferUp();
    return isEmptyNoBufferUp() ? EOF : charBuf[bufPos];
}","public void test1321() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""OWV<_idrq"");
    char char0 = characterReader0.current();
    assertEquals('O', char0);
}","/**
 * Get the char at the current position.
 * @return char
 */"
"public char current() {
    bufferUp();
    return isEmptyNoBufferUp() ? EOF : charBuf[bufPos];
}","public void test1422() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char char0 = characterReader0.current();
    assertEquals('\uFFFF', char0);
}","/**
 * Get the char at the current position.
 * @return char
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test1423() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char char0 = characterReader0.current();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test1524() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""OWV<_idrq"");
    char char0 = characterReader0.consume();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"char consume() {
    bufferUp();
    char val = isEmptyNoBufferUp() ? EOF : charBuf[bufPos];
    bufPos++;
    return val;
}","public void test1525() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""OWV<_idrq"");
    char char0 = characterReader0.consume();
    assertEquals('O', char0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test1626() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char char0 = characterReader0.consume();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"char consume() {
    bufferUp();
    char val = isEmptyNoBufferUp() ? EOF : charBuf[bufPos];
    bufPos++;
    return val;
}","public void test1627() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char char0 = characterReader0.consume();
    assertEquals('\uFFFF', char0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test1728() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("";"");
    characterReader0.consumeData();
    characterReader0.unconsume();
    characterReader0.consumeTagName();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"void unconsume() {
    if (bufPos < 1)
        throw new UncheckedIOException(new IOException(""No buffer left to unconsume""));
    bufPos--;
}","public void test1829() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    // Undeclared exception!
    try {
        characterReader0.unconsume();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // org.evosuite.runtime.mock.java.lang.MockThrowable: No buffer left to unconsume
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"void rewindToMark() {
    if (bufMark == -1)
        throw new UncheckedIOException(new IOException(""Mark invalid""));
    bufPos = bufMark;
}","public void test1930() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    // Undeclared exception!
    try {
        characterReader0.rewindToMark();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test2031() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""[ray musT not contai any nhll 1bjects"");
    characterReader0.consumeTo('H');
    assertEquals(37, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test2132() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Arra- 8ust not cFnta n any null objects"");
    characterReader0.consumeTo('n');
    assertEquals(11, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test2233() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Arra- must not cFntain an null obects"");
    characterReader0.consumeTo(""Arra- must not cFntain an null obects"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test2334() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""No buffer left to unconsume"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""No buffer left to unconsume"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test2335() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""No buffer left to unconsume"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""No buffer left to unconsume"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test2436() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char[] charArray0 = new char[15];
    characterReader0.consumeToAny(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test2537() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""[ray musT not conti any nhll 1bjects"");
    char[] charArray0 = new char[1];
    characterReader0.consumeToAny(charArray0);
    assertEquals(36, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test2638() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""[ray musT not conti any nhll 1bjects"");
    char[] charArray0 = new char[1];
    charArray0[0] = 's';
    characterReader0.consumeToAny(charArray0);
    assertEquals(7, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test2739() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char[] charArray0 = new char[0];
    characterReader0.consumeToAnySorted(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test2840() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any nullIobjects"");
    char[] charArray0 = new char[1];
    characterReader0.consumeToAnySorted(charArray0);
    assertEquals(39, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test2941() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any nullIobjects"");
    char[] charArray0 = new char[1];
    charArray0[0] = 'I';
    characterReader0.consumeToAnySorted(charArray0);
    assertEquals(31, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test3042() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""=O8|?&H1$i\"""");
    characterReader0.consumeData();
    assertEquals(5, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test3143() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""OWV<_Bdrq"");
    characterReader0.consumeData();
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test3244() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.consumeData();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test3345() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("";"");
    characterReader0.consumeTagName();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test3446() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Must be tue"");
    characterReader0.consumeTagName();
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test3547() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""MNYC/"");
    characterReader0.consumeTagName();
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test3648() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""IV,^z<F:.3  %L+["");
    characterReader0.consumeTagName();
    assertEquals(5, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"String consumeTagName() {
    // '\t', '\n', '\r', '\f', ' ', '/', '>', nullChar
    // NOTE: out of spec, added '<' to fix common author bugs
    bufferUp();
    int pos = bufPos;
    final int start = pos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    OUTER: while (pos < remaining) {
        switch(val[pos]) {
            case '\t':
            case '\n':
            case '\r':
            case '\f':
            case ' ':
            case '/':
            case '>':
            case '<':
            case TokeniserState.nullChar:
                break OUTER;
        }
        pos++;
    }
    bufPos = pos;
    return pos > start ? cacheString(charBuf, stringCache, start, pos - start) : """";
}","public void test3749() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">[d%*WLjy]$Ie"");
    String string0 = characterReader0.consumeTagName();
    assertEquals("""", string0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test3750() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">[d%*WLjy]$Ie"");
    String string0 = characterReader0.consumeTagName();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test3851() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""PCSR"");
    characterReader0.consumeLetterSequence();
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test3952() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3Uoso]x\""=X$.Kc;-"");
    String string0 = characterReader0.consumeLetterSequence();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"String consumeLetterSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test3953() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3Uoso]x\""=X$.Kc;-"");
    String string0 = characterReader0.consumeLetterSequence();
    assertEquals("""", string0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test4054() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""YBdvDQ;RT`CTBSDo "");
    characterReader0.consumeLetterSequence();
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test4155() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(5, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test4256() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""|7_r~J}-\""|d&z"");
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test4357() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""2"");
    characterReader0.consumeHexSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"String consumeHexSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test4458() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""-WV<`idrb"");
    String string0 = characterReader0.consumeHexSequence();
    assertEquals("""", string0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test4459() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""-WV<`idrb"");
    String string0 = characterReader0.consumeHexSequence();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test4560() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""eark invalij"");
    characterReader0.consumeHexSequence();
    assertEquals(2, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test4661() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    String string0 = characterReader0.consumeHexSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"String consumeHexSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test4662() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    String string0 = characterReader0.consumeHexSequence();
    assertEquals(""A"", string0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test4763() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.consumeDigitSequence();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"String consumeDigitSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if (c >= '0' && c <= '9')
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test4864() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3:K&nL"");
    String string0 = characterReader0.consumeDigitSequence();
    assertEquals(""3"", string0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test4865() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3:K&nL"");
    String string0 = characterReader0.consumeDigitSequence();
    boolean boolean0 = characterReader0.matches(""3"");
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matches(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) if (seq.charAt(offset) != charBuf[bufPos + offset])
        return false;
    return true;
}","public void test4866() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""3:K&nL"");
    String string0 = characterReader0.consumeDigitSequence();
    boolean boolean0 = characterReader0.matches(""3"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test4967() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("" K&fv#P7?|H\""^"");
    characterReader0.consumeDigitSequence();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test5068() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    boolean boolean0 = characterReader0.matches('?');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matches(char c) {
    return !isEmpty() && charBuf[bufPos] == c;
}","public void test5069() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    boolean boolean0 = characterReader0.matches('?');
    assertFalse(boolean0);
}",""
"boolean matches(char c) {
    return !isEmpty() && charBuf[bufPos] == c;
}","public void test5170() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    boolean boolean0 = characterReader0.matches('Q');
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test5171() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    boolean boolean0 = characterReader0.matches('Q');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matches(char c) {
    return !isEmpty() && charBuf[bufPos] == c;
}","public void test5272() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    boolean boolean0 = characterReader0.matches('A');
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test5273() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    boolean boolean0 = characterReader0.matches('A');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test5374() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">vq>"");
    characterReader0.matchConsume("">vq>"");
    boolean boolean0 = characterReader0.matchesIgnoreCase("">vq>"");
    assertEquals(4, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test5375() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">vq>"");
    characterReader0.matchConsume("">vq>"");
    boolean boolean0 = characterReader0.matchesIgnoreCase("">vq>"");
    assertFalse(boolean0);
}",""
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test5476() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""OWV<_idrq"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""h."");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test5477() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""OWV<_idrq"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""h."");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test5578() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""eark invalij"");
    char[] charArray0 = new char[1];
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test5579() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""eark invalij"");
    char[] charArray0 = new char[1];
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test5680() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""OWV<_idrq"");
    char[] charArray0 = new char[3];
    charArray0[1] = 'O';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test5681() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""OWV<_idrq"");
    char[] charArray0 = new char[3];
    charArray0[1] = 'O';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test5782() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char[] charArray0 = new char[0];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test5783() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char[] charArray0 = new char[0];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertFalse(boolean0);
}",""
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test5884() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Arra- must not cFntain an null obects"");
    char[] charArray0 = new char[4];
    charArray0[3] = 'A';
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test5885() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Arra- must not cFntain an null obects"");
    char[] charArray0 = new char[4];
    charArray0[3] = 'A';
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test5986() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""|,}rN"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test5987() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""|,}rN"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test6088() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test6089() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test6190() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""?'z&\"">i?`1_>CEY9'"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test6191() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""?'z&\"">i?`1_>CEY9'"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test6292() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""No buffer left to unconsume"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test6293() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""No buffer left to unconsume"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test6394() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test6395() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test6496() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""7L_*^TS8EJo"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test6497() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""7L_*^TS8EJo"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test6598() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.matchesDigit();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test6699() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""$"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test66100() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""$"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test67101() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("";"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test67102() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("";"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test68103() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""NoHbuffer left to unconsume"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""NoHbuffer left to unconsume"");
    assertEquals(27, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test68104() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""NoHbuffer left to unconsume"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""NoHbuffer left to unconsume"");
    assertTrue(boolean0);
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test69105() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("";"");
    boolean boolean0 = characterReader0.containsIgnoreCase("";"");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test69106() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("";"");
    boolean boolean0 = characterReader0.containsIgnoreCase("";"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test70107() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Y"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""Y"");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test70108() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Y"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""Y"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) {
    if (count == cached.length()) {
        int i = start;
        int j = 0;
        while (count-- != 0) {
            if (charBuf[i++] != cached.charAt(j++))
                return false;
        }
        return true;
    }
    return false;
}","public void test71109() throws Throwable {
    char[] charArray0 = new char[8];
    boolean boolean0 = CharacterReader.rangeEquals(charArray0, 1, 1, "";"");
    assertFalse(boolean0);
}","/**
 * Check if the value of the provided range equals the string.
 */"
