focal_method,test_prefix,docstring
"public int pos() {
    return readerPos + bufPos;
}","public void test0000() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""u|8xLmcA/..7s@*Hi"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""u|8xLmcA/..7s@*Hi"");
    assertEquals(17, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test0001() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""u|8xLmcA/..7s@*Hi"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""u|8xLmcA/..7s@*Hi"");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test0012() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""0guUBH@OQn:pqz<W"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test0013() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""0guUBH@OQn:pqz<W"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test0024() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""zk}H90IvnC[KZ"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test0025() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""zk}H90IvnC[KZ"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test0036() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.helper.Validate"");
    stringReader0.skip(22L);
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test0037() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.helper.Validate"");
    stringReader0.skip(22L);
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test0048() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""ZZ\""LE /\""k"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test0049() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""ZZ\""LE /\""k"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test00510() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test00511() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test00612() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""or.jsoup.CncheckedIException"");
    char[] charArray0 = new char[5];
    charArray0[0] = 'o';
    charArray0[2] = '}';
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test00613() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""or.jsoup.CncheckedIException"");
    char[] charArray0 = new char[5];
    charArray0[0] = 'o';
    charArray0[2] = '}';
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertTrue(boolean0);
}",""
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test00714() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""%R"");
    char[] charArray0 = new char[6];
    charArray0[0] = 'g';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test00715() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""%R"");
    char[] charArray0 = new char[6];
    charArray0[0] = 'g';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test00716() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""%R"");
    char[] charArray0 = new char[6];
    charArray0[0] = 'g';
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test00817() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.matchesIgnoreCase(""(aM/u TMZo"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test00818() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.matchesIgnoreCase(""(aM/u TMZo"");
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test00819() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.matchesIgnoreCase(""(aM/u TMZo"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test00920() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("".<iOZ :U6l^}(QHCF"");
    boolean boolean0 = characterReader0.matchConsume(""-rZ@n"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchConsume(String seq) {
    bufferUp();
    if (matches(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test00921() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("".<iOZ :U6l^}(QHCF"");
    boolean boolean0 = characterReader0.matchConsume(""-rZ@n"");
    assertFalse(boolean0);
}",""
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test00922() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("".<iOZ :U6l^}(QHCF"");
    boolean boolean0 = characterReader0.matchConsume(""-rZ@n"");
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"boolean matches(char c) {
    return !isEmpty() && charBuf[bufPos] == c;
}","public void test01023() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""9G\""BS"");
    boolean boolean0 = characterReader0.matches('E');
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test01024() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""9G\""BS"");
    boolean boolean0 = characterReader0.matches('E');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test01025() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""9G\""BS"");
    boolean boolean0 = characterReader0.matches('E');
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01126() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.helper.Validate"");
    stringReader0.skip(22L);
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeHexSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01227() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    characterReader0.consumeHexSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01328() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""0guUBH@OQn:pqz<W"");
    characterReader0.consumeHexSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01429() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""9G\""BS"");
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01530() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""xdJzWtGk`uZI#+%m>'i"");
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(8, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01631() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Array must not contain any null objects"");
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(5, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01732() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4Z]w"");
    characterReader0.consumeDigitSequence();
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(2, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01833() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test01934() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.helper.Validate"");
    stringReader0.skip(22L);
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeLetterSequence();
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02035() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""zboZvf?Qd*"");
    characterReader0.consumeLetterSequence();
    assertEquals(6, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02136() throws Throwable {
    StringReader stringReader0 = new StringReader(""AEVYp,;<KPr*I"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 2888);
    characterReader0.consumeLetterSequence();
    assertEquals(5, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02237() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.consumeLetterSequence();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test02338() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""ZhL,Zv"");
    characterReader0.consumeTagName();
    characterReader0.consumeTagName();
    assertTrue(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02439() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""/'-[TRfq&Hg?om"");
    char[] charArray0 = new char[7];
    characterReader0.consumeData();
    characterReader0.consumeToAnySorted(charArray0);
    assertEquals(14, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02540() throws Throwable {
    StringReader stringReader0 = new StringReader(""(le[JyF'8FT#C;Sb"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    char[] charArray0 = new char[7];
    charArray0[3] = 'b';
    characterReader0.consumeToAnySorted(charArray0);
    assertEquals(16, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02641() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#[FUgfDGNgzrp"");
    characterReader0.matchConsume(""#[FUgfDGNgzrp"");
    characterReader0.consumeToAnySorted((char[]) null);
    assertEquals(13, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02742() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""/'-[TRfq&Hg?om"");
    char[] charArray0 = new char[7];
    characterReader0.consumeData();
    characterReader0.consumeToAny(charArray0);
    assertEquals(14, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02843() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""%R"");
    char[] charArray0 = new char[6];
    characterReader0.consumeToAnySorted(charArray0);
    characterReader0.consumeToAny(charArray0);
    assertEquals(2, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test02944() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.consumeLetterThenDigitSequence();
    characterReader0.consumeTo('o');
    assertEquals(6, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test03045() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""oj2EwKGqyV=<t$Q4~g"");
    characterReader0.consumeLetterThenDigitSequence();
    characterReader0.consumeData();
    characterReader0.consumeTagName();
    assertTrue(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"@Override
public String toString() {
    return new String(charBuf, bufPos, bufLength - bufPos);
}","public void test03146() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""/'-[TRfq&Hg?om"");
    String string0 = characterReader0.toString();
    assertEquals(""/'-[TRfq&Hg?om"", string0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test03147() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""/'-[TRfq&Hg?om"");
    String string0 = characterReader0.toString();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test03248() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.toString();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) {
    if (count == cached.length()) {
        int i = start;
        int j = 0;
        while (count-- != 0) {
            if (charBuf[i++] != cached.charAt(j++))
                return false;
        }
        return true;
    }
    return false;
}","public void test03349() throws Throwable {
    char[] charArray0 = new char[6];
    boolean boolean0 = CharacterReader.rangeEquals(charArray0, 0, 0, """");
    assertTrue(boolean0);
}","/**
 * Check if the value of the provided range equals the string.
 */"
"static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) {
    if (count == cached.length()) {
        int i = start;
        int j = 0;
        while (count-- != 0) {
            if (charBuf[i++] != cached.charAt(j++))
                return false;
        }
        return true;
    }
    return false;
}","public void test03450() throws Throwable {
    char[] charArray0 = new char[2];
    boolean boolean0 = CharacterReader.rangeEquals(charArray0, (-1), (-1339), ""N|%O"");
    assertFalse(boolean0);
}","/**
 * Check if the value of the provided range equals the string.
 */"
"// just used for testing
boolean rangeEquals(final int start, final int count, final String cached) {
    return rangeEquals(charBuf, start, count, cached);
}","public void test03551() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1871);
    boolean boolean0 = characterReader0.rangeEquals(948, 0, """");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test03552() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1871);
    boolean boolean0 = characterReader0.rangeEquals(948, 0, """");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test03653() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#[FUgfDGNgzrp"");
    characterReader0.matchConsume(""#[FUgfDGNgzrp"");
    int int0 = characterReader0.pos();
    assertEquals(13, int0);
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test03754() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    characterReader0.unconsume();
    int int0 = characterReader0.pos();
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test03755() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    characterReader0.unconsume();
    int int0 = characterReader0.pos();
    assertEquals((-1), int0);
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test03856() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.consumeLetterThenDigitSequence();
    int int0 = characterReader0.nextIndexOf(""o"");
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test03857() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.consumeLetterThenDigitSequence();
    int int0 = characterReader0.nextIndexOf(""o"");
    assertEquals(3, int0);
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test03958() throws Throwable {
    StringReader stringReader0 = new StringReader(""j|c"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    int int0 = characterReader0.nextIndexOf('j');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"int nextIndexOf(char c) {
    // doesn't handle scanning for surrogates
    bufferUp();
    for (int i = bufPos; i < bufLength; i++) {
        if (c == charBuf[i])
            return i - bufPos;
    }
    return -1;
}","public void test03959() throws Throwable {
    StringReader stringReader0 = new StringReader(""j|c"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    int int0 = characterReader0.nextIndexOf('j');
    assertEquals(0, int0);
}","/**
 * Returns the number of characters between the current position and the next instance of the input char
 * @param c scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04060() throws Throwable {
    StringReader stringReader0 = new StringReader(""7#K7}"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 721);
    int int0 = characterReader0.nextIndexOf('}');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"int nextIndexOf(char c) {
    // doesn't handle scanning for surrogates
    bufferUp();
    for (int i = bufPos; i < bufLength; i++) {
        if (c == charBuf[i])
            return i - bufPos;
    }
    return -1;
}","public void test04061() throws Throwable {
    StringReader stringReader0 = new StringReader(""7#K7}"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 721);
    int int0 = characterReader0.nextIndexOf('}');
    assertEquals(4, int0);
}","/**
 * Returns the number of characters between the current position and the next instance of the input char
 * @param c scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test04162() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""9G\""BS"");
    int int0 = characterReader0.nextIndexOf('E');
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04163() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""9G\""BS"");
    int int0 = characterReader0.nextIndexOf('E');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"int nextIndexOf(char c) {
    // doesn't handle scanning for surrogates
    bufferUp();
    for (int i = bufPos; i < bufLength; i++) {
        if (c == charBuf[i])
            return i - bufPos;
    }
    return -1;
}","public void test04164() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""9G\""BS"");
    int int0 = characterReader0.nextIndexOf('E');
    assertEquals((-1), int0);
}","/**
 * Returns the number of characters between the current position and the next instance of the input char
 * @param c scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04265() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.consumeLetterThenDigitSequence();
    boolean boolean0 = characterReader0.matchesIgnoreCase(""org.jsoup.UncheckedIOException"");
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test04266() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.consumeLetterThenDigitSequence();
    boolean boolean0 = characterReader0.matchesIgnoreCase(""org.jsoup.UncheckedIOException"");
    assertFalse(boolean0);
}",""
"boolean matches(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) if (seq.charAt(offset) != charBuf[bufPos + offset])
        return false;
    return true;
}","public void test04367() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4?H="");
    boolean boolean0 = characterReader0.matches("""");
    assertTrue(boolean0);
}",""
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test04368() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4?H="");
    boolean boolean0 = characterReader0.matches("""");
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04369() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4?H="");
    boolean boolean0 = characterReader0.matches("""");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public char current() {
    bufferUp();
    return isEmpty() ? EOF : charBuf[bufPos];
}","public void test04470() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""0guUBH@OQn:pqz<W"");
    char char0 = characterReader0.current();
    assertEquals('0', char0);
}","/**
 * Get the char at the current position.
 * @return char
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04471() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""0guUBH@OQn:pqz<W"");
    char char0 = characterReader0.current();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04572() throws Throwable {
    StringReader stringReader0 = new StringReader(""':`S"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    characterReader0.consumeToEnd();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04673() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""0n7DcTnO[,TpC4xt^D"");
    characterReader0.consumeDigitSequence();
    characterReader0.consumeTo(""0n7DcTnO[,TpC4xt^D"");
    assertEquals(18, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test04774() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""1px92dmcWRg4"");
    characterReader0.consume();
    characterReader0.consumeLetterSequence();
    characterReader0.consumeDigitSequence();
    assertEquals(5, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) {
    if (count == cached.length()) {
        int i = start;
        int j = 0;
        while (count-- != 0) {
            if (charBuf[i++] != cached.charAt(j++))
                return false;
        }
        return true;
    }
    return false;
}","public void test04875() throws Throwable {
    // Undeclared exception!
    try {
        CharacterReader.rangeEquals((char[]) null, 526, 526, (String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Check if the value of the provided range equals the string.
 */"
"// just used for testing
boolean rangeEquals(final int start, final int count, final String cached) {
    return rangeEquals(charBuf, start, count, cached);
}","public void test04976() throws Throwable {
    StringReader stringReader0 = new StringReader(""TX#<O h,1N*W_y"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
    // Undeclared exception!
    try {
        characterReader0.rangeEquals(84, 1, ""X"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 84
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test05077() throws Throwable {
    StringReader stringReader0 = new StringReader(""B'"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 2594);
    stringReader0.close();
    char[] charArray0 = new char[1];
    characterReader0.consumeToAny(charArray0);
    // Undeclared exception!
    try {
        characterReader0.nextIndexOf(""B"");
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test05178() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""#[FUgfDGNgzrp"");
    // Undeclared exception!
    try {
        characterReader0.nextIndexOf("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test05279() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""oj2EwKGqyV=<t$Q4~g"");
    // Undeclared exception!
    try {
        characterReader0.nextIndexOf((CharSequence) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test05380() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char[] charArray0 = new char[0];
    CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
    // Undeclared exception!
    try {
        characterReader0.nextIndexOf(charBuffer0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.Buffer"", e);
    }
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test05481() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""W2!O&f~2z$Sed*"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.nextIndexOf(""W2!O&f~2z$Sed*"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"int nextIndexOf(char c) {
    // doesn't handle scanning for surrogates
    bufferUp();
    for (int i = bufPos; i < bufLength; i++) {
        if (c == charBuf[i])
            return i - bufPos;
    }
    return -1;
}","public void test05582() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Must be false"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.nextIndexOf('r');
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Returns the number of characters between the current position and the next instance of the input char
 * @param c scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test05683() throws Throwable {
    StringReader stringReader0 = new StringReader(""':`S"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesLetter();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test05784() throws Throwable {
    StringReader stringReader0 = new StringReader(""d9f>J1"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1919);
    stringReader0.close();
    characterReader0.consumeTo('v');
    // Undeclared exception!
    try {
        characterReader0.matchesIgnoreCase(""d9f>J1"");
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test05885() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.matchesIgnoreCase((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test05986() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4C$rsL!{B,pZZ,DVZ"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesIgnoreCase(""4C$rsL!{B,pZZ,DVZ"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test06087() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesDigit();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test06188() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    stringReader0.close();
    char[] charArray0 = new char[0];
    // Undeclared exception!
    try {
        characterReader0.matchesAnySorted(charArray0);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test06289() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""EEI{Li8z2/"");
    // Undeclared exception!
    try {
        characterReader0.matchesAnySorted((char[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Arrays"", e);
    }
}",""
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test06390() throws Throwable {
    StringReader stringReader0 = new StringReader(""TU<]{!@.9<s7G"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    char[] charArray0 = new char[6];
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchesAnySorted(charArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test06491() throws Throwable {
    StringReader stringReader0 = new StringReader(""\u0006l|"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    // Undeclared exception!
    try {
        characterReader0.matchesAny((char[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test06592() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Q)7R[zpmrKd"");
    characterReader0.unconsume();
    char[] charArray0 = new char[9];
    // Undeclared exception!
    try {
        characterReader0.matchesAny(charArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matches(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) if (seq.charAt(offset) != charBuf[bufPos + offset])
        return false;
    return true;
}","public void test06693() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.matches((String) null);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matches(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) if (seq.charAt(offset) != charBuf[bufPos + offset])
        return false;
    return true;
}","public void test06794() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    // Undeclared exception!
    try {
        characterReader0.matches((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matches(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) if (seq.charAt(offset) != charBuf[bufPos + offset])
        return false;
    return true;
}","public void test06895() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""|J51u:vOJE=1E"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matches(""|J51u:vOJE=1E"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test06996() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.matchConsumeIgnoreCase("""");
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test07097() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""L'QjF|&"");
    // Undeclared exception!
    try {
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test07198() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""u|8xLmcA/..7s@*Hi"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.matchConsumeIgnoreCase(""u|8xLmcA/..7s@*Hi"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean matchConsume(String seq) {
    bufferUp();
    if (matches(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test07299() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    // Undeclared exception!
    try {
        characterReader0.matchConsume((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public char current() {
    bufferUp();
    return isEmpty() ? EOF : charBuf[bufPos];
}","public void test073100() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.UncheckedIOException"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.current();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Get the char at the current position.
 * @return char
 */"
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test074101() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 60);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.containsIgnoreCase("""");
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test075102() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.containsIgnoreCase("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test076103() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.containsIgnoreCase((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test077104() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.containsIgnoreCase(""org.jsoup.parser.CharacterReader"");
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeToEnd() {
    bufferUp();
    String data = cacheString(charBuf, stringCache, bufPos, bufLength - bufPos);
    bufPos = bufLength;
    return data;
}","public void test078105() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.parser.CharacterReader"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    characterReader0.consumeToEnd();
    // Undeclared exception!
    try {
        characterReader0.consumeToEnd();
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeToEnd() {
    bufferUp();
    String data = cacheString(charBuf, stringCache, bufPos, bufLength - bufPos);
    bufPos = bufLength;
    return data;
}","public void test079106() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeToEnd();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeToAnySorted(final char... chars) {
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        if (Arrays.binarySearch(chars, val[bufPos]) >= 0)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test080107() throws Throwable {
    StringReader stringReader0 = new StringReader(""`jpjW_44BxReR"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    char[] charArray0 = new char[2];
    stringReader0.close();
    characterReader0.consumeToAnySorted(charArray0);
    // Undeclared exception!
    try {
        characterReader0.consumeToAnySorted(charArray0);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeToAnySorted(final char... chars) {
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        if (Arrays.binarySearch(chars, val[bufPos]) >= 0)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test081108() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""F~+?x1bgjG2'0"");
    // Undeclared exception!
    try {
        characterReader0.consumeToAnySorted((char[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Arrays"", e);
    }
}",""
"String consumeToAnySorted(final char... chars) {
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        if (Arrays.binarySearch(chars, val[bufPos]) >= 0)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test082109() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char[] charArray0 = new char[0];
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeToAnySorted(charArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public String consumeToAny(final char... chars) {
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    OUTER: while (bufPos < remaining) {
        for (char c : chars) {
            if (val[bufPos] == c)
                break OUTER;
        }
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test083110() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    char[] charArray0 = new char[2];
    // Undeclared exception!
    try {
        characterReader0.consumeToAny(charArray0);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Read characters until the first of any delimiters is found.
 * @param chars delimiters to scan for
 * @return characters read up to the matched delimiter.
 */"
"public String consumeToAny(final char... chars) {
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    OUTER: while (bufPos < remaining) {
        for (char c : chars) {
            if (val[bufPos] == c)
                break OUTER;
        }
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test084111() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">K<?Fe"");
    // Undeclared exception!
    try {
        characterReader0.consumeToAny((char[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Read characters until the first of any delimiters is found.
 * @param chars delimiters to scan for
 * @return characters read up to the matched delimiter.
 */"
"public String consumeToAny(final char... chars) {
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    OUTER: while (bufPos < remaining) {
        for (char c : chars) {
            if (val[bufPos] == c)
                break OUTER;
        }
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test085112() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char[] charArray0 = new char[9];
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeToAny(charArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Read characters until the first of any delimiters is found.
 * @param chars delimiters to scan for
 * @return characters read up to the matched delimiter.
 */"
"String consumeTo(String seq) {
    int offset = nextIndexOf(seq);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test086113() throws Throwable {
    StringReader stringReader0 = new StringReader(""X],\""h["");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeTo(""org.jsoup.UncheckedIOException"");
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeTo(String seq) {
    int offset = nextIndexOf(seq);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test087114() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    // Undeclared exception!
    try {
        characterReader0.consumeTo("""");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"String consumeTo(String seq) {
    int offset = nextIndexOf(seq);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test088115() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.parser.CharacterReader"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
    // Undeclared exception!
    try {
        characterReader0.consumeTo((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public String consumeTo(char c) {
    int offset = nextIndexOf(c);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test089116() throws Throwable {
    StringReader stringReader0 = new StringReader(""46"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 721);
    stringReader0.close();
    characterReader0.consumeHexSequence();
    // Undeclared exception!
    try {
        characterReader0.consumeTo('}');
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Reads characters up to the specific char.
 * @param c the delimiter
 * @return the chars read
 */"
"public String consumeTo(char c) {
    int offset = nextIndexOf(c);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test090117() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""F~+?x1bgjG2'0"");
    char[] charArray0 = new char[2];
    characterReader0.consumeToAnySorted(charArray0);
    // Undeclared exception!
    try {
        characterReader0.consumeTo('6');
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 * Reads characters up to the specific char.
 * @param c the delimiter
 * @return the chars read
 */"
"public String consumeTo(char c) {
    int offset = nextIndexOf(c);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test091118() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""*Yk86hqo"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeTo('`');
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}","/**
 * Reads characters up to the specific char.
 * @param c the delimiter
 * @return the chars read
 */"
"String consumeTagName() {
    // '\t', '\n', '\r', '\f', ' ', '/', '>', nullChar
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        final char c = val[bufPos];
        if (c == '\t' || c == '\n' || c == '\r' || c == '\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test092119() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeTagName();
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeTagName() {
    // '\t', '\n', '\r', '\f', ' ', '/', '>', nullChar
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        final char c = val[bufPos];
        if (c == '\t' || c == '\n' || c == '\r' || c == '\f' || c == ' ' || c == '/' || c == '>' || c == TokeniserState.nullChar)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test093120() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeTagName();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeLetterThenDigitSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))
            bufPos++;
        else
            break;
    }
    while (!isEmpty()) {
        char c = charBuf[bufPos];
        if (c >= '0' && c <= '9')
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test094121() throws Throwable {
    StringReader stringReader0 = new StringReader(""}erW)iPmm"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeToEnd();
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeLetterThenDigitSequence();
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeLetterSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test095122() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""QUF{~]Tm5{e-r9K&nSK"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeLetterSequence();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeHexSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test096123() throws Throwable {
    StringReader stringReader0 = new StringReader(""46"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 721);
    characterReader0.consumeDigitSequence();
    stringReader0.close();
    // Undeclared exception!
    try {
        characterReader0.consumeHexSequence();
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeHexSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test097124() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""/'-[TRfq&Hg?om"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeHexSequence();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeDigitSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if (c >= '0' && c <= '9')
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test098125() throws Throwable {
    StringReader stringReader0 = new StringReader(""Must be true"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    stringReader0.close();
    characterReader0.consumeData();
    // Undeclared exception!
    try {
        characterReader0.consumeDigitSequence();
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeDigitSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if (c >= '0' && c <= '9')
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test099126() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeDigitSequence();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"String consumeData() {
    // &, <, null
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        final char c = val[bufPos];
        if (c == '&' || c == '<' || c == TokeniserState.nullChar)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test100127() throws Throwable {
    StringReader stringReader0 = new StringReader(""46"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 721);
    stringReader0.close();
    characterReader0.consumeHexSequence();
    // Undeclared exception!
    try {
        characterReader0.consumeData();
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"String consumeData() {
    // &, <, null
    bufferUp();
    final int start = bufPos;
    final int remaining = bufLength;
    final char[] val = charBuf;
    while (bufPos < remaining) {
        final char c = val[bufPos];
        if (c == '&' || c == '<' || c == TokeniserState.nullChar)
            break;
        bufPos++;
    }
    return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos - start) : """";
}","public void test101128() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""@'p(7k{iZw(8"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeData();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"char consume() {
    bufferUp();
    char val = isEmpty() ? EOF : charBuf[bufPos];
    bufPos++;
    return val;
}","public void test102129() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consume();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public CharacterReader(String input) {
    this(new StringReader(input), input.length());
}","public void test103130() throws Throwable {
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader((String) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public CharacterReader(Reader input, int sz) {
    Validate.notNull(input);
    Validate.isTrue(input.markSupported());
    reader = input;
    charBuf = new char[sz > maxBufferLen ? maxBufferLen : sz];
    bufferUp();
}","public void test104131() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    stringReader0.close();
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader(stringReader0, 48);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public CharacterReader(Reader input, int sz) {
    Validate.notNull(input);
    Validate.isTrue(input.markSupported());
    reader = input;
    charBuf = new char[sz > maxBufferLen ? maxBufferLen : sz];
    bufferUp();
}","public void test105132() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader(stringReader0, (-2938));
        fail(""Expecting exception: NegativeArraySizeException"");
    } catch (NegativeArraySizeException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public CharacterReader(Reader input, int sz) {
    Validate.notNull(input);
    Validate.isTrue(input.markSupported());
    reader = input;
    charBuf = new char[sz > maxBufferLen ? maxBufferLen : sz];
    bufferUp();
}","public void test106133() throws Throwable {
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader((Reader) null, 0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public CharacterReader(Reader input) {
    this(input, maxBufferLen);
}","public void test107134() throws Throwable {
    StringReader stringReader0 = new StringReader(""=2q0U!|"");
    stringReader0.close();
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader(stringReader0);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test108135() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.isEmpty();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test108136() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.isEmpty();
    assertFalse(boolean0);
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test109137() throws Throwable {
    StringReader stringReader0 = new StringReader(""dE,6nC?"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeData();
    boolean boolean0 = characterReader0.isEmpty();
    assertEquals(7, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test109138() throws Throwable {
    StringReader stringReader0 = new StringReader(""dE,6nC?"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeData();
    boolean boolean0 = characterReader0.isEmpty();
    assertTrue(boolean0);
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test110139() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.helper.Validate"");
    stringReader0.skip(22L);
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    char[] charArray0 = new char[6];
    characterReader0.consumeTagName();
    characterReader0.rewindToMark();
    characterReader0.consumeToAny(charArray0);
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"String consumeToEnd() {
    bufferUp();
    String data = cacheString(charBuf, stringCache, bufPos, bufLength - bufPos);
    bufPos = bufLength;
    return data;
}","public void test111140() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""@Fy4#)8q9+[&!` G"");
    characterReader0.consumeHexSequence();
    characterReader0.consumeToEnd();
    // Undeclared exception!
    try {
        characterReader0.consumeToEnd();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test112141() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""@Fy4#)8q9+[&!` G"");
    boolean boolean0 = characterReader0.containsIgnoreCase("" G"");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test112142() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""@Fy4#)8q9+[&!` G"");
    boolean boolean0 = characterReader0.containsIgnoreCase("" G"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test113143() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""o"");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test113144() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""o"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test114145() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4C$rsL!{B,pZZ,DVZ"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test114146() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4C$rsL!{B,pZZ,DVZ"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test115147() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.consumeLetterThenDigitSequence();
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test115148() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.consumeLetterThenDigitSequence();
    boolean boolean0 = characterReader0.matchesDigit();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test116149() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.helper.Validate"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeTagName();
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(25, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test116150() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.helper.Validate"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeTagName();
    boolean boolean0 = characterReader0.matchesDigit();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test117151() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesDigit() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= '0' && c <= '9');
}","public void test117152() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertFalse(boolean0);
}",""
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test117153() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.matchesDigit();
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test118154() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""u|8xLmcA/..7sV*Hi"");
    characterReader0.consumeLetterSequence();
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test118155() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""u|8xLmcA/..7sV*Hi"");
    characterReader0.consumeLetterSequence();
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test119156() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""@Fy4#)8q9+[&!` G"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test119157() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""@Fy4#)8q9+[&!` G"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test119158() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""@Fy4#)8q9+[&!` G"");
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test120159() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4C$rsL!{B,pZZ,DVZ"");
    characterReader0.consumeTagName();
    boolean boolean0 = characterReader0.matchesLetter();
    assertEquals(17, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesLetter() {
    if (isEmpty())
        return false;
    char c = charBuf[bufPos];
    return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c);
}","public void test120160() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4C$rsL!{B,pZZ,DVZ"");
    characterReader0.consumeTagName();
    boolean boolean0 = characterReader0.matchesLetter();
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test121161() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""u|8xLmcA/..7sV*Hi"");
    characterReader0.consumeLetterSequence();
    char[] charArray0 = new char[6];
    charArray0[2] = '8';
    characterReader0.consume();
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertEquals(2, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test121162() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""u|8xLmcA/..7sV*Hi"");
    characterReader0.consumeLetterSequence();
    char[] charArray0 = new char[6];
    charArray0[2] = '8';
    characterReader0.consume();
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test122163() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    char[] charArray0 = new char[11];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test122164() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    char[] charArray0 = new char[11];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test122165() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    char[] charArray0 = new char[11];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertFalse(boolean0);
}",""
"boolean matchesAnySorted(char[] seq) {
    bufferUp();
    return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0;
}","public void test123166() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char[] charArray0 = new char[3];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test123167() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char[] charArray0 = new char[3];
    boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test124168() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""/'-[TRfq&Hg?om"");
    char[] charArray0 = new char[7];
    charArray0[0] = 'm';
    characterReader0.consumeToAny(charArray0);
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertEquals(13, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesAny(char... seq) {
    if (isEmpty())
        return false;
    bufferUp();
    char c = charBuf[bufPos];
    for (char seek : seq) {
        if (seek == c)
            return true;
    }
    return false;
}","public void test124169() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""/'-[TRfq&Hg?om"");
    char[] charArray0 = new char[7];
    charArray0[0] = 'm';
    characterReader0.consumeToAny(charArray0);
    boolean boolean0 = characterReader0.matchesAny(charArray0);
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test125170() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    characterReader0.consumeData();
    char[] charArray0 = new char[17];
    characterReader0.matchesAny(charArray0);
    assertEquals(32, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchConsumeIgnoreCase(String seq) {
    if (matchesIgnoreCase(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test126171() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""@Fy4#)8q9+[&!` G"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""g!$Jcx"");
    assertFalse(boolean0);
}",""
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test126172() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""@Fy4#)8q9+[&!` G"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""g!$Jcx"");
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test126173() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""@Fy4#)8q9+[&!` G"");
    boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""g!$Jcx"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchesIgnoreCase(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) {
        char upScan = Character.toUpperCase(seq.charAt(offset));
        char upTarget = Character.toUpperCase(charBuf[bufPos + offset]);
        if (upScan != upTarget)
            return false;
    }
    return true;
}","public void test127174() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.matchesIgnoreCase(""org.jsoup.UncheckedIOException"");
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test127175() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.matchesIgnoreCase(""org.jsoup.UncheckedIOException"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matchConsume(String seq) {
    bufferUp();
    if (matches(seq)) {
        bufPos += seq.length();
        return true;
    } else {
        return false;
    }
}","public void test128176() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4?H="");
    boolean boolean0 = characterReader0.matchConsume(""Oz"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test128177() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4?H="");
    boolean boolean0 = characterReader0.matchConsume(""Oz"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test128178() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4?H="");
    boolean boolean0 = characterReader0.matchConsume(""Oz"");
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test129179() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    boolean boolean0 = characterReader0.matches(""Array must not contain any null objects"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matches(String seq) {
    bufferUp();
    int scanLength = seq.length();
    if (scanLength > bufLength - bufPos)
        return false;
    for (int offset = 0; offset < scanLength; offset++) if (seq.charAt(offset) != charBuf[bufPos + offset])
        return false;
    return true;
}","public void test129180() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    boolean boolean0 = characterReader0.matches(""Array must not contain any null objects"");
    assertFalse(boolean0);
}",""
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test129181() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    boolean boolean0 = characterReader0.matches(""Array must not contain any null objects"");
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"boolean matches(char c) {
    return !isEmpty() && charBuf[bufPos] == c;
}","public void test130182() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""F~+?x1bgjG2'0"");
    boolean boolean0 = characterReader0.matches('\u0000');
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test130183() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""F~+?x1bgjG2'0"");
    boolean boolean0 = characterReader0.matches('\u0000');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test130184() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""F~+?x1bgjG2'0"");
    boolean boolean0 = characterReader0.matches('\u0000');
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"boolean matches(char c) {
    return !isEmpty() && charBuf[bufPos] == c;
}","public void test131185() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.matches('o');
    assertTrue(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test131186() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.matches('o');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean matches(char c) {
    return !isEmpty() && charBuf[bufPos] == c;
}","public void test132187() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    boolean boolean0 = characterReader0.matches(';');
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test132188() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    boolean boolean0 = characterReader0.matches(';');
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test133189() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""/'-[TRfq&Hg?om"");
    characterReader0.consumeDigitSequence();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test133190() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""/'-[TRfq&Hg?om"");
    characterReader0.consumeDigitSequence();
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test134191() throws Throwable {
    StringReader stringReader0 = new StringReader(""org.jsoup.helper.Validate"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.consumeTagName();
    characterReader0.consumeDigitSequence();
    assertEquals(25, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test135192() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4C$rsL!{B,pZZ,DVZ"");
    characterReader0.consumeHexSequence();
    assertEquals(2, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public String consumeTo(char c) {
    int offset = nextIndexOf(c);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test136193() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.consumeHexSequence();
    String string0 = characterReader0.consumeTo('o');
    assertEquals("""", string0);
}","/**
 * Reads characters up to the specific char.
 * @param c the delimiter
 * @return the chars read
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test136194() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.consumeHexSequence();
    String string0 = characterReader0.consumeTo('o');
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test137195() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.consumeLetterThenDigitSequence();
    characterReader0.consumeHexSequence();
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test138196() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    characterReader0.matchConsume(""org.jsoup.parser.CharacterReader"");
    characterReader0.consumeHexSequence();
    assertEquals(32, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test139197() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""F~+?x1bgjG2'0"");
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test140198() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""ZhL,Zv"");
    characterReader0.consumeTagName();
    characterReader0.consumeLetterThenDigitSequence();
    assertEquals(6, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test141199() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""ZhL,Zv"");
    characterReader0.consumeTagName();
    characterReader0.consumeLetterSequence();
    assertTrue(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test142200() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">K<?Fe"");
    characterReader0.consumeTagName();
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test142201() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("">K<?Fe"");
    characterReader0.consumeTagName();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test143202() throws Throwable {
    StringReader stringReader0 = new StringReader(""B,568_7/oCv"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 2888);
    characterReader0.consumeTagName();
    assertEquals(7, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test144203() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""@Fy4#)8q9+[&!` G"");
    characterReader0.consumeTagName();
    characterReader0.toString();
    assertEquals(14, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test145204() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""/'-[TRfq&Hg?om"");
    char[] charArray0 = new char[7];
    characterReader0.consumeToAny(charArray0);
    characterReader0.consumeData();
    assertEquals(14, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test146205() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4C$rsL!{B,pZZ,DVZ"");
    char[] charArray0 = new char[2];
    charArray0[0] = '4';
    characterReader0.consumeToAnySorted(charArray0);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test146206() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4C$rsL!{B,pZZ,DVZ"");
    char[] charArray0 = new char[2];
    charArray0[0] = '4';
    characterReader0.consumeToAnySorted(charArray0);
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test147207() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4?H="");
    characterReader0.consumeHexSequence();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"String consumeTo(String seq) {
    int offset = nextIndexOf(seq);
    if (offset != -1) {
        String consumed = cacheString(charBuf, stringCache, bufPos, offset);
        bufPos += offset;
        return consumed;
    } else {
        return consumeToEnd();
    }
}","public void test147208() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""4?H="");
    characterReader0.consumeHexSequence();
    characterReader0.unconsume();
    String string0 = characterReader0.consumeTo(""4?H="");
    assertEquals("""", string0);
}",""
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test148209() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Must be false"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""Must be false"");
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test148210() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Must be false"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""Must be false"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"boolean containsIgnoreCase(String seq) {
    // used to check presence of </title>, </style>. only finds consistent case.
    String loScan = seq.toLowerCase(Locale.ENGLISH);
    String hiScan = seq.toUpperCase(Locale.ENGLISH);
    return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);
}","public void test148211() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""Must be false"");
    boolean boolean0 = characterReader0.containsIgnoreCase(""Must be false"");
    assertFalse(boolean0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test149212() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    characterReader0.consumeLetterThenDigitSequence();
    characterReader0.nextIndexOf(""org.jsoup.UncheckedIOException"");
    assertEquals(3, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"int nextIndexOf(CharSequence seq) {
    bufferUp();
    // doesn't handle scanning for surrogates
    char startChar = seq.charAt(0);
    for (int offset = bufPos; offset < bufLength; offset++) {
        // scan to first instance of startchar:
        if (startChar != charBuf[offset])
            while (++offset < bufLength && startChar != charBuf[offset]) {
                /* empty */
            }
        int i = offset + 1;
        int last = i + seq.length() - 1;
        if (offset < bufLength && last <= bufLength) {
            for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) {
                /* empty */
            }
            if (// found full sequence
            i == last)
                return offset - bufPos;
        }
    }
    return -1;
}","public void test150213() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    int int0 = characterReader0.nextIndexOf(""org.jsoup.UncheckedIOException"");
    assertEquals(0, int0);
}","/**
 * Returns the number of characters between the current position and the next instance of the input sequence
 *
 * @param seq scan target
 * @return offset between current position and next instance of target. -1 if not found.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test150214() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    int int0 = characterReader0.nextIndexOf(""org.jsoup.UncheckedIOException"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test151215() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    characterReader0.consumeTo("":MeM^/wrd#,7n8{OqSe"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test152216() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char char0 = characterReader0.consume();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"char consume() {
    bufferUp();
    char val = isEmpty() ? EOF : charBuf[bufPos];
    bufPos++;
    return val;
}","public void test152217() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader("""");
    char char0 = characterReader0.consume();
    assertEquals('\uFFFF', char0);
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test153218() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""y!(q*^A"");
    char char0 = characterReader0.consume();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"char consume() {
    bufferUp();
    char val = isEmpty() ? EOF : charBuf[bufPos];
    bufPos++;
    return val;
}","public void test153219() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""y!(q*^A"");
    char char0 = characterReader0.consume();
    assertEquals('y', char0);
}",""
"public char current() {
    bufferUp();
    return isEmpty() ? EOF : charBuf[bufPos];
}","public void test154220() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    char char0 = characterReader0.current();
    assertEquals('o', char0);
}","/**
 * Get the char at the current position.
 * @return char
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test154221() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    char char0 = characterReader0.current();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test155222() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    characterReader0.matchConsume(""org.jsoup.parser.CharacterReader"");
    char char0 = characterReader0.current();
    assertEquals(32, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public char current() {
    bufferUp();
    return isEmpty() ? EOF : charBuf[bufPos];
}","public void test155223() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    characterReader0.matchConsume(""org.jsoup.parser.CharacterReader"");
    char char0 = characterReader0.current();
    assertEquals('\uFFFF', char0);
}","/**
 * Get the char at the current position.
 * @return char
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test156224() throws Throwable {
    StringReader stringReader0 = new StringReader(""5zjT)<u]+#@C1@6{aBt"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test156225() throws Throwable {
    StringReader stringReader0 = new StringReader(""5zjT)<u]+#@C1@6{aBt"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test157226() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    int int0 = characterReader0.pos();
    assertEquals(0, int0);
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test157227() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    int int0 = characterReader0.pos();
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test158228() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.rangeEquals((-1), 111, ""org.jsoup.UncheckedIOException"");
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public boolean isEmpty() {
    return bufPos >= bufLength;
}","public void test158229() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.rangeEquals((-1), 111, ""org.jsoup.UncheckedIOException"");
    assertFalse(characterReader0.isEmpty());
}","/**
 * Tests if all the content has been read.
 * @return true if nothing left to read.
 */"
"// just used for testing
boolean rangeEquals(final int start, final int count, final String cached) {
    return rangeEquals(charBuf, start, count, cached);
}","public void test158230() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.UncheckedIOException"");
    boolean boolean0 = characterReader0.rangeEquals((-1), 111, ""org.jsoup.UncheckedIOException"");
    assertFalse(boolean0);
}",""
"@Override
public String toString() {
    return new String(charBuf, bufPos, bufLength - bufPos);
}","public void test159231() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    // Undeclared exception!
    try {
        characterReader0.toString();
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}",""
"String consumeLetterThenDigitSequence() {
    bufferUp();
    int start = bufPos;
    while (bufPos < bufLength) {
        char c = charBuf[bufPos];
        if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c))
            bufPos++;
        else
            break;
    }
    while (!isEmpty()) {
        char c = charBuf[bufPos];
        if (c >= '0' && c <= '9')
            bufPos++;
        else
            break;
    }
    return cacheString(charBuf, stringCache, start, bufPos - start);
}","public void test160232() throws Throwable {
    CharacterReader characterReader0 = new CharacterReader(""org.jsoup.parser.CharacterReader"");
    characterReader0.unconsume();
    // Undeclared exception!
    try {
        characterReader0.consumeLetterThenDigitSequence();
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -1
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"public int pos() {
    return readerPos + bufPos;
}","public void test161233() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.advance();
    assertEquals(1, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public int pos() {
    return readerPos + bufPos;
}","public void test162234() throws Throwable {
    StringReader stringReader0 = new StringReader("""");
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    characterReader0.mark();
    assertEquals(0, characterReader0.pos());
}","/**
 * Gets the current cursor position in the content.
 * @return current position
 */"
"public CharacterReader(Reader input) {
    this(input, maxBufferLen);
}","public void test163235() throws Throwable {
    CharacterReader characterReader0 = null;
    try {
        characterReader0 = new CharacterReader((Reader) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
