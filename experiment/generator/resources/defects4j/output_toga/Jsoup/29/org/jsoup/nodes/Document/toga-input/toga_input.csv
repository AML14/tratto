focal_method,test_prefix,docstring
"@Override
public String nodeName() {
    return ""#document"";
}","public void test011() throws Throwable {
    Document document0 = new Document(""oHk"");
    document0.appendText(""bgsound"");
    document0.append(""t)d"");
    Document document1 = document0.normalise();
    assertEquals(""#document"", document1.nodeName());
}",""
"@Override
public String nodeName() {
    return tag.getName();
}","public void test0712() throws Throwable {
    Document document0 = Document.createShell(""CS+w+<gieb%dHh`"");
    Document document1 = document0.ownerDocument();
    document1.siblingIndex = (-797);
    Element element0 = document1.text(""CS+w+<gieb%dHh`"");
    assertEquals(""#document"", element0.nodeName());
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test0813() throws Throwable {
    Document document0 = new Document(""body"");
    document0.setSiblingIndex(3560);
    Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
    Document document1 = document0.quirksMode(document_QuirksMode0);
    assertEquals(3560, document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test0914() throws Throwable {
    Document document0 = Document.createShell(""I5@@B;[A7Q?O 5Lv5"");
    document0.setSiblingIndex((-1));
    Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
    Document document1 = document0.quirksMode(document_QuirksMode0);
    assertEquals((-1), document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1015() throws Throwable {
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    Document document0 = new Document(""&:A!+.>c8Cst/sz?"");
    document0.normalise();
    document0.appendChild(document0);
    Document document1 = document0.outputSettings(document_OutputSettings0);
    assertEquals(""#document"", document1.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1119() throws Throwable {
    Document document0 = Document.createShell(""/VKt"");
    Element element0 = document0.text(""/VKt"");
    element0.siblingIndex = (-4170);
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    Document document1 = document0.outputSettings(document_OutputSettings0);
    assertEquals(""#document"", document1.nodeName());
}",""
"@Override
public String outerHtml() {
    // no outer wrapper tag
    return super.html();
}","public void test1529() throws Throwable {
    Document document0 = new Document(""title"");
    String string0 = document0.outerHtml();
    assertEquals("""", string0);
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1630() throws Throwable {
    Document document0 = new Document(""&:A!+.>c8Cst/sz?"");
    Document document1 = document0.normalise();
    Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
    Document document2 = document1.quirksMode(document_QuirksMode0);
    Document document3 = (Document) document2.appendChild(document0);
    LinkedList<Node> linkedList0 = new LinkedList<Node>();
    document2.childNodes = (List<Node>) linkedList0;
    document3.normalise();
    Document document4 = (Document) document3.text(""&:A!+.>c8Cst/sz?"");
    assertEquals(""#document"", document4.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1731() throws Throwable {
    Document document0 = Document.createShell(""I5@@B;[A7Q?O 5Lv5"");
    document0.setSiblingIndex((-1));
    Document document1 = document0.normalise();
    assertEquals(""#document"", document1.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1832() throws Throwable {
    Document document0 = Document.createShell(""colgroup"");
    document0.tagName(""colgroup"");
    Document document1 = document0.normalise();
    assertEquals(""#document"", document1.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1933() throws Throwable {
    Document document0 = new Document("""");
    document0.head();
    assertEquals(""#document"", document0.nodeName());
}",""
"@Override
public String nodeName() {
    return tag.getName();
}","public void test2034() throws Throwable {
    Document document0 = Document.createShell(""base"");
    Element element0 = document0.createElement(""9C|)EX9==:<8p"");
    assertEquals(""9c|)ex9==:<8p"", element0.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test2135() throws Throwable {
    Document document0 = new Document(""jYZ9g5LV Ny"");
    document0.body();
    assertEquals(""#document"", document0.nodeName());
}",""
"public void title(String title) {
    Validate.notNull(title);
    Element titleEl = getElementsByTag(""title"").first();
    if (titleEl == null) {
        // add to head
        head().appendElement(""title"").text(title);
    } else {
        titleEl.text(title);
    }
}","public void test2236() throws Throwable {
    Document document0 = Document.createShell(""colgroup"");
    Node[] nodeArray0 = new Node[9];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    nodeArray0[8] = (Node) document0;
    document0.addChildren(nodeArray0);
    // Undeclared exception!
    document0.title(""colgroup"");
}","/**
 *     Set the document's {@code title} element. Updates the existing element, or adds {@code title} to {@code head} if
 *     not present
 *     @param title string to set as title
 */"
"public void title(String title) {
    Validate.notNull(title);
    Element titleEl = getElementsByTag(""title"").first();
    if (titleEl == null) {
        // add to head
        head().appendElement(""title"").text(title);
    } else {
        titleEl.text(title);
    }
}","public void test2337() throws Throwable {
    Document document0 = new Document(""$VALUES"");
    // Undeclared exception!
    try {
        document0.title(""$VALUES"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Document"", e);
    }
}","/**
 *     Set the document's {@code title} element. Updates the existing element, or adds {@code title} to {@code head} if
 *     not present
 *     @param title string to set as title
 */"
"public void title(String title) {
    Validate.notNull(title);
    Element titleEl = getElementsByTag(""title"").first();
    if (titleEl == null) {
        // add to head
        head().appendElement(""title"").text(title);
    } else {
        titleEl.text(title);
    }
}","public void test2438() throws Throwable {
    Document document0 = Document.createShell("""");
    // Undeclared exception!
    try {
        document0.title((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Set the document's {@code title} element. Updates the existing element, or adds {@code title} to {@code head} if
 *     not present
 *     @param title string to set as title
 */"
"public String title() {
    // title is a preserve whitespace tag (for document output), but normalised here
    Element titleEl = getElementsByTag(""title"").first();
    return titleEl != null ? titleEl.text().trim() : """";
}","public void test2539() throws Throwable {
    Document document0 = new Document(""oHk"");
    document0.appendChild(document0);
    // Undeclared exception!
    document0.title();
}","/**
 *     Get the string contents of the document's {@code title} element.
 *     @return Trimmed title, or empty string if none set.
 */"
"@Override
public Element text(String text) {
    // overridden to not nuke doc structure
    body().text(text);
    return this;
}","public void test2640() throws Throwable {
    Document document0 = new Document("".(<bf7E_[['"");
    // Undeclared exception!
    try {
        document0.text(""eiU"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Document"", e);
    }
}","/**
 *     Set the text of the {@code body} of this document. Any existing nodes within the body will be cleared.
 *     @param text unencoded text
 *     @return this document
 */"
"@Override
public Element text(String text) {
    // overridden to not nuke doc structure
    body().text(text);
    return this;
}","public void test2741() throws Throwable {
    Document document0 = Document.createShell(""4cylgroup"");
    // Undeclared exception!
    try {
        document0.text((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Set the text of the {@code body} of this document. Any existing nodes within the body will be cleared.
 *     @param text unencoded text
 *     @return this document
 */"
"public Document outputSettings(OutputSettings outputSettings) {
    Validate.notNull(outputSettings);
    this.outputSettings = outputSettings;
    return this;
}","public void test2842() throws Throwable {
    Document document0 = new Document(""extended"");
    // Undeclared exception!
    try {
        document0.outputSettings((Document.OutputSettings) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Set the document's output settings.
 * @param outputSettings new output settings.
 * @return this document, for chaining.
 */"
"@Override
public String outerHtml() {
    // no outer wrapper tag
    return super.html();
}","public void test2943() throws Throwable {
    Document document0 = Document.createShell(""body"");
    document0.childNodes = null;
    // Undeclared exception!
    try {
        document0.outerHtml();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Element"", e);
    }
}",""
"public Document normalise() {
    Element htmlEl = findFirstElementByTagName(""html"", this);
    if (htmlEl == null)
        htmlEl = appendElement(""html"");
    if (head() == null)
        htmlEl.prependElement(""head"");
    if (body() == null)
        htmlEl.appendElement(""body"");
    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care
    // of. do in inverse order to maintain text order.
    normaliseTextNodes(head());
    normaliseTextNodes(htmlEl);
    normaliseTextNodes(this);
    normaliseStructure(""head"", htmlEl);
    normaliseStructure(""body"", htmlEl);
    return this;
}","public void test3044() throws Throwable {
    Document document0 = Document.createShell(""colgroup"");
    document0.appendChild(document0);
    // Undeclared exception!
    document0.normalise();
}","/**
 *     Normalise the document. This happens after the parse phase so generally does not need to be called.
 *     Moves any text content that is not in the body element into the body.
 *     @return this document after normalisation
 */"
"public Element head() {
    return findFirstElementByTagName(""head"", this);
}","public void test3145() throws Throwable {
    Document document0 = Document.createShell(""n8B$F"");
    document0.childNodes = null;
    // Undeclared exception!
    try {
        document0.head();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Document"", e);
    }
}","/**
 *     Accessor to the document's {@code head} element.
 *     @return {@code head}
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test3246() throws Throwable {
    // Undeclared exception!
    try {
        Document.createShell((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public Element createElement(String tagName) {
    return new Element(Tag.valueOf(tagName), this.baseUri());
}","public void test3347() throws Throwable {
    Document document0 = new Document("""");
    // Undeclared exception!
    try {
        document0.createElement("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Create a new Element, with this document's base uri. Does not make the new element a child of this document.
 *     @param tagName element tag name (e.g. {@code a})
 *     @return new element
 */"
"@Override
public Document clone() {
    Document clone = (Document) super.clone();
    clone.outputSettings = this.outputSettings.clone();
    return clone;
}","public void test3448() throws Throwable {
    Document document0 = Document.createShell(""73aa"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    document0.addChildren(nodeArray0);
    // Undeclared exception!
    document0.clone();
}",""
"public Document(String baseUri) {
    super(Tag.valueOf(""#root""), baseUri);
}","public void test3549() throws Throwable {
    Document document0 = null;
    try {
        document0 = new Document((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Create a new, empty Document.
 *     @param baseUri base URI of document
 *     @see org.jsoup.Jsoup#parse
 *     @see #createShell
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test3650() throws Throwable {
    Document document0 = Document.createShell("""");
    document0.title("""");
    assertEquals(""#document"", document0.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test3751() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.body();
    assertEquals(""#document"", document0.nodeName());
}",""
"public Element body() {
    return findFirstElementByTagName(""body"", this);
}","public void test3752() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.body();
    assertNotNull(element0);
}","/**
 *     Accessor to the document's {@code body} element.
 *     @return {@code body}
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test3853() throws Throwable {
    Document document0 = Document.createShell(""73aa"");
    String string0 = document0.nodeName();
    assertEquals(""#document"", string0);
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test3954() throws Throwable {
    Document document0 = Document.createShell(""E68g,JVlDRY$bK\""z"");
    document0.head();
    assertEquals(""#document"", document0.nodeName());
}",""
"public QuirksMode quirksMode() {
    return quirksMode;
}","public void test4157() throws Throwable {
    Document document0 = new Document(""UTF-8"");
    Document.QuirksMode document_QuirksMode0 = document0.quirksMode();
    assertEquals(Document.QuirksMode.noQuirks, document_QuirksMode0);
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test4359() throws Throwable {
    Document document0 = new Document("""");
    document0.prependText("""");
    Document document1 = document0.normalise();
    assertEquals(""#document"", document1.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test4460() throws Throwable {
    Document document0 = Document.createShell(""/VKt"");
    document0.title(""/VKt"");
    document0.title(""/VKt"");
    assertEquals(""#document"", document0.nodeName());
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test4561() throws Throwable {
    Document document0 = Document.createShell(""/VKt"");
    document0.title(""/VKt"");
    document0.title();
    assertEquals(""#document"", document0.nodeName());
}",""
"public String title() {
    // title is a preserve whitespace tag (for document output), but normalised here
    Element titleEl = getElementsByTag(""title"").first();
    return titleEl != null ? titleEl.text().trim() : """";
}","public void test4662() throws Throwable {
    Document document0 = new Document(""oHk"");
    String string0 = document0.title();
    assertEquals("""", string0);
}","/**
 *     Get the string contents of the document's {@code title} element.
 *     @return Trimmed title, or empty string if none set.
 */"
"public Document normalise() {
    Element htmlEl = findFirstElementByTagName(""html"", this);
    if (htmlEl == null)
        htmlEl = appendElement(""html"");
    if (head() == null)
        htmlEl.prependElement(""head"");
    if (body() == null)
        htmlEl.appendElement(""body"");
    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care
    // of. do in inverse order to maintain text order.
    normaliseTextNodes(head());
    normaliseTextNodes(htmlEl);
    normaliseTextNodes(this);
    normaliseStructure(""head"", htmlEl);
    normaliseStructure(""body"", htmlEl);
    return this;
}","public void test4763() throws Throwable {
    Document document0 = new Document(""oHk"");
    Element element0 = document0.append(""t)d"");
    List<Node> list0 = document0.siblingNodes();
    element0.childNodes = list0;
    // Undeclared exception!
    try {
        document0.normalise();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.AbstractList"", e);
    }
}","/**
 *     Normalise the document. This happens after the parse phase so generally does not need to be called.
 *     Moves any text content that is not in the body element into the body.
 *     @return this document after normalisation
 */"
"public String title() {
    // title is a preserve whitespace tag (for document output), but normalised here
    Element titleEl = getElementsByTag(""title"").first();
    return titleEl != null ? titleEl.text().trim() : """";
}","public void test4864() throws Throwable {
    Document document0 = Document.createShell(""/VKt"");
    Document document1 = (Document) document0.text(""/VKt"");
    document1.childNodes = null;
    // Undeclared exception!
    try {
        document1.title();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 *     Get the string contents of the document's {@code title} element.
 *     @return Trimmed title, or empty string if none set.
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test4965() throws Throwable {
    Document document0 = Document.createShell(""colgroup"");
    Document document1 = document0.clone();
    document1.appendChild(document0);
    document1.normalise();
    assertEquals(1, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String tagName() {
    return tag.getName();
}","public void test5066() throws Throwable {
    Document document0 = new Document(""body"");
    Element element0 = document0.createElement(""body"");
    assertEquals(""body"", element0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"@Override
public String outerHtml() {
    // no outer wrapper tag
    return super.html();
}","public void test5474() throws Throwable {
    Document document0 = Document.createShell(""/VKt"");
    document0.title(""/VKt"");
    String string0 = document0.outerHtml();
    assertEquals(""<html>\n <head>\n  <title>/VKt</title>\n </head>\n <body></body>\n</html>"", string0);
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test5475() throws Throwable {
    Document document0 = Document.createShell(""/VKt"");
    document0.title(""/VKt"");
    String string0 = document0.outerHtml();
    assertEquals(""#document"", document0.nodeName());
}",""
