focal_method,test_prefix,docstring
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test00() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Token.Comment token_Comment0 = new Token.Comment();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.process(token_Comment0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test11() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Token.Doctype token_Doctype0 = new Token.Doctype();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.process(token_Doctype0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test22() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""<vg7g>Z~"", ""<vg7g>Z~"");
    Token.EndTag token_EndTag0 = new Token.EndTag(""#document"");
    boolean boolean0 = xmlTreeBuilder0.process(token_EndTag0);
    assertTrue(boolean0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test33() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    xmlTreeBuilder0.initialiseParse(""fieldset"", ""fieldset"", parseErrorList0);
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag0 = new Token.StartTag(""fieldset"", attributes0);
    token_StartTag0.selfClosing = true;
    Element element0 = xmlTreeBuilder0.insert(token_StartTag0);
    assertEquals(""fieldset"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test44() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""nkm36u.tpBfG>q:L"", ""nkm36u.tpBfG>q:L"");
    Token.StartTag token_StartTag0 = new Token.StartTag(""nkm36u.tpBfG>q:L"");
    token_StartTag0.selfClosing = true;
    boolean boolean0 = xmlTreeBuilder0.process(token_StartTag0);
    assertTrue(boolean0);
}",""
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test55() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""`<ebdURqbNdS"", ""`<ebdURqbNdS"");
    Token.EndTag token_EndTag0 = new Token.EndTag(""`<ebdURqbNdS"");
    boolean boolean0 = xmlTreeBuilder0.process(token_EndTag0);
    assertTrue(boolean0);
}",""
