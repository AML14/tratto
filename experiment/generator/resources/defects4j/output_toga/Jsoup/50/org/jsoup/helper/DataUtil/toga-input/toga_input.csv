focal_method,test_prefix,docstring
"public final int childNodeSize() {
    return childNodes.size();
}","public void test011() throws Throwable {
    ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
    Parser parser0 = Parser.xmlParser();
    Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, ""v*y("", parser0);
    assertEquals(0, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public String baseUri() {
    return baseUri;
}","public void test012() throws Throwable {
    ByteBuffer byteBuffer0 = ByteBuffer.allocate(0);
    Parser parser0 = Parser.xmlParser();
    Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, ""v*y("", parser0);
    assertEquals(""v*y("", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {
    Validate.isTrue(maxSize >= 0, ""maxSize must be 0 (unlimited) or larger"");
    final boolean capped = maxSize > 0;
    byte[] buffer = new byte[bufferSize];
    ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);
    int read;
    int remaining = maxSize;
    while (true) {
        read = inStream.read(buffer);
        if (read == -1)
            break;
        if (capped) {
            if (read > remaining) {
                outStream.write(buffer, 0, remaining);
                break;
            }
            remaining -= read;
        }
        outStream.write(buffer, 0, read);
    }
    return ByteBuffer.wrap(outStream.toByteArray());
}","public void test034() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null, 65279);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}","/**
 * Read the input stream into a byte buffer.
 * @param inStream the input stream to read from
 * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.
 * @return the filled byte buffer
 * @throws IOException if an exception occurs whilst reading from the input stream.
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {
    Validate.isTrue(maxSize >= 0, ""maxSize must be 0 (unlimited) or larger"");
    final boolean capped = maxSize > 0;
    byte[] buffer = new byte[bufferSize];
    ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);
    int read;
    int remaining = maxSize;
    while (true) {
        read = inStream.read(buffer);
        if (read == -1)
            break;
        if (capped) {
            if (read > remaining) {
                outStream.write(buffer, 0, remaining);
                break;
            }
            remaining -= read;
        }
        outStream.write(buffer, 0, read);
    }
    return ByteBuffer.wrap(outStream.toByteArray());
}","public void test045() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(67);
    try {
        DataUtil.readToByteBuffer(pipedInputStream0, 0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}","/**
 * Read the input stream into a byte buffer.
 * @param inStream the input stream to read from
 * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.
 * @return the filled byte buffer
 * @throws IOException if an exception occurs whilst reading from the input stream.
 */"
"static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {
    return readToByteBuffer(inStream, 0);
}","public void test056() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer((InputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}",""
"static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException {
    return readToByteBuffer(inStream, 0);
}","public void test067() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream(64);
    try {
        DataUtil.readToByteBuffer(pipedInputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",""
"static ByteBuffer readFileToByteBuffer(File file) throws IOException {
    RandomAccessFile randomAccessFile = null;
    try {
        randomAccessFile = new RandomAccessFile(file, ""r"");
        byte[] bytes = new byte[(int) randomAccessFile.length()];
        randomAccessFile.readFully(bytes);
        return ByteBuffer.wrap(bytes);
    } finally {
        if (randomAccessFile != null)
            randomAccessFile.close();
    }
}","public void test078() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.readFileToByteBuffer((File) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}",""
"static ByteBuffer readFileToByteBuffer(File file) throws IOException {
    RandomAccessFile randomAccessFile = null;
    try {
        randomAccessFile = new RandomAccessFile(file, ""r"");
        byte[] bytes = new byte[(int) randomAccessFile.length()];
        randomAccessFile.readFully(bytes);
        return ByteBuffer.wrap(bytes);
    } finally {
        if (randomAccessFile != null)
            randomAccessFile.close();
    }
}","public void test089() throws Throwable {
    MockFile mockFile0 = new MockFile((File) null, """");
    try {
        DataUtil.readFileToByteBuffer(mockFile0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}",""
"static ByteBuffer readFileToByteBuffer(File file) throws IOException {
    RandomAccessFile randomAccessFile = null;
    try {
        randomAccessFile = new RandomAccessFile(file, ""r"");
        byte[] bytes = new byte[(int) randomAccessFile.length()];
        randomAccessFile.readFully(bytes);
        return ByteBuffer.wrap(bytes);
    } finally {
        if (randomAccessFile != null)
            randomAccessFile.close();
    }
}","public void test0910() throws Throwable {
    MockFile mockFile0 = new MockFile(""--------------------------------"", ""--------------------------------"");
    try {
        DataUtil.readFileToByteBuffer(mockFile0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // File does not exist, and RandomAccessFile is not open in write mode
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}",""
"// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support
// switching the chartset midstream when a meta http-equiv tag defines the charset.
// todo - this is getting gnarly. needs a rewrite.
static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    String docData;
    Document doc = null;
    // look for BOM - overrides any other header or input
    if (charsetName == null) {
        // determine from meta. safe parse as UTF-8
        // look for <meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312""> or HTML5 <meta charset=""gb2312"">
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();
        if (meta != null) {
            // if not found, will keep utf-8 as best attempt
            String foundCharset = null;
            if (meta.hasAttr(""http-equiv"")) {
                foundCharset = getCharsetFromContentType(meta.attr(""content""));
            }
            if (foundCharset == null && meta.hasAttr(""charset"")) {
                try {
                    if (Charset.isSupported(meta.attr(""charset""))) {
                        foundCharset = meta.attr(""charset"");
                    }
                } catch (IllegalCharsetNameException e) {
                    foundCharset = null;
                }
            }
            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                // need to re-decode
                foundCharset = foundCharset.trim().replaceAll(""[\""']"", """");
                charsetName = foundCharset;
                byteData.rewind();
                docData = Charset.forName(foundCharset).decode(byteData).toString();
                doc = null;
            }
        }
    } else {
        // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
        docData = Charset.forName(charsetName).decode(byteData).toString();
    }
    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
        byteData.rewind();
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        docData = docData.substring(1);
        charsetName = defaultCharset;
        doc = null;
    }
    if (doc == null) {
        doc = parser.parseInput(docData, baseUri);
        doc.outputSettings().charset(charsetName);
    }
    return doc;
}","public void test1011() throws Throwable {
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData((ByteBuffer) null, ""U\""(.s>>e#=*>"", ""U\""(.s>>e#=*>"", parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // U\""(.s>>e#=*>
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",""
"// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support
// switching the chartset midstream when a meta http-equiv tag defines the charset.
// todo - this is getting gnarly. needs a rewrite.
static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    String docData;
    Document doc = null;
    // look for BOM - overrides any other header or input
    if (charsetName == null) {
        // determine from meta. safe parse as UTF-8
        // look for <meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312""> or HTML5 <meta charset=""gb2312"">
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();
        if (meta != null) {
            // if not found, will keep utf-8 as best attempt
            String foundCharset = null;
            if (meta.hasAttr(""http-equiv"")) {
                foundCharset = getCharsetFromContentType(meta.attr(""content""));
            }
            if (foundCharset == null && meta.hasAttr(""charset"")) {
                try {
                    if (Charset.isSupported(meta.attr(""charset""))) {
                        foundCharset = meta.attr(""charset"");
                    }
                } catch (IllegalCharsetNameException e) {
                    foundCharset = null;
                }
            }
            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                // need to re-decode
                foundCharset = foundCharset.trim().replaceAll(""[\""']"", """");
                charsetName = foundCharset;
                byteData.rewind();
                docData = Charset.forName(foundCharset).decode(byteData).toString();
                doc = null;
            }
        }
    } else {
        // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
        docData = Charset.forName(charsetName).decode(byteData).toString();
    }
    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
        byteData.rewind();
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        docData = docData.substring(1);
        charsetName = defaultCharset;
        doc = null;
    }
    if (doc == null) {
        doc = parser.parseInput(docData, baseUri);
        doc.outputSettings().charset(charsetName);
    }
    return doc;
}","public void test1112() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.parseByteData((ByteBuffer) null, (String) null, "";"", (Parser) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.nio.charset.CharsetDecoder"", e);
    }
}",""
"// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support
// switching the chartset midstream when a meta http-equiv tag defines the charset.
// todo - this is getting gnarly. needs a rewrite.
static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    String docData;
    Document doc = null;
    // look for BOM - overrides any other header or input
    if (charsetName == null) {
        // determine from meta. safe parse as UTF-8
        // look for <meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312""> or HTML5 <meta charset=""gb2312"">
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();
        if (meta != null) {
            // if not found, will keep utf-8 as best attempt
            String foundCharset = null;
            if (meta.hasAttr(""http-equiv"")) {
                foundCharset = getCharsetFromContentType(meta.attr(""content""));
            }
            if (foundCharset == null && meta.hasAttr(""charset"")) {
                try {
                    if (Charset.isSupported(meta.attr(""charset""))) {
                        foundCharset = meta.attr(""charset"");
                    }
                } catch (IllegalCharsetNameException e) {
                    foundCharset = null;
                }
            }
            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                // need to re-decode
                foundCharset = foundCharset.trim().replaceAll(""[\""']"", """");
                charsetName = foundCharset;
                byteData.rewind();
                docData = Charset.forName(foundCharset).decode(byteData).toString();
                doc = null;
            }
        }
    } else {
        // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
        docData = Charset.forName(charsetName).decode(byteData).toString();
    }
    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
        byteData.rewind();
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        docData = docData.substring(1);
        charsetName = defaultCharset;
        doc = null;
    }
    if (doc == null) {
        doc = parser.parseInput(docData, baseUri);
        doc.outputSettings().charset(charsetName);
    }
    return doc;
}","public void test1213() throws Throwable {
    Parser parser0 = Parser.htmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData((ByteBuffer) null, """", """", parser0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1314() throws Throwable {
    byte[] byteArray0 = new byte[1];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 66, (byte) 66);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""ps"", """", parser0);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // ps
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1415() throws Throwable {
    Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) sequenceInputStream0, ""HA$xqe}&@"", ""+93d?}"", parser0);
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // HA$xqe}&@
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test1516() throws Throwable {
    FileDescriptor fileDescriptor0 = new FileDescriptor();
    MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
    Parser parser0 = Parser.xmlParser();
    try {
        DataUtil.load((InputStream) mockFileInputStream0, """", ""?6k"", parser0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test1617() throws Throwable {
    byte[] byteArray0 = new byte[3];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1327, (byte) 0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, ""O|uk"", ""track"");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // O|uk
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test1718() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, "",ewW_Cekp\u0001;<T"", "",ewW_Cekp\u0001;<T"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test1819() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) byteArrayInputStream0, """", ""--------------------------------"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test1920() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    try {
        DataUtil.load((InputStream) pipedInputStream0, ""{H$gLRs'Ti^7lA'`1"", ""{H$gLRs'Ti^7lA'`1"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readFileToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2021() throws Throwable {
    File file0 = MockFile.createTempFile(""9al^:|}8b"", ""link"", (File) null);
    // Undeclared exception!
    try {
        DataUtil.load(file0, ""link"", """");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // link
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readFileToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2122() throws Throwable {
    String string0 = ""O\\uHYC<!SsdX>DIw+"";
    File file0 = MockFile.createTempFile(string0, """");
    // Undeclared exception!
    try {
        DataUtil.load(file0, string0, """");
        fail(""Expecting exception: IllegalCharsetNameException"");
    } catch (IllegalCharsetNameException e) {
        //
        // O\\uHYC<!SsdX>DIw+
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readFileToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2223() throws Throwable {
    File file0 = MockFile.createTempFile(""xbw"", ""xbw"");
    // Undeclared exception!
    try {
        DataUtil.load(file0, """", """");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readFileToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test2324() throws Throwable {
    URI uRI0 = MockURI.aFileURI;
    MockFile mockFile0 = new MockFile(uRI0);
    try {
        DataUtil.load((File) mockFile0, (String) null, "".|?W8Nmlf.>\""5Zl"");
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // File does not exist, and RandomAccessFile is not open in write mode
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"static void crossStreams(final InputStream in, final OutputStream out) throws IOException {
    final byte[] buffer = new byte[bufferSize];
    int len;
    while ((len = in.read(buffer)) != -1) {
        out.write(buffer, 0, len);
    }
}","public void test2425() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.crossStreams((InputStream) null, (OutputStream) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}","/**
 * Writes the input stream to the output stream. Doesn't close them.
 * @param in input stream to read from
 * @param out output stream to write to
 * @throws IOException on IO error
 */"
"static void crossStreams(final InputStream in, final OutputStream out) throws IOException {
    final byte[] buffer = new byte[bufferSize];
    int len;
    while ((len = in.read(buffer)) != -1) {
        out.write(buffer, 0, len);
    }
}","public void test2526() throws Throwable {
    byte[] byteArray0 = new byte[7];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-188), 32);
    MockFile mockFile0 = new MockFile(""T59|}~l+$*9vp"");
    MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
    // Undeclared exception!
    try {
        DataUtil.crossStreams(byteArrayInputStream0, mockFileOutputStream0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.ByteArrayInputStream"", e);
    }
}","/**
 * Writes the input stream to the output stream. Doesn't close them.
 * @param in input stream to read from
 * @param out output stream to write to
 * @throws IOException on IO error
 */"
"static void crossStreams(final InputStream in, final OutputStream out) throws IOException {
    final byte[] buffer = new byte[bufferSize];
    int len;
    while ((len = in.read(buffer)) != -1) {
        out.write(buffer, 0, len);
    }
}","public void test2627() throws Throwable {
    PipedInputStream pipedInputStream0 = new PipedInputStream();
    DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
    PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
    try {
        DataUtil.crossStreams(pushbackInputStream0, (OutputStream) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}","/**
 * Writes the input stream to the output stream. Doesn't close them.
 * @param in input stream to read from
 * @param out output stream to write to
 * @throws IOException on IO error
 */"
"static String mimeBoundary() {
    final StringBuilder mime = new StringBuilder(boundaryLength);
    final Random rand = new Random();
    for (int i = 0; i < boundaryLength; i++) {
        mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]);
    }
    return mime.toString();
}","public void test2728() throws Throwable {
    String string0 = DataUtil.mimeBoundary();
    assertEquals(""--------------------------------"", string0);
}","/**
 * Creates a random string, suitable for use as a mime boundary
 */"
"static String getCharsetFromContentType(String contentType) {
    if (contentType == null)
        return null;
    Matcher m = charsetPattern.matcher(contentType);
    if (m.find()) {
        String charset = m.group(1).trim();
        charset = charset.replace(""charset="", """");
        if (charset.length() == 0)
            return null;
        try {
            if (Charset.isSupported(charset))
                return charset;
            charset = charset.toUpperCase(Locale.ENGLISH);
            if (Charset.isSupported(charset))
                return charset;
        } catch (IllegalCharsetNameException e) {
            // if our advanced charset matching fails.... we just take the default
            return null;
        }
    }
    return null;
}","public void test2829() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType(""charset="");
    assertNull(string0);
}","/**
 * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
 * will kick in.)
 * @param contentType e.g. ""text/html; charset=EUC-JP""
 * @return ""EUC-JP"", or null if not found. Charset is trimmed and uppercased.
 */"
"static String getCharsetFromContentType(String contentType) {
    if (contentType == null)
        return null;
    Matcher m = charsetPattern.matcher(contentType);
    if (m.find()) {
        String charset = m.group(1).trim();
        charset = charset.replace(""charset="", """");
        if (charset.length() == 0)
            return null;
        try {
            if (Charset.isSupported(charset))
                return charset;
            charset = charset.toUpperCase(Locale.ENGLISH);
            if (Charset.isSupported(charset))
                return charset;
        } catch (IllegalCharsetNameException e) {
            // if our advanced charset matching fails.... we just take the default
            return null;
        }
    }
    return null;
}","public void test2930() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType((String) null);
    assertNull(string0);
}","/**
 * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
 * will kick in.)
 * @param contentType e.g. ""text/html; charset=EUC-JP""
 * @return ""EUC-JP"", or null if not found. Charset is trimmed and uppercased.
 */"
"static String getCharsetFromContentType(String contentType) {
    if (contentType == null)
        return null;
    Matcher m = charsetPattern.matcher(contentType);
    if (m.find()) {
        String charset = m.group(1).trim();
        charset = charset.replace(""charset="", """");
        if (charset.length() == 0)
            return null;
        try {
            if (Charset.isSupported(charset))
                return charset;
            charset = charset.toUpperCase(Locale.ENGLISH);
            if (Charset.isSupported(charset))
                return charset;
        } catch (IllegalCharsetNameException e) {
            // if our advanced charset matching fails.... we just take the default
            return null;
        }
    }
    return null;
}","public void test3031() throws Throwable {
    String string0 = DataUtil.getCharsetFromContentType(""}]Jv;K9z"");
    assertNull(string0);
}","/**
 * Parse out a charset from a content type header. If the charset is not supported, returns null (so the default
 * will kick in.)
 * @param contentType e.g. ""text/html; charset=EUC-JP""
 * @return ""EUC-JP"", or null if not found. Charset is trimmed and uppercased.
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readFileToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test3132() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((File) null, """", ""org.jsoup.helper.DataUtil"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockRandomAccessFile"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public String baseUri() {
    return baseUri;
}","public void test3233() throws Throwable {
    EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(""}]Jv;K9z"");
    FileSystemHandling.appendStringToFile(evoSuiteFile0, ""u<AGuDMJ"");
    MockFile mockFile0 = new MockFile((String) null, ""}]Jv;K9z"");
    Document document0 = DataUtil.load((File) mockFile0, (String) null, ""keygen"");
    assertEquals(""keygen"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"// reads bytes first into a buffer, then decodes with the appropriate charset. done this way to support
// switching the chartset midstream when a meta http-equiv tag defines the charset.
// todo - this is getting gnarly. needs a rewrite.
static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) {
    String docData;
    Document doc = null;
    // look for BOM - overrides any other header or input
    if (charsetName == null) {
        // determine from meta. safe parse as UTF-8
        // look for <meta http-equiv=""Content-Type"" content=""text/html;charset=gb2312""> or HTML5 <meta charset=""gb2312"">
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        doc = parser.parseInput(docData, baseUri);
        Element meta = doc.select(""meta[http-equiv=content-type], meta[charset]"").first();
        if (meta != null) {
            // if not found, will keep utf-8 as best attempt
            String foundCharset = null;
            if (meta.hasAttr(""http-equiv"")) {
                foundCharset = getCharsetFromContentType(meta.attr(""content""));
            }
            if (foundCharset == null && meta.hasAttr(""charset"")) {
                try {
                    if (Charset.isSupported(meta.attr(""charset""))) {
                        foundCharset = meta.attr(""charset"");
                    }
                } catch (IllegalCharsetNameException e) {
                    foundCharset = null;
                }
            }
            if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) {
                // need to re-decode
                foundCharset = foundCharset.trim().replaceAll(""[\""']"", """");
                charsetName = foundCharset;
                byteData.rewind();
                docData = Charset.forName(foundCharset).decode(byteData).toString();
                doc = null;
            }
        }
    } else {
        // specified by content type header (or by user on file load)
        Validate.notEmpty(charsetName, ""Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML"");
        docData = Charset.forName(charsetName).decode(byteData).toString();
    }
    if (docData.length() > 0 && docData.charAt(0) == UNICODE_BOM) {
        byteData.rewind();
        docData = Charset.forName(defaultCharset).decode(byteData).toString();
        docData = docData.substring(1);
        charsetName = defaultCharset;
        doc = null;
    }
    if (doc == null) {
        doc = parser.parseInput(docData, baseUri);
        doc.outputSettings().charset(charsetName);
    }
    return doc;
}","public void test3436() throws Throwable {
    byte[] byteArray0 = new byte[4];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
    ByteBuffer byteBuffer0 = DataUtil.readToByteBuffer(sequenceInputStream0, (byte) 34);
    Parser parser0 = Parser.xmlParser();
    // Undeclared exception!
    try {
        DataUtil.parseByteData(byteBuffer0, ""K3b"", ""K3b"", parser0);
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // K3b
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}",""
"static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException {
    Validate.isTrue(maxSize >= 0, ""maxSize must be 0 (unlimited) or larger"");
    final boolean capped = maxSize > 0;
    byte[] buffer = new byte[bufferSize];
    ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);
    int read;
    int remaining = maxSize;
    while (true) {
        read = inStream.read(buffer);
        if (read == -1)
            break;
        if (capped) {
            if (read > remaining) {
                outStream.write(buffer, 0, remaining);
                break;
            }
            remaining -= read;
        }
        outStream.write(buffer, 0, read);
    }
    return ByteBuffer.wrap(outStream.toByteArray());
}","public void test3537() throws Throwable {
    PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
    PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
    // Undeclared exception!
    try {
        DataUtil.readToByteBuffer(pipedInputStream0, (-3022));
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // maxSize must be 0 (unlimited) or larger
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Read the input stream into a byte buffer.
 * @param inStream the input stream to read from
 * @param maxSize the maximum size in bytes to read from the stream. Set to 0 to be unlimited.
 * @return the filled byte buffer
 * @throws IOException if an exception occurs whilst reading from the input stream.
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test3638() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Parser parser0 = Parser.htmlParser();
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, ""UTF-8"", ""UTF-8"", parser0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public String baseUri() {
    return baseUri;
}","public void test3739() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""ll"");
    assertEquals(""ll"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String location() {
    return location;
}","public void test3841() throws Throwable {
    byte[] byteArray0 = new byte[8];
    ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    DataUtil.crossStreams(byteArrayInputStream0, byteArrayOutputStream0);
    Document document0 = DataUtil.load((InputStream) byteArrayInputStream0, (String) null, ""ll"");
    assertEquals(""ll"", document0.location());
}","/**
 * Get the URL this Document was parsed from. If the starting URL is a redirect,
 * this will return the final URL from which the document was served from.
 * @return location
 */"
"public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, parser);
}","public void test3942() throws Throwable {
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) null, """", """", (Parser) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.DataUtil"", e);
    }
}","/**
 * Parses a Document from an input steam, using the provided Parser.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @param parser alternate {@link Parser#xmlParser() parser} to use.
 * @return Document
 * @throws IOException on IO error
 */"
"public static Document load(File in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readFileToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test4043() throws Throwable {
    MockFile mockFile0 = new MockFile("""", """");
    try {
        DataUtil.load((File) mockFile0, """", ""@3RgtH}IKUE3Bd"");
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.NativeMockedIO"", e);
    }
}","/**
 * Loads a file to a Document.
 * @param in file to load
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
"public String location() {
    return location;
}","public void test4144() throws Throwable {
    ByteBuffer byteBuffer0 = DataUtil.emptyByteBuffer();
    Parser parser0 = Parser.htmlParser();
    Document document0 = DataUtil.parseByteData(byteBuffer0, (String) null, """", parser0);
    assertEquals("""", document0.location());
}","/**
 * Get the URL this Document was parsed from. If the starting URL is a redirect,
 * this will return the final URL from which the document was served from.
 * @return location
 */"
"public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {
    ByteBuffer byteData = readToByteBuffer(in);
    return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());
}","public void test4246() throws Throwable {
    Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    // Undeclared exception!
    try {
        DataUtil.load((InputStream) sequenceInputStream0, ""content"", ""--------------------------------"");
        fail(""Expecting exception: UnsupportedCharsetException"");
    } catch (UnsupportedCharsetException e) {
        //
        // content
        //
        verifyException(""java.nio.charset.Charset"", e);
    }
}","/**
 * Parses a Document from an input steam.
 * @param in input stream to parse. You will need to close it.
 * @param charsetName character set of input
 * @param baseUri base URI of document, to resolve relative links against
 * @return Document
 * @throws IOException on IO error
 */"
