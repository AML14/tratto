focal_method,test_prefix,docstring
"@Override
public int hashCode() {
    int result = super.hashCode();
    result = 31 * result + (tag != null ? tag.hashCode() : 0);
    return result;
}","public void test000() throws Throwable {
    Document document0 = Document.createShell("""");
    document0.hashCode();
}",""
"protected void outerHtml(StringBuilder accum) {
    new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);
}","public void test011() throws Throwable {
    Document document0 = Document.createShell("""");
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(48);
    Document document1 = document0.outputSettings(document_OutputSettings1);
    StringBuilder stringBuilder0 = new StringBuilder((CharSequence) """");
    document1.outerHtml(stringBuilder0);
}",""
"public Document normalise() {
    Element htmlEl = findFirstElementByTagName(""html"", this);
    if (htmlEl == null)
        htmlEl = appendElement(""html"");
    if (head() == null)
        htmlEl.prependElement(""head"");
    if (body() == null)
        htmlEl.appendElement(""body"");
    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care
    // of. do in inverse order to maintain text order.
    normaliseTextNodes(head());
    normaliseTextNodes(htmlEl);
    normaliseTextNodes(this);
    normaliseStructure(""head"", htmlEl);
    normaliseStructure(""body"", htmlEl);
    ensureMetaCharsetElement();
    return this;
}","public void test022() throws Throwable {
    TextNode textNode0 = new TextNode(""_>]a7|h#'9\""0Sj`W[4"", ""V057A=bIz*i\""|3<sq3"");
    Document document0 = Document.createShell("""");
    document0.setParentNode(textNode0);
    document0.normalise();
}","/**
 *     Normalise the document. This happens after the parse phase so generally does not need to be called.
 *     Moves any text content that is not in the body element into the body.
 *     @return this document after normalisation
 */"
"public void replaceWith(Node in) {
    Validate.notNull(in);
    Validate.notNull(parentNode);
    parentNode.replaceChild(this, in);
}","public void test033() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""s=Tjx%\"""", ""s=Tjx%\"""", true);
    // Undeclared exception!
    try {
        xmlDeclaration0.replaceWith((Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Replace this node in the DOM with the supplied node.
 * @param in the node that will will replace the existing node.
 */"
"protected void reparentChild(Node child) {
    if (child.parentNode != null)
        child.parentNode.removeChild(child);
    child.setParentNode(this);
}","public void test044() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""wnRp-,!q*6*?"", ""wnRp-,!q*6*?"", true);
    TextNode textNode0 = TextNode.createFromEncoded("""", ""wnRp-,!q*6*?"");
    textNode0.reparentChild(xmlDeclaration0);
}",""
"protected void removeChild(Node out) {
    Validate.isTrue(out.parentNode == this);
    final int index = out.siblingIndex;
    childNodes.remove(index);
    reindexChildren(index);
    out.parentNode = null;
}","public void test055() throws Throwable {
    Document document0 = Document.createShell(""F`R^h& qTEYfB{"");
    Document document1 = (Document) document0.appendChild(document0);
    document1.removeChild(document0);
}",""
"protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {
    accum.append(""\n"").append(StringUtil.padding(depth * out.indentAmount()));
}","public void test066() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""F!dPV6AR3rv2KD"", ""'~|)F;y5jFWP>"");
    StringBuilder stringBuilder0 = new StringBuilder(""abs:"");
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    textNode0.indent(stringBuilder0, 0, document_OutputSettings0);
}",""
"protected void addChildren(int index, Node... children) {
    Validate.noNullElements(children);
    ensureChildNodes();
    for (int i = children.length - 1; i >= 0; i--) {
        Node in = children[i];
        reparentChild(in);
        childNodes.add(index, in);
    }
    reindexChildren(index);
}","public void test077() throws Throwable {
    Document document0 = new Document(""8l0ew#'-vz"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    document0.addChildren(0, nodeArray0);
}",""
"protected void setSiblingIndex(int siblingIndex) {
    this.siblingIndex = siblingIndex;
}","public void test088() throws Throwable {
    Document document0 = Document.createShell(""bzMh%v{<0[Kf[K"");
    document0.setSiblingIndex(39);
}",""
"protected void ensureChildNodes() {
    if (childNodes == EMPTY_NODES) {
        childNodes = new ArrayList<Node>(4);
    }
}","public void test099() throws Throwable {
    Document document0 = Document.createShell(""#text"");
    document0.ensureChildNodes();
}",""
"@Override
public Element before(Node node) {
    return (Element) super.before(node);
}","public void test1010() throws Throwable {
    Tag tag0 = Tag.valueOf(""#text"");
    TextNode textNode0 = new TextNode("".Pj\""ey'U>5"", "".Pj\""ey'U>5"");
    Attributes attributes0 = textNode0.attributes();
    FormElement formElement0 = new FormElement(tag0, ""#text"", attributes0);
    Document document0 = Document.createShell("".Pj\""ey'U>5"");
    document0.appendChild(formElement0);
    formElement0.before((Node) document0);
}","/**
 * Insert the specified node into the DOM before this node (as a preceding sibling).
 * @param node to add before this element
 * @return this Element, for chaining
 * @see #after(Node)
 */"
"public Node traverse(NodeVisitor nodeVisitor) {
    Validate.notNull(nodeVisitor);
    NodeTraversor traversor = new NodeTraversor(nodeVisitor);
    traversor.traverse(this);
    return this;
}","public void test1111() throws Throwable {
    Document document0 = Document.createShell("""");
    NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
    document0.traverse(nodeVisitor0);
}","/**
 * Perform a depth-first traversal through this node and its descendants.
 * @param nodeVisitor the visitor callbacks to perform on each node
 * @return this node, for chaining
 */"
"public String toString() {
    return outerHtml();
}","public void test1212() throws Throwable {
    Document document0 = Document.createShell(""TagOpen"");
    document0.toString();
}",""
"public Node removeAttr(String attributeKey) {
    Validate.notNull(attributeKey);
    attributes.remove(attributeKey);
    return this;
}","public void test1313() throws Throwable {
    Document document0 = Document.createShell(""]._GfgtZw"");
    Element element0 = document0.head();
    element0.removeAttr(""8l0ew#'-vz"");
}","/**
 * Remove an attribute from this element.
 * @param attributeKey The attribute to remove.
 * @return this (for chaining)
 */"
"@Override
public final Element parent() {
    return (Element) parentNode;
}","public void test1414() throws Throwable {
    Document document0 = new Document(""CV=j)~@|qSj-h`"");
    Document document1 = document0.normalise();
    Element element0 = document1.head();
    element0.parent();
}",""
"@Override
public final Element parent() {
    return (Element) parentNode;
}","public void test1515() throws Throwable {
    Document document0 = Document.createShell(""Xs*@5EX"");
    document0.appendChild(document0);
    document0.parent();
}",""
"public Document ownerDocument() {
    if (this instanceof Document)
        return (Document) this;
    else if (parentNode == null)
        return null;
    else
        return parentNode.ownerDocument();
}","public void test1616() throws Throwable {
    Document document0 = new Document("""");
    document0.ownerDocument();
}","/**
 * Gets the Document associated with this Node.
 * @return the Document associated with this Node, or null if there is no such Document.
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1717() throws Throwable {
    Document document0 = Document.createShell(""#text"");
    document0.nodeName();
}",""
"// if this node has no document (or parent), retrieve the default output settings
Document.OutputSettings getOutputSettings() {
    return ownerDocument() != null ? ownerDocument().outputSettings() : (new Document("""")).outputSettings();
}","public void test1818() throws Throwable {
    Document document0 = Document.createShell(""#text"");
    Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
    Document document1 = document0.outputSettings(document_OutputSettings0);
    document_OutputSettings0.prettyPrint(false);
    document1.getOutputSettings();
}",""
"// if this node has no document (or parent), retrieve the default output settings
Document.OutputSettings getOutputSettings() {
    return ownerDocument() != null ? ownerDocument().outputSettings() : (new Document("""")).outputSettings();
}","public void test1919() throws Throwable {
    Comment comment0 = new Comment(""eQ>"", ""eQ>"");
    comment0.getOutputSettings();
}",""
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (o == null || getClass() != o.getClass())
        return false;
    if (!super.equals(o))
        return false;
    TextNode textNode = (TextNode) o;
    return !(text != null ? !text.equals(textNode.text) : textNode.text != null);
}","public void test2020() throws Throwable {
    TextNode textNode0 = new TextNode(""[%I/,&4uJ(["", ""#text"");
    textNode0.equals(""#text"");
}",""
"/*
     * Return a clone of the node using the given parent (which can be null).
     * Not a deep copy of children.
     */
protected Node doClone(Node parent) {
    Node clone;
    try {
        clone = (Node) super.clone();
    } catch (CloneNotSupportedException e) {
        throw new RuntimeException(e);
    }
    // can be null, to create an orphan split
    clone.parentNode = parent;
    clone.siblingIndex = parent == null ? 0 : siblingIndex;
    clone.attributes = attributes != null ? attributes.clone() : null;
    clone.baseUri = baseUri;
    clone.childNodes = new ArrayList<Node>(childNodes.size());
    for (Node child : childNodes) clone.childNodes.add(child);
    return clone;
}","public void test2121() throws Throwable {
    Document document0 = new Document(""e)?W\""u=jdE\"""");
    Comment comment0 = new Comment(""abs:"", ""PekqQ2W~"");
    comment0.doClone(document0);
}",""
"/*
     * Return a clone of the node using the given parent (which can be null).
     * Not a deep copy of children.
     */
protected Node doClone(Node parent) {
    Node clone;
    try {
        clone = (Node) super.clone();
    } catch (CloneNotSupportedException e) {
        throw new RuntimeException(e);
    }
    // can be null, to create an orphan split
    clone.parentNode = parent;
    clone.siblingIndex = parent == null ? 0 : siblingIndex;
    clone.attributes = attributes != null ? attributes.clone() : null;
    clone.baseUri = baseUri;
    clone.childNodes = new ArrayList<Node>(childNodes.size());
    for (Node child : childNodes) clone.childNodes.add(child);
    return clone;
}","public void test2222() throws Throwable {
    Document document0 = Document.createShell(""B;Hfj&J"");
    document0.doClone(document0);
}",""
"@Override
public Document clone() {
    Document clone = (Document) super.clone();
    clone.outputSettings = this.outputSettings.clone();
    return clone;
}","public void test2323() throws Throwable {
    Document document0 = Document.createShell(""#text"");
    document0.clone();
}",""
"protected Node[] childNodesAsArray() {
    return childNodes.toArray(new Node[childNodeSize()]);
}","public void test2424() throws Throwable {
    Document document0 = Document.createShell(""Xs*@5EX"");
    document0.childNodesAsArray();
}",""
"@Override
public Element before(String html) {
    return (Element) super.before(html);
}","public void test2525() throws Throwable {
    Document document0 = Document.createShell(""org.jsoup.nodes.Node$OuterHtmlVisitor"");
    Element element0 = document0.prependElement(""clas"");
    element0.before(""org.jsoup.nodes.Node$OuterHtmlVisitor"");
}","/**
 * Insert the specified HTML into the DOM before this element (as a preceding sibling).
 *
 * @param html HTML to add before this element
 * @return this element, for chaining
 * @see #after(String)
 */"
"public Node before(String html) {
    addSiblingHtml(siblingIndex, html);
    return this;
}","public void test2626() throws Throwable {
    Document document0 = Document.createShell("""");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    document0.addChildren(nodeArray0);
    nodeArray0[1].before(""'rOh*d+Lic:-!"");
}","/**
 * Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling).
 * @param html HTML to add before this node
 * @return this node, for chaining
 * @see #after(String)
 */"
"@Override
public Element after(Node node) {
    return (Element) super.after(node);
}","public void test2727() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = document0.clone();
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document1;
    nodeArray0[2] = (Node) document1;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document1;
    nodeArray0[5] = (Node) document1;
    nodeArray0[6] = (Node) document0;
    document1.addChildren(nodeArray0);
    document1.after((Node) document0);
}","/**
 * Insert the specified node into the DOM after this node (as a following sibling).
 * @param node to add after this element
 * @return this element, for chaining
 * @see #before(Node)
 */"
"public Node wrap(String html) {
    Validate.notEmpty(html);
    Element context = parent() instanceof Element ? (Element) parent() : null;
    List<Node> wrapChildren = Parser.parseFragment(html, context, baseUri());
    Node wrapNode = wrapChildren.get(0);
    if (// nothing to wrap with; noop
    wrapNode == null || !(wrapNode instanceof Element))
        return null;
    Element wrap = (Element) wrapNode;
    Element deepest = getDeepChild(wrap);
    parentNode.replaceChild(this, wrap);
    deepest.addChildren(this);
    // remainder (unbalanced wrap, like <div></div><p></p> -- The <p> is remainder
    if (wrapChildren.size() > 0) {
        for (int i = 0; i < wrapChildren.size(); i++) {
            Node remainder = wrapChildren.get(i);
            remainder.parentNode.removeChild(remainder);
            wrap.appendChild(remainder);
        }
    }
    return this;
}","public void test2828() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("""", "" F,,%C3muSk&bx!K8VG"");
    // Undeclared exception!
    try {
        textNode0.wrap("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Wrap the supplied HTML around this node.
 *     @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 *     @return this node, for chaining.
 */"
"public Node unwrap() {
    Validate.notNull(parentNode);
    Node firstChild = childNodes.size() > 0 ? childNodes.get(0) : null;
    parentNode.addChildren(siblingIndex, this.childNodesAsArray());
    this.remove();
    return firstChild;
}","public void test2929() throws Throwable {
    DataNode dataNode0 = new DataNode(""tq?:bUCasT<"", """");
    // Undeclared exception!
    try {
        dataNode0.unwrap();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Removes this node from the DOM, and moves its children up into the node's parent. This has the effect of dropping
 * the node but keeping its children.
 * <p>
 * For example, with the input html:
 * </p>
 * <p>{@code <div>One <span>Two <b>Three</b></span></div>}</p>
 * Calling {@code element.unwrap()} on the {@code span} element will result in the html:
 * <p>{@code <div>One Two <b>Three</b></div>}</p>
 * and the {@code ""Two ""} {@link TextNode} being returned.
 *
 * @return the first child of this node, after the node has been unwrapped. Null if the node had no children.
 * @see #remove()
 * @see #wrap(String)
 */"
"public String toString() {
    return outerHtml();
}","public void test3030() throws Throwable {
    Document document0 = new Document(""i:)K%Q`1L1fTx1k0l"");
    document0.prependChild(document0);
    // Undeclared exception!
    document0.toString();
}",""
"protected void replaceChild(Node out, Node in) {
    Validate.isTrue(out.parentNode == this);
    Validate.notNull(in);
    if (in.parentNode != null)
        in.parentNode.removeChild(in);
    final int index = out.siblingIndex;
    childNodes.set(index, in);
    in.parentNode = this;
    in.setSiblingIndex(index);
    out.parentNode = null;
}","public void test3131() throws Throwable {
    Document document0 = Document.createShell(""=*>cz@9R#W8%Q&d"");
    Tag tag0 = document0.tag();
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, ""=*>cz@9R#W8%Q&d"", attributes0);
    // Undeclared exception!
    try {
        formElement0.replaceChild((Node) null, document0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}",""
"protected void reparentChild(Node child) {
    if (child.parentNode != null)
        child.parentNode.removeChild(child);
    child.setParentNode(this);
}","public void test3232() throws Throwable {
    Document document0 = Document.createShell(""(s>xIjA]71~Jy"");
    // Undeclared exception!
    try {
        document0.reparentChild((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}",""
"public void remove() {
    Validate.notNull(parentNode);
    parentNode.removeChild(this);
}","public void test3333() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""1-EQ:+\""ti!L3bRU&F"", ""1-EQ:+\""ti!L3bRU&F"");
    TextNode textNode1 = textNode0.text(""1-EQ:+\""ti!L3bRU&F"");
    textNode1.parentNode = (Node) textNode0;
    // Undeclared exception!
    try {
        textNode1.parentNode.remove();
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.AbstractList"", e);
    }
}","/**
 * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.
 */"
"protected void outerHtml(StringBuilder accum) {
    new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this);
}","public void test3434() throws Throwable {
    Document document0 = Document.createShell(""TagOpen"");
    // Undeclared exception!
    try {
        document0.outerHtml((StringBuilder) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {
    accum.append(""\n"").append(StringUtil.padding(depth * out.indentAmount()));
}","public void test3535() throws Throwable {
    Document document0 = Document.createShell("" version=\"""");
    StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "" version=\"""");
    // Undeclared exception!
    try {
        document0.indent(stringBuilder0, (-2984), (Document.OutputSettings) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public boolean hasAttr(String attributeKey) {
    Validate.notNull(attributeKey);
    if (attributeKey.startsWith(""abs:"")) {
        String key = attributeKey.substring(""abs:"".length());
        if (attributes.hasKey(key) && !absUrl(key).equals(""""))
            return true;
    }
    return attributes.hasKey(attributeKey);
}","public void test3636() throws Throwable {
    Comment comment0 = new Comment(""eQ>"", ""$ 3[Z~zTxi"");
    // Undeclared exception!
    try {
        comment0.hasAttr((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Test if this element has an attribute.
 * @param attributeKey The attribute key to check.
 * @return true if the attribute exists, false if not.
 */"
"public Node childNode(int index) {
    return childNodes.get(index);
}","public void test3737() throws Throwable {
    Document document0 = new Document(""tic!"");
    document0.appendText(""tic!"");
    // Undeclared exception!
    try {
        document0.childNode((-106223338));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 *     Get a child node by its 0-based index.
 *     @param index index of child node
 *     @return the child node at this index. Throws a {@code IndexOutOfBoundsException} if the index is out of bounds.
 */"
"public Element attr(String attributeKey, String attributeValue) {
    super.attr(attributeKey, attributeValue);
    return this;
}","public void test3838() throws Throwable {
    Document document0 = new Document("";48HOnOd#ch0<},u^["");
    // Undeclared exception!
    try {
        document0.attr((String) null, "";48HOnOd#ch0<},u^["");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Set an attribute value on this element. If this element already has an attribute with the
 * key, its value is updated; otherwise, a new attribute is added.
 *
 * @return this element
 */"
"public String attr(String attributeKey) {
    Validate.notNull(attributeKey);
    if (attributes.hasKey(attributeKey))
        return attributes.get(attributeKey);
    else if (attributeKey.toLowerCase().startsWith(""abs:""))
        return absUrl(attributeKey.substring(""abs:"".length()));
    else
        return """";
}","public void test3939() throws Throwable {
    Document document0 = Document.createShell(""F`R^h& qTEYfB{"");
    // Undeclared exception!
    try {
        document0.attr((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Get an attribute's value by its key.
 * <p>
 * To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>,
 * which is a shortcut to the {@link #absUrl} method.
 * </p>
 * E.g.:
 * <blockquote><code>String url = a.attr(""abs:href"");</code></blockquote>
 *
 * @param attributeKey The attribute key.
 * @return The attribute, or empty string if not present (to avoid nulls).
 * @see #attributes()
 * @see #hasAttr(String)
 * @see #absUrl(String)
 */"
"public Node after(String html) {
    addSiblingHtml(siblingIndex + 1, html);
    return this;
}","public void test4040() throws Throwable {
    TextNode textNode0 = new TextNode("""", "";b^!-."");
    // Undeclared exception!
    try {
        textNode0.after("";b^!-."");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified HTML into the DOM after this node (i.e. as a following sibling).
 * @param html HTML to add after this node
 * @return this node, for chaining
 * @see #before(String)
 */"
"protected void addChildren(Node... children) {
    //most used. short circuit addChildren(int), which hits reindex children and array copy
    for (Node child : children) {
        reparentChild(child);
        ensureChildNodes();
        childNodes.add(child);
        child.setSiblingIndex(childNodes.size() - 1);
    }
}","public void test4141() throws Throwable {
    Document document0 = Document.createShell(""F`R^h& qTEYfB{"");
    // Undeclared exception!
    try {
        document0.addChildren((Node[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}",""
"protected void addChildren(int index, Node... children) {
    Validate.noNullElements(children);
    ensureChildNodes();
    for (int i = children.length - 1; i >= 0; i--) {
        Node in = children[i];
        reparentChild(in);
        childNodes.add(index, in);
    }
    reindexChildren(index);
}","public void test4242() throws Throwable {
    Document document0 = Document.createShell("""");
    // Undeclared exception!
    try {
        document0.addChildren(0, (Node[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"protected void addChildren(int index, Node... children) {
    Validate.noNullElements(children);
    ensureChildNodes();
    for (int i = children.length - 1; i >= 0; i--) {
        Node in = children[i];
        reparentChild(in);
        childNodes.add(index, in);
    }
    reindexChildren(index);
}","public void test4343() throws Throwable {
    Document document0 = new Document("""");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    // Undeclared exception!
    try {
        document0.addChildren((-2368), nodeArray0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -2368, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"public String absUrl(String attributeKey) {
    Validate.notEmpty(attributeKey);
    if (!hasAttr(attributeKey)) {
        // nothing to make absolute with
        return """";
    } else {
        return StringUtil.resolve(baseUri, attr(attributeKey));
    }
}","public void test4444() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration("""", """", false);
    // Undeclared exception!
    try {
        xmlDeclaration0.absUrl("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href&gt;</code> or
 * <code>&lt;img src&gt;</code>).
 * <p>
 * E.g.: <code>String absUrl = linkEl.absUrl(""href"");</code>
 * </p>
 * <p>
 * If the attribute value is already absolute (i.e. it starts with a protocol, like
 * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
 * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
 * absolute using that.
 * </p>
 * <p>
 * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
 * <code>String absUrl = linkEl.attr(""abs:href"");</code>
 * </p>
 *
 * @param attributeKey The attribute key
 * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
 * could not be made successfully into a URL.
 * @see #attr
 * @see java.net.URL#URL(java.net.URL, String)
 */"
"public Node nextSibling() {
    if (parentNode == null)
        // root
        return null;
    final List<Node> siblings = parentNode.childNodes;
    final int index = siblingIndex + 1;
    if (siblings.size() > index)
        return siblings.get(index);
    else
        return null;
}","public void test4545() throws Throwable {
    Comment comment0 = new Comment("""", ""`V;I`35Rf"");
    Node node0 = comment0.nextSibling();
    assertNull(node0);
}","/**
 *     Get this node's next sibling.
 *     @return next sibling, or null if this is the last sibling
 */"
"@Override
public Element wrap(String html) {
    return (Element) super.wrap(html);
}","public void test4646() throws Throwable {
    Document document0 = new Document(""K.i52T"");
    // Undeclared exception!
    try {
        document0.wrap(""option"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}","/**
 * Wrap the supplied HTML around this element.
 *
 * @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 * @return this element, for chaining.
 */"
"public Node wrap(String html) {
    Validate.notEmpty(html);
    Element context = parent() instanceof Element ? (Element) parent() : null;
    List<Node> wrapChildren = Parser.parseFragment(html, context, baseUri());
    Node wrapNode = wrapChildren.get(0);
    if (// nothing to wrap with; noop
    wrapNode == null || !(wrapNode instanceof Element))
        return null;
    Element wrap = (Element) wrapNode;
    Element deepest = getDeepChild(wrap);
    parentNode.replaceChild(this, wrap);
    deepest.addChildren(this);
    // remainder (unbalanced wrap, like <div></div><p></p> -- The <p> is remainder
    if (wrapChildren.size() > 0) {
        for (int i = 0; i < wrapChildren.size(); i++) {
            Node remainder = wrapChildren.get(i);
            remainder.parentNode.removeChild(remainder);
            wrap.appendChild(remainder);
        }
    }
    return this;
}","public void test4747() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("".Ly+Cw;O"", ""org.jsoup.nodes.Node$1"");
    // Undeclared exception!
    try {
        textNode0.wrap("".Ly+Cw;O"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}","/**
 *     Wrap the supplied HTML around this node.
 *     @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 *     @return this node, for chaining.
 */"
"public Document ownerDocument() {
    if (this instanceof Document)
        return (Document) this;
    else if (parentNode == null)
        return null;
    else
        return parentNode.ownerDocument();
}","public void test4848() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""7Jsq@*k[Yk"", ""7Jsq@*k[Yk"");
    Document document0 = textNode0.ownerDocument();
    assertNull(document0);
}","/**
 * Gets the Document associated with this Node.
 * @return the Document associated with this Node, or null if there is no such Document.
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test4949() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.body();
    element0.ownerDocument();
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean hasAttr(String attributeKey) {
    Validate.notNull(attributeKey);
    if (attributeKey.startsWith(""abs:"")) {
        String key = attributeKey.substring(""abs:"".length());
        if (attributes.hasKey(key) && !absUrl(key).equals(""""))
            return true;
    }
    return attributes.hasKey(attributeKey);
}","public void test5050() throws Throwable {
    Document document0 = Document.createShell(""6UG3"");
    boolean boolean0 = document0.hasAttr(""6UG3"");
    assertFalse(boolean0);
}","/**
 * Test if this element has an attribute.
 * @param attributeKey The attribute key to check.
 * @return true if the attribute exists, false if not.
 */"
"public String attr(String attributeKey) {
    Validate.notNull(attributeKey);
    if (attributes.hasKey(attributeKey))
        return attributes.get(attributeKey);
    else if (attributeKey.toLowerCase().startsWith(""abs:""))
        return absUrl(attributeKey.substring(""abs:"".length()));
    else
        return """";
}","public void test5151() throws Throwable {
    Document document0 = new Document("""");
    String string0 = document0.attr(""#document"");
    assertEquals("""", string0);
}","/**
 * Get an attribute's value by its key.
 * <p>
 * To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>,
 * which is a shortcut to the {@link #absUrl} method.
 * </p>
 * E.g.:
 * <blockquote><code>String url = a.attr(""abs:href"");</code></blockquote>
 *
 * @param attributeKey The attribute key.
 * @return The attribute, or empty string if not present (to avoid nulls).
 * @see #attributes()
 * @see #hasAttr(String)
 * @see #absUrl(String)
 */"
"public Node after(Node node) {
    Validate.notNull(node);
    Validate.notNull(parentNode);
    parentNode.addChildren(siblingIndex + 1, node);
    return this;
}","public void test5252() throws Throwable {
    TextNode textNode0 = new TextNode(""org.jsoup.nodes.Node"", ""cg5J<"");
    Document document0 = new Document(""@wFn#Teo$gd)"");
    // Undeclared exception!
    try {
        textNode0.after((Node) document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified node into the DOM after this node (i.e. as a following sibling).
 * @param node to add after this node
 * @return this node, for chaining
 * @see #before(Node)
 */"
"public final Node parentNode() {
    return parentNode;
}","public void test5353() throws Throwable {
    Document document0 = Document.createShell("""");
    Node node0 = document0.parentNode();
    assertNull(node0);
}","/**
 *     Gets this node's parent node. Node overridable by extending classes, so useful if you really just need the Node type.
 *     @return parent node; or null if no parent.
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test5454() throws Throwable {
    DataNode dataNode0 = new DataNode(""abs:"", ""abs:"");
    int int0 = dataNode0.childNodeSize();
    assertEquals(0, int0);
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test5555() throws Throwable {
    Document document0 = new Document("""");
    NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
    Document document1 = (Document) document0.traverse(nodeVisitor0);
    assertFalse(document1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Node before(Node node) {
    Validate.notNull(node);
    Validate.notNull(parentNode);
    parentNode.addChildren(siblingIndex, node);
    return this;
}","public void test5656() throws Throwable {
    DocumentType documentType0 = new DocumentType("")Li-p;e\""^JD!w d3S"", ""v/hxrdc"", ""1wi|)69inibTwJvLT"", ""{5FDsD$u"");
    Document document0 = new Document(""v/hxrdc"");
    // Undeclared exception!
    try {
        documentType0.before((Node) document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified node into the DOM before this node (i.e. as a preceding sibling).
 * @param node to add before this node
 * @return this node, for chaining
 * @see #after(Node)
 */"
"public Node before(String html) {
    addSiblingHtml(siblingIndex, html);
    return this;
}","public void test5757() throws Throwable {
    DataNode dataNode0 = new DataNode("""", """");
    // Undeclared exception!
    try {
        dataNode0.before(""sP`u+I ,=U*"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the specified HTML into the DOM before this node (i.e. as a preceding sibling).
 * @param html HTML to add before this node
 * @return this node, for chaining
 * @see #after(String)
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test5959() throws Throwable {
    Document document0 = Document.createShell(""thead"");
    int int0 = document0.siblingIndex();
    assertEquals(0, int0);
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test6060() throws Throwable {
    Document document0 = Document.createShell(""org.jsoup.select.Evaluator$Attribute"");
    String string0 = document0.baseUri();
    assertEquals(""org.jsoup.select.Evaluator$Attribute"", string0);
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Node parent() {
    return parentNode;
}","public void test6161() throws Throwable {
    Comment comment0 = new Comment(""eQ>"", ""$ 38]~zTxx$i"");
    Node node0 = comment0.parent();
    assertNull(node0);
}","/**
 *     Gets this node's parent node.
 *     @return parent node; or null if no parent.
 */"
"public Node childNode(int index) {
    return childNodes.get(index);
}","public void test6262() throws Throwable {
    Comment comment0 = new Comment(""eQ>"", "" 38]~zTx$i"");
    // Undeclared exception!
    try {
        comment0.childNode(4);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 4
        //
        verifyException(""java.util.Collections$EmptyList"", e);
    }
}","/**
 *     Get a child node by its 0-based index.
 *     @param index index of child node
 *     @return the child node at this index. Throws a {@code IndexOutOfBoundsException} if the index is out of bounds.
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test6363() throws Throwable {
    Comment comment0 = new Comment(""eQ>"", ""eQ>"");
    Node node0 = comment0.attr(""\n"", ""?gL"");
    assertEquals(0, node0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public Node clone() {
    // splits for orphan
    Node thisClone = doClone(null);
    // Queue up nodes that need their children cloned (BFS).
    LinkedList<Node> nodesToProcess = new LinkedList<Node>();
    nodesToProcess.add(thisClone);
    while (!nodesToProcess.isEmpty()) {
        Node currParent = nodesToProcess.remove();
        for (int i = 0; i < currParent.childNodes.size(); i++) {
            Node childClone = currParent.childNodes.get(i).doClone(currParent);
            currParent.childNodes.set(i, childClone);
            nodesToProcess.add(childClone);
        }
    }
    return thisClone;
}","public void test6464() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("",sCr%h"", "",sCr%h"");
    Node node0 = textNode0.clone();
    assertNotSame(node0, textNode0);
}","/**
 * Create a stand-alone, deep copy of this node, and all of its children. The cloned node will have no siblings or
 * parent node. As a stand-alone object, any changes made to the clone or any of its children will not impact the
 * original node.
 * <p>
 * The cloned node may be adopted into another Document or node structure using {@link Element#appendChild(Node)}.
 * @return stand-alone cloned node
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test6466() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("",sCr%h"", "",sCr%h"");
    Node node0 = textNode0.clone();
    assertEquals(0, node0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public int hashCode() {
    int result = childNodes != null ? childNodes.hashCode() : 0;
    result = 31 * result + (attributes != null ? attributes.hashCode() : 0);
    return result;
}","public void test6567() throws Throwable {
    Comment comment0 = new Comment(""eQ>"", ""$ 3[Z~zTxi"");
    comment0.hashCode();
}","/**
 * Calculates a hash code for this node, which includes iterating all its attributes, and recursing into any child
 * nodes. This means that a node's hashcode is based on it and its child content, and not its parent or place in the
 * tree. So two nodes with the same content, regardless of their position in the tree, will have the same hashcode.
 * @return the calculated hashcode
 * @see Node#equals(Object)
 */"
"public Node previousSibling() {
    if (parentNode == null)
        // root
        return null;
    if (siblingIndex > 0)
        return parentNode.childNodes.get(siblingIndex - 1);
    else
        return null;
}","public void test6668() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""2$\""4\""!NJW,?j f;"", ""2$\""4\""!NJW,?j f;"");
    Node node0 = dataNode0.previousSibling();
    assertNull(node0);
}","/**
 *     Get this node's previous sibling.
 *     @return the previous sibling, or null if this is the first sibling
 */"
"protected void removeChild(Node out) {
    Validate.isTrue(out.parentNode == this);
    final int index = out.siblingIndex;
    childNodes.remove(index);
    reindexChildren(index);
    out.parentNode = null;
}","public void test6870() throws Throwable {
    Comment comment0 = new Comment(""eQ>"", ""$ 3[Z~zTxi"");
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""7NS %8!("", ""$ 3[Z~zTxi"", false);
    // Undeclared exception!
    try {
        comment0.removeChild(xmlDeclaration0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"protected void replaceChild(Node out, Node in) {
    Validate.isTrue(out.parentNode == this);
    Validate.notNull(in);
    if (in.parentNode != null)
        in.parentNode.removeChild(in);
    final int index = out.siblingIndex;
    childNodes.set(index, in);
    in.parentNode = this;
    in.setSiblingIndex(index);
    out.parentNode = null;
}","public void test6971() throws Throwable {
    Document document0 = new Document(""6,FWe48IGtmGTkXj<"");
    DocumentType documentType0 = new DocumentType("""", ""6,FWe48IGtmGTkXj<"", """", ""6,FWe48IGtmGTkXj<"");
    // Undeclared exception!
    try {
        documentType0.replaceChild(document0, document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
public Element wrap(String html) {
    return (Element) super.wrap(html);
}","public void test7072() throws Throwable {
    Document document0 = Document.createShell(""TagOpen"");
    document0.setParentNode(document0);
    Element element0 = document0.wrap(""TagOpen"");
    assertNull(element0);
}","/**
 * Wrap the supplied HTML around this element.
 *
 * @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 * @return this element, for chaining.
 */"
"public final int childNodeSize() {
    return childNodes.size();
}","public void test7173() throws Throwable {
    Document document0 = new Document(""i:)K%Q`1L1fTx1k0l"");
    document0.prependChild(document0);
    assertEquals(1, document0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test7174() throws Throwable {
    Document document0 = new Document(""i:)K%Q`1L1fTx1k0l"");
    document0.prependChild(document0);
    document0.after(""clas"");
    assertEquals(0, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Node after(String html) {
    addSiblingHtml(siblingIndex + 1, html);
    return this;
}","public void test7275() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("",sCr%h"", "",sCr%h"");
    TextNode textNode1 = TextNode.createFromEncoded("",sCr%h"", "",sCr%h"");
    textNode1.parentNode = (Node) textNode0;
    // Undeclared exception!
    try {
        textNode1.after("",sCr%h"");
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 1, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 * Insert the specified HTML into the DOM after this node (i.e. as a following sibling).
 * @param html HTML to add after this node
 * @return this node, for chaining
 * @see #before(String)
 */"
"public String absUrl(String attributeKey) {
    Validate.notEmpty(attributeKey);
    if (!hasAttr(attributeKey)) {
        // nothing to make absolute with
        return """";
    } else {
        return StringUtil.resolve(baseUri, attr(attributeKey));
    }
}","public void test7578() throws Throwable {
    Document document0 = Document.createShell(""cB"");
    String string0 = document0.absUrl(""abs:declaration"");
    assertEquals("""", string0);
}","/**
 * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href&gt;</code> or
 * <code>&lt;img src&gt;</code>).
 * <p>
 * E.g.: <code>String absUrl = linkEl.absUrl(""href"");</code>
 * </p>
 * <p>
 * If the attribute value is already absolute (i.e. it starts with a protocol, like
 * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
 * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
 * absolute using that.
 * </p>
 * <p>
 * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
 * <code>String absUrl = linkEl.attr(""abs:href"");</code>
 * </p>
 *
 * @param attributeKey The attribute key
 * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
 * could not be made successfully into a URL.
 * @see #attr
 * @see java.net.URL#URL(java.net.URL, String)
 */"
"@Override
public String attr(String attributeKey) {
    ensureAttributes();
    return super.attr(attributeKey);
}","public void test7679() throws Throwable {
    TextNode textNode0 = new TextNode(""abs:publicid"", ""abs:publicid"");
    String string0 = textNode0.attr(""abs:publicid"");
    assertEquals("""", string0);
}",""
"public Element addClass(String className) {
    Validate.notNull(className);
    Set<String> classes = classNames();
    classes.add(className);
    classNames(classes);
    return this;
}","public void test7780() throws Throwable {
    Document document0 = Document.createShell("""");
    document0.removeClass(""#emJ^bQ? uQNA!"");
    Element element0 = document0.addClass(""`"");
    assertSame(element0, document0);
}","/**
 *     Add a class name to this element's {@code class} attribute.
 *     @param className class name to add
 *     @return this element
 */"
"public Attributes attributes() {
    return attributes;
}","public void test7881() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""vI+"", """", false);
    Attributes attributes0 = xmlDeclaration0.attributes();
    assertNotNull(attributes0);
}","/**
 * Get all of the element's attributes.
 * @return attributes (which implements iterable, in same order as presented in original HTML).
 */"
"public void replaceWith(Node in) {
    Validate.notNull(in);
    Validate.notNull(parentNode);
    parentNode.replaceChild(this, in);
}","public void test7982() throws Throwable {
    TextNode textNode0 = new TextNode("""", """");
    // Undeclared exception!
    try {
        textNode0.replaceWith(textNode0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Replace this node in the DOM with the supplied node.
 * @param in the node that will will replace the existing node.
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test8083() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("",sCr%h"", "",sCr%h"");
    textNode0.outerHtml();
    assertEquals(0, textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test8184() throws Throwable {
    Document document0 = Document.createShell(""Xs*@5EX"");
    Node node0 = document0.removeAttr(""abs:systemid"");
    assertEquals(0, node0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public void remove() {
    Validate.notNull(parentNode);
    parentNode.removeChild(this);
}","public void test8285() throws Throwable {
    Tag tag0 = Tag.valueOf(""~b"");
    Attributes attributes0 = new Attributes();
    FormElement formElement0 = new FormElement(tag0, """", attributes0);
    // Undeclared exception!
    try {
        formElement0.remove();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.
 */"
"protected Node[] childNodesAsArray() {
    return childNodes.toArray(new Node[childNodeSize()]);
}","public void test8386() throws Throwable {
    Comment comment0 = new Comment(""eQ>"", ""$ 3[Z~zTxi"");
    Node[] nodeArray0 = comment0.childNodesAsArray();
    assertEquals(0, nodeArray0.length);
}",""
"public final int childNodeSize() {
    return childNodes.size();
}","public void test8487() throws Throwable {
    Comment comment0 = new Comment(""eQ>"", ""$ 3[Z~zTxi"");
    comment0.setBaseUri(""$ 3[Z~zTxi"");
    assertEquals(0, comment0.childNodeSize());
}","/**
 * Get the number of child nodes that this node holds.
 * @return the number of child nodes that this node holds.
 */"
