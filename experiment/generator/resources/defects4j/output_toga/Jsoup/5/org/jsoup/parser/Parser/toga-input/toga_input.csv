focal_method,test_prefix,docstring
"public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
    Parser parser = new Parser(bodyHtml, baseUri, true);
    parser.relaxed = true;
    return parser.parse();
}","public void test000() throws Throwable {
    // Undeclared exception!
    try {
        Parser.parseBodyFragmentRelaxed(""a&*Nq@+@<E{eZ\"" "", ""a.cgoz*=:06"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 *     Parse a fragment of HTML into the {@code body} of a Document, with relaxed parsing enabled. Relaxed, in this
 *     context, means that implicit tags are not automatically created when missing.
 *     @param bodyHtml fragment of HTML
 *     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 *     @return Document, with empty head, and HTML parsed into body
 */"
"public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
    Parser parser = new Parser(bodyHtml, baseUri, true);
    parser.relaxed = true;
    return parser.parse();
}","public void test011() throws Throwable {
    // Undeclared exception!
    try {
        Parser.parseBodyFragmentRelaxed((String) null, ""org.jsoup.parser.Parser"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Parse a fragment of HTML into the {@code body} of a Document, with relaxed parsing enabled. Relaxed, in this
 *     context, means that implicit tags are not automatically created when missing.
 *     @param bodyHtml fragment of HTML
 *     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 *     @return Document, with empty head, and HTML parsed into body
 */"
"public static Document parseBodyFragment(String bodyHtml, String baseUri) {
    Parser parser = new Parser(bodyHtml, baseUri, true);
    return parser.parse();
}","public void test022() throws Throwable {
    // Undeclared exception!
    try {
        Parser.parseBodyFragment((String) null, ""precsim"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Parse a fragment of HTML into the {@code body} of a Document.
 *     @param bodyHtml fragment of HTML
 *     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 *     @return Document, with empty head, and HTML parsed into body
 */"
"public static Document parse(String html, String baseUri) {
    Parser parser = new Parser(html, baseUri, false);
    return parser.parse();
}","public void test033() throws Throwable {
    // Undeclared exception!
    try {
        Parser.parse(""ai<J[jdiypG[=`m"", ""html"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 *     Parse HTML into a Document.
 *     @param html HTML to parse
 *     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 *     @return parsed Document
 */"
"public static Document parse(String html, String baseUri) {
    Parser parser = new Parser(html, baseUri, false);
    return parser.parse();
}","public void test044() throws Throwable {
    // Undeclared exception!
    try {
        Parser.parse(""LzX{=OxBBFh"", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Parse HTML into a Document.
 *     @param html HTML to parse
 *     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 *     @return parsed Document
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test055() throws Throwable {
    Document document0 = Parser.parse(""<Axl#QVR(.^.l"", ""<Axl#QVR(.^.l"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test056() throws Throwable {
    Document document0 = Parser.parse(""<Axl#QVR(.^.l"", ""<Axl#QVR(.^.l"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test057() throws Throwable {
    Document document0 = Parser.parse(""<Axl#QVR(.^.l"", ""<Axl#QVR(.^.l"");
    assertEquals(""<Axl#QVR(.^.l"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String tagName() {
    return tag.getName();
}","public void test058() throws Throwable {
    Document document0 = Parser.parse(""<Axl#QVR(.^.l"", ""<Axl#QVR(.^.l"");
    assertEquals(""#root"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test059() throws Throwable {
    Document document0 = Parser.parse(""<Axl#QVR(.^.l"", ""<Axl#QVR(.^.l"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public static Document parse(String html, String baseUri) {
    Parser parser = new Parser(html, baseUri, false);
    return parser.parse();
}","public void test0510() throws Throwable {
    Document document0 = Parser.parse(""<Axl#QVR(.^.l"", ""<Axl#QVR(.^.l"");
    assertNotNull(document0);
}","/**
 *     Parse HTML into a Document.
 *     @param html HTML to parse
 *     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 *     @return parsed Document
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0611() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""[T3M5<0/>_#tKuU"", ""[T3M5<0/>_#tKuU"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String tagName() {
    return tag.getName();
}","public void test0612() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""[T3M5<0/>_#tKuU"", ""[T3M5<0/>_#tKuU"");
    assertEquals(""#root"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0613() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""[T3M5<0/>_#tKuU"", ""[T3M5<0/>_#tKuU"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test0614() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""[T3M5<0/>_#tKuU"", ""[T3M5<0/>_#tKuU"");
    assertEquals(""[T3M5<0/>_#tKuU"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0615() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""[T3M5<0/>_#tKuU"", ""[T3M5<0/>_#tKuU"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
    Parser parser = new Parser(bodyHtml, baseUri, true);
    parser.relaxed = true;
    return parser.parse();
}","public void test0616() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""[T3M5<0/>_#tKuU"", ""[T3M5<0/>_#tKuU"");
    assertNotNull(document0);
}","/**
 *     Parse a fragment of HTML into the {@code body} of a Document, with relaxed parsing enabled. Relaxed, in this
 *     context, means that implicit tags are not automatically created when missing.
 *     @param bodyHtml fragment of HTML
 *     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 *     @return Document, with empty head, and HTML parsed into body
 */"
"public String tagName() {
    return tag.getName();
}","public void test0717() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""<rP.g"", ""<rP.g"");
    assertEquals(""#root"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0718() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""<rP.g"", ""<rP.g"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0719() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""<rP.g"", ""<rP.g"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test0720() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""<rP.g"", ""<rP.g"");
    assertEquals(""<rP.g"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0721() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""<rP.g"", ""<rP.g"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public static Document parseBodyFragmentRelaxed(String bodyHtml, String baseUri) {
    Parser parser = new Parser(bodyHtml, baseUri, true);
    parser.relaxed = true;
    return parser.parse();
}","public void test0722() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""<rP.g"", ""<rP.g"");
    assertNotNull(document0);
}","/**
 *     Parse a fragment of HTML into the {@code body} of a Document, with relaxed parsing enabled. Relaxed, in this
 *     context, means that implicit tags are not automatically created when missing.
 *     @param bodyHtml fragment of HTML
 *     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 *     @return Document, with empty head, and HTML parsed into body
 */"
"public static Document parseBodyFragment(String bodyHtml, String baseUri) {
    Parser parser = new Parser(bodyHtml, baseUri, true);
    return parser.parse();
}","public void test0823() throws Throwable {
    // Undeclared exception!
    try {
        Parser.parseBodyFragment(""lDI:'Nq5Ymf<V=h)$g"", ""lDI:'Nq5Ymf<V=h)$g"");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
    } catch (StringIndexOutOfBoundsException e) {
    }
}","/**
 *     Parse a fragment of HTML into the {@code body} of a Document.
 *     @param bodyHtml fragment of HTML
 *     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 *     @return Document, with empty head, and HTML parsed into body
 */"
"public String baseUri() {
    return baseUri;
}","public void test0924() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""lI:'Nq5Ymq<V=b)$V>g"", "" @<s"");
    assertEquals(""@<s"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0925() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""lI:'Nq5Ymq<V=b)$V>g"", "" @<s"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String tagName() {
    return tag.getName();
}","public void test0926() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""lI:'Nq5Ymq<V=b)$V>g"", "" @<s"");
    assertEquals(""#root"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0927() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""lI:'Nq5Ymq<V=b)$V>g"", "" @<s"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0928() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""lI:'Nq5Ymq<V=b)$V>g"", "" @<s"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public static Document parseBodyFragment(String bodyHtml, String baseUri) {
    Parser parser = new Parser(bodyHtml, baseUri, true);
    return parser.parse();
}","public void test0929() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""lI:'Nq5Ymq<V=b)$V>g"", "" @<s"");
    assertNotNull(document0);
}","/**
 *     Parse a fragment of HTML into the {@code body} of a Document.
 *     @param bodyHtml fragment of HTML
 *     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 *     @return Document, with empty head, and HTML parsed into body
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test1030() throws Throwable {
    Document document0 = Parser.parse(""W<T}NA=\""(K='lM.X "", ""hxp i6q$BPF{jRZ|"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test1031() throws Throwable {
    Document document0 = Parser.parse(""W<T}NA=\""(K='lM.X "", ""hxp i6q$BPF{jRZ|"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test1032() throws Throwable {
    Document document0 = Parser.parse(""W<T}NA=\""(K='lM.X "", ""hxp i6q$BPF{jRZ|"");
    assertEquals(""hxp i6q$BPF{jRZ|"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String tagName() {
    return tag.getName();
}","public void test1033() throws Throwable {
    Document document0 = Parser.parse(""W<T}NA=\""(K='lM.X "", ""hxp i6q$BPF{jRZ|"");
    assertEquals(""#root"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test1034() throws Throwable {
    Document document0 = Parser.parse(""W<T}NA=\""(K='lM.X "", ""hxp i6q$BPF{jRZ|"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public static Document parse(String html, String baseUri) {
    Parser parser = new Parser(html, baseUri, false);
    return parser.parse();
}","public void test1035() throws Throwable {
    Document document0 = Parser.parse(""W<T}NA=\""(K='lM.X "", ""hxp i6q$BPF{jRZ|"");
    assertNotNull(document0);
}","/**
 *     Parse HTML into a Document.
 *     @param html HTML to parse
 *     @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 *     @return parsed Document
 */"
"public String baseUri() {
    return baseUri;
}","public void test1136() throws Throwable {
    Document document0 = Parser.parse(""W<T}N|r\""(K='lM.X "", ""hxp i6q$BPF{jRZ|"");
    assertEquals(""hxp i6q$BPF{jRZ|"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test1237() throws Throwable {
    Document document0 = Parser.parse(""[T3M5<0/>_#tKuU"", "";O+Abl,j:[2P"");
    assertEquals("";O+Abl,j:[2P"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test1338() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""QN,%yK<jF<x,^$#Jl"", ""QN,%yK<jF<x,^$#Jl"");
    assertEquals(""QN,%yK<jF<x,^$#Jl"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String tagName() {
    return tag.getName();
}","public void test1439() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""</"", ""</"");
    assertEquals(""#root"", document0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}
 *
 * @return the tag name
 */"
"public String baseUri() {
    return baseUri;
}","public void test1540() throws Throwable {
    Document document0 = Parser.parse(""59Q4Y6Kv<?Nlu"", "">_"");
    assertEquals("">_"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test1641() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""<!--"", ""<!--"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test1742() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed("";-<lr\""v-CAw.=kv^ ]"", ""<![CDATA["");
    assertEquals(""<![CDATA["", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test1843() throws Throwable {
    Document document0 = Parser.parse(""<![CDATA["", ""<![CDATA["");
    assertEquals(""<![CDATA["", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test1944() throws Throwable {
    Document document0 = Parser.parseBodyFragmentRelaxed(""G<*#~<!+2D"", "">_"");
    assertEquals("">_"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test2045() throws Throwable {
    Document document0 = Parser.parseBodyFragment(""gDceGq</3^"", ""gDceGq</3^"");
    assertEquals(""#document"", document0.nodeName());
}",""
