focal_method,test_prefix,docstring
"public <T> T[] toArray(T[] a) {
    return contents.toArray(a);
}","public void test000() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    String[] stringArray0 = new String[0];
    // Undeclared exception!
    try {
        elements0.toArray(stringArray0);
        fail(""Expecting exception: ArrayStoreException"");
    } catch (ArrayStoreException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"public Element remove(int index) {
    return contents.remove(index);
}","public void test011() throws Throwable {
    Element[] elementArray0 = new Element[0];
    Elements elements0 = new Elements(elementArray0);
    // Undeclared exception!
    try {
        elements0.remove(61);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.AbstractList"", e);
    }
}",""
"public boolean removeAll(Collection<?> c) {
    return contents.removeAll(c);
}","public void test022() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals((-510));
    LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
    boolean boolean0 = elements0.removeAll(linkedHashSet0);
    assertFalse(boolean0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test033() throws Throwable {
    Document document0 = new Document(""0G-A!x@ol"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    elements0.add(1, (Element) document0);
    assertEquals(0, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean equals(Object o) {
    return contents.equals(o);
}","public void test044() throws Throwable {
    Tag tag0 = Tag.valueOf(""w"");
    Element element0 = new Element(tag0, ""div"");
    Elements elements0 = element0.getAllElements();
    UnaryOperator<Element> unaryOperator0 = UnaryOperator.identity();
    boolean boolean0 = elements0.equals(unaryOperator0);
    assertFalse(boolean0);
}",""
"public ListIterator<Element> listIterator(int index) {
    return contents.listIterator(index);
}","public void test055() throws Throwable {
    Document document0 = Document.createShell(""n4lT/^x"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    // Undeclared exception!
    try {
        elements0.listIterator((-2302));
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: -2302
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"public boolean remove(Object o) {
    return contents.remove(o);
}","public void test066() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    boolean boolean0 = elements0.remove((Object) document0);
    assertTrue(boolean0);
}",""
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test077() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    Elements elements1 = elements0.parents();
    assertFalse(elements1.isEmpty());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test088() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    elements0.clear();
    assertEquals(0, elements0.size());
}",""
"public int indexOf(Object o) {
    return contents.indexOf(o);
}","public void test099() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    int int0 = elements0.indexOf(document0);
    assertEquals(0, int0);
}",""
"public int lastIndexOf(Object o) {
    return contents.lastIndexOf(o);
}","public void test1010() throws Throwable {
    Document document0 = new Document(""0G-A!x@ol"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    int int0 = elements0.lastIndexOf(""0G-A!x@ol"");
    assertEquals((-1), int0);
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test1111() throws Throwable {
    Document document0 = Document.createShell("" "");
    Elements elements0 = document0.getElementsByAttributeValue(""r2XR!Z;Hi~d<1vDg?0?"", ""`/KB`"");
    Elements elements1 = elements0.not(""`/KB`"");
    assertEquals(0, elements1.size());
}",""
"public int hashCode() {
    return contents.hashCode();
}","public void test1212() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    elements0.hashCode();
}",""
"public String toString() {
    return outerHtml();
}","public void test1313() throws Throwable {
    Document document0 = new Document(""0G-A!x@ol"");
    Elements elements0 = document0.getElementsByIndexEquals(3);
    String string0 = elements0.toString();
    assertEquals("""", string0);
}","/**
 * Get the combined outer HTML of all matched elements. Alias of {@link #outerHtml()}.
 * @return string of all element's outer HTML.
 * @see #text()
 * @see #html()
 */"
"public boolean addAll(int index, Collection<? extends Element> c) {
    return contents.addAll(index, c);
}","public void test1414() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    boolean boolean0 = elements0.addAll(0, (Collection<? extends Element>) elements0);
    assertTrue(boolean0);
}",""
"public boolean addAll(Collection<? extends Element> c) {
    return contents.addAll(c);
}","public void test1717() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    boolean boolean0 = elements0.addAll((Collection<? extends Element>) elements0);
    assertTrue(boolean0);
}",""
"public boolean is(String query) {
    Elements children = select(query);
    return !children.isEmpty();
}","public void test1818() throws Throwable {
    Tag tag0 = Tag.valueOf(""w"");
    Element element0 = new Element(tag0, ""div"");
    Elements elements0 = element0.getAllElements();
    boolean boolean0 = elements0.is(""w"");
    assertTrue(boolean0);
}","/**
 * Test if any of the matched elements match the supplied query.
 * @param query A selector
 * @return true if at least one element in the list matches the query.
 */"
"public Element set(int index, Element element) {
    return contents.set(index, element);
}","public void test1919() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexLessThan(923);
    // Undeclared exception!
    try {
        elements0.set(923, (Element) document0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 923, Size: 4
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"public boolean retainAll(Collection<?> c) {
    return contents.retainAll(c);
}","public void test2020() throws Throwable {
    Tag tag0 = Tag.valueOf(""w"");
    Element element0 = new Element(tag0, ""div"");
    Elements elements0 = element0.getAllElements();
    boolean boolean0 = elements0.retainAll(elements0);
    assertFalse(boolean0);
}",""
"// attribute methods
/**
 *     Get an attribute value from the first matched element that has the attribute.
 *     @param attributeKey The attribute key.
 *     @return The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true),
 *     or if the no elements have the attribute, returns empty string.
 *     @see #hasAttr(String)
 */
public String attr(String attributeKey) {
    for (Element element : contents) {
        if (element.hasAttr(attributeKey))
            return element.attr(attributeKey);
    }
    return """";
}","public void test2121() throws Throwable {
    Document document0 = new Document(""0G-A!x@ol"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    String string0 = elements0.attr("""");
    assertEquals("""", string0);
}",""
"// attribute methods
/**
 *     Get an attribute value from the first matched element that has the attribute.
 *     @param attributeKey The attribute key.
 *     @return The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true),
 *     or if the no elements have the attribute, returns empty string.
 *     @see #hasAttr(String)
 */
public String attr(String attributeKey) {
    for (Element element : contents) {
        if (element.hasAttr(attributeKey))
            return element.attr(attributeKey);
    }
    return """";
}","public void test2222() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    document0.attr(""T]bUjnNE,o[*.xh3"", ""Rp!\""hV(`sa "");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    String string0 = elements0.attr(""T]bUjnNE,o[*.xh3"");
    assertEquals(""Rp!\""hV(`sa "", string0);
}",""
"public boolean hasAttr(String attributeKey) {
    for (Element element : contents) {
        if (element.hasAttr(attributeKey))
            return true;
    }
    return false;
}","public void test2323() throws Throwable {
    Document document0 = new Document(""0G-A!x@ol"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    boolean boolean0 = elements0.hasAttr("""");
    assertFalse(boolean0);
}","/**
 *     Checks if any of the matched elements have this attribute set.
 *     @param attributeKey attribute key
 *     @return true if any of the elements have the attribute; false if none do.
 */"
"public boolean hasAttr(String attributeKey) {
    for (Element element : contents) {
        if (element.hasAttr(attributeKey))
            return true;
    }
    return false;
}","public void test2424() throws Throwable {
    Document document0 = Document.createShell(""N"");
    document0.attr(""N"", ""N"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    boolean boolean0 = elements0.hasAttr(""N"");
    assertTrue(boolean0);
}","/**
 *     Checks if any of the matched elements have this attribute set.
 *     @param attributeKey attribute key
 *     @return true if any of the elements have the attribute; false if none do.
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test2525() throws Throwable {
    Document document0 = Document.createShell(""w"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    Elements elements1 = elements0.attr(""w"", ""boxHd"");
    assertEquals(3, elements1.size());
}",""
"public Elements removeAttr(String attributeKey) {
    for (Element element : contents) {
        element.removeAttr(attributeKey);
    }
    return this;
}","public void test2626() throws Throwable {
    Elements elements0 = new Elements();
    Elements elements1 = elements0.removeAttr(""w"");
    assertSame(elements1, elements0);
}","/**
 * Remove an attribute from every matched element.
 * @param attributeKey The attribute to remove.
 * @return this (for chaining)
 */"
"public Elements removeAttr(String attributeKey) {
    for (Element element : contents) {
        element.removeAttr(attributeKey);
    }
    return this;
}","public void test2727() throws Throwable {
    Document document0 = Document.createShell(""\n"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    // Undeclared exception!
    try {
        elements0.removeAttr((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Remove an attribute from every matched element.
 * @param attributeKey The attribute to remove.
 * @return this (for chaining)
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test2828() throws Throwable {
    Document document0 = Document.createShell(""n4lT/^x"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    Elements elements1 = elements0.addClass(""n4lT/^x"");
    assertEquals(3, elements1.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test2929() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    Elements elements1 = elements0.removeClass(""k^R{f*!ws4rlD"");
    assertEquals(3, elements1.size());
}",""
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test3030() throws Throwable {
    Tag tag0 = Tag.valueOf(""w"");
    Element element0 = new Element(tag0, ""div"");
    Elements elements0 = element0.getAllElements();
    Elements elements1 = elements0.toggleClass(""div"");
    assertFalse(elements1.isEmpty());
}",""
"public boolean hasClass(String className) {
    for (Element element : contents) {
        if (element.hasClass(className))
            return true;
    }
    return false;
}","public void test3131() throws Throwable {
    Document document0 = new Document(""0G-A!x@ol"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    boolean boolean0 = elements0.hasClass(""0G-A!x@ol"");
    assertFalse(boolean0);
}","/**
 *     Determine if any of the matched elements have this class name set in their {@code class} attribute.
 *     @param className class name to check for
 *     @return true if any do, false if none do
 */"
"public boolean hasClass(String className) {
    for (Element element : contents) {
        if (element.hasClass(className))
            return true;
    }
    return false;
}","public void test3232() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnDNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    boolean boolean0 = elements0.hasClass("""");
    assertTrue(boolean0);
}","/**
 *     Determine if any of the matched elements have this class name set in their {@code class} attribute.
 *     @param className class name to check for
 *     @return true if any do, false if none do
 */"
"public String val() {
    if (size() > 0)
        return first().val();
    else
        return """";
}","public void test3333() throws Throwable {
    Document document0 = new Document(""w"");
    Elements elements0 = document0.getElementsByClass(""div"");
    String string0 = elements0.val();
    assertEquals("""", string0);
}","/**
 * Get the form element's value of the first matched element.
 * @return The form element's value, or empty if not set.
 * @see Element#val()
 */"
"public String val() {
    if (size() > 0)
        return first().val();
    else
        return """";
}","public void test3434() throws Throwable {
    Document document0 = new Document(""0G-A!x@ol"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    String string0 = elements0.val();
    assertEquals("""", string0);
}","/**
 * Get the form element's value of the first matched element.
 * @return The form element's value, or empty if not set.
 * @see Element#val()
 */"
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test3535() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    Elements elements1 = elements0.val(""'DgO6![}VK]5#a-w:_"");
    assertFalse(elements1.isEmpty());
}",""
"public String text() {
    StringBuilder sb = new StringBuilder();
    for (Element element : contents) {
        if (sb.length() != 0)
            sb.append("" "");
        sb.append(element.text());
    }
    return sb.toString();
}","public void test3636() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    Elements elements1 = elements0.append(""T]bUjnNE,o[*.xh3"");
    String string0 = elements1.text();
    assertEquals(""T]bUjnNE,o[*.xh3 T]bUjnNE,o[*.xh3T]bUjnNE,o[*.xh3 T]bUjnNE,o[*.xh3 T]bUjnNE,o[*.xh3 T]bUjnNE,o[*.xh3"", string0);
}","/**
 * Get the combined text of all the matched elements.
 * <p>
 * Note that it is possible to get repeats if the matched elements contain both parent elements and their own
 * children, as the Element.text() method returns the combined text of a parent and all its children.
 * @return string of all text: unescaped and no HTML.
 * @see Element#text()
 */"
"public boolean hasText() {
    for (Element element : contents) {
        if (element.hasText())
            return true;
    }
    return false;
}","public void test3737() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    boolean boolean0 = elements0.hasText();
    assertFalse(boolean0);
}",""
"public boolean hasText() {
    for (Element element : contents) {
        if (element.hasText())
            return true;
    }
    return false;
}","public void test3838() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    elements0.html(""@0umsm_P"");
    boolean boolean0 = elements0.hasText();
    assertTrue(boolean0);
}",""
"public String html() {
    StringBuilder sb = new StringBuilder();
    for (Element element : contents) {
        if (sb.length() != 0)
            sb.append(""\n"");
        sb.append(element.html());
    }
    return sb.toString();
}","public void test3939() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    String string0 = elements0.html();
    assertEquals(""<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n"", string0);
}","/**
 * Get the combined inner HTML of all matched elements.
 * @return string of all element's inner HTML.
 * @see #text()
 * @see #outerHtml()
 */"
"public String outerHtml() {
    StringBuilder sb = new StringBuilder();
    for (Element element : contents) {
        if (sb.length() != 0)
            sb.append(""\n"");
        sb.append(element.outerHtml());
    }
    return sb.toString();
}","public void test4040() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    String string0 = elements0.outerHtml();
    assertEquals(""<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>"", string0);
}","/**
 * Get the combined outer HTML of all matched elements.
 * @return string of all element's outer HTML.
 * @see #text()
 * @see #html()
 */"
"public Elements tagName(String tagName) {
    for (Element element : contents) {
        element.tagName(tagName);
    }
    return this;
}","public void test4141() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    Elements elements1 = elements0.tagName(""'DgO6![}VK]5#a-w:_"");
    assertSame(elements0, elements1);
}","/**
 * Update the tag name of each matched element. For example, to change each {@code <i>} to a {@code <em>}, do
 * {@code doc.select(""i"").tagName(""em"");}
 * @param tagName the new tag name
 * @return this, for chaining
 * @see Element#tagName(String)
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test4242() throws Throwable {
    Document document0 = Document.createShell(""N"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    Elements elements1 = elements0.prepend(""4OGvEnqCUS19|hlSy7"");
    assertEquals(3, elements1.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test4343() throws Throwable {
    Elements elements0 = new Elements();
    Elements elements1 = elements0.before("""");
    assertEquals(0, elements1.size());
}",""
"public Elements before(String html) {
    for (Element element : contents) {
        element.before(html);
    }
    return this;
}","public void test4444() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    // Undeclared exception!
    try {
        elements0.before(""T]bUjnNE,o[*.xh3"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the supplied HTML before each matched element's outer HTML.
 * @param html HTML to insert before each element
 * @return this, for chaining
 * @see Element#before(String)
 */"
"public Elements after(String html) {
    for (Element element : contents) {
        element.after(html);
    }
    return this;
}","public void test4545() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsMatchingText(""G]s49A7"");
    Elements elements1 = elements0.after(""T]bUjnNE,o[*.xh3"");
    assertSame(elements1, elements0);
}","/**
 * Insert the supplied HTML after each matched element's outer HTML.
 * @param html HTML to insert after each element
 * @return this, for chaining
 * @see Element#after(String)
 */"
"public Elements after(String html) {
    for (Element element : contents) {
        element.after(html);
    }
    return this;
}","public void test4646() throws Throwable {
    Document document0 = new Document(""-g0+epi,;G,"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    // Undeclared exception!
    try {
        elements0.after(""-g0+epi,;G,"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Insert the supplied HTML after each matched element's outer HTML.
 * @param html HTML to insert after each element
 * @return this, for chaining
 * @see Element#after(String)
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test4747() throws Throwable {
    Document document0 = new Document(""T]bUnE,o[*.xh"");
    Elements elements0 = document0.getElementsContainingText(""precapprox"");
    Elements elements1 = elements0.wrap(""T]bUnE,o[*.xh"");
    assertEquals(0, elements1.size());
}",""
"public Elements wrap(String html) {
    Validate.notEmpty(html);
    for (Element element : contents) {
        element.wrap(html);
    }
    return this;
}","public void test4848() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    // Undeclared exception!
    try {
        elements0.wrap(""T]bUjnNE,o[*.xh3"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}","/**
 *     Wrap the supplied HTML around each matched elements. For example, with HTML
 *     {@code <p><b>This</b> is <b>Jsoup</b></p>},
 *     <code>doc.select(""b"").wrap(""&lt;i&gt;&lt;/i&gt;"");</code>
 *     becomes {@code <p><i><b>This</b></i> is <i><b>jsoup</b></i></p>}
 *     @param html HTML to wrap around each element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 *     @return this (for chaining)
 *     @see Element#wrap
 */"
"public boolean isEmpty() {
    return contents.isEmpty();
}","public void test4949() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsMatchingText(""\n"");
    Elements elements1 = elements0.unwrap();
    assertTrue(elements1.isEmpty());
}",""
"public Elements unwrap() {
    for (Element element : contents) {
        element.unwrap();
    }
    return this;
}","public void test5050() throws Throwable {
    Document document0 = Document.createShell("""");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    // Undeclared exception!
    try {
        elements0.unwrap();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Removes the matched elements from the DOM, and moves their children up into their parents. This has the effect of
 * dropping the elements but keeping their children.
 * <p/>
 * This is useful for e.g removing unwanted formatting elements but keeping their contents.
 * <p/>
 * E.g. with HTML: {@code <div><font>One</font> <font><a href=""/"">Two</a></font></div>}<br/>
 * {@code doc.select(""font"").unwrap();}<br/>
 * HTML = {@code <div>One <a href=""/"">Two</a></div>}
 *
 * @return this (for chaining)
 * @see Node#unwrap
 */"
"public Elements empty() {
    for (Element element : contents) {
        element.empty();
    }
    return this;
}","public void test5151() throws Throwable {
    Document document0 = new Document(""0G-A!x@ol"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    Elements elements1 = elements0.empty();
    assertSame(elements0, elements1);
}","/**
 * Empty (remove all child nodes from) each matched element. This is similar to setting the inner HTML of each
 * element to nothing.
 * <p>
 * E.g. HTML: {@code <div><p>Hello <b>there</b></p> <p>now</p></div>}<br>
 * <code>doc.select(""p"").empty();</code><br>
 * HTML = {@code <div><p></p> <p></p></div>}
 * @return this, for chaining
 * @see Element#empty()
 * @see #remove()
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test5252() throws Throwable {
    Elements elements0 = new Elements();
    Elements elements1 = elements0.remove();
    assertEquals(0, elements1.size());
}",""
"public Elements remove() {
    for (Element element : contents) {
        element.remove();
    }
    return this;
}","public void test5353() throws Throwable {
    Document document0 = Document.createShell(""w"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    // Undeclared exception!
    try {
        elements0.remove();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Remove each matched element from the DOM. This is similar to setting the outer HTML of each element to nothing.
 * <p>
 * E.g. HTML: {@code <div><p>Hello</p> <p>there</p> <img /></div>}<br>
 * <code>doc.select(""p"").remove();</code><br>
 * HTML = {@code <div> <img /></div>}
 * <p>
 * Note that this method should not be used to clean user-submitted HTML; rather, use {@link org.jsoup.safety.Cleaner} to clean HTML.
 * @return this, for chaining
 * @see Element#empty()
 * @see #empty()
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test5454() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsContainingText(""T]bUjnNE,o[*.xh3"");
    Elements elements1 = elements0.eq(1);
    assertEquals(0, elements1.size());
}",""
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test5555() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    Elements elements1 = elements0.eq(0);
    assertEquals(1, elements1.size());
}",""
"public boolean is(String query) {
    Elements children = select(query);
    return !children.isEmpty();
}","public void test5656() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsMatchingText(""\n"");
    boolean boolean0 = elements0.is(""\n"");
    assertFalse(boolean0);
}","/**
 * Test if any of the matched elements match the supplied query.
 * @param query A selector
 * @return true if at least one element in the list matches the query.
 */"
"// list-like methods
/**
 *     Get the first matched element.
 *     @return The first matched element, or <code>null</code> if contents is empty;
 */
public Element first() {
    return contents.isEmpty() ? null : contents.get(0);
}","public void test5757() throws Throwable {
    Document document0 = Document.createShell(""h$G@H!&{`(r"");
    Elements elements0 = document0.getElementsByAttributeValueContaining(""'I\""Bbb]/YzOf9"", ""'I\""Bbb]/YzOf9"");
    Element element0 = elements0.first();
    assertNull(element0);
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test5858() throws Throwable {
    Document document0 = new Document(""0G-A!x@ol"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    Element element0 = elements0.last();
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Element last() {
    return contents.isEmpty() ? null : contents.get(contents.size() - 1);
}","public void test5959() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(878);
    Element element0 = elements0.last();
    assertNull(element0);
}","/**
 *     Get the last matched element.
 *     @return The last matched element, or <code>null</code> if contents is empty.
 */"
"public Elements traverse(NodeVisitor nodeVisitor) {
    Validate.notNull(nodeVisitor);
    NodeTraversor traversor = new NodeTraversor(nodeVisitor);
    for (Element el : contents) {
        traversor.traverse(el);
    }
    return this;
}","public void test6060() throws Throwable {
    Document document0 = Document.createShell(""T]bUjnNE,o[*.xh3"");
    Elements elements0 = document0.getElementsByIndexEquals(0);
    NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
    Elements elements1 = elements0.traverse(nodeVisitor0);
    assertSame(elements1, elements0);
}","/**
 * Perform a depth-first traversal on each of the selected elements.
 * @param nodeVisitor the visitor callbacks to perform on each node
 * @return this, for chaining
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test6161() throws Throwable {
    Tag tag0 = Tag.valueOf(""w"");
    Element element0 = new Element(tag0, ""div"");
    Elements elements0 = element0.getAllElements();
    Elements elements1 = elements0.clone();
    boolean boolean0 = elements1.retainAll(elements0);
    assertEquals(0, elements1.size());
}",""
"public boolean retainAll(Collection<?> c) {
    return contents.retainAll(c);
}","public void test6162() throws Throwable {
    Tag tag0 = Tag.valueOf(""w"");
    Element element0 = new Element(tag0, ""div"");
    Elements elements0 = element0.getAllElements();
    Elements elements1 = elements0.clone();
    boolean boolean0 = elements1.retainAll(elements0);
    assertTrue(boolean0);
}",""
"public boolean containsAll(Collection<?> c) {
    return contents.containsAll(c);
}","public void test6263() throws Throwable {
    Document document0 = new Document(""[Euail03_c535m!"");
    Elements elements0 = document0.getAllElements();
    LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
    Integer integer0 = new Integer((-2785));
    linkedHashSet0.add(integer0);
    boolean boolean0 = elements0.containsAll(linkedHashSet0);
    assertFalse(boolean0);
}",""
"public boolean containsAll(Collection<?> c) {
    return contents.containsAll(c);
}","public void test6364() throws Throwable {
    Tag tag0 = Tag.valueOf(""w"");
    Element element0 = new Element(tag0, ""div"");
    Elements elements0 = element0.getAllElements();
    boolean boolean0 = elements0.containsAll(elements0);
    assertTrue(boolean0);
}",""
