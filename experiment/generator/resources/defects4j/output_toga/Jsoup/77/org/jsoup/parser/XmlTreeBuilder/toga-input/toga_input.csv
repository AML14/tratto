focal_method,test_prefix,docstring
"protected boolean processEndTag(String name) {
    if (currentToken == end) {
        // don't recycle an in-use token
        return process(new Token.EndTag().name(name));
    }
    return process(end.reset().name(name));
}","public void test000() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Document document0 = xmlTreeBuilder0.parse(""org.jsoup.parser.XmlTreeBuilder$1"", ""org.jsoup.parser.XmlTreeBuilder$1"");
    xmlTreeBuilder0.processStartTag(""org.jsoup.parser.XmlTreeBuilder$1"");
    Elements elements0 = document0.getElementsByTag(""org.jsoup.parser.XmlTreeBuilder$1"");
    xmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
    boolean boolean0 = xmlTreeBuilder0.processEndTag(""org.jsoup.parser.XmlTreeBuilder$1"");
    assertTrue(boolean0);
}",""
"void insert(Token.Character token) {
    final String data = token.getData();
    insertNode(token.isCData() ? new CDataNode(data) : new TextNode(data));
}","public void test022() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse("""", """");
    Token.CData token_CData0 = new Token.CData("""");
    xmlTreeBuilder0.insert(token_CData0);
}",""
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test044() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""org.jsoup.parser.XmlTreeBuilder$1"", ""org.jsoup.parser.XmlTreeBuilder$1"");
    Tokeniser tokeniser0 = xmlTreeBuilder0.tokeniser;
    Token.Comment token_Comment0 = tokeniser0.commentPending;
    boolean boolean0 = xmlTreeBuilder0.process(token_Comment0);
    assertTrue(boolean0);
}",""
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test055() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""o<g.jsoup.parser.XmlTreeBuilder$1"", ""o<g.jsoup.parser.XmlTreeBuilder$1"");
    Token.Doctype token_Doctype0 = new Token.Doctype();
    boolean boolean0 = xmlTreeBuilder0.process(token_Doctype0);
    assertTrue(boolean0);
}",""
"void insert(Token.Comment commentToken) {
    Comment comment = new Comment(commentToken.getData());
    Node insert = comment;
    if (commentToken.bogus) {
        // xml declarations are emitted as bogus comments (which is right for html, but not xml)
        // so we do a bit of a hack and parse the data as an element to pull the attributes out
        String data = comment.getData();
        if (data.length() > 1 && (data.startsWith(""!"") || data.startsWith(""?""))) {
            Document doc = Jsoup.parse(""<"" + data.substring(1, data.length() - 1) + "">"", baseUri, Parser.xmlParser());
            Element el = doc.child(0);
            insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(""!""));
            insert.attributes().addAll(el.attributes());
        }
    }
    insertNode(insert);
}","public void test066() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""org.jsoup.parser.XmlTreeBuilder$1"", ""org.jsoup.parser.XmlTreeBuilder$1"");
    Tokeniser tokeniser0 = xmlTreeBuilder0.tokeniser;
    Token.Comment token_Comment0 = tokeniser0.commentPending;
    xmlTreeBuilder0.insert(token_Comment0);
}",""
"@Override
public String baseUri() {
    return baseUri;
}","public void test077() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    Document document0 = xmlTreeBuilder0.parse(stringReader0, """");
    assertEquals("""", document0.baseUri());
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test088() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    StringReader stringReader0 = new StringReader(""uD,vU#Vq9&Cl(W(s4["");
    Document document0 = xmlTreeBuilder0.parse(stringReader0, ""uD,vU#Vq9&Cl(W(s4["");
    assertEquals(1, document0.childNodeSize());
}",""
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test099() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Token.StartTag token_StartTag0 = new Token.StartTag();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.process(token_StartTag0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be false
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings) {
    initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);
    runParser();
    return doc.childNodes();
}","public void test1010() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    ParseErrorList parseErrorList0 = xmlTreeBuilder0.errors;
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    // Undeclared exception!
    try {
        xmlTreeBuilder0.parseFragment((String) null, (String) null, parseErrorList0, parseSettings0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.StringReader"", e);
    }
}",""
"Document parse(String input, String baseUri) {
    return parse(new StringReader(input), baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);
}","public void test1111() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.parse((String) null, ""tbody"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.StringReader"", e);
    }
}",""
"Document parse(String input, String baseUri) {
    return parse(new StringReader(input), baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);
}","public void test1212() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.parse("""", (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // BaseURI must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Document parse(Reader input, String baseUri) {
    return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);
}","public void test1313() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    StringReader stringReader0 = new StringReader(""uD,vU#Vq9&Cl(W(s4["");
    stringReader0.close();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.parse(stringReader0, ""uD,vU#Vq9&Cl(W(s4["");
        fail(""Expecting exception: Error"");
    } catch (Error e) {
        //
        // java.io.IOException: Stream closed
        //
        verifyException(""org.jsoup.parser.CharacterReader"", e);
    }
}",""
"Element insert(Token.StartTag startTag) {
    Tag tag = Tag.valueOf(startTag.name(), settings);
    // todo: wonder if for xml parsing, should treat all tags as unknown? because it's not html.
    Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));
    insertNode(el);
    if (startTag.isSelfClosing()) {
        if (// unknown tag, remember this is self closing for output. see above.
        !tag.isKnownTag())
            tag.setSelfClosing();
    } else {
        stack.add(el);
    }
    return el;
}","public void test1414() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Token.StartTag token_StartTag0 = new Token.StartTag();
    CDataNode cDataNode0 = new CDataNode(""i#IWVpcB''hy7"");
    Attributes attributes0 = cDataNode0.attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""i#IWVpcB''hy7"", attributes0);
    // Undeclared exception!
    try {
        xmlTreeBuilder0.insert(token_StartTag1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.Tag"", e);
    }
}",""
"Element insert(Token.StartTag startTag) {
    Tag tag = Tag.valueOf(startTag.name(), settings);
    // todo: wonder if for xml parsing, should treat all tags as unknown? because it's not html.
    Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));
    insertNode(el);
    if (startTag.isSelfClosing()) {
        if (// unknown tag, remember this is self closing for output. see above.
        !tag.isKnownTag())
            tag.setSelfClosing();
    } else {
        stack.add(el);
    }
    return el;
}","public void test1515() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Token.StartTag token_StartTag0 = new Token.StartTag();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.insert(token_StartTag0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be false
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void insert(Token.Doctype d) {
    DocumentType doctypeNode = new DocumentType(settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());
    doctypeNode.setPubSysKey(d.getPubSysKey());
    insertNode(doctypeNode);
}","public void test1616() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.insert((Token.Doctype) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.XmlTreeBuilder"", e);
    }
}",""
"void insert(Token.Character token) {
    final String data = token.getData();
    insertNode(token.isCData() ? new CDataNode(data) : new TextNode(data));
}","public void test1717() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Token.CData token_CData0 = new Token.CData("""");
    // Undeclared exception!
    try {
        xmlTreeBuilder0.insert(token_CData0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"@Override
protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) {
    super.initialiseParse(input, baseUri, errors, settings);
    // place the document onto the stack. differs from HtmlTreeBuilder (not on stack)
    stack.add(doc);
    doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);
}","public void test1818() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    PipedReader pipedReader0 = new PipedReader();
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(0);
    // Undeclared exception!
    try {
        xmlTreeBuilder0.initialiseParse(pipedReader0, ""org.jsoup.parser.XmlTreeBuilder"", parseErrorList0, (ParseSettings) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test1919() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""org.jsoup.parser.XmlTreeBuilder$1"", ""org.jsoup.parser.XmlTreeBuilder$1"");
    xmlTreeBuilder0.processStartTag(""org.jsoup.parser.XmlTreeBuilder$1"");
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""AfterDoctypeName"", (Attributes) null);
    Element element0 = xmlTreeBuilder0.insert(token_StartTag1);
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"protected boolean processEndTag(String name) {
    if (currentToken == end) {
        // don't recycle an in-use token
        return process(new Token.EndTag().name(name));
    }
    return process(end.reset().name(name));
}","public void test1920() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""org.jsoup.parser.XmlTreeBuilder$1"", ""org.jsoup.parser.XmlTreeBuilder$1"");
    xmlTreeBuilder0.processStartTag(""org.jsoup.parser.XmlTreeBuilder$1"");
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""AfterDoctypeName"", (Attributes) null);
    Element element0 = xmlTreeBuilder0.insert(token_StartTag1);
    boolean boolean0 = xmlTreeBuilder0.processEndTag(""org.jsoup.parser.XmlTreeBuilder$1"");
    assertTrue(boolean0);
}",""
"protected boolean processEndTag(String name) {
    if (currentToken == end) {
        // don't recycle an in-use token
        return process(new Token.EndTag().name(name));
    }
    return process(end.reset().name(name));
}","public void test2021() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parseFragment(""wGr+4Cn,Y"", ""wGr+4Cn,Y"", (ParseErrorList) null, (ParseSettings) null);
    boolean boolean0 = xmlTreeBuilder0.processEndTag(""wGr+4Cn,Y"");
    assertTrue(boolean0);
}",""
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test2122() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Token.CData token_CData0 = new Token.CData("""");
    // Undeclared exception!
    try {
        xmlTreeBuilder0.process(token_CData0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"void insert(Token.Comment commentToken) {
    Comment comment = new Comment(commentToken.getData());
    Node insert = comment;
    if (commentToken.bogus) {
        // xml declarations are emitted as bogus comments (which is right for html, but not xml)
        // so we do a bit of a hack and parse the data as an element to pull the attributes out
        String data = comment.getData();
        if (data.length() > 1 && (data.startsWith(""!"") || data.startsWith(""?""))) {
            Document doc = Jsoup.parse(""<"" + data.substring(1, data.length() - 1) + "">"", baseUri, Parser.xmlParser());
            Element el = doc.child(0);
            insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), data.startsWith(""!""));
            insert.attributes().addAll(el.attributes());
        }
    }
    insertNode(insert);
}","public void test2223() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Token.Comment token_Comment0 = new Token.Comment();
    token_Comment0.bogus = true;
    // Undeclared exception!
    try {
        xmlTreeBuilder0.insert(token_Comment0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test2324() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""VG[P1*NJN"", ""VG[P1*NJN"");
    Token.StartTag token_StartTag0 = new Token.StartTag();
    token_StartTag0.selfClosing = true;
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""VG[P1*NJN"", attributes0);
    Element element0 = xmlTreeBuilder0.insert(token_StartTag1);
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test2425() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Token.Comment token_Comment0 = new Token.Comment();
    Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
    token_Comment0.type = token_TokenType0;
    // Undeclared exception!
    try {
        xmlTreeBuilder0.process(token_Comment0);
        fail(""Expecting exception: ClassCastException"");
    } catch (ClassCastException e) {
        //
        // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$StartTag
        //
        verifyException(""org.jsoup.parser.Token"", e);
    }
}",""
"Document parse(Reader input, String baseUri) {
    return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);
}","public void test2526() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    PipedWriter pipedWriter0 = new PipedWriter();
    PipedReader pipedReader0 = new PipedReader(pipedWriter0, 1);
    // Undeclared exception!
    try {
        xmlTreeBuilder0.parse(pipedReader0, ""Iq9jc'\""'IE=#n.2jS3d"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings) {
    initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);
    runParser();
    return doc.childNodes();
}","public void test2728() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.parseFragment(""uc]U&&@?mjUgx_,e;"", (String) null, (ParseErrorList) null, parseSettings0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // BaseURI must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
