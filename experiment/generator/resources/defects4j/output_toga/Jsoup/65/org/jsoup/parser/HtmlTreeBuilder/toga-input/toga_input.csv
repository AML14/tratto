focal_method,test_prefix,docstring
"void replaceActiveFormattingElement(Element out, Element in) {
    replaceInQueue(formattingElements, out, in);
}","public void test0000() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell("""");
    Document document1 = new Document("""");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document1);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test0011() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Document document0 = htmlTreeBuilder0.parse(stringReader0, """", (ParseErrorList) null, parseSettings0);
    assertEquals(1, document0.childNodeSize());
}",""
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !StringUtil.in(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test0012() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Document document0 = htmlTreeBuilder0.parse(stringReader0, """", (ParseErrorList) null, parseSettings0);
    boolean boolean0 = htmlTreeBuilder0.inSelectScope((String) null);
    assertFalse(boolean0);
}",""
"void replaceOnStack(Element out, Element in) {
    replaceInQueue(stack, out, in);
}","public void test0023() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceOnStack(document0, (Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void popStackToClose(String... elNames) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        stack.remove(pos);
        if (StringUtil.in(next.nodeName(), elNames))
            break;
    }
}","public void test0034() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    String[] stringArray0 = new String[0];
    htmlTreeBuilder0.push(document0);
    htmlTreeBuilder0.popStackToClose(stringArray0);
    assertEquals(0, stringArray0.length);
}",""
"void popStackToClose(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        stack.remove(pos);
        if (next.nodeName().equals(elName))
            break;
    }
}","public void test0045() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.push(document0);
    htmlTreeBuilder0.popStackToClose(""tbody"");
}",""
"void reconstructFormattingElements() {
    Element last = lastFormattingElement();
    if (last == null || onStack(last))
        return;
    Element entry = last;
    int size = formattingElements.size();
    int pos = size - 1;
    boolean skip = false;
    while (true) {
        if (pos == 0) {
            // step 4. if none before, skip to 8
            skip = true;
            break;
        }
        // step 5. one earlier than entry
        entry = formattingElements.get(--pos);
        if (// step 6 - neither marker nor on stack
        entry == null || onStack(entry))
            // jump to 8, else continue back to 4
            break;
    }
    while (true) {
        if (// step 7: on later than entry
        !skip)
            entry = formattingElements.get(++pos);
        // should not occur, as we break at last element
        Validate.notNull(entry);
        // 8. create new element from element, 9 insert into current node, onto stack
        // can only skip increment from 4.
        skip = false;
        // todo: avoid fostering here?
        Element newEl = insertStartTag(entry.nodeName());
        // newEl.namespace(entry.namespace()); // todo: namespaces
        newEl.attributes().addAll(entry.attributes());
        // 10. replace entry with new entry
        formattingElements.set(pos, newEl);
        // 11
        if (// if not last entry in list, jump to 7
        pos == size - 1)
            break;
    }
}","public void test0056() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader(""ql"");
    ParseSettings parseSettings0 = ParseSettings.htmlDefault;
    htmlTreeBuilder0.parse(stringReader0, ""ql"", (ParseErrorList) null, parseSettings0);
    htmlTreeBuilder0.reconstructFormattingElements();
}",""
"void insert(Token.Comment commentToken) {
    Comment comment = new Comment(commentToken.getData());
    insertNode(comment);
}","public void test0067() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    StringReader stringReader0 = new StringReader(""select"");
    CharacterReader characterReader0 = new CharacterReader(stringReader0, 77);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token.Comment token_Comment0 = tokeniser0.commentPending;
    htmlTreeBuilder0.insert(token_Comment0);
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test0089() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.insert(document0);
    assertEquals(1, document0.childNodeSize());
}",""
"@Override
protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) {
    super.initialiseParse(input, baseUri, errors, settings);
    // this is a bit mucky. todo - probably just create new parser objects to ensure all reset.
    state = HtmlTreeBuilderState.Initial;
    originalState = null;
    baseUriSetFromDoc = false;
    headElement = null;
    formElement = null;
    contextElement = null;
    formattingElements = new ArrayList<>();
    pendingTableCharacters = new ArrayList<>();
    emptyEnd = new Token.EndTag();
    framesetOk = true;
    fosterInserts = false;
    fragmentParsing = false;
}","public void test00910() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    htmlTreeBuilder0.initialiseParse(stringReader0, """", (ParseErrorList) null, parseSettings0);
}",""
"void transition(HtmlTreeBuilderState state) {
    this.state = state;
}","public void test01011() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InFrameset;
    htmlTreeBuilder0.transition(htmlTreeBuilderState0);
}",""
"public boolean updateMetaCharsetElement() {
    return updateMetaCharset;
}","public void test01112() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""+c"");
    htmlTreeBuilder0.setHeadElement(document0);
    assertFalse(document0.updateMetaCharsetElement());
}","/**
 * Returns whether the element with charset information in this document is
 * updated on changes through {@link #charset(java.nio.charset.Charset)
 * Document.charset(Charset)} or not.
 *
 * @return Returns <tt>true</tt> if the element is updated on charset
 * changes, <tt>false</tt> if not
 */"
"void framesetOk(boolean framesetOk) {
    this.framesetOk = framesetOk;
}","public void test01213() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.framesetOk(false);
}",""
"void insertMarkerToFormattingElements() {
    formattingElements.add(null);
}","public void test01314() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.insertMarkerToFormattingElements();
}",""
"FormElement insertForm(Token.StartTag startTag, boolean onStack) {
    Tag tag = Tag.valueOf(startTag.name(), settings);
    FormElement el = new FormElement(tag, baseUri, startTag.attributes);
    setFormElement(el);
    insertNode(el);
    if (onStack)
        stack.add(el);
    return el;
}","public void test01415() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""tr"", (Attributes) null);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertForm(token_StartTag1, true);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void clearStackToTableContext() {
    clearStackToContext(""table"");
}","public void test01516() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.clearStackToTableContext();
}",""
"@Override
public String toString() {
    return ""TreeBuilder{"" + ""currentToken="" + currentToken + "", state="" + state + "", currentElement="" + currentElement() + '}';
}","public void test01617() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    String string0 = htmlTreeBuilder0.toString();
    assertNotNull(string0);
}",""
"HtmlTreeBuilderState state() {
    return state;
}","public void test01718() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.state();
}",""
"public boolean hasParent() {
    return parentNode != null;
}","public void test01819() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    Element element0 = document0.head();
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", element0, ""]K:"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
    assertTrue(element1.hasParent());
}",""
"boolean process(Token token, HtmlTreeBuilderState state) {
    currentToken = token;
    return state.process(token, this);
}","public void test01920() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.Doctype token_Doctype0 = new Token.Doctype();
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
    boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
    assertTrue(boolean0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test02021() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    htmlTreeBuilder0.parse(stringReader0, """", (ParseErrorList) null, parseSettings0);
    Element element0 = htmlTreeBuilder0.pop();
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"boolean onStack(Element el) {
    return isElementInQueue(stack, el);
}","public void test02122() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    boolean boolean0 = htmlTreeBuilder0.onStack(document0);
    assertFalse(boolean0);
}",""
"Element lastFormattingElement() {
    return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size() - 1) : null;
}","public void test02223() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    Element element0 = htmlTreeBuilder0.lastFormattingElement();
    assertNull(element0);
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test02324() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    Element element0 = document0.head();
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, false);
    htmlTreeBuilder0.parseFragment(""]K:"", element0, ""]K:"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    Element element1 = htmlTreeBuilder0.lastFormattingElement();
    assertEquals(0, element1.childNodeSize());
}",""
"boolean isSpecial(Element el) {
    // todo: mathml's mi, mo, mn
    // todo: svg's foreigObject, desc, title
    String name = el.nodeName();
    return StringUtil.in(name, TagSearchSpecial);
}","public void test02425() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    Element element0 = document0.head();
    boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
    assertTrue(boolean0);
}",""
"boolean isInActiveFormattingElements(Element el) {
    return isElementInQueue(formattingElements, el);
}","public void test02526() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
    assertFalse(boolean0);
}",""
"boolean isFragmentParsing() {
    return fragmentParsing;
}","public void test02627() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
    assertTrue(boolean0);
}",""
"boolean isFosterInserts() {
    return fosterInserts;
}","public void test02728() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
    assertFalse(boolean0);
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test02829() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    Element element0 = htmlTreeBuilder0.insertStartTag(""table"");
    assertTrue(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String baseUri() {
    return baseUri;
}","public void test02931() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    Element element0 = htmlTreeBuilder0.insertStartTag(""C$a8fq^6@I@$8T"");
    assertEquals(""tbody"", element0.baseUri());
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test03032() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    htmlTreeBuilder0.parse(stringReader0, """", (ParseErrorList) null, parseSettings0);
    CharacterReader characterReader0 = new CharacterReader(stringReader0);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, (ParseErrorList) null);
    Token.StartTag token_StartTag0 = tokeniser0.startPending;
    Comment comment0 = new Comment(""header"");
    Attributes attributes0 = comment0.attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""blockquote"", attributes0);
    Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"boolean inTableScope(String targetName) {
    return inSpecificScope(targetName, TagSearchTableScope, null);
}","public void test03134() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    boolean boolean0 = htmlTreeBuilder0.inTableScope("">v'["");
    assertFalse(boolean0);
}",""
"boolean inScope(String[] targetNames) {
    return inSpecificScope(targetNames, TagsSearchInScope, null);
}","public void test03236() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String[] stringArray0 = new String[6];
    stringArray0[0] = ""footer"";
    stringArray0[1] = ""footer"";
    stringArray0[2] = ""V2gmW D^TZM"";
    stringArray0[3] = ""footer"";
    Document document0 = new Document(""footer"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""V2gmW D^TZM"", document0, ""footer"", parseErrorList0, parseSettings0);
    stringArray0[4] = ""footer"";
    stringArray0[5] = ""footer"";
    boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
    assertFalse(boolean0);
}",""
"boolean inScope(String targetName, String[] extras) {
    return inSpecificScope(targetName, TagsSearchInScope, extras);
    // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml
    // todo: in svg namespace: forignOjbect, desc, title
}","public void test03337() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    String[] stringArray0 = new String[0];
    boolean boolean0 = htmlTreeBuilder0.inScope(""xmp"", stringArray0);
    assertFalse(boolean0);
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test03438() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Document document0 = htmlTreeBuilder0.parse(stringReader0, """", parseErrorList0, parseSettings0);
    assertEquals(1, document0.childNodeSize());
}",""
"boolean inListItemScope(String targetName) {
    return inScope(targetName, TagSearchList);
}","public void test03439() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Document document0 = htmlTreeBuilder0.parse(stringReader0, """", parseErrorList0, parseSettings0);
    boolean boolean0 = htmlTreeBuilder0.inListItemScope("""");
    assertFalse(boolean0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test03742() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", (Element) null, ""]K:"", parseErrorList0, parseSettings0);
    Element element0 = htmlTreeBuilder0.getHeadElement();
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test03743() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", (Element) null, ""]K:"", parseErrorList0, parseSettings0);
    Element element0 = htmlTreeBuilder0.getHeadElement();
    assertEquals(0, element0.childNodeSize());
}",""
"Element getFromStack(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.nodeName().equals(elName)) {
            return next;
        }
    }
    return null;
}","public void test03844() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ArrayList<Element> arrayList0 = new ArrayList<Element>();
    htmlTreeBuilder0.stack = arrayList0;
    Element element0 = htmlTreeBuilder0.getFromStack((String) null);
    assertNull(element0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test03945() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Document document0 = htmlTreeBuilder0.parse(stringReader0, """", (ParseErrorList) null, parseSettings0);
    htmlTreeBuilder0.insertInFosterParent(document0);
    assertEquals(2, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test03946() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Document document0 = htmlTreeBuilder0.parse(stringReader0, """", (ParseErrorList) null, parseSettings0);
    htmlTreeBuilder0.insertInFosterParent(document0);
    Document document1 = htmlTreeBuilder0.getDocument();
    assertEquals(2, document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test04047() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    Document document1 = htmlTreeBuilder0.getDocument();
    assertFalse(document1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"String getBaseUri() {
    return baseUri;
}","public void test04148() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    String string0 = htmlTreeBuilder0.getBaseUri();
    assertEquals(""tbody"", string0);
}",""
"boolean framesetOk() {
    return framesetOk;
}","public void test04250() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Document document0 = htmlTreeBuilder0.parse(stringReader0, """", parseErrorList0, parseSettings0);
    boolean boolean0 = htmlTreeBuilder0.framesetOk();
    assertTrue(boolean0);
}",""
"boolean framesetOk() {
    return framesetOk;
}","public void test04351() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.framesetOk();
    assertFalse(boolean0);
}",""
"@Override
public String toString() {
    return ""TreeBuilder{"" + ""currentToken="" + currentToken + "", state="" + state + "", currentElement="" + currentElement() + '}';
}","public void test04452() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Document document0 = htmlTreeBuilder0.parse(stringReader0, """", (ParseErrorList) null, parseSettings0);
    htmlTreeBuilder0.insertInFosterParent(document0);
    // Undeclared exception!
    htmlTreeBuilder0.toString();
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""th"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test04553() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.resetInsertionMode();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void replaceOnStack(Element out, Element in) {
    replaceInQueue(stack, out, in);
}","public void test04654() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Element removeLastFormattingElement() {
    int size = formattingElements.size();
    if (size > 0)
        return formattingElements.remove(size - 1);
    else
        return null;
}","public void test04755() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.removeLastFormattingElement();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean removeFromStack(Element el) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            stack.remove(pos);
            return true;
        }
    }
    return false;
}","public void test04856() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""H4hL':`S82tM&=3&'v["");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.removeFromStack(document0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void removeFromActiveFormattingElements(Element el) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (next == el) {
            formattingElements.remove(pos);
            break;
        }
    }
}","public void test04957() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void reconstructFormattingElements() {
    Element last = lastFormattingElement();
    if (last == null || onStack(last))
        return;
    Element entry = last;
    int size = formattingElements.size();
    int pos = size - 1;
    boolean skip = false;
    while (true) {
        if (pos == 0) {
            // step 4. if none before, skip to 8
            skip = true;
            break;
        }
        // step 5. one earlier than entry
        entry = formattingElements.get(--pos);
        if (// step 6 - neither marker nor on stack
        entry == null || onStack(entry))
            // jump to 8, else continue back to 4
            break;
    }
    while (true) {
        if (// step 7: on later than entry
        !skip)
            entry = formattingElements.get(++pos);
        // should not occur, as we break at last element
        Validate.notNull(entry);
        // 8. create new element from element, 9 insert into current node, onto stack
        // can only skip increment from 4.
        skip = false;
        // todo: avoid fostering here?
        Element newEl = insertStartTag(entry.nodeName());
        // newEl.namespace(entry.namespace()); // todo: namespaces
        newEl.attributes().addAll(entry.attributes());
        // 10. replace entry with new entry
        formattingElements.set(pos, newEl);
        // 11
        if (// if not last entry in list, jump to 7
        pos == size - 1)
            break;
    }
}","public void test05058() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.reconstructFormattingElements();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"// active formatting elements
void pushActiveFormattingElements(Element in) {
    int numSeen = 0;
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element el = formattingElements.get(pos);
        if (// marker
        el == null)
            break;
        if (isSameFormattingElement(in, el))
            numSeen++;
        if (numSeen == 3) {
            formattingElements.remove(pos);
            break;
        }
    }
    formattingElements.add(in);
}","public void test05159() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""Tag cannot be self closing; not a void tag"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"@Override
protected boolean process(Token token) {
    currentToken = token;
    return this.state.process(token, this);
}","public void test05260() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process((Token) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void popStackToClose(String... elNames) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        stack.remove(pos);
        if (StringUtil.in(next.nodeName(), elNames))
            break;
    }
}","public void test05361() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String[] stringArray0 = new String[9];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void popStackToClose(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        stack.remove(pos);
        if (next.nodeName().equals(elName))
            break;
    }
}","public void test05462() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.popStackToClose(""footer"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void popStackToBefore(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.nodeName().equals(elName)) {
            break;
        } else {
            stack.remove(pos);
        }
    }
}","public void test05563() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.popStackToBefore("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element pop() {
    int size = stack.size();
    return stack.remove(size - 1);
}","public void test05664() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.pop();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings) {
    // context may be null
    state = HtmlTreeBuilderState.Initial;
    initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);
    contextElement = context;
    fragmentParsing = true;
    Element root = null;
    if (context != null) {
        if (// quirks setup:
        context.ownerDocument() != null)
            doc.quirksMode(context.ownerDocument().quirksMode());
        // initialise the tokeniser state:
        String contextTag = context.tagName();
        if (StringUtil.in(contextTag, ""title"", ""textarea""))
            tokeniser.transition(TokeniserState.Rcdata);
        else if (StringUtil.in(contextTag, ""iframe"", ""noembed"", ""noframes"", ""style"", ""xmp""))
            tokeniser.transition(TokeniserState.Rawtext);
        else if (contextTag.equals(""script""))
            tokeniser.transition(TokeniserState.ScriptData);
        else if (contextTag.equals((""noscript"")))
            // if scripting enabled, rawtext
            tokeniser.transition(TokeniserState.Data);
        else if (contextTag.equals(""plaintext""))
            tokeniser.transition(TokeniserState.Data);
        else
            // default
            tokeniser.transition(TokeniserState.Data);
        root = new Element(Tag.valueOf(""html"", settings), baseUri);
        doc.appendChild(root);
        stack.add(root);
        resetInsertionMode();
        // setup form element to nearest form on context (up ancestor chain). ensures form controls are associated
        // with form correctly
        Elements contextChain = context.parents();
        contextChain.add(0, context);
        for (Element parent : contextChain) {
            if (parent instanceof FormElement) {
                formElement = (FormElement) parent;
                break;
            }
        }
    }
    runParser();
    if (context != null)
        return root.childNodes();
    else
        return doc.childNodes();
}","public void test05765() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""tr"", parseSettings0);
    Element element0 = new Element(tag0, ""article"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.parseFragment((String) null, element0, ""tr"", parseErrorList0, (ParseSettings) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.io.StringReader"", e);
    }
}",""
"boolean onStack(Element el) {
    return isElementInQueue(stack, el);
}","public void test05866() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""100w)gNcg"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.onStack(document0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void maybeSetBaseUri(Element base) {
    if (// only listen to the first <base href> in parse
    baseUriSetFromDoc)
        return;
    String href = base.absUrl(""href"");
    if (href.length() != 0) {
        // ignore <base target> etc
        baseUri = href;
        baseUriSetFromDoc = true;
        // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants
        doc.setBaseUri(href);
    }
}","public void test05967() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element lastFormattingElement() {
    return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size() - 1) : null;
}","public void test06068() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.lastFormattingElement();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean isSpecial(Element el) {
    // todo: mathml's mi, mo, mn
    // todo: svg's foreigObject, desc, title
    String name = el.nodeName();
    return StringUtil.in(name, TagSearchSpecial);
}","public void test06169() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.isSpecial((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element insertStartTag(String startTagName) {
    Element el = new Element(Tag.valueOf(startTagName, settings), baseUri);
    insert(el);
    return el;
}","public void test06270() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertStartTag(""<i"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"Element insertStartTag(String startTagName) {
    Element el = new Element(Tag.valueOf(startTagName, settings), baseUri);
    insert(el);
    return el;
}","public void test06371() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertStartTag(""h1"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void insertOnStackAfter(Element after, Element in) {
    int i = stack.lastIndexOf(after);
    Validate.isTrue(i != -1);
    stack.add(i + 1, in);
}","public void test06472() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void insertInFosterParent(Node in) {
    Element fosterParent;
    Element lastTable = getFromStack(""table"");
    boolean isLastTableParent = false;
    if (lastTable != null) {
        if (lastTable.parent() != null) {
            fosterParent = lastTable.parent();
            isLastTableParent = true;
        } else
            fosterParent = aboveOnStack(lastTable);
    } else {
        // no table == frag
        fosterParent = stack.get(0);
    }
    if (isLastTableParent) {
        // last table cannot be null by this point.
        Validate.notNull(lastTable);
        lastTable.before(in);
    } else
        fosterParent.appendChild(in);
}","public void test06573() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void insertInFosterParent(Node in) {
    Element fosterParent;
    Element lastTable = getFromStack(""table"");
    boolean isLastTableParent = false;
    if (lastTable != null) {
        if (lastTable.parent() != null) {
            fosterParent = lastTable.parent();
            isLastTableParent = true;
        } else
            fosterParent = aboveOnStack(lastTable);
    } else {
        // no table == frag
        fosterParent = stack.get(0);
    }
    if (isLastTableParent) {
        // last table cannot be null by this point.
        Validate.notNull(lastTable);
        lastTable.before(in);
    } else
        fosterParent.appendChild(in);
}","public void test06674() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""noscript"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""noscript"", document0, ""tbody"", parseErrorList0, parseSettings0);
    String[] stringArray0 = new String[0];
    htmlTreeBuilder0.popStackToClose(stringArray0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"void insertInFosterParent(Node in) {
    Element fosterParent;
    Element lastTable = getFromStack(""table"");
    boolean isLastTableParent = false;
    if (lastTable != null) {
        if (lastTable.parent() != null) {
            fosterParent = lastTable.parent();
            isLastTableParent = true;
        } else
            fosterParent = aboveOnStack(lastTable);
    } else {
        // no table == frag
        fosterParent = stack.get(0);
    }
    if (isLastTableParent) {
        // last table cannot be null by this point.
        Validate.notNull(lastTable);
        lastTable.before(in);
    } else
        fosterParent.appendChild(in);
}","public void test06775() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"FormElement insertForm(Token.StartTag startTag, boolean onStack) {
    Tag tag = Tag.valueOf(startTag.name(), settings);
    FormElement el = new FormElement(tag, baseUri, startTag.attributes);
    setFormElement(el);
    insertNode(el);
    if (onStack)
        stack.add(el);
    return el;
}","public void test06876() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertForm((Token.StartTag) null, false);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element insertEmpty(Token.StartTag startTag) {
    Tag tag = Tag.valueOf(startTag.name(), settings);
    Element el = new Element(tag, baseUri, startTag.attributes);
    insertNode(el);
    if (startTag.isSelfClosing()) {
        if (tag.isKnownTag()) {
            if (!tag.isEmpty())
                tokeniser.error(""Tag cannot be self closing; not a void tag"");
        } else
            // unknown tag, remember this is self closing for output
            tag.setSelfClosing();
    }
    return el;
}","public void test06977() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element insertEmpty(Token.StartTag startTag) {
    Tag tag = Tag.valueOf(startTag.name(), settings);
    Element el = new Element(tag, baseUri, startTag.attributes);
    insertNode(el);
    if (startTag.isSelfClosing()) {
        if (tag.isKnownTag()) {
            if (!tag.isEmpty())
                tokeniser.error(""Tag cannot be self closing; not a void tag"");
        } else
            // unknown tag, remember this is self closing for output
            tag.setSelfClosing();
    }
    return el;
}","public void test07078() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    CharacterReader characterReader0 = new CharacterReader(""Awh(7qc67Zq@"");
    ParseErrorList parseErrorList0 = ParseErrorList.tracking(2750);
    Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
    Token.StartTag token_StartTag0 = tokeniser0.startPending;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be false
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Element insert(Token.StartTag startTag) {
    // handle empty unknown tags
    // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
    if (startTag.isSelfClosing()) {
        Element el = insertEmpty(startTag);
        stack.add(el);
        // handles <script />, otherwise needs breakout steps from script data
        tokeniser.transition(TokeniserState.Data);
        // ensure we get out of whatever state we are in. emitted for yielded processing
        tokeniser.emit(emptyEnd.reset().name(el.tagName()));
        return el;
    }
    Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));
    insert(el);
    return el;
}","public void test07179() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
    Token.StartTag token_StartTag0 = tokeniser0.startPending;
    token_StartTag0.tagName = ""{Y&26/x"";
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert(token_StartTag0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"Element insert(Token.StartTag startTag) {
    // handle empty unknown tags
    // when the spec expects an empty tag, will directly hit insertEmpty, so won't generate this fake end tag.
    if (startTag.isSelfClosing()) {
        Element el = insertEmpty(startTag);
        stack.add(el);
        // handles <script />, otherwise needs breakout steps from script data
        tokeniser.transition(TokeniserState.Data);
        // ensure we get out of whatever state we are in. emitted for yielded processing
        tokeniser.emit(emptyEnd.reset().name(el.tagName()));
        return el;
    }
    Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));
    insert(el);
    return el;
}","public void test07280() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.StartTag token_StartTag0 = new Token.StartTag();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert(token_StartTag0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be false
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void insert(Token.Character characterToken) {
    Node node;
    // characters in script and style go in as datanodes, not text nodes
    String tagName = currentElement().tagName();
    if (tagName.equals(""script"") || tagName.equals(""style""))
        node = new DataNode(characterToken.getData());
    else
        node = new TextNode(characterToken.getData());
    // doesn't use insertNode, because we don't foster these; and will always have a stack.
    currentElement().appendChild(node);
}","public void test07381() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Token.Character token_Character0 = new Token.Character();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert(token_Character0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"void insert(Element el) {
    insertNode(el);
    stack.add(el);
}","public void test07482() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert(document0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"@Override
protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) {
    super.initialiseParse(input, baseUri, errors, settings);
    // this is a bit mucky. todo - probably just create new parser objects to ensure all reset.
    state = HtmlTreeBuilderState.Initial;
    originalState = null;
    baseUriSetFromDoc = false;
    headElement = null;
    formElement = null;
    contextElement = null;
    formattingElements = new ArrayList<>();
    pendingTableCharacters = new ArrayList<>();
    emptyEnd = new Token.EndTag();
    framesetOk = true;
    fosterInserts = false;
    fragmentParsing = false;
}","public void test07583() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    PipedReader pipedReader0 = new PipedReader();
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.initialiseParse(pipedReader0, ""section"", parseErrorList0, parseSettings0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inTableScope(String targetName) {
    return inSpecificScope(targetName, TagSearchTableScope, null);
}","public void test07684() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    String[] stringArray0 = new String[0];
    htmlTreeBuilder0.popStackToClose(stringArray0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inTableScope(""Z?"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !StringUtil.in(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test07785() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inSelectScope("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean inScope(String[] targetNames) {
    return inSpecificScope(targetNames, TagsSearchInScope, null);
}","public void test07886() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String[] stringArray0 = new String[6];
    Document document0 = new Document(""footer"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""V2gmW D^TZM"", document0, ""footer"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.pop();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inScope(String targetName, String[] extras) {
    return inSpecificScope(targetName, TagsSearchInScope, extras);
    // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml
    // todo: in svg namespace: forignOjbect, desc, title
}","public void test07987() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String[] stringArray0 = new String[0];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope("""", stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean inScope(String targetName, String[] extras) {
    return inSpecificScope(targetName, TagsSearchInScope, extras);
    // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml
    // todo: in svg namespace: forignOjbect, desc, title
}","public void test08088() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.pop();
    String[] stringArray0 = new String[0];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(""xmp"", stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inScope(String targetName) {
    return inScope(targetName, null);
}","public void test08189() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    String[] stringArray0 = new String[0];
    htmlTreeBuilder0.popStackToClose(stringArray0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(""M6|#w2gV'#&"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inListItemScope(String targetName) {
    return inScope(targetName, TagSearchList);
}","public void test08290() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    String[] stringArray0 = new String[0];
    htmlTreeBuilder0.popStackToClose(stringArray0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inListItemScope(""tbody"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Element getFromStack(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.nodeName().equals(elName)) {
            return next;
        }
    }
    return null;
}","public void test08391() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.getFromStack(""y)]<"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element getActiveFormattingElement(String nodeName) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (// scope marker
        next == null)
            break;
        else if (next.nodeName().equals(nodeName))
            return next;
    }
    return null;
}","public void test08492() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.getActiveFormattingElement("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void error(HtmlTreeBuilderState state) {
    if (errors.canAddError())
        errors.add(new ParseError(reader.pos(), ""Unexpected token [%s] when in state [%s]"", currentToken.tokenType(), state));
}","public void test08593() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterFrameset;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void clearFormattingElementsToLastMarker() {
    while (!formattingElements.isEmpty()) {
        Element el = removeLastFormattingElement();
        if (el == null)
            break;
    }
}","public void test08694() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""th"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test08795() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    htmlTreeBuilder0.parse(stringReader0, """", (ParseErrorList) null, parseSettings0);
    htmlTreeBuilder0.resetInsertionMode();
}",""
"Element getActiveFormattingElement(String nodeName) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (// scope marker
        next == null)
            break;
        else if (next.nodeName().equals(nodeName))
            return next;
    }
    return null;
}","public void test08896() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    Element element0 = htmlTreeBuilder0.getActiveFormattingElement(""<]X"");
    assertNull(element0);
}",""
"public boolean hasParent() {
    return parentNode != null;
}","public void test08997() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""colrgroup"");
    Element element0 = document0.createElement(""colrgroup"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""colrgroup"", document0, ""tbody"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
    assertFalse(document0.hasParent());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test09098() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""colrgroup"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""colrgroup"", document0, ""tbody"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public boolean hasParent() {
    return parentNode != null;
}","public void test09199() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""colrgroup"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""colrgroup"", document0, ""tbody"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
    assertFalse(document0.hasParent());
}",""
"void clearFormattingElementsToLastMarker() {
    while (!formattingElements.isEmpty()) {
        Element el = removeLastFormattingElement();
        if (el == null)
            break;
    }
}","public void test092100() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""colrgroup"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""colrgroup"", document0, ""tbody"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.clearFormattingElementsToLastMarker();
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test093101() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"Element removeLastFormattingElement() {
    int size = formattingElements.size();
    if (size > 0)
        return formattingElements.remove(size - 1);
    else
        return null;
}","public void test094102() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
    assertNull(element0);
}",""
"public QuirksMode quirksMode() {
    return quirksMode;
}","public void test095103() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, false);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    Document document1 = (Document) htmlTreeBuilder0.lastFormattingElement();
    assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
}",""
"void generateImpliedEndTags(String excludeTag) {
    while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && StringUtil.in(currentElement().nodeName(), TagSearchEndTags)) pop();
}","public void test096104() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader(""o"");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    htmlTreeBuilder0.parse(stringReader0, ""o"", (ParseErrorList) null, parseSettings0);
    htmlTreeBuilder0.generateImpliedEndTags(""o"");
}","/**
 *     11.2.5.2 Closing elements that have implied end tags<p/>
 *     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
 *     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
 *     the UA must pop the current node off the stack of open elements.
 *
 *     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the
 *     process, then the UA must perform the above steps as if that element was not in the above list.
 */"
"void generateImpliedEndTags(String excludeTag) {
    while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && StringUtil.in(currentElement().nodeName(), TagSearchEndTags)) pop();
}","public void test097105() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.generateImpliedEndTags(""o"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}","/**
 *     11.2.5.2 Closing elements that have implied end tags<p/>
 *     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
 *     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
 *     the UA must pop the current node off the stack of open elements.
 *
 *     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the
 *     process, then the UA must perform the above steps as if that element was not in the above list.
 */"
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !StringUtil.in(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test098107() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, false);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    boolean boolean0 = htmlTreeBuilder0.inSelectScope(""AfterAfterBody"");
    assertFalse(boolean0);
}",""
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.nodeName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !StringUtil.in(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test099108() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    String[] stringArray0 = new String[0];
    htmlTreeBuilder0.popStackToClose(stringArray0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inSelectScope(""xmp"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inScope(String targetName) {
    return inScope(targetName, null);
}","public void test100109() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.push(document0);
    boolean boolean0 = htmlTreeBuilder0.inScope(""M6|#w2gV'#&"");
    assertFalse(boolean0);
}",""
"boolean inButtonScope(String targetName) {
    return inScope(targetName, TagSearchButton);
}","public void test101110() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    Element element0 = htmlTreeBuilder0.currentElement();
    htmlTreeBuilder0.insertOnStackAfter(element0, document0);
    boolean boolean0 = htmlTreeBuilder0.inButtonScope("">v'["");
    assertFalse(boolean0);
}",""
"boolean inButtonScope(String targetName) {
    return inScope(targetName, TagSearchButton);
}","public void test102111() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    Element element0 = htmlTreeBuilder0.currentElement();
    htmlTreeBuilder0.removeFromStack(element0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inButtonScope(""]K:"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test103114() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    Element element0 = document0.body();
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""]K:"", element0, ""]K:"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
    assertEquals(1, element1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"Element removeLastFormattingElement() {
    int size = formattingElements.size();
    if (size > 0)
        return formattingElements.remove(size - 1);
    else
        return null;
}","public void test103115() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    Element element0 = document0.body();
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""]K:"", element0, ""]K:"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
    assertNotNull(element1);
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""th"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test104116() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.push(document0);
    htmlTreeBuilder0.resetInsertionMode();
}",""
"void replaceActiveFormattingElement(Element out, Element in) {
    replaceInQueue(formattingElements, out, in);
}","public void test105117() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"void insertOnStackAfter(Element after, Element in) {
    int i = stack.lastIndexOf(after);
    Validate.isTrue(i != -1);
    stack.add(i + 1, in);
}","public void test106118() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, false);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test107119() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    Element element0 = document0.head();
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", element0, ""]K:"", parseErrorList0, parseSettings0);
    Element element1 = htmlTreeBuilder0.currentElement();
    htmlTreeBuilder0.insertOnStackAfter(element1, document0);
    htmlTreeBuilder0.push(element0);
    Element element2 = htmlTreeBuilder0.aboveOnStack(document0);
    assertEquals(1, element2.childNodeSize());
}",""
"void clearStackToTableRowContext() {
    clearStackToContext(""tr"");
}","public void test108120() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, false);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.clearStackToTableRowContext();
}",""
"void clearStackToTableBodyContext() {
    clearStackToContext(""tbody"", ""tfoot"", ""thead"");
}","public void test109121() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = new Document(""Z?"");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
    htmlTreeBuilder0.parseFragment(""Z?"", document0, ""tbody"", parseErrorList0, parseSettings0);
    String[] stringArray0 = new String[0];
    htmlTreeBuilder0.popStackToClose(stringArray0);
    htmlTreeBuilder0.clearStackToTableBodyContext();
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.nodeName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""th"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test110122() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    htmlTreeBuilder0.parse(stringReader0, """", (ParseErrorList) null, parseSettings0);
    htmlTreeBuilder0.popStackToBefore("""");
    htmlTreeBuilder0.resetInsertionMode();
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test111124() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    Element element0 = htmlTreeBuilder0.currentElement();
    htmlTreeBuilder0.insertOnStackAfter(element0, document0);
    assertEquals(0, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"boolean removeFromStack(Element el) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            stack.remove(pos);
            return true;
        }
    }
    return false;
}","public void test111125() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    Element element0 = htmlTreeBuilder0.currentElement();
    htmlTreeBuilder0.insertOnStackAfter(element0, document0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertTrue(boolean0);
}",""
"boolean removeFromStack(Element el) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            stack.remove(pos);
            return true;
        }
    }
    return false;
}","public void test112127() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, false);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    boolean boolean0 = htmlTreeBuilder0.removeFromStack((Element) null);
    assertFalse(boolean0);
}",""
"List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings) {
    // context may be null
    state = HtmlTreeBuilderState.Initial;
    initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);
    contextElement = context;
    fragmentParsing = true;
    Element root = null;
    if (context != null) {
        if (// quirks setup:
        context.ownerDocument() != null)
            doc.quirksMode(context.ownerDocument().quirksMode());
        // initialise the tokeniser state:
        String contextTag = context.tagName();
        if (StringUtil.in(contextTag, ""title"", ""textarea""))
            tokeniser.transition(TokeniserState.Rcdata);
        else if (StringUtil.in(contextTag, ""iframe"", ""noembed"", ""noframes"", ""style"", ""xmp""))
            tokeniser.transition(TokeniserState.Rawtext);
        else if (contextTag.equals(""script""))
            tokeniser.transition(TokeniserState.ScriptData);
        else if (contextTag.equals((""noscript"")))
            // if scripting enabled, rawtext
            tokeniser.transition(TokeniserState.Data);
        else if (contextTag.equals(""plaintext""))
            tokeniser.transition(TokeniserState.Data);
        else
            // default
            tokeniser.transition(TokeniserState.Data);
        root = new Element(Tag.valueOf(""html"", settings), baseUri);
        doc.appendChild(root);
        stack.add(root);
        resetInsertionMode();
        // setup form element to nearest form on context (up ancestor chain). ensures form controls are associated
        // with form correctly
        Elements contextChain = context.parents();
        contextChain.add(0, context);
        for (Element parent : contextChain) {
            if (parent instanceof FormElement) {
                formElement = (FormElement) parent;
                break;
            }
        }
    }
    runParser();
    if (context != null)
        return root.childNodes();
    else
        return doc.childNodes();
}","public void test113128() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader("""");
    ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Document document0 = htmlTreeBuilder0.parse(stringReader0, """", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.insertInFosterParent(document0);
    // Undeclared exception!
    htmlTreeBuilder0.parseFragment("""", document0, """", parseErrorList0, parseSettings0);
}",""
"Element aboveOnStack(Element el) {
    assert onStack(el);
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            return stack.get(pos - 1);
        }
    }
    return null;
}","public void test114129() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.aboveOnStack(document0);
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
protected boolean process(Token token) {
    currentToken = token;
    return this.state.process(token, this);
}","public void test115130() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    Token.Comment token_Comment0 = new Token.Comment();
    boolean boolean0 = htmlTreeBuilder0.process(token_Comment0);
    assertTrue(boolean0);
}",""
"protected boolean processStartTag(String name) {
    if (currentToken == start) {
        // don't recycle an in-use token
        return process(new Token.StartTag().name(name));
    }
    return process(start.reset().name(name));
}","public void test116133() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, true);
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    boolean boolean0 = htmlTreeBuilder0.processStartTag(""hr"");
    assertTrue(boolean0);
}",""
"void error(HtmlTreeBuilderState state) {
    if (errors.canAddError())
        errors.add(new ParseError(reader.pos(), ""Unexpected token [%s] when in state [%s]"", currentToken.tokenType(), state));
}","public void test117134() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, false);
    htmlTreeBuilder0.parseFragment(""]K:"", document0, ""]K:"", parseErrorList0, parseSettings0);
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
    htmlTreeBuilder0.error(htmlTreeBuilderState0);
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test119136() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    htmlTreeBuilder0.maybeSetBaseUri(document0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"void clearStackToTableRowContext() {
    clearStackToContext(""tr"");
}","public void test120137() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseErrorList parseErrorList0 = new ParseErrorList(8, 8);
    ParseSettings parseSettings0 = new ParseSettings(true, false);
    htmlTreeBuilder0.parseFragment("">v'["", (Element) null, ""]K:"", parseErrorList0, parseSettings0);
    htmlTreeBuilder0.clearStackToTableRowContext();
}",""
"void clearStackToTableContext() {
    clearStackToContext(""table"");
}","public void test121138() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.clearStackToTableContext();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"HtmlTreeBuilderState originalState() {
    return originalState;
}","public void test122139() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.originalState();
}",""
"boolean inTableScope(String targetName) {
    return inSpecificScope(targetName, TagSearchTableScope, null);
}","public void test123140() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inTableScope(""Z?"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void insert(Token.Comment commentToken) {
    Comment comment = new Comment(commentToken.getData());
    insertNode(comment);
}","public void test124141() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insert((Token.Comment) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean isSpecial(Element el) {
    // todo: mathml's mi, mo, mn
    // todo: svg's foreigObject, desc, title
    String name = el.nodeName();
    return StringUtil.in(name, TagSearchSpecial);
}","public void test125142() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
    assertFalse(boolean0);
}",""
"void push(Element element) {
    stack.add(element);
}","public void test126143() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.push(document0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean isFosterInserts() {
    return fosterInserts;
}","public void test127144() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.setFosterInserts(true);
    boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
    assertTrue(boolean0);
}",""
"boolean isFragmentParsing() {
    return fragmentParsing;
}","public void test128145() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
    assertFalse(boolean0);
}",""
"boolean isInActiveFormattingElements(Element el) {
    return isElementInQueue(formattingElements, el);
}","public void test129146() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    Tag tag0 = Tag.valueOf(""Q!+I||N"", parseSettings0);
    Comment comment0 = new Comment(""Q!+I||N"");
    Attributes attributes0 = comment0.attributes();
    Element element0 = new Element(tag0, ""zwiTG<~|D"", attributes0);
    // Undeclared exception!
    try {
        htmlTreeBuilder0.isInActiveFormattingElements(element0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Element aboveOnStack(Element el) {
    assert onStack(el);
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            return stack.get(pos - 1);
        }
    }
    return null;
}","public void test130147() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = Document.createShell(""]K:"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.aboveOnStack(document0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"List<String> getPendingTableCharacters() {
    return pendingTableCharacters;
}","public void test131148() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
    assertNull(list0);
}",""
"String getBaseUri() {
    return baseUri;
}","public void test132149() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String string0 = htmlTreeBuilder0.getBaseUri();
    assertNull(string0);
}",""
"boolean inScope(String targetName) {
    return inScope(targetName, null);
}","public void test133150() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(""tbody"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"Document getDocument() {
    return doc;
}","public void test134151() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Document document0 = htmlTreeBuilder0.getDocument();
    assertNull(document0);
}",""
"void setPendingTableCharacters(List<String> pendingTableCharacters) {
    this.pendingTableCharacters = pendingTableCharacters;
}","public void test135152() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.setPendingTableCharacters((List<String>) null);
}",""
"boolean inScope(String[] targetNames) {
    return inSpecificScope(targetNames, TagsSearchInScope, null);
}","public void test136153() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String[] stringArray0 = new String[6];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"HtmlTreeBuilderState state() {
    return state;
}","public void test137154() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.state();
}",""
"boolean inButtonScope(String targetName) {
    return inScope(targetName, TagSearchButton);
}","public void test138155() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inButtonScope(""wmzo"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void clearStackToTableRowContext() {
    clearStackToContext(""tr"");
}","public void test139156() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"FormElement getFormElement() {
    return formElement;
}","public void test140157() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    FormElement formElement0 = htmlTreeBuilder0.getFormElement();
    assertNull(formElement0);
}",""
"void insertMarkerToFormattingElements() {
    formattingElements.add(null);
}","public void test142159() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"void generateImpliedEndTags() {
    generateImpliedEndTags(null);
}","public void test143160() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.generateImpliedEndTags();
}",""
"void markInsertionMode() {
    originalState = state;
}","public void test144161() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.markInsertionMode();
}",""
"boolean process(Token token, HtmlTreeBuilderState state) {
    currentToken = token;
    return state.process(token, this);
}","public void test145162() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    StringReader stringReader0 = new StringReader(""o"");
    ParseSettings parseSettings0 = ParseSettings.preserveCase;
    htmlTreeBuilder0.parse(stringReader0, ""o"", (ParseErrorList) null, parseSettings0);
    Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
    Token.EndTag token_EndTag0 = tokeniser0.endPending;
    HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHead;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"@Override
public String toString() {
    return ""TreeBuilder{"" + ""currentToken="" + currentToken + "", state="" + state + "", currentElement="" + currentElement() + '}';
}","public void test146163() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"void clearStackToTableBodyContext() {
    clearStackToContext(""tbody"", ""tfoot"", ""thead"");
}","public void test147164() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"ArrayList<Element> getStack() {
    return stack;
}","public void test148165() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
    assertNull(arrayList0);
}",""
"void setFormElement(FormElement formElement) {
    this.formElement = formElement;
}","public void test149166() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    htmlTreeBuilder0.setFormElement((FormElement) null);
}",""
"Element getHeadElement() {
    return headElement;
}","public void test150167() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Element element0 = htmlTreeBuilder0.getHeadElement();
    assertNull(element0);
}",""
"boolean inListItemScope(String targetName) {
    return inScope(targetName, TagSearchList);
}","public void test151168() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inListItemScope("""");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
