focal_method,test_prefix,docstring
"public String baseUri() {
    return baseUri;
}","public void test000() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    assertEquals(""rBarr"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test001() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test002() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test003() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test004() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public String baseUri() {
    return baseUri;
}","public void test005() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    assertEquals(""rBarr"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test006() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test007() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test008() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    assertEquals(1, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test009() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test0010() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    assertEquals(""#document"", element0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0011() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    assertEquals(1, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test0012() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    assertEquals(""rBarr"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Element appendChild(Node child) {
    Validate.notNull(child);
    addChildren(child);
    return this;
}","public void test0013() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    assertNotNull(element0);
}","/**
 * Add a node to the last child of this element.
 *
 * @param child node to add. Must not already have a parent.
 * @return this element, so that you can add more child nodes or elements.
 */"
"public String baseUri() {
    return baseUri;
}","public void test0016() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    assertEquals(""rBarr"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0017() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0018() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0019() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    assertEquals(1, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0020() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test0021() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    assertEquals(""#document"", element0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0022() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    assertEquals(1, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test0023() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    assertEquals(""rBarr"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"protected void setParentNode(Node parentNode) {
    if (this.parentNode != null)
        this.parentNode.removeChild(this);
    this.parentNode = parentNode;
}","public void test0024() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    assertSame(document0, element0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test0026() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    Node node0 = document0.nextSibling();
    assertEquals(""rBarr"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0027() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    Node node0 = document0.nextSibling();
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0028() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    Node node0 = document0.nextSibling();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0029() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    Node node0 = document0.nextSibling();
    assertEquals(1, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Node nextSibling() {
    if (parentNode == null)
        // root
        return null;
    List<Node> siblings = parentNode.childNodes;
    Integer index = siblingIndex();
    Validate.notNull(index);
    if (siblings.size() > index + 1)
        return siblings.get(index + 1);
    else
        return null;
}","public void test0030() throws Throwable {
    Document document0 = Document.createShell(""rBarr"");
    Element element0 = document0.appendChild(document0);
    document0.setParentNode(element0);
    Node node0 = document0.nextSibling();
    assertNull(node0);
}","/**
 *     Get this node's next sibling.
 *     @return next sibling, or null if this is the last sibling
 */"
"public String baseUri() {
    return baseUri;
}","public void test0132() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    assertEquals(""N&|u[bpkZ"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0133() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0134() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0135() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test0136() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public String baseUri() {
    return baseUri;
}","public void test0137() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    assertEquals(""N&|u[bpkZ"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0138() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0139() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0140() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test0141() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    assertEquals(""N&|u[bpkZ"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0142() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    assertTrue(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0143() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Element head() {
    return findFirstElementByTagName(""head"", this);
}","public void test0144() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    assertNotNull(element0);
}","/**
 *     Accessor to the document's {@code head} element.
 *     @return {@code head}
 */"
"public String baseUri() {
    return baseUri;
}","public void test0145() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    List<Node> list0 = element0.siblingNodes();
    assertEquals(""N&|u[bpkZ"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0146() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    List<Node> list0 = element0.siblingNodes();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0147() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    List<Node> list0 = element0.siblingNodes();
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0148() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    List<Node> list0 = element0.siblingNodes();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test0149() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    List<Node> list0 = element0.siblingNodes();
    assertEquals(""N&|u[bpkZ"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0150() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    List<Node> list0 = element0.siblingNodes();
    assertTrue(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0151() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    List<Node> list0 = element0.siblingNodes();
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public List<Node> siblingNodes() {
    // TODO: should this strip out this node? i.e. not a sibling of self?
    return parent().childNodes();
}","public void test0154() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    List<Node> list0 = element0.siblingNodes();
    assertNotNull(list0);
}","/**
 *     Retrieves this node's sibling nodes. Effectively, {@link #childNodes()  node.parent.childNodes()}.
 *     @return node siblings, including this node
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0255() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0256() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test0257() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    assertEquals(""8zU*Kc~T=+w?P"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0258() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test0259() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0262() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    StringBuilder stringBuilder0 = new StringBuilder(3545);
    Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0263() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    StringBuilder stringBuilder0 = new StringBuilder(3545);
    Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test0264() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    StringBuilder stringBuilder0 = new StringBuilder(3545);
    Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
    assertEquals(""8zU*Kc~T=+w?P"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0265() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    StringBuilder stringBuilder0 = new StringBuilder(3545);
    Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public OutputSettings outputSettings() {
    return outputSettings;
}","public void test0269() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    StringBuilder stringBuilder0 = new StringBuilder(3545);
    Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
    assertNotNull(document_OutputSettings0);
}","/**
 * Get the document's current output settings.
 * @return the document's current output settings.
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0270() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    StringBuilder stringBuilder0 = new StringBuilder(3545);
    Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
    document0.indent(stringBuilder0, 489, document_OutputSettings0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0271() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    StringBuilder stringBuilder0 = new StringBuilder(3545);
    Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
    document0.indent(stringBuilder0, 489, document_OutputSettings0);
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test0272() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    StringBuilder stringBuilder0 = new StringBuilder(3545);
    Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
    document0.indent(stringBuilder0, 489, document_OutputSettings0);
    assertEquals(""8zU*Kc~T=+w?P"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0273() throws Throwable {
    Document document0 = Document.createShell(""8zU*Kc~T=+w?P"");
    StringBuilder stringBuilder0 = new StringBuilder(3545);
    Document.OutputSettings document_OutputSettings0 = document0.outputSettings();
    document0.indent(stringBuilder0, 489, document_OutputSettings0);
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test0378() throws Throwable {
    Comment comment0 = new Comment("""", """");
    assertEquals("""", comment0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#comment"";
}","public void test0379() throws Throwable {
    Comment comment0 = new Comment("""", """");
    assertEquals(""#comment"", comment0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0380() throws Throwable {
    Comment comment0 = new Comment("""", """");
    assertEquals(0, (int) comment0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Comment(String data, String baseUri) {
    super(baseUri);
    attributes.put(COMMENT_KEY, data);
}","public void test0381() throws Throwable {
    Comment comment0 = new Comment("""", """");
    assertNotNull(comment0);
}","/**
 *     Create a new comment node.
 *     @param data The contents of the comment
 *     @param baseUri base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test0382() throws Throwable {
    Comment comment0 = new Comment("""", """");
    Node[] nodeArray0 = new Node[9];
    nodeArray0[0] = (Node) comment0;
    nodeArray0[1] = (Node) comment0;
    nodeArray0[2] = (Node) comment0;
    nodeArray0[3] = (Node) comment0;
    nodeArray0[4] = (Node) comment0;
    nodeArray0[5] = (Node) comment0;
    nodeArray0[6] = (Node) comment0;
    nodeArray0[7] = (Node) comment0;
    nodeArray0[8] = (Node) comment0;
    comment0.addChildren(0, nodeArray0);
    assertEquals("""", comment0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#comment"";
}","public void test0383() throws Throwable {
    Comment comment0 = new Comment("""", """");
    Node[] nodeArray0 = new Node[9];
    nodeArray0[0] = (Node) comment0;
    nodeArray0[1] = (Node) comment0;
    nodeArray0[2] = (Node) comment0;
    nodeArray0[3] = (Node) comment0;
    nodeArray0[4] = (Node) comment0;
    nodeArray0[5] = (Node) comment0;
    nodeArray0[6] = (Node) comment0;
    nodeArray0[7] = (Node) comment0;
    nodeArray0[8] = (Node) comment0;
    comment0.addChildren(0, nodeArray0);
    assertEquals(""#comment"", comment0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0384() throws Throwable {
    Comment comment0 = new Comment("""", """");
    Node[] nodeArray0 = new Node[9];
    nodeArray0[0] = (Node) comment0;
    nodeArray0[1] = (Node) comment0;
    nodeArray0[2] = (Node) comment0;
    nodeArray0[3] = (Node) comment0;
    nodeArray0[4] = (Node) comment0;
    nodeArray0[5] = (Node) comment0;
    nodeArray0[6] = (Node) comment0;
    nodeArray0[7] = (Node) comment0;
    nodeArray0[8] = (Node) comment0;
    comment0.addChildren(0, nodeArray0);
    assertEquals(0, (int) comment0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"protected void addChildren(int index, Node... children) {
    Validate.noNullElements(children);
    for (int i = children.length - 1; i >= 0; i--) {
        Node in = children[i];
        reparentChild(in);
        childNodes.add(index, in);
    }
    reindexChildren();
}","public void test0385() throws Throwable {
    Comment comment0 = new Comment("""", """");
    Node[] nodeArray0 = new Node[9];
    nodeArray0[0] = (Node) comment0;
    nodeArray0[1] = (Node) comment0;
    nodeArray0[2] = (Node) comment0;
    nodeArray0[3] = (Node) comment0;
    nodeArray0[4] = (Node) comment0;
    nodeArray0[5] = (Node) comment0;
    nodeArray0[6] = (Node) comment0;
    nodeArray0[7] = (Node) comment0;
    nodeArray0[8] = (Node) comment0;
    comment0.addChildren(0, nodeArray0);
    assertEquals(9, nodeArray0.length);
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0486() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test0487() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    assertEquals(""TJ:W218n)\""6lVnq)#*"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0488() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0489() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    assertEquals(""#document"", document0.nodeName());
}",""
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test0490() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0491() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test0492() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    assertEquals(""TJ:W218n)\""6lVnq)#*"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0493() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test0494() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test0495() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    assertEquals(""TJ:W218n)\""6lVnq)#*"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test0496() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0497() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Element prependElement(String tagName) {
    Element child = new Element(Tag.valueOf(tagName), baseUri());
    prependChild(child);
    return child;
}","public void test0498() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    assertNotNull(element0);
}","/**
 * Create a new element by tag name, and add it as the first child.
 *
 * @param tagName the name of the tag (e.g. {@code div}).
 * @return the new element, to allow you to add content to it, e.g.:
 *  {@code parent.prependElement(""h1"").attr(""id"", ""header"").text(""Welcome"");}
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test0499() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    element0.remove();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test04100() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    element0.remove();
    assertEquals(""TJ:W218n)\""6lVnq)#*"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test04101() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    element0.remove();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test04102() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    element0.remove();
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test04103() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    element0.remove();
    assertEquals(""TJ:W218n)\""6lVnq)#*"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test04104() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    element0.remove();
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test04105() throws Throwable {
    Document document0 = Document.createShell(""TJ:W218n)\""6lVnq)#*"");
    Element element0 = document0.prependElement(""icl"");
    element0.remove();
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test05106() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test05107() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test05108() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    assertEquals(""/R&[^jW@`Wl"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test05109() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Document(String baseUri) {
    super(Tag.valueOf(""#root""), baseUri);
}","public void test05110() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    assertNotNull(document0);
}","/**
 *     Create a new, empty Document.
 *     @param baseUri base URI of document
 *     @see org.jsoup.Jsoup#parse
 *     @see #createShell
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test05111() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    String string0 = document0.toString();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test05112() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    String string0 = document0.toString();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test05113() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    String string0 = document0.toString();
    assertEquals(""/R&[^jW@`Wl"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test05114() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    String string0 = document0.toString();
    assertEquals(""#document"", document0.nodeName());
}",""
"public String toString() {
    return outerHtml();
}","public void test05115() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    String string0 = document0.toString();
    assertEquals("""", string0);
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test06117() throws Throwable {
    Document document0 = new Document(""\n"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test06118() throws Throwable {
    Document document0 = new Document(""\n"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test06119() throws Throwable {
    Document document0 = new Document(""\n"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test06120() throws Throwable {
    Document document0 = new Document(""\n"");
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Document(String baseUri) {
    super(Tag.valueOf(""#root""), baseUri);
}","public void test06121() throws Throwable {
    Document document0 = new Document(""\n"");
    assertNotNull(document0);
}","/**
 *     Create a new, empty Document.
 *     @param baseUri base URI of document
 *     @see org.jsoup.Jsoup#parse
 *     @see #createShell
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test06122() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test06123() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test06124() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test06125() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"protected void addChildren(Node... children) {
    //most used. short circuit addChildren(int), which hits reindex children and array copy
    for (Node child : children) {
        reparentChild(child);
        childNodes.add(child);
        child.setSiblingIndex(childNodes.size() - 1);
    }
}","public void test06126() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    assertEquals(8, nodeArray0.length);
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test06127() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test06128() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    assertEquals(1, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test06129() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test06130() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test06131() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test06132() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    assertEquals(1, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test06133() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    assertEquals(""#document"", element0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test06134() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    assertEquals("""", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Element prependText(String text) {
    TextNode node = new TextNode(text, baseUri());
    prependChild(node);
    return this;
}","public void test06135() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    assertNotNull(element0);
}","/**
 * Create and prepend a new TextNode to this element.
 *
 * @param text the unencoded text to add
 * @return this element
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test06138() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    Integer integer0 = element0.siblingIndex();
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test06139() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    Integer integer0 = element0.siblingIndex();
    assertEquals(1, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test06140() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    Integer integer0 = element0.siblingIndex();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test06141() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    Integer integer0 = element0.siblingIndex();
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test06142() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    Integer integer0 = element0.siblingIndex();
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test06143() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    Integer integer0 = element0.siblingIndex();
    assertEquals(1, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test06144() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    Integer integer0 = element0.siblingIndex();
    assertEquals(""#document"", element0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test06145() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    Integer integer0 = element0.siblingIndex();
    assertEquals("""", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test06146() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[5] = (Node) document0;
    nodeArray0[6] = (Node) document0;
    nodeArray0[7] = (Node) document0;
    document0.addChildren(nodeArray0);
    Element element0 = document0.prependText(""UnderBar"");
    Integer integer0 = element0.siblingIndex();
    assertEquals(1, (int) integer0);
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test07163() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test07164() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test07165() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertEquals(""N&|u[bpkZ"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test07166() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test07167() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test07168() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertEquals(""N&|u[bpkZ"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test07169() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertTrue(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test07170() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertEquals(0, (int) element1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test07171() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertTrue(element1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test07172() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertEquals(""N&|u[bpkZ"", element1.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Element))
        return false;
    if (!super.equals(o))
        return false;
    Element element = (Element) o;
    if (tag != null ? !tag.equals(element.tag) : element.tag != null)
        return false;
    return true;
}","public void test07173() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertFalse(element1.equals((Object) element0));
}",""
"@Override
public final Element parent() {
    return (Element) parentNode;
}","public void test07174() throws Throwable {
    Document document0 = Document.createShell(""N&|u[bpkZ"");
    Element element0 = document0.head();
    Element element1 = (Element) element0.parent();
    assertNotNull(element1);
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test08177() throws Throwable {
    Document document0 = new Document(""I"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test08178() throws Throwable {
    Document document0 = new Document(""I"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test08179() throws Throwable {
    Document document0 = new Document(""I"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test08180() throws Throwable {
    Document document0 = new Document(""I"");
    assertEquals(""I"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Document(String baseUri) {
    super(Tag.valueOf(""#root""), baseUri);
}","public void test08181() throws Throwable {
    Document document0 = new Document(""I"");
    assertNotNull(document0);
}","/**
 *     Create a new, empty Document.
 *     @param baseUri base URI of document
 *     @see org.jsoup.Jsoup#parse
 *     @see #createShell
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test08182() throws Throwable {
    Document document0 = new Document(""I"");
    String string0 = document0.outerHtml();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test08183() throws Throwable {
    Document document0 = new Document(""I"");
    String string0 = document0.outerHtml();
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test08184() throws Throwable {
    Document document0 = new Document(""I"");
    String string0 = document0.outerHtml();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test08185() throws Throwable {
    Document document0 = new Document(""I"");
    String string0 = document0.outerHtml();
    assertEquals(""I"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String outerHtml() {
    // no outer wrapper tag
    return super.html();
}","public void test08186() throws Throwable {
    Document document0 = new Document(""I"");
    String string0 = document0.outerHtml();
    assertEquals("""", string0);
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test09188() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""Gcy"", ""Gcy"");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#text"";
}","public void test09189() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""Gcy"", ""Gcy"");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test09190() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""Gcy"", ""Gcy"");
    assertEquals(""Gcy"", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public static TextNode createFromEncoded(String encodedText, String baseUri) {
    String text = Entities.unescape(encodedText);
    return new TextNode(text, baseUri);
}","public void test09191() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""Gcy"", ""Gcy"");
    assertNotNull(textNode0);
}","/**
 * Create a new TextNode from HTML encoded (aka escaped) data.
 * @param encodedText Text containing encoded HTML (e.g. &amp;lt;)
 * @return TextNode containing unencoded data (e.g. &lt;)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test09192() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""Gcy"", ""Gcy"");
    String string0 = textNode0.nodeName();
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#text"";
}","public void test09193() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""Gcy"", ""Gcy"");
    String string0 = textNode0.nodeName();
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test09194() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""Gcy"", ""Gcy"");
    String string0 = textNode0.nodeName();
    assertEquals(""Gcy"", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#text"";
}","public void test09195() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""Gcy"", ""Gcy"");
    String string0 = textNode0.nodeName();
    assertEquals(""#text"", string0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test10202() throws Throwable {
    Document document0 = new Document(""\n"");
    boolean boolean0 = document0.equals(document0);
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test10203() throws Throwable {
    Document document0 = new Document(""\n"");
    boolean boolean0 = document0.equals(document0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test10204() throws Throwable {
    Document document0 = new Document(""\n"");
    boolean boolean0 = document0.equals(document0);
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test10205() throws Throwable {
    Document document0 = new Document(""\n"");
    boolean boolean0 = document0.equals(document0);
    assertEquals(""#document"", document0.nodeName());
}",""
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    if (!(o instanceof Element))
        return false;
    if (!super.equals(o))
        return false;
    Element element = (Element) o;
    if (tag != null ? !tag.equals(element.tag) : element.tag != null)
        return false;
    return true;
}","public void test10206() throws Throwable {
    Document document0 = new Document(""\n"");
    boolean boolean0 = document0.equals(document0);
    assertTrue(boolean0);
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test11207() throws Throwable {
    Document document0 = Document.createShell(""qT"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test11208() throws Throwable {
    Document document0 = Document.createShell(""qT"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test11209() throws Throwable {
    Document document0 = Document.createShell(""qT"");
    assertEquals(""qT"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test11210() throws Throwable {
    Document document0 = Document.createShell(""qT"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test11211() throws Throwable {
    Document document0 = Document.createShell(""qT"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test11212() throws Throwable {
    Document document0 = Document.createShell(""qT"");
    Node[] nodeArray0 = document0.childNodesAsArray();
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test11213() throws Throwable {
    Document document0 = Document.createShell(""qT"");
    Node[] nodeArray0 = document0.childNodesAsArray();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test11214() throws Throwable {
    Document document0 = Document.createShell(""qT"");
    Node[] nodeArray0 = document0.childNodesAsArray();
    assertEquals(""qT"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test11215() throws Throwable {
    Document document0 = Document.createShell(""qT"");
    Node[] nodeArray0 = document0.childNodesAsArray();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"protected Node[] childNodesAsArray() {
    return childNodes.toArray(new Node[childNodes().size()]);
}","public void test11216() throws Throwable {
    Document document0 = Document.createShell(""qT"");
    Node[] nodeArray0 = document0.childNodesAsArray();
    assertNotNull(nodeArray0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test12218() throws Throwable {
    Document document0 = Document.createShell("""");
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test12219() throws Throwable {
    Document document0 = Document.createShell("""");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test12220() throws Throwable {
    Document document0 = Document.createShell("""");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test12221() throws Throwable {
    Document document0 = Document.createShell("""");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test12222() throws Throwable {
    Document document0 = Document.createShell("""");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public String baseUri() {
    return baseUri;
}","public void test12223() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test12224() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test12225() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test12226() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test12227() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    assertEquals(""#document"", document1.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test12228() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    assertEquals(0, (int) document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test12229() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    assertFalse(document1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test12230() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    assertEquals("""", document1.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Element empty() {
    childNodes.clear();
    return this;
}","public void test12231() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    assertNotNull(document1);
}","/**
 * Remove all of the element's child nodes. Any attributes are left as-is.
 * @return this element
 */"
"public String baseUri() {
    return baseUri;
}","public void test12234() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    Node[] nodeArray0 = document1.childNodesAsArray();
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test12235() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    Node[] nodeArray0 = document1.childNodesAsArray();
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test12236() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    Node[] nodeArray0 = document1.childNodesAsArray();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test12237() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    Node[] nodeArray0 = document1.childNodesAsArray();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test12238() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    Node[] nodeArray0 = document1.childNodesAsArray();
    assertEquals(""#document"", document1.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test12239() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    Node[] nodeArray0 = document1.childNodesAsArray();
    assertEquals(0, (int) document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test12240() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    Node[] nodeArray0 = document1.childNodesAsArray();
    assertFalse(document1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test12241() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    Node[] nodeArray0 = document1.childNodesAsArray();
    assertEquals("""", document1.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"protected Node[] childNodesAsArray() {
    return childNodes.toArray(new Node[childNodes().size()]);
}","public void test12242() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.empty();
    Node[] nodeArray0 = document1.childNodesAsArray();
    assertNotNull(nodeArray0);
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test13246() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""<6!e,t$\u0000GcZ"", ""~jSq;6d4g"");
    assertEquals(0, (int) dataNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#data"";
}","public void test13247() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""<6!e,t$\u0000GcZ"", ""~jSq;6d4g"");
    assertEquals(""#data"", dataNode0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test13248() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""<6!e,t$\u0000GcZ"", ""~jSq;6d4g"");
    assertEquals(""~jSq;6d4g"", dataNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public static DataNode createFromEncoded(String encodedData, String baseUri) {
    String data = Entities.unescape(encodedData);
    return new DataNode(data, baseUri);
}","public void test13249() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""<6!e,t$\u0000GcZ"", ""~jSq;6d4g"");
    assertNotNull(dataNode0);
}","/**
 *     Create a new DataNode from HTML encoded data.
 *     @param encodedData encoded data
 *     @param baseUri bass URI
 *     @return new DataNode
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test13250() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""<6!e,t$\u0000GcZ"", ""~jSq;6d4g"");
    String string0 = dataNode0.baseUri();
    assertEquals(0, (int) dataNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#data"";
}","public void test13251() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""<6!e,t$\u0000GcZ"", ""~jSq;6d4g"");
    String string0 = dataNode0.baseUri();
    assertEquals(""#data"", dataNode0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test13252() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""<6!e,t$\u0000GcZ"", ""~jSq;6d4g"");
    String string0 = dataNode0.baseUri();
    assertEquals(""~jSq;6d4g"", dataNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test13253() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""<6!e,t$\u0000GcZ"", ""~jSq;6d4g"");
    String string0 = dataNode0.baseUri();
    assertEquals(""~jSq;6d4g"", string0);
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test14255() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    assertFalse(tag0.isData());
}","/**
 *     Gets if this tag is a data only tag.
 *     @return if this tag is a data only tag
 */"
"public boolean isBlock() {
    return isBlock;
}","public void test14256() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    assertTrue(tag0.isBlock());
}","/**
 *     Gets if this is a block tag.
 *     @return if block tag
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test14257() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    assertFalse(tag0.preserveWhitespace());
}","/**
 *     Get if this tag should preserve whitespace within child text nodes.
 *     @return if preserve whitepace
 */"
"public boolean isKnownTag() {
    return knownTag;
}","public void test14258() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    assertTrue(tag0.isKnownTag());
}","/**
 * Get if this is a pre-defined tag, or was auto created on parsing.
 * @return if a known tag
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test14259() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    assertTrue(tag0.canContainBlock());
}","/**
 *     Gets if this tag can contain block tags.
 *     @return if tag can contain block tags
 */"
"public String toString() {
    return tagName;
}","public void test14260() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    assertEquals(""body"", tag0.toString());
}",""
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test14261() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 * @return if this tag should be output as self closing.
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test14262() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    assertFalse(tag0.isInline());
}","/**
 *     Gets if this tag is an inline tag.
 *     @return if this tag is an inline tag.
 */"
"public boolean isEmpty() {
    return empty;
}","public void test14263() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    assertFalse(tag0.isEmpty());
}","/**
 *     Get if this is an empty tag
 *     @return if this is an emtpy tag
 */"
"public static Tag valueOf(String tagName) {
    Validate.notNull(tagName);
    tagName = tagName.trim().toLowerCase();
    Validate.notEmpty(tagName);
    synchronized (tags) {
        Tag tag = tags.get(tagName);
        if (tag == null) {
            // not defined: create default; go anywhere, do anything! (incl be inside a <p>)
            tag = new Tag(tagName);
            tag.setAncestor(defaultAncestor.tagName);
            tag.setExcludes();
            tag.isBlock = false;
            tag.canContainBlock = true;
        }
        return tag;
    }
}","public void test14264() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    assertNotNull(tag0);
}","/**
 *     Get a Tag by name. If not previously defined (unknown), returns a new generic tag, that can do anything.
 *     <p>
 *     Pre-defined tags (P, DIV etc) will be ==, but unknown tags are not registered and will only .equals().
 *     @param tagName Name of tag, e.g. ""p"". Case insensitive.
 *     @return The tag, either defined or new generic.
 */"
"public boolean isData() {
    return !canContainInline && !isEmpty();
}","public void test14266() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertFalse(tag0.isData());
}","/**
 *     Gets if this tag is a data only tag.
 *     @return if this tag is a data only tag
 */"
"public boolean isBlock() {
    return isBlock;
}","public void test14267() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertTrue(tag0.isBlock());
}","/**
 *     Gets if this is a block tag.
 *     @return if block tag
 */"
"public boolean preserveWhitespace() {
    return preserveWhitespace;
}","public void test14268() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertFalse(tag0.preserveWhitespace());
}","/**
 *     Get if this tag should preserve whitespace within child text nodes.
 *     @return if preserve whitepace
 */"
"public boolean isKnownTag() {
    return knownTag;
}","public void test14269() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertTrue(tag0.isKnownTag());
}","/**
 * Get if this is a pre-defined tag, or was auto created on parsing.
 * @return if a known tag
 */"
"public boolean canContainBlock() {
    return canContainBlock;
}","public void test14270() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertTrue(tag0.canContainBlock());
}","/**
 *     Gets if this tag can contain block tags.
 *     @return if tag can contain block tags
 */"
"public String toString() {
    return tagName;
}","public void test14271() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertEquals(""body"", tag0.toString());
}",""
"public boolean isSelfClosing() {
    return empty || selfClosing;
}","public void test14272() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertFalse(tag0.isSelfClosing());
}","/**
 * Get if this tag is self closing.
 * @return if this tag should be output as self closing.
 */"
"public boolean isInline() {
    return !isBlock;
}","public void test14273() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertFalse(tag0.isInline());
}","/**
 *     Gets if this tag is an inline tag.
 *     @return if this tag is an inline tag.
 */"
"public boolean isEmpty() {
    return empty;
}","public void test14274() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertFalse(tag0.isEmpty());
}","/**
 *     Get if this is an empty tag
 *     @return if this is an emtpy tag
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test14275() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertTrue(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test14276() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test14277() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertEquals(""body"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Element(Tag tag, String baseUri, Attributes attributes) {
    super(baseUri, attributes);
    Validate.notNull(tag);
    this.tag = tag;
}","public void test14278() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    assertNotNull(element0);
}","/**
 * Create a new, standalone Element. (Standalone in that is has no parent.)
 *
 * @param tag tag of this element
 * @param baseUri the base URI
 * @param attributes initial attributes
 * @see #appendChild(Node)
 * @see #appendElement(String)
 */"
"public String toString() {
    return outerHtml();
}","public void test14279() throws Throwable {
    Tag tag0 = Tag.valueOf(""body"");
    Attributes attributes0 = new Attributes();
    Element element0 = new Element(tag0, ""body"", attributes0);
    // Undeclared exception!
    try {
        element0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public void setBaseUri(String baseUri) {
    Validate.notNull(baseUri);
    this.baseUri = baseUri;
}","public void test15285() throws Throwable {
    Document document0 = new Document(""\n"");
    // Undeclared exception!
    try {
        document0.setBaseUri((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Update the base URI of this node.
 *     @param baseUri base URI to set
 */"
"public String baseUri() {
    return baseUri;
}","public void test16286() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("""", """");
    assertEquals("""", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#text"";
}","public void test16287() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("""", """");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test16288() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("""", """");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public static TextNode createFromEncoded(String encodedText, String baseUri) {
    String text = Entities.unescape(encodedText);
    return new TextNode(text, baseUri);
}","public void test16289() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("""", """");
    assertNotNull(textNode0);
}","/**
 * Create a new TextNode from HTML encoded (aka escaped) data.
 * @param encodedText Text containing encoded HTML (e.g. &amp;lt;)
 * @return TextNode containing unencoded data (e.g. &lt;)
 */"
"protected void replaceChild(Node out, Node in) {
    Validate.isTrue(out.parentNode == this);
    Validate.notNull(in);
    if (in.parentNode != null)
        in.parentNode.removeChild(in);
    Integer index = out.siblingIndex();
    childNodes.set(index, in);
    in.parentNode = this;
    in.setSiblingIndex(index);
    out.parentNode = null;
}","public void test16290() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded("""", """");
    // Undeclared exception!
    try {
        textNode0.replaceChild((Node) null, (Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test17291() throws Throwable {
    Document document0 = Document.createShell(""whqm"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test17292() throws Throwable {
    Document document0 = Document.createShell(""whqm"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test17293() throws Throwable {
    Document document0 = Document.createShell(""whqm"");
    assertEquals(""whqm"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test17294() throws Throwable {
    Document document0 = Document.createShell(""whqm"");
    assertEquals(""#document"", document0.nodeName());
}",""
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test17295() throws Throwable {
    Document document0 = Document.createShell(""whqm"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"protected void removeChild(Node out) {
    Validate.isTrue(out.parentNode == this);
    int index = out.siblingIndex();
    childNodes.remove(index);
    reindexChildren();
    out.parentNode = null;
}","public void test17296() throws Throwable {
    Document document0 = Document.createShell(""whqm"");
    // Undeclared exception!
    try {
        document0.removeChild((Node) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test18297() throws Throwable {
    Document document0 = Document.createShell(""vUjUzgB5"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test18298() throws Throwable {
    Document document0 = Document.createShell(""vUjUzgB5"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test18299() throws Throwable {
    Document document0 = Document.createShell(""vUjUzgB5"");
    assertEquals(""vUjUzgB5"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test18300() throws Throwable {
    Document document0 = Document.createShell(""vUjUzgB5"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test18301() throws Throwable {
    Document document0 = Document.createShell(""vUjUzgB5"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public Node removeAttr(String attributeKey) {
    Validate.notNull(attributeKey);
    attributes.remove(attributeKey);
    return this;
}","public void test18302() throws Throwable {
    Document document0 = Document.createShell(""vUjUzgB5"");
    // Undeclared exception!
    try {
        document0.removeAttr("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Remove an attribute from this element.
 * @param attributeKey The attribute to remove.
 * @return this (for chaining)
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test19303() throws Throwable {
    Document document0 = Document.createShell(""F<x,^$"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test19304() throws Throwable {
    Document document0 = Document.createShell(""F<x,^$"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test19305() throws Throwable {
    Document document0 = Document.createShell(""F<x,^$"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test19306() throws Throwable {
    Document document0 = Document.createShell(""F<x,^$"");
    assertEquals(""F<x,^$"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test19307() throws Throwable {
    Document document0 = Document.createShell(""F<x,^$"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public Node previousSibling() {
    List<Node> siblings = parentNode.childNodes;
    Integer index = siblingIndex();
    Validate.notNull(index);
    if (index > 0)
        return siblings.get(index - 1);
    else
        return null;
}","public void test19308() throws Throwable {
    Document document0 = Document.createShell(""F<x,^$"");
    // Undeclared exception!
    try {
        document0.previousSibling();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}","/**
 *     Get this node's previous sibling.
 *     @return the previous sibling, or null if this is the first sibling
 */"
"public String nodeName() {
    return ""#text"";
}","public void test20309() throws Throwable {
    TextNode textNode0 = new TextNode("""", """");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test20310() throws Throwable {
    TextNode textNode0 = new TextNode("""", """");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test20311() throws Throwable {
    TextNode textNode0 = new TextNode("""", """");
    assertEquals("""", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public TextNode(String text, String baseUri) {
    this.baseUri = baseUri;
    this.text = text;
}","public void test20312() throws Throwable {
    TextNode textNode0 = new TextNode("""", """");
    assertNotNull(textNode0);
}","/**
 *     Create a new TextNode representing the supplied (unencoded) text).
 *
 *     @param text raw text
 *     @param baseUri base uri
 *     @see #createFromEncoded(String, String)
 */"
"public String outerHtml() {
    StringBuilder accum = new StringBuilder(32 * 1024);
    outerHtml(accum);
    return accum.toString();
}","public void test20313() throws Throwable {
    TextNode textNode0 = new TextNode("""", """");
    // Undeclared exception!
    try {
        textNode0.outerHtml();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 *     Get the outer HTML of this node.
 *     @return HTML
 */"
"public String nodeName() {
    return ""#declaration"";
}","public void test21314() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""vartheta"", ""vartheta"", false);
    assertEquals(""#declaration"", xmlDeclaration0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test21315() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""vartheta"", ""vartheta"", false);
    assertEquals(0, (int) xmlDeclaration0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test21316() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""vartheta"", ""vartheta"", false);
    assertEquals(""vartheta"", xmlDeclaration0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public XmlDeclaration(String data, String baseUri, boolean isProcessingInstruction) {
    super(baseUri);
    attributes.put(DECL_KEY, data);
    this.isProcessingInstruction = isProcessingInstruction;
}","public void test21317() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""vartheta"", ""vartheta"", false);
    assertNotNull(xmlDeclaration0);
}","/**
 *     Create a new XML declaration
 *     @param data data
 *     @param baseUri base uri
 *     @param isProcessingInstruction is processing instruction
 */"
"protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) {
    accum.append(""\n"").append(StringUtil.padding(depth * out.indentAmount()));
}","public void test21318() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""vartheta"", ""vartheta"", false);
    // Undeclared exception!
    try {
        xmlDeclaration0.indent((StringBuilder) null, 4, (Document.OutputSettings) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}",""
"public String baseUri() {
    return baseUri;
}","public void test22319() throws Throwable {
    Document document0 = new Document(""org.jsoup.nodes.Node"");
    assertEquals(""org.jsoup.nodes.Node"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test22320() throws Throwable {
    Document document0 = new Document(""org.jsoup.nodes.Node"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test22321() throws Throwable {
    Document document0 = new Document(""org.jsoup.nodes.Node"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test22322() throws Throwable {
    Document document0 = new Document(""org.jsoup.nodes.Node"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Document(String baseUri) {
    super(Tag.valueOf(""#root""), baseUri);
}","public void test22323() throws Throwable {
    Document document0 = new Document(""org.jsoup.nodes.Node"");
    assertNotNull(document0);
}","/**
 *     Create a new, empty Document.
 *     @param baseUri base URI of document
 *     @see org.jsoup.Jsoup#parse
 *     @see #createShell
 */"
"public Node childNode(int index) {
    return childNodes.get(index);
}","public void test22324() throws Throwable {
    Document document0 = new Document(""org.jsoup.nodes.Node"");
    // Undeclared exception!
    try {
        document0.childNode((-1264));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}","/**
 *     Get a child node by index
 *     @param index index of child node
 *     @return the child node at this index.
 */"
"public String nodeName() {
    return ""#declaration"";
}","public void test23325() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""abs:(g9mz.4]5x3iiv06w96"", ""abs:(g9mz.4]5x3iiv06w96"", false);
    assertEquals(""#declaration"", xmlDeclaration0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test23326() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""abs:(g9mz.4]5x3iiv06w96"", ""abs:(g9mz.4]5x3iiv06w96"", false);
    assertEquals(0, (int) xmlDeclaration0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test23327() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""abs:(g9mz.4]5x3iiv06w96"", ""abs:(g9mz.4]5x3iiv06w96"", false);
    assertEquals(""abs:(g9mz.4]5x3iiv06w96"", xmlDeclaration0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public XmlDeclaration(String data, String baseUri, boolean isProcessingInstruction) {
    super(baseUri);
    attributes.put(DECL_KEY, data);
    this.isProcessingInstruction = isProcessingInstruction;
}","public void test23328() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""abs:(g9mz.4]5x3iiv06w96"", ""abs:(g9mz.4]5x3iiv06w96"", false);
    assertNotNull(xmlDeclaration0);
}","/**
 *     Create a new XML declaration
 *     @param data data
 *     @param baseUri base uri
 *     @param isProcessingInstruction is processing instruction
 */"
"public Node attr(String attributeKey, String attributeValue) {
    attributes.put(attributeKey, attributeValue);
    return this;
}","public void test23329() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""abs:(g9mz.4]5x3iiv06w96"", ""abs:(g9mz.4]5x3iiv06w96"", false);
    // Undeclared exception!
    try {
        xmlDeclaration0.attr((String) null, (String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Set an attribute (key=value). If the attribute already exists, it is replaced.
 * @param attributeKey The attribute key.
 * @param attributeValue The attribute value.
 * @return this (for chaining)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test24330() throws Throwable {
    Document document0 = new Document("":K"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test24331() throws Throwable {
    Document document0 = new Document("":K"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test24332() throws Throwable {
    Document document0 = new Document("":K"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test24333() throws Throwable {
    Document document0 = new Document("":K"");
    assertEquals("":K"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Document(String baseUri) {
    super(Tag.valueOf(""#root""), baseUri);
}","public void test24334() throws Throwable {
    Document document0 = new Document("":K"");
    assertNotNull(document0);
}","/**
 *     Create a new, empty Document.
 *     @param baseUri base URI of document
 *     @see org.jsoup.Jsoup#parse
 *     @see #createShell
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test24335() throws Throwable {
    Document document0 = new Document("":K"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    List<Node> list0 = document0.childNodes();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test24336() throws Throwable {
    Document document0 = new Document("":K"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    List<Node> list0 = document0.childNodes();
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test24337() throws Throwable {
    Document document0 = new Document("":K"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    List<Node> list0 = document0.childNodes();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test24338() throws Throwable {
    Document document0 = new Document("":K"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    List<Node> list0 = document0.childNodes();
    assertEquals("":K"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public List<Node> childNodes() {
    return Collections.unmodifiableList(childNodes);
}","public void test24341() throws Throwable {
    Document document0 = new Document("":K"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    List<Node> list0 = document0.childNodes();
    assertNotNull(list0);
}","/**
 *     Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes
 *     themselves can be manipulated.
 *     @return list of children. If no children, returns an empty list.
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test24342() throws Throwable {
    Document document0 = new Document("":K"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    List<Node> list0 = document0.childNodes();
    nodeArray0[1].childNodes = list0;
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test24343() throws Throwable {
    Document document0 = new Document("":K"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    List<Node> list0 = document0.childNodes();
    nodeArray0[1].childNodes = list0;
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test24344() throws Throwable {
    Document document0 = new Document("":K"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    List<Node> list0 = document0.childNodes();
    nodeArray0[1].childNodes = list0;
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test24345() throws Throwable {
    Document document0 = new Document("":K"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    List<Node> list0 = document0.childNodes();
    nodeArray0[1].childNodes = list0;
    assertEquals("":K"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"protected void addChildren(Node... children) {
    //most used. short circuit addChildren(int), which hits reindex children and array copy
    for (Node child : children) {
        reparentChild(child);
        childNodes.add(child);
        child.setSiblingIndex(childNodes.size() - 1);
    }
}","public void test24350() throws Throwable {
    Document document0 = new Document("":K"");
    Node[] nodeArray0 = new Node[7];
    nodeArray0[0] = (Node) document0;
    nodeArray0[1] = (Node) document0;
    List<Node> list0 = document0.childNodes();
    nodeArray0[1].childNodes = list0;
    // Undeclared exception!
    try {
        document0.addChildren(nodeArray0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.Collections$UnmodifiableCollection"", e);
    }
}",""
"protected void addChildren(Node... children) {
    //most used. short circuit addChildren(int), which hits reindex children and array copy
    for (Node child : children) {
        reparentChild(child);
        childNodes.add(child);
        child.setSiblingIndex(childNodes.size() - 1);
    }
}","public void test25356() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    // Undeclared exception!
    try {
        document0.addChildren(nodeArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}",""
"protected void setParentNode(Node parentNode) {
    if (this.parentNode != null)
        this.parentNode.removeChild(this);
    this.parentNode = parentNode;
}","public void test26362() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[4].setParentNode(nodeArray0[4]);
    assertEquals(8, nodeArray0.length);
}",""
"protected void addChildren(Node... children) {
    //most used. short circuit addChildren(int), which hits reindex children and array copy
    for (Node child : children) {
        reparentChild(child);
        childNodes.add(child);
        child.setSiblingIndex(childNodes.size() - 1);
    }
}","public void test26363() throws Throwable {
    Document document0 = new Document(""\n"");
    Node[] nodeArray0 = new Node[8];
    nodeArray0[0] = (Node) document0;
    nodeArray0[4] = (Node) document0;
    nodeArray0[4].setParentNode(nodeArray0[4]);
    // Undeclared exception!
    try {
        document0.addChildren(nodeArray0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 0, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"public String nodeName() {
    return ""#text"";
}","public void test27364() throws Throwable {
    TextNode textNode0 = new TextNode(""L[*a%+vs;|b8"", ""L[*a%+vs;|b8"");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test27365() throws Throwable {
    TextNode textNode0 = new TextNode(""L[*a%+vs;|b8"", ""L[*a%+vs;|b8"");
    assertEquals(""L[*a%+vs;|b8"", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test27366() throws Throwable {
    TextNode textNode0 = new TextNode(""L[*a%+vs;|b8"", ""L[*a%+vs;|b8"");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public TextNode(String text, String baseUri) {
    this.baseUri = baseUri;
    this.text = text;
}","public void test27367() throws Throwable {
    TextNode textNode0 = new TextNode(""L[*a%+vs;|b8"", ""L[*a%+vs;|b8"");
    assertNotNull(textNode0);
}","/**
 *     Create a new TextNode representing the supplied (unencoded) text).
 *
 *     @param text raw text
 *     @param baseUri base uri
 *     @see #createFromEncoded(String, String)
 */"
"protected void addChildren(int index, Node... children) {
    Validate.noNullElements(children);
    for (int i = children.length - 1; i >= 0; i--) {
        Node in = children[i];
        reparentChild(in);
        childNodes.add(index, in);
    }
    reindexChildren();
}","public void test27368() throws Throwable {
    TextNode textNode0 = new TextNode(""L[*a%+vs;|b8"", ""L[*a%+vs;|b8"");
    Node[] nodeArray0 = new Node[4];
    nodeArray0[0] = (Node) textNode0;
    nodeArray0[1] = (Node) textNode0;
    nodeArray0[2] = (Node) textNode0;
    nodeArray0[3] = (Node) textNode0;
    // Undeclared exception!
    try {
        textNode0.addChildren((-188012567), nodeArray0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.AbstractList"", e);
    }
}",""
"public String baseUri() {
    return baseUri;
}","public void test28369() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""topf"", """");
    assertEquals("""", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#text"";
}","public void test28370() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""topf"", """");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test28371() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""topf"", """");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public static TextNode createFromEncoded(String encodedText, String baseUri) {
    String text = Entities.unescape(encodedText);
    return new TextNode(text, baseUri);
}","public void test28372() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""topf"", """");
    assertNotNull(textNode0);
}","/**
 * Create a new TextNode from HTML encoded (aka escaped) data.
 * @param encodedText Text containing encoded HTML (e.g. &amp;lt;)
 * @return TextNode containing unencoded data (e.g. &lt;)
 */"
"protected void addChildren(int index, Node... children) {
    Validate.noNullElements(children);
    for (int i = children.length - 1; i >= 0; i--) {
        Node in = children[i];
        reparentChild(in);
        childNodes.add(index, in);
    }
    reindexChildren();
}","public void test28373() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""topf"", """");
    // Undeclared exception!
    try {
        textNode0.addChildren((-2160), (Node[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public String nodeName() {
    return ""#declaration"";
}","public void test29374() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""dhzo+]NkSOLI6"", ""or"", false);
    assertEquals(""#declaration"", xmlDeclaration0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test29375() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""dhzo+]NkSOLI6"", ""or"", false);
    assertEquals(""or"", xmlDeclaration0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test29376() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""dhzo+]NkSOLI6"", ""or"", false);
    assertEquals(0, (int) xmlDeclaration0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public XmlDeclaration(String data, String baseUri, boolean isProcessingInstruction) {
    super(baseUri);
    attributes.put(DECL_KEY, data);
    this.isProcessingInstruction = isProcessingInstruction;
}","public void test29377() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""dhzo+]NkSOLI6"", ""or"", false);
    assertNotNull(xmlDeclaration0);
}","/**
 *     Create a new XML declaration
 *     @param data data
 *     @param baseUri base uri
 *     @param isProcessingInstruction is processing instruction
 */"
"public String baseUri() {
    return baseUri;
}","public void test29378() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""dhzo+]NkSOLI6"", ""or"", false);
    TextNode textNode0 = TextNode.createFromEncoded(""or"", ""[N/+VsEhp>Y9)`%Q"");
    assertEquals(""[N/+VsEhp>Y9)`%Q"", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test29379() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""dhzo+]NkSOLI6"", ""or"", false);
    TextNode textNode0 = TextNode.createFromEncoded(""or"", ""[N/+VsEhp>Y9)`%Q"");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#text"";
}","public void test29380() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""dhzo+]NkSOLI6"", ""or"", false);
    TextNode textNode0 = TextNode.createFromEncoded(""or"", ""[N/+VsEhp>Y9)`%Q"");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public static TextNode createFromEncoded(String encodedText, String baseUri) {
    String text = Entities.unescape(encodedText);
    return new TextNode(text, baseUri);
}","public void test29381() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""dhzo+]NkSOLI6"", ""or"", false);
    TextNode textNode0 = TextNode.createFromEncoded(""or"", ""[N/+VsEhp>Y9)`%Q"");
    assertNotNull(textNode0);
}","/**
 * Create a new TextNode from HTML encoded (aka escaped) data.
 * @param encodedText Text containing encoded HTML (e.g. &amp;lt;)
 * @return TextNode containing unencoded data (e.g. &lt;)
 */"
"protected void addChildren(int index, Node... children) {
    Validate.noNullElements(children);
    for (int i = children.length - 1; i >= 0; i--) {
        Node in = children[i];
        reparentChild(in);
        childNodes.add(index, in);
    }
    reindexChildren();
}","public void test29382() throws Throwable {
    XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""dhzo+]NkSOLI6"", ""or"", false);
    TextNode textNode0 = TextNode.createFromEncoded(""or"", ""[N/+VsEhp>Y9)`%Q"");
    Node[] nodeArray0 = new Node[4];
    nodeArray0[0] = (Node) textNode0;
    nodeArray0[1] = (Node) xmlDeclaration0;
    nodeArray0[2] = (Node) xmlDeclaration0;
    nodeArray0[3] = (Node) xmlDeclaration0;
    // Undeclared exception!
    try {
        xmlDeclaration0.addChildren(32768, nodeArray0);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 32768, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test30388() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test30389() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test30390() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test30391() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test30392() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    assertEquals(""#document"", document1.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test30393() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    assertEquals("""", document1.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test30394() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    assertEquals(0, (int) document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test30395() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    assertFalse(document1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Element val(String value) {
    if (tagName().equals(""textarea""))
        text(value);
    else
        attr(""value"", value);
    return this;
}","public void test30396() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    assertNotNull(document1);
}","/**
 * Set the value of a form element (input, textarea, etc).
 * @param value value to set
 * @return this element (for chaining)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test30399() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test30400() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test30401() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test30402() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    assertEquals((-757), (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test30403() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    assertEquals((-757), (int) document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test30404() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    assertEquals(""#document"", document1.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test30405() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    assertEquals("""", document1.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test30406() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    assertFalse(document1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"protected void setSiblingIndex(int siblingIndex) {
    this.siblingIndex = siblingIndex;
}","public void test30407() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    assertSame(document0, document1);
}",""
"@Override
public String nodeName() {
    return ""#document"";
}","public void test30409() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    document1.parentNode = (Node) document0;
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test30410() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    document1.parentNode = (Node) document0;
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test30411() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    document1.parentNode = (Node) document0;
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test30412() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    document1.parentNode = (Node) document0;
    assertEquals((-757), (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test30413() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    document1.parentNode = (Node) document0;
    assertEquals((-757), (int) document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test30414() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    document1.parentNode = (Node) document0;
    assertEquals(""#document"", document1.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test30415() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    document1.parentNode = (Node) document0;
    assertEquals("""", document1.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test30416() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    document1.parentNode = (Node) document0;
    assertFalse(document1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test30417() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    document1.parentNode = (Node) document0;
    assertEquals((-757), (int) document1.parentNode.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test30418() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    document1.parentNode = (Node) document0;
    assertEquals("""", document1.parentNode.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"protected void addChildren(int index, Node... children) {
    Validate.noNullElements(children);
    for (int i = children.length - 1; i >= 0; i--) {
        Node in = children[i];
        reparentChild(in);
        childNodes.add(index, in);
    }
    reindexChildren();
}","public void test30419() throws Throwable {
    Document document0 = Document.createShell("""");
    Document document1 = (Document) document0.val("""");
    document1.setSiblingIndex((-757));
    document1.parentNode = (Node) document0;
    Node[] nodeArray0 = new Node[5];
    nodeArray0[0] = (Node) document1;
    nodeArray0[1] = (Node) document1;
    nodeArray0[2] = (Node) document0;
    nodeArray0[3] = document1.parentNode;
    nodeArray0[4] = document1.parentNode;
    // Undeclared exception!
    try {
        document1.parentNode.addChildren((-757), nodeArray0);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test31420() throws Throwable {
    Document document0 = new Document(""Nc"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test31421() throws Throwable {
    Document document0 = new Document(""Nc"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test31422() throws Throwable {
    Document document0 = new Document(""Nc"");
    assertEquals(""Nc"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test31423() throws Throwable {
    Document document0 = new Document(""Nc"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Document(String baseUri) {
    super(Tag.valueOf(""#root""), baseUri);
}","public void test31424() throws Throwable {
    Document document0 = new Document(""Nc"");
    assertNotNull(document0);
}","/**
 *     Create a new, empty Document.
 *     @param baseUri base URI of document
 *     @see org.jsoup.Jsoup#parse
 *     @see #createShell
 */"
"public String absUrl(String attributeKey) {
    Validate.notEmpty(attributeKey);
    String relUrl = attr(attributeKey);
    if (!hasAttr(attributeKey)) {
        // nothing to make absolute with
        return """";
    } else {
        URL base;
        try {
            try {
                base = new URL(baseUri);
            } catch (MalformedURLException e) {
                // the base is unsuitable, but the attribute may be abs on its own, so try that
                URL abs = new URL(relUrl);
                return abs.toExternalForm();
            }
            URL abs = new URL(base, relUrl);
            return abs.toExternalForm();
        } catch (MalformedURLException e) {
            return """";
        }
    }
}","public void test31425() throws Throwable {
    Document document0 = new Document(""Nc"");
    // Undeclared exception!
    try {
        document0.absUrl("""");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
 * <code>&lt;img src></code>).
 * <p/>
 * E.g.: <code>String absUrl = linkEl.absUrl(""href"");</code>
 * <p/>
 * If the attribute value is already absolute (i.e. it starts with a protocol, like
 * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
 * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
 * absolute using that.
 * <p/>
 * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
 * <code>String absUrl = linkEl.attr(""abs:href"");</code>
 *
 * @param attributeKey The attribute key
 * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
 * could not be made successfully into a URL.
 * @see #attr
 * @see java.net.URL#URL(java.net.URL, String)
 */"
"public String baseUri() {
    return baseUri;
}","public void test32426() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""p"");
    assertEquals(""p"", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test32427() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""p"");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#text"";
}","public void test32428() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""p"");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public TextNode(String text, String baseUri) {
    this.baseUri = baseUri;
    this.text = text;
}","public void test32429() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""p"");
    assertNotNull(textNode0);
}","/**
 *     Create a new TextNode representing the supplied (unencoded) text).
 *
 *     @param text raw text
 *     @param baseUri base uri
 *     @see #createFromEncoded(String, String)
 */"
"public String baseUri() {
    return baseUri;
}","public void test32430() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""p"");
    String string0 = textNode0.absUrl(""o0p`!2HQ]lZ?5+IBxk"");
    assertEquals(""p"", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test32431() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""p"");
    String string0 = textNode0.absUrl(""o0p`!2HQ]lZ?5+IBxk"");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#text"";
}","public void test32432() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""p"");
    String string0 = textNode0.absUrl(""o0p`!2HQ]lZ?5+IBxk"");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"@Override
public String absUrl(String attributeKey) {
    ensureAttributes();
    return super.absUrl(attributeKey);
}","public void test32433() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""p"");
    String string0 = textNode0.absUrl(""o0p`!2HQ]lZ?5+IBxk"");
    assertEquals("""", string0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test32435() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""p"");
    String string0 = textNode0.absUrl(""o0p`!2HQ]lZ?5+IBxk"");
    textNode0.hashCode();
    assertEquals(""p"", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test32436() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""p"");
    String string0 = textNode0.absUrl(""o0p`!2HQ]lZ?5+IBxk"");
    textNode0.hashCode();
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#text"";
}","public void test32437() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""p"");
    String string0 = textNode0.absUrl(""o0p`!2HQ]lZ?5+IBxk"");
    textNode0.hashCode();
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test33438() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    assertEquals(""?YNP2"", dataNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#data"";
}","public void test33439() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    assertEquals(""#data"", dataNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test33440() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    assertEquals(0, (int) dataNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public DataNode(String data, String baseUri) {
    super(baseUri);
    attributes.put(DATA_KEY, data);
}","public void test33441() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    assertNotNull(dataNode0);
}","/**
 *     Create a new DataNode.
 *     @param data data contents
 *     @param baseUri base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test33442() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    Node node0 = dataNode0.nextSibling();
    assertEquals(""?YNP2"", dataNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#data"";
}","public void test33443() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    Node node0 = dataNode0.nextSibling();
    assertEquals(""#data"", dataNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test33444() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    Node node0 = dataNode0.nextSibling();
    assertEquals(0, (int) dataNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Node nextSibling() {
    if (parentNode == null)
        // root
        return null;
    List<Node> siblings = parentNode.childNodes;
    Integer index = siblingIndex();
    Validate.notNull(index);
    if (siblings.size() > index + 1)
        return siblings.get(index + 1);
    else
        return null;
}","public void test33445() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    Node node0 = dataNode0.nextSibling();
    assertNull(node0);
}","/**
 *     Get this node's next sibling.
 *     @return next sibling, or null if this is the last sibling
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test34446() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test34447() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test34448() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test34449() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    assertEquals(""':$]p'"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test34450() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test34451() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test34452() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test34453() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test34454() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    assertEquals(""':$]p'"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test34455() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    assertEquals(""':$]p'"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test34456() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    assertTrue(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test34457() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Element child(int index) {
    return children().get(index);
}","public void test34458() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    assertNotNull(element0);
}","/**
 * Get a child element of this element, by its 0-based index number.
 * <p/>
 * Note that an element can have both mixed Nodes and Elements as children. This method inspects
 * a filtered list of children that are elements, and the index is based on that filtered list.
 *
 * @param index the index number of the element to retrieve
 * @return the child element, if it exists, or {@code null} if absent.
 * @see #childNode(int)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test34459() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test34460() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test34461() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test34462() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertEquals(""':$]p'"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test34463() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertEquals(""':$]p'"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test34464() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertTrue(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test34465() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test34466() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertEquals(""':$]p'"", document1.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test34467() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertEquals(""#document"", document1.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test34468() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertFalse(document1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test34469() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertEquals(0, (int) document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Document ownerDocument() {
    if (this instanceof Document)
        return (Document) this;
    else if (parentNode == null)
        return null;
    else
        return parentNode.ownerDocument();
}","public void test34470() throws Throwable {
    Document document0 = Document.createShell(""':$]p'"");
    Element element0 = document0.child(0);
    Document document1 = element0.ownerDocument();
    assertNotNull(document1);
}","/**
 * Gets the Document associated with this Node.
 * @return the Document associated with this Node, or null if there is no such Document.
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test35473() throws Throwable {
    DataNode dataNode0 = new DataNode(""e]g#n6OYM|$wDE"", ""<>WEwfsF,KM=V;xm"");
    assertEquals(0, (int) dataNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#data"";
}","public void test35474() throws Throwable {
    DataNode dataNode0 = new DataNode(""e]g#n6OYM|$wDE"", ""<>WEwfsF,KM=V;xm"");
    assertEquals(""#data"", dataNode0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test35475() throws Throwable {
    DataNode dataNode0 = new DataNode(""e]g#n6OYM|$wDE"", ""<>WEwfsF,KM=V;xm"");
    assertEquals(""<>WEwfsF,KM=V;xm"", dataNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public DataNode(String data, String baseUri) {
    super(baseUri);
    attributes.put(DATA_KEY, data);
}","public void test35476() throws Throwable {
    DataNode dataNode0 = new DataNode(""e]g#n6OYM|$wDE"", ""<>WEwfsF,KM=V;xm"");
    assertNotNull(dataNode0);
}","/**
 *     Create a new DataNode.
 *     @param data data contents
 *     @param baseUri base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test35477() throws Throwable {
    DataNode dataNode0 = new DataNode(""e]g#n6OYM|$wDE"", ""<>WEwfsF,KM=V;xm"");
    Document document0 = dataNode0.ownerDocument();
    assertEquals(0, (int) dataNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#data"";
}","public void test35478() throws Throwable {
    DataNode dataNode0 = new DataNode(""e]g#n6OYM|$wDE"", ""<>WEwfsF,KM=V;xm"");
    Document document0 = dataNode0.ownerDocument();
    assertEquals(""#data"", dataNode0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test35479() throws Throwable {
    DataNode dataNode0 = new DataNode(""e]g#n6OYM|$wDE"", ""<>WEwfsF,KM=V;xm"");
    Document document0 = dataNode0.ownerDocument();
    assertEquals(""<>WEwfsF,KM=V;xm"", dataNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Document ownerDocument() {
    if (this instanceof Document)
        return (Document) this;
    else if (parentNode == null)
        return null;
    else
        return parentNode.ownerDocument();
}","public void test35480() throws Throwable {
    DataNode dataNode0 = new DataNode(""e]g#n6OYM|$wDE"", ""<>WEwfsF,KM=V;xm"");
    Document document0 = dataNode0.ownerDocument();
    assertNull(document0);
}","/**
 * Gets the Document associated with this Node.
 * @return the Document associated with this Node, or null if there is no such Document.
 */"
"public String baseUri() {
    return baseUri;
}","public void test36481() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    assertEquals(""))W"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test36482() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test36483() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test36484() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test36485() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public String baseUri() {
    return baseUri;
}","public void test36486() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    Document document1 = document0.ownerDocument();
    assertEquals(""))W"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test36487() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    Document document1 = document0.ownerDocument();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test36488() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    Document document1 = document0.ownerDocument();
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test36489() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    Document document1 = document0.ownerDocument();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test36490() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    Document document1 = document0.ownerDocument();
    assertEquals(""#document"", document1.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test36491() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    Document document1 = document0.ownerDocument();
    assertEquals(0, (int) document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test36492() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    Document document1 = document0.ownerDocument();
    assertEquals(""))W"", document1.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test36493() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    Document document1 = document0.ownerDocument();
    assertFalse(document1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Document ownerDocument() {
    if (this instanceof Document)
        return (Document) this;
    else if (parentNode == null)
        return null;
    else
        return parentNode.ownerDocument();
}","public void test36494() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    Document document1 = document0.ownerDocument();
    assertNotNull(document1);
}","/**
 * Gets the Document associated with this Node.
 * @return the Document associated with this Node, or null if there is no such Document.
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test37502() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    String string0 = document0.absUrl("",xte{(ib:\""DA"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test37503() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    String string0 = document0.absUrl("",xte{(ib:\""DA"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test37504() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    String string0 = document0.absUrl("",xte{(ib:\""DA"");
    assertEquals(""))W"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test37505() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    String string0 = document0.absUrl("",xte{(ib:\""DA"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String absUrl(String attributeKey) {
    Validate.notEmpty(attributeKey);
    String relUrl = attr(attributeKey);
    if (!hasAttr(attributeKey)) {
        // nothing to make absolute with
        return """";
    } else {
        URL base;
        try {
            try {
                base = new URL(baseUri);
            } catch (MalformedURLException e) {
                // the base is unsuitable, but the attribute may be abs on its own, so try that
                URL abs = new URL(relUrl);
                return abs.toExternalForm();
            }
            URL abs = new URL(base, relUrl);
            return abs.toExternalForm();
        } catch (MalformedURLException e) {
            return """";
        }
    }
}","public void test37506() throws Throwable {
    Document document0 = Document.createShell(""))W"");
    String string0 = document0.absUrl("",xte{(ib:\""DA"");
    assertEquals("""", string0);
}","/**
 * Get an absolute URL from a URL attribute that may be relative (i.e. an <code>&lt;a href></code> or
 * <code>&lt;img src></code>).
 * <p/>
 * E.g.: <code>String absUrl = linkEl.absUrl(""href"");</code>
 * <p/>
 * If the attribute value is already absolute (i.e. it starts with a protocol, like
 * <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
 * returned directly. Otherwise, it is treated as a URL relative to the element's {@link #baseUri}, and made
 * absolute using that.
 * <p/>
 * As an alternate, you can use the {@link #attr} method with the <code>abs:</code> prefix, e.g.:
 * <code>String absUrl = linkEl.attr(""abs:href"");</code>
 *
 * @param attributeKey The attribute key
 * @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
 * could not be made successfully into a URL.
 * @see #attr
 * @see java.net.URL#URL(java.net.URL, String)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test38508() throws Throwable {
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test38509() throws Throwable {
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    assertEquals(""6:~ui3O|e\""s>;cq"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test38510() throws Throwable {
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test38511() throws Throwable {
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test38512() throws Throwable {
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test38513() throws Throwable {
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    String string0 = document0.attr(""6:~ui3O|e\""s>;cq"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test38514() throws Throwable {
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    String string0 = document0.attr(""6:~ui3O|e\""s>;cq"");
    assertEquals(""6:~ui3O|e\""s>;cq"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test38515() throws Throwable {
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    String string0 = document0.attr(""6:~ui3O|e\""s>;cq"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test38516() throws Throwable {
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    String string0 = document0.attr(""6:~ui3O|e\""s>;cq"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String attr(String attributeKey) {
    Validate.notNull(attributeKey);
    if (hasAttr(attributeKey))
        return attributes.get(attributeKey);
    else if (attributeKey.toLowerCase().startsWith(""abs:""))
        return absUrl(attributeKey.substring(""abs:"".length()));
    else
        return """";
}","public void test38517() throws Throwable {
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    String string0 = document0.attr(""6:~ui3O|e\""s>;cq"");
    assertEquals("""", string0);
}","/**
 * Get an attribute's value by its key.
 * <p/>
 * To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>,
 * which is a shortcut to the {@link #absUrl} method.
 * E.g.: <blockquote><code>String url = a.attr(""abs:href"");</code></blockquote>
 * @param attributeKey The attribute key.
 * @return The attribute, or empty string if not present (to avoid nulls).
 * @see #attributes()
 * @see #hasAttr(String)
 * @see #absUrl(String)
 */"
"public String attr(String attributeKey) {
    Validate.notNull(attributeKey);
    if (hasAttr(attributeKey))
        return attributes.get(attributeKey);
    else if (attributeKey.toLowerCase().startsWith(""abs:""))
        return absUrl(attributeKey.substring(""abs:"".length()));
    else
        return """";
}","public void test39524() throws Throwable {
    Document document0 = new Document(""\n"");
    // Undeclared exception!
    try {
        document0.attr(""abs:"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Get an attribute's value by its key.
 * <p/>
 * To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>,
 * which is a shortcut to the {@link #absUrl} method.
 * E.g.: <blockquote><code>String url = a.attr(""abs:href"");</code></blockquote>
 * @param attributeKey The attribute key.
 * @return The attribute, or empty string if not present (to avoid nulls).
 * @see #attributes()
 * @see #hasAttr(String)
 * @see #absUrl(String)
 */"
"public String baseUri() {
    return baseUri;
}","public void test40525() throws Throwable {
    Comment comment0 = new Comment(""h$0[~>RQv}cn4&@*"", ""html"");
    assertEquals(""html"", comment0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test40526() throws Throwable {
    Comment comment0 = new Comment(""h$0[~>RQv}cn4&@*"", ""html"");
    assertEquals(0, (int) comment0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#comment"";
}","public void test40527() throws Throwable {
    Comment comment0 = new Comment(""h$0[~>RQv}cn4&@*"", ""html"");
    assertEquals(""#comment"", comment0.nodeName());
}",""
"public Comment(String data, String baseUri) {
    super(baseUri);
    attributes.put(COMMENT_KEY, data);
}","public void test40528() throws Throwable {
    Comment comment0 = new Comment(""h$0[~>RQv}cn4&@*"", ""html"");
    assertNotNull(comment0);
}","/**
 *     Create a new comment node.
 *     @param data The contents of the comment
 *     @param baseUri base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test40529() throws Throwable {
    Comment comment0 = new Comment(""h$0[~>RQv}cn4&@*"", ""html"");
    Integer integer0 = comment0.siblingIndex();
    assertEquals(""html"", comment0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test40530() throws Throwable {
    Comment comment0 = new Comment(""h$0[~>RQv}cn4&@*"", ""html"");
    Integer integer0 = comment0.siblingIndex();
    assertEquals(0, (int) comment0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#comment"";
}","public void test40531() throws Throwable {
    Comment comment0 = new Comment(""h$0[~>RQv}cn4&@*"", ""html"");
    Integer integer0 = comment0.siblingIndex();
    assertEquals(""#comment"", comment0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test40532() throws Throwable {
    Comment comment0 = new Comment(""h$0[~>RQv}cn4&@*"", ""html"");
    Integer integer0 = comment0.siblingIndex();
    assertEquals(0, (int) integer0);
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test41539() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test41540() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test41541() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test41542() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test41543() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    assertTrue(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test41544() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test41545() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    assertEquals("""", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Element head() {
    return findFirstElementByTagName(""head"", this);
}","public void test41546() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    assertNotNull(element0);
}","/**
 *     Accessor to the document's {@code head} element.
 *     @return {@code head}
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test41547() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    String string0 = element0.outerHtml();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test41548() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    String string0 = element0.outerHtml();
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test41549() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    String string0 = element0.outerHtml();
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test41550() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    String string0 = element0.outerHtml();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test41551() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    String string0 = element0.outerHtml();
    assertTrue(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test41552() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    String string0 = element0.outerHtml();
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test41553() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    String string0 = element0.outerHtml();
    assertEquals("""", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String outerHtml() {
    StringBuilder accum = new StringBuilder(32 * 1024);
    outerHtml(accum);
    return accum.toString();
}","public void test41554() throws Throwable {
    Document document0 = Document.createShell("""");
    Element element0 = document0.head();
    String string0 = element0.outerHtml();
    assertEquals(""\n<head></head>"", string0);
}","/**
 *     Get the outer HTML of this node.
 *     @return HTML
 */"
"public String baseUri() {
    return baseUri;
}","public void test42556() throws Throwable {
    Comment comment0 = new Comment(""&/\""$^@+=ai|umu0#"", "".yZvVV"");
    assertEquals("".yZvVV"", comment0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test42557() throws Throwable {
    Comment comment0 = new Comment(""&/\""$^@+=ai|umu0#"", "".yZvVV"");
    assertEquals(0, (int) comment0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#comment"";
}","public void test42558() throws Throwable {
    Comment comment0 = new Comment(""&/\""$^@+=ai|umu0#"", "".yZvVV"");
    assertEquals(""#comment"", comment0.nodeName());
}",""
"public Comment(String data, String baseUri) {
    super(baseUri);
    attributes.put(COMMENT_KEY, data);
}","public void test42559() throws Throwable {
    Comment comment0 = new Comment(""&/\""$^@+=ai|umu0#"", "".yZvVV"");
    assertNotNull(comment0);
}","/**
 *     Create a new comment node.
 *     @param data The contents of the comment
 *     @param baseUri base URI
 */"
"protected void outerHtml(StringBuilder accum) {
    new NodeTraversor(new OuterHtmlVisitor(accum, ownerDocument().outputSettings())).traverse(this);
}","public void test42560() throws Throwable {
    Comment comment0 = new Comment(""&/\""$^@+=ai|umu0#"", "".yZvVV"");
    // Undeclared exception!
    try {
        comment0.outerHtml((StringBuilder) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"public String baseUri() {
    return baseUri;
}","public void test43561() throws Throwable {
    Document document0 = Document.createShell(""]"");
    assertEquals(""]"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test43562() throws Throwable {
    Document document0 = Document.createShell(""]"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test43563() throws Throwable {
    Document document0 = Document.createShell(""]"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test43564() throws Throwable {
    Document document0 = Document.createShell(""]"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test43565() throws Throwable {
    Document document0 = Document.createShell(""]"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public String baseUri() {
    return baseUri;
}","public void test43566() throws Throwable {
    Document document0 = Document.createShell(""]"");
    Document document1 = (Document) document0.removeAttr(""]"");
    assertEquals(""]"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test43567() throws Throwable {
    Document document0 = Document.createShell(""]"");
    Document document1 = (Document) document0.removeAttr(""]"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test43568() throws Throwable {
    Document document0 = Document.createShell(""]"");
    Document document1 = (Document) document0.removeAttr(""]"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test43569() throws Throwable {
    Document document0 = Document.createShell(""]"");
    Document document1 = (Document) document0.removeAttr(""]"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test43570() throws Throwable {
    Document document0 = Document.createShell(""]"");
    Document document1 = (Document) document0.removeAttr(""]"");
    assertEquals(""]"", document1.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test43571() throws Throwable {
    Document document0 = Document.createShell(""]"");
    Document document1 = (Document) document0.removeAttr(""]"");
    assertEquals(""#document"", document1.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test43572() throws Throwable {
    Document document0 = Document.createShell(""]"");
    Document document1 = (Document) document0.removeAttr(""]"");
    assertEquals(0, (int) document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test43573() throws Throwable {
    Document document0 = Document.createShell(""]"");
    Document document1 = (Document) document0.removeAttr(""]"");
    assertFalse(document1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Node removeAttr(String attributeKey) {
    Validate.notNull(attributeKey);
    attributes.remove(attributeKey);
    return this;
}","public void test43574() throws Throwable {
    Document document0 = Document.createShell(""]"");
    Document document1 = (Document) document0.removeAttr(""]"");
    assertNotNull(document1);
}","/**
 * Remove an attribute from this element.
 * @param attributeKey The attribute to remove.
 * @return this (for chaining)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test44582() throws Throwable {
    Document document0 = Document.createShell("""");
    String string0 = document0.baseUri();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test44583() throws Throwable {
    Document document0 = Document.createShell("""");
    String string0 = document0.baseUri();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test44584() throws Throwable {
    Document document0 = Document.createShell("""");
    String string0 = document0.baseUri();
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test44585() throws Throwable {
    Document document0 = Document.createShell("""");
    String string0 = document0.baseUri();
    assertEquals("""", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test44586() throws Throwable {
    Document document0 = Document.createShell("""");
    String string0 = document0.baseUri();
    assertEquals("""", string0);
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test45592() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    Node node0 = dataNode0.parent();
    assertEquals(0, (int) dataNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#data"";
}","public void test45593() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    Node node0 = dataNode0.parent();
    assertEquals(""#data"", dataNode0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test45594() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    Node node0 = dataNode0.parent();
    assertEquals(""?YNP2"", dataNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Node parent() {
    return parentNode;
}","public void test45595() throws Throwable {
    DataNode dataNode0 = new DataNode(""wkA^K6+6F=ez-JsEx"", ""?YNP2 "");
    Node node0 = dataNode0.parent();
    assertNull(node0);
}","/**
 *     Gets this node's parent node.
 *     @return parent node; or null if no parent.
 */"
"public String baseUri() {
    return baseUri;
}","public void test46596() throws Throwable {
    Document document0 = new Document(""#_fstZ"");
    assertEquals(""#_fstZ"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test46597() throws Throwable {
    Document document0 = new Document(""#_fstZ"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test46598() throws Throwable {
    Document document0 = new Document(""#_fstZ"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test46599() throws Throwable {
    Document document0 = new Document(""#_fstZ"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Document(String baseUri) {
    super(Tag.valueOf(""#root""), baseUri);
}","public void test46600() throws Throwable {
    Document document0 = new Document(""#_fstZ"");
    assertNotNull(document0);
}","/**
 *     Create a new, empty Document.
 *     @param baseUri base URI of document
 *     @see org.jsoup.Jsoup#parse
 *     @see #createShell
 */"
"public Node childNode(int index) {
    return childNodes.get(index);
}","public void test46601() throws Throwable {
    Document document0 = new Document(""#_fstZ"");
    // Undeclared exception!
    try {
        document0.childNode(763);
        fail(""Expecting exception: IndexOutOfBoundsException"");
    } catch (IndexOutOfBoundsException e) {
        //
        // Index: 763, Size: 0
        //
        verifyException(""java.util.ArrayList"", e);
    }
}","/**
 *     Get a child node by index
 *     @param index index of child node
 *     @return the child node at this index.
 */"
"public String baseUri() {
    return baseUri;
}","public void test47602() throws Throwable {
    Comment comment0 = new Comment("""", ""\"""");
    assertEquals(""\"""", comment0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#comment"";
}","public void test47603() throws Throwable {
    Comment comment0 = new Comment("""", ""\"""");
    assertEquals(""#comment"", comment0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test47604() throws Throwable {
    Comment comment0 = new Comment("""", ""\"""");
    assertEquals(0, (int) comment0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Comment(String data, String baseUri) {
    super(baseUri);
    attributes.put(COMMENT_KEY, data);
}","public void test47605() throws Throwable {
    Comment comment0 = new Comment("""", ""\"""");
    assertNotNull(comment0);
}","/**
 *     Create a new comment node.
 *     @param data The contents of the comment
 *     @param baseUri base URI
 */"
"public String baseUri() {
    return baseUri;
}","public void test47606() throws Throwable {
    Comment comment0 = new Comment("""", ""\"""");
    Attributes attributes0 = comment0.attributes();
    assertEquals(""\"""", comment0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#comment"";
}","public void test47607() throws Throwable {
    Comment comment0 = new Comment("""", ""\"""");
    Attributes attributes0 = comment0.attributes();
    assertEquals(""#comment"", comment0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test47608() throws Throwable {
    Comment comment0 = new Comment("""", ""\"""");
    Attributes attributes0 = comment0.attributes();
    assertEquals(0, (int) comment0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Attributes attributes() {
    return attributes;
}","public void test47609() throws Throwable {
    Comment comment0 = new Comment("""", ""\"""");
    Attributes attributes0 = comment0.attributes();
    assertNotNull(attributes0);
}","/**
 * Get all of the element's attributes.
 * @return attributes (which implements iterable, in same order as presented in original HTML).
 */"
"public String baseUri() {
    return baseUri;
}","public void test48610() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""3jfH"", ""@ OyqWxy8"");
    assertEquals(""@ OyqWxy8"", dataNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test48611() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""3jfH"", ""@ OyqWxy8"");
    assertEquals(0, (int) dataNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#data"";
}","public void test48612() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""3jfH"", ""@ OyqWxy8"");
    assertEquals(""#data"", dataNode0.nodeName());
}",""
"public static DataNode createFromEncoded(String encodedData, String baseUri) {
    String data = Entities.unescape(encodedData);
    return new DataNode(data, baseUri);
}","public void test48613() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""3jfH"", ""@ OyqWxy8"");
    assertNotNull(dataNode0);
}","/**
 *     Create a new DataNode from HTML encoded data.
 *     @param encodedData encoded data
 *     @param baseUri bass URI
 *     @return new DataNode
 */"
"public String baseUri() {
    return baseUri;
}","public void test48614() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""3jfH"", ""@ OyqWxy8"");
    Node node0 = dataNode0.attr(""s(t"", ""3jfH"");
    assertEquals(""@ OyqWxy8"", dataNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test48615() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""3jfH"", ""@ OyqWxy8"");
    Node node0 = dataNode0.attr(""s(t"", ""3jfH"");
    assertEquals(0, (int) dataNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#data"";
}","public void test48616() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""3jfH"", ""@ OyqWxy8"");
    Node node0 = dataNode0.attr(""s(t"", ""3jfH"");
    assertEquals(""#data"", dataNode0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test48617() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""3jfH"", ""@ OyqWxy8"");
    Node node0 = dataNode0.attr(""s(t"", ""3jfH"");
    assertEquals(""@ OyqWxy8"", node0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public abstract String nodeName();","public void test48618() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""3jfH"", ""@ OyqWxy8"");
    Node node0 = dataNode0.attr(""s(t"", ""3jfH"");
    assertEquals(""#data"", node0.nodeName());
}","/**
 *     Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof).
 *     @return node name
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test48619() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""3jfH"", ""@ OyqWxy8"");
    Node node0 = dataNode0.attr(""s(t"", ""3jfH"");
    assertEquals(0, (int) node0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Node attr(String attributeKey, String attributeValue) {
    attributes.put(attributeKey, attributeValue);
    return this;
}","public void test48620() throws Throwable {
    DataNode dataNode0 = DataNode.createFromEncoded(""3jfH"", ""@ OyqWxy8"");
    Node node0 = dataNode0.attr(""s(t"", ""3jfH"");
    assertNotNull(node0);
}","/**
 * Set an attribute (key=value). If the attribute already exists, it is replaced.
 * @param attributeKey The attribute key.
 * @param attributeValue The attribute value.
 * @return this (for chaining)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test49623() throws Throwable {
    Document document0 = Document.createShell(""kd)e\""|B/wHW6"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test49624() throws Throwable {
    Document document0 = Document.createShell(""kd)e\""|B/wHW6"");
    assertEquals(""kd)e\""|B/wHW6"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test49625() throws Throwable {
    Document document0 = Document.createShell(""kd)e\""|B/wHW6"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test49626() throws Throwable {
    Document document0 = Document.createShell(""kd)e\""|B/wHW6"");
    assertEquals(""#document"", document0.nodeName());
}",""
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test49627() throws Throwable {
    Document document0 = Document.createShell(""kd)e\""|B/wHW6"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test49628() throws Throwable {
    Document document0 = Document.createShell(""kd)e\""|B/wHW6"");
    boolean boolean0 = document0.hasAttr("""");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test49629() throws Throwable {
    Document document0 = Document.createShell(""kd)e\""|B/wHW6"");
    boolean boolean0 = document0.hasAttr("""");
    assertEquals(""kd)e\""|B/wHW6"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test49630() throws Throwable {
    Document document0 = Document.createShell(""kd)e\""|B/wHW6"");
    boolean boolean0 = document0.hasAttr("""");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test49631() throws Throwable {
    Document document0 = Document.createShell(""kd)e\""|B/wHW6"");
    boolean boolean0 = document0.hasAttr("""");
    assertEquals(""#document"", document0.nodeName());
}",""
"public boolean hasAttr(String attributeKey) {
    Validate.notNull(attributeKey);
    return attributes.hasKey(attributeKey);
}","public void test49632() throws Throwable {
    Document document0 = Document.createShell(""kd)e\""|B/wHW6"");
    boolean boolean0 = document0.hasAttr("""");
    assertFalse(boolean0);
}","/**
 * Test if this element has an attribute.
 * @param attributeKey The attribute key to check.
 * @return true if the attribute exists, false if not.
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test50638() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test50639() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test50640() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test50641() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    assertEquals(""/R&[^jW@`Wl"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test50642() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    assertEquals(""#document"", document1.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test50643() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    assertEquals(0, (int) document1.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test50644() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    assertEquals(""/R&[^jW@`Wl"", document1.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test50645() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    assertFalse(document1.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Document normalise() {
    Element htmlEl = findFirstElementByTagName(""html"", this);
    if (htmlEl == null)
        htmlEl = appendElement(""html"");
    if (head() == null)
        htmlEl.prependElement(""head"");
    if (body() == null)
        htmlEl.appendElement(""body"");
    // pull text nodes out of root, html, and head els, and push into body. non-text nodes are already taken care
    // of. do in inverse order to maintain text order.
    normaliseTextNodes(head());
    normaliseTextNodes(htmlEl);
    normaliseTextNodes(this);
    normaliseStructure(""head"", htmlEl);
    normaliseStructure(""body"", htmlEl);
    return this;
}","public void test50646() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    assertNotNull(document1);
}","/**
 *     Normalise the document. This happens after the parse phase so generally does not need to be called.
 *     Moves any text content that is not in the body element into the body.
 *     @return this document after normalisation
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test50649() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    String string0 = document0.toString();
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test50650() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    String string0 = document0.toString();
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test50651() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    String string0 = document0.toString();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test50652() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    String string0 = document0.toString();
    assertEquals(""/R&[^jW@`Wl"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String toString() {
    return outerHtml();
}","public void test50653() throws Throwable {
    Document document0 = new Document(""/R&[^jW@`Wl"");
    Document document1 = document0.normalise();
    String string0 = document0.toString();
    assertEquals(""<html>\n <head></head>\n <body></body>\n</html>"", string0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test51656() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    assertEquals("""", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#text"";
}","public void test51657() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test51658() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public TextNode(String text, String baseUri) {
    this.baseUri = baseUri;
    this.text = text;
}","public void test51659() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    assertNotNull(textNode0);
}","/**
 *     Create a new TextNode representing the supplied (unencoded) text).
 *
 *     @param text raw text
 *     @param baseUri base uri
 *     @see #createFromEncoded(String, String)
 */"
"public String baseUri() {
    return baseUri;
}","public void test51660() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    assertEquals(""@2vg"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test51661() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test51662() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test51663() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Document(String baseUri) {
    super(Tag.valueOf(""#root""), baseUri);
}","public void test51664() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    assertNotNull(document0);
}","/**
 *     Create a new, empty Document.
 *     @param baseUri base URI of document
 *     @see org.jsoup.Jsoup#parse
 *     @see #createShell
 */"
"public String baseUri() {
    return baseUri;
}","public void test51665() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertEquals("""", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#text"";
}","public void test51666() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test51667() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test51668() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertEquals(""@2vg"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test51669() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test51670() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test51671() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertEquals(""#document"", document0.nodeName());
}",""
"@Override
public String nodeName() {
    return tag.getName();
}","public void test51672() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertEquals(""#document"", element0.nodeName());
}",""
"public boolean isBlock() {
    return tag.isBlock();
}","public void test51673() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public String baseUri() {
    return baseUri;
}","public void test51674() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertEquals(""@2vg"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test51675() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public Element appendChild(Node child) {
    Validate.notNull(child);
    addChildren(child);
    return this;
}","public void test51676() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    assertNotNull(element0);
}","/**
 * Add a node to the last child of this element.
 *
 * @param child node to add. Must not already have a parent.
 * @return this element, so that you can add more child nodes or elements.
 */"
"public String baseUri() {
    return baseUri;
}","public void test51679() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    textNode0.hashCode();
    assertEquals("""", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#text"";
}","public void test51680() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    textNode0.hashCode();
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test51681() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = new Document(""@2vg"");
    Element element0 = document0.appendChild(textNode0);
    textNode0.hashCode();
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#text"";
}","public void test52686() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    boolean boolean0 = textNode0.equals(""`!R66H]E90u[CgnQa"");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test52687() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    boolean boolean0 = textNode0.equals(""`!R66H]E90u[CgnQa"");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test52688() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    boolean boolean0 = textNode0.equals(""`!R66H]E90u[CgnQa"");
    assertEquals("""", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public boolean equals(Object o) {
    if (this == o)
        return true;
    // todo: have nodes hold a child index, compare against that and parent (not children)
    return false;
}","public void test52689() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    boolean boolean0 = textNode0.equals(""`!R66H]E90u[CgnQa"");
    assertFalse(boolean0);
}",""
"public String baseUri() {
    return baseUri;
}","public void test53690() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""V|>p]|?#is+"");
    assertEquals(""V|>p]|?#is+"", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test53691() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""V|>p]|?#is+"");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String nodeName() {
    return ""#text"";
}","public void test53692() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""V|>p]|?#is+"");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public TextNode(String text, String baseUri) {
    this.baseUri = baseUri;
    this.text = text;
}","public void test53693() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""V|>p]|?#is+"");
    assertNotNull(textNode0);
}","/**
 *     Create a new TextNode representing the supplied (unencoded) text).
 *
 *     @param text raw text
 *     @param baseUri base uri
 *     @see #createFromEncoded(String, String)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test53694() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""V|>p]|?#is+"");
    Comment comment0 = new Comment("""", ""7DBE^zJ1dd"");
    assertEquals(0, (int) comment0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test53695() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""V|>p]|?#is+"");
    Comment comment0 = new Comment("""", ""7DBE^zJ1dd"");
    assertEquals(""7DBE^zJ1dd"", comment0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public String nodeName() {
    return ""#comment"";
}","public void test53696() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""V|>p]|?#is+"");
    Comment comment0 = new Comment("""", ""7DBE^zJ1dd"");
    assertEquals(""#comment"", comment0.nodeName());
}",""
"public Comment(String data, String baseUri) {
    super(baseUri);
    attributes.put(COMMENT_KEY, data);
}","public void test53697() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""V|>p]|?#is+"");
    Comment comment0 = new Comment("""", ""7DBE^zJ1dd"");
    assertNotNull(comment0);
}","/**
 *     Create a new comment node.
 *     @param data The contents of the comment
 *     @param baseUri base URI
 */"
"protected void removeChild(Node out) {
    Validate.isTrue(out.parentNode == this);
    int index = out.siblingIndex();
    childNodes.remove(index);
    reindexChildren();
    out.parentNode = null;
}","public void test53698() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", ""V|>p]|?#is+"");
    Comment comment0 = new Comment("""", ""7DBE^zJ1dd"");
    // Undeclared exception!
    try {
        comment0.removeChild(textNode0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public String nodeName() {
    return ""#text"";
}","public void test54699() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test54700() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test54701() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    assertEquals(""boxUl"", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public static TextNode createFromEncoded(String encodedText, String baseUri) {
    String text = Entities.unescape(encodedText);
    return new TextNode(text, baseUri);
}","public void test54702() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    assertNotNull(textNode0);
}","/**
 * Create a new TextNode from HTML encoded (aka escaped) data.
 * @param encodedText Text containing encoded HTML (e.g. &amp;lt;)
 * @return TextNode containing unencoded data (e.g. &lt;)
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test54703() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test54704() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test54705() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test54706() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    assertEquals(""(g9mZ.4]5x3IIV06W96"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test54707() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"public String nodeName() {
    return ""#text"";
}","public void test54708() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test54709() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test54710() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertEquals(""boxUl"", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test54711() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test54712() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test54713() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test54714() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertEquals(""(g9mZ.4]5x3IIV06W96"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test54715() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertEquals(""#document"", element0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test54716() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertEquals(""(g9mZ.4]5x3IIV06W96"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test54717() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test54718() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Element prependChild(Node child) {
    Validate.notNull(child);
    addChildren(0, child);
    return this;
}","public void test54719() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    assertNotNull(element0);
}","/**
 * Add a node to the start of this element's children.
 *
 * @param child node to add. Must not already have a parent.
 * @return this element, so that you can add more child nodes or elements.
 */"
"public String nodeName() {
    return ""#text"";
}","public void test54722() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertEquals(""#text"", textNode0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test54723() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertEquals(0, (int) textNode0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test54724() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertEquals(""boxUl"", textNode0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test54725() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test54726() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test54727() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertEquals(""#document"", document0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test54728() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertEquals(""(g9mZ.4]5x3IIV06W96"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"@Override
public String nodeName() {
    return tag.getName();
}","public void test54729() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertEquals(""#document"", element0.nodeName());
}",""
"public String baseUri() {
    return baseUri;
}","public void test54730() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertEquals(""(g9mZ.4]5x3IIV06W96"", element0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test54731() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test54732() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertFalse(element0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"public void replaceWith(Node in) {
    Validate.notNull(in);
    Validate.notNull(parentNode);
    parentNode.replaceChild(this, in);
}","public void test54733() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    Element element0 = document0.prependChild(textNode0);
    textNode0.replaceWith(element0);
    assertSame(document0, element0);
}","/**
 * Replace this node in the DOM with the supplied node.
 * @param in the node that will will replace the existing node.
 */"
"public String baseUri() {
    return baseUri;
}","public void test55739() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    assertEquals(""6:~ui3O|e\""s>;cq"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public boolean isBlock() {
    return tag.isBlock();
}","public void test55740() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    assertFalse(document0.isBlock());
}","/**
 * Test if this element is a block-level element. (E.g. {@code <div> == true} or an inline element
 * {@code <p> == false}).
 *
 * @return true if block, false if not (and thus inline)
 */"
"@Override
public String nodeName() {
    return ""#document"";
}","public void test55741() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    assertEquals(""#document"", document0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test55742() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"static public Document createShell(String baseUri) {
    Validate.notNull(baseUri);
    Document doc = new Document(baseUri);
    Element html = doc.appendElement(""html"");
    html.appendElement(""head"");
    html.appendElement(""body"");
    return doc;
}","public void test55743() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    assertNotNull(document0);
}","/**
 *     Create a valid, empty shell of a document, suitable for adding more elements to.
 *     @param baseUri baseUri of document
 *     @return document with html, head, and body elements.
 */"
"protected void replaceChild(Node out, Node in) {
    Validate.isTrue(out.parentNode == this);
    Validate.notNull(in);
    if (in.parentNode != null)
        in.parentNode.removeChild(in);
    Integer index = out.siblingIndex();
    childNodes.set(index, in);
    in.parentNode = this;
    in.setSiblingIndex(index);
    out.parentNode = null;
}","public void test55744() throws Throwable {
    TextNode textNode0 = new TextNode(""HBG<_5^tk'^*e'S'9"", """");
    Document document0 = Document.createShell(""6:~ui3O|e\""s>;cq"");
    // Undeclared exception!
    try {
        textNode0.replaceChild(document0, document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public void remove() {
    Validate.notNull(parentNode);
    parentNode.removeChild(this);
}","public void test56749() throws Throwable {
    Comment comment0 = new Comment("""", """");
    // Undeclared exception!
    try {
        comment0.remove();
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Remove (delete) this node from the DOM tree. If this node has children, they are also removed.
 */"
"public String nodeName() {
    return ""#comment"";
}","public void test57750() throws Throwable {
    Comment comment0 = new Comment("""", ""7DBE^zJ1dd"");
    assertEquals(""#comment"", comment0.nodeName());
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test57751() throws Throwable {
    Comment comment0 = new Comment("""", ""7DBE^zJ1dd"");
    assertEquals(0, (int) comment0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public String baseUri() {
    return baseUri;
}","public void test57752() throws Throwable {
    Comment comment0 = new Comment("""", ""7DBE^zJ1dd"");
    assertEquals(""7DBE^zJ1dd"", comment0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
"public Comment(String data, String baseUri) {
    super(baseUri);
    attributes.put(COMMENT_KEY, data);
}","public void test57753() throws Throwable {
    Comment comment0 = new Comment("""", ""7DBE^zJ1dd"");
    assertNotNull(comment0);
}","/**
 *     Create a new comment node.
 *     @param data The contents of the comment
 *     @param baseUri base URI
 */"
"public List<Node> siblingNodes() {
    // TODO: should this strip out this node? i.e. not a sibling of self?
    return parent().childNodes();
}","public void test57754() throws Throwable {
    Comment comment0 = new Comment("""", ""7DBE^zJ1dd"");
    // Undeclared exception!
    try {
        comment0.siblingNodes();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}","/**
 *     Retrieves this node's sibling nodes. Effectively, {@link #childNodes()  node.parent.childNodes()}.
 *     @return node siblings, including this node
 */"
"public void replaceWith(Node in) {
    Validate.notNull(in);
    Validate.notNull(parentNode);
    parentNode.replaceChild(this, in);
}","public void test58764() throws Throwable {
    TextNode textNode0 = TextNode.createFromEncoded(""HBG<_5^tk'^*e'S'9"", ""boxUl"");
    Document document0 = Document.createShell(""(g9mZ.4]5x3IIV06W96"");
    // Undeclared exception!
    try {
        textNode0.replaceWith(document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 * Replace this node in the DOM with the supplied node.
 * @param in the node that will will replace the existing node.
 */"
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test59765() throws Throwable {
    Document document0 = new Document(""\n"");
    document0.prependText(""UnderBar"");
    String string0 = document0.outerHtml();
    assertEquals(0, (int) document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public String outerHtml() {
    // no outer wrapper tag
    return super.html();
}","public void test59766() throws Throwable {
    Document document0 = new Document(""\n"");
    document0.prependText(""UnderBar"");
    String string0 = document0.outerHtml();
    assertEquals(""UnderBar"", string0);
}",""
"public Integer siblingIndex() {
    return siblingIndex;
}","public void test60767() throws Throwable {
    Document document0 = Document.createShell(""a5av85]4~t='"");
    Element element0 = document0.attr(""<6!e,t$\u0000GcZ"", ""~jSq;6d4g"");
    Elements elements0 = element0.getElementsByAttributeValue(""<6!e,t$\u0000GcZ"", ""a5av85]4~t='"");
    assertEquals(0, (int) element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"// implements List<Element> delegates:
public int size() {
    return contents.size();
}","public void test60768() throws Throwable {
    Document document0 = Document.createShell(""a5av85]4~t='"");
    Element element0 = document0.attr(""<6!e,t$\u0000GcZ"", ""~jSq;6d4g"");
    Elements elements0 = element0.getElementsByAttributeValue(""<6!e,t$\u0000GcZ"", ""a5av85]4~t='"");
    assertEquals(0, elements0.size());
}",""
"public String baseUri() {
    return baseUri;
}","public void test61769() throws Throwable {
    Document document0 = new Document(""\n"");
    document0.setBaseUri(""5$$@@~"");
    assertEquals(""5$$@@~"", document0.baseUri());
}","/**
 *     Get the base URI of this node.
 *     @return base URI
 */"
