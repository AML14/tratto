focal_method,test_prefix,docstring
"boolean isSafeTag(String tag) {
    return tagNames.contains(TagName.valueOf(tag));
}","public void test066() throws Throwable {
    Whitelist whitelist0 = new Whitelist();
    // Undeclared exception!
    try {
        whitelist0.isSafeTag((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean isSafeAttribute(String tagName, Element el, Attribute attr) {
    TagName tag = TagName.valueOf(tagName);
    AttributeKey key = AttributeKey.valueOf(attr.getKey());
    if (attributes.containsKey(tag)) {
        if (attributes.get(tag).contains(key)) {
            if (protocols.containsKey(tag)) {
                Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);
                // ok if not defined protocol; otherwise test
                return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));
            } else {
                // attribute found, no protocols defined, so OK
                return true;
            }
        }
    } else {
        // no attributes defined for tag, try :all tag
        return !tagName.equals("":all"") && isSafeAttribute("":all"", el, attr);
    }
    return false;
}","public void test077() throws Throwable {
    Whitelist whitelist0 = new Whitelist();
    // Undeclared exception!
    try {
        whitelist0.isSafeAttribute(""^(}3h;}>In!+;^v(A"", (Element) null, (Attribute) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.safety.Whitelist"", e);
    }
}",""
"boolean isSafeAttribute(String tagName, Element el, Attribute attr) {
    TagName tag = TagName.valueOf(tagName);
    AttributeKey key = AttributeKey.valueOf(attr.getKey());
    if (attributes.containsKey(tag)) {
        if (attributes.get(tag).contains(key)) {
            if (protocols.containsKey(tag)) {
                Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);
                // ok if not defined protocol; otherwise test
                return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));
            } else {
                // attribute found, no protocols defined, so OK
                return true;
            }
        }
    } else {
        // no attributes defined for tag, try :all tag
        return !tagName.equals("":all"") && isSafeAttribute("":all"", el, attr);
    }
    return false;
}","public void test088() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    Document document0 = Document.createShell("""");
    Attribute attribute0 = Attribute.createFromEncoded(""TpiR24~u4yA)l"", ""h1"");
    // Undeclared exception!
    try {
        whitelist0.isSafeAttribute((String) null, document0, attribute0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Attributes getEnforcedAttributes(String tagName) {
    Attributes attrs = new Attributes();
    TagName tag = TagName.valueOf(tagName);
    if (enforcedAttributes.containsKey(tag)) {
        Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag);
        for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) {
            attrs.put(entry.getKey().toString(), entry.getValue().toString());
        }
    }
    return attrs;
}","public void test099() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    // Undeclared exception!
    try {
        whitelist0.getEnforcedAttributes((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Object must not be null
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public Whitelist addTags(String... tags) {
    Validate.notNull(tags);
    for (String tagName : tags) {
        Validate.notEmpty(tagName);
        tagNames.add(TagName.valueOf(tagName));
    }
    return this;
}","public void test1010() throws Throwable {
    Whitelist whitelist0 = new Whitelist();
    String[] stringArray0 = new String[7];
    // Undeclared exception!
    try {
        whitelist0.addTags(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.)
 *
 *     @param tags tag names to allow
 *     @return this (for chaining)
 */"
"public Whitelist addEnforcedAttribute(String tag, String key, String value) {
    Validate.notEmpty(tag);
    Validate.notEmpty(key);
    Validate.notEmpty(value);
    TagName tagName = TagName.valueOf(tag);
    AttributeKey attrKey = AttributeKey.valueOf(key);
    AttributeValue attrVal = AttributeValue.valueOf(value);
    if (enforcedAttributes.containsKey(tagName)) {
        enforcedAttributes.get(tagName).put(attrKey, attrVal);
    } else {
        Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>();
        attrMap.put(attrKey, attrVal);
        enforcedAttributes.put(tagName, attrMap);
    }
    return this;
}","public void test1111() throws Throwable {
    Whitelist whitelist0 = Whitelist.basicWithImages();
    // Undeclared exception!
    try {
        whitelist0.addEnforcedAttribute((String) null, ""h5"", ""L'$Lu?`8<U~}wARG"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element
 *     already has the attribute set, it will be overridden.
 *     <p/>
 *     E.g.: <code>addEnforcedAttribute(""a"", ""rel"", ""nofollow"")</code> will make all <code>a</code> tags output as
 *     <code>&lt;a href=""..."" rel=""nofollow""></code>
 *
 *     @param tag   The tag the enforced attribute is for
 *     @param key   The attribute key
 *     @param value The enforced attribute value
 *     @return this (for chaining)
 */"
"public Whitelist addAttributes(String tag, String... keys) {
    Validate.notEmpty(tag);
    Validate.notNull(keys);
    TagName tagName = TagName.valueOf(tag);
    Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();
    for (String key : keys) {
        Validate.notEmpty(key);
        attributeSet.add(AttributeKey.valueOf(key));
    }
    if (attributes.containsKey(tagName)) {
        Set<AttributeKey> currentSet = attributes.get(tagName);
        currentSet.addAll(attributeSet);
    } else {
        attributes.put(tagName, attributeSet);
    }
    return this;
}","public void test1212() throws Throwable {
    Whitelist whitelist0 = new Whitelist();
    String[] stringArray0 = new String[9];
    // Undeclared exception!
    try {
        whitelist0.addAttributes(""'PF:vg&>96:qIxO"", stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.)
 *     <p/>
 *     To make an attribute valid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g.
 *     <code>addAttributes("":all"", ""class"")</code>.
 *
 *     @param tag  The tag the attributes are for
 *     @param keys List of valid attributes for the tag
 *     @return this (for chaining)
 */"
"boolean isSafeAttribute(String tagName, Element el, Attribute attr) {
    TagName tag = TagName.valueOf(tagName);
    AttributeKey key = AttributeKey.valueOf(attr.getKey());
    if (attributes.containsKey(tag)) {
        if (attributes.get(tag).contains(key)) {
            if (protocols.containsKey(tag)) {
                Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);
                // ok if not defined protocol; otherwise test
                return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));
            } else {
                // attribute found, no protocols defined, so OK
                return true;
            }
        }
    } else {
        // no attributes defined for tag, try :all tag
        return !tagName.equals("":all"") && isSafeAttribute("":all"", el, attr);
    }
    return false;
}","public void test1313() throws Throwable {
    Whitelist whitelist0 = Whitelist.basicWithImages();
    Document document0 = Document.createShell(""$VALUES"");
    Attribute attribute0 = new Attribute(""2ig"", """");
    boolean boolean0 = whitelist0.isSafeAttribute(""start"", document0, attribute0);
    assertFalse(boolean0);
}",""
"public Whitelist addTags(String... tags) {
    Validate.notNull(tags);
    for (String tagName : tags) {
        Validate.notEmpty(tagName);
        tagNames.add(TagName.valueOf(tagName));
    }
    return this;
}","public void test1414() throws Throwable {
    Whitelist whitelist0 = new Whitelist();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""X"";
    stringArray0[1] = ""h6"";
    Whitelist whitelist1 = whitelist0.addTags(stringArray0);
    assertSame(whitelist1, whitelist0);
}","/**
 *     Add a list of allowed elements to a whitelist. (If a tag is not allowed, it will be removed from the HTML.)
 *
 *     @param tags tag names to allow
 *     @return this (for chaining)
 */"
"Attributes getEnforcedAttributes(String tagName) {
    Attributes attrs = new Attributes();
    TagName tag = TagName.valueOf(tagName);
    if (enforcedAttributes.containsKey(tag)) {
        Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag);
        for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) {
            attrs.put(entry.getKey().toString(), entry.getValue().toString());
        }
    }
    return attrs;
}","public void test1717() throws Throwable {
    Whitelist whitelist0 = Whitelist.simpleText();
    whitelist0.addEnforcedAttribute(""c!58'_:^z+="", ""sup"", ""u#hQ$_,"");
    Attributes attributes0 = whitelist0.getEnforcedAttributes(""c!58'_:^z+="");
    assertNotNull(attributes0);
}",""
"Attributes getEnforcedAttributes(String tagName) {
    Attributes attrs = new Attributes();
    TagName tag = TagName.valueOf(tagName);
    if (enforcedAttributes.containsKey(tag)) {
        Map<AttributeKey, AttributeValue> keyVals = enforcedAttributes.get(tag);
        for (Map.Entry<AttributeKey, AttributeValue> entry : keyVals.entrySet()) {
            attrs.put(entry.getKey().toString(), entry.getValue().toString());
        }
    }
    return attrs;
}","public void test1818() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    Attributes attributes0 = whitelist0.getEnforcedAttributes(""CK}XQ3Th2"");
    assertNotNull(attributes0);
}",""
"boolean isSafeAttribute(String tagName, Element el, Attribute attr) {
    TagName tag = TagName.valueOf(tagName);
    AttributeKey key = AttributeKey.valueOf(attr.getKey());
    if (attributes.containsKey(tag)) {
        if (attributes.get(tag).contains(key)) {
            if (protocols.containsKey(tag)) {
                Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);
                // ok if not defined protocol; otherwise test
                return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));
            } else {
                // attribute found, no protocols defined, so OK
                return true;
            }
        }
    } else {
        // no attributes defined for tag, try :all tag
        return !tagName.equals("":all"") && isSafeAttribute("":all"", el, attr);
    }
    return false;
}","public void test1919() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    String[] stringArray0 = new String[7];
    stringArray0[0] = ""h5"";
    stringArray0[1] = ""h5"";
    stringArray0[2] = ""h5"";
    stringArray0[3] = ""CK}XQ3Th2"";
    stringArray0[4] = ""h5"";
    stringArray0[5] = ""h5"";
    stringArray0[6] = ""h5"";
    Whitelist whitelist1 = whitelist0.addAttributes(""h5"", stringArray0);
    whitelist0.addProtocols(""h5"", ""]_zCs1k?4+h#BKv"", stringArray0);
    Document document0 = new Document(""(>!$A|]j=B"");
    Attribute attribute0 = Attribute.createFromEncoded(""h5"", ""ul"");
    boolean boolean0 = whitelist1.isSafeAttribute(""h5"", document0, attribute0);
    assertTrue(boolean0);
}",""
"boolean isSafeAttribute(String tagName, Element el, Attribute attr) {
    TagName tag = TagName.valueOf(tagName);
    AttributeKey key = AttributeKey.valueOf(attr.getKey());
    if (attributes.containsKey(tag)) {
        if (attributes.get(tag).contains(key)) {
            if (protocols.containsKey(tag)) {
                Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);
                // ok if not defined protocol; otherwise test
                return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));
            } else {
                // attribute found, no protocols defined, so OK
                return true;
            }
        }
    } else {
        // no attributes defined for tag, try :all tag
        return !tagName.equals("":all"") && isSafeAttribute("":all"", el, attr);
    }
    return false;
}","public void test2020() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    String[] stringArray0 = new String[7];
    stringArray0[0] = ""h5"";
    stringArray0[1] = ""h5"";
    stringArray0[2] = ""h5"";
    stringArray0[3] = ""CK}XQ3Th2"";
    stringArray0[4] = ""h5"";
    stringArray0[5] = ""h5"";
    stringArray0[6] = ""h5"";
    Whitelist whitelist1 = whitelist0.addAttributes(""h5"", stringArray0);
    Document document0 = new Document(""(>!$A|]j=B"");
    Attribute attribute0 = Attribute.createFromEncoded(""h5"", ""ul"");
    boolean boolean0 = whitelist1.isSafeAttribute(""h5"", document0, attribute0);
    assertTrue(boolean0);
}",""
"boolean isSafeAttribute(String tagName, Element el, Attribute attr) {
    TagName tag = TagName.valueOf(tagName);
    AttributeKey key = AttributeKey.valueOf(attr.getKey());
    if (attributes.containsKey(tag)) {
        if (attributes.get(tag).contains(key)) {
            if (protocols.containsKey(tag)) {
                Map<AttributeKey, Set<Protocol>> attrProts = protocols.get(tag);
                // ok if not defined protocol; otherwise test
                return !attrProts.containsKey(key) || testValidProtocol(el, attr, attrProts.get(key));
            } else {
                // attribute found, no protocols defined, so OK
                return true;
            }
        }
    } else {
        // no attributes defined for tag, try :all tag
        return !tagName.equals("":all"") && isSafeAttribute("":all"", el, attr);
    }
    return false;
}","public void test2121() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[1] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[2] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[3] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[4] = ""org.jsoup.safety.whitelist$attributevalue"";
    whitelist0.addAttributes(""org.jsoup.safety.whitelist$attributevalue"", stringArray0);
    Document document0 = Document.createShell("""");
    Attribute attribute0 = Attribute.createFromEncoded(""|C-NA31w$6Dy"", ""h1"");
    boolean boolean0 = whitelist0.isSafeAttribute(""org.jsoup.safety.whitelist$attributevalue"", document0, attribute0);
    assertFalse(boolean0);
}",""
"boolean isSafeTag(String tag) {
    return tagNames.contains(TagName.valueOf(tag));
}","public void test2222() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    boolean boolean0 = whitelist0.isSafeTag(""KyJA)"");
    assertFalse(boolean0);
}",""
"public Whitelist addProtocols(String tag, String key, String... protocols) {
    Validate.notEmpty(tag);
    Validate.notEmpty(key);
    Validate.notNull(protocols);
    TagName tagName = TagName.valueOf(tag);
    AttributeKey attrKey = AttributeKey.valueOf(key);
    Map<AttributeKey, Set<Protocol>> attrMap;
    Set<Protocol> protSet;
    if (this.protocols.containsKey(tagName)) {
        attrMap = this.protocols.get(tagName);
    } else {
        attrMap = new HashMap<AttributeKey, Set<Protocol>>();
        this.protocols.put(tagName, attrMap);
    }
    if (attrMap.containsKey(attrKey)) {
        protSet = attrMap.get(attrKey);
    } else {
        protSet = new HashSet<Protocol>();
        attrMap.put(attrKey, protSet);
    }
    for (String protocol : protocols) {
        Validate.notEmpty(protocol);
        Protocol prot = Protocol.valueOf(protocol);
        protSet.add(prot);
    }
    return this;
}","public void test2323() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    String[] stringArray0 = new String[7];
    // Undeclared exception!
    try {
        whitelist0.addProtocols(""blockquote"", ""Umacr"", stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // String must not be empty
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}","/**
 *     Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to
 *     URLs with the defined protocol.
 *     <p/>
 *     E.g.: <code>addProtocols(""a"", ""href"", ""ftp"", ""http"", ""https"")</code>
 *
 *     @param tag       Tag the URL protocol is for
 *     @param key       Attribute key
 *     @param protocols List of valid protocols
 *     @return this, for chaining
 */"
"public Whitelist addEnforcedAttribute(String tag, String key, String value) {
    Validate.notEmpty(tag);
    Validate.notEmpty(key);
    Validate.notEmpty(value);
    TagName tagName = TagName.valueOf(tag);
    AttributeKey attrKey = AttributeKey.valueOf(key);
    AttributeValue attrVal = AttributeValue.valueOf(value);
    if (enforcedAttributes.containsKey(tagName)) {
        enforcedAttributes.get(tagName).put(attrKey, attrVal);
    } else {
        Map<AttributeKey, AttributeValue> attrMap = new HashMap<AttributeKey, AttributeValue>();
        attrMap.put(attrKey, attrVal);
        enforcedAttributes.put(tagName, attrMap);
    }
    return this;
}","public void test2424() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    Whitelist whitelist1 = whitelist0.addEnforcedAttribute(""io|-9u4z{BPik$:"", ""io|-9u4z{BPik$:"", ""io|-9u4z{BPik$:"");
    Whitelist whitelist2 = whitelist0.addEnforcedAttribute(""io|-9u4z{BPik$:"", ""Congruent"", ""T{<2vT-C]5"");
    assertSame(whitelist2, whitelist1);
}","/**
 *     Add an enforced attribute to a tag. An enforced attribute will always be added to the element. If the element
 *     already has the attribute set, it will be overridden.
 *     <p/>
 *     E.g.: <code>addEnforcedAttribute(""a"", ""rel"", ""nofollow"")</code> will make all <code>a</code> tags output as
 *     <code>&lt;a href=""..."" rel=""nofollow""></code>
 *
 *     @param tag   The tag the enforced attribute is for
 *     @param key   The attribute key
 *     @param value The enforced attribute value
 *     @return this (for chaining)
 */"
"public Whitelist addAttributes(String tag, String... keys) {
    Validate.notEmpty(tag);
    Validate.notNull(keys);
    TagName tagName = TagName.valueOf(tag);
    Set<AttributeKey> attributeSet = new HashSet<AttributeKey>();
    for (String key : keys) {
        Validate.notEmpty(key);
        attributeSet.add(AttributeKey.valueOf(key));
    }
    if (attributes.containsKey(tagName)) {
        Set<AttributeKey> currentSet = attributes.get(tagName);
        currentSet.addAll(attributeSet);
    } else {
        attributes.put(tagName, attributeSet);
    }
    return this;
}","public void test2626() throws Throwable {
    Whitelist whitelist0 = Whitelist.relaxed();
    String[] stringArray0 = new String[5];
    stringArray0[0] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[1] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[2] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[3] = ""org.jsoup.safety.whitelist$attributevalue"";
    stringArray0[4] = ""org.jsoup.safety.whitelist$attributevalue"";
    Whitelist whitelist1 = whitelist0.addAttributes(""org.jsoup.safety.whitelist$attributevalue"", stringArray0);
    Whitelist whitelist2 = whitelist1.addAttributes(""org.jsoup.safety.whitelist$attributevalue"", stringArray0);
    assertSame(whitelist0, whitelist2);
}","/**
 *     Add a list of allowed attributes to a tag. (If an attribute is not allowed on an element, it will be removed.)
 *     <p/>
 *     To make an attribute valid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g.
 *     <code>addAttributes("":all"", ""class"")</code>.
 *
 *     @param tag  The tag the attributes are for
 *     @param keys List of valid attributes for the tag
 *     @return this (for chaining)
 */"
"boolean isSafeTag(String tag) {
    return tagNames.contains(TagName.valueOf(tag));
}","public void test2727() throws Throwable {
    Whitelist whitelist0 = Whitelist.basicWithImages();
    boolean boolean0 = whitelist0.isSafeTag(""dl"");
    assertTrue(boolean0);
}",""
"public Whitelist addProtocols(String tag, String key, String... protocols) {
    Validate.notEmpty(tag);
    Validate.notEmpty(key);
    Validate.notNull(protocols);
    TagName tagName = TagName.valueOf(tag);
    AttributeKey attrKey = AttributeKey.valueOf(key);
    Map<AttributeKey, Set<Protocol>> attrMap;
    Set<Protocol> protSet;
    if (this.protocols.containsKey(tagName)) {
        attrMap = this.protocols.get(tagName);
    } else {
        attrMap = new HashMap<AttributeKey, Set<Protocol>>();
        this.protocols.put(tagName, attrMap);
    }
    if (attrMap.containsKey(attrKey)) {
        protSet = attrMap.get(attrKey);
    } else {
        protSet = new HashSet<Protocol>();
        attrMap.put(attrKey, protSet);
    }
    for (String protocol : protocols) {
        Validate.notEmpty(protocol);
        Protocol prot = Protocol.valueOf(protocol);
        protSet.add(prot);
    }
    return this;
}","public void test2828() throws Throwable {
    Whitelist whitelist0 = Whitelist.basic();
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""8J%cfbH4E/i}yUkedb"";
    stringArray0[1] = ""table"";
    whitelist0.addProtocols(""8J%cfbH4E/i}yUkedb"", ""table"", stringArray0);
    Whitelist whitelist1 = whitelist0.addProtocols(""8J%cfbH4E/i}yUkedb"", ""table"", stringArray0);
    assertSame(whitelist0, whitelist1);
}","/**
 *     Add allowed URL protocols for an element's URL attribute. This restricts the possible values of the attribute to
 *     URLs with the defined protocol.
 *     <p/>
 *     E.g.: <code>addProtocols(""a"", ""href"", ""ftp"", ""http"", ""https"")</code>
 *
 *     @param tag       Tag the URL protocol is for
 *     @param key       Attribute key
 *     @param protocols List of valid protocols
 *     @return this, for chaining
 */"
"public static Whitelist none() {
    return new Whitelist();
}","public void test2929() throws Throwable {
    Whitelist whitelist0 = Whitelist.none();
    assertNotNull(whitelist0);
}","/**
 *     This whitelist allows only text nodes: all HTML will be stripped.
 *
 *     @return whitelist
 */"
"public Whitelist preserveRelativeLinks(boolean preserve) {
    preserveRelativeLinks = preserve;
    return this;
}","public void test3030() throws Throwable {
    Whitelist whitelist0 = Whitelist.simpleText();
    Whitelist whitelist1 = whitelist0.preserveRelativeLinks(true);
    assertSame(whitelist0, whitelist1);
}","/**
 * Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute
 * links. By default, this is <b>false</b>: URLs will be  made absolute (e.g. start with an allowed protocol, like
 * e.g. {@code http://}.
 * <p />
 * Note that when handling relative links, the input document must have an appropriate {@code base URI} set when
 * parsing, so that the link's protocol can be confirmed. Regardless of the setting of the {@code preserve relative
 * links} option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute
 * will be removed.
 *
 * @param preserve {@code true} to allow relative links, {@code false} (default) to deny
 * @return this Whitelist, for chaining.
 * @see #addProtocols
 */"
