focal_method,test_prefix,docstring
"List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) {
    return parseFragment(inputFragment, baseUri, parser);
}","public void test000() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    xmlTreeBuilder0.parseFragment(""k`FVihJ<?hz"", (Element) null, ""k`FVihJ<?hz"", parser0);
}",""
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test011() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Token.Doctype token_Doctype0 = new Token.Doctype();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.process(token_Doctype0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.XmlTreeBuilder"", e);
    }
}",""
"Document parse(Reader input, String baseUri) {
    return parse(input, baseUri, new Parser(this));
}","public void test022() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    PipedReader pipedReader0 = new PipedReader();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.parse(pipedReader0, ""org.jsoup.parser.XmlTreeBuilder"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public String tagName() {
    return tag.getName();
}","public void test033() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""k`FVKhJ<?hz"", ""k`FVKhJ<?hz"");
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""k`FVKhJ<?hz"", attributes0);
    token_StartTag1.selfClosing = true;
    Element element0 = xmlTreeBuilder0.insert(token_StartTag0);
    assertEquals(""k`FVKhJ<?hz"", element0.tagName());
}","/**
 * Get the name of the tag for this element. E.g. {@code div}. If you are using {@link ParseSettings#preserveCase
 * case preserving parsing}, this will return the source's original case.
 *
 * @return the tag name
 */"
"@Override
public String baseUri() {
    return baseUri;
}","public void test044() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""k`FVKhJ<?hz"", ""k`FVKhJ<?hz"");
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""k`FVKhJ<?hz"", attributes0);
    token_StartTag1.selfClosing = true;
    token_StartTag0.nameAttr(""u"", attributes0);
    Element element0 = xmlTreeBuilder0.insert(token_StartTag1);
    assertEquals(""k`FVKhJ<?hz"", element0.baseUri());
}",""
"@Override
protected boolean process(Token token) {
    // start tag, end tag, doctype, comment, character, eof
    switch(token.type) {
        case StartTag:
            insert(token.asStartTag());
            break;
        case EndTag:
            popStackToClose(token.asEndTag());
            break;
        case Comment:
            insert(token.asComment());
            break;
        case Character:
            insert(token.asCharacter());
            break;
        case Doctype:
            insert(token.asDoctype());
            break;
        case // could put some normalisation here if desired
        EOF:
            break;
        default:
            Validate.fail(""Unexpected token type: "" + token.type);
    }
    return true;
}","public void test055() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Token.Comment token_Comment0 = new Token.Comment();
    // Undeclared exception!
    try {
        xmlTreeBuilder0.process(token_Comment0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"@Override
public String baseUri() {
    return baseUri;
}","public void test077() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    Document document0 = xmlTreeBuilder0.parse(""k`-Vh7c[<?z"", ""k`-Vh7c[<?z"");
    assertEquals(""k`-Vh7c[<?z"", document0.baseUri());
}",""
"protected boolean processEndTag(String name) {
    if (currentToken == end) {
        // don't recycle an in-use token
        return process(new Token.EndTag().name(name));
    }
    return process(end.reset().name(name));
}","public void test099() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""org.jsoup.parser.XmlTreeBuilder$1"", ""org.jsoup.parser.XmlTreeBuilder$1"");
    boolean boolean0 = xmlTreeBuilder0.processEndTag(""org.jsoup.parser.XmlTreeBuilder$1"");
    assertTrue(boolean0);
}",""
"protected boolean processEndTag(String name) {
    if (currentToken == end) {
        // don't recycle an in-use token
        return process(new Token.EndTag().name(name));
    }
    return process(end.reset().name(name));
}","public void test1010() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""k`FVKhJ<?hz"", ""k`FVKhJ<?hz"");
    xmlTreeBuilder0.processStartTag(""k`FVKhJ<?hz"");
    boolean boolean0 = xmlTreeBuilder0.processEndTag(""k`FVKhJ<?hz"");
    assertTrue(boolean0);
}",""
"protected boolean processEndTag(String name) {
    if (currentToken == end) {
        // don't recycle an in-use token
        return process(new Token.EndTag().name(name));
    }
    return process(end.reset().name(name));
}","public void test1111() throws Throwable {
    XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
    xmlTreeBuilder0.parse(""Scrpz2IDat/nYTYgOpTn"", ""Scrpz2IDat/nYTYgOpTn"");
    xmlTreeBuilder0.processStartTag(""Scrpz2IDat/nYTYgOpTn"");
    boolean boolean0 = xmlTreeBuilder0.processEndTag(""#document"");
    assertTrue(boolean0);
}",""
