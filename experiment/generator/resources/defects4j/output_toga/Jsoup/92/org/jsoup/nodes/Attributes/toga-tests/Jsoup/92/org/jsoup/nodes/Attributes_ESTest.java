/*
 * This file was automatically generated by EvoSuite
 * Sun Dec 31 03:59:30 GMT 2023
 */
package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        Attributes attributes0 = new Attributes();
        attributes0.dataset();
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Attributes attributes0 = new Attributes();
        attributes0.hashCode();
        attributes0.size();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.clone();
        boolean boolean0 = attributes1.equals(attributes0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test034() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("(k$x {", "R54DlR@:L@<");
        attributes1.put("org.jsoup.nodes.Attributes$Dataset", "org.jsoup.nodes.Attributes$Dataset");
        Attributes attributes2 = attributes0.put("R54DlR@:L@<", "org.jsoup.nodes.Attributes$Dataset");
        attributes2.addAll(attributes0);
        attributes0.size();
        assertEquals(1, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test045() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("(k$x {", "R54DlR@:L@<");
        attributes1.put("org.jsoup.nodes.Attributes$Dataset", "org.jsoup.nodes.Attributes$Dataset");
        Attributes attributes2 = attributes0.put("R54DlR@:L@<", "org.jsoup.nodes.Attributes$Dataset");
        Attributes attributes3 = attributes2.clone();
        attributes2.addAll(attributes3);
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test056() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("[5h1d0.", "=\"");
        attributes1.putIgnoreCase("=\"", "[5h1d0.");
        attributes0.remove("[5h1d0.");
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test067() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("J{rc", "J{rc");
        String string0 = attributes1.getIgnoreCase("J{rc");
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test068() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("J{rc", "J{rc");
        String string0 = attributes1.getIgnoreCase("J{rc");
    }

    @Test(timeout = 4000)
    public void test079() throws Throwable {
        String string0 = Attributes.checkNotNull((String) null);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0810() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("K3R2a'68P3E", "K3R2a'68P3E");
        String string0 = attributes1.get("K3R2a'68P3E");
        attributes0.size();
    }

    @Test(timeout = 4000)
    public void test0811() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("K3R2a'68P3E", "K3R2a'68P3E");
        String string0 = attributes1.get("K3R2a'68P3E");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test0912() throws Throwable {
        Attributes attributes0 = new Attributes();
        String string0 = attributes0.get("K3R2a'68P3E");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1013() throws Throwable {
        Attributes attributes0 = new Attributes();
        String string0 = attributes0.getIgnoreCase("+g[K8fPGWL ");
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1114() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("A<rU;(", "A<rU;(");
        attributes1.putIgnoreCase("A<rU;(", "A<rU;(");
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test1215() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("A<rU;(", "A<rU;(");
        attributes1.normalize();
        attributes1.putIgnoreCase("A<rU;(", "A<rU;(");
        attributes0.size();
        assertEquals(1, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test1316() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("", false);
        attributes1.size();
        assertEquals(0, attributes1.size());
    }

    @Test(timeout = 4000)
    public void test1417() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("s9NZ", true);
        List<Attribute> list0 = attributes1.asList();
        attributes0.size();
        assertEquals(1, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test1418() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("s9NZ", true);
        List<Attribute> list0 = attributes1.asList();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test1519() throws Throwable {
        Attributes attributes0 = new Attributes();
        attributes0.put("[5h1d0.", "=\"");
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test1520() throws Throwable {
        Attributes attributes0 = new Attributes();
        attributes0.put("[5h1d0.", "=\"");
        attributes0.remove("[5h1d0.");
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test1621() throws Throwable {
        Attributes attributes0 = new Attributes();
        attributes0.removeIgnoreCase("Je{rc");
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test1722() throws Throwable {
        Attributes attributes0 = new Attributes();
        attributes0.put(",8z{|", ",8z{|");
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test1723() throws Throwable {
        Attributes attributes0 = new Attributes();
        attributes0.put(",8z{|", ",8z{|");
        attributes0.removeIgnoreCase(",8z{|");
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test1824() throws Throwable {
        Attributes attributes0 = new Attributes();
        boolean boolean0 = attributes0.hasKey("q");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test1925() throws Throwable {
        Attributes attributes0 = new Attributes();
        String string0 = "I\\uJVldf";
        Attributes attributes1 = attributes0.put(string0, string0);
        boolean boolean0 = attributes1.hasKey(string0);
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test1926() throws Throwable {
        Attributes attributes0 = new Attributes();
        String string0 = "I\\uJVldf";
        Attributes attributes1 = attributes0.put(string0, string0);
        boolean boolean0 = attributes1.hasKey(string0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2027() throws Throwable {
        Attributes attributes0 = new Attributes();
        boolean boolean0 = attributes0.hasKeyIgnoreCase("R5*HlR@:L@4");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2128() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("K3R2a'68P3E", "K3R2a'68P3E");
        boolean boolean0 = attributes1.hasKeyIgnoreCase("K3R2a'68P3E");
        attributes0.size();
        assertEquals(1, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test2129() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("K3R2a'68P3E", "K3R2a'68P3E");
        boolean boolean0 = attributes1.hasKeyIgnoreCase("K3R2a'68P3E");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2230() throws Throwable {
        Attributes attributes0 = new Attributes();
        attributes0.addAll(attributes0);
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test2331() throws Throwable {
        Attributes attributes0 = new Attributes();
        List<Attribute> list0 = attributes0.asList();
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test2432() throws Throwable {
        Attributes attributes0 = new Attributes();
        attributes0.putIgnoreCase("", "");
        attributes0.asList();
    }

    @Test(timeout = 4000)
    public void test2533() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("3cP}?q_-/0 UQbP", true);
        StringWriter stringWriter0 = new StringWriter();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        attributes1.html((Appendable) stringWriter0, document_OutputSettings0);
        attributes0.size();
    }

    @Test(timeout = 4000)
    public void test2534() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("3cP}?q_-/0 UQbP", true);
        StringWriter stringWriter0 = new StringWriter();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        attributes1.html((Appendable) stringWriter0, document_OutputSettings0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2635() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("3cP}?q_-/0 UQbP", true);
        StringWriter stringWriter0 = new StringWriter();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
        document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
        attributes1.html((Appendable) stringWriter0, document_OutputSettings0);
        attributes0.size();
    }

    @Test(timeout = 4000)
    public void test2636() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put("3cP}?q_-/0 UQbP", true);
        StringWriter stringWriter0 = new StringWriter();
        Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
        Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
        document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
        attributes1.html((Appendable) stringWriter0, document_OutputSettings0);
        stringWriter0.toString();
    }

    @Test(timeout = 4000)
    public void test2737() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put(",8z{|", ",8z{|");
        String string0 = attributes1.toString();
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test2738() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.put(",8z{|", ",8z{|");
        String string0 = attributes1.toString();
    }

    @Test(timeout = 4000)
    public void test2839() throws Throwable {
        Attributes attributes0 = new Attributes();
        boolean boolean0 = attributes0.equals(attributes0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2940() throws Throwable {
        Attributes attributes0 = new Attributes();
        boolean boolean0 = attributes0.equals((Object) null);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3041() throws Throwable {
        Attributes attributes0 = new Attributes();
        Object object0 = new Object();
        boolean boolean0 = attributes0.equals(object0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3142() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.clone();
        attributes1.size();
    }

    @Test(timeout = 4000)
    public void test3143() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.clone();
        attributes1.put("0:&PV ?z=Uf", "0:&PV ?z=Uf");
        boolean boolean0 = attributes1.equals(attributes0);
        attributes1.size();
    }

    @Test(timeout = 4000)
    public void test3144() throws Throwable {
        Attributes attributes0 = new Attributes();
        Attributes attributes1 = attributes0.clone();
        attributes1.put("0:&PV ?z=Uf", "0:&PV ?z=Uf");
        boolean boolean0 = attributes1.equals(attributes0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3245() throws Throwable {
        Attributes attributes0 = new Attributes();
        attributes0.putIgnoreCase("34`~^]*/", "34`~^]*/");
        Attributes attributes1 = attributes0.clone();
        boolean boolean0 = attributes1.equals(attributes0);
        attributes0.size();
        assertEquals(0, attributes0.size());
    }

    @Test(timeout = 4000)
    public void test3246() throws Throwable {
        Attributes attributes0 = new Attributes();
        attributes0.putIgnoreCase("34`~^]*/", "34`~^]*/");
        Attributes attributes1 = attributes0.clone();
        boolean boolean0 = attributes1.equals(attributes0);
        assertTrue(boolean0);
    }
}
