focal_method,test_prefix,docstring
"Element aboveOnStack(Element el) {
    assert onStack(el);
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            return stack.get(pos - 1);
        }
    }
    return null;
}","public void test000() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""u^Ra0"", ""u^Ra0"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.aboveOnStack(document0);
        fail(""Expecting exception: AssertionError"");
    } catch (AssertionError e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"void replaceOnStack(Element out, Element in) {
    replaceInQueue(stack, out, in);
}","public void test011() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""SAI&q!x8f@uk"", ""SAI&q!x8f@uk"");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"Element getHeadElement() {
    return headElement;
}","public void test022() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Element element0 = htmlTreeBuilder0.getHeadElement();
    assertNull(element0);
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test033() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""8ode"", ""8ode"");
    assertEquals(1, document0.childNodeSize());
}",""
"protected boolean processStartTag(String name) {
    if (currentToken == start) {
        // don't recycle an in-use token
        return process(new Token.StartTag().name(name));
    }
    return process(start.reset().name(name));
}","public void test034() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""8ode"", ""8ode"");
    htmlTreeBuilder0.processStartTag(""table"");
    htmlTreeBuilder0.processStartTag(""th"");
    boolean boolean0 = htmlTreeBuilder0.processStartTag(""th"");
    assertTrue(boolean0);
}",""
"boolean inListItemScope(String targetName) {
    return inScope(targetName, TagSearchList);
}","public void test045() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inListItemScope(""center"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"@Override
public String toString() {
    return ""TreeBuilder{"" + ""currentToken="" + currentToken + "", state="" + state + "", currentElement="" + currentElement() + '}';
}","public void test056() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.toString();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.TreeBuilder"", e);
    }
}",""
"protected boolean processStartTag(String name) {
    if (currentToken == start) {
        // don't recycle an in-use token
        return process(new Token.StartTag().name(name));
    }
    return process(start.reset().name(name));
}","public void test067() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""isindex"", ""isindex"");
    boolean boolean0 = htmlTreeBuilder0.processStartTag(""table"");
    boolean boolean1 = htmlTreeBuilder0.processStartTag(""isindex"");
    assertTrue(boolean1 == boolean0);
}",""
"protected boolean processStartTag(String name) {
    if (currentToken == start) {
        // don't recycle an in-use token
        return process(new Token.StartTag().name(name));
    }
    return process(start.reset().name(name));
}","public void test078() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""select"", ""select"");
    boolean boolean0 = htmlTreeBuilder0.processStartTag(""select"");
    assertTrue(boolean0);
}",""
"boolean inScope(String[] targetNames) {
    return inSpecificScope(targetNames, TagsSearchInScope, null);
}","public void test089() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String[] stringArray0 = new String[0];
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inScope(stringArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"String getBaseUri() {
    return baseUri;
}","public void test0910() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    String string0 = htmlTreeBuilder0.getBaseUri();
    assertNull(string0);
}",""
"boolean isInActiveFormattingElements(Element el) {
    return isElementInQueue(formattingElements, el);
}","public void test1011() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"boolean isFragmentParsing() {
    return fragmentParsing;
}","public void test1112() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
    assertFalse(boolean0);
}",""
"void push(Element element) {
    stack.add(element);
}","public void test1213() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.push((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"boolean isSpecial(Element el) {
    // todo: mathml's mi, mo, mn
    // todo: svg's foreigObject, desc, title
    String name = el.normalName();
    return inSorted(name, TagSearchSpecial);
}","public void test1314() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    // Undeclared exception!
    try {
        htmlTreeBuilder0.isSpecial((Element) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.parser.HtmlTreeBuilder"", e);
    }
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test1415() throws Throwable {
    Document document0 = Parser.parse(""<!x^CjLnl>$&XJmxu"", ""<!x^CjLnl>$&XJmxu"");
    assertEquals(2, document0.childNodeSize());
}",""
"@Override
public Element wrap(String html) {
    return (Element) super.wrap(html);
}","public void test1516() throws Throwable {
    Document document0 = Parser.parseBodyFragment("")(vKxcfn|Jc 2_[.]"", "")(vKxcfn|Jc 2_[.]"");
    // Undeclared exception!
    try {
        document0.wrap("")(vKxcfn|Jc 2_[.]"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.jsoup.nodes.Node"", e);
    }
}","/**
 * Wrap the supplied HTML around this element.
 *
 * @param html HTML to wrap around this element, e.g. {@code <div class=""head""></div>}. Can be arbitrarily deep.
 * @return this element, for chaining.
 */"
"public boolean hasParent() {
    return parentNode != null;
}","public void test2223() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Attributes attributes0 = new Attributes();
    Tag tag0 = Tag.valueOf(""th"");
    FormElement formElement0 = new FormElement(tag0, ""th"", attributes0);
    htmlTreeBuilder0.maybeSetBaseUri(formElement0);
    assertFalse(formElement0.hasParent());
}",""
"protected boolean processStartTag(String name) {
    if (currentToken == start) {
        // don't recycle an in-use token
        return process(new Token.StartTag().name(name));
    }
    return process(start.reset().name(name));
}","public void test2324() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.setTrackErrors(100);
    parser0.parseInput(""isindex"", ""isindex"");
    boolean boolean0 = htmlTreeBuilder0.processStartTag(""isindex"");
    assertTrue(boolean0);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test2425() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""!<d1"", ""!<d1"");
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""noframes"", attributes0);
    token_StartTag1.selfClosing = true;
    Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test2526() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""9q+!r3c|!}ncgx~p4"", ""9q+!r3c|!}ncgx~p4"");
    Token.StartTag token_StartTag0 = new Token.StartTag();
    Attributes attributes0 = new Attributes();
    Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(""9q+!r3c|!}ncgx~p4"", attributes0);
    token_StartTag1.selfClosing = true;
    Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"void insert(Token.Character characterToken) {
    final Node node;
    final Element el = currentElement();
    final String tagName = el.tagName();
    final String data = characterToken.getData();
    if (characterToken.isCData())
        node = new CDataNode(data);
    else if (tagName.equals(""script"") || tagName.equals(""style""))
        node = new DataNode(data);
    else
        node = new TextNode(data);
    // doesn't use insertNode, because we don't foster these; and will always have a stack.
    el.appendChild(node);
}","public void test2627() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""script"", ""script"");
    Token.CData token_CData0 = new Token.CData(""script"");
    htmlTreeBuilder0.insert(token_CData0);
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void insert(Token.Character characterToken) {
    final Node node;
    final Element el = currentElement();
    final String tagName = el.tagName();
    final String data = characterToken.getData();
    if (characterToken.isCData())
        node = new CDataNode(data);
    else if (tagName.equals(""script"") || tagName.equals(""style""))
        node = new DataNode(data);
    else
        node = new TextNode(data);
    // doesn't use insertNode, because we don't foster these; and will always have a stack.
    el.appendChild(node);
}","public void test2728() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""tr"", ""br"");
    htmlTreeBuilder0.processStartTag(""script"");
    Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
    Token.Character token_Character0 = tokeniser0.charPending;
    htmlTreeBuilder0.insert(token_Character0);
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void insert(Token.Character characterToken) {
    final Node node;
    final Element el = currentElement();
    final String tagName = el.tagName();
    final String data = characterToken.getData();
    if (characterToken.isCData())
        node = new CDataNode(data);
    else if (tagName.equals(""script"") || tagName.equals(""style""))
        node = new DataNode(data);
    else
        node = new TextNode(data);
    // doesn't use insertNode, because we don't foster these; and will always have a stack.
    el.appendChild(node);
}","public void test2829() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""center"", ""center"");
    htmlTreeBuilder0.processStartTag(""style"");
    Token.Character token_Character0 = new Token.Character();
    htmlTreeBuilder0.insert(token_Character0);
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test2930() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Attributes attributes0 = new Attributes();
    Tag tag0 = Tag.valueOf(""th"");
    FormElement formElement0 = new FormElement(tag0, ""th"", attributes0);
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment(""th"", formElement0, ""th"", parser0);
    htmlTreeBuilder0.insertInFosterParent(formElement0);
    assertEquals(1, formElement0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test3031() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""invalid named reference '%s'"", ""invalid named reference '%s'"");
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertEquals(1, document0.childNodeSize());
}",""
"boolean removeFromStack(Element el) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next == el) {
            stack.remove(pos);
            return true;
        }
    }
    return false;
}","public void test3032() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""invalid named reference '%s'"", ""invalid named reference '%s'"");
    boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
    assertFalse(boolean0);
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test3133() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""/plLM]{jN*c}YT;kvZB"", ""/plLM]{jN*c}YT;kvZB"");
    assertEquals(1, document0.childNodeSize());
}",""
"boolean inButtonScope(String targetName) {
    return inScope(targetName, TagSearchButton);
}","public void test3134() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""/plLM]{jN*c}YT;kvZB"", ""/plLM]{jN*c}YT;kvZB"");
    htmlTreeBuilder0.popStackToClose(""/plLM]{jN*c}YT;kvZB"");
    boolean boolean0 = htmlTreeBuilder0.inButtonScope(""/plLM]{jN*c}YT;kvZB"");
    assertFalse(boolean0);
}",""
"// elnames is sorted, comes from Constants
void popStackToClose(String... elNames) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        stack.remove(pos);
        if (inSorted(next.normalName(), elNames))
            break;
    }
}","public void test3235() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""plaintext"", ""TreeBuilder{currentToken="");
    String[] stringArray0 = new String[4];
    stringArray0[0] = ""plaintext"";
    stringArray0[1] = ""plaintext"";
    htmlTreeBuilder0.popStackToClose(stringArray0);
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"// elnames is sorted, comes from Constants
void popStackToClose(String... elNames) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        stack.remove(pos);
        if (inSorted(next.normalName(), elNames))
            break;
    }
}","public void test3336() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""tab{le"", ""tab{le"");
    htmlTreeBuilder0.processStartTag(""tab{le"");
    String[] stringArray0 = new String[2];
    stringArray0[0] = ""tab{le"";
    htmlTreeBuilder0.popStackToClose(stringArray0);
    assertEquals(2, stringArray0.length);
}",""
"void popStackToBefore(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.normalName().equals(elName)) {
            break;
        } else {
            stack.remove(pos);
        }
    }
}","public void test3437() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""AfterFrXmeset"", ""AfterFrXmeset"");
    htmlTreeBuilder0.popStackToBefore(""org.jsoup.select.StructuralEvaluator$ImmediateParent"");
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void popStackToBefore(String elName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element next = stack.get(pos);
        if (next.normalName().equals(elName)) {
            break;
        } else {
            stack.remove(pos);
        }
    }
}","public void test3538() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""P:k+AGjra:e"", ""P:k+AGjra:e"");
    htmlTreeBuilder0.processStartTag(""table"");
    htmlTreeBuilder0.popStackToBefore(""table"");
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void clearStackToTableContext() {
    clearStackToContext(""table"");
}","public void test3639() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""U=vU"", ""U=vU"");
    htmlTreeBuilder0.popStackToClose(""U=vU"");
    htmlTreeBuilder0.clearStackToTableContext();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void clearStackToTableContext() {
    clearStackToContext(""table"");
}","public void test3740() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""fy,s)2J|O~;sJY#Yy"", ""fy,s)2J|O~;sJY#Yy"");
    htmlTreeBuilder0.clearStackToTableContext();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test3841() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""script"", ""script"");
    htmlTreeBuilder0.insert(document0);
    Element element0 = htmlTreeBuilder0.aboveOnStack(document0);
    htmlTreeBuilder0.aboveOnStack(element0);
    assertEquals(1, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"public int siblingIndex() {
    return siblingIndex;
}","public void test3842() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""script"", ""script"");
    htmlTreeBuilder0.insert(document0);
    Element element0 = htmlTreeBuilder0.aboveOnStack(document0);
    htmlTreeBuilder0.aboveOnStack(element0);
    assertEquals(1, element0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"void insertOnStackAfter(Element after, Element in) {
    int i = stack.lastIndexOf(after);
    Validate.isTrue(i != -1);
    stack.add(i + 1, in);
}","public void test3943() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
    Document document0 = parser1.parseInput("""", """");
    // Undeclared exception!
    try {
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must be true
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"public int siblingIndex() {
    return siblingIndex;
}","public void test4044() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""eteWU"", ""eteWU"");
    htmlTreeBuilder0.insert(document0);
    htmlTreeBuilder0.insertOnStackAfter(document0, document0);
    assertEquals(1, document0.siblingIndex());
}","/**
 * Get the list index of this node in its node sibling list. I.e. if this is the first node
 * sibling, returns 0.
 * @return position in node sibling list
 * @see org.jsoup.nodes.Element#elementSiblingIndex()
 */"
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test4145() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
    Document document0 = parser1.parseInput(""plaintext"", ""plaintext"");
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
    assertEquals(1, document0.childNodeSize());
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.normalName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""th"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test4246() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""Kofm,Mw${PTXwP6"", ""Kofm,Mw${PTXwP6"");
    htmlTreeBuilder0.popStackToClose(""Kofm,Mw${PTXwP6"");
    htmlTreeBuilder0.resetInsertionMode();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.normalName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""th"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test4347() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Attributes attributes0 = new Attributes();
    Tag tag0 = Tag.valueOf(""th"");
    FormElement formElement0 = new FormElement(tag0, ""th"", attributes0);
    Parser parser0 = Parser.xmlParser();
    htmlTreeBuilder0.parseFragment(""th"", formElement0, ""th"", parser0);
    htmlTreeBuilder0.insert(formElement0);
    htmlTreeBuilder0.resetInsertionMode();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void resetInsertionMode() {
    boolean last = false;
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element node = stack.get(pos);
        if (pos == 0) {
            last = true;
            node = contextElement;
        }
        String name = node.normalName();
        if (""select"".equals(name)) {
            transition(HtmlTreeBuilderState.InSelect);
            // frag
            break;
        } else if ((""td"".equals(name) || ""th"".equals(name) && !last)) {
            transition(HtmlTreeBuilderState.InCell);
            break;
        } else if (""tr"".equals(name)) {
            transition(HtmlTreeBuilderState.InRow);
            break;
        } else if (""tbody"".equals(name) || ""thead"".equals(name) || ""tfoot"".equals(name)) {
            transition(HtmlTreeBuilderState.InTableBody);
            break;
        } else if (""caption"".equals(name)) {
            transition(HtmlTreeBuilderState.InCaption);
            break;
        } else if (""colgroup"".equals(name)) {
            transition(HtmlTreeBuilderState.InColumnGroup);
            // frag
            break;
        } else if (""table"".equals(name)) {
            transition(HtmlTreeBuilderState.InTable);
            break;
        } else if (""head"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        } else if (""body"".equals(name)) {
            transition(HtmlTreeBuilderState.InBody);
            break;
        } else if (""frameset"".equals(name)) {
            transition(HtmlTreeBuilderState.InFrameset);
            // frag
            break;
        } else if (""html"".equals(name)) {
            transition(HtmlTreeBuilderState.BeforeHead);
            // frag
            break;
        } else if (last) {
            transition(HtmlTreeBuilderState.InBody);
            // frag
            break;
        }
    }
}","public void test5559() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""ersion"", ""ersion"");
    htmlTreeBuilder0.insert(document0);
    htmlTreeBuilder0.resetInsertionMode();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"boolean inScope(String targetName, String[] extras) {
    return inSpecificScope(targetName, TagsSearchInScope, extras);
    // todo: in mathml namespace: mi, mo, mn, ms, mtext annotation-xml
    // todo: in svg namespace: forignOjbect, desc, title
}","public void test5660() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""table"", ""0:r}f"");
    String[] stringArray0 = new String[6];
    stringArray0[2] = ""0:r}f"";
    stringArray0[4] = ""YQea~E"";
    stringArray0[5] = ""body"";
    boolean boolean0 = htmlTreeBuilder0.inScope(""YQea~E"", stringArray0);
    assertFalse(boolean0);
}",""
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.normalName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !inSorted(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test5761() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    ArrayList<Element> arrayList0 = new ArrayList<Element>();
    htmlTreeBuilder0.stack = arrayList0;
    // Undeclared exception!
    try {
        htmlTreeBuilder0.inSelectScope((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Should not be reachable
        //
        verifyException(""org.jsoup.helper.Validate"", e);
    }
}",""
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.normalName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !inSorted(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test5863() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Attributes attributes0 = new Attributes();
    Tag tag0 = Tag.valueOf(""th"");
    FormElement formElement0 = new FormElement(tag0, ""th"", attributes0);
    Parser parser0 = Parser.xmlParser();
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""th"", formElement0, ""th"", parser0);
    boolean boolean0 = htmlTreeBuilder0.inSelectScope(""th"");
    assertFalse(boolean0);
}",""
"boolean inSelectScope(String targetName) {
    for (int pos = stack.size() - 1; pos >= 0; pos--) {
        Element el = stack.get(pos);
        String elName = el.normalName();
        if (elName.equals(targetName))
            return true;
        if (// all elements except
        !inSorted(elName, TagSearchSelectScope))
            return false;
    }
    Validate.fail(""Should not be reachable"");
    return false;
}","public void test5965() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Attributes attributes0 = new Attributes();
    Tag tag0 = Tag.valueOf(""th"");
    FormElement formElement0 = new FormElement(tag0, ""th"", attributes0);
    Parser parser0 = Parser.xmlParser();
    List<Node> list0 = htmlTreeBuilder0.parseFragment(""th"", formElement0, ""th"", parser0);
    htmlTreeBuilder0.insert(formElement0);
    boolean boolean0 = htmlTreeBuilder0.inSelectScope(""th"");
    assertTrue(boolean0);
}",""
"void generateImpliedEndTags(String excludeTag) {
    while ((excludeTag != null && !currentElement().normalName().equals(excludeTag)) && inSorted(currentElement().normalName(), TagSearchEndTags)) pop();
}","public void test6066() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""u^Ra0"", ""u^Ra0"");
    htmlTreeBuilder0.processStartTag(""p"");
    htmlTreeBuilder0.generateImpliedEndTags(""06yqFZ+"");
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}","/**
 *     11.2.5.2 Closing elements that have implied end tags<p/>
 *     When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a
 *     dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,
 *     the UA must pop the current node off the stack of open elements.
 *
 *     @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the
 *     process, then the UA must perform the above steps as if that element was not in the above list.
 */"
"Element removeLastFormattingElement() {
    int size = formattingElements.size();
    if (size > 0)
        return formattingElements.remove(size - 1);
    else
        return null;
}","public void test6167() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""scr(pt"", ""scr(pt"");
    Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
    assertNull(element0);
}",""
"protected boolean processStartTag(String name) {
    if (currentToken == start) {
        // don't recycle an in-use token
        return process(new Token.StartTag().name(name));
    }
    return process(start.reset().name(name));
}","public void test6268() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""S"", ""S"");
    htmlTreeBuilder0.processStartTag(""S"");
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    boolean boolean0 = htmlTreeBuilder0.processStartTag(""yNZ?$7;Vm~h"");
    assertTrue(boolean0);
}",""
"protected boolean processStartTag(String name) {
    if (currentToken == start) {
        // don't recycle an in-use token
        return process(new Token.StartTag().name(name));
    }
    return process(start.reset().name(name));
}","public void test6369() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""code"", ""code"");
    htmlTreeBuilder0.processStartTag(""code"");
    htmlTreeBuilder0.processStartTag(""code"");
    htmlTreeBuilder0.processStartTag(""code"");
    boolean boolean0 = htmlTreeBuilder0.processStartTag(""code"");
    assertTrue(boolean0);
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test6470() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""&;%@*u81vc"", ""&;%@*u81vc"");
    Document document1 = parser0.parseInput(""&;%@*u81vc"", "":not6"");
    document1.addClass(""h6"");
    htmlTreeBuilder0.pushActiveFormattingElements(document1);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    assertEquals(1, document0.childNodeSize());
}",""
"void reconstructFormattingElements() {
    Element last = lastFormattingElement();
    if (last == null || onStack(last))
        return;
    Element entry = last;
    int size = formattingElements.size();
    int pos = size - 1;
    boolean skip = false;
    while (true) {
        if (pos == 0) {
            // step 4. if none before, skip to 8
            skip = true;
            break;
        }
        // step 5. one earlier than entry
        entry = formattingElements.get(--pos);
        if (// step 6 - neither marker nor on stack
        entry == null || onStack(entry))
            // jump to 8, else continue back to 4
            break;
    }
    while (true) {
        if (// step 7: on later than entry
        !skip)
            entry = formattingElements.get(++pos);
        // should not occur, as we break at last element
        Validate.notNull(entry);
        // 8. create new element from element, 9 insert into current node, onto stack
        // can only skip increment from 4.
        skip = false;
        // todo: avoid fostering here?
        Element newEl = insertStartTag(entry.normalName());
        // newEl.namespace(entry.namespace()); // todo: namespaces
        newEl.attributes().addAll(entry.attributes());
        // 10. replace entry with new entry
        formattingElements.set(pos, newEl);
        // 11
        if (// if not last entry in list, jump to 7
        pos == size - 1)
            break;
    }
}","public void test6571() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    parser0.setTreeBuilder(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""X"", ""7jA}Go"");
    htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.reconstructFormattingElements();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void reconstructFormattingElements() {
    Element last = lastFormattingElement();
    if (last == null || onStack(last))
        return;
    Element entry = last;
    int size = formattingElements.size();
    int pos = size - 1;
    boolean skip = false;
    while (true) {
        if (pos == 0) {
            // step 4. if none before, skip to 8
            skip = true;
            break;
        }
        // step 5. one earlier than entry
        entry = formattingElements.get(--pos);
        if (// step 6 - neither marker nor on stack
        entry == null || onStack(entry))
            // jump to 8, else continue back to 4
            break;
    }
    while (true) {
        if (// step 7: on later than entry
        !skip)
            entry = formattingElements.get(++pos);
        // should not occur, as we break at last element
        Validate.notNull(entry);
        // 8. create new element from element, 9 insert into current node, onto stack
        // can only skip increment from 4.
        skip = false;
        // todo: avoid fostering here?
        Element newEl = insertStartTag(entry.normalName());
        // newEl.namespace(entry.namespace()); // todo: namespaces
        newEl.attributes().addAll(entry.attributes());
        // 10. replace entry with new entry
        formattingElements.set(pos, newEl);
        // 11
        if (// if not last entry in list, jump to 7
        pos == size - 1)
            break;
    }
}","public void test6672() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
    Document document0 = parser1.parseInput(""]"", ""]"");
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.reconstructFormattingElements();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"void clearFormattingElementsToLastMarker() {
    while (!formattingElements.isEmpty()) {
        Element el = removeLastFormattingElement();
        if (el == null)
            break;
    }
}","public void test6773() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
    Document document0 = parser1.parseInput("""", """");
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.clearFormattingElementsToLastMarker();
    assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test6874() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
    Document document0 = parser1.parseInput("""", """");
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
    assertEquals(1, document0.childNodeSize());
}",""
"@Override
public int childNodeSize() {
    return childNodes.size();
}","public void test6975() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""param"", ""param"");
    Document document1 = Document.createShell(""aside"");
    htmlTreeBuilder0.pushActiveFormattingElements(document1);
    htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
    assertEquals(1, document0.childNodeSize());
}",""
"Element getActiveFormattingElement(String nodeName) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (// scope marker
        next == null)
            break;
        else if (next.normalName().equals(nodeName))
            return next;
    }
    return null;
}","public void test7076() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = Parser.htmlParser();
    Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
    Document document0 = parser1.parseInput(""plaintext"", ""plaintext"");
    htmlTreeBuilder0.pushActiveFormattingElements(document0);
    Element element0 = htmlTreeBuilder0.getActiveFormattingElement(""plaintext"");
    assertNull(element0);
}",""
"Element getActiveFormattingElement(String nodeName) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (// scope marker
        next == null)
            break;
        else if (next.normalName().equals(nodeName))
            return next;
    }
    return null;
}","public void test7177() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    parser0.parseInput(""embed"", ""embed"");
    htmlTreeBuilder0.processStartTag(""object"");
    Element element0 = htmlTreeBuilder0.getActiveFormattingElement(""embed"");
    assertNull(element0);
}",""
"Element getActiveFormattingElement(String nodeName) {
    for (int pos = formattingElements.size() - 1; pos >= 0; pos--) {
        Element next = formattingElements.get(pos);
        if (// scope marker
        next == null)
            break;
        else if (next.normalName().equals(nodeName))
            return next;
    }
    return null;
}","public void test7278() throws Throwable {
    HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
    Parser parser0 = new Parser(htmlTreeBuilder0);
    Document document0 = parser0.parseInput(""7a^(?d@9fr{g2="", ""7a^(?d@9fr{g2="");
    Element element0 = document0.createElement(""7a^(?d@9fr{g2="");
    htmlTreeBuilder0.pushActiveFormattingElements(element0);
    Element element1 = htmlTreeBuilder0.getActiveFormattingElement(""7a^(?d@9fr{g2="");
    assertSame(element1, element0);
}",""
