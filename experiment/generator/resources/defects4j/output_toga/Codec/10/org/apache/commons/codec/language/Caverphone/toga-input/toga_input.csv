focal_method,test_prefix,docstring
"public boolean isCaverphoneEqual(String str1, String str2) {
    return caverphone(str1).equals(caverphone(str2));
}","public void test00() throws Throwable {
    Caverphone caverphone0 = new Caverphone();
    boolean boolean0 = caverphone0.isCaverphoneEqual("""", (String) null);
    assertTrue(boolean0);
}","/**
 * Tests if the caverphones of two strings are identical.
 *
 * @param str1 First of two strings to compare
 * @param str2 Second of two strings to compare
 * @return <code>true</code> if the caverphones of these strings are identical,
 *        <code>false</code> otherwise.
 */"
"public String caverphone(String txt) {
    // NOTE: Version 1.0 of Caverphone is easily derivable from this code
    // by commenting out the 2.0 lines and adding in the 1.0 lines
    if (txt == null || txt.length() == 0) {
        return ""1111111111"";
    }
    // 1. Convert to lowercase
    txt = txt.toLowerCase(java.util.Locale.ENGLISH);
    // 2. Remove anything not A-Z
    txt = txt.replaceAll(""[^a-z]"", """");
    // 2.5. Remove final e
    // 2.0 only
    txt = txt.replaceAll(""e$"", """");
    // 3. Handle various start options
    txt = txt.replaceAll(""^cough"", ""cou2f"");
    txt = txt.replaceAll(""^rough"", ""rou2f"");
    txt = txt.replaceAll(""^tough"", ""tou2f"");
    // 2.0 only
    txt = txt.replaceAll(""^enough"", ""enou2f"");
    // 2.0 only - note the spec says ^enough here again, c+p error I assume
    txt = txt.replaceAll(""^trough"", ""trou2f"");
    txt = txt.replaceAll(""^gn"", ""2n"");
    // End
    txt = txt.replaceAll(""^mb"", ""m2"");
    // 4. Handle replacements
    txt = txt.replaceAll(""cq"", ""2q"");
    txt = txt.replaceAll(""ci"", ""si"");
    txt = txt.replaceAll(""ce"", ""se"");
    txt = txt.replaceAll(""cy"", ""sy"");
    txt = txt.replaceAll(""tch"", ""2ch"");
    txt = txt.replaceAll(""c"", ""k"");
    txt = txt.replaceAll(""q"", ""k"");
    txt = txt.replaceAll(""x"", ""k"");
    txt = txt.replaceAll(""v"", ""f"");
    txt = txt.replaceAll(""dg"", ""2g"");
    txt = txt.replaceAll(""tio"", ""sio"");
    txt = txt.replaceAll(""tia"", ""sia"");
    txt = txt.replaceAll(""d"", ""t"");
    txt = txt.replaceAll(""ph"", ""fh"");
    txt = txt.replaceAll(""b"", ""p"");
    txt = txt.replaceAll(""sh"", ""s2"");
    txt = txt.replaceAll(""z"", ""s"");
    txt = txt.replaceAll(""^[aeiou]"", ""A"");
    txt = txt.replaceAll(""[aeiou]"", ""3"");
    // 2.0 only
    txt = txt.replaceAll(""j"", ""y"");
    // 2.0 only
    txt = txt.replaceAll(""^y3"", ""Y3"");
    // 2.0 only
    txt = txt.replaceAll(""^y"", ""A"");
    // 2.0 only
    txt = txt.replaceAll(""y"", ""3"");
    txt = txt.replaceAll(""3gh3"", ""3kh3"");
    txt = txt.replaceAll(""gh"", ""22"");
    txt = txt.replaceAll(""g"", ""k"");
    txt = txt.replaceAll(""s+"", ""S"");
    txt = txt.replaceAll(""t+"", ""T"");
    txt = txt.replaceAll(""p+"", ""P"");
    txt = txt.replaceAll(""k+"", ""K"");
    txt = txt.replaceAll(""f+"", ""F"");
    txt = txt.replaceAll(""m+"", ""M"");
    txt = txt.replaceAll(""n+"", ""N"");
    txt = txt.replaceAll(""w3"", ""W3"");
    //txt = txt.replaceAll(""wy"", ""Wy"");    // 1.0 only
    txt = txt.replaceAll(""wh3"", ""Wh3"");
    // 2.0 only
    txt = txt.replaceAll(""w$"", ""3"");
    //txt = txt.replaceAll(""why"", ""Why"");  // 1.0 only
    txt = txt.replaceAll(""w"", ""2"");
    txt = txt.replaceAll(""^h"", ""A"");
    txt = txt.replaceAll(""h"", ""2"");
    txt = txt.replaceAll(""r3"", ""R3"");
    // 2.0 only
    txt = txt.replaceAll(""r$"", ""3"");
    //txt = txt.replaceAll(""ry"", ""Ry"");    // 1.0 only
    txt = txt.replaceAll(""r"", ""2"");
    txt = txt.replaceAll(""l3"", ""L3"");
    // 2.0 only
    txt = txt.replaceAll(""l$"", ""3"");
    //txt = txt.replaceAll(""ly"", ""Ly"");    // 1.0 only
    txt = txt.replaceAll(""l"", ""2"");
    //txt = txt.replaceAll(""j"", ""y"");      // 1.0 only
    //txt = txt.replaceAll(""y3"", ""Y3"");    // 1.0 only
    //txt = txt.replaceAll(""y"", ""2"");      // 1.0 only
    // 5. Handle removals
    txt = txt.replaceAll(""2"", """");
    // 2.0 only
    txt = txt.replaceAll(""3$"", ""A"");
    txt = txt.replaceAll(""3"", """");
    // 6. put ten 1s on the end
    // 1.0 only has 6 1s
    txt = txt + ""111111"" + ""1111"";
    // 7. take the first six characters as the code
    // 1.0 truncates to 6
    return txt.substring(0, 10);
}","public void test11() throws Throwable {
    Caverphone caverphone0 = new Caverphone();
    String string0 = caverphone0.caverphone((String) null);
    assertEquals(""1111111111"", string0);
}","/**
 * Encodes the given String into a Caverphone value.
 *
 * @param txt String the source string
 * @return A caverphone code for the given String
 */"
"public String caverphone(String txt) {
    // NOTE: Version 1.0 of Caverphone is easily derivable from this code
    // by commenting out the 2.0 lines and adding in the 1.0 lines
    if (txt == null || txt.length() == 0) {
        return ""1111111111"";
    }
    // 1. Convert to lowercase
    txt = txt.toLowerCase(java.util.Locale.ENGLISH);
    // 2. Remove anything not A-Z
    txt = txt.replaceAll(""[^a-z]"", """");
    // 2.5. Remove final e
    // 2.0 only
    txt = txt.replaceAll(""e$"", """");
    // 3. Handle various start options
    txt = txt.replaceAll(""^cough"", ""cou2f"");
    txt = txt.replaceAll(""^rough"", ""rou2f"");
    txt = txt.replaceAll(""^tough"", ""tou2f"");
    // 2.0 only
    txt = txt.replaceAll(""^enough"", ""enou2f"");
    // 2.0 only - note the spec says ^enough here again, c+p error I assume
    txt = txt.replaceAll(""^trough"", ""trou2f"");
    txt = txt.replaceAll(""^gn"", ""2n"");
    // End
    txt = txt.replaceAll(""^mb"", ""m2"");
    // 4. Handle replacements
    txt = txt.replaceAll(""cq"", ""2q"");
    txt = txt.replaceAll(""ci"", ""si"");
    txt = txt.replaceAll(""ce"", ""se"");
    txt = txt.replaceAll(""cy"", ""sy"");
    txt = txt.replaceAll(""tch"", ""2ch"");
    txt = txt.replaceAll(""c"", ""k"");
    txt = txt.replaceAll(""q"", ""k"");
    txt = txt.replaceAll(""x"", ""k"");
    txt = txt.replaceAll(""v"", ""f"");
    txt = txt.replaceAll(""dg"", ""2g"");
    txt = txt.replaceAll(""tio"", ""sio"");
    txt = txt.replaceAll(""tia"", ""sia"");
    txt = txt.replaceAll(""d"", ""t"");
    txt = txt.replaceAll(""ph"", ""fh"");
    txt = txt.replaceAll(""b"", ""p"");
    txt = txt.replaceAll(""sh"", ""s2"");
    txt = txt.replaceAll(""z"", ""s"");
    txt = txt.replaceAll(""^[aeiou]"", ""A"");
    txt = txt.replaceAll(""[aeiou]"", ""3"");
    // 2.0 only
    txt = txt.replaceAll(""j"", ""y"");
    // 2.0 only
    txt = txt.replaceAll(""^y3"", ""Y3"");
    // 2.0 only
    txt = txt.replaceAll(""^y"", ""A"");
    // 2.0 only
    txt = txt.replaceAll(""y"", ""3"");
    txt = txt.replaceAll(""3gh3"", ""3kh3"");
    txt = txt.replaceAll(""gh"", ""22"");
    txt = txt.replaceAll(""g"", ""k"");
    txt = txt.replaceAll(""s+"", ""S"");
    txt = txt.replaceAll(""t+"", ""T"");
    txt = txt.replaceAll(""p+"", ""P"");
    txt = txt.replaceAll(""k+"", ""K"");
    txt = txt.replaceAll(""f+"", ""F"");
    txt = txt.replaceAll(""m+"", ""M"");
    txt = txt.replaceAll(""n+"", ""N"");
    txt = txt.replaceAll(""w3"", ""W3"");
    //txt = txt.replaceAll(""wy"", ""Wy"");    // 1.0 only
    txt = txt.replaceAll(""wh3"", ""Wh3"");
    // 2.0 only
    txt = txt.replaceAll(""w$"", ""3"");
    //txt = txt.replaceAll(""why"", ""Why"");  // 1.0 only
    txt = txt.replaceAll(""w"", ""2"");
    txt = txt.replaceAll(""^h"", ""A"");
    txt = txt.replaceAll(""h"", ""2"");
    txt = txt.replaceAll(""r3"", ""R3"");
    // 2.0 only
    txt = txt.replaceAll(""r$"", ""3"");
    //txt = txt.replaceAll(""ry"", ""Ry"");    // 1.0 only
    txt = txt.replaceAll(""r"", ""2"");
    txt = txt.replaceAll(""l3"", ""L3"");
    // 2.0 only
    txt = txt.replaceAll(""l$"", ""3"");
    //txt = txt.replaceAll(""ly"", ""Ly"");    // 1.0 only
    txt = txt.replaceAll(""l"", ""2"");
    //txt = txt.replaceAll(""j"", ""y"");      // 1.0 only
    //txt = txt.replaceAll(""y3"", ""Y3"");    // 1.0 only
    //txt = txt.replaceAll(""y"", ""2"");      // 1.0 only
    // 5. Handle removals
    txt = txt.replaceAll(""2"", """");
    // 2.0 only
    txt = txt.replaceAll(""3$"", ""A"");
    txt = txt.replaceAll(""3"", """");
    // 6. put ten 1s on the end
    // 1.0 only has 6 1s
    txt = txt + ""111111"" + ""1111"";
    // 7. take the first six characters as the code
    // 1.0 truncates to 6
    return txt.substring(0, 10);
}","public void test22() throws Throwable {
    Caverphone caverphone0 = new Caverphone();
    String string0 = caverphone0.caverphone("""");
    assertEquals(""1111111111"", string0);
}","/**
 * Encodes the given String into a Caverphone value.
 *
 * @param txt String the source string
 * @return A caverphone code for the given String
 */"
"public String caverphone(String txt) {
    // NOTE: Version 1.0 of Caverphone is easily derivable from this code
    // by commenting out the 2.0 lines and adding in the 1.0 lines
    if (txt == null || txt.length() == 0) {
        return ""1111111111"";
    }
    // 1. Convert to lowercase
    txt = txt.toLowerCase(java.util.Locale.ENGLISH);
    // 2. Remove anything not A-Z
    txt = txt.replaceAll(""[^a-z]"", """");
    // 2.5. Remove final e
    // 2.0 only
    txt = txt.replaceAll(""e$"", """");
    // 3. Handle various start options
    txt = txt.replaceAll(""^cough"", ""cou2f"");
    txt = txt.replaceAll(""^rough"", ""rou2f"");
    txt = txt.replaceAll(""^tough"", ""tou2f"");
    // 2.0 only
    txt = txt.replaceAll(""^enough"", ""enou2f"");
    // 2.0 only - note the spec says ^enough here again, c+p error I assume
    txt = txt.replaceAll(""^trough"", ""trou2f"");
    txt = txt.replaceAll(""^gn"", ""2n"");
    // End
    txt = txt.replaceAll(""^mb"", ""m2"");
    // 4. Handle replacements
    txt = txt.replaceAll(""cq"", ""2q"");
    txt = txt.replaceAll(""ci"", ""si"");
    txt = txt.replaceAll(""ce"", ""se"");
    txt = txt.replaceAll(""cy"", ""sy"");
    txt = txt.replaceAll(""tch"", ""2ch"");
    txt = txt.replaceAll(""c"", ""k"");
    txt = txt.replaceAll(""q"", ""k"");
    txt = txt.replaceAll(""x"", ""k"");
    txt = txt.replaceAll(""v"", ""f"");
    txt = txt.replaceAll(""dg"", ""2g"");
    txt = txt.replaceAll(""tio"", ""sio"");
    txt = txt.replaceAll(""tia"", ""sia"");
    txt = txt.replaceAll(""d"", ""t"");
    txt = txt.replaceAll(""ph"", ""fh"");
    txt = txt.replaceAll(""b"", ""p"");
    txt = txt.replaceAll(""sh"", ""s2"");
    txt = txt.replaceAll(""z"", ""s"");
    txt = txt.replaceAll(""^[aeiou]"", ""A"");
    txt = txt.replaceAll(""[aeiou]"", ""3"");
    // 2.0 only
    txt = txt.replaceAll(""j"", ""y"");
    // 2.0 only
    txt = txt.replaceAll(""^y3"", ""Y3"");
    // 2.0 only
    txt = txt.replaceAll(""^y"", ""A"");
    // 2.0 only
    txt = txt.replaceAll(""y"", ""3"");
    txt = txt.replaceAll(""3gh3"", ""3kh3"");
    txt = txt.replaceAll(""gh"", ""22"");
    txt = txt.replaceAll(""g"", ""k"");
    txt = txt.replaceAll(""s+"", ""S"");
    txt = txt.replaceAll(""t+"", ""T"");
    txt = txt.replaceAll(""p+"", ""P"");
    txt = txt.replaceAll(""k+"", ""K"");
    txt = txt.replaceAll(""f+"", ""F"");
    txt = txt.replaceAll(""m+"", ""M"");
    txt = txt.replaceAll(""n+"", ""N"");
    txt = txt.replaceAll(""w3"", ""W3"");
    //txt = txt.replaceAll(""wy"", ""Wy"");    // 1.0 only
    txt = txt.replaceAll(""wh3"", ""Wh3"");
    // 2.0 only
    txt = txt.replaceAll(""w$"", ""3"");
    //txt = txt.replaceAll(""why"", ""Why"");  // 1.0 only
    txt = txt.replaceAll(""w"", ""2"");
    txt = txt.replaceAll(""^h"", ""A"");
    txt = txt.replaceAll(""h"", ""2"");
    txt = txt.replaceAll(""r3"", ""R3"");
    // 2.0 only
    txt = txt.replaceAll(""r$"", ""3"");
    //txt = txt.replaceAll(""ry"", ""Ry"");    // 1.0 only
    txt = txt.replaceAll(""r"", ""2"");
    txt = txt.replaceAll(""l3"", ""L3"");
    // 2.0 only
    txt = txt.replaceAll(""l$"", ""3"");
    //txt = txt.replaceAll(""ly"", ""Ly"");    // 1.0 only
    txt = txt.replaceAll(""l"", ""2"");
    //txt = txt.replaceAll(""j"", ""y"");      // 1.0 only
    //txt = txt.replaceAll(""y3"", ""Y3"");    // 1.0 only
    //txt = txt.replaceAll(""y"", ""2"");      // 1.0 only
    // 5. Handle removals
    txt = txt.replaceAll(""2"", """");
    // 2.0 only
    txt = txt.replaceAll(""3$"", ""A"");
    txt = txt.replaceAll(""3"", """");
    // 6. put ten 1s on the end
    // 1.0 only has 6 1s
    txt = txt + ""111111"" + ""1111"";
    // 7. take the first six characters as the code
    // 1.0 truncates to 6
    return txt.substring(0, 10);
}","public void test33() throws Throwable {
    Caverphone caverphone0 = new Caverphone();
    String string0 = caverphone0.caverphone(""1111111111"");
    assertEquals(""1111111111"", string0);
}","/**
 * Encodes the given String into a Caverphone value.
 *
 * @param txt String the source string
 * @return A caverphone code for the given String
 */"
"public Object encode(Object pObject) throws EncoderException {
    if (!(pObject instanceof String)) {
        throw new EncoderException(""Parameter supplied to Caverphone encode is not of type java.lang.String"");
    }
    return caverphone((String) pObject);
}","public void test44() throws Throwable {
    Caverphone caverphone0 = new Caverphone();
    Object object0 = new Object();
    try {
        caverphone0.encode(object0);
        fail(""Expecting exception: Exception"");
    } catch (Exception e) {
        //
        // Parameter supplied to Caverphone encode is not of type java.lang.String
        //
        verifyException(""org.apache.commons.codec.language.Caverphone"", e);
    }
}","/**
 * Encodes an Object using the caverphone algorithm.  This method
 * is provided in order to satisfy the requirements of the
 * Encoder interface, and will throw an EncoderException if the
 * supplied object is not of type java.lang.String.
 *
 * @param pObject Object to encode
 * @return An object (or type java.lang.String) containing the
 *         caverphone code which corresponds to the String supplied.
 * @throws EncoderException if the parameter supplied is not
 *                          of type java.lang.String
 */"
"public Object encode(Object pObject) throws EncoderException {
    if (!(pObject instanceof String)) {
        throw new EncoderException(""Parameter supplied to Caverphone encode is not of type java.lang.String"");
    }
    return caverphone((String) pObject);
}","public void test55() throws Throwable {
    Caverphone caverphone0 = new Caverphone();
    Object object0 = caverphone0.encode((Object) ""%8+~$W-j&`;+'ks"");
    assertEquals(""WKS1111111"", object0);
}","/**
 * Encodes an Object using the caverphone algorithm.  This method
 * is provided in order to satisfy the requirements of the
 * Encoder interface, and will throw an EncoderException if the
 * supplied object is not of type java.lang.String.
 *
 * @param pObject Object to encode
 * @return An object (or type java.lang.String) containing the
 *         caverphone code which corresponds to the String supplied.
 * @throws EncoderException if the parameter supplied is not
 *                          of type java.lang.String
 */"
"public boolean isCaverphoneEqual(String str1, String str2) {
    return caverphone(str1).equals(caverphone(str2));
}","public void test66() throws Throwable {
    Caverphone caverphone0 = new Caverphone();
    boolean boolean0 = caverphone0.isCaverphoneEqual((String) null, ""%8+~$W-j&`;+'ks"");
    assertFalse(boolean0);
}","/**
 * Tests if the caverphones of two strings are identical.
 *
 * @param str1 First of two strings to compare
 * @param str2 Second of two strings to compare
 * @return <code>true</code> if the caverphones of these strings are identical,
 *        <code>false</code> otherwise.
 */"
"public String encode(String pString) {
    return caverphone(pString);
}","public void test77() throws Throwable {
    Caverphone caverphone0 = new Caverphone();
    String string0 = caverphone0.encode("""");
    assertEquals(""1111111111"", string0);
}","/**
 * Encodes a String using the Caverphone algorithm.
 *
 * @param pString String object to encode
 * @return The caverphone code corresponding to the String supplied
 */"
