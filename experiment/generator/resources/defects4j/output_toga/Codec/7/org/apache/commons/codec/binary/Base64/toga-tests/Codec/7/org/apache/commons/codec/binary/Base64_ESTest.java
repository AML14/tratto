/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 26 04:53:30 GMT 2024
 */
package org.apache.commons.codec.binary;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.apache.commons.codec.binary.Base64;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class Base64_ESTest extends Base64_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        Base64.encodeInteger(bigInteger0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Base64 base64_0 = null;
        base64_0 = new Base64();
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = new Base64((short) 1, byteArray0, true);
        String string0 = base64_0.encodeToString(byteArray0);
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        String string0 = Base64.encodeBase64String((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Base64.decodeBase64("Parameter supplied to Base64 encode is not a byte[]");
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        Base64.encodeBase64URLSafe(byteArray0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Base64 base64_0 = null;
        base64_0 = new Base64(38, (byte[]) null);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Base64.decodeBase64("}-5mqB4Dh.X@PwC=J");
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Base64 base64_0 = null;
        base64_0 = new Base64(false);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        byte[] byteArray0 = new byte[8];
        Base64 base64_0 = new Base64(12, byteArray0);
        byte[] byteArray1 = base64_0.encode(byteArray0);
        int int0 = base64_0.readResults(byteArray1, (byte) (-84), (byte) 110);
        assertEquals(1, int0);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Base64 base64_0 = null;
        base64_0 = new Base64(6);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64 base64_0 = null;
        base64_0 = new Base64();
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        Base64 base64_0 = null;
        base64_0 = new Base64((-1837));
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        Base64.encodeInteger(bigInteger0);
        Base64 base64_0 = null;
        base64_0 = new Base64();
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = null;
        base64_0 = new Base64();
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        Base64.encodeInteger(bigInteger0);
        Base64 base64_0 = null;
        base64_0 = new Base64(72);
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 54;
        Base64.decodeInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        byte[] byteArray0 = Base64.CHUNK_SEPARATOR;
        Base64.encodeBase64Chunked(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 125;
        Base64 base64_0 = new Base64((-324), byteArray0, true);
        base64_0.isUrlSafe();
        assertTrue(base64_0.isUrlSafe());
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        Base64 base64_0 = null;
        base64_0 = new Base64(false);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        Base64.decodeInteger((byte[]) null);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        byte[] byteArray0 = new byte[0];
        Base64.decodeInteger(byteArray0);
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        byte[] byteArray0 = new byte[1];
        Base64.encodeBase64(byteArray0, false, false, (int) (byte) 0);
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ONE;
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        MockRandom mockRandom0 = new MockRandom(8);
        BigInteger bigInteger0 = BigInteger.probablePrime(2064, mockRandom0);
        byte[] byteArray0 = Base64.toIntegerBytes(bigInteger0);
        byte[] byteArray1 = Base64.discardWhitespace(byteArray0);
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 9;
        boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        byte[] byteArray0 = new byte[4];
        byteArray0[0] = (byte) 73;
        byteArray0[1] = (byte) 32;
        boolean boolean0 = Base64.isArrayByteBase64(byteArray0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        Base64 base64_0 = null;
        base64_0 = new Base64(true);
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        BigInteger bigInteger0 = BigInteger.ZERO;
        Base64.toIntegerBytes(bigInteger0);
        Base64 base64_0 = null;
        base64_0 = new Base64(false);
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        Base64.encodeInteger((BigInteger) null);
    }
}
