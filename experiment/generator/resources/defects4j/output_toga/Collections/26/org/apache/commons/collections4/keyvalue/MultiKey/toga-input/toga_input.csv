focal_method,test_prefix,docstring
"//-----------------------------------------------------------------------
/**
 * Compares this object to another.
 * <p>
 * To be equal, the other object must be a <code>MultiKey</code> with the
 * same number of keys which are also equal.
 *
 * @param other  the other object to compare to
 * @return true if equal
 */
@Override
public boolean equals(final Object other) {
    if (other == this) {
        return true;
    }
    if (other instanceof MultiKey) {
        final MultiKey<?> otherMulti = (MultiKey<?>) other;
        return Arrays.equals(keys, otherMulti.keys);
    }
    return false;
}","public void test000() throws Throwable {
    MultiKey<String> multiKey0 = new MultiKey<String>(""<+}qzMrYq"", ""<+}qzMrYq"", ""<+}qzMrYq"");
    MultiKey<String>[] multiKeyArray0 = (MultiKey<String>[]) Array.newInstance(MultiKey.class, 3);
    multiKeyArray0[0] = multiKey0;
    MultiKey<MultiKey<String>> multiKey1 = new MultiKey<MultiKey<String>>(multiKeyArray0, true);
    MultiKey<Object> multiKey2 = new MultiKey<Object>((Object[]) multiKeyArray0, true);
    boolean boolean0 = multiKey1.equals(multiKey2);
    assertTrue(boolean0);
}",""
"public int size() {
    return keys.length;
}","public void test011() throws Throwable {
    String[] stringArray0 = new String[0];
    MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
    int int0 = multiKey0.size();
    assertEquals(0, int0);
}","/**
 * Gets the size of the list of keys.
 *
 * @return the size of the list of keys
 * @since 3.1
 */"
"public K getKey(final int index) {
    return keys[index];
}","public void test022() throws Throwable {
    Object[] objectArray0 = new Object[8];
    MultiKey<Object> multiKey0 = new MultiKey<Object>(objectArray0);
    Object object0 = multiKey0.getKey(0);
    assertNull(object0);
}","/**
 * Gets the key at the specified index.
 * <p>
 * The key should be immutable.
 * If it is not then it must not be changed.
 *
 * @param index  the index to retrieve
 * @return the key at the index
 * @throws IndexOutOfBoundsException if the index is invalid
 * @since 3.1
 */"
"public K getKey(final int index) {
    return keys[index];
}","public void test033() throws Throwable {
    MultiKey<String> multiKey0 = new MultiKey<String>(""<+}qzMrYq"", ""<+}qzMrYq"", ""<+}qzMrYq"");
    String string0 = multiKey0.getKey(0);
    assertEquals(""<+}qzMrYq"", string0);
}","/**
 * Gets the key at the specified index.
 * <p>
 * The key should be immutable.
 * If it is not then it must not be changed.
 *
 * @param index  the index to retrieve
 * @return the key at the index
 * @throws IndexOutOfBoundsException if the index is invalid
 * @since 3.1
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a clone of the array of keys.
 * <p>
 * The keys should be immutable
 * If they are not then they must not be changed.
 *
 * @return the individual keys
 */
public K[] getKeys() {
    return keys.clone();
}","public void test044() throws Throwable {
    String[] stringArray0 = new String[0];
    MultiKey<String> multiKey0 = new MultiKey<String>(stringArray0, false);
    String[] stringArray1 = multiKey0.getKeys();
    assertNotSame(stringArray1, stringArray0);
}",""
"public int size() {
    return keys.length;
}","public void test077() throws Throwable {
    Integer integer0 = new Integer(595);
    MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
    int int0 = multiKey0.size();
    assertEquals(2, int0);
}","/**
 * Gets the size of the list of keys.
 *
 * @return the size of the list of keys
 * @since 3.1
 */"
"public K getKey(final int index) {
    return keys[index];
}","public void test088() throws Throwable {
    Integer[] integerArray0 = new Integer[9];
    int int0 = 0;
    MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
    MultiKey<Object> multiKey1 = new MultiKey<Object>(multiKey0, int0, integerArray0[2]);
    // Undeclared exception!
    try {
        multiKey1.getKey((-4358));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // -4358
        //
        verifyException(""org.apache.commons.collections4.keyvalue.MultiKey"", e);
    }
}","/**
 * Gets the key at the specified index.
 * <p>
 * The key should be immutable.
 * If it is not then it must not be changed.
 *
 * @param index  the index to retrieve
 * @return the key at the index
 * @throws IndexOutOfBoundsException if the index is invalid
 * @since 3.1
 */"
"@Override
public int hashCode() {
    return hashCode;
}","public void test099() throws Throwable {
    Integer integer0 = new Integer(595);
    MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
    MultiKey<MultiKey<Object>> multiKey1 = new MultiKey<MultiKey<Object>>(multiKey0, multiKey0, multiKey0, multiKey0, multiKey0);
    multiKey1.hashCode();
}","/**
 * Gets the combined hash code that is computed from all the keys.
 * <p>
 * This value is computed once and then cached, so elements should not
 * change their hash codes once created (note that this is the same
 * constraint that would be used if the individual keys elements were
 * themselves {@link java.util.Map Map} keys.
 *
 * @return the hash code
 */"
"@Override
public String toString() {
    return ""MultiKey"" + Arrays.toString(keys);
}","public void test1010() throws Throwable {
    MultiKey<String> multiKey0 = new MultiKey<String>(""<+}qzMrYq"", ""<+}qzMrYq"", ""<+}qzMrYq"");
    String string0 = multiKey0.toString();
    assertEquals(""MultiKey[<+}qzMrYq, <+}qzMrYq, <+}qzMrYq]"", string0);
}","/**
 * Gets a debugging string version of the key.
 *
 * @return a debugging string
 */"
"//-----------------------------------------------------------------------
/**
 * Gets a clone of the array of keys.
 * <p>
 * The keys should be immutable
 * If they are not then they must not be changed.
 *
 * @return the individual keys
 */
public K[] getKeys() {
    return keys.clone();
}","public void test1111() throws Throwable {
    Integer integer0 = new Integer(595);
    MultiKey<Object> multiKey0 = new MultiKey<Object>(integer0, integer0);
    Object[] objectArray0 = multiKey0.getKeys();
    assertEquals(2, objectArray0.length);
}",""
"//-----------------------------------------------------------------------
/**
 * Compares this object to another.
 * <p>
 * To be equal, the other object must be a <code>MultiKey</code> with the
 * same number of keys which are also equal.
 *
 * @param other  the other object to compare to
 * @return true if equal
 */
@Override
public boolean equals(final Object other) {
    if (other == this) {
        return true;
    }
    if (other instanceof MultiKey) {
        final MultiKey<?> otherMulti = (MultiKey<?>) other;
        return Arrays.equals(keys, otherMulti.keys);
    }
    return false;
}","public void test1212() throws Throwable {
    Integer[] integerArray0 = new Integer[9];
    MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0);
    boolean boolean0 = multiKey0.equals(integerArray0[3]);
    assertFalse(boolean0);
}",""
"public int size() {
    return keys.length;
}","public void test1313() throws Throwable {
    Integer[] integerArray0 = new Integer[9];
    Integer integer0 = new Integer(0);
    MultiKey<Integer> multiKey0 = new MultiKey<Integer>(integerArray0[4], integerArray0[2], integerArray0[7], integer0);
    assertEquals(4, multiKey0.size());
}","/**
 * Gets the size of the list of keys.
 *
 * @return the size of the list of keys
 * @since 3.1
 */"
