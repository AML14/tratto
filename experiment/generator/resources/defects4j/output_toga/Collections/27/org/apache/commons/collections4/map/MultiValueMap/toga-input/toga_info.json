{
  "test1016" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1016() throws Throwable {\n    MultiValueMap<HashMap<Object, Integer>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, String>();\n    HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();\n    multiValueMap0.putIfAbsent(hashMap0, hashMap0);\n    boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0);\n    multiValueMap0.isEmpty();\n}",
    "testName" : "test1016"
  },
  "test1017" : {
    "methodSignature" : "public boolean containsValue(final Object value)",
    "methodName" : "containsValue",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1017() throws Throwable {\n    MultiValueMap<HashMap<Object, Integer>, String> multiValueMap0 = new MultiValueMap<HashMap<Object, Integer>, String>();\n    HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();\n    multiValueMap0.putIfAbsent(hashMap0, hashMap0);\n    boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap0);\n}",
    "testName" : "test1017"
  },
  "test1930" : {
    "methodSignature" : "public int size(final Object key)",
    "methodName" : "size",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1930() throws Throwable {\n    MultiValueMap<LinkedList<String>, String> multiValueMap0 = new MultiValueMap<LinkedList<String>, String>();\n    MultiValueMap<LinkedList<String>, Integer> multiValueMap1 = MultiValueMap.multiValueMap((Map<LinkedList<String>, ? super Collection<Integer>>) multiValueMap0);\n    int int0 = multiValueMap1.size((Object) multiValueMap0);\n}",
    "testName" : "test1930"
  },
  "test012" : {
    "methodSignature" : "public Iterator<Entry<K, V>> iterator()",
    "methodName" : "iterator",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test012() throws Throwable {\n    MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();\n    MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);\n    Iterator<Map.Entry<Integer, LinkedList<Object>>> iterator0 = (Iterator<Map.Entry<Integer, LinkedList<Object>>>) multiValueMap1.iterator();\n}",
    "testName" : "test012"
  },
  "test034" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test034() throws Throwable {\n    MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();\n    multiValueMap0.put(\"P\", \"P\");\n    MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);\n    boolean boolean0 = multiValueMap1.containsValue((Object) \"P\");\n    multiValueMap0.size();\n}",
    "testName" : "test034"
  },
  "test1118" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1118() throws Throwable {\n    MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();\n    multiValueMap0.put((String) null, (Object) null);\n    MultiValueMap<String, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ConstantFactory<String>>>) multiValueMap0);\n    multiValueMap1.put((String) null, (Object) null);\n    multiValueMap0.size();\n}",
    "testName" : "test1118"
  },
  "test1119" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1119() throws Throwable {\n    MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();\n    multiValueMap0.put((String) null, (Object) null);\n    MultiValueMap<String, ConstantFactory<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<ConstantFactory<String>>>) multiValueMap0);\n    multiValueMap1.put((String) null, (Object) null);\n    multiValueMap0.isEmpty();\n}",
    "testName" : "test1119"
  },
  "test1829" : {
    "methodSignature" : "public int size(final Object key)",
    "methodName" : "size",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1829() throws Throwable {\n    MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();\n    multiValueMap0.put(\"P\", \"P\");\n    int int0 = multiValueMap0.size((Object) \"P\");\n}",
    "testName" : "test1829"
  },
  "test046" : {
    "methodSignature" : "public Collection<Object> values()",
    "methodName" : "values",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test046() throws Throwable {\n    MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();\n    MultiValueMap<ConstantFactory<Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<ConstantFactory<Object>, Collection<Object>>();\n    Collection<Object> collection0 = multiValueMap1.values();\n}",
    "testName" : "test046"
  },
  "test047" : {
    "methodSignature" : "public boolean putAll(final K key, final Collection<V> values)",
    "methodName" : "putAll",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test047() throws Throwable {\n    MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();\n    MultiValueMap<ConstantFactory<Object>, Collection<Object>> multiValueMap1 = new MultiValueMap<ConstantFactory<Object>, Collection<Object>>();\n    Collection<Object> collection0 = multiValueMap1.values();\n    boolean boolean0 = multiValueMap0.putAll(collection0, collection0);\n}",
    "testName" : "test047"
  },
  "test1422" : {
    "methodSignature" : "public Collection<Object> values()",
    "methodName" : "values",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1422() throws Throwable {\n    MultiValueMap<Integer, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<Integer, ConstantFactory<String>>();\n    Collection<Object> collection0 = multiValueMap0.values();\n    Collection<Object> collection1 = multiValueMap0.values();\n}",
    "testName" : "test1422"
  },
  "test0610" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0610() throws Throwable {\n    MultiValueMap<Collection<Integer>, Object> multiValueMap0 = new MultiValueMap<Collection<Integer>, Object>();\n    MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<ArrayList<String>, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<AbstractMap.SimpleEntry<ArrayList<String>, Object>>>) multiValueMap0);\n    ArrayList<Integer> arrayList0 = new ArrayList<Integer>();\n    multiValueMap0.putIfAbsent(arrayList0, multiValueMap1);\n    MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0);\n    int int0 = multiValueMap2.totalSize();\n    multiValueMap0.size();\n}",
    "testName" : "test0610"
  },
  "test1523" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1523() throws Throwable {\n    MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>>();\n    MultiValueMap<HashMap<Object, String>, ArrayList<String>> multiValueMap1 = new MultiValueMap<HashMap<Object, String>, ArrayList<String>>();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    multiValueMap1.putIfAbsent(hashMap0, hashMap0);\n    Object object0 = new Object();\n    boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, object0);\n    multiValueMap1.isEmpty();\n}",
    "testName" : "test1523"
  },
  "test1220" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1220() throws Throwable {\n    MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>> multiValueMap0 = new MultiValueMap<Integer, AbstractMap.SimpleImmutableEntry<String, Object>>();\n    MultiValueMap<Integer, LinkedList<Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Integer, ? super Collection<LinkedList<Object>>>) multiValueMap0);\n    Integer integer0 = new Integer(706);\n    ArrayList<String> arrayList0 = new ArrayList<String>();\n    multiValueMap1.putIfAbsent(integer0, arrayList0);\n    multiValueMap1.putAll((Map<? extends Integer, ?>) multiValueMap0);\n    multiValueMap1.size();\n}",
    "testName" : "test1220"
  },
  "test2132" : {
    "methodSignature" : "public Iterator<V> iterator(final Object key)",
    "methodName" : "iterator",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2132() throws Throwable {\n    HashMap<LinkedList<Object>, Object> hashMap0 = new HashMap<LinkedList<Object>, Object>();\n    MultiValueMap<LinkedList<Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<LinkedList<Object>, ? super Collection<Object>>) hashMap0);\n    Iterator<Object> iterator0 = multiValueMap0.iterator((Object) hashMap0);\n}",
    "testName" : "test2132"
  },
  "test1321" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1321() throws Throwable {\n    MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();\n    HashMap<String, String> hashMap0 = new HashMap<String, String>();\n    hashMap0.put((String) null, \"The collection must not be null\");\n    multiValueMap0.putAll((Map<? extends String, ?>) hashMap0);\n    multiValueMap0.size();\n}",
    "testName" : "test1321"
  },
  "test000" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();\n    ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();\n    ConstantFactory<Collection<LinkedList<String>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<String>>>(arrayList0);\n    MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) multiValueMap0, (Factory<Collection<LinkedList<String>>>) constantFactory0);\n    BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());\n    Object object0 = multiValueMap1.merge(null, arrayList0, biFunction0);\n    multiValueMap1.isEmpty();\n}",
    "testName" : "test000"
  },
  "test0813" : {
    "methodSignature" : "boolean removeMapping(K key, V item)",
    "methodName" : "removeMapping",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0813() throws Throwable {\n    HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Object>> hashMap0 = new HashMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Collection<Object>>();\n    MultiValueMap<AbstractMap.SimpleImmutableEntry<Object, Object>, Object> multiValueMap0 = MultiValueMap.multiValueMap((Map<AbstractMap.SimpleImmutableEntry<Object, Object>, ? super Collection<Object>>) hashMap0);\n    boolean boolean0 = multiValueMap0.removeMapping((Object) null, (Object) null);\n}",
    "testName" : "test0813"
  },
  "test1726" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1726() throws Throwable {\n    MultiValueMap<HashMap<Object, String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, ArrayList<String>>();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    Object object0 = multiValueMap0.putIfAbsent(hashMap0, hashMap0);\n    boolean boolean0 = multiValueMap0.containsValue(object0, (Object) hashMap0);\n    multiValueMap0.isEmpty();\n}",
    "testName" : "test1726"
  },
  "test001" : {
    "methodSignature" : "boolean removeMapping(K key, V item)",
    "methodName" : "removeMapping",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test001() throws Throwable {\n    MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();\n    ArrayList<LinkedList<String>> arrayList0 = new ArrayList<LinkedList<String>>();\n    ConstantFactory<Collection<LinkedList<String>>> constantFactory0 = new ConstantFactory<Collection<LinkedList<String>>>(arrayList0);\n    MultiValueMap<String, LinkedList<String>> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<LinkedList<String>>>) multiValueMap0, (Factory<Collection<LinkedList<String>>>) constantFactory0);\n    BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());\n    Object object0 = multiValueMap1.merge(null, arrayList0, biFunction0);\n    boolean boolean0 = multiValueMap0.removeMapping((Object) null, object0);\n}",
    "testName" : "test001"
  },
  "test023" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test023() throws Throwable {\n    MultiValueMap<Collection<Integer>, ConstantFactory<String>> multiValueMap0 = new MultiValueMap<Collection<Integer>, ConstantFactory<String>>();\n    multiValueMap0.clear();\n    multiValueMap0.isEmpty();\n}",
    "testName" : "test023"
  },
  "test1727" : {
    "methodSignature" : "public boolean containsValue(final Object key, final Object value)",
    "methodName" : "containsValue",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1727() throws Throwable {\n    MultiValueMap<HashMap<Object, String>, ArrayList<String>> multiValueMap0 = new MultiValueMap<HashMap<Object, String>, ArrayList<String>>();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    Object object0 = multiValueMap0.putIfAbsent(hashMap0, hashMap0);\n    boolean boolean0 = multiValueMap0.containsValue(object0, (Object) hashMap0);\n}",
    "testName" : "test1727"
  },
  "test0914" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0914() throws Throwable {\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n    Integer integer0 = new Integer((-1437));\n    linkedList0.add(integer0);\n    MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();\n    multiValueMap0.putAll(\"h$M.mL6!(<I{hV\", (Collection<Integer>) linkedList0);\n    MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);\n    LinkedList<Object> linkedList1 = new LinkedList<Object>();\n    boolean boolean0 = multiValueMap1.removeMapping(\"h$M.mL6!(<I{hV\", linkedList1);\n    multiValueMap0.isEmpty();\n}",
    "testName" : "test0914"
  },
  "test0915" : {
    "methodSignature" : "boolean removeMapping(K key, V item)",
    "methodName" : "removeMapping",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0915() throws Throwable {\n    LinkedList<Integer> linkedList0 = new LinkedList<Integer>();\n    Integer integer0 = new Integer((-1437));\n    linkedList0.add(integer0);\n    MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();\n    multiValueMap0.putAll(\"h$M.mL6!(<I{hV\", (Collection<Integer>) linkedList0);\n    MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);\n    LinkedList<Object> linkedList1 = new LinkedList<Object>();\n    boolean boolean0 = multiValueMap1.removeMapping(\"h$M.mL6!(<I{hV\", linkedList1);\n}",
    "testName" : "test0915"
  },
  "test1828" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1828() throws Throwable {\n    MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();\n    multiValueMap0.put(\"P\", \"P\");\n    int int0 = multiValueMap0.size((Object) \"P\");\n    multiValueMap0.size();\n}",
    "testName" : "test1828"
  },
  "test0611" : {
    "methodSignature" : "public int totalSize()",
    "methodName" : "totalSize",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0611() throws Throwable {\n    MultiValueMap<Collection<Integer>, Object> multiValueMap0 = new MultiValueMap<Collection<Integer>, Object>();\n    MultiValueMap<Collection<Integer>, AbstractMap.SimpleEntry<ArrayList<String>, Object>> multiValueMap1 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<AbstractMap.SimpleEntry<ArrayList<String>, Object>>>) multiValueMap0);\n    ArrayList<Integer> arrayList0 = new ArrayList<Integer>();\n    multiValueMap0.putIfAbsent(arrayList0, multiValueMap1);\n    MultiValueMap<Collection<Integer>, LinkedList<Object>> multiValueMap2 = MultiValueMap.multiValueMap((Map<Collection<Integer>, ? super Collection<LinkedList<Object>>>) multiValueMap0);\n    int int0 = multiValueMap2.totalSize();\n}",
    "testName" : "test0611"
  },
  "test1524" : {
    "methodSignature" : "public boolean containsValue(final Object key, final Object value)",
    "methodName" : "containsValue",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1524() throws Throwable {\n    MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>> multiValueMap0 = new MultiValueMap<String, AbstractMap.SimpleEntry<Integer, Object>>();\n    MultiValueMap<HashMap<Object, String>, ArrayList<String>> multiValueMap1 = new MultiValueMap<HashMap<Object, String>, ArrayList<String>>();\n    HashMap<Object, String> hashMap0 = new HashMap<Object, String>();\n    multiValueMap1.putIfAbsent(hashMap0, hashMap0);\n    Object object0 = new Object();\n    boolean boolean0 = multiValueMap1.containsValue((Object) multiValueMap0, object0);\n}",
    "testName" : "test1524"
  },
  "test0712" : {
    "methodSignature" : "public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory)",
    "methodName" : "multiValueMap",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0712() throws Throwable {\n    MultiValueMap<String, Object> multiValueMap0 = new MultiValueMap<String, Object>();\n    MultiValueMap.multiValueMap((Map<String, ? super Collection<Integer>>) multiValueMap0, (Factory<Collection<Integer>>) null);\n}",
    "testName" : "test0712"
  },
  "test1625" : {
    "methodSignature" : "public boolean containsValue(final Object key, final Object value)",
    "methodName" : "containsValue",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1625() throws Throwable {\n    MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();\n    ArrayList<String> arrayList0 = new ArrayList<String>();\n    LinkedList<String> linkedList0 = new LinkedList<String>(arrayList0);\n    Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) linkedList0);\n    MultiValueMap<Collection<Object>, String> multiValueMap1 = new MultiValueMap<Collection<Object>, String>((Map<Collection<Object>, ? super Collection<String>>) multiValueMap0, factory0);\n    Integer integer0 = new Integer((-851));\n    boolean boolean0 = multiValueMap0.containsValue((Object) multiValueMap1, (Object) integer0);\n}",
    "testName" : "test1625"
  },
  "test059" : {
    "methodSignature" : "public boolean isEmpty()",
    "methodName" : "isEmpty",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test059() throws Throwable {\n    MultiValueMap<Collection<Object>, Object> multiValueMap0 = new MultiValueMap<Collection<Object>, Object>();\n    ArrayList<String> arrayList0 = new ArrayList<String>();\n    arrayList0.add(\"PrototypeCloneFactory: The clone method must exist and be public \");\n    LinkedList<String> linkedList0 = new LinkedList<String>(arrayList0);\n    Factory<Collection<String>> factory0 = ConstantFactory.constantFactory((Collection<String>) linkedList0);\n    MultiValueMap<Collection<Object>, String> multiValueMap1 = new MultiValueMap<Collection<Object>, String>((Map<Collection<Object>, ? super Collection<String>>) multiValueMap0, factory0);\n    ArrayList<Object> arrayList1 = new ArrayList<Object>();\n    multiValueMap1.putAll((Collection<Object>) arrayList1, (Collection<String>) arrayList0);\n    multiValueMap1.iterator((Object) arrayList1);\n    multiValueMap0.isEmpty();\n}",
    "testName" : "test059"
  },
  "test035" : {
    "methodSignature" : "public boolean containsValue(final Object value)",
    "methodName" : "containsValue",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test035() throws Throwable {\n    MultiValueMap<String, Integer> multiValueMap0 = new MultiValueMap<String, Integer>();\n    multiValueMap0.put(\"P\", \"P\");\n    MultiValueMap<String, String> multiValueMap1 = MultiValueMap.multiValueMap((Map<String, ? super Collection<String>>) multiValueMap0);\n    boolean boolean0 = multiValueMap1.containsValue((Object) \"P\");\n}",
    "testName" : "test035"
  },
  "test2031" : {
    "methodSignature" : "public boolean putAll(final K key, final Collection<V> values)",
    "methodName" : "putAll",
    "className" : "org.apache.commons.collections4.map.MultiValueMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2031() throws Throwable {\n    MultiValueMap<String, LinkedList<Object>> multiValueMap0 = new MultiValueMap<String, LinkedList<Object>>();\n    boolean boolean0 = multiValueMap0.putAll(\"MV9uE[/u:72W\", (Collection<LinkedList<Object>>) null);\n}",
    "testName" : "test2031"
  }
}