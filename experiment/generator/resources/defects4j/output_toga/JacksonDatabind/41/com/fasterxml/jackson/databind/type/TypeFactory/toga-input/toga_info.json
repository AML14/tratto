{
  "test2324" : {
    "methodSignature" : "public TypeFactory withModifier(TypeModifier mod)",
    "methodName" : "withModifier",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2324() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);\n}",
    "testName" : "test2324"
  },
  "test5559" : {
    "methodSignature" : "public boolean isAbstract()",
    "methodName" : "isAbstract",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5559() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<String> class0 = String.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n    javaType0.isAbstract();\n}",
    "testName" : "test5559"
  },
  "test1213" : {
    "methodSignature" : "public boolean isConcrete()",
    "methodName" : "isConcrete",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1213() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    collectionLikeType0.isConcrete();\n}",
    "testName" : "test1213"
  },
  "test4548" : {
    "methodSignature" : "public final boolean isEnumType()",
    "methodName" : "isEnumType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4548() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<SimpleType> class0 = SimpleType.class;\n    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);\n    JavaType javaType0 = typeFactory0.moreSpecificType(resolvedRecursiveType0, (JavaType) null);\n    javaType0.isEnumType();\n}",
    "testName" : "test4548"
  },
  "test2425" : {
    "methodSignature" : "public TypeFactory withModifier(TypeModifier mod)",
    "methodName" : "withModifier",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2425() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);\n    TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);\n}",
    "testName" : "test2425"
  },
  "test5458" : {
    "methodSignature" : "public abstract int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5458() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<LinkedList> class0 = LinkedList.class;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0);\n    TypeBindings typeBindings0 = TypeBindings.create(class0, javaType0);\n    JavaType[] javaTypeArray0 = new JavaType[5];\n    JavaType javaType1 = typeFactory0._constructSimple(class0, typeBindings0, javaType0, javaTypeArray0);\n    javaType1.containedTypeCount();\n}",
    "testName" : "test5458"
  },
  "test1314" : {
    "methodSignature" : "public int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);\n    collectionType0.containedTypeCount();\n}",
    "testName" : "test1314"
  },
  "test4447" : {
    "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
    "methodName" : "moreSpecificType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4447() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);\n}",
    "testName" : "test4447"
  },
  "test2122" : {
    "methodSignature" : "public final boolean isInterface()",
    "methodName" : "isInterface",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2122() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;\n    Class<SimpleModule> class0 = SimpleModule.class;\n    JavaType javaType0 = typeFactory0.constructReferenceType(class0, simpleType0);\n    javaType0.isInterface();\n}",
    "testName" : "test2122"
  },
  "test1011" : {
    "methodSignature" : "public byte[] writeValueAsBytes(Object value) throws JsonProcessingException",
    "methodName" : "writeValueAsBytes",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    ObjectWriter objectWriter0 = objectMapper0.writer();\n    objectMapper0.writeValueAsBytes(objectWriter0);\n}",
    "testName" : "test1011"
  },
  "test4346" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4346() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;\n    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);\n    javaType0.isFinal();\n}",
    "testName" : "test4346"
  },
  "test2223" : {
    "methodSignature" : "public ArrayType constructArrayType(JavaType elementType)",
    "methodName" : "constructArrayType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2223() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.constructArrayType((JavaType) null);\n}",
    "testName" : "test2223"
  },
  "test3334" : {
    "methodSignature" : "protected Class<?> _findPrimitive(String className)",
    "methodName" : "_findPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3334() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<?> class0 = typeFactory0._findPrimitive(\"byte\");\n}",
    "testName" : "test3334"
  },
  "test5256" : {
    "methodSignature" : "public final boolean isEnumType()",
    "methodName" : "isEnumType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5256() throws Throwable {\n    TypeFactory.defaultInstance();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);\n    PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();\n    ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);\n    PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;\n    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;\n    ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);\n    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;\n    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;\n    JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;\n    jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;\n    ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);\n    objectMapper3.getPropertyNamingStrategy();\n    AtomicReference<Module> atomicReference0 = new AtomicReference<Module>();\n    objectMapper2.readerForUpdating(defaultDeserializationContext_Impl0);\n    Class<DataInputStream> class0 = DataInputStream.class;\n    ClassStack classStack0 = new ClassStack(class0);\n    Class<MapLikeType> class1 = MapLikeType.class;\n    ClassStack classStack1 = classStack0.child(class1);\n    ClassStack classStack2 = classStack1.find(class0);\n    ClassStack classStack3 = classStack2._parent;\n    Class<SimpleModule> class2 = SimpleModule.class;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;\n    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;\n    LinkedHashSet<JsonSerializer<ReferenceType>> linkedHashSet0 = new LinkedHashSet<JsonSerializer<ReferenceType>>();\n    ArrayType arrayType0 = new ArrayType(simpleType0, typeBindings0, classStack0, linkedHashSet0, (Object) null, false);\n    ArrayType arrayType1 = arrayType0.withTypeHandler(classStack2);\n    ArrayType arrayType2 = arrayType0.withValueHandler(arrayType1);\n    arrayType2.isEnumType();\n}",
    "testName" : "test5256"
  },
  "test1112" : {
    "methodSignature" : "public void clearCache()",
    "methodName" : "clearCache",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1112() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.clearCache();\n}",
    "testName" : "test1112"
  },
  "test4245" : {
    "methodSignature" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
    "methodName" : "constructGeneralizedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4245() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;\n    Class<SerializationFeature> class0 = SerializationFeature.class;\n    typeFactory0.constructGeneralizedType(simpleType0, class0);\n}",
    "testName" : "test4245"
  },
  "test033" : {
    "methodSignature" : "public int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashSet> class0 = HashSet.class;\n    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);\n    collectionType0.containedTypeCount();\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public ObjectReader readerForUpdating(Object valueToUpdate)",
    "methodName" : "readerForUpdating",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    AtomicReference<Module> atomicReference0 = new AtomicReference<Module>();\n    ObjectReader objectReader0 = objectMapper0.readerForUpdating(atomicReference0);\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public JavaType uncheckedSimpleType(Class<?> cls)",
    "methodName" : "uncheckedSimpleType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<MapType> class0 = MapType.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n}",
    "testName" : "test077"
  },
  "test078" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test078() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<MapType> class0 = MapType.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);\n}",
    "testName" : "test078"
  },
  "test1617" : {
    "methodSignature" : "public MapType constructRawMapType(Class<? extends Map> mapClass)",
    "methodName" : "constructRawMapType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1617() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Properties> class0 = Properties.class;\n    typeFactory0.constructRawMapType(class0);\n}",
    "testName" : "test1617"
  },
  "test3739" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3739() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;\n    Class<Properties> class0 = Properties.class;\n    typeFactory0.constructSpecializedType(simpleType0, class0);\n}",
    "testName" : "test3739"
  },
  "test1718" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1718() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<TextNode> class0 = TextNode.class;\n    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);\n    mapLikeType0.isJavaLangObject();\n}",
    "testName" : "test1718"
  },
  "test1415" : {
    "methodSignature" : "public int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);\n    collectionLikeType0.containedTypeCount();\n}",
    "testName" : "test1415"
  },
  "test1516" : {
    "methodSignature" : "public JavaType constructType(TypeReference<?> typeRef)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1516() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.constructType((TypeReference<?>) null);\n}",
    "testName" : "test1516"
  },
  "test3638" : {
    "methodSignature" : "public boolean isAbstract()",
    "methodName" : "isAbstract",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3638() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Properties> class0 = Properties.class;\n    JavaType javaType0 = TypeFactory.unknownType();\n    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);\n    javaType1.isAbstract();\n}",
    "testName" : "test3638"
  },
  "test4649" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4649() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;\n    SimpleType simpleType1 = TypeFactory.CORE_TYPE_CLASS;\n    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType1);\n    javaType0.isFinal();\n}",
    "testName" : "test4649"
  },
  "test4144" : {
    "methodSignature" : "public abstract int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4144() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Integer> class0 = Integer.class;\n    Stack<JavaType> stack0 = new Stack<JavaType>();\n    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);\n    Class<SimpleModule> class1 = SimpleModule.class;\n    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);\n    CollectionLikeType collectionLikeType0 = new CollectionLikeType(resolvedRecursiveType0, resolvedRecursiveType0);\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);\n    JavaType javaType0 = typeFactory0.constructGeneralizedType(referenceType0, class1);\n    javaType0.containedTypeCount();\n}",
    "testName" : "test4144"
  },
  "test2021" : {
    "methodSignature" : "public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings)",
    "methodName" : "findTypeParameters",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2021() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<MapLikeType> class0 = MapLikeType.class;\n    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;\n    JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, typeBindings0);\n}",
    "testName" : "test2021"
  },
  "test4043" : {
    "methodSignature" : "public abstract int containedTypeCount()",
    "methodName" : "containedTypeCount",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4043() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ArrayType> class0 = ArrayType.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n    JavaType javaType1 = typeFactory0.constructGeneralizedType(javaType0, class0);\n    javaType1.containedTypeCount();\n}",
    "testName" : "test4043"
  },
  "test3841" : {
    "methodSignature" : "public boolean isAbstract()",
    "methodName" : "isAbstract",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3841() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;\n    Class<String> class0 = String.class;\n    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);\n    javaType0.isAbstract();\n}",
    "testName" : "test3841"
  },
  "test3942" : {
    "methodSignature" : "public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass)",
    "methodName" : "constructGeneralizedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3942() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;\n    Class<Object> class0 = Object.class;\n    typeFactory0.constructGeneralizedType(simpleType0, class0);\n}",
    "testName" : "test3942"
  },
  "test4852" : {
    "methodSignature" : "public final boolean isInterface()",
    "methodName" : "isInterface",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4852() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Properties> class0 = Properties.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);\n    collectionLikeType0.isInterface();\n}",
    "testName" : "test4852"
  },
  "test5864" : {
    "methodSignature" : "protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype, TypeBindings parentBindings)",
    "methodName" : "_fromParamType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5864() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());\n    doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();\n    doReturn((Type) null).when(parameterizedType0).getRawType();\n    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;\n    typeFactory0._fromParamType((ClassStack) null, parameterizedType0, typeBindings0);\n}",
    "testName" : "test5864"
  },
  "test3840" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3840() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;\n    Class<String> class0 = String.class;\n    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);\n    javaType0.isJavaLangObject();\n}",
    "testName" : "test3840"
  },
  "test4750" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4750() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;\n    JavaType javaType0 = typeFactory0._unknownType();\n    JavaType javaType1 = typeFactory0.moreSpecificType(simpleType0, javaType0);\n    javaType1.isFinal();\n}",
    "testName" : "test4750"
  },
  "test4751" : {
    "methodSignature" : "public boolean isAbstract()",
    "methodName" : "isAbstract",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4751() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;\n    JavaType javaType0 = typeFactory0._unknownType();\n    JavaType javaType1 = typeFactory0.moreSpecificType(simpleType0, javaType0);\n    javaType0.isAbstract();\n}",
    "testName" : "test4751"
  },
  "test022" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Integer> class0 = Integer.class;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);\n    javaType0.isFinal();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    TypeParser typeParser0 = new TypeParser(typeFactory0);\n    TypeModifier[] typeModifierArray0 = new TypeModifier[0];\n    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);\n    Class<Properties> class0 = Properties.class;\n    ArrayType arrayType0 = typeFactory1.constructArrayType(class0);\n    arrayType0.isFinal();\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public final boolean isEnumType()",
    "methodName" : "isEnumType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<CollectionType> class0 = CollectionType.class;\n    Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);\n    JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, classArray0);\n    javaType0.isEnumType();\n}",
    "testName" : "test066"
  },
  "test089" : {
    "methodSignature" : "public boolean isAbstract()",
    "methodName" : "isAbstract",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test089() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Properties> class0 = Properties.class;\n    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);\n    mapLikeType0.isAbstract();\n}",
    "testName" : "test089"
  },
  "test1920" : {
    "methodSignature" : "public Class<?> findClass(String className) throws ClassNotFoundException",
    "methodName" : "findClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1920() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();\n    TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);\n    typeFactory1.findClass(\"JSON\");\n}",
    "testName" : "test1920"
  },
  "test0910" : {
    "methodSignature" : "public boolean isMapLikeType()",
    "methodName" : "isMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test0910() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);\n    javaType0.isMapLikeType();\n}",
    "testName" : "test0910"
  },
  "test1819" : {
    "methodSignature" : "public abstract boolean isContainerType()",
    "methodName" : "isContainerType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1819() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    JavaType javaType0 = typeFactory0.constructFromCanonical(\"com.fasterxml.jackson.databind.cfg.BaseSettings\");\n    javaType0.isContainerType();\n}",
    "testName" : "test1819"
  },
  "test5662" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5662() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Long> class0 = Long.TYPE;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0);\n    javaType0.isPrimitive();\n}",
    "testName" : "test5662"
  },
  "test5560" : {
    "methodSignature" : "public JavaType uncheckedSimpleType(Class<?> cls)",
    "methodName" : "uncheckedSimpleType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5560() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<String> class0 = String.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n}",
    "testName" : "test5560"
  },
  "test5561" : {
    "methodSignature" : "public final boolean isFinal()",
    "methodName" : "isFinal",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5561() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<String> class0 = String.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n    javaType0.isFinal();\n}",
    "testName" : "test5561"
  }
}