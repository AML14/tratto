/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 01:08:01 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.ClassStack;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import java.io.DataInputStream;
import java.lang.reflect.Array;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        typeFactory0.constructType((Type) null, class0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ObjectIdGenerators.IntSequenceGenerator> class0 = ObjectIdGenerators.IntSequenceGenerator.class;
        Class<Properties> class1 = Properties.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class1);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Integer> class0 = Integer.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
        javaType0.isFinal();
        assertTrue(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashSet> class0 = HashSet.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        collectionType0.containedTypeCount();
        assertEquals(1, collectionType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        Class<Properties> class0 = Properties.class;
        ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
        arrayType0.isFinal();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Module> atomicReference0 = new AtomicReference<Module>();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(atomicReference0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, classArray0);
        javaType0.isEnumType();
        assertTrue(javaType0.isEnumType());
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test078() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapType> class0 = MapType.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
    }

    @Test(timeout = 4000)
    public void test089() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        mapLikeType0.isAbstract();
    }

    @Test(timeout = 4000)
    public void test0910() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
        javaType0.isMapLikeType();
        assertTrue(javaType0.isMapLikeType());
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer();
        objectMapper0.writeValueAsBytes(objectWriter0);
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.clearCache();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        collectionLikeType0.isConcrete();
        assertFalse(collectionLikeType0.isConcrete());
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        collectionType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        collectionLikeType0.containedTypeCount();
        assertEquals(0, collectionLikeType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test1516() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.constructType((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test1617() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructRawMapType(class0);
    }

    @Test(timeout = 4000)
    public void test1718() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<TextNode> class0 = TextNode.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        mapLikeType0.isJavaLangObject();
        assertTrue(mapLikeType0.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test1819() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructFromCanonical("com.fasterxml.jackson.databind.cfg.BaseSettings");
        javaType0.isContainerType();
        assertFalse(javaType0.isContainerType());
    }

    @Test(timeout = 4000)
    public void test1920() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
        typeFactory1.findClass("JSON");
    }

    @Test(timeout = 4000)
    public void test2021() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<MapLikeType> class0 = MapLikeType.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, typeBindings0);
    }

    @Test(timeout = 4000)
    public void test2122() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
        Class<SimpleModule> class0 = SimpleModule.class;
        JavaType javaType0 = typeFactory0.constructReferenceType(class0, simpleType0);
        javaType0.isInterface();
        assertFalse(javaType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test2223() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructArrayType((JavaType) null);
    }

    @Test(timeout = 4000)
    public void test2324() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
        TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0._unknownType();
        Class<?> class0 = TypeFactory.rawClass(javaType0);
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        Class<Short> class0 = Short.TYPE;
        Class<?> class1 = TypeFactory.rawClass(class0);
        class1.toString();
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("short");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0._findPrimitive("int");
        class0.isSynthetic();
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0.findClass("long");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("float");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0.findClass("double");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("boolean");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0._findPrimitive("byte");
    }

    @Test(timeout = 4000)
    public void test3335() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0._findPrimitive("byte");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3436() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<?> class0 = typeFactory0.findClass("char");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3537() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<?> class0 = typeFactory0.findClass("void");
        class0.toString();
    }

    @Test(timeout = 4000)
    public void test3638() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isAbstract();
        assertFalse(javaType1.isAbstract());
    }

    @Test(timeout = 4000)
    public void test3739() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test3840() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        Class<String> class0 = String.class;
        JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
        javaType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
        Class<String> class0 = String.class;
        JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
        javaType0.isAbstract();
        assertTrue(javaType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test3942() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        Class<Object> class0 = Object.class;
        typeFactory0.constructGeneralizedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test4043() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayType> class0 = ArrayType.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        JavaType javaType1 = typeFactory0.constructGeneralizedType(javaType0, class0);
        javaType1.containedTypeCount();
        assertEquals(0, javaType1.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test4144() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Integer> class0 = Integer.class;
        Stack<JavaType> stack0 = new Stack<JavaType>();
        TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
        Class<SimpleModule> class1 = SimpleModule.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
        CollectionLikeType collectionLikeType0 = new CollectionLikeType(resolvedRecursiveType0, resolvedRecursiveType0);
        JavaType[] javaTypeArray0 = new JavaType[0];
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
        JavaType javaType0 = typeFactory0.constructGeneralizedType(referenceType0, class1);
        javaType0.containedTypeCount();
        assertEquals(1, javaType0.containedTypeCount());
    }

    @Test(timeout = 4000)
    public void test4245() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        Class<SerializationFeature> class0 = SerializationFeature.class;
        typeFactory0.constructGeneralizedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test4346() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);
        javaType0.isFinal();
        assertTrue(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test4447() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test4548() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SimpleType> class0 = SimpleType.class;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        JavaType javaType0 = typeFactory0.moreSpecificType(resolvedRecursiveType0, (JavaType) null);
        javaType0.isEnumType();
        assertTrue(javaType0.isEnumType());
    }

    @Test(timeout = 4000)
    public void test4649() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
        SimpleType simpleType1 = TypeFactory.CORE_TYPE_CLASS;
        JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType1);
        javaType0.isFinal();
        assertTrue(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test4750() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.moreSpecificType(simpleType0, javaType0);
        javaType1.isFinal();
        assertTrue(javaType1.isFinal());
    }

    @Test(timeout = 4000)
    public void test4751() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.moreSpecificType(simpleType0, javaType0);
        javaType0.isAbstract();
        assertFalse(javaType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test4852() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Properties> class0 = Properties.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        collectionLikeType0.isInterface();
        assertTrue(collectionLikeType0.isInterface());
    }

    @Test(timeout = 4000)
    public void test4953() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashSet> class0 = HashSet.class;
        Class<Properties> class1 = Properties.class;
        typeFactory0.constructMapType((Class<? extends Map>) null, class1, class0);
    }

    @Test(timeout = 4000)
    public void test5054() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Properties> class0 = Properties.class;
        typeFactory0.constructMapType(class0, class0, class0);
    }

    @Test(timeout = 4000)
    public void test5155() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SimpleType> class0 = SimpleType.class;
        Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
        typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test5256() throws Throwable {
        TypeFactory.defaultInstance();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
        ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
        PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
        ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
        ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
        objectMapper3.getPropertyNamingStrategy();
        AtomicReference<Module> atomicReference0 = new AtomicReference<Module>();
        objectMapper2.readerForUpdating(defaultDeserializationContext_Impl0);
        Class<DataInputStream> class0 = DataInputStream.class;
        ClassStack classStack0 = new ClassStack(class0);
        Class<MapLikeType> class1 = MapLikeType.class;
        ClassStack classStack1 = classStack0.child(class1);
        ClassStack classStack2 = classStack1.find(class0);
        ClassStack classStack3 = classStack2._parent;
        Class<SimpleModule> class2 = SimpleModule.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        LinkedHashSet<JsonSerializer<ReferenceType>> linkedHashSet0 = new LinkedHashSet<JsonSerializer<ReferenceType>>();
        ArrayType arrayType0 = new ArrayType(simpleType0, typeBindings0, classStack0, linkedHashSet0, (Object) null, false);
        ArrayType arrayType1 = arrayType0.withTypeHandler(classStack2);
        ArrayType arrayType2 = arrayType0.withValueHandler(arrayType1);
        arrayType2.isEnumType();
        assertTrue(arrayType2.isEnumType());
    }

    @Test(timeout = 4000)
    public void test5357() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
        objectIdGenerators_IntSequenceGenerator0.getScope();
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test5458() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        TypeBindings typeBindings0 = TypeBindings.create(class0, javaType0);
        JavaType[] javaTypeArray0 = new JavaType[5];
        JavaType javaType1 = typeFactory0._constructSimple(class0, typeBindings0, javaType0, javaTypeArray0);
        javaType1.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test5559() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.isAbstract();
        assertTrue(javaType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test5560() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    }

    @Test(timeout = 4000)
    public void test5561() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<String> class0 = String.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.isFinal();
        assertTrue(javaType0.isFinal());
    }

    @Test(timeout = 4000)
    public void test5662() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Long> class0 = Long.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        javaType0.isPrimitive();
        assertTrue(javaType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test5763() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[1];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        Class<Object> class0 = Object.class;
        typeFactory1.constructArrayType(class0);
    }

    @Test(timeout = 4000)
    public void test5864() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
        doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
        doReturn((Type) null).when(parameterizedType0).getRawType();
        TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
        typeFactory0._fromParamType((ClassStack) null, parameterizedType0, typeBindings0);
    }
}
