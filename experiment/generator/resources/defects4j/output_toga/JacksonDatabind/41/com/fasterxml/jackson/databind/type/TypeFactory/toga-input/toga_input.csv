focal_method,test_prefix,docstring
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test022() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Integer> class0 = Integer.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
    assertTrue(javaType0.isFinal());
}",""
"@Override
public int containedTypeCount() {
    return _bindings.size();
}","public void test033() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashSet> class0 = HashSet.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
    assertEquals(1, collectionType0.containedTypeCount());
}",""
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test044() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[0];
    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
    Class<Properties> class0 = Properties.class;
    ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
    assertTrue(arrayType0.isFinal());
}",""
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return _newReader(getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    AtomicReference<Module> atomicReference0 = new AtomicReference<Module>();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(atomicReference0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"@Override
public final boolean isEnumType() {
    return _class.isEnum();
}","public void test066() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<CollectionType> class0 = CollectionType.class;
    Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
    JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, classArray0);
    assertFalse(javaType0.isEnumType());
}",""
"public JavaType uncheckedSimpleType(Class<?> cls) {
    // 18-Oct-2015, tatu: Not sure how much problem missing super-type info is here
    return _constructSimple(cls, EMPTY_BINDINGS, null, null);
}","public void test077() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<MapType> class0 = MapType.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertNotNull(javaType0);
}","/**
 *  Method that will force construction of a simple type, without trying to
 *  check for more specialized types.
 * <p>
 *  NOTE: no type modifiers are called on type either, so calling this method
 *  should only be used if caller really knows what it's doing...
 */"
"/*
    /**********************************************************
    /* Type conversion, parameterization resolution methods
    /**********************************************************
     */
/**
 * Factory method for creating a subtype of given base type, as defined
 * by specified subclass; but retaining generic type information if any.
 * Can be used, for example, to get equivalent of ""HashMap&lt;String,Integer&gt;""
 * from ""Map&lt;String,Integer&gt;"" by giving <code>HashMap.class</code>
 * as subclass.
 */
public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {
    // simple optimization to avoid costly introspection if type-erased type does NOT differ
    final Class<?> rawBase = baseType.getRawClass();
    if (rawBase == subclass) {
        return baseType;
    }
    JavaType newType;
    // also: if we start from untyped, not much to save
    do {
        // bogus loop to be able to break
        if (rawBase == Object.class) {
            newType = _fromClass(null, subclass, TypeBindings.emptyBindings());
            break;
        }
        if (!rawBase.isAssignableFrom(subclass)) {
            throw new IllegalArgumentException(String.format(""Class %s not subtype of %s"", subclass.getName(), baseType));
        }
        // A few special cases where we can simplify handling:
        // (1) Original target type has no generics -- just resolve subtype
        if (baseType.getBindings().isEmpty()) {
            newType = _fromClass(null, subclass, TypeBindings.emptyBindings());
            break;
        }
        // (2) A small set of ""well-known"" List/Map subtypes where can take a short-cut
        if (baseType.isContainerType()) {
            if (baseType.isMapLikeType()) {
                if ((subclass == HashMap.class) || (subclass == LinkedHashMap.class) || (subclass == EnumMap.class) || (subclass == TreeMap.class)) {
                    newType = _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));
                    break;
                }
            } else if (baseType.isCollectionLikeType()) {
                if ((subclass == ArrayList.class) || (subclass == LinkedList.class) || (subclass == HashSet.class) || (subclass == TreeSet.class)) {
                    newType = _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getContentType()));
                    break;
                }
                // 29-Oct-2015, tatu: One further shortcut: there are variants of `EnumSet`,
                //    but they are impl details and we basically do not care...
                if (rawBase == EnumSet.class) {
                    return baseType;
                }
            }
        }
        // (3) Sub-class does not take type parameters -- just resolve subtype
        if (subclass.getTypeParameters().length == 0) {
            newType = _fromClass(null, subclass, TypeBindings.emptyBindings());
            break;
        }
        // If not, we'll need to do more thorough forward+backwards resolution. Sigh.
        // !!! TODO (as of 28-Jan-2016, at least)
        // 20-Oct-2015, tatu: Container, Map-types somewhat special. There is
        //    a way to fully resolve and merge hierarchies; but that gets expensive
        //    so let's, for now, try to create close-enough approximation that
        //    is not 100% same, structurally, but has equivalent information for
        //    our specific neeeds.
        if (baseType.isInterface()) {
            newType = baseType.refine(subclass, TypeBindings.emptyBindings(), null, new JavaType[] { baseType });
        } else {
            newType = baseType.refine(subclass, TypeBindings.emptyBindings(), baseType, NO_TYPES);
        }
        // Only SimpleType returns null, but if so just resolve regularly
        if (newType == null) {
            // But otherwise gets bit tricky, as we need to partially resolve the type hierarchy
            // (hopefully passing null Class for root is ok)
            newType = _fromClass(null, subclass, TypeBindings.emptyBindings());
        }
    } while (false);
    // except possibly handlers
    //      newType = newType.withHandlersFrom(baseType);
    return newType;
    // 20-Oct-2015, tatu: Old simplistic approach
    /*
        // Currently mostly SimpleType instances can become something else
        if (baseType instanceof SimpleType) {
            // and only if subclass is an array, Collection or Map
            if (subclass.isArray()
                || Map.class.isAssignableFrom(subclass)
                || Collection.class.isAssignableFrom(subclass)) {
                // need to assert type compatibility...
                if (!baseType.getRawClass().isAssignableFrom(subclass)) {
                    throw new IllegalArgumentException(""Class ""+subclass.getClass().getName()+"" not subtype of ""+baseType);
                }
                // this _should_ work, right?
                JavaType subtype = _fromClass(null, subclass, TypeBindings.emptyBindings());
                // one more thing: handlers to copy?
                Object h = baseType.getValueHandler();
                if (h != null) {
                    subtype = subtype.withValueHandler(h);
                }
                h = baseType.getTypeHandler();
                if (h != null) {
                    subtype = subtype.withTypeHandler(h);
                }
                return subtype;
            }
        }
        // But there is the need for special case for arrays too, it seems
        if (baseType instanceof ArrayType) {
            if (subclass.isArray()) {
                // actually see if it might be a no-op first:
                ArrayType at = (ArrayType) baseType;
                Class<?> rawComp = subclass.getComponentType();
                if (at.getContentType().getRawClass() == rawComp) {
                    return baseType;
                }
                JavaType componentType = _fromAny(null, rawComp, null);
                return ((ArrayType) baseType).withComponentType(componentType);
            }
        }

        // otherwise regular narrowing should work just fine
        return baseType.narrowBy(subclass);
        */
}","public void test078() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<MapType> class0 = MapType.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
    assertSame(javaType1, javaType0);
}",""
"@Override
public boolean isAbstract() {
    return Modifier.isAbstract(_class.getModifiers());
}","public void test089() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
    assertFalse(mapLikeType0.isAbstract());
}",""
"@Override
public boolean isMapLikeType() {
    return false;
}","public void test0910() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    assertFalse(javaType0.isMapLikeType());
}","/**
 * @return True if type is either true {@link java.util.Map} type,
 *    or something similar (meaning it has at least two type parameter;
 *    first one describing key type, second value type)
 */"
"@SuppressWarnings(""resource"")
public byte[] writeValueAsBytes(Object value) throws JsonProcessingException {
    ByteArrayBuilder bb = new ByteArrayBuilder(_jsonFactory._getBufferRecycler());
    try {
        _configAndWriteValue(_jsonFactory.createGenerator(bb, JsonEncoding.UTF8), value);
    } catch (JsonProcessingException e) {
        // to support [JACKSON-758]
        throw e;
    } catch (IOException e) {
        // shouldn't really happen, but is declared as possibility so:
        throw JsonMappingException.fromUnexpectedIOE(e);
    }
    byte[] result = bb.toByteArray();
    bb.release();
    return result;
}","public void test1011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer();
    // Undeclared exception!
    try {
        objectMapper0.writeValueAsBytes(objectWriter0);
        fail(""Expecting exception: NoClassDefFoundError"");
    } catch (NoClassDefFoundError e) {
        //
        // com/fasterxml/jackson/databind/JsonMappingException$Reference
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.BeanSerializerBase"", e);
    }
}","/**
 *  Method that can be used to serialize any Java value as
 *  a byte array. Functionally equivalent to calling
 *  {@link #writeValue(Writer,Object)} with {@link java.io.ByteArrayOutputStream}
 *  and getting bytes, but more efficient.
 *  Encoding used will be UTF-8.
 * <p>
 *  Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.
 */"
"public void clearCache() {
    _typeCache.clear();
}","public void test1112() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.clearCache();
}","/**
 * Method that will clear up any cached type definitions that may
 * be cached by this {@link TypeFactory} instance.
 * This method should not be commonly used, that is, only use it
 * if you know there is a problem with retention of type definitions;
 * the most likely (and currently only known) problem is retention
 * of {@link Class} instances via {@link JavaType} reference.
 *
 * @since 2.4.1
 */"
"@Override
public boolean isConcrete() {
    int mod = _class.getModifiers();
    if ((mod & (Modifier.INTERFACE | Modifier.ABSTRACT)) == 0) {
        return true;
    }
    /* 19-Feb-2010, tatus: Holy mackarel; primitive types
         *    have 'abstract' flag set...
         */
    return _class.isPrimitive();
}","public void test1213() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    assertTrue(collectionLikeType0.isConcrete());
}","/**
 * Convenience method for checking whether underlying Java type
 * is a concrete class or not: abstract classes and interfaces
 * are not.
 */"
"@Override
public int containedTypeCount() {
    return _bindings.size();
}","public void test1314() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    assertEquals(1, collectionType0.containedTypeCount());
}",""
"@Override
public int containedTypeCount() {
    return _bindings.size();
}","public void test1415() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
    assertEquals(1, collectionLikeType0.containedTypeCount());
}",""
"public JavaType constructType(TypeReference<?> typeRef) {
    // 19-Oct-2015, tatu: Simpler variant like so should work
    return _fromAny(null, typeRef.getType(), EMPTY_BINDINGS);
    // but if not, due to funky sub-classing, type variables, what follows
    // is a more complete processing a la Java ClassMate.
    /*
        final Class<?> refdRawType = typeRef.getClass();
        JavaType type = _fromClass(null, refdRawType, EMPTY_BINDINGS);
        JavaType genType = type.findSuperType(TypeReference.class);
        if (genType == null) { // sanity check; shouldn't occur
            throw new IllegalArgumentException(""Unparameterized GenericType instance (""+refdRawType.getName()+"")"");
        }
        TypeBindings b = genType.getBindings();
        JavaType[] params = b.typeParameterArray();
        if (params.length == 0) {
            throw new IllegalArgumentException(""Unparameterized GenericType instance (""+refdRawType.getName()+"")"");
        }
        return params[0];
        */
}","public void test1516() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    // Undeclared exception!
    try {
        typeFactory0.constructType((TypeReference<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"public MapType constructRawMapType(Class<? extends Map> mapClass) {
    return constructMapType(mapClass, unknownType(), unknownType());
}","public void test1617() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    // Undeclared exception!
    try {
        typeFactory0.constructRawMapType(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not create TypeBindings for class java.util.Properties with 2 type parameters: class expects 0
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeBindings"", e);
    }
}","/**
 *  Method that can be used to construct ""raw"" Map type; meaning that its
 *  parameterization is unknown.
 *  This is similar to using <code>Object.class</code> parameterization,
 *  and is equivalent to calling:
 * <pre>
 *   typeFactory.constructMapType(collectionClass, typeFactory.unknownType(), typeFactory.unknownType());
 * </pre>
 * <p>
 *  This method should only be used if parameterization is completely unavailable.
 */"
"public final boolean isJavaLangObject() {
    return _class == Object.class;
}","public void test1718() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<TextNode> class0 = TextNode.class;
    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
    assertFalse(mapLikeType0.isJavaLangObject());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"@Override
public abstract boolean isContainerType();","public void test1819() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = typeFactory0.constructFromCanonical(""com.fasterxml.jackson.databind.cfg.BaseSettings"");
    assertFalse(javaType0.isContainerType());
}","/**
 * @return True if type represented is a container type; this includes
 *    array, Map and Collection types.
 */"
"/*
    /**********************************************************
    /* Low-level helper methods
    /**********************************************************
     */
/**
 * Low-level lookup method moved from {@link com.fasterxml.jackson.databind.util.ClassUtil},
 * to allow for overriding of lookup functionality in environments like OSGi.
 *
 * @since 2.6
 */
public Class<?> findClass(String className) throws ClassNotFoundException {
    if (className.indexOf('.') < 0) {
        Class<?> prim = _findPrimitive(className);
        if (prim != null) {
            return prim;
        }
    }
    // Two-phase lookup: first using context ClassLoader; then default
    Throwable prob = null;
    ClassLoader loader = this.getClassLoader();
    if (loader == null) {
        loader = Thread.currentThread().getContextClassLoader();
    }
    if (loader != null) {
        try {
            return classForName(className, true, loader);
        } catch (Exception e) {
            prob = ClassUtil.getRootCause(e);
        }
    }
    try {
        return classForName(className);
    } catch (Exception e) {
        if (prob == null) {
            prob = ClassUtil.getRootCause(e);
        }
    }
    if (prob instanceof RuntimeException) {
        throw (RuntimeException) prob;
    }
    throw new ClassNotFoundException(prob.getMessage(), prob);
}","public void test1920() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
    try {
        typeFactory1.findClass(""JSON"");
        fail(""Expecting exception: ClassNotFoundException"");
    } catch (ClassNotFoundException e) {
        //
        // JSON
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"// since 2.7
@Deprecated
public JavaType[] findTypeParameters(Class<?> clz, Class<?> expType, TypeBindings bindings) {
    return findTypeParameters(constructType(clz, bindings), expType);
}","public void test2021() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<MapLikeType> class0 = MapLikeType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, typeBindings0);
    assertEquals(0, javaTypeArray0.length);
}","/**
 * @deprecated Since 2.7 resolve raw type first, then find type parameters
 */"
"@Override
public final boolean isInterface() {
    return _class.isInterface();
}","public void test2122() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Class<SimpleModule> class0 = SimpleModule.class;
    JavaType javaType0 = typeFactory0.constructReferenceType(class0, simpleType0);
    assertFalse(javaType0.isInterface());
}",""
"public ArrayType constructArrayType(JavaType elementType) {
    return ArrayType.construct(elementType, null);
}","public void test2223() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    // Undeclared exception!
    try {
        typeFactory0.constructArrayType((JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ArrayType"", e);
    }
}","/**
 *  Method for constructing an {@link ArrayType}.
 * <p>
 *  NOTE: type modifiers are NOT called on array type itself; but are called
 *  for contained types.
 */"
"public TypeFactory withModifier(TypeModifier mod) {
    if (mod == null) {
        // mostly for unit tests
        return new TypeFactory(_parser, _modifiers, _classLoader);
    }
    if (_modifiers == null) {
        return new TypeFactory(_parser, new TypeModifier[] { mod }, _classLoader);
    }
    return new TypeFactory(_parser, ArrayBuilders.insertInListNoDup(_modifiers, mod), _classLoader);
}","public void test2324() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    assertNotSame(typeFactory0, typeFactory1);
}",""
"public TypeFactory withModifier(TypeModifier mod) {
    if (mod == null) {
        // mostly for unit tests
        return new TypeFactory(_parser, _modifiers, _classLoader);
    }
    if (_modifiers == null) {
        return new TypeFactory(_parser, new TypeModifier[] { mod }, _classLoader);
    }
    return new TypeFactory(_parser, ArrayBuilders.insertInListNoDup(_modifiers, mod), _classLoader);
}","public void test2425() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);
    assertNotSame(typeFactory2, typeFactory1);
}",""
"protected Class<?> _findPrimitive(String className) {
    if (""int"".equals(className))
        return Integer.TYPE;
    if (""long"".equals(className))
        return Long.TYPE;
    if (""float"".equals(className))
        return Float.TYPE;
    if (""double"".equals(className))
        return Double.TYPE;
    if (""boolean"".equals(className))
        return Boolean.TYPE;
    if (""byte"".equals(className))
        return Byte.TYPE;
    if (""char"".equals(className))
        return Character.TYPE;
    if (""short"".equals(className))
        return Short.TYPE;
    if (""void"".equals(className))
        return Void.TYPE;
    return null;
}","public void test3334() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<?> class0 = typeFactory0._findPrimitive(""byte"");
    assertNotNull(class0);
}",""
"@Override
public boolean isAbstract() {
    return Modifier.isAbstract(_class.getModifiers());
}","public void test3638() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Properties> class0 = Properties.class;
    JavaType javaType0 = TypeFactory.unknownType();
    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
    assertFalse(javaType1.isAbstract());
}",""
"/*
    /**********************************************************
    /* Type conversion, parameterization resolution methods
    /**********************************************************
     */
/**
 * Factory method for creating a subtype of given base type, as defined
 * by specified subclass; but retaining generic type information if any.
 * Can be used, for example, to get equivalent of ""HashMap&lt;String,Integer&gt;""
 * from ""Map&lt;String,Integer&gt;"" by giving <code>HashMap.class</code>
 * as subclass.
 */
public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) {
    // simple optimization to avoid costly introspection if type-erased type does NOT differ
    final Class<?> rawBase = baseType.getRawClass();
    if (rawBase == subclass) {
        return baseType;
    }
    JavaType newType;
    // also: if we start from untyped, not much to save
    do {
        // bogus loop to be able to break
        if (rawBase == Object.class) {
            newType = _fromClass(null, subclass, TypeBindings.emptyBindings());
            break;
        }
        if (!rawBase.isAssignableFrom(subclass)) {
            throw new IllegalArgumentException(String.format(""Class %s not subtype of %s"", subclass.getName(), baseType));
        }
        // A few special cases where we can simplify handling:
        // (1) Original target type has no generics -- just resolve subtype
        if (baseType.getBindings().isEmpty()) {
            newType = _fromClass(null, subclass, TypeBindings.emptyBindings());
            break;
        }
        // (2) A small set of ""well-known"" List/Map subtypes where can take a short-cut
        if (baseType.isContainerType()) {
            if (baseType.isMapLikeType()) {
                if ((subclass == HashMap.class) || (subclass == LinkedHashMap.class) || (subclass == EnumMap.class) || (subclass == TreeMap.class)) {
                    newType = _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getKeyType(), baseType.getContentType()));
                    break;
                }
            } else if (baseType.isCollectionLikeType()) {
                if ((subclass == ArrayList.class) || (subclass == LinkedList.class) || (subclass == HashSet.class) || (subclass == TreeSet.class)) {
                    newType = _fromClass(null, subclass, TypeBindings.create(subclass, baseType.getContentType()));
                    break;
                }
                // 29-Oct-2015, tatu: One further shortcut: there are variants of `EnumSet`,
                //    but they are impl details and we basically do not care...
                if (rawBase == EnumSet.class) {
                    return baseType;
                }
            }
        }
        // (3) Sub-class does not take type parameters -- just resolve subtype
        if (subclass.getTypeParameters().length == 0) {
            newType = _fromClass(null, subclass, TypeBindings.emptyBindings());
            break;
        }
        // If not, we'll need to do more thorough forward+backwards resolution. Sigh.
        // !!! TODO (as of 28-Jan-2016, at least)
        // 20-Oct-2015, tatu: Container, Map-types somewhat special. There is
        //    a way to fully resolve and merge hierarchies; but that gets expensive
        //    so let's, for now, try to create close-enough approximation that
        //    is not 100% same, structurally, but has equivalent information for
        //    our specific neeeds.
        if (baseType.isInterface()) {
            newType = baseType.refine(subclass, TypeBindings.emptyBindings(), null, new JavaType[] { baseType });
        } else {
            newType = baseType.refine(subclass, TypeBindings.emptyBindings(), baseType, NO_TYPES);
        }
        // Only SimpleType returns null, but if so just resolve regularly
        if (newType == null) {
            // But otherwise gets bit tricky, as we need to partially resolve the type hierarchy
            // (hopefully passing null Class for root is ok)
            newType = _fromClass(null, subclass, TypeBindings.emptyBindings());
        }
    } while (false);
    // except possibly handlers
    //      newType = newType.withHandlersFrom(baseType);
    return newType;
    // 20-Oct-2015, tatu: Old simplistic approach
    /*
        // Currently mostly SimpleType instances can become something else
        if (baseType instanceof SimpleType) {
            // and only if subclass is an array, Collection or Map
            if (subclass.isArray()
                || Map.class.isAssignableFrom(subclass)
                || Collection.class.isAssignableFrom(subclass)) {
                // need to assert type compatibility...
                if (!baseType.getRawClass().isAssignableFrom(subclass)) {
                    throw new IllegalArgumentException(""Class ""+subclass.getClass().getName()+"" not subtype of ""+baseType);
                }
                // this _should_ work, right?
                JavaType subtype = _fromClass(null, subclass, TypeBindings.emptyBindings());
                // one more thing: handlers to copy?
                Object h = baseType.getValueHandler();
                if (h != null) {
                    subtype = subtype.withValueHandler(h);
                }
                h = baseType.getTypeHandler();
                if (h != null) {
                    subtype = subtype.withTypeHandler(h);
                }
                return subtype;
            }
        }
        // But there is the need for special case for arrays too, it seems
        if (baseType instanceof ArrayType) {
            if (subclass.isArray()) {
                // actually see if it might be a no-op first:
                ArrayType at = (ArrayType) baseType;
                Class<?> rawComp = subclass.getComponentType();
                if (at.getContentType().getRawClass() == rawComp) {
                    return baseType;
                }
                JavaType componentType = _fromAny(null, rawComp, null);
                return ((ArrayType) baseType).withComponentType(componentType);
            }
        }

        // otherwise regular narrowing should work just fine
        return baseType.narrowBy(subclass);
        */
}","public void test3739() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
    Class<Properties> class0 = Properties.class;
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.util.Properties not subtype of [simple type, class java.lang.Class]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",""
"public final boolean isJavaLangObject() {
    return _class == Object.class;
}","public void test3840() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    Class<String> class0 = String.class;
    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
    assertFalse(javaType0.isJavaLangObject());
}","/**
 *  Convenience method, short-hand for
 * <code>
 *    getRawClass() == Object.class
 * </code>
 *  and used to figure if we basically have ""untyped"" type object.
 *
 *  @since 2.5
 */"
"@Override
public boolean isAbstract() {
    return Modifier.isAbstract(_class.getModifiers());
}","public void test3841() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    Class<String> class0 = String.class;
    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
    assertFalse(javaType0.isAbstract());
}",""
"public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass) {
    // simple optimization to avoid costly introspection if type-erased type does NOT differ
    final Class<?> rawBase = baseType.getRawClass();
    if (rawBase == superClass) {
        return baseType;
    }
    JavaType superType = baseType.findSuperType(superClass);
    if (superType == null) {
        // Most likely, caller did not verify sub/super-type relationship
        if (!superClass.isAssignableFrom(rawBase)) {
            throw new IllegalArgumentException(String.format(""Class %s not a super-type of %s"", superClass.getName(), baseType));
        }
        // 01-Nov-2015, tatu: Should never happen, but ch
        throw new IllegalArgumentException(String.format(""Internal error: class %s not included as super-type for %s"", superClass.getName(), baseType));
    }
    return superType;
}","public void test3942() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    Class<Object> class0 = Object.class;
    // Undeclared exception!
    try {
        typeFactory0.constructGeneralizedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Internal error: class java.lang.Object not included as super-type for [simple type, class java.lang.String]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}","/**
 * Method similar to {@link #constructSpecializedType}, but that creates a
 * less-specific type of given type. Usually this is as simple as simply
 * finding super-type with type erasure of <code>superClass</code>, but
 * there may be need for some additional work-arounds.
 *
 * @param superClass
 *
 * @since 2.7
 */"
"@Override
public abstract int containedTypeCount();","public void test4043() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayType> class0 = ArrayType.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    JavaType javaType1 = typeFactory0.constructGeneralizedType(javaType0, class0);
    assertEquals(0, javaType1.containedTypeCount());
}",""
"@Override
public abstract int containedTypeCount();","public void test4144() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Integer> class0 = Integer.class;
    Stack<JavaType> stack0 = new Stack<JavaType>();
    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
    Class<SimpleModule> class1 = SimpleModule.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
    CollectionLikeType collectionLikeType0 = new CollectionLikeType(resolvedRecursiveType0, resolvedRecursiveType0);
    JavaType[] javaTypeArray0 = new JavaType[0];
    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
    JavaType javaType0 = typeFactory0.constructGeneralizedType(referenceType0, class1);
    assertEquals(0, javaType0.containedTypeCount());
}",""
"public JavaType constructGeneralizedType(JavaType baseType, Class<?> superClass) {
    // simple optimization to avoid costly introspection if type-erased type does NOT differ
    final Class<?> rawBase = baseType.getRawClass();
    if (rawBase == superClass) {
        return baseType;
    }
    JavaType superType = baseType.findSuperType(superClass);
    if (superType == null) {
        // Most likely, caller did not verify sub/super-type relationship
        if (!superClass.isAssignableFrom(rawBase)) {
            throw new IllegalArgumentException(String.format(""Class %s not a super-type of %s"", superClass.getName(), baseType));
        }
        // 01-Nov-2015, tatu: Should never happen, but ch
        throw new IllegalArgumentException(String.format(""Internal error: class %s not included as super-type for %s"", superClass.getName(), baseType));
    }
    return superType;
}","public void test4245() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    Class<SerializationFeature> class0 = SerializationFeature.class;
    // Undeclared exception!
    try {
        typeFactory0.constructGeneralizedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class com.fasterxml.jackson.databind.SerializationFeature not a super-type of [simple type, class java.lang.String]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}","/**
 * Method similar to {@link #constructSpecializedType}, but that creates a
 * less-specific type of given type. Usually this is as simple as simply
 * finding super-type with type erasure of <code>superClass</code>, but
 * there may be need for some additional work-arounds.
 *
 * @param superClass
 *
 * @since 2.7
 */"
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test4346() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);
    assertFalse(javaType0.isFinal());
}",""
"public JavaType moreSpecificType(JavaType type1, JavaType type2) {
    if (type1 == null) {
        return type2;
    }
    if (type2 == null) {
        return type1;
    }
    Class<?> raw1 = type1.getRawClass();
    Class<?> raw2 = type2.getRawClass();
    if (raw1 == raw2) {
        return type1;
    }
    // TODO: maybe try sub-classing, to retain generic types?
    if (raw1.isAssignableFrom(raw2)) {
        return type2;
    }
    return type1;
}","public void test4447() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    assertNull(javaType0);
}","/**
 * Method that can be called to figure out more specific of two
 * types (if they are related; that is, one implements or extends the
 * other); or if not related, return the primary type.
 *
 * @param type1 Primary type to consider
 * @param type2 Secondary type to consider
 *
 * @since 2.2
 */"
"@Override
public final boolean isEnumType() {
    return _class.isEnum();
}","public void test4548() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SimpleType> class0 = SimpleType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JavaType javaType0 = typeFactory0.moreSpecificType(resolvedRecursiveType0, (JavaType) null);
    assertFalse(javaType0.isEnumType());
}",""
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test4649() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    SimpleType simpleType1 = TypeFactory.CORE_TYPE_CLASS;
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType1);
    assertTrue(javaType0.isFinal());
}",""
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test4750() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    JavaType javaType0 = typeFactory0._unknownType();
    JavaType javaType1 = typeFactory0.moreSpecificType(simpleType0, javaType0);
    assertTrue(javaType1.isFinal());
}",""
"@Override
public boolean isAbstract() {
    return Modifier.isAbstract(_class.getModifiers());
}","public void test4751() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    JavaType javaType0 = typeFactory0._unknownType();
    JavaType javaType1 = typeFactory0.moreSpecificType(simpleType0, javaType0);
    assertFalse(javaType0.isAbstract());
}",""
"@Override
public final boolean isInterface() {
    return _class.isInterface();
}","public void test4852() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Properties> class0 = Properties.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
    assertFalse(collectionLikeType0.isInterface());
}",""
"@Override
public final boolean isEnumType() {
    return _class.isEnum();
}","public void test5256() throws Throwable {
    TypeFactory.defaultInstance();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
    PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
    ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
    PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
    ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
    JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
    ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
    objectMapper3.getPropertyNamingStrategy();
    AtomicReference<Module> atomicReference0 = new AtomicReference<Module>();
    objectMapper2.readerForUpdating(defaultDeserializationContext_Impl0);
    Class<DataInputStream> class0 = DataInputStream.class;
    ClassStack classStack0 = new ClassStack(class0);
    Class<MapLikeType> class1 = MapLikeType.class;
    ClassStack classStack1 = classStack0.child(class1);
    ClassStack classStack2 = classStack1.find(class0);
    ClassStack classStack3 = classStack2._parent;
    Class<SimpleModule> class2 = SimpleModule.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    LinkedHashSet<JsonSerializer<ReferenceType>> linkedHashSet0 = new LinkedHashSet<JsonSerializer<ReferenceType>>();
    ArrayType arrayType0 = new ArrayType(simpleType0, typeBindings0, classStack0, linkedHashSet0, (Object) null, false);
    ArrayType arrayType1 = arrayType0.withTypeHandler(classStack2);
    ArrayType arrayType2 = arrayType0.withValueHandler(arrayType1);
    assertFalse(arrayType2.isEnumType());
}",""
"@Override
public abstract int containedTypeCount();","public void test5458() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0);
    TypeBindings typeBindings0 = TypeBindings.create(class0, javaType0);
    JavaType[] javaTypeArray0 = new JavaType[5];
    JavaType javaType1 = typeFactory0._constructSimple(class0, typeBindings0, javaType0, javaTypeArray0);
    assertEquals(1, javaType1.containedTypeCount());
}",""
"@Override
public boolean isAbstract() {
    return Modifier.isAbstract(_class.getModifiers());
}","public void test5559() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<String> class0 = String.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertFalse(javaType0.isAbstract());
}",""
"public JavaType uncheckedSimpleType(Class<?> cls) {
    // 18-Oct-2015, tatu: Not sure how much problem missing super-type info is here
    return _constructSimple(cls, EMPTY_BINDINGS, null, null);
}","public void test5560() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<String> class0 = String.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertNotNull(javaType0);
}","/**
 *  Method that will force construction of a simple type, without trying to
 *  check for more specialized types.
 * <p>
 *  NOTE: no type modifiers are called on type either, so calling this method
 *  should only be used if caller really knows what it's doing...
 */"
"@Override
public final boolean isFinal() {
    return Modifier.isFinal(_class.getModifiers());
}","public void test5561() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<String> class0 = String.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertTrue(javaType0.isFinal());
}",""
"@Override
public final boolean isPrimitive() {
    return _class.isPrimitive();
}","public void test5662() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Long> class0 = Long.TYPE;
    JavaType javaType0 = typeFactory0.constructType((Type) class0);
    assertTrue(javaType0.isPrimitive());
}",""
"protected JavaType _fromParamType(ClassStack context, ParameterizedType ptype, TypeBindings parentBindings) {
    // Assumption here is we'll always get Class, not one of other Types
    Class<?> rawType = (Class<?>) ptype.getRawType();
    // 29-Oct-2015, tatu: For performance reasons, let's streamline handling of
    //   couple of not-so-useful parametric types
    if (rawType == CLS_ENUM) {
        return CORE_TYPE_ENUM;
    }
    if (rawType == CLS_COMPARABLE) {
        return CORE_TYPE_COMPARABLE;
    }
    if (rawType == CLS_CLASS) {
        return CORE_TYPE_CLASS;
    }
    // First: what is the actual base type? One odd thing is that 'getRawType'
    // returns Type, not Class<?> as one might expect. But let's assume it is
    // always of type Class: if not, need to add more code to resolve it to Class.
    Type[] args = ptype.getActualTypeArguments();
    int paramCount = (args == null) ? 0 : args.length;
    JavaType[] pt;
    TypeBindings newBindings;
    if (paramCount == 0) {
        newBindings = EMPTY_BINDINGS;
    } else {
        pt = new JavaType[paramCount];
        for (int i = 0; i < paramCount; ++i) {
            pt[i] = _fromAny(context, args[i], parentBindings);
        }
        newBindings = TypeBindings.create(rawType, pt);
    }
    return _fromClass(context, rawType, newBindings);
}","public void test5864() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
    doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
    doReturn((Type) null).when(parameterizedType0).getRawType();
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    // Undeclared exception!
    try {
        typeFactory0._fromParamType((ClassStack) null, parameterizedType0, typeBindings0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}","/**
 * This method deals with parameterized types, that is,
 * first class generic classes.
 */"
