project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test022,"public void test022() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Integer> class0 = Integer.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructSimpleType(class0, class0, javaTypeArray0);
    assertTrue(javaType0.isFinal());
}",0,assertTrue(javaType0.isFinal())
project,0,test033,"public void test033() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashSet> class0 = HashSet.class;
    CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
    assertEquals(1, collectionType0.containedTypeCount());
}",0,"assertEquals(1, collectionType0.containedTypeCount())"
project,0,test044,"public void test044() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[0];
    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
    Class<Properties> class0 = Properties.class;
    ArrayType arrayType0 = typeFactory1.constructArrayType(class0);
    assertTrue(arrayType0.isFinal());
}",0,
project,0,test055,"public void test055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    AtomicReference<Module> atomicReference0 = new AtomicReference<Module>();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(atomicReference0);
    assertNotNull(objectReader0);
}",0,
project,0,test066,"public void test066() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<CollectionType> class0 = CollectionType.class;
    Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 0);
    JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, classArray0);
    assertFalse(javaType0.isEnumType());
}",0,assertTrue(javaType0.isEnumType())
project,0,test077,"public void test077() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<MapType> class0 = MapType.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertNotNull(javaType0);
}",1,
project,0,test078,"public void test078() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<MapType> class0 = MapType.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
    assertSame(javaType1, javaType0);
}",0,
project,0,test089,"public void test089() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
    assertFalse(mapLikeType0.isAbstract());
}",0,
project,0,test0910,"public void test0910() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    JavaType javaType0 = typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    assertFalse(javaType0.isMapLikeType());
}",0,assertTrue(javaType0.isMapLikeType())
project,0,test1011,"public void test1011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer();
    // Undeclared exception!
    try {
        objectMapper0.writeValueAsBytes(objectWriter0);
        fail(""Expecting exception: NoClassDefFoundError"");
    } catch (NoClassDefFoundError e) {
        //
        // com/fasterxml/jackson/databind/JsonMappingException$Reference
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.BeanSerializerBase"", e);
    }
}",0,
project,0,test1112,"public void test1112() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    typeFactory0.clearCache();
}",0,
project,0,test1213,"public void test1213() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    assertTrue(collectionLikeType0.isConcrete());
}",0,assertFalse(collectionLikeType0.isConcrete())
project,0,test1314,"public void test1314() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    assertEquals(1, collectionType0.containedTypeCount());
}",0,
project,0,test1415,"public void test1415() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
    assertEquals(1, collectionLikeType0.containedTypeCount());
}",0,"assertEquals(0, collectionLikeType0.containedTypeCount())"
project,0,test1516,"public void test1516() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    // Undeclared exception!
    try {
        typeFactory0.constructType((TypeReference<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test1617,"public void test1617() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Properties> class0 = Properties.class;
    // Undeclared exception!
    try {
        typeFactory0.constructRawMapType(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not create TypeBindings for class java.util.Properties with 2 type parameters: class expects 0
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeBindings"", e);
    }
}",0,
project,0,test1718,"public void test1718() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<TextNode> class0 = TextNode.class;
    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
    assertFalse(mapLikeType0.isJavaLangObject());
}",0,assertTrue(mapLikeType0.isJavaLangObject())
project,0,test1819,"public void test1819() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = typeFactory0.constructFromCanonical(""com.fasterxml.jackson.databind.cfg.BaseSettings"");
    assertFalse(javaType0.isContainerType());
}",0,assertFalse(javaType0.isContainerType())
project,0,test1920,"public void test1920() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
    TypeFactory typeFactory1 = typeFactory0.withClassLoader(classLoader0);
    try {
        typeFactory1.findClass(""JSON"");
        fail(""Expecting exception: ClassNotFoundException"");
    } catch (ClassNotFoundException e) {
        //
        // JSON
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test2021,"public void test2021() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<MapLikeType> class0 = MapLikeType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class0, typeBindings0);
    assertEquals(0, javaTypeArray0.length);
}",0,
project,0,test2122,"public void test2122() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    Class<SimpleModule> class0 = SimpleModule.class;
    JavaType javaType0 = typeFactory0.constructReferenceType(class0, simpleType0);
    assertFalse(javaType0.isInterface());
}",0,assertFalse(javaType0.isInterface())
project,0,test2223,"public void test2223() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    // Undeclared exception!
    try {
        typeFactory0.constructArrayType((JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ArrayType"", e);
    }
}",0,
project,0,test2324,"public void test2324() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
    assertNotSame(typeFactory0, typeFactory1);
}",0,
project,0,test2425,"public void test2425() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    TypeModifier typeModifier1 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier1);
    assertNotSame(typeFactory2, typeFactory1);
}",0,
project,0,test3334,"public void test3334() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<?> class0 = typeFactory0._findPrimitive(""byte"");
    assertNotNull(class0);
}",0,
project,0,test3638,"public void test3638() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Properties> class0 = Properties.class;
    JavaType javaType0 = TypeFactory.unknownType();
    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
    assertFalse(javaType1.isAbstract());
}",0,assertFalse(javaType1.isAbstract())
project,0,test3739,"public void test3739() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
    Class<Properties> class0 = Properties.class;
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.util.Properties not subtype of [simple type, class java.lang.Class]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test3840,"public void test3840() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    Class<String> class0 = String.class;
    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
    assertFalse(javaType0.isJavaLangObject());
}",0,
project,0,test3841,"public void test3841() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    Class<String> class0 = String.class;
    JavaType javaType0 = typeFactory0.constructSpecializedType(simpleType0, class0);
    assertFalse(javaType0.isAbstract());
}",0,assertTrue(javaType0.isAbstract())
project,0,test3942,"public void test3942() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    Class<Object> class0 = Object.class;
    // Undeclared exception!
    try {
        typeFactory0.constructGeneralizedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Internal error: class java.lang.Object not included as super-type for [simple type, class java.lang.String]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test4043,"public void test4043() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayType> class0 = ArrayType.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    JavaType javaType1 = typeFactory0.constructGeneralizedType(javaType0, class0);
    assertEquals(0, javaType1.containedTypeCount());
}",0,"assertEquals(0, javaType1.containedTypeCount())"
project,0,test4144,"public void test4144() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Integer> class0 = Integer.class;
    Stack<JavaType> stack0 = new Stack<JavaType>();
    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) stack0);
    Class<SimpleModule> class1 = SimpleModule.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
    CollectionLikeType collectionLikeType0 = new CollectionLikeType(resolvedRecursiveType0, resolvedRecursiveType0);
    JavaType[] javaTypeArray0 = new JavaType[0];
    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) collectionLikeType0, javaTypeArray0, (JavaType) collectionLikeType0);
    JavaType javaType0 = typeFactory0.constructGeneralizedType(referenceType0, class1);
    assertEquals(0, javaType0.containedTypeCount());
}",0,"assertEquals(1, javaType0.containedTypeCount())"
project,0,test4245,"public void test4245() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    Class<SerializationFeature> class0 = SerializationFeature.class;
    // Undeclared exception!
    try {
        typeFactory0.constructGeneralizedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class com.fasterxml.jackson.databind.SerializationFeature not a super-type of [simple type, class java.lang.String]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test4346,"public void test4346() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);
    assertFalse(javaType0.isFinal());
}",0,assertTrue(javaType0.isFinal())
project,0,test4447,"public void test4447() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    assertNull(javaType0);
}",0,
project,0,test4548,"public void test4548() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<SimpleType> class0 = SimpleType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JavaType javaType0 = typeFactory0.moreSpecificType(resolvedRecursiveType0, (JavaType) null);
    assertFalse(javaType0.isEnumType());
}",0,assertTrue(javaType0.isEnumType())
project,0,test4649,"public void test4649() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
    SimpleType simpleType1 = TypeFactory.CORE_TYPE_CLASS;
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType1);
    assertTrue(javaType0.isFinal());
}",0,assertTrue(javaType0.isFinal())
project,0,test4750,"public void test4750() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    JavaType javaType0 = typeFactory0._unknownType();
    JavaType javaType1 = typeFactory0.moreSpecificType(simpleType0, javaType0);
    assertTrue(javaType1.isFinal());
}",0,assertTrue(javaType1.isFinal())
project,0,test4751,"public void test4751() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    JavaType javaType0 = typeFactory0._unknownType();
    JavaType javaType1 = typeFactory0.moreSpecificType(simpleType0, javaType0);
    assertFalse(javaType0.isAbstract());
}",0,assertFalse(javaType0.isAbstract())
project,0,test4852,"public void test4852() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Properties> class0 = Properties.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
    assertFalse(collectionLikeType0.isInterface());
}",0,assertTrue(collectionLikeType0.isInterface())
project,0,test5256,"public void test5256() throws Throwable {
    TypeFactory.defaultInstance();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
    PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
    ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy0);
    PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
    ObjectMapper objectMapper2 = objectMapper1.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
    JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature1;
    ObjectMapper objectMapper3 = objectMapper2.enable(jsonGenerator_FeatureArray0);
    objectMapper3.getPropertyNamingStrategy();
    AtomicReference<Module> atomicReference0 = new AtomicReference<Module>();
    objectMapper2.readerForUpdating(defaultDeserializationContext_Impl0);
    Class<DataInputStream> class0 = DataInputStream.class;
    ClassStack classStack0 = new ClassStack(class0);
    Class<MapLikeType> class1 = MapLikeType.class;
    ClassStack classStack1 = classStack0.child(class1);
    ClassStack classStack2 = classStack1.find(class0);
    ClassStack classStack3 = classStack2._parent;
    Class<SimpleModule> class2 = SimpleModule.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    LinkedHashSet<JsonSerializer<ReferenceType>> linkedHashSet0 = new LinkedHashSet<JsonSerializer<ReferenceType>>();
    ArrayType arrayType0 = new ArrayType(simpleType0, typeBindings0, classStack0, linkedHashSet0, (Object) null, false);
    ArrayType arrayType1 = arrayType0.withTypeHandler(classStack2);
    ArrayType arrayType2 = arrayType0.withValueHandler(arrayType1);
    assertFalse(arrayType2.isEnumType());
}",0,assertTrue(arrayType2.isEnumType())
project,0,test5458,"public void test5458() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0);
    TypeBindings typeBindings0 = TypeBindings.create(class0, javaType0);
    JavaType[] javaTypeArray0 = new JavaType[5];
    JavaType javaType1 = typeFactory0._constructSimple(class0, typeBindings0, javaType0, javaTypeArray0);
    assertEquals(1, javaType1.containedTypeCount());
}",0,
project,0,test5559,"public void test5559() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<String> class0 = String.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertFalse(javaType0.isAbstract());
}",0,assertTrue(javaType0.isAbstract())
project,0,test5560,"public void test5560() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<String> class0 = String.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertNotNull(javaType0);
}",0,
project,0,test5561,"public void test5561() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<String> class0 = String.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertTrue(javaType0.isFinal());
}",0,assertTrue(javaType0.isFinal())
project,0,test5662,"public void test5662() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Long> class0 = Long.TYPE;
    JavaType javaType0 = typeFactory0.constructType((Type) class0);
    assertTrue(javaType0.isPrimitive());
}",0,assertTrue(javaType0.isPrimitive())
project,0,test5864,"public void test5864() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer());
    doReturn((Type[]) null).when(parameterizedType0).getActualTypeArguments();
    doReturn((Type) null).when(parameterizedType0).getRawType();
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    // Undeclared exception!
    try {
        typeFactory0._fromParamType((ClassStack) null, parameterizedType0, typeBindings0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
