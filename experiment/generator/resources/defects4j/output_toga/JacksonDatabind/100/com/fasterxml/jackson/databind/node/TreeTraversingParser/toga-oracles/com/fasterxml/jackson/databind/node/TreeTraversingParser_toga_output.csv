project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test022,"public void test022() throws Throwable {
    NullNode nullNode0 = new NullNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    try {
        treeTraversingParser0.getFloatValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    NullNode nullNode0 = NullNode.getInstance();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    try {
        treeTraversingParser0.getNumberValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    NullNode nullNode0 = NullNode.instance;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    boolean boolean0 = treeTraversingParser0.hasTextCharacters();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test066,"public void test066() throws Throwable {
    NullNode nullNode0 = new NullNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    // Undeclared exception!
    try {
        treeTraversingParser0.getTextLength();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.node.TreeTraversingParser"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    NullNode nullNode0 = new NullNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    int int0 = treeTraversingParser0.getTextOffset();
    assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
project,0,test088,"public void test088() throws Throwable {
    NullNode nullNode0 = NullNode.instance;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    boolean boolean0 = treeTraversingParser0.isClosed();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test099,"public void test099() throws Throwable {
    NullNode nullNode0 = NullNode.instance;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    try {
        treeTraversingParser0.getBigIntegerValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    NullNode nullNode0 = new NullNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    // Undeclared exception!
    try {
        treeTraversingParser0._handleEOF();
        fail(""Expecting exception: RuntimeException"");
    } catch (RuntimeException e) {
        //
        // Internal error: this code path should never get executed
        //
        verifyException(""com.fasterxml.jackson.core.util.VersionUtil"", e);
    }
}",1,
project,0,test1313,"public void test1313() throws Throwable {
    NullNode nullNode0 = NullNode.getInstance();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    try {
        treeTraversingParser0.getIntValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    NullNode nullNode0 = NullNode.instance;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    // Undeclared exception!
    try {
        treeTraversingParser0.getTextCharacters();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.node.TreeTraversingParser"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    NullNode nullNode0 = new NullNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    try {
        treeTraversingParser0.getDecimalValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    NullNode nullNode0 = NullNode.instance;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    try {
        treeTraversingParser0.getLongValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    NullNode nullNode0 = NullNode.getInstance();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    try {
        treeTraversingParser0.getDoubleValue();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (VALUE_NULL) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    NullNode nullNode0 = NullNode.instance;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    treeTraversingParser0.close();
    treeTraversingParser0.close();
    assertTrue(treeTraversingParser0.isClosed());
}",0,assertTrue(treeTraversingParser0.isClosed())
project,0,test2020,"public void test2020() throws Throwable {
    MissingNode missingNode0 = new MissingNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(missingNode0);
    JsonToken jsonToken0 = JsonToken.FIELD_NAME;
    treeTraversingParser0._nextToken = jsonToken0;
    treeTraversingParser0.nextToken();
    String string0 = treeTraversingParser0.getText();
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test2222,"public void test2222() throws Throwable {
    NullNode nullNode0 = new NullNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    treeTraversingParser0.close();
    treeTraversingParser0.nextValue();
    assertTrue(treeTraversingParser0.isClosed());
}",0,assertTrue(treeTraversingParser0.isClosed())
project,0,test2323,"public void test2323() throws Throwable {
    NullNode nullNode0 = new NullNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    treeTraversingParser0.nextValue();
    treeTraversingParser0.nextToken();
    try {
        treeTraversingParser0.getNumberType();
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Current token (null) not numeric, cannot use numeric value accessors
        //  at [Source: UNKNOWN; line: -1, column: -1]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    NullNode nullNode0 = new NullNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    String string0 = treeTraversingParser0.getCurrentName();
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test2828,"public void test2828() throws Throwable {
    NullNode nullNode0 = NullNode.getInstance();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    treeTraversingParser0.close();
    treeTraversingParser0.getCurrentName();
    assertTrue(treeTraversingParser0.isClosed());
}",0,assertTrue(treeTraversingParser0.isClosed())
project,0,test2929,"public void test2929() throws Throwable {
    NullNode nullNode0 = new NullNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    treeTraversingParser0.close();
    treeTraversingParser0.overrideCurrentName("""");
    assertTrue(treeTraversingParser0.isClosed());
}",0,assertTrue(treeTraversingParser0.isClosed())
project,0,test3131,"public void test3131() throws Throwable {
    NullNode nullNode0 = NullNode.getInstance();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    treeTraversingParser0.close();
    String string0 = treeTraversingParser0.getText();
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test3737,"public void test3737() throws Throwable {
    DecimalNode decimalNode0 = DecimalNode.ZERO;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(decimalNode0);
    JsonParser.NumberType jsonParser_NumberType0 = treeTraversingParser0.getNumberType();
    assertEquals(JsonParser.NumberType.BIG_DECIMAL, jsonParser_NumberType0);
}",0,assertNotNull(jsonParser_NumberType0)
project,0,test3838,"public void test3838() throws Throwable {
    NullNode nullNode0 = NullNode.instance;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    treeTraversingParser0.close();
    Object object0 = treeTraversingParser0.getEmbeddedObject();
    assertNull(object0);
}",1,
project,0,test4040,"public void test4040() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ArrayList<JsonNode> arrayList0 = new ArrayList<JsonNode>();
    ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0, arrayList0);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(arrayNode0);
    Object object0 = treeTraversingParser0.getEmbeddedObject();
    assertNull(object0);
}",1,
project,0,test4141,"public void test4141() throws Throwable {
    NullNode nullNode0 = new NullNode();
    POJONode pOJONode0 = new POJONode(nullNode0);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(pOJONode0);
    NullNode nullNode1 = (NullNode) treeTraversingParser0.getEmbeddedObject();
    assertEquals(0, nullNode1.size());
}",0,
project,0,test4242,"public void test4242() throws Throwable {
    NullNode nullNode0 = NullNode.instance;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    Object object0 = treeTraversingParser0.getEmbeddedObject();
    assertNull(object0);
}",1,
project,0,test4343,"public void test4343() throws Throwable {
    NullNode nullNode0 = new NullNode();
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    treeTraversingParser0.close();
    boolean boolean0 = treeTraversingParser0.isNaN();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4444,"public void test4444() throws Throwable {
    ShortNode shortNode0 = ShortNode.valueOf((short) 5);
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(shortNode0);
    boolean boolean0 = treeTraversingParser0.isNaN();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test4545,"public void test4545() throws Throwable {
    NullNode nullNode0 = NullNode.instance;
    TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(nullNode0);
    boolean boolean0 = treeTraversingParser0.isNaN();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
