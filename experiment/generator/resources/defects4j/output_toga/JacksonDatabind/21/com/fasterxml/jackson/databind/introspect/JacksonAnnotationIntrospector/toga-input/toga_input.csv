focal_method,test_prefix,docstring
"public boolean isTypeIdVisible() {
    return _typeIdVisible;
}","public void test000() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructNoTypeResolverBuilder();
    assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
}",""
"public boolean isTypeIdVisible() {
    return _typeIdVisible;
}","public void test011() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructStdTypeResolverBuilder();
    assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
}",""
"public boolean hasPrefetchedSerializer() {
    return _prefetch.hasSerializer();
}","public void test022() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<JsonDeserializer> class0 = JsonDeserializer.class;
    ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"@Deprecated
@Override
public Object findFilterId(AnnotatedClass ac) {
    return _findFilterId(ac);
}","public void test033() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.findFilterId((AnnotatedClass) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}","/**
 * @deprecated (since 2.3) Use {@link #findFilterId(Annotated)} instead
 */"
"@Override
@Deprecated
public Boolean findSerializationSortAlphabetically(AnnotatedClass ac) {
    return _findSortAlpha(ac);
}","public void test055() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Annotation> class0 = Annotation.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    Boolean boolean0 = jacksonAnnotationIntrospector0.findSerializationSortAlphabetically(annotatedClass0);
    assertNull(boolean0);
}",""
"/*
    /**********************************************************
    /* General annotations
    /**********************************************************
     */
/**
 * Since 2.6, we have supported use of {@link JsonProperty} for specifying
 * explicit serialized name
 */
// 11-Jun-2015, tatu: As per [databind#677], need to allow explicit naming.
//   Unfortunately can not quite use standard AnnotatedClass here (due to various
//   reasons, including odd representation JVM uses); has to do for now
// We know that values are actually static fields with matching name so:
// no such field, or access; neither which we can do much about
/*
    /**********************************************************
    /* General class annotations
    /**********************************************************
     */
@Override
public PropertyName findRootName(AnnotatedClass ac) {
    JsonRootName ann = _findAnnotation(ac, JsonRootName.class);
    if (ann == null) {
        return null;
    }
    String ns = ann.namespace();
    if (ns != null && ns.length() == 0) {
        ns = null;
    }
    return PropertyName.construct(ann.value(), ns);
}","public void test066() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Integer> class0 = Integer.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    PropertyName propertyName0 = jacksonAnnotationIntrospector0.findRootName(annotatedClass0);
    assertNull(propertyName0);
}",""
"@Override
// since 2.6, remove from 2.7 or later
@Deprecated
public String[] findPropertiesToIgnore(Annotated ac) {
    JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);
    return (ignore == null) ? null : ignore.value();
}","public void test077() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    String[] stringArray0 = jacksonAnnotationIntrospector0.findPropertiesToIgnore((Annotated) annotatedConstructor0);
    assertNull(stringArray0);
}",""
"@Override
public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType containerType) {
    /* First: let's ensure property is a container type: caller should have
         * verified but just to be sure
         */
    if (!containerType.isContainerType()) {
        throw new IllegalArgumentException(""Must call method with a container type (got "" + containerType + "")"");
    }
    return _findTypeResolver(config, am, containerType);
}","public void test099() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.findPropertyContentTypeResolver((MapperConfig<?>) null, (AnnotatedMember) null, simpleType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must call method with a container type (got [simple type, class com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition])
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", e);
    }
}",""
"@Override
public List<NamedType> findSubtypes(Annotated a) {
    JsonSubTypes t = _findAnnotation(a, JsonSubTypes.class);
    if (t == null)
        return null;
    JsonSubTypes.Type[] types = t.value();
    ArrayList<NamedType> result = new ArrayList<NamedType>(types.length);
    for (JsonSubTypes.Type type : types) {
        result.add(new NamedType(type.value(), type.name()));
    }
    return result;
}","public void test1010() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    List<NamedType> list0 = jacksonAnnotationIntrospector0.findSubtypes(annotatedConstructor0);
    assertNull(list0);
}",""
"@Override
public String findTypeName(AnnotatedClass ac) {
    JsonTypeName tn = _findAnnotation(ac, JsonTypeName.class);
    return (tn == null) ? null : tn.value();
}","public void test1111() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    String string0 = jacksonAnnotationIntrospector0.findTypeName(annotatedClass0);
    assertNull(string0);
}",""
"@Override
public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {
    JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);
    if (ref != null) {
        objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());
    }
    return objectIdInfo;
}","public void test1212() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    ObjectIdInfo objectIdInfo0 = jacksonAnnotationIntrospector0.findObjectReferenceInfo(annotatedConstructor0, (ObjectIdInfo) null);
    assertNull(objectIdInfo0);
}",""
"@Override
public Object findKeySerializer(Annotated a) {
    JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);
    if (ann != null) {
        @SuppressWarnings(""rawtypes"")
        Class<? extends JsonSerializer> serClass = ann.keyUsing();
        if (serClass != JsonSerializer.None.class) {
            return serClass;
        }
    }
    return null;
}","public void test1313() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findKeySerializer(annotatedConstructor0);
    assertNull(object0);
}",""
"@Override
public Object findContentSerializer(Annotated a) {
    JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);
    if (ann != null) {
        @SuppressWarnings(""rawtypes"")
        Class<? extends JsonSerializer> serClass = ann.contentUsing();
        if (serClass != JsonSerializer.None.class) {
            return serClass;
        }
    }
    return null;
}","public void test1414() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findContentSerializer(annotatedConstructor0);
    assertNull(object0);
}",""
"public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue) {
    return defValue;
}","public void test1515() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
    JsonInclude.Include jsonInclude_Include1 = jacksonAnnotationIntrospector0.findSerializationInclusionForContent(annotatedConstructor0, jsonInclude_Include0);
    assertSame(jsonInclude_Include0, jsonInclude_Include1);
}","/**
 * Method for checking whether content (entries) of a {@link java.util.Map} property
 * are to be included during serialization or not.
 *
 * @since 2.5
 */"
"@Override
public Object findSerializationContentConverter(AnnotatedMember a) {
    JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);
    return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);
}","public void test1616() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findSerializationContentConverter(annotatedConstructor0);
    assertNull(object0);
}",""
"protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac) {
    PropertyMetadata metadata = prop.required() ? PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;
    PropertyName propName = _propertyName(prop.name(), prop.namespace());
    JavaType type = config.constructType(prop.type());
    // now, then, we need a placeholder for member (no real Field/Method):
    AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(), propName.getSimpleName(), type.getRawClass());
    // and with that and property definition
    SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, prop.include());
    Class<?> implClass = prop.value();
    HandlerInstantiator hi = config.getHandlerInstantiator();
    VirtualBeanPropertyWriter bpw = (hi == null) ? null : hi.virtualPropertyWriterInstance(config, implClass);
    if (bpw == null) {
        bpw = (VirtualBeanPropertyWriter) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());
    }
    // one more thing: give it necessary contextual information
    return bpw.withConfig(config, ac, propDef, type);
}","public void test1919() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Annotation> class0 = Annotation.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(jsonAppend_Prop0).name();
    doReturn((String) null).when(jsonAppend_Prop0).namespace();
    doReturn(false).when(jsonAppend_Prop0).required();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, annotatedClass0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac) {
    PropertyMetadata metadata = prop.required() ? PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;
    PropertyName propName = _propertyName(prop.name(), prop.namespace());
    JavaType type = config.constructType(prop.type());
    // now, then, we need a placeholder for member (no real Field/Method):
    AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(), propName.getSimpleName(), type.getRawClass());
    // and with that and property definition
    SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, prop.include());
    Class<?> implClass = prop.value();
    HandlerInstantiator hi = config.getHandlerInstantiator();
    VirtualBeanPropertyWriter bpw = (hi == null) ? null : hi.virtualPropertyWriterInstance(config, implClass);
    if (bpw == null) {
        bpw = (VirtualBeanPropertyWriter) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());
    }
    // one more thing: give it necessary contextual information
    return bpw.withConfig(config, ac, propDef, type);
}","public void test2020() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Annotation> class0 = Annotation.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(jsonAppend_Prop0).name();
    doReturn((String) null).when(jsonAppend_Prop0).namespace();
    doReturn(true).when(jsonAppend_Prop0).required();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, annotatedClass0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"@Override
public Object findKeyDeserializer(Annotated a) {
    JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);
    if (ann != null) {
        Class<? extends KeyDeserializer> deserClass = ann.keyUsing();
        if (deserClass != KeyDeserializer.None.class) {
            return deserClass;
        }
    }
    return null;
}","public void test2121() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findKeyDeserializer(annotatedConstructor0);
    assertNull(object0);
}",""
"@Override
public Object findContentDeserializer(Annotated a) {
    JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);
    if (ann != null) {
        @SuppressWarnings(""rawtypes"")
        Class<? extends JsonDeserializer> deserClass = ann.contentUsing();
        if (deserClass != JsonDeserializer.None.class) {
            return deserClass;
        }
    }
    return null;
}","public void test2222() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findContentDeserializer(annotatedConstructor0);
    assertNull(object0);
}",""
"@Override
public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {
    JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);
    return (ann == null) ? null : _classIfExplicit(ann.keyAs());
}","public void test2323() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationKeyType(annotatedConstructor0, (JavaType) null);
    assertNull(class0);
}",""
"@Override
public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType) {
    JsonDeserialize ann = _findAnnotation(am, JsonDeserialize.class);
    return (ann == null) ? null : _classIfExplicit(ann.contentAs());
}","public void test2424() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationContentType(annotatedConstructor0, (JavaType) null);
    assertNull(class0);
}",""
"@Override
public Object findDeserializationContentConverter(AnnotatedMember a) {
    JsonDeserialize ann = _findAnnotation(a, JsonDeserialize.class);
    return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);
}","public void test2525() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findDeserializationContentConverter(annotatedConstructor0);
    assertNull(object0);
}",""
"@Override
public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {
    JsonPOJOBuilder ann = _findAnnotation(ac, JsonPOJOBuilder.class);
    return (ann == null) ? null : new JsonPOJOBuilder.Value(ann);
}","public void test2626() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = jacksonAnnotationIntrospector0.findPOJOBuilderConfig(annotatedClass0);
    assertNull(jsonPOJOBuilder_Value0);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test2727() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Object> class0 = Object.class;
    Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit((Class<?>) null, class0);
    assertNull(class1);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test2828() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Integer> class0 = Integer.TYPE;
    Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class0);
    assertNull(class1);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test2930() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<NamedType> class0 = NamedType.class;
    Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
    Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class1);
    assertNotNull(class2);
}",""
"/*
    /**********************************************************
    /* Accessors
    /**********************************************************
     */
public String getSimpleName() {
    return _simpleName;
}","public void test3031() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""E`<#u"", (String) null);
    assertEquals(""E`<#u"", propertyName0.getSimpleName());
}",""
"public boolean hasNamespace() {
    return _namespace != null;
}","public void test3132() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""<"", """");
    assertFalse(propertyName0.hasNamespace());
}",""
"public boolean hasSimpleName() {
    return _simpleName.length() > 0;
}","public void test3133() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""<"", """");
    assertTrue(propertyName0.hasSimpleName());
}",""
