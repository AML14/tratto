/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:59:27 GMT 2024
 */
package com.fasterxml.jackson.databind.introspect;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.ObjectIdResolver;
import com.fasterxml.jackson.annotation.SimpleObjectIdResolver;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.annotation.JsonAppend;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.databind.cfg.MapperConfig;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.introspect.AnnotatedClass;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedMember;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector;
import com.fasterxml.jackson.databind.introspect.ObjectIdInfo;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
import com.fasterxml.jackson.databind.type.SimpleType;
import java.lang.annotation.Annotation;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class JacksonAnnotationIntrospector_ESTest extends JacksonAnnotationIntrospector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructNoTypeResolverBuilder();
        stdTypeResolverBuilder0.isTypeIdVisible();
        assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructStdTypeResolverBuilder();
        stdTypeResolverBuilder0.isTypeIdVisible();
        assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<JsonDeserializer> class0 = JsonDeserializer.class;
        ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        jacksonAnnotationIntrospector0.findFilterId((AnnotatedClass) null);
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Version version0 = jacksonAnnotationIntrospector0.version();
        version0.isUknownVersion();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<Annotation> class0 = Annotation.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        Boolean boolean0 = jacksonAnnotationIntrospector0.findSerializationSortAlphabetically(annotatedClass0);
        assertNotNull(boolean0);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<Integer> class0 = Integer.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        PropertyName propertyName0 = jacksonAnnotationIntrospector0.findRootName(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        String[] stringArray0 = jacksonAnnotationIntrospector0.findPropertiesToIgnore((Annotated) annotatedConstructor0);
        assertNotNull(stringArray0);
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        jacksonAnnotationIntrospector0.findPropertyContentTypeResolver((MapperConfig<?>) null, (AnnotatedMember) null, simpleType0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        List<NamedType> list0 = jacksonAnnotationIntrospector0.findSubtypes(annotatedConstructor0);
        assertNotNull(list0);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        String string0 = jacksonAnnotationIntrospector0.findTypeName(annotatedClass0);
        assertNotNull(string0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        ObjectIdInfo objectIdInfo0 = jacksonAnnotationIntrospector0.findObjectReferenceInfo(annotatedConstructor0, (ObjectIdInfo) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        Object object0 = jacksonAnnotationIntrospector0.findKeySerializer(annotatedConstructor0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        Object object0 = jacksonAnnotationIntrospector0.findContentSerializer(annotatedConstructor0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        JsonInclude.Include jsonInclude_Include1 = jacksonAnnotationIntrospector0.findSerializationInclusionForContent(annotatedConstructor0, jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        Object object0 = jacksonAnnotationIntrospector0.findSerializationContentConverter(annotatedConstructor0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        JsonAppend.Attr jsonAppend_Attr0 = mock(JsonAppend.Attr.class, new ViolatedAssumptionAnswer());
        doReturn(jsonInclude_Include0).when(jsonAppend_Attr0).include();
        doReturn("LfRY= $I").when(jsonAppend_Attr0).propName();
        doReturn("LfRY= $I").when(jsonAppend_Attr0).propNamespace();
        doReturn(true).when(jsonAppend_Attr0).required();
        doReturn("LfRY= $I").when(jsonAppend_Attr0).value();
        Class<NamedType> class1 = NamedType.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class1, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        BeanPropertyWriter beanPropertyWriter0 = jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Attr0, (MapperConfig<?>) null, annotatedClass0, simpleType0);
        beanPropertyWriter0.isRequired();
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
        JsonAppend.Attr jsonAppend_Attr0 = mock(JsonAppend.Attr.class, new ViolatedAssumptionAnswer());
        doReturn(jsonInclude_Include0).when(jsonAppend_Attr0).include();
        doReturn("").when(jsonAppend_Attr0).propName();
        doReturn("").when(jsonAppend_Attr0).propNamespace();
        doReturn(false).when(jsonAppend_Attr0).required();
        doReturn("").when(jsonAppend_Attr0).value();
        Class<NamedType> class1 = NamedType.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class1, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        BeanPropertyWriter beanPropertyWriter0 = jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Attr0, (MapperConfig<?>) null, annotatedClass0, simpleType0);
        beanPropertyWriter0.isRequired();
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<Annotation> class0 = Annotation.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(jsonAppend_Prop0).name();
        doReturn((String) null).when(jsonAppend_Prop0).namespace();
        doReturn(false).when(jsonAppend_Prop0).required();
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<Annotation> class0 = Annotation.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
        doReturn((String) null).when(jsonAppend_Prop0).name();
        doReturn((String) null).when(jsonAppend_Prop0).namespace();
        doReturn(true).when(jsonAppend_Prop0).required();
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        Object object0 = jacksonAnnotationIntrospector0.findKeyDeserializer(annotatedConstructor0);
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        Object object0 = jacksonAnnotationIntrospector0.findContentDeserializer(annotatedConstructor0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationKeyType(annotatedConstructor0, (JavaType) null);
        assertNotNull(class0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationContentType(annotatedConstructor0, (JavaType) null);
        assertNotNull(class0);
    }

    @Test(timeout = 4000)
    public void test2525() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        Object object0 = jacksonAnnotationIntrospector0.findDeserializationContentConverter(annotatedConstructor0);
        assertNotNull(object0);
    }

    @Test(timeout = 4000)
    public void test2626() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
        AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
        JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = jacksonAnnotationIntrospector0.findPOJOBuilderConfig(annotatedClass0);
    }

    @Test(timeout = 4000)
    public void test2727() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<Object> class0 = Object.class;
        Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit((Class<?>) null, class0);
        assertEquals(class0, class1);
    }

    @Test(timeout = 4000)
    public void test2828() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<Integer> class0 = Integer.TYPE;
        Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class0);
        assertEquals(class0, class1);
    }

    @Test(timeout = 4000)
    public void test2929() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<NamedType> class0 = NamedType.class;
        Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
        Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class1);
        class2.toString();
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        Class<NamedType> class0 = NamedType.class;
        Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
        Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class1);
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("E`<#u", (String) null);
        propertyName0.getSimpleName();
        assertNotNull(propertyName0.getSimpleName());
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("<", "");
        propertyName0.hasNamespace();
        assertTrue(propertyName0.hasNamespace());
    }

    @Test(timeout = 4000)
    public void test3133() throws Throwable {
        JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
        PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("<", "");
        propertyName0.hasSimpleName();
        assertTrue(propertyName0.hasSimpleName());
    }
}
