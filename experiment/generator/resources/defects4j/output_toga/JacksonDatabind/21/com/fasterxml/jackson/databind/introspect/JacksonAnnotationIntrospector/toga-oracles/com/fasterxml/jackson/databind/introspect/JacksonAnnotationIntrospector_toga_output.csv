project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructNoTypeResolverBuilder();
    assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
}",0,assertFalse(stdTypeResolverBuilder0.isTypeIdVisible())
project,0,test011,"public void test011() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructStdTypeResolverBuilder();
    assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
}",0,assertFalse(stdTypeResolverBuilder0.isTypeIdVisible())
project,0,test022,"public void test022() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<JsonDeserializer> class0 = JsonDeserializer.class;
    ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test033,"public void test033() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.findFilterId((AnnotatedClass) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Annotation> class0 = Annotation.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    Boolean boolean0 = jacksonAnnotationIntrospector0.findSerializationSortAlphabetically(annotatedClass0);
    assertNull(boolean0);
}",0,assertNotNull(boolean0)
project,0,test066,"public void test066() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Integer> class0 = Integer.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    PropertyName propertyName0 = jacksonAnnotationIntrospector0.findRootName(annotatedClass0);
    assertNull(propertyName0);
}",0,
project,0,test077,"public void test077() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    String[] stringArray0 = jacksonAnnotationIntrospector0.findPropertiesToIgnore((Annotated) annotatedConstructor0);
    assertNull(stringArray0);
}",0,assertNotNull(stringArray0)
project,0,test099,"public void test099() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<BeanPropertyDefinition> class0 = BeanPropertyDefinition.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.findPropertyContentTypeResolver((MapperConfig<?>) null, (AnnotatedMember) null, simpleType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must call method with a container type (got [simple type, class com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition])
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    List<NamedType> list0 = jacksonAnnotationIntrospector0.findSubtypes(annotatedConstructor0);
    assertNull(list0);
}",0,assertNotNull(list0)
project,0,test1111,"public void test1111() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<ObjectIdResolver> class0 = ObjectIdResolver.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    String string0 = jacksonAnnotationIntrospector0.findTypeName(annotatedClass0);
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test1212,"public void test1212() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    ObjectIdInfo objectIdInfo0 = jacksonAnnotationIntrospector0.findObjectReferenceInfo(annotatedConstructor0, (ObjectIdInfo) null);
    assertNull(objectIdInfo0);
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findKeySerializer(annotatedConstructor0);
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test1414,"public void test1414() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findContentSerializer(annotatedConstructor0);
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test1515,"public void test1515() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
    JsonInclude.Include jsonInclude_Include1 = jacksonAnnotationIntrospector0.findSerializationInclusionForContent(annotatedConstructor0, jsonInclude_Include0);
    assertSame(jsonInclude_Include0, jsonInclude_Include1);
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findSerializationContentConverter(annotatedConstructor0);
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test1919,"public void test1919() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Annotation> class0 = Annotation.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(jsonAppend_Prop0).name();
    doReturn((String) null).when(jsonAppend_Prop0).namespace();
    doReturn(false).when(jsonAppend_Prop0).required();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, annotatedClass0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Annotation> class0 = Annotation.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(jsonAppend_Prop0).name();
    doReturn((String) null).when(jsonAppend_Prop0).namespace();
    doReturn(true).when(jsonAppend_Prop0).required();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, annotatedClass0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findKeyDeserializer(annotatedConstructor0);
    assertNull(object0);
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findContentDeserializer(annotatedConstructor0);
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test2323,"public void test2323() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationKeyType(annotatedConstructor0, (JavaType) null);
    assertNull(class0);
}",0,assertNotNull(class0)
project,0,test2424,"public void test2424() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationContentType(annotatedConstructor0, (JavaType) null);
    assertNull(class0);
}",0,assertNotNull(class0)
project,0,test2525,"public void test2525() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findDeserializationContentConverter(annotatedConstructor0);
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test2626,"public void test2626() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = jacksonAnnotationIntrospector0.findPOJOBuilderConfig(annotatedClass0);
    assertNull(jsonPOJOBuilder_Value0);
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Object> class0 = Object.class;
    Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit((Class<?>) null, class0);
    assertNull(class1);
}",0,"assertEquals(class0, class1)"
project,0,test2828,"public void test2828() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Integer> class0 = Integer.TYPE;
    Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class0);
    assertNull(class1);
}",0,"assertEquals(class0, class1)"
project,0,test2930,"public void test2930() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<NamedType> class0 = NamedType.class;
    Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
    Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class1);
    assertNotNull(class2);
}",0,
project,0,test3031,"public void test3031() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""E`<#u"", (String) null);
    assertEquals(""E`<#u"", propertyName0.getSimpleName());
}",0,assertNotNull(propertyName0.getSimpleName())
project,0,test3132,"public void test3132() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""<"", """");
    assertFalse(propertyName0.hasNamespace());
}",0,assertTrue(propertyName0.hasNamespace())
project,0,test3133,"public void test3133() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""<"", """");
    assertTrue(propertyName0.hasSimpleName());
}",0,assertTrue(propertyName0.hasSimpleName())
