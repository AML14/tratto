/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 06:22:48 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.BeanDescription;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.deser.impl.CreatorCollector;
import com.fasterxml.jackson.databind.introspect.AnnotatedConstructor;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.time.format.TextStyle;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class CreatorCollector_ESTest extends CreatorCollector_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, deserializationConfig0);
        creatorCollector0.addLongCreator((AnnotatedWithParams) null, true);
        creatorCollector0.hasDelegatingCreator();
        assertTrue(creatorCollector0.hasDelegatingCreator());
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<String> class0 = String.class;
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDirectClassAnnotations(deserializationConfig0, simpleType0, deserializationConfig0);
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        creatorCollector0.addLongCreator((AnnotatedWithParams) null);
        creatorCollector0.hasDelegatingCreator();
        assertFalse(creatorCollector0.hasDelegatingCreator());
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, deserializationConfig0);
        creatorCollector0.addIntCreator((AnnotatedWithParams) null);
        creatorCollector0.hasPropertyBasedCreator();
        assertFalse(creatorCollector0.hasPropertyBasedCreator());
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, deserializationConfig0);
        creatorCollector0.addIntCreator((AnnotatedWithParams) null, true);
        creatorCollector0.hasDelegatingCreator();
        assertFalse(creatorCollector0.hasDelegatingCreator());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, deserializationConfig0);
        creatorCollector0.addDelegatingCreator((AnnotatedWithParams) null, (CreatorProperty[]) null);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, deserializationConfig0);
        creatorCollector0.addBooleanCreator((AnnotatedWithParams) null);
        creatorCollector0.hasDelegatingCreator();
        assertTrue(creatorCollector0.hasDelegatingCreator());
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        creatorCollector0.setDefaultCreator(annotatedConstructor0);
        boolean boolean0 = creatorCollector0.hasDefaultCreator();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, deserializationConfig0);
        creatorCollector0.addDoubleCreator((AnnotatedWithParams) null);
        creatorCollector0.hasDelegatingCreator();
        assertFalse(creatorCollector0.hasDelegatingCreator());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, deserializationConfig0);
        creatorCollector0.addStringCreator((AnnotatedWithParams) null);
        creatorCollector0.hasPropertyBasedCreator();
        assertTrue(creatorCollector0.hasPropertyBasedCreator());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, deserializationConfig0);
        creatorCollector0.addDoubleCreator((AnnotatedWithParams) null, false);
        creatorCollector0.hasPropertyBasedCreator();
        assertFalse(creatorCollector0.hasPropertyBasedCreator());
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(0);
        boolean boolean0 = creatorCollector_Vanilla0.canCreateUsingDefault();
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla((-2115));
        boolean boolean0 = creatorCollector_Vanilla0.canInstantiate();
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        creatorCollector0.verifyNonDup(annotatedConstructor0, 8, false);
        ValueInstantiator valueInstantiator0 = creatorCollector0.constructValueInstantiator(deserializationConfig0);
        valueInstantiator0.canInstantiate();
        assertTrue(valueInstantiator0.canInstantiate());
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        creatorCollector0.verifyNonDup(annotatedConstructor0, 8, false);
        ValueInstantiator valueInstantiator0 = creatorCollector0.constructValueInstantiator(deserializationConfig0);
        valueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        ValueInstantiator valueInstantiator0 = creatorCollector0.constructValueInstantiator(deserializationConfig0);
        valueInstantiator0.canInstantiate();
        assertFalse(valueInstantiator0.canInstantiate());
    }

    @Test(timeout = 4000)
    public void test1315() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        ValueInstantiator valueInstantiator0 = creatorCollector0.constructValueInstantiator(deserializationConfig0);
        valueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, deserializationConfig0);
        CreatorProperty[] creatorPropertyArray0 = new CreatorProperty[10];
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) null, creatorPropertyArray0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, deserializationConfig0);
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        PropertyName propertyName0 = new PropertyName("");
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, mapLikeType0, annotationMap0, (-2721));
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        Locale locale0 = Locale.UK;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 695, locale0, propertyMetadata0);
        SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[8];
        settableBeanPropertyArray0[0] = (SettableBeanProperty) creatorProperty0;
        settableBeanPropertyArray0[1] = (SettableBeanProperty) creatorProperty0;
        settableBeanPropertyArray0[2] = (SettableBeanProperty) creatorProperty0;
        settableBeanPropertyArray0[3] = (SettableBeanProperty) creatorProperty0;
        settableBeanPropertyArray0[4] = (SettableBeanProperty) creatorProperty0;
        settableBeanPropertyArray0[5] = (SettableBeanProperty) creatorProperty0;
        settableBeanPropertyArray0[6] = (SettableBeanProperty) creatorProperty0;
        settableBeanPropertyArray0[7] = (SettableBeanProperty) creatorProperty0;
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) null, false, settableBeanPropertyArray0);
        creatorCollector0.hasPropertyBasedCreator();
        assertTrue(creatorCollector0.hasPropertyBasedCreator());
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, deserializationConfig0);
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        PropertyName propertyName0 = new PropertyName("?e{o\u0004Vqm{Sv'g~");
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter(annotatedConstructor0, mapLikeType0, annotationMap0, (-1732));
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-1732), (Object) null, propertyMetadata0);
        SettableBeanProperty settableBeanProperty0 = creatorProperty0.withSimpleName("");
        SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[3];
        settableBeanPropertyArray0[0] = (SettableBeanProperty) creatorProperty0;
        settableBeanPropertyArray0[1] = settableBeanProperty0;
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) annotatedConstructor0, true, settableBeanPropertyArray0);
    }

    @Test(timeout = 4000)
    public void test1719() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, deserializationConfig0);
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        PropertyName propertyName0 = new PropertyName("?e{o\u0004Vqm{Sv'g~");
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter(annotatedConstructor0, mapLikeType0, annotationMap0, (-2721));
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, (-2721), propertyName0, propertyMetadata0);
        SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[13];
        settableBeanPropertyArray0[0] = (SettableBeanProperty) creatorProperty0;
        settableBeanPropertyArray0[1] = (SettableBeanProperty) creatorProperty0;
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) annotatedConstructor0, true, settableBeanPropertyArray0);
    }

    @Test(timeout = 4000)
    public void test1820() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        Class<TextStyle> class1 = TextStyle.class;
        Class<Integer> class2 = Integer.TYPE;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class2);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        AnnotatedParameter annotatedParameter0 = annotatedConstructor0.getParameter(492);
        creatorCollector0.addIncompeteParameter(annotatedParameter0);
        creatorCollector0.addIncompeteParameter(annotatedParameter0);
        annotatedParameter0.getName();
        assertNotNull(annotatedParameter0.getName());
    }

    @Test(timeout = 4000)
    public void test1921() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        boolean boolean0 = creatorCollector0.hasDefaultCreator();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2022() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, deserializationConfig0);
        boolean boolean0 = creatorCollector0.hasDelegatingCreator();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2123() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        creatorCollector0.verifyNonDup(annotatedConstructor0, 6, false);
        boolean boolean0 = creatorCollector0.hasDelegatingCreator();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2224() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        CreatorCollector creatorCollector0 = new CreatorCollector((BeanDescription) null, deserializationConfig0);
        boolean boolean0 = creatorCollector0.hasPropertyBasedCreator();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2325() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
        creatorCollector0.addPropertyCreator((AnnotatedWithParams) annotatedConstructor0, false, settableBeanPropertyArray0);
        boolean boolean0 = creatorCollector0.hasPropertyBasedCreator();
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test2426() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(deserializationConfig0, mapLikeType0, deserializationConfig0);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[1];
        creatorCollector0._arrayDelegateArgs = settableBeanPropertyArray0;
        creatorCollector0.verifyNonDup(annotatedConstructor0, 8, true);
        ValueInstantiator valueInstantiator0 = creatorCollector0.constructValueInstantiator(deserializationConfig0);
        valueInstantiator0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(deserializationConfig0, mapLikeType0, deserializationConfig0);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[1];
        creatorCollector0._arrayDelegateArgs = settableBeanPropertyArray0;
        creatorCollector0.verifyNonDup(annotatedConstructor0, 8, true);
        ValueInstantiator valueInstantiator0 = creatorCollector0.constructValueInstantiator(deserializationConfig0);
        valueInstantiator0.canInstantiate();
        assertTrue(valueInstantiator0.canInstantiate());
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forClassAnnotations(deserializationConfig0, mapLikeType0, deserializationConfig0);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[1];
        PropertyName propertyName0 = PropertyName.construct("");
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter(annotatedConstructor0, mapLikeType0, annotationMap0, 8);
        Integer integer0 = new Integer(54);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "ftsm!\"q>rdEd<+Anv", integer0, ", encountered ");
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, annotatedParameter0, 54, (Object) null, propertyMetadata0);
        settableBeanPropertyArray0[0] = (SettableBeanProperty) creatorProperty0;
        creatorCollector0._arrayDelegateArgs = settableBeanPropertyArray0;
        creatorCollector0.verifyNonDup(annotatedConstructor0, 8, true);
        ValueInstantiator valueInstantiator0 = creatorCollector0.constructValueInstantiator(deserializationConfig0);
        valueInstantiator0.canCreateFromObjectWith();
    }

    @Test(timeout = 4000)
    public void test2629() throws Throwable {
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_GETTERS;
        mapperFeatureArray0[0] = mapperFeature0;
        mapperFeatureArray0[1] = mapperFeature0;
        MapperFeature mapperFeature1 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
        mapperFeatureArray0[2] = mapperFeature1;
        SerializationConfig serializationConfig1 = serializationConfig0.without(mapperFeatureArray0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, mapLikeType0, serializationConfig0);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, serializationConfig1);
        creatorCollector0.verifyNonDup(annotatedConstructor0, 8, false);
        creatorCollector0.hasPropertyBasedCreator();
    }

    @Test(timeout = 4000)
    public void test2730() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<String> class0 = String.class;
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        creatorCollector0.addStringCreator((AnnotatedWithParams) annotatedConstructor0, false);
        creatorCollector0.addStringCreator((AnnotatedWithParams) annotatedConstructor0, false);
    }

    @Test(timeout = 4000)
    public void test2831() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<String> class0 = String.class;
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, simpleType0, deserializationConfig0);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        creatorCollector0.addStringCreator((AnnotatedWithParams) annotatedConstructor0, true);
        creatorCollector0.addStringCreator((AnnotatedWithParams) annotatedConstructor0, true);
    }

    @Test(timeout = 4000)
    public void test2932() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<String> class0 = String.class;
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, simpleType0, deserializationConfig0);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        creatorCollector0.addStringCreator((AnnotatedWithParams) annotatedConstructor0, true);
        creatorCollector0.addStringCreator((AnnotatedWithParams) annotatedConstructor0, false);
        creatorCollector0.hasDefaultCreator();
        assertTrue(creatorCollector0.hasDefaultCreator());
    }

    @Test(timeout = 4000)
    public void test3033() throws Throwable {
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
        Class<String> class0 = String.class;
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forDeserialization(deserializationConfig0, simpleType0, (ClassIntrospector.MixInResolver) null);
        AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
        CreatorCollector creatorCollector0 = new CreatorCollector(basicBeanDescription0, deserializationConfig0);
        creatorCollector0.addStringCreator((AnnotatedWithParams) annotatedConstructor0, false);
        creatorCollector0.addStringCreator((AnnotatedWithParams) annotatedConstructor0, true);
        creatorCollector0.hasDefaultCreator();
    }

    @Test(timeout = 4000)
    public void test3134() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(1);
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        Object[] objectArray0 = new Object[0];
        creatorCollector_Vanilla0.createFromObjectWith(deserializationContext0, objectArray0);
    }

    @Test(timeout = 4000)
    public void test3235() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(3);
        String string0 = creatorCollector_Vanilla0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test3336() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(2);
        String string0 = creatorCollector_Vanilla0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test3437() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(2817);
        String string0 = creatorCollector_Vanilla0.getValueTypeDesc();
    }

    @Test(timeout = 4000)
    public void test3538() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(1);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ArrayList arrayList0 = (ArrayList) creatorCollector_Vanilla0.createUsingDefault(defaultDeserializationContext_Impl0);
        arrayList0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3639() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla((-1782));
        creatorCollector_Vanilla0.createUsingDefault((DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3740() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(2);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        LinkedHashMap linkedHashMap0 = (LinkedHashMap) creatorCollector_Vanilla0.createUsingDefault(defaultDeserializationContext_Impl0);
        linkedHashMap0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test3841() throws Throwable {
        CreatorCollector.Vanilla creatorCollector_Vanilla0 = new CreatorCollector.Vanilla(3);
        HashMap hashMap0 = (HashMap) creatorCollector_Vanilla0.createUsingDefault((DeserializationContext) null);
        hashMap0.size();
    }
}
