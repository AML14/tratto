project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    NumberDeserializers.BigDecimalDeserializer numberDeserializers_BigDecimalDeserializer0 = new NumberDeserializers.BigDecimalDeserializer();
    assertFalse(numberDeserializers_BigDecimalDeserializer0.isCachable());
}",0,assertTrue(numberDeserializers_BigDecimalDeserializer0.isCachable())
project,0,test055,"public void test055() throws Throwable {
    Class<Character> class0 = Character.class;
    Character character0 = Character.valueOf('f');
    NumberDeserializers.CharacterDeserializer numberDeserializers_CharacterDeserializer0 = new NumberDeserializers.CharacterDeserializer(class0, character0);
    assertFalse(numberDeserializers_CharacterDeserializer0.isCachable());
}",0,assertTrue(numberDeserializers_CharacterDeserializer0.isCachable())
project,0,test066,"public void test066() throws Throwable {
    Class<Short> class0 = Short.class;
    Short short0 = new Short((short) (-3647));
    NumberDeserializers.ShortDeserializer numberDeserializers_ShortDeserializer0 = new NumberDeserializers.ShortDeserializer(class0, short0);
    assertFalse(numberDeserializers_ShortDeserializer0.isCachable());
}",0,assertTrue(numberDeserializers_ShortDeserializer0.isCachable())
project,0,test088,"public void test088() throws Throwable {
    Class<Byte> class0 = Byte.class;
    Byte byte0 = new Byte((byte) 125);
    NumberDeserializers.ByteDeserializer numberDeserializers_ByteDeserializer0 = new NumberDeserializers.ByteDeserializer(class0, byte0);
    assertFalse(numberDeserializers_ByteDeserializer0.isCachable());
}",0,assertTrue(numberDeserializers_ByteDeserializer0.isCachable())
project,0,test1111,"public void test1111() throws Throwable {
    Class<Boolean> class0 = Boolean.TYPE;
    Boolean boolean0 = Boolean.valueOf(""com.fasterxml.jackson.databind.deser.std.NumberDeserializers$CharacterDeserializer"");
    NumberDeserializers.BooleanDeserializer numberDeserializers_BooleanDeserializer0 = new NumberDeserializers.BooleanDeserializer(class0, boolean0);
    assertFalse(numberDeserializers_BooleanDeserializer0.isCachable());
}",0,assertTrue(numberDeserializers_BooleanDeserializer0.isCachable())
project,0,test1313,"public void test1313() throws Throwable {
    Class<Float> class0 = Float.TYPE;
    Float float0 = new Float(0.0);
    NumberDeserializers.FloatDeserializer numberDeserializers_FloatDeserializer0 = new NumberDeserializers.FloatDeserializer(class0, float0);
    assertFalse(numberDeserializers_FloatDeserializer0.isCachable());
}",0,assertTrue(numberDeserializers_FloatDeserializer0.isCachable())
project,0,test1717,"public void test1717() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    NumberDeserializers.IntegerDeserializer numberDeserializers_IntegerDeserializer0 = NumberDeserializers.IntegerDeserializer.wrapperInstance;
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(numberDeserializers_IntegerDeserializer0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test1818,"public void test1818() throws Throwable {
    Class<Float> class0 = Float.TYPE;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""x"");
    assertNotNull(jsonDeserializer0);
}",0,
project,0,test1819,"public void test1819() throws Throwable {
    Class<Float> class0 = Float.TYPE;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""x"");
    assertFalse(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test1920,"public void test1920() throws Throwable {
    Class<Integer> class0 = Integer.TYPE;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertTrue(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test2021,"public void test2021() throws Throwable {
    Class<Boolean> class0 = Boolean.TYPE;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertFalse(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test2122,"public void test2122() throws Throwable {
    Class<Long> class0 = Long.TYPE;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.mth.BigInteger"");
    assertTrue(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test2223,"public void test2223() throws Throwable {
    Class<Double> class0 = Double.TYPE;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.|ath.BigInteger"");
    assertFalse(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test2324,"public void test2324() throws Throwable {
    Class<Character> class0 = Character.TYPE;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, (String) null);
    assertFalse(jsonDeserializer0.isCachable());
}",0,
project,0,test2425,"public void test2425() throws Throwable {
    Class<Byte> class0 = Byte.TYPE;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertFalse(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test2526,"public void test2526() throws Throwable {
    Class<Short> class0 = Short.TYPE;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, (String) null);
    assertFalse(jsonDeserializer0.isCachable());
}",0,
project,0,test2728,"public void test2728() throws Throwable {
    Class<Integer> class0 = Integer.class;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertTrue(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test2829,"public void test2829() throws Throwable {
    Class<Boolean> class0 = Boolean.class;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertFalse(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test2930,"public void test2930() throws Throwable {
    Class<Long> class0 = Long.class;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertTrue(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test3031,"public void test3031() throws Throwable {
    Class<Double> class0 = Double.class;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertFalse(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test3132,"public void test3132() throws Throwable {
    Class<Character> class0 = Character.class;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertFalse(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test3233,"public void test3233() throws Throwable {
    Class<Byte> class0 = Byte.class;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertFalse(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test3435,"public void test3435() throws Throwable {
    Class<Float> class0 = Float.class;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertFalse(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test3536,"public void test3536() throws Throwable {
    Class<BigInteger> class0 = BigInteger.class;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertFalse(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test3637,"public void test3637() throws Throwable {
    Class<BigDecimal> class0 = BigDecimal.class;
    JsonDeserializer<?> jsonDeserializer0 = NumberDeserializers.find(class0, ""java.math.BigInteger"");
    assertFalse(jsonDeserializer0.isCachable());
}",0,assertTrue(jsonDeserializer0.isCachable())
project,0,test3738,"public void test3738() throws Throwable {
    Class<String> class0 = String.class;
    // Undeclared exception!
    try {
        NumberDeserializers.find(class0, ""java.math.BigInteger"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Internal error: can't find deserializer for java.lang.String
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.NumberDeserializers"", e);
    }
}",0,
