{
  "test2225" : {
    "methodSignature" : "public SettableBeanProperty find(int index)",
    "methodName" : "find",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2225() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"D4ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[1];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);\n    stack0.add((SettableBeanProperty) creatorProperty0);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(46);\n}",
    "testName" : "test2225"
  },
  "test3039" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3039() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    Object object0 = new Object();\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1539, object0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"~D4ab\", \"~D4ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);\n    NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer1);\n    beanPropertyMap1.remove(creatorProperty0);\n    beanPropertyMap1.size();\n}",
    "testName" : "test3039"
  },
  "test1213" : {
    "methodSignature" : "public BeanPropertyMap renameAll(NameTransformer transformer)",
    "methodName" : "renameAll",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1213() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll((NameTransformer) null);\n}",
    "testName" : "test1213"
  },
  "test1010" : {
    "methodSignature" : "public void replace(SettableBeanProperty newProp)",
    "methodName" : "replace",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"kD'ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"kD'ab\", \"kD'ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);\n    beanPropertyMap2.replace(creatorProperty0);\n}",
    "testName" : "test1010"
  },
  "test2023" : {
    "methodSignature" : "public int getPropertyIndex()",
    "methodName" : "getPropertyIndex",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2023() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"kD'ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    beanPropertyMap0.replace(creatorProperty0);\n    creatorProperty0.getPropertyIndex();\n}",
    "testName" : "test2023"
  },
  "test1011" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1011() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"kD'ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"kD'ab\", \"kD'ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);\n    beanPropertyMap2.replace(creatorProperty0);\n    beanPropertyMap2.size();\n}",
    "testName" : "test1011"
  },
  "test033" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);\n    int int0 = beanPropertyMap0.size();\n}",
    "testName" : "test033"
  },
  "test077" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    stack0.setSize(2769);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);\n    beanPropertyMap0.size();\n}",
    "testName" : "test077"
  },
  "test1618" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1618() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"D4ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 22);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    Stack<String> stack0 = new Stack<String>();\n    stack0.add(\"@\");\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);\n    beanPropertyMap1.size();\n}",
    "testName" : "test1618"
  },
  "test1619" : {
    "methodSignature" : "public BeanPropertyMap withoutProperties(Collection<String> toExclude)",
    "methodName" : "withoutProperties",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1619() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"D4ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 22);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    Stack<String> stack0 = new Stack<String>();\n    stack0.add(\"@\");\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);\n}",
    "testName" : "test1619"
  },
  "test2427" : {
    "methodSignature" : "public SettableBeanProperty find(String key)",
    "methodName" : "find",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2427() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"kD'ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(\"~Vt80H/E%y^8F4bpJPvl\");\n}",
    "testName" : "test2427"
  },
  "test1415" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1415() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    stack0.add((SettableBeanProperty) null);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"mIm^<Fi\", \"mIm^<Fi\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.size();\n}",
    "testName" : "test1415"
  },
  "test1416" : {
    "methodSignature" : "public BeanPropertyMap renameAll(NameTransformer transformer)",
    "methodName" : "renameAll",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1416() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    stack0.add((SettableBeanProperty) null);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"mIm^<Fi\", \"mIm^<Fi\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n}",
    "testName" : "test1416"
  },
  "test2631" : {
    "methodSignature" : "public SettableBeanProperty find(String key)",
    "methodName" : "find",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2631() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"kD'ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"kD'ab\", \"kD'ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.withProperty(creatorProperty0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find(\"~Vt80H/E%y^8F4bpJPvl\");\n}",
    "testName" : "test2631"
  },
  "test3646" : {
    "methodSignature" : "protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3646() throws Throwable {\n    ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayList0);\n    InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null, (String) null);\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    beanPropertyMap0.wrapAndThrow(invocationTargetException0, arrayList0, (String) null, defaultDeserializationContext_Impl0);\n}",
    "testName" : "test3646"
  },
  "test2633" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2633() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"kD'ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"kD'ab\", \"kD'ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.withProperty(creatorProperty0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find(\"~Vt80H/E%y^8F4bpJPvl\");\n    beanPropertyMap1.size();\n}",
    "testName" : "test2633"
  },
  "test3443" : {
    "methodSignature" : "protected SettableBeanProperty _rename(SettableBeanProperty prop, NameTransformer xf)",
    "methodName" : "_rename",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3443() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    NameTransformer nameTransformer0 = NameTransformer.NOP;\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename((SettableBeanProperty) null, nameTransformer0);\n}",
    "testName" : "test3443"
  },
  "test4454" : {
    "methodSignature" : "public BeanPropertyMap withProperty(SettableBeanProperty newProp)",
    "methodName" : "withProperty",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4454() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"~D4ab\", \"~D4ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.init(vector0);\n    beanPropertyMap1.withProperty(creatorProperty0);\n}",
    "testName" : "test4454"
  },
  "test022" : {
    "methodSignature" : "public SettableBeanProperty[] getPropertiesInInsertionOrder()",
    "methodName" : "getPropertiesInInsertionOrder",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);\n    SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();\n}",
    "testName" : "test022"
  },
  "test066" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"kD'ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"kD'ab\", \"kD'ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.withProperty(creatorProperty0);\n    BeanPropertyMap beanPropertyMap2 = new BeanPropertyMap(beanPropertyMap1, true);\n    beanPropertyMap2.size();\n}",
    "testName" : "test066"
  },
  "test2837" : {
    "methodSignature" : "public void remove(SettableBeanProperty propToRm)",
    "methodName" : "remove",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2837() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    Object object0 = new Object();\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1539, object0, propertyMetadata0);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);\n    beanPropertyMap0.remove(creatorProperty0);\n}",
    "testName" : "test2837"
  },
  "test1821" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1821() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, \", needed \", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-2147483645), referenceType0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    Stack<String> stack0 = new Stack<String>();\n    stack0.add(\"\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);\n    beanPropertyMap1.size();\n}",
    "testName" : "test1821"
  },
  "test3848" : {
    "methodSignature" : "protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3848() throws Throwable {\n    ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayList0);\n    SQLDataException sQLDataException0 = new SQLDataException((String) null);\n    MockError mockError0 = new MockError(\"jj!QyOB<8-\", sQLDataException0);\n    beanPropertyMap0.wrapAndThrow(mockError0, arrayList0, \"/o|v3`*u'h-^q|h\", (DeserializationContext) null);\n}",
    "testName" : "test3848"
  },
  "test3241" : {
    "methodSignature" : "public boolean findDeserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, String key) throws IOException",
    "methodName" : "findDeserializeAndSet",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3241() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, false);\n    boolean boolean0 = beanPropertyMap0.findDeserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null, \"com.fasterxml.jackson.databind.ext.DOMSerializer\");\n}",
    "testName" : "test3241"
  },
  "test4252" : {
    "methodSignature" : "public int getCreatorIndex()",
    "methodName" : "getCreatorIndex",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4252() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"kD'ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"kD'ab\", \"kD'ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);\n    beanPropertyMap2.replace(creatorProperty0);\n    creatorProperty0.getCreatorIndex();\n}",
    "testName" : "test4252"
  },
  "test4050" : {
    "methodSignature" : "protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4050() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException(\"?ZW&_9p~WHa7Jba+\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);\n    beanPropertyMap0.wrapAndThrow(jsonMappingException0, \"?ZW&_9p~WHa7Jba+\", \"?ZW&_9p~WHa7Jba+\", defaultDeserializationContext_Impl0);\n}",
    "testName" : "test4050"
  },
  "test2326" : {
    "methodSignature" : "public SettableBeanProperty find(String key)",
    "methodName" : "find",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2326() throws Throwable {\n    LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);\n    beanPropertyMap0.find((String) null);\n}",
    "testName" : "test2326"
  },
  "test1314" : {
    "methodSignature" : "public BeanPropertyMap renameAll(NameTransformer transformer)",
    "methodName" : "renameAll",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1314() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    NameTransformer nameTransformer0 = NameTransformer.NOP;\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n}",
    "testName" : "test1314"
  },
  "test2124" : {
    "methodSignature" : "public final String getName()",
    "methodName" : "getName",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2124() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find((-1));\n    settableBeanProperty0.getName();\n}",
    "testName" : "test2124"
  },
  "test1112" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1112() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"D4ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[1];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);\n    stack0.add((SettableBeanProperty) creatorProperty0);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.assignIndexes();\n    beanPropertyMap1.size();\n}",
    "testName" : "test1112"
  },
  "test011" : {
    "methodSignature" : "protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);\n    SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 244);\n    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();\n    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);\n    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);\n    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);\n    ArrayNode arrayNode0 = objectNode0.withArray((String) null);\n    JsonParser jsonParser0 = arrayNode0.traverse();\n    DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, (InjectableValues) null);\n    beanPropertyMap0.wrapAndThrow(sQLNonTransientConnectionException0, stack0, \"N>[*=!PAW\", defaultDeserializationContext0);\n}",
    "testName" : "test011"
  },
  "test055" : {
    "methodSignature" : "public BeanPropertyMap withCaseInsensitivity(boolean state)",
    "methodName" : "withCaseInsensitivity",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, false);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);\n}",
    "testName" : "test055"
  },
  "test099" : {
    "methodSignature" : "public BeanPropertyMap withProperty(SettableBeanProperty newProp)",
    "methodName" : "withProperty",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"D4ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[1];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 40);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 40, classNameIdResolver0, propertyMetadata0);\n    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(vector0, true);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);\n}",
    "testName" : "test099"
  },
  "test1517" : {
    "methodSignature" : "public BeanPropertyMap withoutProperties(Collection<String> toExclude)",
    "methodName" : "withoutProperties",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1517() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(vector0, true);\n    TreeSet<String> treeSet0 = new TreeSet<String>();\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(treeSet0);\n}",
    "testName" : "test1517"
  },
  "test2529" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2529() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"~D4ab\", \"~D4ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.withProperty(creatorProperty0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find(\"\");\n    beanPropertyMap1.size();\n}",
    "testName" : "test2529"
  },
  "test2528" : {
    "methodSignature" : "public SettableBeanProperty find(String key)",
    "methodName" : "find",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2528() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"~D4ab\", \"~D4ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.withProperty(creatorProperty0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find(\"\");\n}",
    "testName" : "test2528"
  },
  "test3545" : {
    "methodSignature" : "public BeanPropertyMap renameAll(NameTransformer transformer)",
    "methodName" : "renameAll",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3545() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.USE_DEFAULT;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);\n    JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    doReturn(jsonDeserializer0).when(jsonDeserializer1).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));\n    CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer1);\n    vector0.add((SettableBeanProperty) creatorProperty1);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"D@3dHBFcr\", \"~D4ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n}",
    "testName" : "test3545"
  },
  "test3544" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3544() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.USE_DEFAULT;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);\n    JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    doReturn(jsonDeserializer0).when(jsonDeserializer1).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));\n    CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer1);\n    vector0.add((SettableBeanProperty) creatorProperty1);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"D@3dHBFcr\", \"~D4ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.size();\n}",
    "testName" : "test3544"
  },
  "test1720" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1720() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    stack0.add((SettableBeanProperty) null);\n    Set<String> set0 = ZoneId.getAvailableZoneIds();\n    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(set0);\n    beanPropertyMap1.size();\n}",
    "testName" : "test1720"
  },
  "test3342" : {
    "methodSignature" : "public String toString()",
    "methodName" : "toString",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3342() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"D4ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);\n    String string0 = beanPropertyMap0.toString();\n}",
    "testName" : "test3342"
  },
  "test2530" : {
    "methodSignature" : "public final String getName()",
    "methodName" : "getName",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2530() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"~D4ab\", \"~D4ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.withProperty(creatorProperty0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find(\"\");\n    settableBeanProperty0.getName();\n}",
    "testName" : "test2530"
  },
  "test000" : {
    "methodSignature" : "protected SettableBeanProperty _rename(SettableBeanProperty prop, NameTransformer xf)",
    "methodName" : "_rename",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayList0);\n    PropertyName propertyName0 = new PropertyName(\"/4 2pv3`*uh-^q|h\", \"d@3dhbfcr~d4ab\");\n    Class<CreatorProperty> class0 = CreatorProperty.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-308));\n    MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, (JavaType) null);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    Integer integer0 = new Integer(93);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, \"' missing from _propsInOrder\", integer0, \"' missing from _propsInOrder\");\n    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();\n    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    Class<InvocationTargetException> class1 = InvocationTargetException.class;\n    JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException(class1, \"Properties=[\");\n    MockError mockError0 = new MockError(\"' missing from _propsInOrder\", jsonMappingException0);\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1374), mockError0, propertyMetadata0);\n    CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(coreXMLDeserializers_Std0);\n    NameTransformer nameTransformer0 = NameTransformer.NOP;\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer0);\n}",
    "testName" : "test000"
  },
  "test044" : {
    "methodSignature" : "public BeanPropertyMap withCaseInsensitivity(boolean state)",
    "methodName" : "withCaseInsensitivity",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(true);\n}",
    "testName" : "test044"
  },
  "test088" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    stack0.add((SettableBeanProperty) null);\n    stack0.addElement((SettableBeanProperty) null);\n    stack0.add((SettableBeanProperty) null);\n    stack0.add((SettableBeanProperty) null);\n    stack0.add((SettableBeanProperty) null);\n    stack0.add((SettableBeanProperty) null);\n    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);\n    beanPropertyMap0.size();\n}",
    "testName" : "test088"
  },
  "test3949" : {
    "methodSignature" : "protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3949() throws Throwable {\n    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException(\"?Z*&_qHyxb+\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);\n    beanPropertyMap0.wrapAndThrow(jsonMappingException0, stack0, \"?Z*&_qHyxb+\", (DeserializationContext) null);\n}",
    "testName" : "test3949"
  },
  "test2938" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2938() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    Object object0 = new Object();\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1539, object0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);\n    beanPropertyMap0.remove(creatorProperty0);\n    beanPropertyMap0.size();\n}",
    "testName" : "test2938"
  },
  "test2735" : {
    "methodSignature" : "public SettableBeanProperty find(String key)",
    "methodName" : "find",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2735() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.USE_DEFAULT;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"~D4ab\", \"~D4ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.withProperty(creatorProperty0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find(\"\");\n}",
    "testName" : "test2735"
  },
  "test3747" : {
    "methodSignature" : "protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3747() throws Throwable {\n    ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayList0);\n    MockThrowable mockThrowable0 = new MockThrowable();\n    InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockThrowable0, (String) null);\n    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    beanPropertyMap0.wrapAndThrow(invocationTargetException0, arrayList0, (String) null, defaultDeserializationContext_Impl0);\n}",
    "testName" : "test3747"
  },
  "test2734" : {
    "methodSignature" : "public final String getName()",
    "methodName" : "getName",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2734() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.USE_DEFAULT;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"~D4ab\", \"~D4ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.withProperty(creatorProperty0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find(\"\");\n    settableBeanProperty0.getName();\n}",
    "testName" : "test2734"
  },
  "test1922" : {
    "methodSignature" : "public void replace(SettableBeanProperty newProp)",
    "methodName" : "replace",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1922() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[1];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 12, classNameIdResolver0, propertyMetadata0);\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    beanPropertyMap0.replace(creatorProperty0);\n}",
    "testName" : "test1922"
  },
  "test2736" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2736() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.USE_DEFAULT;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"~D4ab\", false, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"~D4ab\", \"~D4ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    beanPropertyMap1.withProperty(creatorProperty0);\n    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find(\"\");\n    beanPropertyMap1.size();\n}",
    "testName" : "test2736"
  },
  "test3140" : {
    "methodSignature" : "public boolean findDeserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, String key) throws IOException",
    "methodName" : "findDeserializeAndSet",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3140() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"D4ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 12, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(vector0, true);\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    PipedInputStream pipedInputStream0 = new PipedInputStream(3896);\n    IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);\n    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();\n    byte[] byteArray0 = new byte[4];\n    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (-1700), 2, false);\n    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;\n    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);\n    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) filteringParserDelegate0, (JsonParser) uTF8StreamJsonParser0);\n    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();\n    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    beanPropertyMap0.findDeserializeAndSet(jsonParserSequence0, defaultDeserializationContext_Impl0, (Object) null, \"\");\n}",
    "testName" : "test3140"
  },
  "test4353" : {
    "methodSignature" : "public void replace(SettableBeanProperty newProp)",
    "methodName" : "replace",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4353() throws Throwable {\n    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    Class<RuntimeException> class0 = RuntimeException.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);\n    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;\n    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, \"kD'ab\", true, simpleType0, jsonTypeInfo_As0);\n    AnnotationMap annotationMap0 = new AnnotationMap();\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);\n    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;\n    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    vector0.add((SettableBeanProperty) creatorProperty0);\n    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(\"kD'ab\", \"kD'ab\");\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);\n    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);\n    BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);\n    beanPropertyMap2.replace(creatorProperty0);\n}",
    "testName" : "test4353"
  },
  "test4151" : {
    "methodSignature" : "protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException",
    "methodName" : "wrapAndThrow",
    "className" : "com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4151() throws Throwable {\n    MockIOException mockIOException0 = new MockIOException(\", \", (Throwable) null);\n    LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();\n    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);\n    beanPropertyMap0.wrapAndThrow(mockIOException0, \", \", \", \", (DeserializationContext) null);\n}",
    "testName" : "test4151"
  }
}