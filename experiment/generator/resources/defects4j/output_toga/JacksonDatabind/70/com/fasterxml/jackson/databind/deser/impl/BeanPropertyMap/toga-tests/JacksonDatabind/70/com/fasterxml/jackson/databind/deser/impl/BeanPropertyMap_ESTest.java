/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 06:24:22 GMT 2024
 */
package com.fasterxml.jackson.databind.deser.impl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyMetadata;
import com.fasterxml.jackson.databind.PropertyName;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.CreatorProperty;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.SettableBeanProperty;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.introspect.AnnotatedParameter;
import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams;
import com.fasterxml.jackson.databind.introspect.AnnotationMap;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.NameTransformer;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.InvocationTargetException;
import java.sql.SQLDataException;
import java.sql.SQLNonTransientConnectionException;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockError;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class BeanPropertyMap_ESTest extends BeanPropertyMap_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayList0);
        PropertyName propertyName0 = new PropertyName("/4 2pv3`*uh-^q|h", "d@3dhbfcr~d4ab");
        Class<CreatorProperty> class0 = CreatorProperty.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-308));
        MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, (JavaType) null);
        AnnotationMap annotationMap0 = new AnnotationMap();
        Integer integer0 = new Integer(93);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, "' missing from _propsInOrder", integer0, "' missing from _propsInOrder");
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        Class<InvocationTargetException> class1 = InvocationTargetException.class;
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException(class1, "Properties=[");
        MockError mockError0 = new MockError("' missing from _propsInOrder", jsonMappingException0);
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1374), mockError0, propertyMetadata0);
        CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer0);
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);
        SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 244);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
        ArrayNode arrayNode0 = objectNode0.withArray((String) null);
        JsonParser jsonParser0 = arrayNode0.traverse();
        DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, (InjectableValues) null);
        beanPropertyMap0.wrapAndThrow(sQLNonTransientConnectionException0, stack0, "N>[*=!PAW", defaultDeserializationContext0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
        SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
        int int0 = beanPropertyMap0.size();
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(true);
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, false);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "kD'ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("kD'ab", "kD'ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.withProperty(creatorProperty0);
        BeanPropertyMap beanPropertyMap2 = new BeanPropertyMap(beanPropertyMap1, true);
        beanPropertyMap2.size();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        stack0.setSize(2769);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        beanPropertyMap0.size();
        assertEquals(0, beanPropertyMap0.size());
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        stack0.add((SettableBeanProperty) null);
        stack0.addElement((SettableBeanProperty) null);
        stack0.add((SettableBeanProperty) null);
        stack0.add((SettableBeanProperty) null);
        stack0.add((SettableBeanProperty) null);
        stack0.add((SettableBeanProperty) null);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);
        beanPropertyMap0.size();
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "D4ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[1];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 40);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 40, classNameIdResolver0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(vector0, true);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "kD'ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("kD'ab", "kD'ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
        beanPropertyMap2.replace(creatorProperty0);
    }

    @Test(timeout = 4000)
    public void test1011() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "kD'ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("kD'ab", "kD'ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
        beanPropertyMap2.replace(creatorProperty0);
        beanPropertyMap2.size();
    }

    @Test(timeout = 4000)
    public void test1112() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "D4ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[1];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
        stack0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.assignIndexes();
        beanPropertyMap1.size();
    }

    @Test(timeout = 4000)
    public void test1213() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll((NameTransformer) null);
    }

    @Test(timeout = 4000)
    public void test1314() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    }

    @Test(timeout = 4000)
    public void test1415() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        stack0.add((SettableBeanProperty) null);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("mIm^<Fi", "mIm^<Fi");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.size();
    }

    @Test(timeout = 4000)
    public void test1416() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        stack0.add((SettableBeanProperty) null);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("mIm^<Fi", "mIm^<Fi");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    }

    @Test(timeout = 4000)
    public void test1517() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(vector0, true);
        TreeSet<String> treeSet0 = new TreeSet<String>();
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(treeSet0);
    }

    @Test(timeout = 4000)
    public void test1618() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "D4ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 22);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        Stack<String> stack0 = new Stack<String>();
        stack0.add("@");
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);
        beanPropertyMap1.size();
    }

    @Test(timeout = 4000)
    public void test1619() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "D4ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 22);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        Stack<String> stack0 = new Stack<String>();
        stack0.add("@");
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);
    }

    @Test(timeout = 4000)
    public void test1720() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        stack0.add((SettableBeanProperty) null);
        Set<String> set0 = ZoneId.getAvailableZoneIds();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(set0);
        beanPropertyMap1.size();
    }

    @Test(timeout = 4000)
    public void test1821() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, ", needed ", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-2147483645), referenceType0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        Stack<String> stack0 = new Stack<String>();
        stack0.add("");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);
        beanPropertyMap1.size();
    }

    @Test(timeout = 4000)
    public void test1922() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[1];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 12, classNameIdResolver0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        beanPropertyMap0.replace(creatorProperty0);
    }

    @Test(timeout = 4000)
    public void test2023() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "kD'ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        beanPropertyMap0.replace(creatorProperty0);
        creatorProperty0.getPropertyIndex();
        assertEquals(0, creatorProperty0.getPropertyIndex());
    }

    @Test(timeout = 4000)
    public void test2124() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find((-1));
        settableBeanProperty0.getName();
        assertNotNull(settableBeanProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test2225() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "D4ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[1];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
        stack0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(46);
        assertNotNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test2326() throws Throwable {
        LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
        beanPropertyMap0.find((String) null);
    }

    @Test(timeout = 4000)
    public void test2427() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "kD'ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find("~Vt80H/E%y^8F4bpJPvl");
        assertNotNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test2528() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("~D4ab", "~D4ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.withProperty(creatorProperty0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("");
        assertNotNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test2529() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("~D4ab", "~D4ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.withProperty(creatorProperty0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("");
        beanPropertyMap1.size();
    }

    @Test(timeout = 4000)
    public void test2530() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("~D4ab", "~D4ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.withProperty(creatorProperty0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("");
        settableBeanProperty0.getName();
        assertNotNull(settableBeanProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test2631() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "kD'ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("kD'ab", "kD'ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.withProperty(creatorProperty0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("~Vt80H/E%y^8F4bpJPvl");
    }

    @Test(timeout = 4000)
    public void test2633() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "kD'ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("kD'ab", "kD'ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.withProperty(creatorProperty0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("~Vt80H/E%y^8F4bpJPvl");
        beanPropertyMap1.size();
    }

    @Test(timeout = 4000)
    public void test2734() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("~D4ab", "~D4ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.withProperty(creatorProperty0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("");
        settableBeanProperty0.getName();
        assertNotNull(settableBeanProperty0.getName());
    }

    @Test(timeout = 4000)
    public void test2735() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("~D4ab", "~D4ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.withProperty(creatorProperty0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("");
        assertNotNull(settableBeanProperty0);
    }

    @Test(timeout = 4000)
    public void test2736() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("~D4ab", "~D4ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.withProperty(creatorProperty0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("");
        beanPropertyMap1.size();
    }

    @Test(timeout = 4000)
    public void test2837() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        Object object0 = new Object();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1539, object0, propertyMetadata0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);
        beanPropertyMap0.remove(creatorProperty0);
    }

    @Test(timeout = 4000)
    public void test2938() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        Object object0 = new Object();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1539, object0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);
        beanPropertyMap0.remove(creatorProperty0);
        beanPropertyMap0.size();
    }

    @Test(timeout = 4000)
    public void test3039() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        Object object0 = new Object();
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1539, object0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("~D4ab", "~D4ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);
        NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer1);
        beanPropertyMap1.remove(creatorProperty0);
        beanPropertyMap1.size();
    }

    @Test(timeout = 4000)
    public void test3140() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "D4ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 12, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(vector0, true);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        PipedInputStream pipedInputStream0 = new PipedInputStream(3896);
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
        Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
        byte[] byteArray0 = new byte[4];
        UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (-1700), 2, false);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) filteringParserDelegate0, (JsonParser) uTF8StreamJsonParser0);
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        beanPropertyMap0.findDeserializeAndSet(jsonParserSequence0, defaultDeserializationContext_Impl0, (Object) null, "");
    }

    @Test(timeout = 4000)
    public void test3241() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, false);
        boolean boolean0 = beanPropertyMap0.findDeserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null, "com.fasterxml.jackson.databind.ext.DOMSerializer");
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test3342() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "D4ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);
        String string0 = beanPropertyMap0.toString();
    }

    @Test(timeout = 4000)
    public void test3443() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        NameTransformer nameTransformer0 = NameTransformer.NOP;
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename((SettableBeanProperty) null, nameTransformer0);
    }

    @Test(timeout = 4000)
    public void test3544() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(jsonDeserializer0).when(jsonDeserializer1).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
        CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
        vector0.add((SettableBeanProperty) creatorProperty1);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("D@3dHBFcr", "~D4ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.size();
    }

    @Test(timeout = 4000)
    public void test3545() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.USE_DEFAULT;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
        JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        doReturn(jsonDeserializer0).when(jsonDeserializer1).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
        CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
        vector0.add((SettableBeanProperty) creatorProperty1);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("D@3dHBFcr", "~D4ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    }

    @Test(timeout = 4000)
    public void test3646() throws Throwable {
        ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayList0);
        InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null, (String) null);
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, arrayList0, (String) null, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test3747() throws Throwable {
        ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayList0);
        MockThrowable mockThrowable0 = new MockThrowable();
        InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockThrowable0, (String) null);
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, arrayList0, (String) null, defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test3848() throws Throwable {
        ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayList0);
        SQLDataException sQLDataException0 = new SQLDataException((String) null);
        MockError mockError0 = new MockError("jj!QyOB<8-", sQLDataException0);
        beanPropertyMap0.wrapAndThrow(mockError0, arrayList0, "/o|v3`*u'h-^q|h", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test3949() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException("?Z*&_qHyxb+");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        beanPropertyMap0.wrapAndThrow(jsonMappingException0, stack0, "?Z*&_qHyxb+", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test4050() throws Throwable {
        Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException("?ZW&_9p~WHa7Jba+");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
        beanPropertyMap0.wrapAndThrow(jsonMappingException0, "?ZW&_9p~WHa7Jba+", "?ZW&_9p~WHa7Jba+", defaultDeserializationContext_Impl0);
    }

    @Test(timeout = 4000)
    public void test4151() throws Throwable {
        MockIOException mockIOException0 = new MockIOException(", ", (Throwable) null);
        LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
        beanPropertyMap0.wrapAndThrow(mockIOException0, ", ", ", ", (DeserializationContext) null);
    }

    @Test(timeout = 4000)
    public void test4252() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "kD'ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("kD'ab", "kD'ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
        beanPropertyMap2.replace(creatorProperty0);
        creatorProperty0.getCreatorIndex();
        assertEquals(0, creatorProperty0.getCreatorIndex());
    }

    @Test(timeout = 4000)
    public void test4353() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "kD'ab", true, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("kD'ab", "kD'ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
        beanPropertyMap2.replace(creatorProperty0);
    }

    @Test(timeout = 4000)
    public void test4454() throws Throwable {
        Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
        PropertyName propertyName0 = PropertyName.NO_NAME;
        Class<RuntimeException> class0 = RuntimeException.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
        ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
        AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, "~D4ab", false, simpleType0, jsonTypeInfo_As0);
        AnnotationMap annotationMap0 = new AnnotationMap();
        JavaType[] javaTypeArray0 = new JavaType[0];
        CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
        AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
        PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
        CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
        vector0.add((SettableBeanProperty) creatorProperty0);
        NameTransformer nameTransformer0 = NameTransformer.simpleTransformer("~D4ab", "~D4ab");
        BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
        BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
        beanPropertyMap1.init(vector0);
        beanPropertyMap1.withProperty(creatorProperty0);
    }
}
