focal_method,test_prefix,docstring
"/*
    /**********************************************************
    /* Helper methods
    /**********************************************************
     */
protected SettableBeanProperty _rename(SettableBeanProperty prop, NameTransformer xf) {
    if (prop == null) {
        return prop;
    }
    String newName = xf.transform(prop.getName());
    prop = prop.withSimpleName(newName);
    JsonDeserializer<?> deser = prop.getValueDeserializer();
    if (deser != null) {
        @SuppressWarnings(""unchecked"")
        JsonDeserializer<Object> newDeser = (JsonDeserializer<Object>) deser.unwrappingDeserializer(xf);
        if (newDeser != deser) {
            prop = prop.withValueDeserializer(newDeser);
        }
    }
    return prop;
}","public void test000() throws Throwable {
    ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayList0);
    PropertyName propertyName0 = new PropertyName(""/4 2pv3`*uh-^q|h"", ""d@3dhbfcr~d4ab"");
    Class<CreatorProperty> class0 = CreatorProperty.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-308));
    MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(simpleType0, simpleType0, (JavaType) null);
    AnnotationMap annotationMap0 = new AnnotationMap();
    Integer integer0 = new Integer(93);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.construct(true, ""' missing from _propsInOrder"", integer0, ""' missing from _propsInOrder"");
    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Class<InvocationTargetException> class1 = InvocationTargetException.class;
    JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.instantiationException(class1, ""Properties=["");
    MockError mockError0 = new MockError(""' missing from _propsInOrder"", jsonMappingException0);
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, mapLikeType0, propertyName0, (TypeDeserializer) null, annotationMap0, (AnnotatedParameter) null, (-1374), mockError0, propertyMetadata0);
    CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(coreXMLDeserializers_Std0);
    NameTransformer nameTransformer0 = NameTransformer.NOP;
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename(creatorProperty1, nameTransformer0);
    assertSame(settableBeanProperty0, creatorProperty1);
}",""
"protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException {
    // inlined 'throwOrReturnThrowable'
    while (t instanceof InvocationTargetException && t.getCause() != null) {
        t = t.getCause();
    }
    // Errors to be passed as is
    if (t instanceof Error) {
        throw (Error) t;
    }
    // StackOverflowErrors are tricky ones; need to be careful...
    boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);
    // Ditto for IOExceptions; except we may want to wrap JSON exceptions
    if (t instanceof IOException) {
        if (!wrap || !(t instanceof JsonProcessingException)) {
            throw (IOException) t;
        }
    } else if (!wrap) {
        // allow disabling wrapping for unchecked exceptions
        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
    }
    throw JsonMappingException.wrapWithPath(t, bean, fieldName);
}","public void test011() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);
    SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((String) null, (String) null, 244);
    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig((BaseSettings) null, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, (ConfigOverrides) null);
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    ArrayNode arrayNode0 = objectNode0.withArray((String) null);
    JsonParser jsonParser0 = arrayNode0.traverse();
    DefaultDeserializationContext defaultDeserializationContext0 = defaultDeserializationContext_Impl0.createInstance(deserializationConfig0, jsonParser0, (InjectableValues) null);
    try {
        beanPropertyMap0.wrapAndThrow(sQLNonTransientConnectionException0, stack0, ""N>[*=!PAW"", defaultDeserializationContext0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // (was java.sql.SQLNonTransientConnectionException) (through reference chain: java.util.Stack[\""N>[*=!PAW\""])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
"public SettableBeanProperty[] getPropertiesInInsertionOrder() {
    return _propsInOrder;
}","public void test022() throws Throwable {
    TreeSet<SettableBeanProperty> treeSet0 = new TreeSet<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(treeSet0, false);
    SettableBeanProperty[] settableBeanPropertyArray0 = beanPropertyMap0.getPropertiesInInsertionOrder();
    assertEquals(0, settableBeanPropertyArray0.length);
}","/**
 * Method that will re-create initial insertion-ordering of
 * properties contained in this map. Note that if properties
 * have been removed, array may contain nulls; otherwise
 * it should be consecutive.
 *
 * @since 2.1
 */"
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test033() throws Throwable {
    LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(linkedList0, false);
    int int0 = beanPropertyMap0.size();
    assertEquals(0, int0);
}",""
"public BeanPropertyMap withCaseInsensitivity(boolean state) {
    if (_caseInsensitive == state) {
        return this;
    }
    return new BeanPropertyMap(this, state);
}","public void test044() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(true);
    assertNotSame(beanPropertyMap1, beanPropertyMap0);
}","/**
 * Mutant factory method that constructs a new instance if desired case-insensitivity
 * state differs from the state of this instance; if states are the same, returns
 * <code>this</code>.
 *
 * @since 2.8
 */"
"public BeanPropertyMap withCaseInsensitivity(boolean state) {
    if (_caseInsensitive == state) {
        return this;
    }
    return new BeanPropertyMap(this, state);
}","public void test055() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, false);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withCaseInsensitivity(false);
    assertSame(beanPropertyMap1, beanPropertyMap0);
}","/**
 * Mutant factory method that constructs a new instance if desired case-insensitivity
 * state differs from the state of this instance; if states are the same, returns
 * <code>this</code>.
 *
 * @since 2.8
 */"
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test066() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""kD'ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""kD'ab"", ""kD'ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    beanPropertyMap1.withProperty(creatorProperty0);
    BeanPropertyMap beanPropertyMap2 = new BeanPropertyMap(beanPropertyMap1, true);
    assertEquals(4, beanPropertyMap2.size());
}",""
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test077() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    stack0.setSize(2769);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
    assertEquals(2769, beanPropertyMap0.size());
}",""
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test088() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    stack0.add((SettableBeanProperty) null);
    stack0.addElement((SettableBeanProperty) null);
    stack0.add((SettableBeanProperty) null);
    stack0.add((SettableBeanProperty) null);
    stack0.add((SettableBeanProperty) null);
    stack0.add((SettableBeanProperty) null);
    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);
    assertEquals(6, beanPropertyMap0.size());
}",""
"public BeanPropertyMap withProperty(SettableBeanProperty newProp) {
    // First: may be able to just replace?
    String key = getPropertyName(newProp);
    for (int i = 1, end = _hashArea.length; i < end; i += 2) {
        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
        if ((prop != null) && prop.getName().equals(key)) {
            _hashArea[i] = newProp;
            _propsInOrder[_findFromOrdered(prop)] = newProp;
            return this;
        }
    }
    // If not, append
    final int slot = _hashCode(key);
    final int hashSize = _hashMask + 1;
    int ix = (slot << 1);
    // primary slot not free?
    if (_hashArea[ix] != null) {
        // secondary?
        ix = (hashSize + (slot >> 1)) << 1;
        if (_hashArea[ix] != null) {
            // ok, spill over.
            ix = ((hashSize + (hashSize >> 1)) << 1) + _spillCount;
            _spillCount += 2;
            if (ix >= _hashArea.length) {
                _hashArea = Arrays.copyOf(_hashArea, _hashArea.length + 4);
                // Uncomment for debugging only
                /*
for (int i = 0; i < _hashArea.length; i += 2) {
    if (_hashArea[i] != null) {
        System.err.println(""Property #""+(i/2)+"" '""+_hashArea[i]+""'..."");
    }
}
System.err.println(""And new propr #""+slot+"" '""+key+""'"");
*/
            }
        }
    }
    _hashArea[ix] = key;
    _hashArea[ix + 1] = newProp;
    int last = _propsInOrder.length;
    _propsInOrder = Arrays.copyOf(_propsInOrder, last + 1);
    _propsInOrder[last] = newProp;
    // should we just create a new one? Or is resetting ok?
    return this;
}","public void test099() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""D4ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[1];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 40);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 40, classNameIdResolver0, propertyMetadata0);
    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(vector0, true);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withProperty(creatorProperty0);
    assertSame(beanPropertyMap0, beanPropertyMap1);
}","/**
 * Fluent copy method that creates a new instance that is a copy
 * of this instance except for one additional property that is
 * passed as the argument.
 * Note that method does not modify this instance but constructs
 * and returns a new one.
 */"
"public void replace(SettableBeanProperty newProp) {
    String key = getPropertyName(newProp);
    int ix = _findIndexInHash(key);
    if (ix >= 0) {
        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[ix];
        _hashArea[ix] = newProp;
        // also, replace in in-order
        _propsInOrder[_findFromOrdered(prop)] = newProp;
        return;
    }
    throw new NoSuchElementException(""No entry '"" + key + ""' found, can't replace"");
}","public void test1010() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""kD'ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""kD'ab"", ""kD'ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
    beanPropertyMap2.replace(creatorProperty0);
    assertNotSame(beanPropertyMap2, beanPropertyMap0);
}","/**
 * Specialized method that can be used to replace an existing entry
 * (note: entry MUST exist; otherwise exception is thrown) with
 * specified replacement.
 */"
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test1011() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""kD'ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""kD'ab"", ""kD'ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
    beanPropertyMap2.replace(creatorProperty0);
    assertEquals(1, beanPropertyMap2.size());
}",""
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test1112() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""D4ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[1];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
    stack0.add((SettableBeanProperty) creatorProperty0);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.assignIndexes();
    assertEquals(1, beanPropertyMap1.size());
}",""
"public BeanPropertyMap renameAll(NameTransformer transformer) {
    if (transformer == null || (transformer == NameTransformer.NOP)) {
        return this;
    }
    // Try to retain insertion ordering as well
    final int len = _propsInOrder.length;
    ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(len);
    for (int i = 0; i < len; ++i) {
        SettableBeanProperty prop = _propsInOrder[i];
        // What to do with holes? For now, retain
        if (prop == null) {
            newProps.add(prop);
            continue;
        }
        newProps.add(_rename(prop, transformer));
    }
    // should we try to re-index? Ordering probably changed but caller probably doesn't want changes...
    return new BeanPropertyMap(_caseInsensitive, newProps);
}","public void test1213() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll((NameTransformer) null);
    assertSame(beanPropertyMap1, beanPropertyMap0);
}","/**
 * Mutant factory method for constructing a map where all entries use given
 * prefix
 */"
"public BeanPropertyMap renameAll(NameTransformer transformer) {
    if (transformer == null || (transformer == NameTransformer.NOP)) {
        return this;
    }
    // Try to retain insertion ordering as well
    final int len = _propsInOrder.length;
    ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(len);
    for (int i = 0; i < len; ++i) {
        SettableBeanProperty prop = _propsInOrder[i];
        // What to do with holes? For now, retain
        if (prop == null) {
            newProps.add(prop);
            continue;
        }
        newProps.add(_rename(prop, transformer));
    }
    // should we try to re-index? Ordering probably changed but caller probably doesn't want changes...
    return new BeanPropertyMap(_caseInsensitive, newProps);
}","public void test1314() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    NameTransformer nameTransformer0 = NameTransformer.NOP;
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    assertSame(beanPropertyMap1, beanPropertyMap0);
}","/**
 * Mutant factory method for constructing a map where all entries use given
 * prefix
 */"
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test1415() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    stack0.add((SettableBeanProperty) null);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""mIm^<Fi"", ""mIm^<Fi"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    assertEquals(1, beanPropertyMap1.size());
}",""
"public BeanPropertyMap renameAll(NameTransformer transformer) {
    if (transformer == null || (transformer == NameTransformer.NOP)) {
        return this;
    }
    // Try to retain insertion ordering as well
    final int len = _propsInOrder.length;
    ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(len);
    for (int i = 0; i < len; ++i) {
        SettableBeanProperty prop = _propsInOrder[i];
        // What to do with holes? For now, retain
        if (prop == null) {
            newProps.add(prop);
            continue;
        }
        newProps.add(_rename(prop, transformer));
    }
    // should we try to re-index? Ordering probably changed but caller probably doesn't want changes...
    return new BeanPropertyMap(_caseInsensitive, newProps);
}","public void test1416() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    stack0.add((SettableBeanProperty) null);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""mIm^<Fi"", ""mIm^<Fi"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    assertNotSame(beanPropertyMap1, beanPropertyMap0);
}","/**
 * Mutant factory method for constructing a map where all entries use given
 * prefix
 */"
"public BeanPropertyMap withoutProperties(Collection<String> toExclude) {
    if (toExclude.isEmpty()) {
        return this;
    }
    final int len = _propsInOrder.length;
    ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(len);
    for (int i = 0; i < len; ++i) {
        SettableBeanProperty prop = _propsInOrder[i];
        // 01-May-2015, tatu: Not 100% sure if existing `null`s should be retained;
        //   or, if entries to ignore should be retained as nulls. For now just
        //   prune them out
        if (prop != null) {
            // may contain holes, too, check.
            if (!toExclude.contains(prop.getName())) {
                newProps.add(prop);
            }
        }
    }
    // should we try to re-index? Apparently no need
    return new BeanPropertyMap(_caseInsensitive, newProps);
}","public void test1517() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(vector0, true);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(treeSet0);
    assertSame(beanPropertyMap1, beanPropertyMap0);
}","/**
 * Mutant factory method that will use this instance as the base, and
 * construct an instance that is otherwise same except for excluding
 * properties with specified names.
 *
 * @since 2.8
 */"
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test1618() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""D4ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 22);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    Stack<String> stack0 = new Stack<String>();
    stack0.add(""@"");
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);
    assertEquals(1, beanPropertyMap1.size());
}",""
"public BeanPropertyMap withoutProperties(Collection<String> toExclude) {
    if (toExclude.isEmpty()) {
        return this;
    }
    final int len = _propsInOrder.length;
    ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(len);
    for (int i = 0; i < len; ++i) {
        SettableBeanProperty prop = _propsInOrder[i];
        // 01-May-2015, tatu: Not 100% sure if existing `null`s should be retained;
        //   or, if entries to ignore should be retained as nulls. For now just
        //   prune them out
        if (prop != null) {
            // may contain holes, too, check.
            if (!toExclude.contains(prop.getName())) {
                newProps.add(prop);
            }
        }
    }
    // should we try to re-index? Apparently no need
    return new BeanPropertyMap(_caseInsensitive, newProps);
}","public void test1619() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""D4ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 22);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    Stack<String> stack0 = new Stack<String>();
    stack0.add(""@"");
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);
    assertNotSame(beanPropertyMap1, beanPropertyMap0);
}","/**
 * Mutant factory method that will use this instance as the base, and
 * construct an instance that is otherwise same except for excluding
 * properties with specified names.
 *
 * @since 2.8
 */"
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test1720() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    stack0.add((SettableBeanProperty) null);
    Set<String> set0 = ZoneId.getAvailableZoneIds();
    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, true);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(set0);
    assertEquals(0, beanPropertyMap1.size());
}",""
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test1821() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, classNameIdResolver0, "", needed "", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, simpleType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-2147483645), referenceType0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    Stack<String> stack0 = new Stack<String>();
    stack0.add("""");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.withoutProperties(stack0);
    assertEquals(0, beanPropertyMap1.size());
}",""
"public void replace(SettableBeanProperty newProp) {
    String key = getPropertyName(newProp);
    int ix = _findIndexInHash(key);
    if (ix >= 0) {
        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[ix];
        _hashArea[ix] = newProp;
        // also, replace in in-order
        _propsInOrder[_findFromOrdered(prop)] = newProp;
        return;
    }
    throw new NoSuchElementException(""No entry '"" + key + ""' found, can't replace"");
}","public void test1922() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[1];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 12, classNameIdResolver0, propertyMetadata0);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    // Undeclared exception!
    try {
        beanPropertyMap0.replace(creatorProperty0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // No entry '' found, can't replace
        //
        verifyException(""com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap"", e);
    }
}","/**
 * Specialized method that can be used to replace an existing entry
 * (note: entry MUST exist; otherwise exception is thrown) with
 * specified replacement.
 */"
"public int getPropertyIndex() {
    return _propertyIndex;
}","public void test2023() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""kD'ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    beanPropertyMap0.replace(creatorProperty0);
    assertEquals((-1), creatorProperty0.getPropertyIndex());
}","/**
 * Method for accessing unique index of this property; indexes are
 * assigned once all properties of a {@link BeanDeserializer} have
 * been collected.
 *
 * @return Index of this property
 */"
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test2124() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find((-1));
    assertEquals("""", settableBeanProperty0.getName());
}",""
"public SettableBeanProperty find(int index) {
    // note: will scan the whole area, including primary, secondary and
    // possible spill-area
    for (int i = 1, end = _hashArea.length; i < end; i += 2) {
        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
        if ((prop != null) && (index == prop.getPropertyIndex())) {
            return prop;
        }
    }
    return null;
}","public void test2225() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""D4ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[1];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
    stack0.add((SettableBeanProperty) creatorProperty0);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, stack0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(46);
    assertNull(settableBeanProperty0);
}","/**
 * @since 2.3
 */"
"public SettableBeanProperty find(String key) {
    if (key == null) {
        throw new IllegalArgumentException(""Can not pass null property name"");
    }
    if (_caseInsensitive) {
        key = key.toLowerCase();
    }
    // inlined `_hashCode(key)`
    int slot = key.hashCode() & _hashMask;
    //        int h = key.hashCode();
    //        int slot = (h + (h >> 13)) & _hashMask;
    int ix = (slot << 1);
    Object match = _hashArea[ix];
    if ((match == key) || key.equals(match)) {
        return (SettableBeanProperty) _hashArea[ix + 1];
    }
    return _find2(key, slot, match);
}","public void test2326() throws Throwable {
    LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, linkedList0);
    // Undeclared exception!
    try {
        beanPropertyMap0.find((String) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not pass null property name
        //
        verifyException(""com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap"", e);
    }
}",""
"public SettableBeanProperty find(String key) {
    if (key == null) {
        throw new IllegalArgumentException(""Can not pass null property name"");
    }
    if (_caseInsensitive) {
        key = key.toLowerCase();
    }
    // inlined `_hashCode(key)`
    int slot = key.hashCode() & _hashMask;
    //        int h = key.hashCode();
    //        int slot = (h + (h >> 13)) & _hashMask;
    int ix = (slot << 1);
    Object match = _hashArea[ix];
    if ((match == key) || key.equals(match)) {
        return (SettableBeanProperty) _hashArea[ix + 1];
    }
    return _find2(key, slot, match);
}","public void test2427() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""kD'ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap0.find(""~Vt80H/E%y^8F4bpJPvl"");
    assertNull(settableBeanProperty0);
}",""
"public SettableBeanProperty find(String key) {
    if (key == null) {
        throw new IllegalArgumentException(""Can not pass null property name"");
    }
    if (_caseInsensitive) {
        key = key.toLowerCase();
    }
    // inlined `_hashCode(key)`
    int slot = key.hashCode() & _hashMask;
    //        int h = key.hashCode();
    //        int slot = (h + (h >> 13)) & _hashMask;
    int ix = (slot << 1);
    Object match = _hashArea[ix];
    if ((match == key) || key.equals(match)) {
        return (SettableBeanProperty) _hashArea[ix + 1];
    }
    return _find2(key, slot, match);
}","public void test2528() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""~D4ab"", ""~D4ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    beanPropertyMap1.withProperty(creatorProperty0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("""");
    assertNotNull(settableBeanProperty0);
}",""
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test2529() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""~D4ab"", ""~D4ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    beanPropertyMap1.withProperty(creatorProperty0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("""");
    assertEquals(1, beanPropertyMap1.size());
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test2530() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""~D4ab"", ""~D4ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    beanPropertyMap1.withProperty(creatorProperty0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("""");
    assertEquals("""", settableBeanProperty0.getName());
}",""
"public SettableBeanProperty find(String key) {
    if (key == null) {
        throw new IllegalArgumentException(""Can not pass null property name"");
    }
    if (_caseInsensitive) {
        key = key.toLowerCase();
    }
    // inlined `_hashCode(key)`
    int slot = key.hashCode() & _hashMask;
    //        int h = key.hashCode();
    //        int slot = (h + (h >> 13)) & _hashMask;
    int ix = (slot << 1);
    Object match = _hashArea[ix];
    if ((match == key) || key.equals(match)) {
        return (SettableBeanProperty) _hashArea[ix + 1];
    }
    return _find2(key, slot, match);
}","public void test2631() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""kD'ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""kD'ab"", ""kD'ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    beanPropertyMap1.withProperty(creatorProperty0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find(""~Vt80H/E%y^8F4bpJPvl"");
    assertNotSame(beanPropertyMap1, beanPropertyMap0);
}",""
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test2633() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""kD'ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""kD'ab"", ""kD'ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    beanPropertyMap1.withProperty(creatorProperty0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find(""~Vt80H/E%y^8F4bpJPvl"");
    assertEquals(2, beanPropertyMap1.size());
}",""
"/*
    /**********************************************************
    /* BeanProperty impl
    /**********************************************************
     */
@Override
public final String getName() {
    return _propName.getSimpleName();
}","public void test2734() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""~D4ab"", ""~D4ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    beanPropertyMap1.withProperty(creatorProperty0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("""");
    assertEquals("""", settableBeanProperty0.getName());
}",""
"public SettableBeanProperty find(String key) {
    if (key == null) {
        throw new IllegalArgumentException(""Can not pass null property name"");
    }
    if (_caseInsensitive) {
        key = key.toLowerCase();
    }
    // inlined `_hashCode(key)`
    int slot = key.hashCode() & _hashMask;
    //        int h = key.hashCode();
    //        int slot = (h + (h >> 13)) & _hashMask;
    int ix = (slot << 1);
    Object match = _hashArea[ix];
    if ((match == key) || key.equals(match)) {
        return (SettableBeanProperty) _hashArea[ix + 1];
    }
    return _find2(key, slot, match);
}","public void test2735() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""~D4ab"", ""~D4ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    beanPropertyMap1.withProperty(creatorProperty0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("""");
    assertNotNull(settableBeanProperty0);
}",""
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test2736() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""~D4ab"", ""~D4ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    beanPropertyMap1.withProperty(creatorProperty0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap1.find("""");
    assertEquals(2, beanPropertyMap1.size());
}",""
"public void remove(SettableBeanProperty propToRm) {
    ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);
    String key = getPropertyName(propToRm);
    boolean found = false;
    for (int i = 1, end = _hashArea.length; i < end; i += 2) {
        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
        if (prop == null) {
            continue;
        }
        if (!found) {
            // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,
            //   as only former is lower-case in case-insensitive case
            found = key.equals(prop.getName());
            if (found) {
                // need to leave a hole here
                _propsInOrder[_findFromOrdered(prop)] = null;
                continue;
            }
        }
        props.add(prop);
    }
    if (!found) {
        throw new NoSuchElementException(""No entry '"" + propToRm.getName() + ""' found, can't remove"");
    }
    init(props);
}","public void test2837() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    Object object0 = new Object();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1539, object0, propertyMetadata0);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);
    // Undeclared exception!
    try {
        beanPropertyMap0.remove(creatorProperty0);
        fail(""Expecting exception: NoSuchElementException"");
    } catch (NoSuchElementException e) {
        //
        // No entry '' found, can't remove
        //
        verifyException(""com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap"", e);
    }
}","/**
 * Specialized method for removing specified existing entry.
 * NOTE: entry MUST exist, otherwise an exception is thrown.
 */"
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test2938() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    Object object0 = new Object();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1539, object0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);
    beanPropertyMap0.remove(creatorProperty0);
    assertEquals(1, beanPropertyMap0.size());
}",""
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test3039() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    Object object0 = new Object();
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, referenceType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 1539, object0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""~D4ab"", ""~D4ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);
    NameTransformer nameTransformer1 = NameTransformer.chainedTransformer(nameTransformer0, nameTransformer0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer1);
    beanPropertyMap1.remove(creatorProperty0);
    assertEquals(1, beanPropertyMap1.size());
}",""
"public boolean findDeserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, String key) throws IOException {
    final SettableBeanProperty prop = find(key);
    if (prop == null) {
        return false;
    }
    try {
        prop.deserializeAndSet(p, ctxt, bean);
    } catch (Exception e) {
        wrapAndThrow(e, bean, key, ctxt);
    }
    return true;
}","public void test3140() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""D4ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 12, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(vector0, true);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    PipedInputStream pipedInputStream0 = new PipedInputStream(3896);
    IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
    byte[] byteArray0 = new byte[4];
    UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, objectMapper0, byteQuadsCanonicalizer0, byteArray0, (-1700), 2, false);
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(uTF8StreamJsonParser0, tokenFilter0, true, true);
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(true, (JsonParser) filteringParserDelegate0, (JsonParser) uTF8StreamJsonParser0);
    DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        beanPropertyMap0.findDeserializeAndSet(jsonParserSequence0, defaultDeserializationContext_Impl0, (Object) null, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.DeserializerCache"", e);
    }
}","/**
 * Convenience method that tries to find property with given name, and
 * if it is found, call {@link SettableBeanProperty#deserializeAndSet}
 * on it, and return true; or, if not found, return false.
 * Note, too, that if deserialization is attempted, possible exceptions
 * are wrapped if and as necessary, so caller need not handle those.
 *
 * @since 2.5
 */"
"public boolean findDeserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, String key) throws IOException {
    final SettableBeanProperty prop = find(key);
    if (prop == null) {
        return false;
    }
    try {
        prop.deserializeAndSet(p, ctxt, bean);
    } catch (Exception e) {
        wrapAndThrow(e, bean, key, ctxt);
    }
    return true;
}","public void test3241() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = BeanPropertyMap.construct(stack0, false);
    boolean boolean0 = beanPropertyMap0.findDeserializeAndSet((JsonParser) null, (DeserializationContext) null, (Object) null, ""com.fasterxml.jackson.databind.ext.DOMSerializer"");
    assertFalse(boolean0);
}","/**
 * Convenience method that tries to find property with given name, and
 * if it is found, call {@link SettableBeanProperty#deserializeAndSet}
 * on it, and return true; or, if not found, return false.
 * Note, too, that if deserialization is attempted, possible exceptions
 * are wrapped if and as necessary, so caller need not handle those.
 *
 * @since 2.5
 */"
"@Override
public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(""Properties=["");
    int count = 0;
    Iterator<SettableBeanProperty> it = iterator();
    while (it.hasNext()) {
        SettableBeanProperty prop = it.next();
        if (count++ > 0) {
            sb.append("", "");
        }
        sb.append(prop.getName());
        sb.append('(');
        sb.append(prop.getType());
        sb.append(')');
    }
    sb.append(']');
    return sb.toString();
}","public void test3342() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""D4ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, vector0);
    String string0 = beanPropertyMap0.toString();
    assertEquals(""Properties=[([array type, component type: [reference type, class java.lang.RuntimeException<java.lang.RuntimeException<[simple type, class java.lang.RuntimeException]>]]), ([array type, component type: [reference type, class java.lang.RuntimeException<java.lang.RuntimeException<[simple type, class java.lang.RuntimeException]>]])]"", string0);
}",""
"/*
    /**********************************************************
    /* Helper methods
    /**********************************************************
     */
protected SettableBeanProperty _rename(SettableBeanProperty prop, NameTransformer xf) {
    if (prop == null) {
        return prop;
    }
    String newName = xf.transform(prop.getName());
    prop = prop.withSimpleName(newName);
    JsonDeserializer<?> deser = prop.getValueDeserializer();
    if (deser != null) {
        @SuppressWarnings(""unchecked"")
        JsonDeserializer<Object> newDeser = (JsonDeserializer<Object>) deser.unwrappingDeserializer(xf);
        if (newDeser != deser) {
            prop = prop.withValueDeserializer(newDeser);
        }
    }
    return prop;
}","public void test3443() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    NameTransformer nameTransformer0 = NameTransformer.NOP;
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
    SettableBeanProperty settableBeanProperty0 = beanPropertyMap0._rename((SettableBeanProperty) null, nameTransformer0);
    assertNull(settableBeanProperty0);
}",""
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
public int size() {
    return _size;
}","public void test3544() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
    JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn(jsonDeserializer0).when(jsonDeserializer1).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
    CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
    vector0.add((SettableBeanProperty) creatorProperty1);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""D@3dHBFcr"", ""~D4ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    assertEquals(1, beanPropertyMap1.size());
}",""
"public BeanPropertyMap renameAll(NameTransformer transformer) {
    if (transformer == null || (transformer == NameTransformer.NOP)) {
        return this;
    }
    // Try to retain insertion ordering as well
    final int len = _propsInOrder.length;
    ArrayList<SettableBeanProperty> newProps = new ArrayList<SettableBeanProperty>(len);
    for (int i = 0; i < len; ++i) {
        SettableBeanProperty prop = _propsInOrder[i];
        // What to do with holes? For now, retain
        if (prop == null) {
            newProps.add(prop);
            continue;
        }
        newProps.add(_rename(prop, transformer));
    }
    // should we try to re-index? Ordering probably changed but caller probably doesn't want changes...
    return new BeanPropertyMap(_caseInsensitive, newProps);
}","public void test3545() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 12);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, (-783), classNameIdResolver0, propertyMetadata0);
    JsonDeserializer<String> jsonDeserializer0 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    JsonDeserializer<String> jsonDeserializer1 = (JsonDeserializer<String>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    doReturn(jsonDeserializer0).when(jsonDeserializer1).unwrappingDeserializer(any(com.fasterxml.jackson.databind.util.NameTransformer.class));
    CreatorProperty creatorProperty1 = creatorProperty0.withValueDeserializer(jsonDeserializer1);
    vector0.add((SettableBeanProperty) creatorProperty1);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""D@3dHBFcr"", ""~D4ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    assertNotSame(beanPropertyMap1, beanPropertyMap0);
}","/**
 * Mutant factory method for constructing a map where all entries use given
 * prefix
 */"
"protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException {
    // inlined 'throwOrReturnThrowable'
    while (t instanceof InvocationTargetException && t.getCause() != null) {
        t = t.getCause();
    }
    // Errors to be passed as is
    if (t instanceof Error) {
        throw (Error) t;
    }
    // StackOverflowErrors are tricky ones; need to be careful...
    boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);
    // Ditto for IOExceptions; except we may want to wrap JSON exceptions
    if (t instanceof IOException) {
        if (!wrap || !(t instanceof JsonProcessingException)) {
            throw (IOException) t;
        }
    } else if (!wrap) {
        // allow disabling wrapping for unchecked exceptions
        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
    }
    throw JsonMappingException.wrapWithPath(t, bean, fieldName);
}","public void test3646() throws Throwable {
    ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayList0);
    InvocationTargetException invocationTargetException0 = new InvocationTargetException((Throwable) null, (String) null);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, arrayList0, (String) null, defaultDeserializationContext_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // Can not pass null fieldName
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException$Reference"", e);
    }
}",""
"protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException {
    // inlined 'throwOrReturnThrowable'
    while (t instanceof InvocationTargetException && t.getCause() != null) {
        t = t.getCause();
    }
    // Errors to be passed as is
    if (t instanceof Error) {
        throw (Error) t;
    }
    // StackOverflowErrors are tricky ones; need to be careful...
    boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);
    // Ditto for IOExceptions; except we may want to wrap JSON exceptions
    if (t instanceof IOException) {
        if (!wrap || !(t instanceof JsonProcessingException)) {
            throw (IOException) t;
        }
    } else if (!wrap) {
        // allow disabling wrapping for unchecked exceptions
        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
    }
    throw JsonMappingException.wrapWithPath(t, bean, fieldName);
}","public void test3747() throws Throwable {
    ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, arrayList0);
    MockThrowable mockThrowable0 = new MockThrowable();
    InvocationTargetException invocationTargetException0 = new InvocationTargetException(mockThrowable0, (String) null);
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        beanPropertyMap0.wrapAndThrow(invocationTargetException0, arrayList0, (String) null, defaultDeserializationContext_Impl0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // Can not pass null fieldName
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException$Reference"", e);
    }
}",""
"protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException {
    // inlined 'throwOrReturnThrowable'
    while (t instanceof InvocationTargetException && t.getCause() != null) {
        t = t.getCause();
    }
    // Errors to be passed as is
    if (t instanceof Error) {
        throw (Error) t;
    }
    // StackOverflowErrors are tricky ones; need to be careful...
    boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);
    // Ditto for IOExceptions; except we may want to wrap JSON exceptions
    if (t instanceof IOException) {
        if (!wrap || !(t instanceof JsonProcessingException)) {
            throw (IOException) t;
        }
    } else if (!wrap) {
        // allow disabling wrapping for unchecked exceptions
        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
    }
    throw JsonMappingException.wrapWithPath(t, bean, fieldName);
}","public void test3848() throws Throwable {
    ArrayList<SettableBeanProperty> arrayList0 = new ArrayList<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, arrayList0);
    SQLDataException sQLDataException0 = new SQLDataException((String) null);
    MockError mockError0 = new MockError(""jj!QyOB<8-"", sQLDataException0);
    // Undeclared exception!
    try {
        beanPropertyMap0.wrapAndThrow(mockError0, arrayList0, ""/o|v3`*u'h-^q|h"", (DeserializationContext) null);
        fail(""Expecting exception: Error"");
    } catch (Error e) {
    }
}",""
"protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException {
    // inlined 'throwOrReturnThrowable'
    while (t instanceof InvocationTargetException && t.getCause() != null) {
        t = t.getCause();
    }
    // Errors to be passed as is
    if (t instanceof Error) {
        throw (Error) t;
    }
    // StackOverflowErrors are tricky ones; need to be careful...
    boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);
    // Ditto for IOExceptions; except we may want to wrap JSON exceptions
    if (t instanceof IOException) {
        if (!wrap || !(t instanceof JsonProcessingException)) {
            throw (IOException) t;
        }
    } else if (!wrap) {
        // allow disabling wrapping for unchecked exceptions
        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
    }
    throw JsonMappingException.wrapWithPath(t, bean, fieldName);
}","public void test3949() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException(""?Z*&_qHyxb+"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
    try {
        beanPropertyMap0.wrapAndThrow(jsonMappingException0, stack0, ""?Z*&_qHyxb+"", (DeserializationContext) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // ?Z*&_qHyxb+ (through reference chain: java.util.Stack[\""?Z*&_qHyxb+\""])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
"protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException {
    // inlined 'throwOrReturnThrowable'
    while (t instanceof InvocationTargetException && t.getCause() != null) {
        t = t.getCause();
    }
    // Errors to be passed as is
    if (t instanceof Error) {
        throw (Error) t;
    }
    // StackOverflowErrors are tricky ones; need to be careful...
    boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);
    // Ditto for IOExceptions; except we may want to wrap JSON exceptions
    if (t instanceof IOException) {
        if (!wrap || !(t instanceof JsonProcessingException)) {
            throw (IOException) t;
        }
    } else if (!wrap) {
        // allow disabling wrapping for unchecked exceptions
        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
    }
    throw JsonMappingException.wrapWithPath(t, bean, fieldName);
}","public void test4050() throws Throwable {
    Stack<SettableBeanProperty> stack0 = new Stack<SettableBeanProperty>();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    JsonMappingException jsonMappingException0 = defaultDeserializationContext_Impl0.mappingException(""?ZW&_9p~WHa7Jba+"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(false, stack0);
    try {
        beanPropertyMap0.wrapAndThrow(jsonMappingException0, ""?ZW&_9p~WHa7Jba+"", ""?ZW&_9p~WHa7Jba+"", defaultDeserializationContext_Impl0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // ?ZW&_9p~WHa7Jba+
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",""
"protected void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException {
    // inlined 'throwOrReturnThrowable'
    while (t instanceof InvocationTargetException && t.getCause() != null) {
        t = t.getCause();
    }
    // Errors to be passed as is
    if (t instanceof Error) {
        throw (Error) t;
    }
    // StackOverflowErrors are tricky ones; need to be careful...
    boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS);
    // Ditto for IOExceptions; except we may want to wrap JSON exceptions
    if (t instanceof IOException) {
        if (!wrap || !(t instanceof JsonProcessingException)) {
            throw (IOException) t;
        }
    } else if (!wrap) {
        // allow disabling wrapping for unchecked exceptions
        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
    }
    throw JsonMappingException.wrapWithPath(t, bean, fieldName);
}","public void test4151() throws Throwable {
    MockIOException mockIOException0 = new MockIOException("", "", (Throwable) null);
    LinkedList<SettableBeanProperty> linkedList0 = new LinkedList<SettableBeanProperty>();
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, linkedList0);
    try {
        beanPropertyMap0.wrapAndThrow(mockIOException0, "", "", "", "", (DeserializationContext) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
    }
}",""
"@Override
public int getCreatorIndex() {
    return _creatorIndex;
}","public void test4252() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""kD'ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""kD'ab"", ""kD'ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
    beanPropertyMap2.replace(creatorProperty0);
    assertEquals(2194, creatorProperty0.getCreatorIndex());
}",""
"public void replace(SettableBeanProperty newProp) {
    String key = getPropertyName(newProp);
    int ix = _findIndexInHash(key);
    if (ix >= 0) {
        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[ix];
        _hashArea[ix] = newProp;
        // also, replace in in-order
        _propsInOrder[_findFromOrdered(prop)] = newProp;
        return;
    }
    throw new NoSuchElementException(""No entry '"" + key + ""' found, can't replace"");
}","public void test4353() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""kD'ab"", true, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""kD'ab"", ""kD'ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    BeanPropertyMap beanPropertyMap2 = beanPropertyMap1.withProperty(creatorProperty0);
    beanPropertyMap2.replace(creatorProperty0);
    assertNotSame(beanPropertyMap2, beanPropertyMap0);
}","/**
 * Specialized method that can be used to replace an existing entry
 * (note: entry MUST exist; otherwise exception is thrown) with
 * specified replacement.
 */"
"public BeanPropertyMap withProperty(SettableBeanProperty newProp) {
    // First: may be able to just replace?
    String key = getPropertyName(newProp);
    for (int i = 1, end = _hashArea.length; i < end; i += 2) {
        SettableBeanProperty prop = (SettableBeanProperty) _hashArea[i];
        if ((prop != null) && prop.getName().equals(key)) {
            _hashArea[i] = newProp;
            _propsInOrder[_findFromOrdered(prop)] = newProp;
            return this;
        }
    }
    // If not, append
    final int slot = _hashCode(key);
    final int hashSize = _hashMask + 1;
    int ix = (slot << 1);
    // primary slot not free?
    if (_hashArea[ix] != null) {
        // secondary?
        ix = (hashSize + (slot >> 1)) << 1;
        if (_hashArea[ix] != null) {
            // ok, spill over.
            ix = ((hashSize + (hashSize >> 1)) << 1) + _spillCount;
            _spillCount += 2;
            if (ix >= _hashArea.length) {
                _hashArea = Arrays.copyOf(_hashArea, _hashArea.length + 4);
                // Uncomment for debugging only
                /*
for (int i = 0; i < _hashArea.length; i += 2) {
    if (_hashArea[i] != null) {
        System.err.println(""Property #""+(i/2)+"" '""+_hashArea[i]+""'..."");
    }
}
System.err.println(""And new propr #""+slot+"" '""+key+""'"");
*/
            }
        }
    }
    _hashArea[ix] = key;
    _hashArea[ix + 1] = newProp;
    int last = _propsInOrder.length;
    _propsInOrder = Arrays.copyOf(_propsInOrder, last + 1);
    _propsInOrder[last] = newProp;
    // should we just create a new one? Or is resetting ok?
    return this;
}","public void test4454() throws Throwable {
    Vector<SettableBeanProperty> vector0 = new Vector<SettableBeanProperty>();
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<RuntimeException> class0 = RuntimeException.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ArrayType arrayType0 = ArrayType.construct((JavaType) referenceType0, (TypeBindings) null);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(arrayType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(referenceType0, classNameIdResolver0, ""~D4ab"", false, simpleType0, jsonTypeInfo_As0);
    AnnotationMap annotationMap0 = new AnnotationMap();
    JavaType[] javaTypeArray0 = new JavaType[0];
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) arrayType0, javaTypeArray0, (JavaType) referenceType0);
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, collectionLikeType0, annotationMap0, 2194);
    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_OPTIONAL;
    CreatorProperty creatorProperty0 = new CreatorProperty(propertyName0, arrayType0, propertyName0, asPropertyTypeDeserializer0, annotationMap0, annotatedParameter0, 2194, classNameIdResolver0, propertyMetadata0);
    vector0.add((SettableBeanProperty) creatorProperty0);
    NameTransformer nameTransformer0 = NameTransformer.simpleTransformer(""~D4ab"", ""~D4ab"");
    BeanPropertyMap beanPropertyMap0 = new BeanPropertyMap(true, vector0);
    BeanPropertyMap beanPropertyMap1 = beanPropertyMap0.renameAll(nameTransformer0);
    beanPropertyMap1.init(vector0);
    // Undeclared exception!
    try {
        beanPropertyMap1.withProperty(creatorProperty0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Illegal state: property '' missing from _propsInOrder
        //
        verifyException(""com.fasterxml.jackson.databind.deser.impl.BeanPropertyMap"", e);
    }
}","/**
 * Fluent copy method that creates a new instance that is a copy
 * of this instance except for one additional property that is
 * passed as the argument.
 * Note that method does not modify this instance but constructs
 * and returns a new one.
 */"
