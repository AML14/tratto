focal_method,test_prefix,docstring
"public String getName() {
    return _name;
}","public void test22() throws Throwable {
    HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<Integer> class0 = Integer.class;
    NamedType namedType0 = new NamedType(class0, ""u}0f_qu:k;>>sz<Gf"");
    stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
    stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
    assertEquals(""u}0f_qu:k;>>sz<Gf"", namedType0.getName());
}",""
"public String getName() {
    return _name;
}","public void test33() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
    Class<Integer> class0 = Integer.TYPE;
    NamedType namedType0 = new NamedType(class0);
    hashMap0.putIfAbsent(namedType0, namedType0);
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType0, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
    assertNull(namedType0.getName());
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    return _class == ((NamedType) o)._class;
}","public void test44() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<JavaType> class0 = JavaType.class;
    NamedType namedType0 = new NamedType(class0);
    HashMap<NamedType, NamedType> hashMap0 = new HashMap<NamedType, NamedType>();
    hashMap0.put(namedType0, namedType0);
    NamedType namedType1 = new NamedType(class0, ""QW"");
    stdSubtypeResolver0._collectAndResolve((AnnotatedClass) null, namedType1, (MapperConfig<?>) null, annotationIntrospector0, hashMap0);
    assertTrue(namedType1.equals((Object) namedType0));
}","/**
 * Equality is defined based on class only, not on name
 */"
