focal_method,test_prefix,docstring
"@Override
protected UUID _deserializeEmbedded(Object ob, DeserializationContext ctxt) throws IOException {
    if (ob instanceof byte[]) {
        return _fromBytes((byte[]) ob, ctxt);
    }
    super._deserializeEmbedded(ob, ctxt);
    // never gets here
    return null;
}","public void test000() throws Throwable {
    UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
    Class<String> class0 = String.class;
    FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, (-2299));
    fromStringDeserializer_Std0._deserializeFromEmptyString();
    uUIDDeserializer0._deserializeEmbedded((Object) null, (DeserializationContext) null);
}",""
"public static Std findDeserializer(Class<?> rawType) {
    int kind = 0;
    if (rawType == File.class) {
        kind = Std.STD_FILE;
    } else if (rawType == URL.class) {
        kind = Std.STD_URL;
    } else if (rawType == URI.class) {
        kind = Std.STD_URI;
    } else if (rawType == Class.class) {
        kind = Std.STD_CLASS;
    } else if (rawType == JavaType.class) {
        kind = Std.STD_JAVA_TYPE;
    } else if (rawType == Currency.class) {
        kind = Std.STD_CURRENCY;
    } else if (rawType == Pattern.class) {
        kind = Std.STD_PATTERN;
    } else if (rawType == Locale.class) {
        kind = Std.STD_LOCALE;
    } else if (rawType == Charset.class) {
        kind = Std.STD_CHARSET;
    } else if (rawType == TimeZone.class) {
        kind = Std.STD_TIME_ZONE;
    } else if (rawType == InetAddress.class) {
        kind = Std.STD_INET_ADDRESS;
    } else if (rawType == InetSocketAddress.class) {
        kind = Std.STD_INET_SOCKET_ADDRESS;
    } else {
        return null;
    }
    return new Std(rawType, kind);
}","public void test011() throws Throwable {
    Class<File> class0 = File.class;
    FromStringDeserializer.findDeserializer(class0);
}","/**
 * Factory method for trying to find a deserializer for one of supported
 * types that have simple from-String serialization.
 */"
"@Override
protected UUID _deserializeEmbedded(Object ob, DeserializationContext ctxt) throws IOException {
    if (ob instanceof byte[]) {
        return _fromBytes((byte[]) ob, ctxt);
    }
    super._deserializeEmbedded(ob, ctxt);
    // never gets here
    return null;
}","public void test066() throws Throwable {
    Class<TimeZone> class0 = TimeZone.class;
    UUIDDeserializer uUIDDeserializer0 = new UUIDDeserializer();
    uUIDDeserializer0._deserializeEmbedded(class0, (DeserializationContext) null);
}",""
"public static Std findDeserializer(Class<?> rawType) {
    int kind = 0;
    if (rawType == File.class) {
        kind = Std.STD_FILE;
    } else if (rawType == URL.class) {
        kind = Std.STD_URL;
    } else if (rawType == URI.class) {
        kind = Std.STD_URI;
    } else if (rawType == Class.class) {
        kind = Std.STD_CLASS;
    } else if (rawType == JavaType.class) {
        kind = Std.STD_JAVA_TYPE;
    } else if (rawType == Currency.class) {
        kind = Std.STD_CURRENCY;
    } else if (rawType == Pattern.class) {
        kind = Std.STD_PATTERN;
    } else if (rawType == Locale.class) {
        kind = Std.STD_LOCALE;
    } else if (rawType == Charset.class) {
        kind = Std.STD_CHARSET;
    } else if (rawType == TimeZone.class) {
        kind = Std.STD_TIME_ZONE;
    } else if (rawType == InetAddress.class) {
        kind = Std.STD_INET_ADDRESS;
    } else if (rawType == InetSocketAddress.class) {
        kind = Std.STD_INET_SOCKET_ADDRESS;
    } else {
        return null;
    }
    return new Std(rawType, kind);
}","public void test088() throws Throwable {
    Class<URL> class0 = URL.class;
    FromStringDeserializer.findDeserializer(class0);
}","/**
 * Factory method for trying to find a deserializer for one of supported
 * types that have simple from-String serialization.
 */"
"public static Std findDeserializer(Class<?> rawType) {
    int kind = 0;
    if (rawType == File.class) {
        kind = Std.STD_FILE;
    } else if (rawType == URL.class) {
        kind = Std.STD_URL;
    } else if (rawType == URI.class) {
        kind = Std.STD_URI;
    } else if (rawType == Class.class) {
        kind = Std.STD_CLASS;
    } else if (rawType == JavaType.class) {
        kind = Std.STD_JAVA_TYPE;
    } else if (rawType == Currency.class) {
        kind = Std.STD_CURRENCY;
    } else if (rawType == Pattern.class) {
        kind = Std.STD_PATTERN;
    } else if (rawType == Locale.class) {
        kind = Std.STD_LOCALE;
    } else if (rawType == Charset.class) {
        kind = Std.STD_CHARSET;
    } else if (rawType == TimeZone.class) {
        kind = Std.STD_TIME_ZONE;
    } else if (rawType == InetAddress.class) {
        kind = Std.STD_INET_ADDRESS;
    } else if (rawType == InetSocketAddress.class) {
        kind = Std.STD_INET_SOCKET_ADDRESS;
    } else {
        return null;
    }
    return new Std(rawType, kind);
}","public void test1313() throws Throwable {
    Class<InetSocketAddress> class0 = InetSocketAddress.class;
    FromStringDeserializer.findDeserializer(class0);
}","/**
 * Factory method for trying to find a deserializer for one of supported
 * types that have simple from-String serialization.
 */"
"public static Std findDeserializer(Class<?> rawType) {
    int kind = 0;
    if (rawType == File.class) {
        kind = Std.STD_FILE;
    } else if (rawType == URL.class) {
        kind = Std.STD_URL;
    } else if (rawType == URI.class) {
        kind = Std.STD_URI;
    } else if (rawType == Class.class) {
        kind = Std.STD_CLASS;
    } else if (rawType == JavaType.class) {
        kind = Std.STD_JAVA_TYPE;
    } else if (rawType == Currency.class) {
        kind = Std.STD_CURRENCY;
    } else if (rawType == Pattern.class) {
        kind = Std.STD_PATTERN;
    } else if (rawType == Locale.class) {
        kind = Std.STD_LOCALE;
    } else if (rawType == Charset.class) {
        kind = Std.STD_CHARSET;
    } else if (rawType == TimeZone.class) {
        kind = Std.STD_TIME_ZONE;
    } else if (rawType == InetAddress.class) {
        kind = Std.STD_INET_ADDRESS;
    } else if (rawType == InetSocketAddress.class) {
        kind = Std.STD_INET_SOCKET_ADDRESS;
    } else {
        return null;
    }
    return new Std(rawType, kind);
}","public void test1717() throws Throwable {
    Class<TimeZone> class0 = TimeZone.class;
    FromStringDeserializer.findDeserializer(class0);
}","/**
 * Factory method for trying to find a deserializer for one of supported
 * types that have simple from-String serialization.
 */"
"public static Std findDeserializer(Class<?> rawType) {
    int kind = 0;
    if (rawType == File.class) {
        kind = Std.STD_FILE;
    } else if (rawType == URL.class) {
        kind = Std.STD_URL;
    } else if (rawType == URI.class) {
        kind = Std.STD_URI;
    } else if (rawType == Class.class) {
        kind = Std.STD_CLASS;
    } else if (rawType == JavaType.class) {
        kind = Std.STD_JAVA_TYPE;
    } else if (rawType == Currency.class) {
        kind = Std.STD_CURRENCY;
    } else if (rawType == Pattern.class) {
        kind = Std.STD_PATTERN;
    } else if (rawType == Locale.class) {
        kind = Std.STD_LOCALE;
    } else if (rawType == Charset.class) {
        kind = Std.STD_CHARSET;
    } else if (rawType == TimeZone.class) {
        kind = Std.STD_TIME_ZONE;
    } else if (rawType == InetAddress.class) {
        kind = Std.STD_INET_ADDRESS;
    } else if (rawType == InetSocketAddress.class) {
        kind = Std.STD_INET_SOCKET_ADDRESS;
    } else {
        return null;
    }
    return new Std(rawType, kind);
}","public void test2020() throws Throwable {
    Class<Locale> class0 = Locale.class;
    FromStringDeserializer.findDeserializer(class0);
}","/**
 * Factory method for trying to find a deserializer for one of supported
 * types that have simple from-String serialization.
 */"
"public static Std findDeserializer(Class<?> rawType) {
    int kind = 0;
    if (rawType == File.class) {
        kind = Std.STD_FILE;
    } else if (rawType == URL.class) {
        kind = Std.STD_URL;
    } else if (rawType == URI.class) {
        kind = Std.STD_URI;
    } else if (rawType == Class.class) {
        kind = Std.STD_CLASS;
    } else if (rawType == JavaType.class) {
        kind = Std.STD_JAVA_TYPE;
    } else if (rawType == Currency.class) {
        kind = Std.STD_CURRENCY;
    } else if (rawType == Pattern.class) {
        kind = Std.STD_PATTERN;
    } else if (rawType == Locale.class) {
        kind = Std.STD_LOCALE;
    } else if (rawType == Charset.class) {
        kind = Std.STD_CHARSET;
    } else if (rawType == TimeZone.class) {
        kind = Std.STD_TIME_ZONE;
    } else if (rawType == InetAddress.class) {
        kind = Std.STD_INET_ADDRESS;
    } else if (rawType == InetSocketAddress.class) {
        kind = Std.STD_INET_SOCKET_ADDRESS;
    } else {
        return null;
    }
    return new Std(rawType, kind);
}","public void test2323() throws Throwable {
    Class<Charset> class0 = Charset.class;
    FromStringDeserializer.findDeserializer(class0);
}","/**
 * Factory method for trying to find a deserializer for one of supported
 * types that have simple from-String serialization.
 */"
"public static Std findDeserializer(Class<?> rawType) {
    int kind = 0;
    if (rawType == File.class) {
        kind = Std.STD_FILE;
    } else if (rawType == URL.class) {
        kind = Std.STD_URL;
    } else if (rawType == URI.class) {
        kind = Std.STD_URI;
    } else if (rawType == Class.class) {
        kind = Std.STD_CLASS;
    } else if (rawType == JavaType.class) {
        kind = Std.STD_JAVA_TYPE;
    } else if (rawType == Currency.class) {
        kind = Std.STD_CURRENCY;
    } else if (rawType == Pattern.class) {
        kind = Std.STD_PATTERN;
    } else if (rawType == Locale.class) {
        kind = Std.STD_LOCALE;
    } else if (rawType == Charset.class) {
        kind = Std.STD_CHARSET;
    } else if (rawType == TimeZone.class) {
        kind = Std.STD_TIME_ZONE;
    } else if (rawType == InetAddress.class) {
        kind = Std.STD_INET_ADDRESS;
    } else if (rawType == InetSocketAddress.class) {
        kind = Std.STD_INET_SOCKET_ADDRESS;
    } else {
        return null;
    }
    return new Std(rawType, kind);
}","public void test2626() throws Throwable {
    Class<InetAddress> class0 = InetAddress.class;
    FromStringDeserializer.findDeserializer(class0);
}","/**
 * Factory method for trying to find a deserializer for one of supported
 * types that have simple from-String serialization.
 */"
"public static Std findDeserializer(Class<?> rawType) {
    int kind = 0;
    if (rawType == File.class) {
        kind = Std.STD_FILE;
    } else if (rawType == URL.class) {
        kind = Std.STD_URL;
    } else if (rawType == URI.class) {
        kind = Std.STD_URI;
    } else if (rawType == Class.class) {
        kind = Std.STD_CLASS;
    } else if (rawType == JavaType.class) {
        kind = Std.STD_JAVA_TYPE;
    } else if (rawType == Currency.class) {
        kind = Std.STD_CURRENCY;
    } else if (rawType == Pattern.class) {
        kind = Std.STD_PATTERN;
    } else if (rawType == Locale.class) {
        kind = Std.STD_LOCALE;
    } else if (rawType == Charset.class) {
        kind = Std.STD_CHARSET;
    } else if (rawType == TimeZone.class) {
        kind = Std.STD_TIME_ZONE;
    } else if (rawType == InetAddress.class) {
        kind = Std.STD_INET_ADDRESS;
    } else if (rawType == InetSocketAddress.class) {
        kind = Std.STD_INET_SOCKET_ADDRESS;
    } else {
        return null;
    }
    return new Std(rawType, kind);
}","public void test2727() throws Throwable {
    Class<Currency> class0 = Currency.class;
    FromStringDeserializer.findDeserializer(class0);
}","/**
 * Factory method for trying to find a deserializer for one of supported
 * types that have simple from-String serialization.
 */"
"public static Std findDeserializer(Class<?> rawType) {
    int kind = 0;
    if (rawType == File.class) {
        kind = Std.STD_FILE;
    } else if (rawType == URL.class) {
        kind = Std.STD_URL;
    } else if (rawType == URI.class) {
        kind = Std.STD_URI;
    } else if (rawType == Class.class) {
        kind = Std.STD_CLASS;
    } else if (rawType == JavaType.class) {
        kind = Std.STD_JAVA_TYPE;
    } else if (rawType == Currency.class) {
        kind = Std.STD_CURRENCY;
    } else if (rawType == Pattern.class) {
        kind = Std.STD_PATTERN;
    } else if (rawType == Locale.class) {
        kind = Std.STD_LOCALE;
    } else if (rawType == Charset.class) {
        kind = Std.STD_CHARSET;
    } else if (rawType == TimeZone.class) {
        kind = Std.STD_TIME_ZONE;
    } else if (rawType == InetAddress.class) {
        kind = Std.STD_INET_ADDRESS;
    } else if (rawType == InetSocketAddress.class) {
        kind = Std.STD_INET_SOCKET_ADDRESS;
    } else {
        return null;
    }
    return new Std(rawType, kind);
}","public void test2828() throws Throwable {
    Class<Pattern> class0 = Pattern.class;
    FromStringDeserializer.findDeserializer(class0);
}","/**
 * Factory method for trying to find a deserializer for one of supported
 * types that have simple from-String serialization.
 */"
"public ObjectReader withView(Class<?> activeView) {
    return _with(_config.withView(activeView));
}","public void test3333() throws Throwable {
    ArrayDeque<ValueInstantiators> arrayDeque0 = new ArrayDeque<ValueInstantiators>();
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(class0);
    objectReader0.withView(class0);
}","/**
 *  Method for constructing a new instance with configuration that
 *  uses specified View for filtering.
 * <p>
 *  Note that the method does NOT change state of this reader, but
 *  rather construct and returns a newly configured instance.
 */"
