project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructNoTypeResolverBuilder();
    assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
}",0,assertFalse(stdTypeResolverBuilder0.isTypeIdVisible())
project,0,test011,"public void test011() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructStdTypeResolverBuilder();
    assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
}",0,assertFalse(stdTypeResolverBuilder0.isTypeIdVisible())
project,0,test022,"public void test022() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    ObjectMapper objectMapper0 = new ObjectMapper();
    try {
        objectMapper0.writeValueAsString(basicBeanDescription0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No serializer found for class com.fasterxml.jackson.databind.introspect.AnnotationMap and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: com.fasterxml.jackson.databind.introspect.BasicBeanDescription[\""classInfo\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""annotations\""])
        //
        verifyException(""com.fasterxml.jackson.databind.ser.impl.UnknownSerializer"", e);
    }
}",0,
project,0,test033,"public void test033() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.findFilterId((AnnotatedClass) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}",0,
project,0,test055,"public void test055() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
    String string0 = jacksonAnnotationIntrospector0.findEnumValue(jsonInclude_Include0);
    assertEquals(""NON_ABSENT"", string0);
}",0,
project,0,test066,"public void test066() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    PropertyName propertyName0 = jacksonAnnotationIntrospector0.findRootName(annotatedClass0);
    assertNull(propertyName0);
}",0,assertNotNull(propertyName0)
project,0,test077,"public void test077() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    String[] stringArray0 = jacksonAnnotationIntrospector0.findPropertiesToIgnore((Annotated) annotatedConstructor0);
    assertNull(stringArray0);
}",0,assertNotNull(stringArray0)
project,0,test088,"public void test088() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(beanSerializerBuilder0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test099,"public void test099() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.findPropertyContentTypeResolver((MapperConfig<?>) null, (AnnotatedMember) null, simpleType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must call method with a container type (got [simple type, class java.lang.Object])
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    List<NamedType> list0 = jacksonAnnotationIntrospector0.findSubtypes(annotatedConstructor0);
    assertNull(list0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    String string0 = jacksonAnnotationIntrospector0.findTypeName(annotatedClass0);
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test1212,"public void test1212() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    ObjectIdInfo objectIdInfo0 = jacksonAnnotationIntrospector0.findObjectReferenceInfo(annotatedConstructor0, (ObjectIdInfo) null);
    assertNull(objectIdInfo0);
}",0,assertNotNull(objectIdInfo0)
project,0,test1313,"public void test1313() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findKeySerializer(annotatedConstructor0);
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test1414,"public void test1414() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
    JsonInclude.Include jsonInclude_Include1 = jacksonAnnotationIntrospector0.findSerializationInclusionForContent(annotatedConstructor0, jsonInclude_Include0);
    assertSame(jsonInclude_Include0, jsonInclude_Include1);
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JsonAppend.Attr jsonAppend_Attr0 = mock(JsonAppend.Attr.class, new ViolatedAssumptionAnswer());
    doReturn("""").when(jsonAppend_Attr0).propName();
    doReturn("""").when(jsonAppend_Attr0).propNamespace();
    doReturn(false).when(jsonAppend_Attr0).required();
    doReturn("""").when(jsonAppend_Attr0).value();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Attr0, (MapperConfig<?>) null, annotatedClass0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", e);
    }
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JsonAppend.Attr jsonAppend_Attr0 = mock(JsonAppend.Attr.class, new ViolatedAssumptionAnswer());
    doReturn(""8ARgj"").when(jsonAppend_Attr0).propName();
    doReturn(""8ARgj"").when(jsonAppend_Attr0).propNamespace();
    doReturn(true).when(jsonAppend_Attr0).required();
    doReturn(""8ARgj"").when(jsonAppend_Attr0).value();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Attr0, (MapperConfig<?>) null, annotatedClass0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", e);
    }
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(jsonAppend_Prop0).name();
    doReturn((String) null).when(jsonAppend_Prop0).namespace();
    doReturn(false).when(jsonAppend_Prop0).required();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, (AnnotatedClass) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
    doReturn(""%{,7:Hk~ws0E\""sz"").when(jsonAppend_Prop0).name();
    doReturn(""%{,7:Hk~ws0E\""sz"").when(jsonAppend_Prop0).namespace();
    doReturn(true).when(jsonAppend_Prop0).required();
    doReturn((Class) null).when(jsonAppend_Prop0).type();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, (AnnotatedClass) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", e);
    }
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = jacksonAnnotationIntrospector0.findPOJOBuilderConfig(annotatedClass0);
    assertNull(jsonPOJOBuilder_Value0);
}",0,assertNotNull(jsonPOJOBuilder_Value0)
project,0,test2121,"public void test2121() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class0);
    assertNull(class1);
}",0,"assertEquals(class0, class1)"
project,0,test2222,"public void test2222() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<?> class0 = jacksonAnnotationIntrospector0._classIfExplicit((Class<?>) null, (Class<?>) null);
    assertNull(class0);
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    Class<Annotation> class1 = Annotation.class;
    Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class1);
    assertNotNull(class2);
}",0,"assertEquals(class0, class2)"
project,0,test2425,"public void test2425() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""$~"", (String) null);
    assertFalse(propertyName0.isEmpty());
}",0,assertTrue(propertyName0.isEmpty())
project,0,test2526,"public void test2526() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", """");
    assertFalse(propertyName0.hasNamespace());
}",0,assertTrue(propertyName0.hasNamespace())
project,0,test2527,"public void test2527() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", """");
    assertTrue(propertyName0.hasSimpleName());
}",0,assertTrue(propertyName0.hasSimpleName())
