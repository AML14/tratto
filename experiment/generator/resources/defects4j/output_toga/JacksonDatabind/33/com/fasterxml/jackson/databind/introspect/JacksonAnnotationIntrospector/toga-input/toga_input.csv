focal_method,test_prefix,docstring
"public boolean isTypeIdVisible() {
    return _typeIdVisible;
}","public void test000() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructNoTypeResolverBuilder();
    assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
}",""
"public boolean isTypeIdVisible() {
    return _typeIdVisible;
}","public void test011() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructStdTypeResolverBuilder();
    assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
}",""
"@SuppressWarnings(""resource"")
public String writeValueAsString(Object value) throws JsonProcessingException {
    // alas, we have to pull the recycler directly here...
    SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());
    try {
        _configAndWriteValue(_jsonFactory.createGenerator(sw), value);
    } catch (JsonProcessingException e) {
        // to support [JACKSON-758]
        throw e;
    } catch (IOException e) {
        // shouldn't really happen, but is declared as possibility so:
        throw JsonMappingException.fromUnexpectedIOE(e);
    }
    return sw.getAndClear();
}","public void test022() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    ObjectMapper objectMapper0 = new ObjectMapper();
    try {
        objectMapper0.writeValueAsString(basicBeanDescription0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No serializer found for class com.fasterxml.jackson.databind.introspect.AnnotationMap and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) ) (through reference chain: com.fasterxml.jackson.databind.introspect.BasicBeanDescription[\""classInfo\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""annotations\""])
        //
        verifyException(""com.fasterxml.jackson.databind.ser.impl.UnknownSerializer"", e);
    }
}","/**
 *  Method that can be used to serialize any Java value as
 *  a String. Functionally equivalent to calling
 *  {@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}
 *  and constructing String, but more efficient.
 * <p>
 *  Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.
 */"
"@Deprecated
@Override
public Object findFilterId(AnnotatedClass ac) {
    return _findFilterId(ac);
}","public void test033() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.findFilterId((AnnotatedClass) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}","/**
 * @deprecated (since 2.3) Use {@link #findFilterId(Annotated)} instead
 */"
"/*
    /**********************************************************
    /* General annotations
    /**********************************************************
     */
/**
 * Since 2.6, we have supported use of {@link JsonProperty} for specifying
 * explicit serialized name
 */
@Override
public String findEnumValue(Enum<?> value) {
    // 11-Jun-2015, tatu: As per [databind#677], need to allow explicit naming.
    //   Unfortunately can not quite use standard AnnotatedClass here (due to various
    //   reasons, including odd representation JVM uses); has to do for now
    try {
        // We know that values are actually static fields with matching name so:
        Field f = value.getClass().getField(value.name());
        if (f != null) {
            JsonProperty prop = f.getAnnotation(JsonProperty.class);
            if (prop != null) {
                String n = prop.value();
                if (n != null && !n.isEmpty()) {
                    return n;
                }
            }
        }
    } catch (SecurityException e) {
        // 17-Sep-2015, tatu: Anything we could/should do here?
    } catch (NoSuchFieldException e) {
        // 17-Sep-2015, tatu: should not really happen. But... can we do anything?
    }
    return value.name();
}","public void test055() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
    String string0 = jacksonAnnotationIntrospector0.findEnumValue(jsonInclude_Include0);
    assertEquals(""NON_ABSENT"", string0);
}",""
"/*
    /**********************************************************
    /* General class annotations
    /**********************************************************
     */
@Override
public PropertyName findRootName(AnnotatedClass ac) {
    JsonRootName ann = _findAnnotation(ac, JsonRootName.class);
    if (ann == null) {
        return null;
    }
    String ns = ann.namespace();
    if (ns != null && ns.length() == 0) {
        ns = null;
    }
    return PropertyName.construct(ann.value(), ns);
}","public void test066() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    PropertyName propertyName0 = jacksonAnnotationIntrospector0.findRootName(annotatedClass0);
    assertNull(propertyName0);
}",""
"@Override
// since 2.6, remove from 2.7 or later
@Deprecated
public String[] findPropertiesToIgnore(Annotated ac) {
    JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);
    return (ignore == null) ? null : ignore.value();
}","public void test077() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    String[] stringArray0 = jacksonAnnotationIntrospector0.findPropertiesToIgnore((Annotated) annotatedConstructor0);
    assertNull(stringArray0);
}",""
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return _newReader(getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test088() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(beanSerializerBuilder0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"@Override
public TypeResolverBuilder<?> findPropertyContentTypeResolver(MapperConfig<?> config, AnnotatedMember am, JavaType containerType) {
    /* First: let's ensure property is a container type: caller should have
         * verified but just to be sure
         */
    if (!containerType.isContainerType()) {
        throw new IllegalArgumentException(""Must call method with a container type (got "" + containerType + "")"");
    }
    return _findTypeResolver(config, am, containerType);
}","public void test099() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.findPropertyContentTypeResolver((MapperConfig<?>) null, (AnnotatedMember) null, simpleType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Must call method with a container type (got [simple type, class java.lang.Object])
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", e);
    }
}",""
"@Override
public List<NamedType> findSubtypes(Annotated a) {
    JsonSubTypes t = _findAnnotation(a, JsonSubTypes.class);
    if (t == null)
        return null;
    JsonSubTypes.Type[] types = t.value();
    ArrayList<NamedType> result = new ArrayList<NamedType>(types.length);
    for (JsonSubTypes.Type type : types) {
        result.add(new NamedType(type.value(), type.name()));
    }
    return result;
}","public void test1010() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    List<NamedType> list0 = jacksonAnnotationIntrospector0.findSubtypes(annotatedConstructor0);
    assertNull(list0);
}",""
"@Override
public String findTypeName(AnnotatedClass ac) {
    JsonTypeName tn = _findAnnotation(ac, JsonTypeName.class);
    return (tn == null) ? null : tn.value();
}","public void test1111() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    String string0 = jacksonAnnotationIntrospector0.findTypeName(annotatedClass0);
    assertNull(string0);
}",""
"@Override
public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {
    JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);
    if (ref != null) {
        objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());
    }
    return objectIdInfo;
}","public void test1212() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    ObjectIdInfo objectIdInfo0 = jacksonAnnotationIntrospector0.findObjectReferenceInfo(annotatedConstructor0, (ObjectIdInfo) null);
    assertNull(objectIdInfo0);
}",""
"@Override
public Object findKeySerializer(Annotated a) {
    JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);
    if (ann != null) {
        @SuppressWarnings(""rawtypes"")
        Class<? extends JsonSerializer> serClass = ann.keyUsing();
        if (serClass != JsonSerializer.None.class) {
            return serClass;
        }
    }
    return null;
}","public void test1313() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findKeySerializer(annotatedConstructor0);
    assertNull(object0);
}",""
"public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue) {
    return defValue;
}","public void test1414() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
    JsonInclude.Include jsonInclude_Include1 = jacksonAnnotationIntrospector0.findSerializationInclusionForContent(annotatedConstructor0, jsonInclude_Include0);
    assertSame(jsonInclude_Include0, jsonInclude_Include1);
}","/**
 * Method for checking whether content (entries) of a {@link java.util.Map} property
 * are to be included during serialization or not.
 * NOTE: this is NOT called for POJO properties, or array/Collection elements.
 *
 * @since 2.5
 */"
"protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr, MapperConfig<?> config, AnnotatedClass ac, JavaType type) {
    PropertyMetadata metadata = attr.required() ? PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;
    // could add Index, Description in future, if those matter
    String attrName = attr.value();
    // allow explicit renaming; if none, default to attribute name
    PropertyName propName = _propertyName(attr.propName(), attr.propNamespace());
    if (!propName.hasSimpleName()) {
        propName = PropertyName.construct(attrName);
    }
    // now, then, we need a placeholder for member (no real Field/Method):
    AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(), attrName, type.getRawClass());
    // and with that and property definition
    SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, attr.include());
    // can construct the property writer
    return AttributePropertyWriter.construct(attrName, propDef, ac.getAnnotations(), type);
}","public void test1616() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JsonAppend.Attr jsonAppend_Attr0 = mock(JsonAppend.Attr.class, new ViolatedAssumptionAnswer());
    doReturn("""").when(jsonAppend_Attr0).propName();
    doReturn("""").when(jsonAppend_Attr0).propNamespace();
    doReturn(false).when(jsonAppend_Attr0).required();
    doReturn("""").when(jsonAppend_Attr0).value();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Attr0, (MapperConfig<?>) null, annotatedClass0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", e);
    }
}",""
"protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Attr attr, MapperConfig<?> config, AnnotatedClass ac, JavaType type) {
    PropertyMetadata metadata = attr.required() ? PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;
    // could add Index, Description in future, if those matter
    String attrName = attr.value();
    // allow explicit renaming; if none, default to attribute name
    PropertyName propName = _propertyName(attr.propName(), attr.propNamespace());
    if (!propName.hasSimpleName()) {
        propName = PropertyName.construct(attrName);
    }
    // now, then, we need a placeholder for member (no real Field/Method):
    AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(), attrName, type.getRawClass());
    // and with that and property definition
    SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, attr.include());
    // can construct the property writer
    return AttributePropertyWriter.construct(attrName, propDef, ac.getAnnotations(), type);
}","public void test1717() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JsonAppend.Attr jsonAppend_Attr0 = mock(JsonAppend.Attr.class, new ViolatedAssumptionAnswer());
    doReturn(""8ARgj"").when(jsonAppend_Attr0).propName();
    doReturn(""8ARgj"").when(jsonAppend_Attr0).propNamespace();
    doReturn(true).when(jsonAppend_Attr0).required();
    doReturn(""8ARgj"").when(jsonAppend_Attr0).value();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Attr0, (MapperConfig<?>) null, annotatedClass0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", e);
    }
}",""
"protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac) {
    PropertyMetadata metadata = prop.required() ? PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;
    PropertyName propName = _propertyName(prop.name(), prop.namespace());
    JavaType type = config.constructType(prop.type());
    // now, then, we need a placeholder for member (no real Field/Method):
    AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(), propName.getSimpleName(), type.getRawClass());
    // and with that and property definition
    SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, prop.include());
    Class<?> implClass = prop.value();
    HandlerInstantiator hi = config.getHandlerInstantiator();
    VirtualBeanPropertyWriter bpw = (hi == null) ? null : hi.virtualPropertyWriterInstance(config, implClass);
    if (bpw == null) {
        bpw = (VirtualBeanPropertyWriter) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());
    }
    // one more thing: give it necessary contextual information
    return bpw.withConfig(config, ac, propDef, type);
}","public void test1818() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
    doReturn((String) null).when(jsonAppend_Prop0).name();
    doReturn((String) null).when(jsonAppend_Prop0).namespace();
    doReturn(false).when(jsonAppend_Prop0).required();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, (AnnotatedClass) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
    }
}",""
"protected BeanPropertyWriter _constructVirtualProperty(JsonAppend.Prop prop, MapperConfig<?> config, AnnotatedClass ac) {
    PropertyMetadata metadata = prop.required() ? PropertyMetadata.STD_REQUIRED : PropertyMetadata.STD_OPTIONAL;
    PropertyName propName = _propertyName(prop.name(), prop.namespace());
    JavaType type = config.constructType(prop.type());
    // now, then, we need a placeholder for member (no real Field/Method):
    AnnotatedMember member = new VirtualAnnotatedMember(ac, ac.getRawType(), propName.getSimpleName(), type.getRawClass());
    // and with that and property definition
    SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(config, member, propName, metadata, prop.include());
    Class<?> implClass = prop.value();
    HandlerInstantiator hi = config.getHandlerInstantiator();
    VirtualBeanPropertyWriter bpw = (hi == null) ? null : hi.virtualPropertyWriterInstance(config, implClass);
    if (bpw == null) {
        bpw = (VirtualBeanPropertyWriter) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers());
    }
    // one more thing: give it necessary contextual information
    return bpw.withConfig(config, ac, propDef, type);
}","public void test1919() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    JsonAppend.Prop jsonAppend_Prop0 = mock(JsonAppend.Prop.class, new ViolatedAssumptionAnswer());
    doReturn(""%{,7:Hk~ws0E\""sz"").when(jsonAppend_Prop0).name();
    doReturn(""%{,7:Hk~ws0E\""sz"").when(jsonAppend_Prop0).namespace();
    doReturn(true).when(jsonAppend_Prop0).required();
    doReturn((Class) null).when(jsonAppend_Prop0).type();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0._constructVirtualProperty(jsonAppend_Prop0, (MapperConfig<?>) null, (AnnotatedClass) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", e);
    }
}",""
"@Override
public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {
    JsonPOJOBuilder ann = _findAnnotation(ac, JsonPOJOBuilder.class);
    return (ann == null) ? null : new JsonPOJOBuilder.Value(ann);
}","public void test2020() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, jacksonAnnotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = jacksonAnnotationIntrospector0.findPOJOBuilderConfig(annotatedClass0);
    assertNull(jsonPOJOBuilder_Value0);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test2121() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class0);
    assertNull(class1);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test2222() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<?> class0 = jacksonAnnotationIntrospector0._classIfExplicit((Class<?>) null, (Class<?>) null);
    assertNull(class0);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test2323() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    Class<Annotation> class1 = Annotation.class;
    Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class1);
    assertNotNull(class2);
}",""
"public boolean isEmpty() {
    return (_namespace == null) && (_simpleName.isEmpty());
}","public void test2425() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""$~"", (String) null);
    assertFalse(propertyName0.isEmpty());
}","/**
 *  Method that is basically equivalent of:
 * <pre>
 *    !hasSimpleName() &lt;&lt; !hasNamespace();
 * </pre>
 *
 *  @since 2.4
 */"
"public boolean hasNamespace() {
    return _namespace != null;
}","public void test2526() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", """");
    assertFalse(propertyName0.hasNamespace());
}",""
"public boolean hasSimpleName() {
    return _simpleName.length() > 0;
}","public void test2527() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector"", """");
    assertTrue(propertyName0.hasSimpleName());
}",""
