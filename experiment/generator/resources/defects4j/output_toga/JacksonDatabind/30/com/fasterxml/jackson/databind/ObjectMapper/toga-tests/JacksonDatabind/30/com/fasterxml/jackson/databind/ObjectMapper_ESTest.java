/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 00:32:34 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringGeneratorDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.json.UTF8JsonGenerator;
import com.fasterxml.jackson.core.json.WriterBasedJsonGenerator;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserDelegate;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.std.JsonLocationInstantiator;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DoubleNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.IntNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.BeanSerializerFactory;
import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URL;
import java.text.DateFormat;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectMapper_ESTest extends ObjectMapper_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) null);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayDeque> class0 = ArrayDeque.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) collectionType0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockFileReader> class0 = MockFileReader.class;
        objectMapper0.addMixInAnnotations(class0, class0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
        objectMapper0.enable(serializationFeature0, (SerializationFeature[]) null);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        boolean boolean0 = objectMapper0.canDeserialize(javaType0);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY;
        ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PipedOutputStream> class0 = PipedOutputStream.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[5];
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        objectMapper0.readValue(byteArray0, javaType0);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getDateTimeInstance();
        ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Locale locale0 = Locale.US;
        ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapLikeType> class0 = MapLikeType.class;
        objectMapper0.readValue("", class0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<FilterInputStream>[] classArray0 = (Class<FilterInputStream>[]) Array.newInstance(Class.class, 2);
        objectMapper0.registerSubtypes(classArray0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[1];
        Class<ArrayNode> class0 = ArrayNode.class;
        objectMapper0.readValue(byteArray0, (int) 115, (int) 115, class0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
        TypeFactory typeFactory0 = objectReader0.getTypeFactory();
        Class<FloatNode> class0 = FloatNode.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        ObjectReader objectReader1 = objectMapper0.readerFor((JavaType) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BufferedOutputStream> class0 = BufferedOutputStream.class;
        objectMapper0.readValue((Reader) null, class0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[2];
        objectMapper0.writer(serializationFeature0, serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        byte[] byteArray0 = new byte[9];
        objectMapper0.readValue(byteArray0, (TypeReference) null);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("3k@C{H;LF", "3k@C{H;LF");
        Class<ShortNode> class0 = ShortNode.class;
        objectMapper0.readValue((File) mockFile0, class0);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TimeZone timeZone0 = TimeZone.getDefault();
        ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
        boolean boolean0 = objectMapper0.isEnabled(jsonGenerator_Feature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readerFor((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
        JsonFactory jsonFactory0 = new JsonFactory(objectReader0);
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        PipedReader pipedReader0 = new PipedReader();
        IOContext iOContext0 = new IOContext(bufferRecycler0, pipedReader0, true);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4042, pipedReader0, objectReader0, charsToNameCanonicalizer0, (char[]) null, 4096, 4042, true);
        Class<PipedWriter> class0 = PipedWriter.class;
        MappingIterator<PipedWriter> mappingIterator0 = objectMapper0.readValues((JsonParser) readerBasedJsonParser0, class0);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory_Feature0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
        ObjectWriter objectWriter0 = objectMapper0.writer(dateFormat0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleModule> class0 = SimpleModule.class;
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setConfig((DeserializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        ObjectWriter objectWriter0 = objectMapper0.writer((FilterProvider) simpleFilterProvider0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readValue("E", (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        objectMapper0.setFilters(simpleFilterProvider0);
        simpleFilterProvider0.willFailOnUnknownId();
        assertFalse(simpleFilterProvider0.willFailOnUnknownId());
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_LONG_FOR_INTS;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON", "JSON");
        objectMapper0.writeValue((File) mockFile0, (Object) jsonFactory0);
        MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
        objectMapper0.readValue((InputStream) mockFileInputStream0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType(javaType0);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PipedInputStream> class0 = PipedInputStream.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.enableDefaultTyping();
        Class<BufferedInputStream> class0 = BufferedInputStream.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[1];
        TypeReference<FilterInputStream> typeReference0 = (TypeReference<FilterInputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        objectMapper0.readValue(byteArray0, (int) 51, 3, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(objectNode0);
        TypeReference<OutputStreamWriter> typeReference0 = (TypeReference<OutputStreamWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue(jsonParser0, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        char[] charArray0 = new char[4];
        CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
        PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
        Class<SimpleType> class0 = SimpleType.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        objectMapper0.readValue((Reader) pushbackReader0, (JavaType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
        objectMapper0.disable(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<MockFileInputStream> typeReference0 = (TypeReference<MockFileInputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.reader(typeReference0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = objectMapper0.getJsonFactory();
        jsonFactory0.requiresCustomCodec();
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
        Float float0 = new Float(0.0F);
        ValueNode valueNode0 = jsonNodeFactory0.numberNode(float0);
        Class<Object> class0 = Object.class;
        Object object0 = objectMapper0.treeToValue((TreeNode) valueNode0, class0);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[3];
        objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<IntNode> class0 = IntNode.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("MIME-NO-LINEFEEDS", "MIME-NO-LINEFEEDS");
        URL uRL0 = mockFile0.toURL();
        objectMapper0.readValue(uRL0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayDeque> class0 = ArrayDeque.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile(" / 0x");
        objectMapper0.readValue((File) mockFile0, (JavaType) collectionType0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BeanSerializerFactory beanSerializerFactory0 = BeanSerializerFactory.instance;
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory(beanSerializerFactory0);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("`7Q");
        objectMapper0.writeValueAsBytes(mockFileOutputStream0);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        char[] charArray0 = new char[7];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        objectMapper0.readValues(jsonParser0, (TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyNamingStrategy propertyNamingStrategy0 = objectMapper0.getPropertyNamingStrategy();
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockPrintStream mockPrintStream0 = new MockPrintStream("bWmU>&~cFa+>Q(");
        objectMapper0.writeValue((OutputStream) mockPrintStream0, (Object) mockPrintStream0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StringWriter stringWriter0 = new StringWriter();
        objectMapper0.writeValue((Writer) stringWriter0, (Object) stringWriter0);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter("=M>yjm3=#pVGc");
        ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        JsonParser jsonParser0 = jsonFactory0.createParser("com.fasterxml.jakson.databind.ObjectMapper$2");
        Class<MockPrintWriter> class0 = MockPrintWriter.class;
        SimpleType simpleType0 = SimpleType.construct(class0);
        objectMapper0.readValue(jsonParser0, (ResolvedType) simpleType0);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonNodeFactory jsonNodeFactory0 = objectMapper0.getNodeFactory();
        assertNotNull(jsonNodeFactory0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer();
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.getDeserializationFeatures();
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector(annotationIntrospector0);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.IS_GETTER;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
        ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = (PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy) PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES;
        ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PipedReader> class0 = PipedReader.class;
        ObjectReader objectReader0 = objectMapper0.reader(class0);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());
        Object object0 = objectMapper0.setHandlerInstantiator(handlerInstantiator0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, (String) null);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapType> class0 = MapType.class;
        objectMapper0.readValue((InputStream) null, class0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((CharacterEscapes) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = objectMapper0.getDateFormat();
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        byte[] byteArray0 = new byte[8];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate(jsonParser0);
        Class<Throwable> class0 = Throwable.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class1 = Object.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class1);
        MapType mapType0 = MapType.construct(class0, mapLikeType0, mapLikeType0);
        objectMapper0.readValue((JsonParser) jsonParserDelegate0, (JavaType) mapType0);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        JsonParserDelegate jsonParserDelegate0 = new JsonParserDelegate((JsonParser) null);
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(jsonParserDelegate0, (JsonParser) null);
        objectMapper0.readValues((JsonParser) jsonParserSequence0, (ResolvedType) null);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[0];
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) null);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.CANONICALIZE_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        int int0 = objectMapper0.mixInCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.isFloat();
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<FloatNode> class0 = FloatNode.class;
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
        boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS;
        boolean boolean0 = objectMapper0.isEnabled(serializationFeature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerFactory serializerFactory0 = objectMapper0.getSerializerFactory();
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("&");
        URL uRL0 = mockFile0.toURL();
        objectMapper0.readValue(uRL0, (TypeReference) null);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PrettyPrinter prettyPrinter0 = objectMapper0._defaultPrettyPrinter();
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[8];
        Class<PipedWriter> class0 = PipedWriter.class;
        JavaType javaType0 = TypeFactory.unknownType();
        CollectionType collectionType0 = CollectionType.construct(class0, javaType0);
        objectMapper0.readValue(byteArray0, 580, 2, (JavaType) collectionType0);
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
        objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues injectableValues0 = objectMapper0.getInjectableValues();
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[2];
        objectMapper0.disable(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        URL uRL0 = MockURL.getFtpExample();
        Class<NullNode> class0 = NullNode.class;
        objectMapper0.readValue(uRL0, class0);
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[5];
        Class<DataOutputStream> class0 = DataOutputStream.class;
        objectMapper0.readValue(byteArray0, class0);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BigIntegerNode> class0 = BigIntegerNode.class;
        Class<?> class1 = objectMapper0.findMixInClassFor(class0);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[1];
        objectMapper0.enable(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
        ObjectMapper objectMapper1 = objectMapper0.setConfig(serializationConfig0);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<Throwable>[] classArray0 = (Class<Throwable>[]) Array.newInstance(Class.class, 2);
        Class<Throwable> class0 = Throwable.class;
        classArray0[0] = class0;
        classArray0[1] = class0;
        simpleModule0.registerSubtypes(classArray0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<POJONode> typeReference0 = (TypeReference<POJONode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        objectMapper0.readValue((File) null, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.constructType((Type) null);
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DURATIONS_AS_TIMESTAMPS;
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((Base64Variant) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        char[] charArray0 = new char[0];
        CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
        TypeReference<ObjectOutputStream> typeReference0 = (TypeReference<ObjectOutputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue((Reader) charArrayReader0, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HashMap<String, AbstractDeserializer> hashMap0 = new HashMap<String, AbstractDeserializer>();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider(hashMap0);
        ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<ByteArrayInputStream> typeReference0 = (TypeReference<ByteArrayInputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.convertValue((Object) null, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
        ObjectWriter objectWriter0 = objectMapper0.writer(contextAttributes0);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationProblemHandler deserializationProblemHandler0 = mock(DeserializationProblemHandler.class, new ViolatedAssumptionAnswer());
        ObjectMapper objectMapper1 = objectMapper0.addHandler(deserializationProblemHandler0);
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedInputStream pipedInputStream0 = new PipedInputStream(5);
        TypeReference<TextNode> typeReference0 = (TypeReference<TextNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        objectMapper0.readValue((InputStream) pipedInputStream0, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        TypeFactory typeFactory0 = objectMapper0.getTypeFactory();
        assertNotNull(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
        ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Class<BinaryNode> class0 = BinaryNode.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) simpleType0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, true);
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, (DefaultDeserializationContext) null);
        DeserializationFeature deserializationFeature0 = DeserializationFeature.UNWRAP_ROOT_VALUE;
        boolean boolean0 = objectMapper0.isEnabled(deserializationFeature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setTypeFactory((TypeFactory) null);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<ByteArrayOutputStream> typeReference0 = (TypeReference<ByteArrayOutputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue("1nu8\"C", (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<StringReader> class0 = StringReader.class;
        JsonSerializer<StringReader> jsonSerializer0 = (JsonSerializer<StringReader>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        simpleModule0.addKeySerializer((Class<? extends StringReader>) class0, jsonSerializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
        doReturn(0).when(comparator0).compare(any(), any());
        TreeSet<Module> treeSet0 = new TreeSet<Module>(comparator0);
        SimpleModule simpleModule0 = new SimpleModule("Kw`|*\"-D<4\"[U>3X;");
        Class<Integer> class0 = Integer.class;
        SimpleModule simpleModule1 = simpleModule0.addKeyDeserializer(class0, (KeyDeserializer) null);
        treeSet0.add(simpleModule1);
        ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<Module>) treeSet0);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Version version0 = new Version((-1633), 24, (-1633), (String) null, "null", (String) null);
        SimpleModule simpleModule0 = new SimpleModule(version0);
        Class<SimpleModule> class0 = SimpleModule.class;
        JsonDeserializer<SimpleModule> jsonDeserializer0 = (JsonDeserializer<SimpleModule>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends SimpleModule>) jsonDeserializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Version version0 = new Version((-1633), 24, (-1633), (String) null, "null", (String) null);
        SimpleModule simpleModule0 = new SimpleModule(version0);
        Class<FloatNode> class0 = FloatNode.class;
        JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
        SimpleModule simpleModule1 = simpleModule0.addValueInstantiator(class0, jsonLocationInstantiator0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Version version0 = new Version((-1633), 24, (-1633), (String) null, "null", (String) null);
        SimpleModule simpleModule0 = new SimpleModule(version0);
        Class<DataInputStream> class0 = DataInputStream.class;
        JsonSerializer<FilterInputStream> jsonSerializer0 = (JsonSerializer<FilterInputStream>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.addSerializer((Class<? extends FilterInputStream>) class0, jsonSerializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Version version0 = new Version((-1633), 24, (-1633), (String) null, "null", (String) null);
        SimpleModule simpleModule0 = new SimpleModule(version0);
        Class<FloatNode> class0 = FloatNode.class;
        Class<DataInputStream> class1 = DataInputStream.class;
        SimpleModule simpleModule1 = simpleModule0.setMixInAnnotation(class0, class1);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        BeanSerializerModifier beanSerializerModifier0 = mock(BeanSerializerModifier.class, new ViolatedAssumptionAnswer());
        simpleModule0.setSerializerModifier(beanSerializerModifier0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayDeque> class0 = ArrayDeque.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        objectMapper_DefaultTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, collectionType0, (Collection<NamedType>) null);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
        objectMapper0.writeValueAsString(objectMapper1);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Map> class0 = Map.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        CollectionType collectionType0 = CollectionType.construct(class0, mapType0);
        ArrayType arrayType0 = ArrayType.construct(mapType0, typeFactory0, collectionType0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(arrayType0);
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        Class<BooleanNode> class0 = BooleanNode.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        Class<Object> class0 = Object.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        JsonFactory jsonFactory0 = new JsonFactory();
        BufferRecycler bufferRecycler0 = jsonFactory0._getBufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper_DefaultTypeResolverBuilder0, false);
        URI uRI0 = MockURI.aFileURI;
        MockFile mockFile0 = new MockFile(uRI0);
        MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 2, objectMapper0, mockPrintStream0);
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringGeneratorDelegate filteringGeneratorDelegate0 = new FilteringGeneratorDelegate(uTF8JsonGenerator0, tokenFilter0, true, true);
        IntNode intNode0 = IntNode.valueOf(68);
        objectMapper0.writeTree((JsonGenerator) filteringGeneratorDelegate0, (TreeNode) intNode0);
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        JsonNode jsonNode0 = objectMapper1.readTree((File) mockFile0);
        jsonNode0.isShort();
        assertTrue(jsonNode0.isShort());
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        Class<BigIntegerNode> class0 = BigIntegerNode.class;
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(arrayType0);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        Class<MapType> class0 = MapType.class;
        SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(simpleType0);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0);
        objectMapper1.equals((Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0._checkInvalidCopy(class0);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule((String) null, (Version) null);
        objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule("w{bsF%", (Version) null);
        objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[0];
        ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Module[] moduleArray0 = new Module[3];
        objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        List<Module> list0 = ObjectMapper.findModules(classLoader0);
        list0.isEmpty();
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
        ObjectMapper objectMapper1 = objectMapper0.setMixInResolver(simpleMixInResolver0);
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.USE_STD_BEAN_NAMING;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_ENUMS_USING_INDEX;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, true);
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, false);
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL;
        ObjectMapper objectMapper1 = objectMapper0.configure(deserializationFeature0, true);
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[2];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        jsonParser_FeatureArray0[1] = jsonParser_FeatureArray0[0];
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
        ObjectMapper objectMapper1 = objectMapper0.disable(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        objectMapper0.disable(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[4] = jsonGenerator_FeatureArray0[2];
        jsonGenerator_FeatureArray0[5] = jsonGenerator_FeatureArray0[1];
        ObjectMapper objectMapper1 = objectMapper0.enable(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test159159() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[4];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[2] = jsonGenerator_FeatureArray0[0];
        jsonGenerator_FeatureArray0[3] = jsonGenerator_FeatureArray0[2];
        ObjectMapper objectMapper1 = objectMapper0.disable(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test160160() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DoubleNode doubleNode0 = DoubleNode.valueOf(2);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
        DoubleNode doubleNode1 = objectMapper0.readTree(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test160161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DoubleNode doubleNode0 = DoubleNode.valueOf(2);
        JsonParser jsonParser0 = objectMapper0.treeAsTokens(doubleNode0);
        DoubleNode doubleNode1 = objectMapper0.readTree(jsonParser0);
        jsonParser0.getCurrentTokenId();
    }

    @Test(timeout = 4000)
    public void test161162() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        char[] charArray0 = new char[0];
        JsonParser jsonParser0 = jsonFactory0.createParser(charArray0);
        ObjectNode objectNode0 = objectMapper0.readTree(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test162163() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[6];
        byteArray0[5] = (byte) 54;
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) 5, (byte) 5);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte) 54);
        JsonNode jsonNode0 = objectMapper0.readTree((InputStream) bufferedInputStream0);
        jsonNode0.doubleValue();
    }

    @Test(timeout = 4000)
    public void test163164() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[1];
        byteArray0[0] = (byte) 51;
        JsonNode jsonNode0 = objectMapper0.readTree(byteArray0);
        jsonNode0.getNodeType();
        assertNotNull(jsonNode0.getNodeType());
    }

    @Test(timeout = 4000)
    public void test164165() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        MockFile mockFile0 = new MockFile("JSON", "JSON");
        objectMapper0.writeValue((File) mockFile0, (Object) jsonFactory0);
        URL uRL0 = mockFile0.toURL();
        JsonNode jsonNode0 = objectMapper0.readTree(uRL0);
        jsonNode0.asText();
        assertNotNull(jsonNode0.asText());
    }

    @Test(timeout = 4000)
    public void test165166() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        POJONode pOJONode0 = new POJONode("(eom6`,9TR7}y<V~Lj");
        String string0 = objectMapper0.writeValueAsString(pOJONode0);
    }

    @Test(timeout = 4000)
    public void test166167() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(8);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0, true);
        JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) mockPrintStream0, jsonEncoding0);
        objectMapper0.writeTree(jsonGenerator0, (JsonNode) null);
        byteArrayBuilder0.getCurrentSegmentLength();
    }

    @Test(timeout = 4000)
    public void test167168() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        IntNode intNode0 = new IntNode(2);
        Class<MockFileReader> class0 = MockFileReader.class;
        objectMapper0.treeToValue((TreeNode) intNode0, class0);
    }

    @Test(timeout = 4000)
    public void test168169() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectNode> class0 = ObjectNode.class;
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        ObjectNode objectNode0 = arrayNode0.objectNode();
        ObjectNode objectNode1 = objectMapper0.treeToValue((TreeNode) objectNode0, class0);
    }

    @Test(timeout = 4000)
    public void test169170() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
        ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0);
        objectMapper0.valueToTree((Object) objectWriter0);
    }

    @Test(timeout = 4000)
    public void test170171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        LongNode longNode0 = objectMapper0.valueToTree((Object) null);
        assertNotNull(longNode0);
    }

    @Test(timeout = 4000)
    public void test171172() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        ObjectWriter objectWriter0 = objectMapper0.writerFor(class0);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test172173() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerFor((Class<?>) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test173174() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<ObjectInputStream> typeReference0 = (TypeReference<ObjectInputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.writerFor(typeReference0);
    }

    @Test(timeout = 4000)
    public void test174175() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerFor((TypeReference<?>) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test175176() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter) ObjectMapper._defaultPrettyPrinter;
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) defaultPrettyPrinter0);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test176177() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((PrettyPrinter) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test177178() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((Class<?>) null);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test178179() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<OutputStreamWriter> typeReference0 = (TypeReference<OutputStreamWriter>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.writerWithType(typeReference0);
    }

    @Test(timeout = 4000)
    public void test179180() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((TypeReference<?>) null);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test180181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PipedOutputStream> class0 = PipedOutputStream.class;
        objectMapper0.convertValue((Object) class0, class0);
    }

    @Test(timeout = 4000)
    public void test181182() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<PipedOutputStream> class0 = PipedOutputStream.class;
        PipedOutputStream pipedOutputStream0 = objectMapper0.convertValue((Object) null, class0);
    }

    @Test(timeout = 4000)
    public void test182183() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayDeque> class0 = ArrayDeque.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) collectionType0);
        objectMapper0.convertValue((Object) arrayType0, (JavaType) collectionType0);
    }

    @Test(timeout = 4000)
    public void test183184() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TextNode textNode0 = objectMapper0.convertValue((Object) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test184185() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        NullNode nullNode0 = NullNode.getInstance();
        Object object0 = objectMapper0._convert(nullNode0, javaType0);
    }

    @Test(timeout = 4000)
    public void test185186() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        objectMapper0.acceptJsonFormatVisitor((JavaType) null, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test186187() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        FileSystemHandling.shouldAllThrowIOExceptions();
        MockFile mockFile0 = new MockFile("$y-.Pzp$(cRkC(", "$y-.Pzp$(cRkC(");
        objectMapper0.writeValue((File) mockFile0, (Object) "$y-.Pzp$(cRkC(");
    }

    @Test(timeout = 4000)
    public void test187188() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, objectMapper0, false);
        StringWriter stringWriter0 = new StringWriter();
        WriterBasedJsonGenerator writerBasedJsonGenerator0 = new WriterBasedJsonGenerator(iOContext0, 2, objectMapper0, stringWriter0);
        FloatNode floatNode0 = FloatNode.valueOf(1);
        Class<Object> class0 = Object.class;
        objectMapper0._configAndWriteValue(writerBasedJsonGenerator0, floatNode0, class0);
        writerBasedJsonGenerator0.getFeatureMask();
    }

    @Test(timeout = 4000)
    public void test188189() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        BooleanNode booleanNode0 = jsonNodeFactory0.booleanNode(true);
        IOContext iOContext0 = new IOContext(bufferRecycler0, booleanNode0, false);
        PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
        UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, pipedOutputStream0);
        Class<DoubleNode> class0 = DoubleNode.class;
        objectMapper0._configAndWriteValue(uTF8JsonGenerator0, booleanNode0, class0);
    }

    @Test(timeout = 4000)
    public void test189190() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<NullNode> class0 = NullNode.class;
        objectMapper0._configAndWriteValue((JsonGenerator) null, class0, class0);
    }

    @Test(timeout = 4000)
    public void test190191() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(true);
        ConcurrentHashMap<String, JsonNode> concurrentHashMap0 = new ConcurrentHashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, concurrentHashMap0);
        ArrayNode arrayNode0 = objectNode0.withArray(".Cn@>7tVp;jkX+ws");
        NullNode nullNode0 = arrayNode0.nullNode();
        Class<ObjectNode> class0 = ObjectNode.class;
        ObjectNode objectNode1 = objectMapper0.treeToValue((TreeNode) nullNode0, class0);
    }

    @Test(timeout = 4000)
    public void test191192() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("JSON");
        objectMapper0.writeValue((File) mockFile0, (Object) null);
        objectMapper0.readTree((File) mockFile0);
        JsonNode jsonNode0 = objectMapper0.readTree((File) mockFile0);
        jsonNode0.isFloat();
        assertFalse(jsonNode0.isFloat());
    }
}
