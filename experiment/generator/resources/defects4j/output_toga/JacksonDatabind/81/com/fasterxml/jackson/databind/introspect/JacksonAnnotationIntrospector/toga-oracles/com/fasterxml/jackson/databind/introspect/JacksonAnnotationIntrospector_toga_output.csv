project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<?> class0 = jacksonAnnotationIntrospector0.findSerializationType((Annotated) null);
    assertNull(class0);
}",0,
project,0,test011,"public void test011() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jacksonAnnotationIntrospector0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test022,"public void test022() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructNoTypeResolverBuilder();
    assertNull(stdTypeResolverBuilder0.getTypeProperty());
}",0,assertNotNull(stdTypeResolverBuilder0.getTypeProperty())
project,0,test033,"public void test033() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructStdTypeResolverBuilder();
    assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
}",0,assertFalse(stdTypeResolverBuilder0.isTypeIdVisible())
project,0,test044,"public void test044() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AttributePropertyWriter> class0 = AttributePropertyWriter.class;
    Vector<JavaType> vector0 = new Vector<JavaType>();
    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
    Class<MapperFeature> class1 = MapperFeature.class;
    JavaType javaType0 = TypeFactory.unknownType();
    ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
    MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) arrayType0, (JavaType[]) null, (JavaType) arrayType0, (JavaType) arrayType0);
    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, (JavaType[]) null, (JavaType) arrayType0);
    Class<?> class2 = jacksonAnnotationIntrospector0.findDeserializationContentType((Annotated) null, referenceType0);
    assertNull(class2);
}",0,
project,0,test066,"public void test066() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.isTypeId((AnnotatedMember) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JavaType javaType0 = TypeFactory.unknownType();
    Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationType(annotatedClass0, javaType0);
    assertNull(class0);
}",0,assertNotNull(class0)
project,0,test088,"public void test088() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    Class<Boolean> class1 = Boolean.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
    TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
    VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, ""#"", simpleType0);
    Class<?> class2 = jacksonAnnotationIntrospector0.findSerializationKeyType(virtualAnnotatedMember0, simpleType0);
    assertNull(class2);
}",0,"assertEquals(class0, class2)"
project,0,test099,"public void test099() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.hasAnySetterAnnotation((AnnotatedMethod) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JavaType javaType0 = TypeFactory.unknownType();
    Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationKeyType(annotatedClass0, javaType0);
    assertNull(class0);
}",0,assertNotNull(class0)
project,0,test1212,"public void test1212() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.hasAnyGetterAnnotation((AnnotatedMethod) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<?> class0 = jacksonAnnotationIntrospector0.findSerializationContentType((Annotated) null, (JavaType) null);
    assertNull(class0);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Object object0 = jacksonAnnotationIntrospector0.readResolve();
    assertSame(object0, jacksonAnnotationIntrospector0);
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    jacksonAnnotationIntrospector0._annotationsInside = null;
    Object object0 = jacksonAnnotationIntrospector0.readResolve();
    assertSame(jacksonAnnotationIntrospector0, object0);
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
    String string0 = jacksonAnnotationIntrospector0.findEnumValue(deserializationFeature0);
    assertEquals(""FAIL_ON_NUMBERS_FOR_ENUMS"", string0);
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0.findRootName(annotatedClass0);
    assertNull(propertyName0);
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    try {
        objectMapper0.writeValue((OutputStream) byteArrayOutputStream0, (Object) jacksonAnnotationIntrospector0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No serializer found for class com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    String string0 = jacksonAnnotationIntrospector0.findClassDescription(annotatedClass0);
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test2020,"public void test2020() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Integer> class0 = Integer.class;
    VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, ""DCi>SkP>8:G|$:T'\"""", (JavaType) null);
    Object object0 = jacksonAnnotationIntrospector0.findInjectableValueId(virtualAnnotatedMember0);
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test2121,"public void test2121() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
    assertNotNull(objectReader0);
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    List<NamedType> list0 = jacksonAnnotationIntrospector0.findSubtypes(annotatedClass0);
    assertNull(list0);
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    String string0 = jacksonAnnotationIntrospector0.findTypeName(annotatedClass0);
    assertNull(string0);
}",0,assertNotNull(string0)
project,0,test2525,"public void test2525() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    ObjectIdInfo objectIdInfo0 = jacksonAnnotationIntrospector0.findObjectReferenceInfo(annotatedClass0, (ObjectIdInfo) null);
    assertNull(objectIdInfo0);
}",0,assertNotNull(objectIdInfo0)
project,0,test2626,"public void test2626() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<Integer> class0 = Integer.TYPE;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    JavaType javaType0 = TypeFactory.unknownType();
    MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0, javaType0);
    ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) mapType0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    Object object0 = jacksonAnnotationIntrospector0.findNullSerializer(annotatedClass0);
    assertNull(object0);
}",0,
project,0,test2929,"public void test2929() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<String> class0 = String.class;
    VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, ""ifs]T5:o"", (JavaType) null);
    Object object0 = jacksonAnnotationIntrospector0.findSerializationContentConverter(virtualAnnotatedMember0);
    assertNull(object0);
}",0,assertNotNull(object0)
project,0,test3131,"public void test3131() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = jacksonAnnotationIntrospector0.findPOJOBuilderConfig(annotatedClass0);
    assertNull(jsonPOJOBuilder_Value0);
}",0,
project,0,test3232,"public void test3232() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    boolean boolean0 = jacksonAnnotationIntrospector0.hasCreatorAnnotation(annotatedClass0);
    assertFalse(boolean0);
}",0,
project,0,test3333,"public void test3333() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector1 = jacksonAnnotationIntrospector0.setConstructorPropertiesImpliesCreator(false);
    boolean boolean0 = jacksonAnnotationIntrospector1.hasCreatorAnnotation(annotatedClass0);
    assertFalse(boolean0);
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    jacksonAnnotationIntrospector0.findCreatorBinding(annotatedClass0);
}",0,
project,0,test3535,"public void test3535() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<String> class0 = String.class;
    Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit((Class<?>) null, class0);
    assertNull(class1);
}",0,"assertEquals(class0, class1)"
project,0,test3636,"public void test3636() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    Class<MapperFeature> class1 = MapperFeature.class;
    Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class1, class0);
    assertNotNull(class2);
}",0,"assertEquals(class0, class2)"
project,0,test3738,"public void test3738() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class0);
    assertNull(class1);
}",0,
project,0,test3839,"public void test3839() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""w<ydooldwR.l:r^"", (String) null);
    assertTrue(propertyName0.hasSimpleName());
}",0,assertTrue(propertyName0.hasSimpleName())
project,0,test3940,"public void test3940() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("""", """");
    assertFalse(propertyName0.hasSimpleName());
}",0,assertTrue(propertyName0.hasSimpleName())
project,0,test4041,"public void test4041() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""zr8r>B`Ct5W^"", """");
    assertEquals(""zr8r>B`Ct5W^"", propertyName0.getSimpleName());
}",0,assertNotNull(propertyName0.getSimpleName())
project,0,test4042,"public void test4042() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""zr8r>B`Ct5W^"", """");
    assertFalse(propertyName0.hasNamespace());
}",0,assertFalse(propertyName0.hasNamespace())
project,0,test4143,"public void test4143() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""\""e#ZL!"", ""\""e#ZL!"");
    assertTrue(propertyName0.hasNamespace());
}",0,assertFalse(propertyName0.hasNamespace())
