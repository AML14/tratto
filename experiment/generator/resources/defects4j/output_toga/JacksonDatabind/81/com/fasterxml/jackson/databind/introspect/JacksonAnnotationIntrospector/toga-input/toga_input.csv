focal_method,test_prefix,docstring
"@Override
// since 2.7
@Deprecated
public Class<?> findSerializationType(Annotated am) {
    return null;
}","public void test000() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<?> class0 = jacksonAnnotationIntrospector0.findSerializationType((Annotated) null);
    assertNull(class0);
}",""
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return _newReader(getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test011() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jacksonAnnotationIntrospector0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"public String getTypeProperty() {
    return _typeProperty;
}","public void test022() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructNoTypeResolverBuilder();
    assertNull(stdTypeResolverBuilder0.getTypeProperty());
}",""
"public boolean isTypeIdVisible() {
    return _typeIdVisible;
}","public void test033() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructStdTypeResolverBuilder();
    assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
}",""
"@Override
// since 2.7
@Deprecated
public Class<?> findDeserializationContentType(Annotated am, JavaType baseContentType) {
    return null;
}","public void test044() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AttributePropertyWriter> class0 = AttributePropertyWriter.class;
    Vector<JavaType> vector0 = new Vector<JavaType>();
    TypeBindings typeBindings0 = TypeBindings.create((Class<?>) class0, (List<JavaType>) vector0);
    Class<MapperFeature> class1 = MapperFeature.class;
    JavaType javaType0 = TypeFactory.unknownType();
    ArrayType arrayType0 = ArrayType.construct(javaType0, typeBindings0);
    MapType mapType0 = MapType.construct((Class<?>) class1, typeBindings0, (JavaType) arrayType0, (JavaType[]) null, (JavaType) arrayType0, (JavaType) arrayType0);
    ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) mapType0, (JavaType[]) null, (JavaType) arrayType0);
    Class<?> class2 = jacksonAnnotationIntrospector0.findDeserializationContentType((Annotated) null, referenceType0);
    assertNull(class2);
}",""
"@Override
public Boolean isTypeId(AnnotatedMember member) {
    return _hasAnnotation(member, JsonTypeId.class);
}","public void test066() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.isTypeId((AnnotatedMember) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}",""
"@Override
// since 2.7
@Deprecated
public Class<?> findDeserializationType(Annotated am, JavaType baseType) {
    return null;
}","public void test077() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JavaType javaType0 = TypeFactory.unknownType();
    Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationType(annotatedClass0, javaType0);
    assertNull(class0);
}",""
"@Override
// since 2.7
@Deprecated
public Class<?> findSerializationKeyType(Annotated am, JavaType baseType) {
    return null;
}","public void test088() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<AnnotationIntrospector.ReferenceProperty.Type> class0 = AnnotationIntrospector.ReferenceProperty.Type.class;
    Class<Boolean> class1 = Boolean.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class1);
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class0, (JavaType) simpleType0);
    TypeResolutionContext.Basic typeResolutionContext_Basic0 = new TypeResolutionContext.Basic(typeFactory0, typeBindings0);
    VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember(typeResolutionContext_Basic0, class1, ""#"", simpleType0);
    Class<?> class2 = jacksonAnnotationIntrospector0.findSerializationKeyType(virtualAnnotatedMember0, simpleType0);
    assertNull(class2);
}",""
"@Override
// since 2.9
@Deprecated
public boolean hasAnySetterAnnotation(AnnotatedMethod am) {
    return _hasAnnotation(am, JsonAnySetter.class);
}","public void test099() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.hasAnySetterAnnotation((AnnotatedMethod) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}",""
"@Override
// since 2.7
@Deprecated
public Class<?> findDeserializationKeyType(Annotated am, JavaType baseKeyType) {
    return null;
}","public void test1010() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JavaType javaType0 = TypeFactory.unknownType();
    Class<?> class0 = jacksonAnnotationIntrospector0.findDeserializationKeyType(annotatedClass0, javaType0);
    assertNull(class0);
}",""
"@Override
// since 2.9
@Deprecated
public boolean hasAnyGetterAnnotation(AnnotatedMethod am) {
    // No dedicated disabling; regular @JsonIgnore used if needs to be ignored (handled separately)
    return _hasAnnotation(am, JsonAnyGetter.class);
}","public void test1212() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.hasAnyGetterAnnotation((AnnotatedMethod) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}",""
"@Override
// since 2.7
@Deprecated
public Class<?> findSerializationContentType(Annotated am, JavaType baseType) {
    return null;
}","public void test1313() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<?> class0 = jacksonAnnotationIntrospector0.findSerializationContentType((Annotated) null, (JavaType) null);
    assertNull(class0);
}",""
"protected Object readResolve() {
    if (_annotationsInside == null) {
        _annotationsInside = new LRUMap<Class<?>, Boolean>(48, 48);
    }
    return this;
}","public void test1414() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Object object0 = jacksonAnnotationIntrospector0.readResolve();
    assertSame(object0, jacksonAnnotationIntrospector0);
}",""
"protected Object readResolve() {
    if (_annotationsInside == null) {
        _annotationsInside = new LRUMap<Class<?>, Boolean>(48, 48);
    }
    return this;
}","public void test1515() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    jacksonAnnotationIntrospector0._annotationsInside = null;
    Object object0 = jacksonAnnotationIntrospector0.readResolve();
    assertSame(jacksonAnnotationIntrospector0, object0);
}",""
"/*
    /**********************************************************
    /* General annotations
    /**********************************************************
     */
/**
 * Since 2.6, we have supported use of {@link JsonProperty} for specifying
 * explicit serialized name
 */
@Override
// since 2.8
@Deprecated
public String findEnumValue(Enum<?> value) {
    // 11-Jun-2015, tatu: As per [databind#677], need to allow explicit naming.
    //   Unfortunately can not quite use standard AnnotatedClass here (due to various
    //   reasons, including odd representation JVM uses); has to do for now
    try {
        // We know that values are actually static fields with matching name so:
        Field f = value.getClass().getField(value.name());
        if (f != null) {
            JsonProperty prop = f.getAnnotation(JsonProperty.class);
            if (prop != null) {
                String n = prop.value();
                if (n != null && !n.isEmpty()) {
                    return n;
                }
            }
        }
    } catch (SecurityException e) {
        // 17-Sep-2015, tatu: Anything we could/should do here?
    } catch (NoSuchFieldException e) {
        // 17-Sep-2015, tatu: should not really happen. But... can we do anything?
    }
    return value.name();
}","public void test1616() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;
    String string0 = jacksonAnnotationIntrospector0.findEnumValue(deserializationFeature0);
    assertEquals(""FAIL_ON_NUMBERS_FOR_ENUMS"", string0);
}",""
"/*
    /**********************************************************
    /* General class annotations
    /**********************************************************
     */
@Override
public PropertyName findRootName(AnnotatedClass ac) {
    JsonRootName ann = _findAnnotation(ac, JsonRootName.class);
    if (ann == null) {
        return null;
    }
    String ns = ann.namespace();
    if (ns != null && ns.length() == 0) {
        ns = null;
    }
    return PropertyName.construct(ann.value(), ns);
}","public void test1717() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0.findRootName(annotatedClass0);
    assertNull(propertyName0);
}",""
"public void writeValue(OutputStream out, Object value) throws IOException, JsonGenerationException, JsonMappingException {
    _configAndWriteValue(_jsonFactory.createGenerator(out, JsonEncoding.UTF8), value);
}","public void test1818() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    try {
        objectMapper0.writeValue((OutputStream) byteArrayOutputStream0, (Object) jacksonAnnotationIntrospector0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No serializer found for class com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
        //
        verifyException(""com.fasterxml.jackson.databind.exc.InvalidDefinitionException"", e);
    }
}","/**
 *  Method that can be used to serialize any Java value as
 *  JSON output, using output stream provided (using encoding
 *  {@link JsonEncoding#UTF8}).
 * <p>
 *  Note: method does not close the underlying stream explicitly
 *  here; however, {@link JsonFactory} this mapper uses may choose
 *  to close the stream depending on its settings (by default,
 *  it will try to close it when {@link JsonGenerator} we construct
 *  is closed).
 */"
"@Override
public String findClassDescription(AnnotatedClass ac) {
    JsonClassDescription ann = _findAnnotation(ac, JsonClassDescription.class);
    return (ann == null) ? null : ann.value();
}","public void test1919() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    String string0 = jacksonAnnotationIntrospector0.findClassDescription(annotatedClass0);
    assertNull(string0);
}",""
"@Override
// since 2.9
@Deprecated
public Object findInjectableValueId(AnnotatedMember m) {
    JacksonInject.Value v = findInjectableValue(m);
    return (v == null) ? null : v.getId();
}","public void test2020() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Integer> class0 = Integer.class;
    VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, ""DCi>SkP>8:G|$:T'\"""", (JavaType) null);
    Object object0 = jacksonAnnotationIntrospector0.findInjectableValueId(virtualAnnotatedMember0);
    assertNull(object0);
}",""
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return _newReader(getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test2121() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"@Override
public List<NamedType> findSubtypes(Annotated a) {
    JsonSubTypes t = _findAnnotation(a, JsonSubTypes.class);
    if (t == null)
        return null;
    JsonSubTypes.Type[] types = t.value();
    ArrayList<NamedType> result = new ArrayList<NamedType>(types.length);
    for (JsonSubTypes.Type type : types) {
        result.add(new NamedType(type.value(), type.name()));
    }
    return result;
}","public void test2323() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    List<NamedType> list0 = jacksonAnnotationIntrospector0.findSubtypes(annotatedClass0);
    assertNull(list0);
}",""
"@Override
public String findTypeName(AnnotatedClass ac) {
    JsonTypeName tn = _findAnnotation(ac, JsonTypeName.class);
    return (tn == null) ? null : tn.value();
}","public void test2424() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    String string0 = jacksonAnnotationIntrospector0.findTypeName(annotatedClass0);
    assertNull(string0);
}",""
"@Override
public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {
    JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);
    if (ref == null) {
        return objectIdInfo;
    }
    if (objectIdInfo == null) {
        objectIdInfo = ObjectIdInfo.empty();
    }
    return objectIdInfo.withAlwaysAsId(ref.alwaysAsId());
}","public void test2525() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    ObjectIdInfo objectIdInfo0 = jacksonAnnotationIntrospector0.findObjectReferenceInfo(annotatedClass0, (ObjectIdInfo) null);
    assertNull(objectIdInfo0);
}",""
"public boolean hasPrefetchedSerializer() {
    return _prefetch.hasSerializer();
}","public void test2626() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<Integer> class0 = Integer.TYPE;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    JavaType javaType0 = TypeFactory.unknownType();
    MapType mapType0 = MapType.construct(class0, typeBindings0, javaType0, (JavaType[]) null, javaType0, javaType0);
    ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) mapType0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}","/**
 * Diagnostics method that can be called to check whether this writer
 * has pre-fetched serializer to use: pre-fetching improves performance
 * when writer instances are reused as it avoids a per-call serializer
 * lookup.
 *
 * @since 2.2
 */"
"@Override
public Object findNullSerializer(Annotated a) {
    JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);
    if (ann != null) {
        @SuppressWarnings(""rawtypes"")
        Class<? extends JsonSerializer> serClass = ann.nullsUsing();
        if (serClass != JsonSerializer.None.class) {
            return serClass;
        }
    }
    return null;
}","public void test2727() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    Object object0 = jacksonAnnotationIntrospector0.findNullSerializer(annotatedClass0);
    assertNull(object0);
}",""
"@Override
public Object findSerializationContentConverter(AnnotatedMember a) {
    JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);
    return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);
}","public void test2929() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<String> class0 = String.class;
    VirtualAnnotatedMember virtualAnnotatedMember0 = new VirtualAnnotatedMember((TypeResolutionContext) null, class0, ""ifs]T5:o"", (JavaType) null);
    Object object0 = jacksonAnnotationIntrospector0.findSerializationContentConverter(virtualAnnotatedMember0);
    assertNull(object0);
}",""
"@Override
public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {
    JsonPOJOBuilder ann = _findAnnotation(ac, JsonPOJOBuilder.class);
    return (ann == null) ? null : new JsonPOJOBuilder.Value(ann);
}","public void test3131() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = jacksonAnnotationIntrospector0.findPOJOBuilderConfig(annotatedClass0);
    assertNull(jsonPOJOBuilder_Value0);
}",""
"@Override
// since 2.9
@Deprecated
public boolean hasCreatorAnnotation(Annotated a) {
    /* No dedicated disabling; regular @JsonIgnore used if needs to be
         * ignored (and if so, is handled prior to this method getting called)
         */
    JsonCreator ann = _findAnnotation(a, JsonCreator.class);
    if (ann != null) {
        return (ann.mode() != JsonCreator.Mode.DISABLED);
    }
    // 19-Apr-2016, tatu: As per [databind#1197], [databind#1122] (and some related),
    //    may or may not consider it a creator
    if (_cfgConstructorPropertiesImpliesCreator) {
        if (a instanceof AnnotatedConstructor) {
            if (_java7Helper != null) {
                Boolean b = _java7Helper.hasCreatorAnnotation(a);
                if (b != null) {
                    return b.booleanValue();
                }
            }
        }
    }
    return false;
}","public void test3232() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    boolean boolean0 = jacksonAnnotationIntrospector0.hasCreatorAnnotation(annotatedClass0);
    assertFalse(boolean0);
}",""
"@Override
// since 2.9
@Deprecated
public boolean hasCreatorAnnotation(Annotated a) {
    /* No dedicated disabling; regular @JsonIgnore used if needs to be
         * ignored (and if so, is handled prior to this method getting called)
         */
    JsonCreator ann = _findAnnotation(a, JsonCreator.class);
    if (ann != null) {
        return (ann.mode() != JsonCreator.Mode.DISABLED);
    }
    // 19-Apr-2016, tatu: As per [databind#1197], [databind#1122] (and some related),
    //    may or may not consider it a creator
    if (_cfgConstructorPropertiesImpliesCreator) {
        if (a instanceof AnnotatedConstructor) {
            if (_java7Helper != null) {
                Boolean b = _java7Helper.hasCreatorAnnotation(a);
                if (b != null) {
                    return b.booleanValue();
                }
            }
        }
    }
    return false;
}","public void test3333() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector1 = jacksonAnnotationIntrospector0.setConstructorPropertiesImpliesCreator(false);
    boolean boolean0 = jacksonAnnotationIntrospector1.hasCreatorAnnotation(annotatedClass0);
    assertFalse(boolean0);
}",""
"@Override
// since 2.9
@Deprecated
public JsonCreator.Mode findCreatorBinding(Annotated a) {
    JsonCreator ann = _findAnnotation(a, JsonCreator.class);
    return (ann == null) ? null : ann.mode();
}","public void test3434() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    jacksonAnnotationIntrospector0.findCreatorBinding(annotatedClass0);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test3535() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<String> class0 = String.class;
    Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit((Class<?>) null, class0);
    assertNull(class1);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test3636() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    Class<MapperFeature> class1 = MapperFeature.class;
    Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class1, class0);
    assertNotNull(class2);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test3738() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class0);
    assertNull(class1);
}",""
"public boolean hasSimpleName() {
    return _simpleName.length() > 0;
}","public void test3839() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""w<ydooldwR.l:r^"", (String) null);
    assertTrue(propertyName0.hasSimpleName());
}",""
"public boolean hasSimpleName() {
    return _simpleName.length() > 0;
}","public void test3940() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("""", """");
    assertFalse(propertyName0.hasSimpleName());
}",""
"/*
    /**********************************************************
    /* Accessors
    /**********************************************************
     */
public String getSimpleName() {
    return _simpleName;
}","public void test4041() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""zr8r>B`Ct5W^"", """");
    assertEquals(""zr8r>B`Ct5W^"", propertyName0.getSimpleName());
}",""
"public boolean hasNamespace() {
    return _namespace != null;
}","public void test4042() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""zr8r>B`Ct5W^"", """");
    assertFalse(propertyName0.hasNamespace());
}",""
"public boolean hasNamespace() {
    return _namespace != null;
}","public void test4143() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""\""e#ZL!"", ""\""e#ZL!"");
    assertTrue(propertyName0.hasNamespace());
}",""
