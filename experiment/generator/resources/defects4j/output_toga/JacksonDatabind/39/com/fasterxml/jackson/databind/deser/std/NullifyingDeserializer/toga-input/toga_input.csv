focal_method,test_prefix,docstring
"/*
    /**********************************************************
    /* Deserializer API
    /**********************************************************
     */
@Override
public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
    // 29-Jan-2016, tatu: Simple skipping for all other tokens, but FIELD_NAME bit
    //    special unfortunately
    p.skipChildren();
    return null;
}","public void test00() throws Throwable {
    NullifyingDeserializer nullifyingDeserializer0 = new NullifyingDeserializer();
    // Undeclared exception!
    try {
        nullifyingDeserializer0.deserialize((JsonParser) null, (DeserializationContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer"", e);
    }
}",""
"@Override
public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {
    // Not sure if we need to bother but:
    switch(p.getCurrentTokenId()) {
        case JsonTokenId.ID_START_ARRAY:
        case JsonTokenId.ID_START_OBJECT:
        case JsonTokenId.ID_FIELD_NAME:
            return typeDeserializer.deserializeTypedFromAny(p, ctxt);
        default:
            return null;
    }
}","public void test11() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    NullifyingDeserializer nullifyingDeserializer0 = NullifyingDeserializer.instance;
    Object object0 = nullifyingDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
    assertNull(object0);
}",""
