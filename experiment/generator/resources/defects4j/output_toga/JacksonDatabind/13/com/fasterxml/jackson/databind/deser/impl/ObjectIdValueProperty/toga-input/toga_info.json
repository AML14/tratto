{
  "test00" : {
    "methodSignature" : "public AnnotatedMember getMember()",
    "methodName" : "getMember",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    Class<String> class0 = String.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);\n    PropertyName propertyName0 = new PropertyName(\"\");\n    ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    AnnotatedMember annotatedMember0 = objectIdValueProperty0.getMember();\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public int getCreatorIndex()",
    "methodName" : "getCreatorIndex",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    Class<String> class0 = String.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);\n    PropertyName propertyName0 = new PropertyName(\"\");\n    ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdValueProperty0, \"\");\n    objectIdValueProperty1.getCreatorIndex();\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public void set(Object instance, Object value) throws IOException",
    "methodName" : "set",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    Class<String> class0 = String.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);\n    PropertyName propertyName0 = new PropertyName(\"\", \"\");\n    ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    PipedInputStream pipedInputStream0 = new PipedInputStream();\n    objectIdValueProperty0.set(objectIdReader0, pipedInputStream0);\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public <A extends Annotation> A getAnnotation(Class<A> acls)",
    "methodName" : "getAnnotation",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    Class<String> class0 = String.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    Class<Annotation> class1 = Annotation.class;\n    Annotation annotation0 = objectIdValueProperty0.getAnnotation(class1);\n}",
    "testName" : "test33"
  },
  "test44" : {
    "methodSignature" : "public boolean hasValueTypeDeserializer()",
    "methodName" : "hasValueTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test44() throws Throwable {\n    Class<String> class0 = String.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    PropertyName propertyName0 = PropertyName.USE_DEFAULT;\n    PipedInputStream pipedInputStream0 = new PipedInputStream(1361);\n    ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, pipedInputStream0);\n    ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    doReturn(objectIdGenerator_IdKey0).when(objectIdGenerator0).key(any());\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    JsonDeserializer<PipedInputStream> jsonDeserializer0 = (JsonDeserializer<PipedInputStream>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    doReturn(pipedInputStream0).when(jsonDeserializer0).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(simpleType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    objectIdValueProperty0.deserializeAndSet((JsonParser) null, defaultDeserializationContext_Impl0, (Object) null);\n    objectIdValueProperty0.hasValueTypeDeserializer();\n}",
    "testName" : "test44"
  },
  "test55" : {
    "methodSignature" : "public SettableBeanProperty withSimpleName(String simpleName)",
    "methodName" : "withSimpleName",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test55() throws Throwable {\n    Class<String> class0 = String.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    SettableBeanProperty settableBeanProperty0 = objectIdValueProperty0.withSimpleName(\"N>N!ju{TM;xq]-\");\n}",
    "testName" : "test55"
  },
  "test66" : {
    "methodSignature" : "public int getCreatorIndex()",
    "methodName" : "getCreatorIndex",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test66() throws Throwable {\n    Class<String> class0 = String.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    JsonDeserializer<Integer> jsonDeserializer1 = (JsonDeserializer<Integer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(jsonDeserializer1).getNullValue();\n    ObjectIdValueProperty objectIdValueProperty1 = objectIdValueProperty0.withValueDeserializer(jsonDeserializer1);\n    objectIdValueProperty1.getCreatorIndex();\n}",
    "testName" : "test66"
  },
  "test77" : {
    "methodSignature" : "public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException",
    "methodName" : "deserializeSetAndReturn",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test77() throws Throwable {\n    Class<String> class0 = String.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);\n    PropertyName propertyName0 = new PropertyName(\"\");\n    PipedInputStream pipedInputStream0 = new PipedInputStream(1373);\n    ObjectIdGenerator.IdKey objectIdGenerator_IdKey0 = new ObjectIdGenerator.IdKey(class0, class0, pipedInputStream0);\n    ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    doReturn(objectIdGenerator_IdKey0).when(objectIdGenerator0).key(any());\n    JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    JsonDeserializer<JsonSerializer<String>> jsonDeserializer1 = (JsonDeserializer<JsonSerializer<String>>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(jsonDeserializer1).deserialize(any(com.fasterxml.jackson.core.JsonParser.class), any(com.fasterxml.jackson.databind.DeserializationContext.class));\n    ObjectIdReader objectIdReader1 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdReader0.generator, jsonDeserializer1, objectIdValueProperty0, simpleObjectIdResolver0);\n    ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, (PropertyMetadata) null);\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    objectIdValueProperty1.deserializeSetAndReturn((JsonParser) null, defaultDeserializationContext_Impl0, simpleType0);\n}",
    "testName" : "test77"
  },
  "test88" : {
    "methodSignature" : "public Object setAndReturn(Object instance, Object value) throws IOException",
    "methodName" : "setAndReturn",
    "className" : "com.fasterxml.jackson.databind.deser.impl.ObjectIdValueProperty",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test88() throws Throwable {\n    Class<String> class0 = String.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    MapLikeType mapLikeType0 = MapLikeType.construct(class0, simpleType0, simpleType0);\n    PropertyName propertyName0 = new PropertyName(\"\");\n    Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());\n    doReturn(false).when(enumeration0).hasMoreElements();\n    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);\n    ObjectIdGenerator<ObjectReader> objectIdGenerator0 = (ObjectIdGenerator<ObjectReader>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    JsonDeserializer<Annotation> jsonDeserializer0 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    SimpleObjectIdResolver simpleObjectIdResolver0 = new SimpleObjectIdResolver();\n    ObjectIdReader objectIdReader0 = new ObjectIdReader(mapLikeType0, propertyName0, objectIdGenerator0, jsonDeserializer0, (SettableBeanProperty) null, simpleObjectIdResolver0);\n    PropertyMetadata propertyMetadata0 = PropertyMetadata.STD_REQUIRED;\n    ObjectIdValueProperty objectIdValueProperty0 = new ObjectIdValueProperty(objectIdReader0, propertyMetadata0);\n    JsonDeserializer<Annotation> jsonDeserializer1 = (JsonDeserializer<Annotation>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());\n    ObjectIdReader objectIdReader1 = new ObjectIdReader(simpleType0, propertyName0, objectIdReader0.generator, jsonDeserializer1, objectIdValueProperty0, simpleObjectIdResolver0);\n    ObjectIdValueProperty objectIdValueProperty1 = new ObjectIdValueProperty(objectIdReader1, propertyMetadata0);\n    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0);\n    objectIdValueProperty1.setAndReturn((Object) null, bufferedInputStream0);\n}",
    "testName" : "test88"
  }
}