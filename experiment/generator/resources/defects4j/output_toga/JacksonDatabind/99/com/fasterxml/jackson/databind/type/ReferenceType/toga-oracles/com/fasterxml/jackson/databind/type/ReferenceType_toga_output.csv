project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    Class<Integer> class1 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
    Class<MapLikeType> class2 = MapLikeType.class;
    JavaType[] javaTypeArray0 = new JavaType[5];
    ReferenceType referenceType1 = (ReferenceType) referenceType0.refine(class2, typeBindings0, referenceType0, javaTypeArray0);
    assertFalse(referenceType1.isAnchorType());
}",0,assertFalse(referenceType1.isAnchorType())
project,0,test011,"public void test011() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    JavaType javaType0 = referenceType0.getReferencedType();
    assertEquals(0, javaType0.containedTypeCount());
}",0,"assertEquals(1, javaType0.containedTypeCount())"
project,0,test022,"public void test022() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    JavaType[] javaTypeArray0 = new JavaType[7];
    javaTypeArray0[5] = (JavaType) simpleType0;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
    MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, javaTypeArray0[2], javaTypeArray0[4]);
    CollectionType collectionType0 = new CollectionType(mapLikeType0, javaTypeArray0[2]);
    ReferenceType referenceType0 = new ReferenceType(collectionType0, collectionType0);
    boolean boolean0 = referenceType0.isReferenceType();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test033,"public void test033() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    String string0 = referenceType0.toString();
    assertEquals(""[reference type, class com.fasterxml.jackson.databind.type.MapType<com.fasterxml.jackson.databind.type.MapType<[simple type, class com.fasterxml.jackson.databind.type.MapType]>]"", string0);
}",0,
project,0,test044,"public void test044() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    String string0 = referenceType0.getErasedSignature();
    assertEquals(""Lcom/fasterxml/jackson/databind/type/MapType;"", string0);
}",0,
project,0,test055,"public void test055() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    JavaType[] javaTypeArray0 = new JavaType[7];
    javaTypeArray0[5] = (JavaType) simpleType0;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
    MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(collectionLikeType0, javaTypeArray0[2], javaTypeArray0[4]);
    CollectionType collectionType0 = new CollectionType(mapLikeType0, javaTypeArray0[2]);
    ReferenceType referenceType0 = new ReferenceType(collectionType0, collectionLikeType0);
    Class<Integer> class1 = Integer.class;
    ReferenceType referenceType1 = (ReferenceType) referenceType0._narrow(class1);
    assertFalse(referenceType1.isAnchorType());
}",0,
project,0,test066,"public void test066() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    boolean boolean0 = referenceType0.hasContentType();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test077,"public void test077() throws Throwable {
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    CollectionType collectionType0 = new CollectionType(simpleType0, simpleType0);
    // Undeclared exception!
    try {
        ReferenceType.construct((Class<?>) class0, (JavaType) collectionType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ReferenceType"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    Class<MapType> class0 = MapType.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
    JavaType[] javaTypeArray0 = new JavaType[0];
    ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) referenceType0);
    boolean boolean0 = referenceType1.equals(referenceType0);
    assertTrue(referenceType1.isAnchorType());
}",0,assertFalse(referenceType1.isAnchorType())
project,0,test0910,"public void test0910() throws Throwable {
    Class<MapType> class0 = MapType.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
    JavaType[] javaTypeArray0 = new JavaType[0];
    ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) referenceType0);
    boolean boolean0 = referenceType1.equals(referenceType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0911,"public void test0911() throws Throwable {
    Class<MapType> class0 = MapType.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
    JavaType[] javaTypeArray0 = new JavaType[0];
    ReferenceType referenceType1 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) null, javaTypeArray0, (JavaType) referenceType0);
    boolean boolean0 = referenceType1.equals(referenceType0);
    assertFalse(referenceType1.useStaticType());
}",0,
project,0,test1113,"public void test1113() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<MapType> class0 = MapType.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    ReferenceType referenceType0 = new ReferenceType(arrayType0, arrayType0);
    JavaType javaType0 = referenceType0.getContentType();
    assertFalse(javaType0.isJavaLangObject());
}",0,
project,0,test1214,"public void test1214() throws Throwable {
    // Undeclared exception!
    try {
        ReferenceType.upgradeFrom((JavaType) null, (JavaType) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Missing referencedType
        //
        verifyException(""com.fasterxml.jackson.databind.type.ReferenceType"", e);
    }
}",1,
project,0,test1315,"public void test1315() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    // Undeclared exception!
    try {
        ReferenceType.upgradeFrom((JavaType) null, referenceType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ReferenceType"", e);
    }
}",0,
project,0,test1416,"public void test1416() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ReferenceType referenceType1 = (ReferenceType) referenceType0.withContentType(referenceType0);
    assertFalse(referenceType1.isAnchorType());
}",0,assertFalse(referenceType1.isAnchorType())
project,0,test1417,"public void test1417() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ReferenceType referenceType1 = (ReferenceType) referenceType0.withContentType(referenceType0);
    assertFalse(referenceType1.equals((Object) referenceType0));
}",0,
project,0,test1518,"public void test1518() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<MapType> class0 = MapType.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(arrayType0, arrayType0);
    ReferenceType referenceType1 = (ReferenceType) referenceType0.withContentType(arrayType0);
    assertTrue(referenceType1.isAnchorType());
}",0,assertFalse(referenceType1.isAnchorType())
project,0,test1619,"public void test1619() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    Class<Integer> class1 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
    Class<MapLikeType> class2 = MapLikeType.class;
    CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) referenceType0);
    CollectionLikeType collectionLikeType0 = collectionType0.withContentTypeHandler(typeBindings0);
    assertTrue(collectionLikeType0.hasHandlers());
}",1,
project,0,test1620,"public void test1620() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    Class<Integer> class1 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
    Class<MapLikeType> class2 = MapLikeType.class;
    CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) referenceType0);
    CollectionLikeType collectionLikeType0 = collectionType0.withContentTypeHandler(typeBindings0);
    assertTrue(collectionLikeType0.equals((Object) collectionType0));
}",0,
project,0,test1721,"public void test1721() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ReferenceType referenceType1 = referenceType0.withTypeHandler((Object) null);
    assertTrue(referenceType1.isAnchorType());
}",0,
project,0,test1822,"public void test1822() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ReferenceType referenceType1 = referenceType0.withContentTypeHandler((Object) null);
    assertTrue(referenceType1.isAnchorType());
}",0,assertFalse(referenceType1.isAnchorType())
project,0,test1923,"public void test1923() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    Class<Integer> class1 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
    Class<MapLikeType> class2 = MapLikeType.class;
    CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) referenceType0);
    ReferenceType referenceType1 = referenceType0.withValueHandler(collectionType0);
    assertFalse(referenceType1.isAnchorType());
}",0,assertFalse(referenceType1.isAnchorType())
project,0,test1924,"public void test1924() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    Class<Integer> class1 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
    Class<MapLikeType> class2 = MapLikeType.class;
    CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType0, (JavaType[]) null, (JavaType) referenceType0);
    ReferenceType referenceType1 = referenceType0.withValueHandler(collectionType0);
    assertTrue(referenceType1.equals((Object) referenceType0));
}",0,
project,0,test2025,"public void test2025() throws Throwable {
    PlaceholderForType placeholderForType0 = new PlaceholderForType(0);
    ReferenceType referenceType0 = new ReferenceType(placeholderForType0, placeholderForType0);
    ReferenceType referenceType1 = referenceType0.withValueHandler((Object) null);
    assertTrue(referenceType1.isAnchorType());
}",0,
project,0,test2126,"public void test2126() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ReferenceType referenceType1 = (ReferenceType) referenceType0.withContentValueHandler(class0);
    assertTrue(referenceType1.equals((Object) referenceType0));
}",0,
project,0,test2127,"public void test2127() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ReferenceType referenceType1 = (ReferenceType) referenceType0.withContentValueHandler(class0);
    assertFalse(referenceType1.isAnchorType());
}",0,assertFalse(referenceType1.isAnchorType())
project,0,test2228,"public void test2228() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
    ReferenceType referenceType1 = referenceType0.withContentValueHandler((Object) null);
    assertTrue(referenceType1.isAnchorType());
}",0,assertTrue(referenceType1.isAnchorType())
project,0,test2329,"public void test2329() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    Class<Integer> class1 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
    ReferenceType referenceType1 = referenceType0.withStaticTyping();
    Class<MapLikeType> class2 = MapLikeType.class;
    CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType1, (JavaType[]) null, (JavaType) referenceType1);
    collectionType0.withStaticTyping();
    assertFalse(referenceType1.isAnchorType());
}",0,
project,0,test2330,"public void test2330() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    Class<Integer> class1 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
    ReferenceType referenceType1 = referenceType0.withStaticTyping();
    Class<MapLikeType> class2 = MapLikeType.class;
    CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType1, (JavaType[]) null, (JavaType) referenceType1);
    collectionType0.withStaticTyping();
    assertTrue(referenceType1.useStaticType());
}",0,assertFalse(referenceType1.useStaticType())
project,0,test2331,"public void test2331() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    Class<Integer> class1 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) referenceType0);
    ReferenceType referenceType1 = referenceType0.withStaticTyping();
    Class<MapLikeType> class2 = MapLikeType.class;
    CollectionType collectionType0 = CollectionType.construct((Class<?>) class2, typeBindings0, (JavaType) referenceType1, (JavaType[]) null, (JavaType) referenceType1);
    collectionType0.withStaticTyping();
    assertTrue(referenceType0.equals((Object) referenceType1));
}",0,
project,0,test2432,"public void test2432() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    JavaType[] javaTypeArray0 = new JavaType[7];
    javaTypeArray0[1] = (JavaType) simpleType0;
    javaTypeArray0[5] = (JavaType) simpleType0;
    javaTypeArray0[6] = (JavaType) simpleType0;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
    MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaTypeArray0[6], simpleType0, javaTypeArray0[2]);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[1], collectionLikeType0);
    ReferenceType referenceType1 = referenceType0.withContentTypeHandler(mapLikeType0);
    boolean boolean0 = referenceType1.isAnchorType();
    assertTrue(referenceType0.isAnchorType());
}",0,assertTrue(referenceType0.isAnchorType())
project,0,test2433,"public void test2433() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    JavaType[] javaTypeArray0 = new JavaType[7];
    javaTypeArray0[1] = (JavaType) simpleType0;
    javaTypeArray0[5] = (JavaType) simpleType0;
    javaTypeArray0[6] = (JavaType) simpleType0;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
    MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaTypeArray0[6], simpleType0, javaTypeArray0[2]);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[1], collectionLikeType0);
    ReferenceType referenceType1 = referenceType0.withContentTypeHandler(mapLikeType0);
    boolean boolean0 = referenceType1.isAnchorType();
    assertTrue(referenceType0.equals((Object) referenceType1));
}",0,
project,0,test2434,"public void test2434() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    JavaType[] javaTypeArray0 = new JavaType[7];
    javaTypeArray0[1] = (JavaType) simpleType0;
    javaTypeArray0[5] = (JavaType) simpleType0;
    javaTypeArray0[6] = (JavaType) simpleType0;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
    MapLikeType mapLikeType0 = MapLikeType.upgradeFrom(javaTypeArray0[6], simpleType0, javaTypeArray0[2]);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[1], collectionLikeType0);
    ReferenceType referenceType1 = referenceType0.withContentTypeHandler(mapLikeType0);
    boolean boolean0 = referenceType1.isAnchorType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2535,"public void test2535() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<MapType> class0 = MapType.class;
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    ReferenceType referenceType0 = new ReferenceType(arrayType0, arrayType0);
    boolean boolean0 = referenceType0.isAnchorType();
    assertTrue(boolean0);
}",0,
project,0,test2636,"public void test2636() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    JavaType[] javaTypeArray0 = new JavaType[7];
    javaTypeArray0[1] = (JavaType) simpleType0;
    javaTypeArray0[5] = (JavaType) simpleType0;
    CollectionLikeType collectionLikeType0 = CollectionLikeType.construct((Class<?>) class0, (TypeBindings) null, (JavaType) simpleType0, javaTypeArray0, javaTypeArray0[5]);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(javaTypeArray0[1], collectionLikeType0);
    boolean boolean0 = referenceType0.equals(javaTypeArray0[3]);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2737,"public void test2737() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<SimpleType> class0 = SimpleType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    Class<EnumSet> class1 = EnumSet.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) referenceType0);
    assertFalse(collectionType0.isArrayType());
}",0,
project,0,test2838,"public void test2838() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ReferenceType referenceType1 = new ReferenceType(simpleType0, referenceType0);
    boolean boolean0 = referenceType1.equals(referenceType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test2839,"public void test2839() throws Throwable {
    Class<MapType> class0 = MapType.class;
    SimpleType simpleType0 = new SimpleType(class0);
    ReferenceType referenceType0 = ReferenceType.upgradeFrom(simpleType0, simpleType0);
    ReferenceType referenceType1 = new ReferenceType(simpleType0, referenceType0);
    boolean boolean0 = referenceType1.equals(referenceType0);
    assertFalse(referenceType0.equals((Object) referenceType1));
}",0,
