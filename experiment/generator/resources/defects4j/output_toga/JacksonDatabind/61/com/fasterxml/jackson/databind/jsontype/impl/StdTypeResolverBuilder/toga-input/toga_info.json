{
  "test2323" : {
    "methodSignature" : "public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeSerializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<BasicBeanDescription> class0 = BasicBeanDescription.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);\n    stdTypeResolverBuilder1.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, linkedHashSet0);\n}",
    "testName" : "test2323"
  },
  "test3434" : {
    "methodSignature" : "public StdTypeResolverBuilder inclusion(JsonTypeInfo.As includeAs)",
    "methodName" : "inclusion",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    stdTypeResolverBuilder0.inclusion((JsonTypeInfo.As) null);\n}",
    "testName" : "test3434"
  },
  "test1313" : {
    "methodSignature" : "public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeSerializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    JavaType javaType0 = TypeFactory.unknownType();\n    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();\n    stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, linkedHashSet0);\n}",
    "testName" : "test1313"
  },
  "test2424" : {
    "methodSignature" : "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Module> class0 = Module.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;\n    stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    Vector<NamedType> vector0 = new Vector<NamedType>();\n    stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, vector0);\n}",
    "testName" : "test2424"
  },
  "test1010" : {
    "methodSignature" : "public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeSerializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;\n    stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;\n    JavaType javaType0 = TypeFactory.unknownType();\n    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();\n    stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, linkedHashSet0);\n}",
    "testName" : "test1010"
  },
  "test2121" : {
    "methodSignature" : "public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeSerializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<JavaType> class0 = JavaType.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    HashSet<NamedType> hashSet0 = new HashSet<NamedType>();\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;\n    StdTypeResolverBuilder stdTypeResolverBuilder2 = stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);\n    stdTypeResolverBuilder2.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);\n}",
    "testName" : "test2121"
  },
  "test3232" : {
    "methodSignature" : "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3232() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<JavaType> class0 = JavaType.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;\n    stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);\n    TreeSet<NamedType> treeSet0 = new TreeSet<NamedType>();\n    stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, treeSet0);\n}",
    "testName" : "test3232"
  },
  "test1111" : {
    "methodSignature" : "public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeSerializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;\n    stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;\n    SerializationConfig serializationConfig0 = null;\n    JavaType javaType0 = TypeFactory.unknownType();\n    HashSet<NamedType> hashSet0 = new HashSet<NamedType>();\n    stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, hashSet0);\n}",
    "testName" : "test1111"
  },
  "test2222" : {
    "methodSignature" : "public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeSerializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<TextNode> class0 = TextNode.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    HashSet<NamedType> hashSet0 = new HashSet<NamedType>();\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;\n    stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);\n    stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);\n}",
    "testName" : "test2222"
  },
  "test3333" : {
    "methodSignature" : "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3333() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Void> class0 = Void.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;\n    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, classNameIdResolver0);\n    StdTypeResolverBuilder stdTypeResolverBuilder2 = stdTypeResolverBuilder1.defaultImpl(class0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    stdTypeResolverBuilder2.inclusion(jsonTypeInfo_As0);\n    stdTypeResolverBuilder2.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);\n}",
    "testName" : "test3333"
  },
  "test011" : {
    "methodSignature" : "public String getTypeProperty()",
    "methodName" : "getTypeProperty",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;\n    ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);\n    objectMapper_DefaultTypeResolverBuilder0.getTypeProperty();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public StdTypeResolverBuilder defaultImpl(Class<?> defaultImpl)",
    "methodName" : "defaultImpl",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;\n    stdTypeResolverBuilder0.defaultImpl(class0);\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public StdTypeResolverBuilder typeProperty(String typeIdPropName)",
    "methodName" : "typeProperty",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    stdTypeResolverBuilder0.typeProperty(\"\");\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public StdTypeResolverBuilder typeProperty(String typeIdPropName)",
    "methodName" : "typeProperty",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    stdTypeResolverBuilder0.typeProperty(\"!UML*bCDuMG6yTH&a#\");\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "protected TypeIdResolver idResolver(MapperConfig<?> config, JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser)",
    "methodName" : "idResolver",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    JavaType javaType0 = TypeFactory.unknownType();\n    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();\n    stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, true, true);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "protected TypeIdResolver idResolver(MapperConfig<?> config, JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser)",
    "methodName" : "idResolver",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NAME;\n    stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;\n    JavaType javaType0 = TypeFactory.unknownType();\n    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();\n    stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, false, false);\n}",
    "testName" : "test1616"
  },
  "test2727" : {
    "methodSignature" : "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Module> class0 = Module.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;\n    stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);\n    stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);\n}",
    "testName" : "test2727"
  },
  "test1717" : {
    "methodSignature" : "protected TypeIdResolver idResolver(MapperConfig<?> config, JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser)",
    "methodName" : "idResolver",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    JavaType javaType0 = TypeFactory.unknownType();\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, (TypeFactory) null);\n    stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) minimalClassNameIdResolver0;\n    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();\n    stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, true, true);\n}",
    "testName" : "test1717"
  },
  "test2828" : {
    "methodSignature" : "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2828() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Module> class0 = Module.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);\n    stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);\n}",
    "testName" : "test2828"
  },
  "test1414" : {
    "methodSignature" : "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    TreeSet<NamedType> treeSet0 = new TreeSet<NamedType>();\n    stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, treeSet0);\n}",
    "testName" : "test1414"
  },
  "test2525" : {
    "methodSignature" : "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<TextNode> class0 = TextNode.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    stdTypeResolverBuilder1.defaultImpl(class0);\n    stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);\n}",
    "testName" : "test2525"
  },
  "test1515" : {
    "methodSignature" : "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    JavaType javaType0 = TypeFactory.unknownType();\n    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();\n    stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, javaType0, linkedHashSet0);\n}",
    "testName" : "test1515"
  },
  "test2626" : {
    "methodSignature" : "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Module> class0 = Module.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;\n    stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);\n    stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);\n}",
    "testName" : "test2626"
  },
  "test3030" : {
    "methodSignature" : "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3030() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<TypeIdResolver> class0 = TypeIdResolver.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();\n    Class<NoClass> class1 = NoClass.class;\n    stdTypeResolverBuilder0.defaultImpl(class1);\n    TreeSet<NamedType> treeSet0 = new TreeSet<NamedType>();\n    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    defaultDeserializationContext_Impl0.leaseObjectBuffer();\n    defaultDeserializationContext_Impl0.getConfig();\n    stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, treeSet0);\n}",
    "testName" : "test3030"
  },
  "test2020" : {
    "methodSignature" : "protected TypeIdResolver idResolver(MapperConfig<?> config, JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser)",
    "methodName" : "idResolver",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;\n    stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;\n    JavaType javaType0 = TypeFactory.unknownType();\n    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();\n    stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, true, true);\n}",
    "testName" : "test2020"
  },
  "test3131" : {
    "methodSignature" : "public StdTypeResolverBuilder inclusion(JsonTypeInfo.As includeAs)",
    "methodName" : "inclusion",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3131() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Integer> class0 = Integer.TYPE;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init((JsonTypeInfo.Id) null, minimalClassNameIdResolver0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;\n    stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);\n}",
    "testName" : "test3131"
  },
  "test000" : {
    "methodSignature" : "public StdTypeResolverBuilder typeIdVisibility(boolean isVisible)",
    "methodName" : "typeIdVisibility",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    stdTypeResolverBuilder0.typeIdVisibility(false);\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public boolean isTypeIdVisible()",
    "methodName" : "isTypeIdVisible",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    StdTypeResolverBuilder.noTypeInfoBuilder();\n    stdTypeResolverBuilder0.isTypeIdVisible();\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public Class<?> getDefaultImpl()",
    "methodName" : "getDefaultImpl",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    stdTypeResolverBuilder0.getDefaultImpl();\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public StdTypeResolverBuilder inclusion(JsonTypeInfo.As includeAs)",
    "methodName" : "inclusion",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;\n    stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeSerializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();\n    JavaType javaType0 = TypeFactory.unknownType();\n    ArrayDeque<NamedType> arrayDeque0 = new ArrayDeque<NamedType>();\n    stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, arrayDeque0);\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeSerializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<TextNode> class0 = TextNode.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;\n    HashSet<NamedType> hashSet0 = new HashSet<NamedType>();\n    StdTypeResolverBuilder stdTypeResolverBuilder2 = stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);\n    stdTypeResolverBuilder2.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);\n}",
    "testName" : "test1818"
  },
  "test2929" : {
    "methodSignature" : "public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeDeserializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2929() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<TextNode> class0 = TextNode.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;\n    stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;\n    stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);\n    stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);\n}",
    "testName" : "test2929"
  },
  "test1919" : {
    "methodSignature" : "public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes)",
    "methodName" : "buildTypeSerializer",
    "className" : "com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1919() throws Throwable {\n    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<TextNode> class0 = TextNode.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);\n    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);\n    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;\n    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);\n    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;\n    HashSet<NamedType> hashSet0 = new HashSet<NamedType>();\n    stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);\n    stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);\n}",
    "testName" : "test1919"
  }
}