project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    stdTypeResolverBuilder0.typeIdVisibility(false);
}",0,
project,0,test011,"public void test011() throws Throwable {
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE;
    ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
    objectMapper_DefaultTypeResolverBuilder0.getTypeProperty();
}",0,
project,0,test022,"public void test022() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    StdTypeResolverBuilder.noTypeInfoBuilder();
    stdTypeResolverBuilder0.isTypeIdVisible();
}",0,
project,0,test033,"public void test033() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
    stdTypeResolverBuilder0.defaultImpl(class0);
}",0,
project,0,test044,"public void test044() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    stdTypeResolverBuilder0.getDefaultImpl();
}",0,
project,0,test055,"public void test055() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    stdTypeResolverBuilder0.typeProperty("""");
}",0,
project,0,test066,"public void test066() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
    stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
}",1,
project,0,test077,"public void test077() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    stdTypeResolverBuilder0.typeProperty(""!UML*bCDuMG6yTH&a#"");
}",0,
project,0,test088,"public void test088() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    JavaType javaType0 = TypeFactory.unknownType();
    ArrayDeque<NamedType> arrayDeque0 = new ArrayDeque<NamedType>();
    stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, arrayDeque0);
}",0,
project,0,test099,"public void test099() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    JavaType javaType0 = TypeFactory.unknownType();
    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
    stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, true, true);
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;
    stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
    JavaType javaType0 = TypeFactory.unknownType();
    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
    stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, linkedHashSet0);
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
    stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
    SerializationConfig serializationConfig0 = null;
    JavaType javaType0 = TypeFactory.unknownType();
    HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
    // Undeclared exception!
    try {
        stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, hashSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    JavaType javaType0 = TypeFactory.unknownType();
    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
    stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, javaType0, linkedHashSet0);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    TreeSet<NamedType> treeSet0 = new TreeSet<NamedType>();
    stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, (JavaType) null, treeSet0);
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    JavaType javaType0 = TypeFactory.unknownType();
    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
    stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, javaType0, linkedHashSet0);
}",1,
project,0,test1616,"public void test1616() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.NAME;
    stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
    JavaType javaType0 = TypeFactory.unknownType();
    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
    stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, false, false);
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    JavaType javaType0 = TypeFactory.unknownType();
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(javaType0, (TypeFactory) null);
    stdTypeResolverBuilder0._customIdResolver = (TypeIdResolver) minimalClassNameIdResolver0;
    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
    stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, true, true);
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<TextNode> class0 = TextNode.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
    HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
    StdTypeResolverBuilder stdTypeResolverBuilder2 = stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
    stdTypeResolverBuilder2.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<TextNode> class0 = TextNode.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
    stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
    stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
    stdTypeResolverBuilder0._idType = jsonTypeInfo_Id0;
    JavaType javaType0 = TypeFactory.unknownType();
    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
    stdTypeResolverBuilder0.idResolver((MapperConfig<?>) null, javaType0, linkedHashSet0, true, true);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<JavaType> class0 = JavaType.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CUSTOM;
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
    StdTypeResolverBuilder stdTypeResolverBuilder2 = stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
    stdTypeResolverBuilder2.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<TextNode> class0 = TextNode.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    HashSet<NamedType> hashSet0 = new HashSet<NamedType>();
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
    stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
    stdTypeResolverBuilder0.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, hashSet0);
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<BasicBeanDescription> class0 = BasicBeanDescription.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    LinkedHashSet<NamedType> linkedHashSet0 = new LinkedHashSet<NamedType>();
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
    stdTypeResolverBuilder1.buildTypeSerializer((SerializationConfig) null, collectionLikeType0, linkedHashSet0);
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Module> class0 = Module.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
    stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    Vector<NamedType> vector0 = new Vector<NamedType>();
    stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, vector0);
}",1,
project,0,test2525,"public void test2525() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<TextNode> class0 = TextNode.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    stdTypeResolverBuilder1.defaultImpl(class0);
    stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
}",1,
project,0,test2626,"public void test2626() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Module> class0 = Module.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
    stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
    stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
}",1,
project,0,test2727,"public void test2727() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Module> class0 = Module.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
    stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
    stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
}",1,
project,0,test2828,"public void test2828() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Module> class0 = Module.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
    stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
}",1,
project,0,test2929,"public void test2929() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<TextNode> class0 = TextNode.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
    stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXISTING_PROPERTY;
    stdTypeResolverBuilder0.inclusion(jsonTypeInfo_As0);
    stdTypeResolverBuilder0.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
}",1,
project,0,test3030,"public void test3030() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<TypeIdResolver> class0 = TypeIdResolver.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    ValueInstantiators.Base valueInstantiators_Base0 = new ValueInstantiators.Base();
    Class<NoClass> class1 = NoClass.class;
    stdTypeResolverBuilder0.defaultImpl(class1);
    TreeSet<NamedType> treeSet0 = new TreeSet<NamedType>();
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    defaultDeserializationContext_Impl0.leaseObjectBuffer();
    defaultDeserializationContext_Impl0.getConfig();
    // Undeclared exception!
    try {
        stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, treeSet0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder"", e);
    }
}",1,
project,0,test3131,"public void test3131() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Integer> class0 = Integer.TYPE;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init((JsonTypeInfo.Id) null, minimalClassNameIdResolver0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
    // Undeclared exception!
    try {
        stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // idType can not be null
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder"", e);
    }
}",1,
project,0,test3232,"public void test3232() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<JavaType> class0 = JavaType.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.CLASS;
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, minimalClassNameIdResolver0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    stdTypeResolverBuilder1.inclusion(jsonTypeInfo_As0);
    TreeSet<NamedType> treeSet0 = new TreeSet<NamedType>();
    stdTypeResolverBuilder1.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, treeSet0);
}",1,
project,0,test3333,"public void test3333() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = StdTypeResolverBuilder.noTypeInfoBuilder();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Void> class0 = Void.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(collectionLikeType0, typeFactory0);
    JsonTypeInfo.Id jsonTypeInfo_Id0 = JsonTypeInfo.Id.MINIMAL_CLASS;
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(collectionLikeType0, typeFactory0);
    StdTypeResolverBuilder stdTypeResolverBuilder1 = stdTypeResolverBuilder0.init(jsonTypeInfo_Id0, classNameIdResolver0);
    StdTypeResolverBuilder stdTypeResolverBuilder2 = stdTypeResolverBuilder1.defaultImpl(class0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_ARRAY;
    stdTypeResolverBuilder2.inclusion(jsonTypeInfo_As0);
    stdTypeResolverBuilder2.buildTypeDeserializer((DeserializationConfig) null, collectionLikeType0, (Collection<NamedType>) null);
}",1,
project,0,test3434,"public void test3434() throws Throwable {
    StdTypeResolverBuilder stdTypeResolverBuilder0 = new StdTypeResolverBuilder();
    stdTypeResolverBuilder0.inclusion((JsonTypeInfo.As) null);
}",1,
