/*
 * This file was automatically generated by EvoSuite
 * Thu Mar 28 05:13:05 GMT 2024
 */
package com.fasterxml.jackson.databind;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonpCharacterEscapes;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.PrettyPrinter;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.Version;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.io.CharacterEscapes;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.ResolvedType;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.core.util.MinimalPrettyPrinter;
import com.fasterxml.jackson.databind.AnnotationIntrospector;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.InjectableValues;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.Module;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.cfg.BaseSettings;
import com.fasterxml.jackson.databind.cfg.ConfigOverrides;
import com.fasterxml.jackson.databind.cfg.ContextAttributes;
import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;
import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;
import com.fasterxml.jackson.databind.cfg.MutableConfigOverride;
import com.fasterxml.jackson.databind.deser.AbstractDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.deser.ValueInstantiator;
import com.fasterxml.jackson.databind.ext.CoreXMLDeserializers;
import com.fasterxml.jackson.databind.ext.NioPathDeserializer;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.introspect.SimpleMixInResolver;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.BigIntegerNode;
import com.fasterxml.jackson.databind.node.BinaryNode;
import com.fasterxml.jackson.databind.node.BooleanNode;
import com.fasterxml.jackson.databind.node.DecimalNode;
import com.fasterxml.jackson.databind.node.FloatNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NullNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.node.ShortNode;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.ValueNode;
import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;
import com.fasterxml.jackson.databind.ser.FilterProvider;
import com.fasterxml.jackson.databind.ser.SerializerFactory;
import com.fasterxml.jackson.databind.ser.impl.SimpleFilterProvider;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.ResolvedRecursiveType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.util.RootNameLookup;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.Writer;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.text.DateFormat;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.atomic.AtomicReference;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class ObjectMapper_ESTest extends ObjectMapper_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0000() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
        ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
    }

    @Test(timeout = 4000)
    public void test0011() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayNode> class0 = ArrayNode.class;
        Class<Integer> class1 = Integer.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
        ObjectReader objectReader0 = objectMapper0.reader((JavaType) mapLikeType0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test0022() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BigIntegerNode> class0 = BigIntegerNode.class;
        MutableConfigOverride mutableConfigOverride0 = objectMapper0.configOverride(class0);
        mutableConfigOverride0.getIsIgnoredType();
        assertNotNull(mutableConfigOverride0.getIsIgnoredType());
    }

    @Test(timeout = 4000)
    public void test0033() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapLikeType> class0 = MapLikeType.class;
        JavaType javaType0 = TypeFactory.unknownType();
        JavaType[] javaTypeArray0 = new JavaType[3];
        ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
        SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("ZW}K{l(V");
        AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLInvalidAuthorizationSpecException0);
        boolean boolean0 = objectMapper0.canDeserialize((JavaType) referenceType0, atomicReference0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test0044() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
        objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test0055() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.canDeserialize((JavaType) null);
    }

    @Test(timeout = 4000)
    public void test0066() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
        ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test0077() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test0088() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[5];
        objectMapper0.readValue(byteArray0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test0099() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test01010() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
        ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
    }

    @Test(timeout = 4000)
    public void test01111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Locale locale0 = Locale.ENGLISH;
        ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
    }

    @Test(timeout = 4000)
    public void test01212() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapType> class0 = MapType.class;
        objectMapper0.readValue("", class0);
    }

    @Test(timeout = 4000)
    public void test01313() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<TextNode>[] classArray0 = (Class<TextNode>[]) Array.newInstance(Class.class, 5);
        objectMapper0.registerSubtypes(classArray0);
    }

    @Test(timeout = 4000)
    public void test01414() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[0];
        Class<LongNode> class0 = LongNode.class;
        objectMapper0.readValue(byteArray0, (-2002), 7, class0);
    }

    @Test(timeout = 4000)
    public void test01515() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Long> class0 = Long.TYPE;
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        JavaType javaType0 = typeFactory0.constructType((Type) class0, typeBindings0);
        ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectReader0._context;
        JsonDeserializer<Object> jsonDeserializer0 = objectMapper0._findRootDeserializer(defaultDeserializationContext_Impl0, javaType0);
        jsonDeserializer0.isCachable();
        assertFalse(jsonDeserializer0.isCachable());
    }

    @Test(timeout = 4000)
    public void test01616() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.copy();
    }

    @Test(timeout = 4000)
    public void test01717() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StringReader stringReader0 = new StringReader("MG");
        Class<POJONode> class0 = POJONode.class;
        objectMapper0.readValue((Reader) stringReader0, class0);
    }

    @Test(timeout = 4000)
    public void test01818() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0, serializationFeatureArray0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test01919() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
    }

    @Test(timeout = 4000)
    public void test02020() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readValue((byte[]) null, (TypeReference) null);
    }

    @Test(timeout = 4000)
    public void test02121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("E4dkN<%V?c");
        Class<FilterInputStream> class0 = FilterInputStream.class;
        objectMapper0.readValue((File) mockFile0, class0);
    }

    @Test(timeout = 4000)
    public void test02222() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TimeZone timeZone0 = TimeZone.getTimeZone("JSON");
        ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
    }

    @Test(timeout = 4000)
    public void test02323() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
        boolean boolean0 = objectMapper0.isEnabled(jsonGenerator_Feature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test02424() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
        Class<MapLikeType> class0 = MapLikeType.class;
        objectMapper0.readValue((DataInput) dataInputStream0, class0);
    }

    @Test(timeout = 4000)
    public void test02525() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readerFor((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test02626() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
    }

    @Test(timeout = 4000)
    public void test02727() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<CollectionType> class0 = CollectionType.class;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        objectMapper0.readValue((DataInput) null, (JavaType) arrayType0);
    }

    @Test(timeout = 4000)
    public void test02828() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test02929() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test03030() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DateFormat dateFormat0 = MockDateFormat.getDateInstance();
        ObjectWriter objectWriter0 = objectMapper0.writer(dateFormat0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test03131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<SimpleModule> class0 = SimpleModule.class;
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
        objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test03232() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        RootNameLookup rootNameLookup0 = new RootNameLookup();
        ConfigOverrides configOverrides0 = new ConfigOverrides();
        DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
        ObjectMapper objectMapper1 = objectMapper0.setConfig(deserializationConfig0);
    }

    @Test(timeout = 4000)
    public void test03333() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((FilterProvider) null);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test03434() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readValue("E+<\u0001eT\u0005+@H!", (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test03535() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        objectMapper0.setFilters(simpleFilterProvider0);
        simpleFilterProvider0.willFailOnUnknownId();
        assertTrue(simpleFilterProvider0.willFailOnUnknownId());
    }

    @Test(timeout = 4000)
    public void test03636() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
        ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test03737() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MockFile mockFile0 = new MockFile("", "");
        PipedReader pipedReader0 = new PipedReader(7);
        objectMapper0.writeValue((File) mockFile0, (Object) pipedReader0);
    }

    @Test(timeout = 4000)
    public void test03838() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithType((JavaType) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test03939() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<InputStreamReader> class0 = InputStreamReader.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test04040() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.enableDefaultTyping();
        Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test04141() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        byte[] byteArray0 = new byte[3];
        objectMapper0.readValue(byteArray0, 55296, (-1825), (TypeReference) null);
    }

    @Test(timeout = 4000)
    public void test04242() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = objectMapper0.getJsonFactory();
        jsonFactory0.canUseCharArrays();
    }

    @Test(timeout = 4000)
    public void test04343() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
        ValueNode valueNode0 = jsonNodeFactory0.numberNode((Long) null);
        Class<MapLikeType> class0 = MapLikeType.class;
        MapLikeType mapLikeType0 = objectMapper0.treeToValue((TreeNode) valueNode0, class0);
    }

    @Test(timeout = 4000)
    public void test04444() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.readValue((Reader) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test04545() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.disable((MapperFeature[]) null);
    }

    @Test(timeout = 4000)
    public void test04646() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
    }

    @Test(timeout = 4000)
    public void test04747() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.reader((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test04848() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<SimpleModule> typeReference0 = (TypeReference<SimpleModule>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue((JsonParser) null, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test04949() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
    }

    @Test(timeout = 4000)
    public void test05050() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
        ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test05151() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
        objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test05252() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<BeanDeserializer> class0 = BeanDeserializer.class;
        ObjectReader objectReader0 = objectMapper0.readerFor(class0);
    }

    @Test(timeout = 4000)
    public void test05353() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MapLikeType> class0 = MapLikeType.class;
        URI uRI0 = MockURI.aHttpURI;
        URL uRL0 = MockURI.toURL(uRI0);
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        objectMapper0.readValue(uRL0, (JavaType) resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test05454() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readValue((File) null, (JavaType) mapLikeType0);
    }

    @Test(timeout = 4000)
    public void test05555() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory((SerializerFactory) null);
    }

    @Test(timeout = 4000)
    public void test05656() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
        HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
        ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
        byte[] byteArray0 = objectMapper0.writeValueAsBytes(objectNode0);
    }

    @Test(timeout = 4000)
    public void test05757() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
        boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test05858() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
        TypeReference<BasicBeanDescription> typeReference0 = (TypeReference<BasicBeanDescription>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValues((JsonParser) jsonParserSequence0, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test05959() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
        objectMapper0._checkInvalidCopy(class0);
    }

    @Test(timeout = 4000)
    public void test06060() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyNamingStrategy propertyNamingStrategy0 = objectMapper0.getPropertyNamingStrategy();
    }

    @Test(timeout = 4000)
    public void test06161() throws Throwable {
        JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) jsonpCharacterEscapes0.ESCAPE_NONE);
    }

    @Test(timeout = 4000)
    public void test06262() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedWriter pipedWriter0 = new PipedWriter();
        MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
        StringReader stringReader0 = new StringReader("Failed copy(): ");
        objectMapper0.writeValue((Writer) mockPrintWriter0, (Object) stringReader0);
    }

    @Test(timeout = 4000)
    public void test06363() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3751);
        MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
        ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
        objectMapper0.writeValue((DataOutput) objectOutputStream0, (Object) objectOutputStream0);
    }

    @Test(timeout = 4000)
    public void test06464() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
        ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
    }

    @Test(timeout = 4000)
    public void test06565() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
    }

    @Test(timeout = 4000)
    public void test06666() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectInputStream> class0 = ObjectInputStream.class;
        Class<SimpleModule> class1 = SimpleModule.class;
        objectMapper0.addMixInAnnotations(class0, class1);
    }

    @Test(timeout = 4000)
    public void test06767() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        byte[] byteArray0 = new byte[9];
        JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 192, (int) (byte) (-1));
        objectMapper0.readValue(jsonParser0, (ResolvedType) null);
    }

    @Test(timeout = 4000)
    public void test06868() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonNodeFactory jsonNodeFactory0 = objectMapper0.getNodeFactory();
    }

    @Test(timeout = 4000)
    public void test06969() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer();
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test07070() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
        deserializationContext0.getDeserializationFeatures();
        assertEquals(0, deserializationContext0.getDeserializationFeatures());
    }

    @Test(timeout = 4000)
    public void test07171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector((AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test07272() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
        ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    }

    @Test(timeout = 4000)
    public void test07373() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
        ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
    }

    @Test(timeout = 4000)
    public void test07474() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ObjectNode> class0 = ObjectNode.class;
        MappingIterator<ObjectNode> mappingIterator0 = objectMapper0.readValues((JsonParser) null, class0);
    }

    @Test(timeout = 4000)
    public void test07575() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
    }

    @Test(timeout = 4000)
    public void test07676() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
    }

    @Test(timeout = 4000)
    public void test07777() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy) PropertyNamingStrategy.UPPER_CAMEL_CASE;
        ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_UpperCamelCaseStrategy0);
    }

    @Test(timeout = 4000)
    public void test07878() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DataInputStream> class0 = DataInputStream.class;
        ObjectReader objectReader0 = objectMapper0.reader(class0);
    }

    @Test(timeout = 4000)
    public void test07979() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());
        Object object0 = objectMapper0.setHandlerInstantiator(handlerInstantiator0);
    }

    @Test(timeout = 4000)
    public void test08080() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
        boolean boolean0 = objectMapper0.canSerialize(class0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test08181() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, "{\"o}LO!?v^V");
    }

    @Test(timeout = 4000)
    public void test08282() throws Throwable {
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArrayBuilder0.NO_BYTES);
        Class<Object> class0 = Object.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.readValue((InputStream) byteArrayInputStream0, class0);
    }

    @Test(timeout = 4000)
    public void test08383() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
        ObjectWriter objectWriter0 = objectMapper0.writer((CharacterEscapes) jsonpCharacterEscapes0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test08484() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectReader objectReader0 = objectMapper0.reader();
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test08585() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DateFormat dateFormat0 = objectMapper0.getDateFormat();
        dateFormat0.isLenient();
    }

    @Test(timeout = 4000)
    public void test08686() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CharArrayReader> class0 = CharArrayReader.class;
        Class<BufferedReader> class1 = BufferedReader.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
        objectMapper0.readValue((JsonParser) null, (JavaType) collectionLikeType0);
    }

    @Test(timeout = 4000)
    public void test08787() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
        FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
        objectMapper0.readValues((JsonParser) filteringParserDelegate0, (ResolvedType) null);
    }

    @Test(timeout = 4000)
    public void test08888() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
        DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
        objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test08989() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
        ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
    }

    @Test(timeout = 4000)
    public void test09090() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
        boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
    }

    @Test(timeout = 4000)
    public void test09191() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        int int0 = objectMapper0.mixInCount();
        assertEquals(0, int0);
    }

    @Test(timeout = 4000)
    public void test09292() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.writeValueAsString(jsonFactory0);
    }

    @Test(timeout = 4000)
    public void test09393() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
        ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0);
        objectWriter0.hasPrefetchedSerializer();
        assertTrue(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test09494() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test09595() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectNode objectNode0 = objectMapper0.createObjectNode();
        objectNode0.isDouble();
        assertFalse(objectNode0.isDouble());
    }

    @Test(timeout = 4000)
    public void test09696() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<MockFileReader> class0 = MockFileReader.class;
        boolean boolean0 = objectMapper0.canSerialize(class0, (AtomicReference<Throwable>) null);
    }

    @Test(timeout = 4000)
    public void test09797() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
        boolean boolean0 = objectMapper0.isEnabled(serializationFeature0);
        assertTrue(boolean0);
    }

    @Test(timeout = 4000)
    public void test09898() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializerFactory serializerFactory0 = objectMapper0.getSerializerFactory();
        assertNotNull(serializerFactory0);
    }

    @Test(timeout = 4000)
    public void test09999() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
    }

    @Test(timeout = 4000)
    public void test100100() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.readValue((URL) null, (TypeReference) null);
    }

    @Test(timeout = 4000)
    public void test101101() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
    }

    @Test(timeout = 4000)
    public void test102102() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test103103() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        byte[] byteArray0 = new byte[5];
        objectMapper0.readValue(byteArray0, (int) (-128), (-1702), (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test104104() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
        ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
    }

    @Test(timeout = 4000)
    public void test105105() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
        SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test106106() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        InjectableValues injectableValues0 = objectMapper0.getInjectableValues();
    }

    @Test(timeout = 4000)
    public void test107107() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
        objectMapper0.disable(deserializationFeature0, (DeserializationFeature[]) null);
    }

    @Test(timeout = 4000)
    public void test108108() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        URL uRL0 = MockURL.getFileExample();
        Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
        objectMapper0.readValue(uRL0, class0);
    }

    @Test(timeout = 4000)
    public void test109109() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Proxy.Type> class0 = Proxy.Type.class;
        objectMapper0.readValue((byte[]) null, class0);
    }

    @Test(timeout = 4000)
    public void test110110() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<DecimalNode> class0 = DecimalNode.class;
        Class<?> class1 = objectMapper0.findMixInClassFor(class0);
    }

    @Test(timeout = 4000)
    public void test111111() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature[] mapperFeatureArray0 = new MapperFeature[3];
        objectMapper0.enable(mapperFeatureArray0);
    }

    @Test(timeout = 4000)
    public void test112112() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setConfig((SerializationConfig) null);
    }

    @Test(timeout = 4000)
    public void test113113() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ArrayNode arrayNode0 = objectMapper0.createArrayNode();
        arrayNode0.isBigDecimal();
        assertFalse(arrayNode0.isBigDecimal());
    }

    @Test(timeout = 4000)
    public void test114114() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        NamedType[] namedTypeArray0 = new NamedType[4];
        SimpleModule simpleModule1 = simpleModule0.registerSubtypes(namedTypeArray0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    }

    @Test(timeout = 4000)
    public void test115115() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        MockFile mockFile0 = new MockFile("m{KhV`7jha@5\"b");
        objectMapper0.readValue((File) mockFile0, (TypeReference) null);
    }

    @Test(timeout = 4000)
    public void test116116() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.constructType((Type) null);
    }

    @Test(timeout = 4000)
    public void test117117() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
        ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
    }

    @Test(timeout = 4000)
    public void test118118() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writer((Base64Variant) null);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test119119() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PipedReader pipedReader0 = new PipedReader();
        PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
        TypeReference<BooleanNode> typeReference0 = (TypeReference<BooleanNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue((Reader) pushbackReader0, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test120120() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
        ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
    }

    @Test(timeout = 4000)
    public void test121121() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Class<Object> class0 = Object.class;
        CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-163));
        TypeReference<String> typeReference0 = (TypeReference<String>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.convertValue((Object) coreXMLDeserializers_Std0, (TypeReference<?>) typeReference0);
    }

    @Test(timeout = 4000)
    public void test122122() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
        ObjectWriter objectWriter0 = objectMapper0.writer(contextAttributes0);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test123123() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
    }

    @Test(timeout = 4000)
    public void test124124() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
        doReturn(false).when(enumeration0).hasMoreElements();
        SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
        TypeReference<ArrayType> typeReference0 = (TypeReference<ArrayType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue((InputStream) sequenceInputStream0, (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test125125() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        TypeFactory typeFactory0 = objectMapper0.getTypeFactory();
        assertNotNull(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test126126() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
        ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
    }

    @Test(timeout = 4000)
    public void test127127() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) null);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test128128() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
    }

    @Test(timeout = 4000)
    public void test129129() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
    }

    @Test(timeout = 4000)
    public void test130130() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TextNode textNode0 = objectMapper0.valueToTree((Object) " for format ");
        textNode0.isLong();
        assertTrue(textNode0.isLong());
    }

    @Test(timeout = 4000)
    public void test131131() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        PipedInputStream pipedInputStream0 = new PipedInputStream(375);
        BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 268);
        objectMapper0.readValue((InputStream) bufferedInputStream0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test132132() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
    }

    @Test(timeout = 4000)
    public void test133133() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<FilterOutputStream> typeReference0 = (TypeReference<FilterOutputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.readValue("", (TypeReference) typeReference0);
    }

    @Test(timeout = 4000)
    public void test134134() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
        serializerProvider0.canOverrideAccessModifiers();
    }

    @Test(timeout = 4000)
    public void test135135() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
    }

    @Test(timeout = 4000)
    public void test136136() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
    }

    @Test(timeout = 4000)
    public void test137137() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory();
        Version version0 = jsonFactory0.version();
        SimpleModule simpleModule0 = new SimpleModule(version0);
        Class<MapLikeType> class0 = MapLikeType.class;
        JsonSerializer<MapLikeType> jsonSerializer0 = (JsonSerializer<MapLikeType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.addKeySerializer((Class<? extends MapLikeType>) class0, jsonSerializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    }

    @Test(timeout = 4000)
    public void test138138() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
        simpleModule0.addKeyDeserializer(class0, (KeyDeserializer) null);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test139139() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
        JsonDeserializer<NioPathDeserializer> jsonDeserializer0 = (JsonDeserializer<NioPathDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
        simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends NioPathDeserializer>) jsonDeserializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test140140() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<ReferenceType> class0 = ReferenceType.class;
        Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
        ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
        SimpleModule simpleModule1 = simpleModule0.addValueInstantiator(class1, valueInstantiator_Base0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    }

    @Test(timeout = 4000)
    public void test141141() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.setDeserializerModifier(beanDeserializerModifier0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    }

    @Test(timeout = 4000)
    public void test142142() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<MockFileInputStream> class0 = MockFileInputStream.class;
        JsonSerializer<MockFileInputStream> jsonSerializer0 = (JsonSerializer<MockFileInputStream>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
        SimpleModule simpleModule1 = simpleModule0.addSerializer((Class<? extends MockFileInputStream>) class0, jsonSerializer0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    }

    @Test(timeout = 4000)
    public void test143143() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SimpleModule simpleModule0 = new SimpleModule();
        Class<ReferenceType> class0 = ReferenceType.class;
        simpleModule0.setMixInAnnotation(class0, class0);
        ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    }

    @Test(timeout = 4000)
    public void test144144() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<SimpleModule> class0 = SimpleModule.class;
        SimpleModule simpleModule0 = objectMapper1.convertValue((Object) objectMapper_DefaultTyping0, class0);
    }

    @Test(timeout = 4000)
    public void test145145() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper1.convertValue((Object) objectMapper_DefaultTyping0, class0);
    }

    @Test(timeout = 4000)
    public void test146146() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<SimpleModule> class0 = SimpleModule.class;
        objectMapper0.convertValue((Object) objectMapper1, class0);
    }

    @Test(timeout = 4000)
    public void test147147() throws Throwable {
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_CONCRETE_AND_ARRAYS;
        ObjectMapper.DefaultTypeResolverBuilder objectMapper_DefaultTypeResolverBuilder0 = new ObjectMapper.DefaultTypeResolverBuilder(objectMapper_DefaultTyping0);
        Class<NullNode> class0 = NullNode.class;
        Class<PipedOutputStream> class1 = PipedOutputStream.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, (TypeBindings) null);
        ArrayType arrayType0 = ArrayType.construct((JavaType) resolvedRecursiveType0, (TypeBindings) null);
        TypeBindings typeBindings0 = arrayType0.getBindings();
        JavaType[] javaTypeArray0 = new JavaType[0];
        ReferenceType referenceType0 = ReferenceType.construct((Class<?>) class0, typeBindings0, (JavaType) arrayType0, javaTypeArray0, (JavaType) arrayType0);
        boolean boolean0 = objectMapper_DefaultTypeResolverBuilder0.useForType(referenceType0);
    }

    @Test(timeout = 4000)
    public void test148148() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<Throwable> class0 = Throwable.class;
        ObjectWriter objectWriter0 = objectMapper1.writerWithType(class0);
        objectWriter0.hasPrefetchedSerializer();
    }

    @Test(timeout = 4000)
    public void test149149() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
        Class<LongNode> class0 = LongNode.class;
        ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
        objectWriter0.hasPrefetchedSerializer();
        assertFalse(objectWriter0.hasPrefetchedSerializer());
    }

    @Test(timeout = 4000)
    public void test150150() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
        DeserializerFactoryConfig deserializerFactoryConfig0 = new DeserializerFactoryConfig();
        BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory(deserializerFactoryConfig0);
        DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
        ObjectMapper objectMapper1 = new ObjectMapper(jsonFactory0, defaultSerializerProvider_Impl0, defaultDeserializationContext_Impl0);
        objectMapper1.equals((Object) objectMapper0);
    }

    @Test(timeout = 4000)
    public void test151151() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        Module[] moduleArray0 = new Module[1];
        BufferRecycler bufferRecycler0 = new BufferRecycler();
        IOContext iOContext0 = new IOContext(bufferRecycler0, jsonFactory0, true);
        PipedWriter pipedWriter0 = new PipedWriter();
        PipedReader pipedReader0 = new PipedReader(pipedWriter0);
        CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
        ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, pipedReader0, objectMapper0, charsToNameCanonicalizer0);
        Version version0 = readerBasedJsonParser0.version();
        SimpleModule simpleModule0 = new SimpleModule("!g?QmpW{%9", version0);
        moduleArray0[0] = (Module) simpleModule0;
        ObjectMapper objectMapper1 = objectMapper0.registerModules(moduleArray0);
    }

    @Test(timeout = 4000)
    public void test152152() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        LinkedHashSet<Module> linkedHashSet0 = new LinkedHashSet<Module>();
        SimpleModule simpleModule0 = new SimpleModule(" for format ");
        linkedHashSet0.add(simpleModule0);
        ObjectMapper objectMapper1 = objectMapper0.registerModules((Iterable<Module>) linkedHashSet0);
    }

    @Test(timeout = 4000)
    public void test153153() throws Throwable {
        ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
        List<Module> list0 = ObjectMapper.findModules(classLoader0);
        list0.size();
    }

    @Test(timeout = 4000)
    public void test154154() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper objectMapper1 = objectMapper0.setMixInResolver((ClassIntrospector.MixInResolver) null);
    }

    @Test(timeout = 4000)
    public void test155155() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
        JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
    }

    @Test(timeout = 4000)
    public void test156156() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
    }

    @Test(timeout = 4000)
    public void test157157() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
        ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
    }

    @Test(timeout = 4000)
    public void test158158() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
        ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
    }

    @Test(timeout = 4000)
    public void test159159() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
        objectMapper0.configure(serializationFeature0, true);
    }

    @Test(timeout = 4000)
    public void test160160() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
        objectMapper0.configure(deserializationFeature0, false);
    }

    @Test(timeout = 4000)
    public void test161161() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
        objectMapper0.configure(deserializationFeature0, true);
    }

    @Test(timeout = 4000)
    public void test162162() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[1];
        JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.IGNORE_UNDEFINED;
        jsonParser_FeatureArray0[0] = jsonParser_Feature0;
        objectMapper0.enable(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test163163() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[0];
        objectMapper0.disable(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test164164() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonParser.Feature[] jsonParser_FeatureArray0 = new JsonParser.Feature[9];
        objectMapper0.disable(jsonParser_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test165165() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
        objectMapper0.enable(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test166166() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[2];
        JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
        jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
        jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
        objectMapper0.disable(jsonGenerator_FeatureArray0);
    }

    @Test(timeout = 4000)
    public void test167167() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
        JsonParser jsonParser0 = jsonFactory0.createParser("");
        objectMapper0.readTree(jsonParser0);
    }

    @Test(timeout = 4000)
    public void test168168() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        byte[] byteArray0 = new byte[3];
        byteArray0[0] = (byte) 49;
        byteArray0[1] = (byte) 49;
        byteArray0[2] = (byte) 49;
        objectMapper0.readTree(byteArray0);
    }

    @Test(timeout = 4000)
    public void test169169() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
        FloatNode floatNode0 = new FloatNode((-2));
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writeTree(jsonGenerator0, (TreeNode) floatNode0);
    }

    @Test(timeout = 4000)
    public void test170170() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
        JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
        FloatNode floatNode0 = new FloatNode(0);
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writeTree(jsonGenerator0, (JsonNode) floatNode0);
    }

    @Test(timeout = 4000)
    public void test171171() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        BinaryNode binaryNode0 = new BinaryNode((byte[]) null);
        Class<String> class0 = String.class;
        objectMapper0.treeToValue((TreeNode) binaryNode0, class0);
    }

    @Test(timeout = 4000)
    public void test172172() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.valueToTree((Object) null);
    }

    @Test(timeout = 4000)
    public void test173173() throws Throwable {
        Class<FilterInputStream> class0 = FilterInputStream.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writerFor(class0);
    }

    @Test(timeout = 4000)
    public void test174174() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writerFor((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test175175() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<ShortNode> typeReference0 = (TypeReference<ShortNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.writerFor(typeReference0);
    }

    @Test(timeout = 4000)
    public void test176176() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writerFor((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test177177() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter(" for format ");
        objectMapper0.writer((PrettyPrinter) defaultPrettyPrinter0);
    }

    @Test(timeout = 4000)
    public void test178178() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writer((PrettyPrinter) null);
    }

    @Test(timeout = 4000)
    public void test179179() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        objectMapper0.writerWithType((Class<?>) null);
    }

    @Test(timeout = 4000)
    public void test180180() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeReference<MapLikeType> typeReference0 = (TypeReference<MapLikeType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
        doReturn((Type) null).when(typeReference0).getType();
        objectMapper0.writerWithType(typeReference0);
    }

    @Test(timeout = 4000)
    public void test181181() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0.writerWithType((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test182182() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
        Class<CollectionType> class0 = CollectionType.class;
        objectMapper0.convertValue((Object) null, class0);
    }

    @Test(timeout = 4000)
    public void test183183() throws Throwable {
        Class<ObjectInputStream> class0 = ObjectInputStream.class;
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        objectMapper0.convertValue((Object) typeBindings0, (JavaType) resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test184184() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        TypeBindings typeBindings0 = TypeBindings.emptyBindings();
        Class<PipedInputStream> class0 = PipedInputStream.class;
        ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
        objectMapper0.convertValue((Object) null, (JavaType) resolvedRecursiveType0);
    }

    @Test(timeout = 4000)
    public void test185185() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JavaType javaType0 = TypeFactory.unknownType();
        objectMapper0._convert((Object) null, javaType0);
    }

    @Test(timeout = 4000)
    public void test186186() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
        objectMapper0.acceptJsonFormatVisitor((JavaType) null, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
    }

    @Test(timeout = 4000)
    public void test187187() throws Throwable {
        JsonFactory jsonFactory0 = new JsonFactory();
        ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
        objectMapper0._readMapAndClose((JsonParser) null, (JavaType) null);
    }
}
