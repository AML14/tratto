project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test0000,"public void test0000() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test0011,"public void test0011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayNode> class0 = ArrayNode.class;
    Class<Integer> class1 = Integer.class;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class1, class1);
    ObjectReader objectReader0 = objectMapper0.reader((JavaType) mapLikeType0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test0022,"public void test0022() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BigIntegerNode> class0 = BigIntegerNode.class;
    MutableConfigOverride mutableConfigOverride0 = objectMapper0.configOverride(class0);
    assertNull(mutableConfigOverride0.getIsIgnoredType());
}",0,assertNotNull(mutableConfigOverride0.getIsIgnoredType())
project,0,test0033,"public void test0033() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<MapLikeType> class0 = MapLikeType.class;
    JavaType javaType0 = TypeFactory.unknownType();
    JavaType[] javaTypeArray0 = new JavaType[3];
    ReferenceType referenceType0 = ReferenceType.construct(class0, (TypeBindings) null, javaType0, javaTypeArray0, javaType0);
    SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(""ZW}K{l(V"");
    AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>(sQLInvalidAuthorizationSpecException0);
    boolean boolean0 = objectMapper0.canDeserialize((JavaType) referenceType0, atomicReference0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test0044,"public void test0044() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[4];
    // Undeclared exception!
    try {
        objectMapper0.enable(serializationFeature0, serializationFeatureArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializationConfig"", e);
    }
}",0,
project,0,test0055,"public void test0055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    // Undeclared exception!
    try {
        objectMapper0.canDeserialize((JavaType) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Null JavaType passed
        //
        verifyException(""com.fasterxml.jackson.databind.deser.DeserializerCache"", e);
    }
}",0,
project,0,test0066,"public void test0066() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
    ObjectMapper objectMapper1 = objectMapper0.enable(deserializationFeature0);
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test0077,"public void test0077() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<BeanDeserializer> class0 = BeanDeserializer.class;
    ObjectReader objectReader0 = objectMapper0.readerWithView(class0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test0088,"public void test0088() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    byte[] byteArray0 = new byte[5];
    // Undeclared exception!
    try {
        objectMapper0.readValue(byteArray0, (JavaType) null);
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
    } catch (ArrayIndexOutOfBoundsException e) {
        //
        // 5
        //
        verifyException(""com.fasterxml.jackson.core.io.UTF32Reader"", e);
    }
}",0,
project,0,test0099,"public void test0099() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
    ObjectReader objectReader0 = objectMapper0.reader(contextAttributes0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test01010,"public void test01010() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0);
    ObjectMapper objectMapper1 = objectMapper0.setDateFormat(dateFormat0);
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test01111,"public void test01111() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Locale locale0 = Locale.ENGLISH;
    ObjectMapper objectMapper1 = objectMapper0.setLocale(locale0);
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test01515,"public void test01515() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Long> class0 = Long.TYPE;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    JavaType javaType0 = typeFactory0.constructType((Type) class0, typeBindings0);
    ObjectReader objectReader0 = objectMapper0.readerFor(javaType0);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = (DefaultDeserializationContext.Impl) objectReader0._context;
    JsonDeserializer<Object> jsonDeserializer0 = objectMapper0._findRootDeserializer(defaultDeserializationContext_Impl0, javaType0);
    assertTrue(jsonDeserializer0.isCachable());
}",0,assertFalse(jsonDeserializer0.isCachable())
project,0,test01616,"public void test01616() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.copy();
    assertNotSame(objectMapper0, objectMapper1);
}",0,
project,0,test01818,"public void test01818() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.WRAP_ROOT_VALUE;
    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
    ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0, serializationFeatureArray0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,assertTrue(objectWriter0.hasPrefetchedSerializer())
project,0,test01919,"public void test01919() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
    ObjectReader objectReader0 = objectMapper0.reader(jsonNodeFactory0);
    assertNotNull(objectReader0);
}",0,
project,0,test02020,"public void test02020() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    // Undeclared exception!
    try {
        objectMapper0.readValue((byte[]) null, (TypeReference) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.JsonFactory"", e);
    }
}",0,
project,0,test02222,"public void test02222() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    TimeZone timeZone0 = TimeZone.getTimeZone(""JSON"");
    ObjectMapper objectMapper1 = objectMapper0.setTimeZone(timeZone0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test02323,"public void test02323() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    boolean boolean0 = objectMapper0.isEnabled(jsonGenerator_Feature0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test02525,"public void test02525() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    // Undeclared exception!
    try {
        objectMapper0.readerFor((TypeReference<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test02626,"public void test02626() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.findAndRegisterModules();
    assertSame(objectMapper1, objectMapper0);
}",1,
project,0,test02727,"public void test02727() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<CollectionType> class0 = CollectionType.class;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
    // Undeclared exception!
    try {
        objectMapper0.readValue((DataInput) null, (JavaType) arrayType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper"", e);
    }
}",0,
project,0,test02828,"public void test02828() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader((Base64Variant) null);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test02929,"public void test02929() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test03030,"public void test03030() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    DateFormat dateFormat0 = MockDateFormat.getDateInstance();
    ObjectWriter objectWriter0 = objectMapper0.writer(dateFormat0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,
project,0,test03131,"public void test03131() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<SimpleModule> class0 = SimpleModule.class;
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base(defaultSerializerProvider_Impl0);
    objectMapper0.acceptJsonFormatVisitor((Class<?>) class0, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
}",1,
project,0,test03232,"public void test03232() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ConfigOverrides configOverrides0 = new ConfigOverrides();
    DeserializationConfig deserializationConfig0 = new DeserializationConfig(baseSettings0, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0, configOverrides0);
    ObjectMapper objectMapper1 = objectMapper0.setConfig(deserializationConfig0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test03333,"public void test03333() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer((FilterProvider) null);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test03434,"public void test03434() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    try {
        objectMapper0.readValue(""E+<\u0001eT\u0005+@H!"", (JavaType) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Unrecognized token 'E': was expecting ('true', 'false' or 'null')
        //  at [Source: java.lang.String@0000000022; line: 1, column: 2]
        //
        verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
    }
}",0,
project,0,test03535,"public void test03535() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
    objectMapper0.setFilters(simpleFilterProvider0);
    assertTrue(simpleFilterProvider0.willFailOnUnknownId());
}",0,assertTrue(simpleFilterProvider0.willFailOnUnknownId())
project,0,test03636,"public void test03636() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS;
    ObjectReader objectReader0 = objectMapper0.reader(deserializationFeature0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test03737,"public void test03737() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MockFile mockFile0 = new MockFile("""", """");
    PipedReader pipedReader0 = new PipedReader(7);
    try {
        objectMapper0.writeValue((File) mockFile0, (Object) pipedReader0);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileOutputStream"", e);
    }
}",0,
project,0,test03838,"public void test03838() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writerWithType((JavaType) null);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,
project,0,test03939,"public void test03939() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<InputStreamReader> class0 = InputStreamReader.class;
    ObjectWriter objectWriter0 = objectMapper0.writerWithView(class0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,assertTrue(objectWriter0.hasPrefetchedSerializer())
project,0,test04040,"public void test04040() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.enableDefaultTyping();
    Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
    ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertTrue(objectWriter0.hasPrefetchedSerializer())
project,0,test04141,"public void test04141() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    byte[] byteArray0 = new byte[3];
    // Undeclared exception!
    try {
        objectMapper0.readValue(byteArray0, 55296, (-1825), (TypeReference) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test04343,"public void test04343() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
    ValueNode valueNode0 = jsonNodeFactory0.numberNode((Long) null);
    Class<MapLikeType> class0 = MapLikeType.class;
    MapLikeType mapLikeType0 = objectMapper0.treeToValue((TreeNode) valueNode0, class0);
    assertNull(mapLikeType0);
}",1,
project,0,test04444,"public void test04444() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    try {
        objectMapper0.readValue((Reader) null, (JavaType) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //  at [Source: UNKNOWN; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test04646,"public void test04646() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader((FormatSchema) null);
    assertNotNull(objectReader0);
}",1,
project,0,test04747,"public void test04747() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    // Undeclared exception!
    try {
        objectMapper0.reader((TypeReference<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test04848,"public void test04848() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeReference<SimpleModule> typeReference0 = (TypeReference<SimpleModule>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectMapper0.readValue((JsonParser) null, (TypeReference<?>) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test04949,"public void test04949() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    VisibilityChecker<?> visibilityChecker0 = objectMapper0.getVisibilityChecker();
    assertNotNull(visibilityChecker0);
}",0,
project,0,test05050,"public void test05050() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
    ObjectMapper objectMapper1 = objectMapper0.enable(serializationFeature0);
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test05151,"public void test05151() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[4];
    // Undeclared exception!
    try {
        objectMapper0.enable(deserializationFeature0, deserializationFeatureArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}",0,
project,0,test05353,"public void test05353() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<MapLikeType> class0 = MapLikeType.class;
    URI uRI0 = MockURI.aHttpURI;
    URL uRL0 = MockURI.toURL(uRI0);
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    try {
        objectMapper0.readValue(uRL0, (JavaType) resolvedRecursiveType0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Could not find: foo.bar
        //
        verifyException(""org.evosuite.runtime.mock.java.net.EvoHttpURLConnection"", e);
    }
}",0,
project,0,test05454,"public void test05454() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    // Undeclared exception!
    try {
        objectMapper0.readValue((File) null, (JavaType) mapLikeType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test05555,"public void test05555() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setSerializerFactory((SerializerFactory) null);
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test05656,"public void test05656() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
    byte[] byteArray0 = objectMapper0.writeValueAsBytes(objectNode0);
    assertEquals(2, byteArray0.length);
}",0,
project,0,test05757,"public void test05757() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER;
    boolean boolean0 = objectMapper0.isEnabled(jsonParser_Feature0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test05858,"public void test05858() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonParserSequence jsonParserSequence0 = JsonParserSequence.createFlattened(false, (JsonParser) null, (JsonParser) null);
    TypeReference<BasicBeanDescription> typeReference0 = (TypeReference<BasicBeanDescription>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectMapper0.readValues((JsonParser) jsonParserSequence0, (TypeReference<?>) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",1,
project,0,test05959,"public void test05959() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<OutputStreamWriter> class0 = OutputStreamWriter.class;
    // Undeclared exception!
    try {
        objectMapper0._checkInvalidCopy(class0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Failed copy(): com.fasterxml.jackson.databind.ObjectMapper (version: 2.8.4-SNAPSHOT) does not override copy(); it has to
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",1,
project,0,test06060,"public void test06060() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    PropertyNamingStrategy propertyNamingStrategy0 = objectMapper0.getPropertyNamingStrategy();
    assertNull(propertyNamingStrategy0);
}",0,
project,0,test06161,"public void test06161() throws Throwable {
    JsonpCharacterEscapes jsonpCharacterEscapes0 = JsonpCharacterEscapes.instance();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.writeValue((OutputStream) byteArrayBuilder0, (Object) jsonpCharacterEscapes0.ESCAPE_NONE);
    assertEquals((-1), CharacterEscapes.ESCAPE_STANDARD);
}",0,
project,0,test06262,"public void test06262() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    PipedWriter pipedWriter0 = new PipedWriter();
    MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
    StringReader stringReader0 = new StringReader(""Failed copy(): "");
    try {
        objectMapper0.writeValue((Writer) mockPrintWriter0, (Object) stringReader0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No serializer found for class java.io.StringReader and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test06363,"public void test06363() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3751);
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
    ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
    try {
        objectMapper0.writeValue((DataOutput) objectOutputStream0, (Object) objectOutputStream0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No serializer found for class java.io.ObjectOutputStream and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test06464,"public void test06464() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter();
    ObjectMapper objectMapper1 = objectMapper0.setDefaultPrettyPrinter(minimalPrettyPrinter0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test06565,"public void test06565() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_SINGLE_QUOTES;
    ObjectMapper objectMapper1 = objectMapper0.configure(jsonParser_Feature0, true);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test06666,"public void test06666() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<ObjectInputStream> class0 = ObjectInputStream.class;
    Class<SimpleModule> class1 = SimpleModule.class;
    objectMapper0.addMixInAnnotations(class0, class1);
}",1,
project,0,test06767,"public void test06767() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    byte[] byteArray0 = new byte[9];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0, 192, (int) (byte) (-1));
    try {
        objectMapper0.readValue(jsonParser0, (ResolvedType) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //  at [Source: [B@0000000023; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test06868,"public void test06868() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonNodeFactory jsonNodeFactory0 = objectMapper0.getNodeFactory();
    assertNotNull(jsonNodeFactory0);
}",0,
project,0,test06969,"public void test06969() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer();
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,
project,0,test07070,"public void test07070() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    assertEquals(0, deserializationContext0.getDeserializationFeatures());
}",0,"assertEquals(0, deserializationContext0.getDeserializationFeatures())"
project,0,test07171,"public void test07171() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospector((AnnotationIntrospector) null);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test07272,"public void test07272() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    PropertyAccessor propertyAccessor0 = PropertyAccessor.NONE;
    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
    ObjectMapper objectMapper1 = objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test07373,"public void test07373() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper1 = objectMapper0.setSubtypeResolver(stdSubtypeResolver0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test07575,"public void test07575() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
    ObjectMapper objectMapper1 = objectMapper0.setInjectableValues(injectableValues_Std0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test07676,"public void test07676() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();
    assertNotNull(serializerProvider0);
}",0,
project,0,test07777,"public void test07777() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    PropertyNamingStrategy.UpperCamelCaseStrategy propertyNamingStrategy_UpperCamelCaseStrategy0 = (PropertyNamingStrategy.UpperCamelCaseStrategy) PropertyNamingStrategy.UPPER_CAMEL_CASE;
    ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_UpperCamelCaseStrategy0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test07979,"public void test07979() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());
    Object object0 = objectMapper0.setHandlerInstantiator(handlerInstantiator0);
    assertSame(objectMapper0, object0);
}",0,
project,0,test08080,"public void test08080() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    boolean boolean0 = objectMapper0.canSerialize(class0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test08181,"public void test08181() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
    ObjectMapper objectMapper1 = objectMapper0.enableDefaultTypingAsProperty(objectMapper_DefaultTyping0, ""{\""o}LO!?v^V"");
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test08383,"public void test08383() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonpCharacterEscapes jsonpCharacterEscapes0 = new JsonpCharacterEscapes();
    ObjectWriter objectWriter0 = objectMapper0.writer((CharacterEscapes) jsonpCharacterEscapes0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,
project,0,test08484,"public void test08484() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.reader();
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test08686,"public void test08686() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<CharArrayReader> class0 = CharArrayReader.class;
    Class<BufferedReader> class1 = BufferedReader.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class1);
    // Undeclared exception!
    try {
        objectMapper0.readValue((JsonParser) null, (JavaType) collectionLikeType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",0,
project,0,test08787,"public void test08787() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate((JsonParser) null, tokenFilter0, true, true);
    // Undeclared exception!
    try {
        objectMapper0.readValues((JsonParser) filteringParserDelegate0, (ResolvedType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test08888,"public void test08888() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.ACCEPT_FLOAT_AS_INT;
    DeserializationFeature[] deserializationFeatureArray0 = new DeserializationFeature[7];
    // Undeclared exception!
    try {
        objectMapper0.reader(deserializationFeature0, deserializationFeatureArray0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}",0,
project,0,test08989,"public void test08989() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    InjectableValues.Std injectableValues_Std0 = new InjectableValues.Std();
    ObjectReader objectReader0 = objectMapper0.reader((InjectableValues) injectableValues_Std0);
    assertNotNull(objectReader0);
}",0,
project,0,test09090,"public void test09090() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
    boolean boolean0 = objectMapper0.isEnabled(jsonFactory_Feature0);
    assertTrue(boolean0);
}",1,
project,0,test09191,"public void test09191() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    int int0 = objectMapper0.mixInCount();
    assertEquals(0, int0);
}",0,"assertEquals(0, int0)"
project,0,test09292,"public void test09292() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    // Undeclared exception!
    try {
        objectMapper0.writeValueAsString(jsonFactory0);
        fail(""Expecting exception: NoClassDefFoundError"");
    } catch (NoClassDefFoundError e) {
        //
        // com/fasterxml/jackson/databind/JsonMappingException$Reference
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.BeanSerializerBase"", e);
    }
}",0,
project,0,test09393,"public void test09393() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
    ObjectWriter objectWriter0 = objectMapper0.writer(serializationFeature0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,assertTrue(objectWriter0.hasPrefetchedSerializer())
project,0,test09494,"public void test09494() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer((FormatSchema) null);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test09595,"public void test09595() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectNode objectNode0 = objectMapper0.createObjectNode();
    assertFalse(objectNode0.isDouble());
}",0,assertFalse(objectNode0.isDouble())
project,0,test09696,"public void test09696() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<MockFileReader> class0 = MockFileReader.class;
    boolean boolean0 = objectMapper0.canSerialize(class0, (AtomicReference<Throwable>) null);
    assertTrue(boolean0);
}",1,
project,0,test09797,"public void test09797() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
    boolean boolean0 = objectMapper0.isEnabled(serializationFeature0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test09898,"public void test09898() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    SerializerFactory serializerFactory0 = objectMapper0.getSerializerFactory();
    assertNotNull(serializerFactory0);
}",0,assertNotNull(serializerFactory0)
project,0,test09999,"public void test09999() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.clearProblemHandlers();
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test100100,"public void test100100() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    // Undeclared exception!
    try {
        objectMapper0.readValue((URL) null, (TypeReference) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.net.MockURL"", e);
    }
}",0,
project,0,test101101,"public void test101101() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setBase64Variant((Base64Variant) null);
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test102102,"public void test102102() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writerWithDefaultPrettyPrinter();
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,
project,0,test103103,"public void test103103() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    byte[] byteArray0 = new byte[5];
    try {
        objectMapper0.readValue(byteArray0, (int) (-128), (-1702), (JavaType) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No content to map due to end-of-input
        //  at [Source: [B@0000000025; line: 1, column: 0]
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test104104,"public void test104104() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.ALWAYS;
    ObjectMapper objectMapper1 = objectMapper0.setSerializationInclusion(jsonInclude_Include0);
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test105105,"public void test105105() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.FAIL_ON_EMPTY_BEANS;
    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
    ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0, serializationFeatureArray0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test106106,"public void test106106() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    InjectableValues injectableValues0 = objectMapper0.getInjectableValues();
    assertNull(injectableValues0);
}",0,
project,0,test107107,"public void test107107() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.READ_ENUMS_USING_TO_STRING;
    // Undeclared exception!
    try {
        objectMapper0.disable(deserializationFeature0, (DeserializationFeature[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationConfig"", e);
    }
}",0,
project,0,test110110,"public void test110110() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<DecimalNode> class0 = DecimalNode.class;
    Class<?> class1 = objectMapper0.findMixInClassFor(class0);
    assertNull(class1);
}",0,
project,0,test112112,"public void test112112() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setConfig((SerializationConfig) null);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test113113,"public void test113113() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ArrayNode arrayNode0 = objectMapper0.createArrayNode();
    assertFalse(arrayNode0.isBigDecimal());
}",0,assertFalse(arrayNode0.isBigDecimal())
project,0,test114114,"public void test114114() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleModule simpleModule0 = new SimpleModule();
    NamedType[] namedTypeArray0 = new NamedType[4];
    SimpleModule simpleModule1 = simpleModule0.registerSubtypes(namedTypeArray0);
    ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test115115,"public void test115115() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    MockFile mockFile0 = new MockFile(""m{KhV`7jha@5\""b"");
    try {
        objectMapper0.readValue((File) mockFile0, (TypeReference) null);
        fail(""Expecting exception: FileNotFoundException"");
    } catch (FileNotFoundException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""org.evosuite.runtime.mock.java.io.MockFileInputStream"", e);
    }
}",0,
project,0,test116116,"public void test116116() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    // Undeclared exception!
    try {
        objectMapper0.constructType((Type) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test117117,"public void test117117() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
    ObjectMapper objectMapper1 = objectMapper0.disable(serializationFeature0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test118118,"public void test118118() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer((Base64Variant) null);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test119119,"public void test119119() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    PipedReader pipedReader0 = new PipedReader();
    PushbackReader pushbackReader0 = new PushbackReader(pipedReader0);
    TypeReference<BooleanNode> typeReference0 = (TypeReference<BooleanNode>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectMapper0.readValue((Reader) pushbackReader0, (TypeReference) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test120120,"public void test120120() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
    ObjectMapper objectMapper1 = objectMapper0.setFilterProvider(simpleFilterProvider0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test121121,"public void test121121() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<Object> class0 = Object.class;
    CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, (-163));
    TypeReference<String> typeReference0 = (TypeReference<String>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    try {
        objectMapper0.convertValue((Object) coreXMLDeserializers_Std0, (TypeReference<?>) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test122122,"public void test122122() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
    ObjectWriter objectWriter0 = objectMapper0.writer(contextAttributes0);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test123123,"public void test123123() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.addHandler((DeserializationProblemHandler) null);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test124124,"public void test124124() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
    doReturn(false).when(enumeration0).hasMoreElements();
    SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
    TypeReference<ArrayType> typeReference0 = (TypeReference<ArrayType>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectMapper0.readValue((InputStream) sequenceInputStream0, (TypeReference) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test125125,"public void test125125() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    TypeFactory typeFactory0 = objectMapper0.getTypeFactory();
    assertNotNull(typeFactory0);
}",0,assertNotNull(typeFactory0)
project,0,test126126,"public void test126126() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.EAGER_DESERIALIZER_FETCH;
    ObjectMapper objectMapper1 = objectMapper0.disable(deserializationFeature0);
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test127127,"public void test127127() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writerFor((JavaType) null);
    assertFalse(objectWriter0.hasPrefetchedSerializer());
}",0,
project,0,test128128,"public void test128128() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
    ObjectMapper objectMapper1 = objectMapper0.configure(jsonGenerator_Feature0, false);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test129129,"public void test129129() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.disableDefaultTyping();
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test130130,"public void test130130() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TextNode textNode0 = objectMapper0.valueToTree((Object) "" for format "");
    assertFalse(textNode0.isLong());
}",0,assertTrue(textNode0.isLong())
project,0,test131131,"public void test131131() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);
    PipedInputStream pipedInputStream0 = new PipedInputStream(375);
    BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 268);
    try {
        objectMapper0.readValue((InputStream) bufferedInputStream0, (JavaType) null);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // Pipe not connected
        //
        verifyException(""java.io.PipedInputStream"", e);
    }
}",0,
project,0,test132132,"public void test132132() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ObjectMapper objectMapper1 = objectMapper0.setTypeFactory(typeFactory0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test133133,"public void test133133() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeReference<FilterOutputStream> typeReference0 = (TypeReference<FilterOutputStream>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
    doReturn((Type) null).when(typeReference0).getType();
    // Undeclared exception!
    try {
        objectMapper0.readValue("""", (TypeReference) typeReference0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test134134,"public void test134134() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    assertTrue(serializerProvider0.canOverrideAccessModifiers());
}",0,
project,0,test135135,"public void test135135() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    ObjectMapper objectMapper1 = objectMapper0.setSerializerProvider(defaultSerializerProvider_Impl0);
    assertSame(objectMapper0, objectMapper1);
}",1,
project,0,test136136,"public void test136136() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors((AnnotationIntrospector) null, (AnnotationIntrospector) null);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test137137,"public void test137137() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory();
    Version version0 = jsonFactory0.version();
    SimpleModule simpleModule0 = new SimpleModule(version0);
    Class<MapLikeType> class0 = MapLikeType.class;
    JsonSerializer<MapLikeType> jsonSerializer0 = (JsonSerializer<MapLikeType>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
    SimpleModule simpleModule1 = simpleModule0.addKeySerializer((Class<? extends MapLikeType>) class0, jsonSerializer0);
    ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test138138,"public void test138138() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleModule simpleModule0 = new SimpleModule();
    Class<AbstractDeserializer> class0 = AbstractDeserializer.class;
    simpleModule0.addKeyDeserializer(class0, (KeyDeserializer) null);
    ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test139139,"public void test139139() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleModule simpleModule0 = new SimpleModule();
    Class<NioPathDeserializer> class0 = NioPathDeserializer.class;
    JsonDeserializer<NioPathDeserializer> jsonDeserializer0 = (JsonDeserializer<NioPathDeserializer>) mock(JsonDeserializer.class, new ViolatedAssumptionAnswer());
    simpleModule0.addDeserializer(class0, (JsonDeserializer<? extends NioPathDeserializer>) jsonDeserializer0);
    ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test140140,"public void test140140() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleModule simpleModule0 = new SimpleModule();
    Class<ReferenceType> class0 = ReferenceType.class;
    Class<CoreXMLDeserializers.Std> class1 = CoreXMLDeserializers.Std.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    SimpleModule simpleModule1 = simpleModule0.addValueInstantiator(class1, valueInstantiator_Base0);
    ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test141141,"public void test141141() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleModule simpleModule0 = new SimpleModule();
    BeanDeserializerModifier beanDeserializerModifier0 = mock(BeanDeserializerModifier.class, new ViolatedAssumptionAnswer());
    SimpleModule simpleModule1 = simpleModule0.setDeserializerModifier(beanDeserializerModifier0);
    ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    assertSame(objectMapper1, objectMapper0);
}",0,
project,0,test142142,"public void test142142() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleModule simpleModule0 = new SimpleModule();
    Class<MockFileInputStream> class0 = MockFileInputStream.class;
    JsonSerializer<MockFileInputStream> jsonSerializer0 = (JsonSerializer<MockFileInputStream>) mock(JsonSerializer.class, new ViolatedAssumptionAnswer());
    SimpleModule simpleModule1 = simpleModule0.addSerializer((Class<? extends MockFileInputStream>) class0, jsonSerializer0);
    ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule1);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test143143,"public void test143143() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleModule simpleModule0 = new SimpleModule();
    Class<ReferenceType> class0 = ReferenceType.class;
    simpleModule0.setMixInAnnotation(class0, class0);
    ObjectMapper objectMapper1 = objectMapper0.registerModule(simpleModule0);
    assertSame(objectMapper1, objectMapper0);
}",1,
project,0,test148148,"public void test148148() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
    ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
    Class<Throwable> class0 = Throwable.class;
    ObjectWriter objectWriter0 = objectMapper1.writerWithType(class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,
project,0,test149149,"public void test149149() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
    objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
    Class<LongNode> class0 = LongNode.class;
    ObjectWriter objectWriter0 = objectMapper0.writerWithType(class0);
    assertTrue(objectWriter0.hasPrefetchedSerializer());
}",0,assertFalse(objectWriter0.hasPrefetchedSerializer())
project,0,test154154,"public void test154154() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setMixInResolver((ClassIntrospector.MixInResolver) null);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test155155,"public void test155155() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.EXTERNAL_PROPERTY;
    // Undeclared exception!
    try {
        objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not use includeAs of EXTERNAL_PROPERTY
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",1,
project,0,test156156,"public void test156156() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
    ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, false);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test157157,"public void test157157() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_CREATORS;
    ObjectMapper objectMapper1 = objectMapper0.configure(mapperFeature0, true);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test158158,"public void test158158() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
    ObjectMapper objectMapper1 = objectMapper0.configure(serializationFeature0, false);
    assertSame(objectMapper0, objectMapper1);
}",0,
project,0,test159159,"public void test159159() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_DATES_AS_TIMESTAMPS;
    objectMapper0.configure(serializationFeature0, true);
}",0,
project,0,test160160,"public void test160160() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS;
    objectMapper0.configure(deserializationFeature0, false);
}",0,
project,0,test161161,"public void test161161() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationFeature deserializationFeature0 = DeserializationFeature.WRAP_EXCEPTIONS;
    objectMapper0.configure(deserializationFeature0, true);
}",0,
project,0,test167167,"public void test167167() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    JsonParser jsonParser0 = jsonFactory0.createParser("""");
    objectMapper0.readTree(jsonParser0);
}",1,
project,0,test168168,"public void test168168() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    byte[] byteArray0 = new byte[3];
    byteArray0[0] = (byte) 49;
    byteArray0[1] = (byte) 49;
    byteArray0[2] = (byte) 49;
    objectMapper0.readTree(byteArray0);
}",0,
project,0,test169169,"public void test169169() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
    FloatNode floatNode0 = new FloatNode((-2));
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.writeTree(jsonGenerator0, (TreeNode) floatNode0);
}",0,
project,0,test170170,"public void test170170() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayBuilder0);
    FloatNode floatNode0 = new FloatNode(0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.writeTree(jsonGenerator0, (JsonNode) floatNode0);
}",0,
project,0,test171171,"public void test171171() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    BinaryNode binaryNode0 = new BinaryNode((byte[]) null);
    Class<String> class0 = String.class;
    objectMapper0.treeToValue((TreeNode) binaryNode0, class0);
}",1,
project,0,test172172,"public void test172172() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.valueToTree((Object) null);
}",0,
project,0,test174174,"public void test174174() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.writerFor((Class<?>) null);
}",0,
project,0,test176176,"public void test176176() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.writerFor((TypeReference<?>) null);
}",0,
project,0,test177177,"public void test177177() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter("" for format "");
    objectMapper0.writer((PrettyPrinter) defaultPrettyPrinter0);
}",0,
project,0,test178178,"public void test178178() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.writer((PrettyPrinter) null);
}",0,
project,0,test179179,"public void test179179() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    objectMapper0.writerWithType((Class<?>) null);
}",1,
project,0,test181181,"public void test181181() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    objectMapper0.writerWithType((TypeReference<?>) null);
}",0,
project,0,test183183,"public void test183183() throws Throwable {
    Class<ObjectInputStream> class0 = ObjectInputStream.class;
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    try {
        objectMapper0.convertValue((Object) typeBindings0, (JavaType) resolvedRecursiveType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized field \""com.fasterxml.jackson.core.io.SerializedString@0000000215\"" (class java.io.ObjectInputStream), not marked as ignorable (one known property: \""internalObjectInputFilter\""])
        //  at [Source: java.lang.String@0000000717; line: -1, column: -1] (through reference chain: java.io.ObjectInputStream[\""com.fasterxml.jackson.core.io.SerializedString@0000000215\""])
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",1,
project,0,test184184,"public void test184184() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    Class<PipedInputStream> class0 = PipedInputStream.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    objectMapper0.convertValue((Object) null, (JavaType) resolvedRecursiveType0);
}",1,
project,0,test185185,"public void test185185() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JavaType javaType0 = TypeFactory.unknownType();
    objectMapper0._convert((Object) null, javaType0);
}",0,
project,0,test186186,"public void test186186() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    // Undeclared exception!
    try {
        objectMapper0.acceptJsonFormatVisitor((JavaType) null, (JsonFormatVisitorWrapper) jsonFormatVisitorWrapper_Base0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // type must be provided
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",1,
project,0,test187187,"public void test187187() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    // Undeclared exception!
    try {
        objectMapper0._readMapAndClose((JsonParser) null, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",0,
