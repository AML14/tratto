project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(basicBeanDescription0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test011,"public void test011() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
    boolean boolean0 = basicBeanDescription0.hasKnownClassAnnotations();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test022,"public void test022() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    Class<RuntimeException>[] classArray0 = (Class<RuntimeException>[]) Array.newInstance(Class.class, 10);
    AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findMethod(""4S04j?z2"", classArray0);
    assertNull(annotatedMethod0);
}",0,
project,0,test033,"public void test033() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
    TypeBindings typeBindings0 = basicBeanDescription0.bindingsForBeanType();
    assertTrue(typeBindings0.isEmpty());
}",0,assertTrue(typeBindings0.isEmpty())
project,0,test044,"public void test044() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<AnnotatedParameter> class0 = AnnotatedParameter.class;
    AtomicReference<Throwable> atomicReference0 = new AtomicReference<Throwable>();
    boolean boolean0 = objectMapper0.canSerialize(class0, atomicReference0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test055,"public void test055() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    boolean boolean0 = basicBeanDescription0.removeProperty(""getScientificInstance"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test066,"public void test066() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    boolean boolean0 = basicBeanDescription0.hasProperty(propertyName0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test088,"public void test088() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    Class<Long> class0 = Long.TYPE;
    // Undeclared exception!
    try {
        basicBeanDescription0.resolveType(class0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.BasicBeanDescription"", e);
    }
}",0,
project,0,test099,"public void test099() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    JavaType javaType0 = basicBeanDescription0.resolveType((Type) null);
    assertNull(javaType0);
}",0,assertNotNull(javaType0)
project,0,test1010,"public void test1010() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
    AnnotatedMethod annotatedMethod0 = basicBeanDescription0.findAnySetter();
    assertNull(annotatedMethod0);
}",0,assertNotNull(annotatedMethod0)
project,0,test1212,"public void test1212() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
    // Undeclared exception!
    try {
        basicBeanDescription0.findExpectedFormat((JsonFormat.Value) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.BasicBeanDescription"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    JsonInclude.Value jsonInclude_Value0 = JsonInclude.Value.empty();
    JsonInclude.Value jsonInclude_Value1 = basicBeanDescription0.findPropertyInclusion(jsonInclude_Value0);
    assertSame(jsonInclude_Value1, jsonInclude_Value0);
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnyGetter();
    assertNull(annotatedMember0);
}",0,assertNotNull(annotatedMember0)
project,0,test1515,"public void test1515() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
    AnnotatedMember annotatedMember0 = basicBeanDescription0.findAnySetterField();
    assertNull(annotatedMember0);
}",0,assertNotNull(annotatedMember0)
project,0,test1616,"public void test1616() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleModule simpleModule0 = new SimpleModule();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleModule0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test1717,"public void test1717() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.INTERN_FIELD_NAMES;
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(jsonFactory_Feature0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test1818,"public void test1818() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = basicBeanDescription0.findPOJOBuilderConfig();
    assertNull(jsonPOJOBuilder_Value0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    String string0 = basicBeanDescription0.findClassDescription();
    assertNull(string0);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    // Undeclared exception!
    try {
        basicBeanDescription0._createConverter(basicBeanDescription0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // AnnotationIntrospector returned Converter definition of type com.fasterxml.jackson.databind.introspect.BasicBeanDescription; expected type Converter or Class<Converter> instead
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.BasicBeanDescription"", e);
    }
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.BOOLEAN_DESC;
    Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
    // Undeclared exception!
    try {
        basicBeanDescription0._createConverter(class0);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // AnnotationIntrospector returned Class com.fasterxml.jackson.databind.jsontype.impl.MinimalClassNameIdResolver; expected Class<Converter>
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.BasicBeanDescription"", e);
    }
}",0,
