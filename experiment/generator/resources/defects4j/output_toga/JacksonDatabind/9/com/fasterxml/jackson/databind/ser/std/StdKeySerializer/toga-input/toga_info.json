{
  "test00" : {
    "methodSignature" : "public abstract JsonNodeType getNodeType()",
    "methodName" : "getNodeType",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdKeySerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test00() throws Throwable {\n    StdKeySerializer stdKeySerializer0 = new StdKeySerializer();\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    MapType mapType0 = typeFactory0.constructRawMapType(class0);\n    Class<?> class1 = mapType0.getParameterSource();\n    JsonNode jsonNode0 = stdKeySerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class1);\n    jsonNode0.getNodeType();\n}",
    "testName" : "test00"
  },
  "test11" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdKeySerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test11() throws Throwable {\n    StdKeySerializer stdKeySerializer0 = new StdKeySerializer();\n    JsonFormatVisitorWrapper jsonFormatVisitorWrapper0 = mock(JsonFormatVisitorWrapper.class, new ViolatedAssumptionAnswer());\n    doReturn((JsonStringFormatVisitor) null).when(jsonFormatVisitorWrapper0).expectStringFormat(any(com.fasterxml.jackson.databind.JavaType.class));\n    stdKeySerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper0, (JavaType) null);\n    stdKeySerializer0.usesObjectId();\n}",
    "testName" : "test11"
  },
  "test22" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdKeySerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test22() throws Throwable {\n    StdKeySerializer stdKeySerializer0 = new StdKeySerializer();\n    Integer integer0 = new Integer(0);\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);\n    BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 3);\n    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-3693), objectMapper0, bufferedOutputStream0);\n    JsonGeneratorDelegate jsonGeneratorDelegate0 = new JsonGeneratorDelegate(uTF8JsonGenerator0, false);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    stdKeySerializer0.serialize(integer0, jsonGeneratorDelegate0, defaultSerializerProvider_Impl0);\n    stdKeySerializer0.usesObjectId();\n}",
    "testName" : "test22"
  },
  "test33" : {
    "methodSignature" : "public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException",
    "methodName" : "serialize",
    "className" : "com.fasterxml.jackson.databind.ser.std.StdKeySerializer",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test33() throws Throwable {\n    StdKeySerializer stdKeySerializer0 = new StdKeySerializer();\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    IOContext iOContext0 = new IOContext(bufferRecycler0, \"i-\", true);\n    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);\n    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 115, (ObjectCodec) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES, 1, false);\n    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null);\n    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProvider();\n    MockDate mockDate0 = new MockDate(3, 55296, 0, 56319, 57343);\n    stdKeySerializer0.serialize(mockDate0, uTF8JsonGenerator0, serializerProvider0);\n}",
    "testName" : "test33"
  }
}