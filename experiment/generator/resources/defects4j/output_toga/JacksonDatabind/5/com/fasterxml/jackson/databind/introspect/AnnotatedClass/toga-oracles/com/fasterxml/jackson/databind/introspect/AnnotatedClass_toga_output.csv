project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    boolean boolean0 = annotatedClass0.isPublic();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test033,"public void test033() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<Object> class0 = Object.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    assertEquals(1, annotatedClass0.getModifiers());
}",0,"assertEquals(0, annotatedClass0.getModifiers())"
project,0,test044,"public void test044() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    AnnotatedClass annotatedClass1 = annotatedClass0.withAnnotations((AnnotationMap) null);
    assertNotSame(annotatedClass0, annotatedClass1);
}",0,
project,0,test055,"public void test055() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    String string0 = annotatedClass0.getName();
    assertEquals(""int"", string0);
}",0,assertNotNull(string0)
project,0,test077,"public void test077() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    String string0 = annotatedClass0.toString();
    assertEquals(""[AnnotedClass java.lang.String]"", string0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    Iterable<Annotation> iterable0 = annotatedClass0.annotations();
    assertNotNull(iterable0);
}",0,assertNotNull(iterable0)
project,0,test099,"public void test099() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    AnnotationMap annotationMap0 = annotatedClass0.getAllAnnotations();
    assertEquals(0, annotationMap0.size());
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
    assertEquals(0, annotations0.size());
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    basicBeanDescription0.hasKnownClassAnnotations();
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    assertEquals(1, annotatedConstructor0.getModifiers());
}",0,"assertEquals(0, annotatedConstructor0.getModifiers())"
project,0,test1212,"public void test1212() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    boolean boolean0 = annotatedClass0.hasAnnotations();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test1313,"public void test1313() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    // Undeclared exception!
    try {
        basicBeanDescription0.getFactoryMethods();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.BasicBeanDescription"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    int int0 = annotatedClass0.getMemberMethodCount();
    assertEquals(51, int0);
}",0,"assertEquals(0, int0)"
project,0,test1515,"public void test1515() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    // Undeclared exception!
    try {
        basicBeanDescription0.findMethod((String) null, (Class<?>[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    Class<AnnotatedField>[] classArray0 = (Class<AnnotatedField>[]) Array.newInstance(Class.class, 0);
    basicBeanDescription0.findMethod("" has mismatch: "", classArray0);
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    assertNull(annotatedConstructor0);
}",0,
project,0,test1717,"public void test1717() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    int int0 = annotatedClass0.getFieldCount();
    assertEquals(2, int0);
}",0,
project,0,test1818,"public void test1818() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    int int0 = annotatedClass0.getFieldCount();
    assertEquals(3, int0);
}",0,
project,0,test1919,"public void test1919() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<AnnotatedConstructor> class0 = AnnotatedConstructor.class;
    objectMapper0.addMixInAnnotations(class0, class0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(basicBeanDescription0);
    assertNotNull(objectReader0);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<Object> class0 = Object.class;
    Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
    objectMapper0.addMixInAnnotations(class0, class1);
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(beanSerializerBuilder0);
    assertNotNull(objectReader0);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    Iterable<AnnotatedMethod> iterable0 = annotatedClass0.memberMethods();
    assertNotNull(iterable0);
}",0,
project,0,test2222,"public void test2222() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    Class<String> class0 = String.class;
    annotatedClass0._addConstructorMixIns(class0);
    assertEquals(17, annotatedClass0.getModifiers());
}",0,"assertEquals(0, annotatedClass0.getModifiers())"
project,0,test2323,"public void test2323() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct((Class<?>) null, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    Iterable<AnnotatedMethod> iterable0 = annotatedClass0.memberMethods();
    assertNotNull(iterable0);
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    LinkedHashMap<String, AnnotatedField> linkedHashMap0 = new LinkedHashMap<String, AnnotatedField>();
    Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
    Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
    annotatedClass0._addFieldMixIns(class0, class1, linkedHashMap0);
    assertEquals(1041, annotatedClass0.getModifiers());
}",0,"assertEquals(0, annotatedClass0.getModifiers())"
project,0,test2525,"public void test2525() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<AnnotatedField> class0 = AnnotatedField.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    AnnotationMap annotationMap0 = annotatedClass0._collectRelevantAnnotations((Annotation[]) null);
    assertEquals(0, annotationMap0.size());
}",0,
