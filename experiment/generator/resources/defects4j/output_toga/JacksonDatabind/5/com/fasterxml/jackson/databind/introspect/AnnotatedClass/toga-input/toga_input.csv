focal_method,test_prefix,docstring
"public final boolean isPublic() {
    return Modifier.isPublic(getModifiers());
}","public void test011() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    boolean boolean0 = annotatedClass0.isPublic();
    assertTrue(boolean0);
}",""
"@Override
public int getModifiers() {
    return _class.getModifiers();
}","public void test033() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<Object> class0 = Object.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.constructWithoutSuperTypes(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    assertEquals(1, annotatedClass0.getModifiers());
}",""
"@Override
public AnnotatedClass withAnnotations(AnnotationMap ann) {
    return new AnnotatedClass(_class, _superTypes, _annotationIntrospector, _mixInResolver, ann);
}","public void test044() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    AnnotatedClass annotatedClass1 = annotatedClass0.withAnnotations((AnnotationMap) null);
    assertNotSame(annotatedClass0, annotatedClass1);
}",""
"@Override
public String getName() {
    return _class.getName();
}","public void test055() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    String string0 = annotatedClass0.getName();
    assertEquals(""int"", string0);
}",""
"/*
    /**********************************************************
    /* Other methods
    /**********************************************************
     */
@Override
public String toString() {
    return ""[AnnotedClass "" + _class.getName() + ""]"";
}","public void test077() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    String string0 = annotatedClass0.toString();
    assertEquals(""[AnnotedClass java.lang.String]"", string0);
}",""
"@Override
public Iterable<Annotation> annotations() {
    if (_classAnnotations == null) {
        resolveClassAnnotations();
    }
    return _classAnnotations.annotations();
}","public void test088() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    Iterable<Annotation> iterable0 = annotatedClass0.annotations();
    assertNotNull(iterable0);
}",""
"@Override
public int size() {
    return (_annotations == null) ? 0 : _annotations.size();
}","public void test099() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    AnnotationMap annotationMap0 = annotatedClass0.getAllAnnotations();
    assertEquals(0, annotationMap0.size());
}",""
"public int size();","public void test1010() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    Annotations annotations0 = basicBeanDescription0.getClassAnnotations();
    assertEquals(0, annotations0.size());
}","/**
 * Returns number of annotation entries in this collection.
 */"
"@Override
public int getModifiers() {
    return _constructor.getModifiers();
}","public void test1111() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    basicBeanDescription0.hasKnownClassAnnotations();
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    assertEquals(1, annotatedConstructor0.getModifiers());
}",""
"public boolean hasAnnotations() {
    if (_classAnnotations == null) {
        resolveClassAnnotations();
    }
    return _classAnnotations.size() > 0;
}","public void test1212() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    boolean boolean0 = annotatedClass0.hasAnnotations();
    assertTrue(boolean0);
}",""
"/*
    /**********************************************************
    /* Introspection for deserialization, factories
    /**********************************************************
     */
@Override
public List<AnnotatedMethod> getFactoryMethods() {
    // must filter out anything that clearly is not a factory method
    List<AnnotatedMethod> candidates = _classInfo.getStaticMethods();
    if (candidates.isEmpty()) {
        return candidates;
    }
    ArrayList<AnnotatedMethod> result = new ArrayList<AnnotatedMethod>();
    for (AnnotatedMethod am : candidates) {
        if (isFactoryMethod(am)) {
            result.add(am);
        }
    }
    return result;
}","public void test1313() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    // Undeclared exception!
    try {
        basicBeanDescription0.getFactoryMethods();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.introspect.BasicBeanDescription"", e);
    }
}",""
"public int getMemberMethodCount() {
    if (_memberMethods == null) {
        resolveMemberMethods();
    }
    return _memberMethods.size();
}","public void test1414() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    int int0 = annotatedClass0.getMemberMethodCount();
    assertEquals(51, int0);
}",""
"/*
    /**********************************************************
    /* Simple accessors, extended
    /**********************************************************
     */
@Override
public AnnotatedMethod findMethod(String name, Class<?>[] paramTypes) {
    return _classInfo.findMethod(name, paramTypes);
}","public void test1515() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    // Undeclared exception!
    try {
        basicBeanDescription0.findMethod((String) null, (Class<?>[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
    }
}",""
"@Override
public AnnotatedConstructor findDefaultConstructor() {
    return _classInfo.getDefaultConstructor();
}","public void test1616() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    Class<AnnotatedField>[] classArray0 = (Class<AnnotatedField>[]) Array.newInstance(Class.class, 0);
    basicBeanDescription0.findMethod("" has mismatch: "", classArray0);
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    assertNull(annotatedConstructor0);
}",""
"public int getFieldCount() {
    if (_fields == null) {
        resolveFields();
    }
    return _fields.size();
}","public void test1717() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    int int0 = annotatedClass0.getFieldCount();
    assertEquals(2, int0);
}",""
"public int getFieldCount() {
    if (_fields == null) {
        resolveFields();
    }
    return _fields.size();
}","public void test1818() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<JsonFactory.Feature> class0 = JsonFactory.Feature.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    int int0 = annotatedClass0.getFieldCount();
    assertEquals(3, int0);
}",""
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return new ObjectReader(this, getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test1919() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<AnnotatedConstructor> class0 = AnnotatedConstructor.class;
    objectMapper0.addMixInAnnotations(class0, class0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(basicBeanDescription0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return new ObjectReader(this, getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test2020() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    ObjectMapper objectMapper0 = new ObjectMapper();
    Class<Object> class0 = Object.class;
    Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
    objectMapper0.addMixInAnnotations(class0, class1);
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(beanSerializerBuilder0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"public Iterable<AnnotatedMethod> memberMethods() {
    if (_memberMethods == null) {
        resolveMemberMethods();
    }
    return _memberMethods;
}","public void test2121() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    Iterable<AnnotatedMethod> iterable0 = annotatedClass0.memberMethods();
    assertNotNull(iterable0);
}",""
"@Override
public int getModifiers() {
    return _class.getModifiers();
}","public void test2222() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    Class<String> class0 = String.class;
    annotatedClass0._addConstructorMixIns(class0);
    assertEquals(17, annotatedClass0.getModifiers());
}",""
"public Iterable<AnnotatedMethod> memberMethods() {
    if (_memberMethods == null) {
        resolveMemberMethods();
    }
    return _memberMethods;
}","public void test2323() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct((Class<?>) null, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    Iterable<AnnotatedMethod> iterable0 = annotatedClass0.memberMethods();
    assertNotNull(iterable0);
}",""
"@Override
public int getModifiers() {
    return _class.getModifiers();
}","public void test2424() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    LinkedHashMap<String, AnnotatedField> linkedHashMap0 = new LinkedHashMap<String, AnnotatedField>();
    Class<MinimalClassNameIdResolver> class0 = MinimalClassNameIdResolver.class;
    Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
    annotatedClass0._addFieldMixIns(class0, class1, linkedHashMap0);
    assertEquals(1041, annotatedClass0.getModifiers());
}",""
"@Override
public int size() {
    return (_annotations == null) ? 0 : _annotations.size();
}","public void test2525() throws Throwable {
    AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
    Class<AnnotatedField> class0 = AnnotatedField.class;
    AnnotatedClass annotatedClass0 = AnnotatedClass.construct(class0, annotationIntrospector0, (ClassIntrospector.MixInResolver) null);
    AnnotationMap annotationMap0 = annotatedClass0._collectRelevantAnnotations((Annotation[]) null);
    assertEquals(0, annotationMap0.size());
}",""
