project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ObjectMapper objectMapper0 = new ObjectMapper();
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    Class<String> class0 = String.class;
    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
    try {
        objectMapper0.valueToTree((Object) basicBeanDescription0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Loop has been executed more times than the allowed 10000 (through reference chain: com.fasterxml.jackson.databind.introspect.BasicBeanDescription[\""classInfo\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""contextClass\""]->com.fasterxml.jackson.databind.introspect.AnnotatedClass[\""defaultConstructor\""]->com.fasterxml.jackson.databind.introspect.AnnotatedConstructor[\""member\""]->java.lang.reflect.Constructor[\""accessible\""])
        //
        verifyException(""com.fasterxml.jackson.databind.ObjectMapper"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Object> class0 = Object.class;
    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
    assertFalse(javaType0.isPrimitive());
}",0,
project,0,test033,"public void test033() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
    assertFalse(mapType0.isAbstract());
}",0,assertTrue(mapType0.isAbstract())
project,0,test055,"public void test055() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    typeFactory0.clearCache();
}",0,
project,0,test077,"public void test077() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<LinkedList> class0 = LinkedList.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
    assertFalse(collectionType0.isJavaLangObject());
}",0,
project,0,test088,"public void test088() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<ArrayList> class0 = ArrayList.class;
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
    assertFalse(collectionLikeType0.isPrimitive());
}",0,assertTrue(collectionLikeType0.isPrimitive())
project,0,test1010,"public void test1010() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    // Undeclared exception!
    try {
        typeFactory0.constructType((TypeReference<?>) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    MapType mapType0 = typeFactory0.constructRawMapType(class0);
    Vector<JavaType> vector0 = new Vector<JavaType>();
    Class<ArrayList> class1 = ArrayList.class;
    CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) mapType0);
    vector0.add((JavaType) collectionType0);
    vector0.add((JavaType) collectionType0);
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
    assertFalse(javaType0.equals((Object) mapType0));
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<CollectionType> class0 = CollectionType.class;
    // Undeclared exception!
    try {
        typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.CollectionLikeType"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    try {
        typeFactory0.constructFromCanonical(""P'6ja,2_z2kLhc"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Failed to parse type 'P'6ja,2_z2kLhc' (remaining: ',2_z2kLhc'): Can not locate class 'P'6ja', problem: Class 'P'6ja.class' should be in target project, but could not be found!
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeParser"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayType> class0 = ArrayType.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
    assertFalse(mapLikeType0.useStaticType());
}",0,assertTrue(mapLikeType0.useStaticType())
project,0,test1515,"public void test1515() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
    assertFalse(arrayType0.isPrimitive());
}",0,assertTrue(arrayType0.isPrimitive())
project,0,test1616,"public void test1616() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    assertNotSame(typeFactory0, typeFactory1);
}",1,
project,0,test1818,"public void test1818() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[0];
    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
    TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
    assertNotSame(typeFactory0, typeFactory2);
}",0,
project,0,test2020,"public void test2020() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayList> class0 = ArrayList.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
    assertFalse(javaType1.isJavaLangObject());
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<ArrayList> class0 = ArrayList.class;
    JavaType javaType0 = typeFactory0._unknownType();
    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
    assertFalse(javaType1.isPrimitive());
}",0,assertTrue(javaType1.isPrimitive())
project,0,test2222,"public void test2222() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    Class<ArrayType> class0 = ArrayType.class;
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class com.fasterxml.jackson.databind.type.ArrayType is not assignable to long
        //
        verifyException(""com.fasterxml.jackson.databind.JavaType"", e);
    }
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    // Undeclared exception!
    try {
        typeFactory0.constructSpecializedType(simpleType0, class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.lang.Class not subtype of [simple type, class java.lang.String]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType[] javaTypeArray0 = new JavaType[0];
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class0);
    assertFalse(javaType0.useStaticType());
}",0,assertTrue(javaType0.useStaticType())
project,0,test2425,"public void test2425() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType[] javaTypeArray0 = new JavaType[0];
    Class<CollectionLikeType> class0 = CollectionLikeType.class;
    JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class0);
    assertNull(javaTypeArray1);
}",0,
project,0,test2526,"public void test2526() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<String> class0 = String.class;
    Class<SimpleType> class1 = SimpleType.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class1);
    // Undeclared exception!
    try {
        typeFactory0.findTypeParameters(javaType0, class1);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Class java.lang.String is not a subtype of com.fasterxml.jackson.databind.type.SimpleType
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test2728,"public void test2728() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    Vector<JavaType> vector0 = new Vector<JavaType>();
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
    Class<MapLikeType> class1 = MapLikeType.class;
    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class1);
    JavaType javaType1 = typeFactory0.moreSpecificType(typeBindings0.UNBOUND, javaType0);
    assertFalse(javaType1.isJavaLangObject());
}",0,assertTrue(javaType1.isJavaLangObject())
project,0,test2829,"public void test2829() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    assertNull(javaType0);
}",0,
project,0,test2930,"public void test2930() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, (JavaType) null);
    assertFalse(javaType0.isMapLikeType());
}",0,assertTrue(javaType0.isMapLikeType())
project,0,test3031,"public void test3031() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);
    assertSame(simpleType0, javaType0);
}",0,
project,0,test3132,"public void test3132() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    Class<HashMap> class0 = HashMap.class;
    MapType mapType0 = typeFactory0.constructRawMapType(class0);
    JavaType javaType0 = typeFactory0.moreSpecificType(mapType0, simpleType0);
    assertFalse(javaType0.isPrimitive());
}",0,assertTrue(javaType0.isPrimitive())
project,0,test3233,"public void test3233() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) null);
    assertTrue(javaType0.isMapLikeType());
}",0,assertTrue(javaType0.isMapLikeType())
project,0,test3334,"public void test3334() throws Throwable {
    Class<HashMap> class0 = HashMap.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) simpleType0);
    assertFalse(javaType0.isCollectionLikeType());
}",0,assertTrue(javaType0.isCollectionLikeType())
project,0,test3435,"public void test3435() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<LinkedList> class0 = LinkedList.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) null);
    assertTrue(javaType0.isConcrete());
}",0,
project,0,test3536,"public void test3536() throws Throwable {
    // Undeclared exception!
    try {
        TypeFactory.rawClass((Type) null);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Unrecognized Type: [null]
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test3637,"public void test3637() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ArrayList> class0 = ArrayList.class;
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[0];
    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
    JavaType javaType0 = typeFactory1.constructType((Type) class0);
    assertTrue(javaType0.isCollectionLikeType());
}",0,assertTrue(javaType0.isCollectionLikeType())
project,0,test3738,"public void test3738() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Object> class0 = Object.class;
    TypeParser typeParser0 = new TypeParser(typeFactory0);
    TypeModifier[] typeModifierArray0 = new TypeModifier[4];
    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
    // Undeclared exception!
    try {
        typeFactory1.constructType((Type) class0, (Class<?>) class0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test4344,"public void test4344() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Long> class0 = Long.TYPE;
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
    assertTrue(javaType0.isPrimitive());
}",0,assertTrue(javaType0.isPrimitive())
project,0,test4445,"public void test4445() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
    objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    SimpleModule simpleModule0 = new SimpleModule();
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleType0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test4546,"public void test4546() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
    assertFalse(javaType0.hasGenericTypes());
}",0,assertTrue(javaType0.hasGenericTypes())
project,0,test4647,"public void test4647() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
    ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, arrayList0);
    assertFalse(javaType0.useStaticType());
}",0,assertTrue(javaType0.useStaticType())
project,0,test4748,"public void test4748() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<ArrayList> class0 = ArrayList.class;
    Vector<JavaType> vector0 = new Vector<JavaType>();
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
    assertTrue(javaType0.hasGenericTypes());
}",0,assertTrue(javaType0.hasGenericTypes())
project,0,test4849,"public void test4849() throws Throwable {
    Class<HashMap> class0 = HashMap.class;
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = typeFactory0.constructType((Type) class0);
    Stack<JavaType> stack0 = new Stack<JavaType>();
    stack0.add(javaType0);
    JavaType javaType1 = typeFactory0._fromParameterizedClass(class0, stack0);
    assertFalse(javaType1.equals((Object) javaType0));
}",0,
project,0,test4950,"public void test4950() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<Object> class0 = Object.class;
    ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, arrayList0);
    assertFalse(javaType0.isCollectionLikeType());
}",0,
project,0,test5051,"public void test5051() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Vector<JavaType> vector0 = new Vector<JavaType>();
    vector0.add((JavaType) null);
    Class<LinkedList> class0 = LinkedList.class;
    // Undeclared exception!
    try {
        typeFactory0._fromParameterizedClass(class0, vector0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.CollectionLikeType"", e);
    }
}",0,
project,0,test5152,"public void test5152() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    JavaType javaType0 = TypeFactory.unknownType();
    Class<Object> class0 = Object.class;
    ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
    arrayList0.add(javaType0);
    // Undeclared exception!
    try {
        typeFactory0._fromParameterizedClass(class0, arrayList0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Parameter type mismatch for java.lang.Object (and target java.lang.Object): expected 0 parameters, was given 1
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
project,0,test5253,"public void test5253() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
    objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    SimpleModule simpleModule0 = new SimpleModule();
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleModule0);
    assertNotNull(objectReader0);
}",0,assertNotNull(objectReader0)
project,0,test5354,"public void test5354() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    JavaType javaType0 = typeFactory0._resolveVariableViaSubTypes((HierarchicType) null, ""+:"", (TypeBindings) null);
    assertFalse(javaType0.isPrimitive());
}",0,
project,0,test5455,"public void test5455() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    Class<ArrayType> class1 = ArrayType.class;
    HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
    assertNull(hierarchicType0);
}",0,
project,0,test5556,"public void test5556() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<CollectionType> class0 = CollectionType.class;
    Class<Object> class1 = Object.class;
    HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
    assertFalse(hierarchicType0.isGeneric());
}",0,
project,0,test5657,"public void test5657() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    // Undeclared exception!
    try {
        typeFactory0._arrayListSuperInterfaceChain((HierarchicType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.TypeFactory"", e);
    }
}",0,
