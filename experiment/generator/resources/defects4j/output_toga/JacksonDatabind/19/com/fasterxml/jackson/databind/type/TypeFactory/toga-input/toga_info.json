{
  "test1212" : {
    "methodSignature" : "public CollectionLikeType constructCollectionLikeType(Class<?> collectionClass, JavaType elementType)",
    "methodName" : "constructCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<CollectionType> class0 = CollectionType.class;\n    typeFactory0.constructCollectionLikeType(class0, (JavaType) null);\n}",
    "testName" : "test1212"
  },
  "test3435" : {
    "methodSignature" : "public boolean isConcrete()",
    "methodName" : "isConcrete",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3435() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<LinkedList> class0 = LinkedList.class;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) null);\n    javaType0.isConcrete();\n}",
    "testName" : "test3435"
  },
  "test2323" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;\n    typeFactory0.constructSpecializedType(simpleType0, class0);\n}",
    "testName" : "test2323"
  },
  "test4647" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4647() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;\n    ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();\n    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, arrayList0);\n    javaType0.useStaticType();\n}",
    "testName" : "test4647"
  },
  "test1313" : {
    "methodSignature" : "public JavaType constructFromCanonical(String canonical) throws IllegalArgumentException",
    "methodName" : "constructFromCanonical",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.constructFromCanonical(\"P'6ja,2_z2kLhc\");\n}",
    "testName" : "test1313"
  },
  "test2425" : {
    "methodSignature" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
    "methodName" : "findTypeParameters",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2425() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    Class<CollectionLikeType> class0 = CollectionLikeType.class;\n    JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);\n    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class0);\n}",
    "testName" : "test2425"
  },
  "test3536" : {
    "methodSignature" : "public static Class<?> rawClass(Type t)",
    "methodName" : "rawClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3536() throws Throwable {\n    TypeFactory.rawClass((Type) null);\n}",
    "testName" : "test3536"
  },
  "test2424" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    JavaType[] javaTypeArray0 = new JavaType[0];\n    Class<CollectionLikeType> class0 = CollectionLikeType.class;\n    JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);\n    JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class0);\n    javaType0.useStaticType();\n}",
    "testName" : "test2424"
  },
  "test4546" : {
    "methodSignature" : "public boolean hasGenericTypes()",
    "methodName" : "hasGenericTypes",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4546() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);\n    javaType0.hasGenericTypes();\n}",
    "testName" : "test4546"
  },
  "test5657" : {
    "methodSignature" : "protected synchronized HierarchicType _arrayListSuperInterfaceChain(HierarchicType current)",
    "methodName" : "_arrayListSuperInterfaceChain",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5657() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0._arrayListSuperInterfaceChain((HierarchicType) null);\n}",
    "testName" : "test5657"
  },
  "test1010" : {
    "methodSignature" : "public JavaType constructType(TypeReference<?> typeRef)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    typeFactory0.constructType((TypeReference<?>) null);\n}",
    "testName" : "test1010"
  },
  "test3233" : {
    "methodSignature" : "public boolean isMapLikeType()",
    "methodName" : "isMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3233() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<HashMap> class0 = HashMap.class;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) null);\n    javaType0.isMapLikeType();\n}",
    "testName" : "test3233"
  },
  "test2121" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<ArrayList> class0 = ArrayList.class;\n    JavaType javaType0 = typeFactory0._unknownType();\n    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);\n    javaType1.isPrimitive();\n}",
    "testName" : "test2121"
  },
  "test4445" : {
    "methodSignature" : "public ObjectReader readerForUpdating(Object valueToUpdate)",
    "methodName" : "readerForUpdating",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4445() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;\n    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;\n    objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);\n    SimpleModule simpleModule0 = new SimpleModule();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;\n    ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleType0);\n}",
    "testName" : "test4445"
  },
  "test5556" : {
    "methodSignature" : "public final boolean isGeneric()",
    "methodName" : "isGeneric",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5556() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<CollectionType> class0 = CollectionType.class;\n    Class<Object> class1 = Object.class;\n    HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);\n    hierarchicType0.isGeneric();\n}",
    "testName" : "test5556"
  },
  "test1111" : {
    "methodSignature" : "public abstract boolean equals(Object o)",
    "methodName" : "equals",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<HashMap> class0 = HashMap.class;\n    MapType mapType0 = typeFactory0.constructRawMapType(class0);\n    Vector<JavaType> vector0 = new Vector<JavaType>();\n    Class<ArrayList> class1 = ArrayList.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) mapType0);\n    vector0.add((JavaType) collectionType0);\n    vector0.add((JavaType) collectionType0);\n    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);\n    javaType0.equals((Object) mapType0);\n}",
    "testName" : "test1111"
  },
  "test3334" : {
    "methodSignature" : "public boolean isCollectionLikeType()",
    "methodName" : "isCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3334() throws Throwable {\n    Class<HashMap> class0 = HashMap.class;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) simpleType0);\n    javaType0.isCollectionLikeType();\n}",
    "testName" : "test3334"
  },
  "test2222" : {
    "methodSignature" : "public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass)",
    "methodName" : "constructSpecializedType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2222() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;\n    Class<ArrayType> class0 = ArrayType.class;\n    typeFactory0.constructSpecializedType(simpleType0, class0);\n}",
    "testName" : "test2222"
  },
  "test4344" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4344() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Long> class0 = Long.TYPE;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);\n    javaType0.isPrimitive();\n}",
    "testName" : "test4344"
  },
  "test5455" : {
    "methodSignature" : "protected HierarchicType _findSuperInterfaceChain(Type currentType, Class<?> target)",
    "methodName" : "_findSuperInterfaceChain",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5455() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<HashMap> class0 = HashMap.class;\n    Class<ArrayType> class1 = ArrayType.class;\n    HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);\n}",
    "testName" : "test5455"
  },
  "test011" : {
    "methodSignature" : "public <T extends JsonNode> T valueToTree(Object fromValue) throws IllegalArgumentException",
    "methodName" : "valueToTree",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    Class<String> class0 = String.class;\n    MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);\n    BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);\n    objectMapper0.valueToTree((Object) basicBeanDescription0);\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public boolean isAbstract()",
    "methodName" : "isAbstract",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);\n    mapType0.isAbstract();\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public void clearCache()",
    "methodName" : "clearCache",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    typeFactory0.clearCache();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<LinkedList> class0 = LinkedList.class;\n    CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);\n    collectionType0.isJavaLangObject();\n}",
    "testName" : "test077"
  },
  "test1616" : {
    "methodSignature" : "public TypeFactory withModifier(TypeModifier mod)",
    "methodName" : "withModifier",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);\n}",
    "testName" : "test1616"
  },
  "test2728" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2728() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<HashMap> class0 = HashMap.class;\n    Vector<JavaType> vector0 = new Vector<JavaType>();\n    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);\n    Class<MapLikeType> class1 = MapLikeType.class;\n    TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class1);\n    JavaType javaType1 = typeFactory0.moreSpecificType(typeBindings0.UNBOUND, javaType0);\n    javaType1.isJavaLangObject();\n}",
    "testName" : "test2728"
  },
  "test2829" : {
    "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
    "methodName" : "moreSpecificType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2829() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);\n}",
    "testName" : "test2829"
  },
  "test1414" : {
    "methodSignature" : "public final boolean useStaticType()",
    "methodName" : "useStaticType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ArrayType> class0 = ArrayType.class;\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;\n    MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);\n    mapLikeType0.useStaticType();\n}",
    "testName" : "test1414"
  },
  "test2526" : {
    "methodSignature" : "public JavaType[] findTypeParameters(JavaType type, Class<?> expType)",
    "methodName" : "findTypeParameters",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2526() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<String> class0 = String.class;\n    Class<SimpleType> class1 = SimpleType.class;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class1);\n    typeFactory0.findTypeParameters(javaType0, class1);\n}",
    "testName" : "test2526"
  },
  "test3637" : {
    "methodSignature" : "public boolean isCollectionLikeType()",
    "methodName" : "isCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3637() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ArrayList> class0 = ArrayList.class;\n    TypeParser typeParser0 = new TypeParser(typeFactory0);\n    TypeModifier[] typeModifierArray0 = new TypeModifier[0];\n    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);\n    JavaType javaType0 = typeFactory1.constructType((Type) class0);\n    javaType0.isCollectionLikeType();\n}",
    "testName" : "test3637"
  },
  "test4849" : {
    "methodSignature" : "public abstract boolean equals(Object o)",
    "methodName" : "equals",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4849() throws Throwable {\n    Class<HashMap> class0 = HashMap.class;\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0);\n    Stack<JavaType> stack0 = new Stack<JavaType>();\n    stack0.add(javaType0);\n    JavaType javaType1 = typeFactory0._fromParameterizedClass(class0, stack0);\n    javaType1.equals((Object) javaType0);\n}",
    "testName" : "test4849"
  },
  "test1515" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;\n    ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);\n    arrayType0.isPrimitive();\n}",
    "testName" : "test1515"
  },
  "test3738" : {
    "methodSignature" : "public JavaType constructType(Type type, Class<?> context)",
    "methodName" : "constructType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3738() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<Object> class0 = Object.class;\n    TypeParser typeParser0 = new TypeParser(typeFactory0);\n    TypeModifier[] typeModifierArray0 = new TypeModifier[4];\n    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);\n    typeFactory1.constructType((Type) class0, (Class<?>) class0);\n}",
    "testName" : "test3738"
  },
  "test4748" : {
    "methodSignature" : "public boolean hasGenericTypes()",
    "methodName" : "hasGenericTypes",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4748() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<ArrayList> class0 = ArrayList.class;\n    Vector<JavaType> vector0 = new Vector<JavaType>();\n    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);\n    javaType0.hasGenericTypes();\n}",
    "testName" : "test4748"
  },
  "test3031" : {
    "methodSignature" : "public JavaType moreSpecificType(JavaType type1, JavaType type2)",
    "methodName" : "moreSpecificType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3031() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;\n    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);\n}",
    "testName" : "test3031"
  },
  "test5354" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5354() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    JavaType javaType0 = typeFactory0._resolveVariableViaSubTypes((HierarchicType) null, \"+:\", (TypeBindings) null);\n    javaType0.isPrimitive();\n}",
    "testName" : "test5354"
  },
  "test3132" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3132() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;\n    Class<HashMap> class0 = HashMap.class;\n    MapType mapType0 = typeFactory0.constructRawMapType(class0);\n    JavaType javaType0 = typeFactory0.moreSpecificType(mapType0, simpleType0);\n    javaType0.isPrimitive();\n}",
    "testName" : "test3132"
  },
  "test2020" : {
    "methodSignature" : "public final boolean isJavaLangObject()",
    "methodName" : "isJavaLangObject",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2020() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<ArrayList> class0 = ArrayList.class;\n    JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);\n    JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);\n    javaType1.isJavaLangObject();\n}",
    "testName" : "test2020"
  },
  "test5253" : {
    "methodSignature" : "public ObjectReader readerForUpdating(Object valueToUpdate)",
    "methodName" : "readerForUpdating",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5253() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;\n    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;\n    objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);\n    SimpleModule simpleModule0 = new SimpleModule();\n    ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleModule0);\n}",
    "testName" : "test5253"
  },
  "test5152" : {
    "methodSignature" : "protected JavaType _fromParameterizedClass(Class<?> clz, List<JavaType> paramTypes)",
    "methodName" : "_fromParameterizedClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5152() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    JavaType javaType0 = TypeFactory.unknownType();\n    Class<Object> class0 = Object.class;\n    ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();\n    arrayList0.add(javaType0);\n    typeFactory0._fromParameterizedClass(class0, arrayList0);\n}",
    "testName" : "test5152"
  },
  "test5051" : {
    "methodSignature" : "protected JavaType _fromParameterizedClass(Class<?> clz, List<JavaType> paramTypes)",
    "methodName" : "_fromParameterizedClass",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5051() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Vector<JavaType> vector0 = new Vector<JavaType>();\n    vector0.add((JavaType) null);\n    Class<LinkedList> class0 = LinkedList.class;\n    typeFactory0._fromParameterizedClass(class0, vector0);\n}",
    "testName" : "test5051"
  },
  "test2930" : {
    "methodSignature" : "public boolean isMapLikeType()",
    "methodName" : "isMapLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2930() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;\n    JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, (JavaType) null);\n    javaType0.isMapLikeType();\n}",
    "testName" : "test2930"
  },
  "test4950" : {
    "methodSignature" : "public boolean isCollectionLikeType()",
    "methodName" : "isCollectionLikeType",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4950() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Object> class0 = Object.class;\n    ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();\n    JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, arrayList0);\n    javaType0.isCollectionLikeType();\n}",
    "testName" : "test4950"
  },
  "test022" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<Object> class0 = Object.class;\n    JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);\n    javaType0.isPrimitive();\n}",
    "testName" : "test022"
  },
  "test088" : {
    "methodSignature" : "public final boolean isPrimitive()",
    "methodName" : "isPrimitive",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    Class<ArrayList> class0 = ArrayList.class;\n    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);\n    collectionLikeType0.isPrimitive();\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public TypeFactory withModifier(TypeModifier mod)",
    "methodName" : "withModifier",
    "className" : "com.fasterxml.jackson.databind.type.TypeFactory",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.instance;\n    TypeParser typeParser0 = new TypeParser(typeFactory0);\n    TypeModifier[] typeModifierArray0 = new TypeModifier[0];\n    TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);\n    TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());\n    TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);\n}",
    "testName" : "test1818"
  }
}