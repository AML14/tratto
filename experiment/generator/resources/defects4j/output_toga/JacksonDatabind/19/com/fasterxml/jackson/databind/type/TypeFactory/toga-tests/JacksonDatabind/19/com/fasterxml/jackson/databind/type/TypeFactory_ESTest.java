/*
 * This file was automatically generated by EvoSuite
 * Wed Mar 27 23:56:20 GMT 2024
 */
package com.fasterxml.jackson.databind.type;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.ClassIntrospector;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.type.ArrayType;
import com.fasterxml.jackson.databind.type.CollectionLikeType;
import com.fasterxml.jackson.databind.type.CollectionType;
import com.fasterxml.jackson.databind.type.HierarchicType;
import com.fasterxml.jackson.databind.type.MapLikeType;
import com.fasterxml.jackson.databind.type.MapType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeBindings;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeModifier;
import com.fasterxml.jackson.databind.type.TypeParser;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class TypeFactory_ESTest extends TypeFactory_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test000() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructRawCollectionType(class0);
        collectionType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test011() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        ObjectMapper objectMapper0 = new ObjectMapper();
        BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
        Class<String> class0 = String.class;
        MapLikeType mapLikeType0 = typeFactory0.constructRawMapLikeType(class0);
        BasicBeanDescription basicBeanDescription0 = basicClassIntrospector0.forCreation((DeserializationConfig) null, mapLikeType0, (ClassIntrospector.MixInResolver) null);
        objectMapper0.valueToTree((Object) basicBeanDescription0);
    }

    @Test(timeout = 4000)
    public void test022() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        JavaType javaType0 = typeFactory0.uncheckedSimpleType(class0);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test033() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
        mapType0.isAbstract();
        assertTrue(mapType0.isAbstract());
    }

    @Test(timeout = 4000)
    public void test044() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<SimpleModule> class0 = SimpleModule.class;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType(class0, class0, class0);
        Class<?> class1 = TypeFactory.rawClass(mapLikeType0);
        class1.isArray();
    }

    @Test(timeout = 4000)
    public void test055() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0.clearCache();
    }

    @Test(timeout = 4000)
    public void test066() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<InputStream> class0 = InputStream.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructRawCollectionLikeType(class0);
        collectionLikeType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test077() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<LinkedList> class0 = LinkedList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType(class0, class0);
        collectionType0.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test088() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType(class0, class0);
        collectionLikeType0.isPrimitive();
        assertTrue(collectionLikeType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test099() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<SimpleType> class0 = SimpleType.class;
        ArrayType arrayType0 = typeFactory0.constructArrayType(class0);
        arrayType0.containedTypeCount();
    }

    @Test(timeout = 4000)
    public void test1010() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructType((TypeReference<?>) null);
    }

    @Test(timeout = 4000)
    public void test1111() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        Vector<JavaType> vector0 = new Vector<JavaType>();
        Class<ArrayList> class1 = ArrayList.class;
        CollectionType collectionType0 = typeFactory0.constructCollectionType((Class<? extends Collection>) class1, (JavaType) mapType0);
        vector0.add((JavaType) collectionType0);
        vector0.add((JavaType) collectionType0);
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
        javaType0.equals((Object) mapType0);
    }

    @Test(timeout = 4000)
    public void test1212() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<CollectionType> class0 = CollectionType.class;
        typeFactory0.constructCollectionLikeType(class0, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test1313() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        typeFactory0.constructFromCanonical("P'6ja,2_z2kLhc");
    }

    @Test(timeout = 4000)
    public void test1414() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayType> class0 = ArrayType.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
        MapLikeType mapLikeType0 = typeFactory0.constructMapLikeType((Class<?>) class0, (JavaType) simpleType0, (JavaType) simpleType0);
        mapLikeType0.useStaticType();
        assertTrue(mapLikeType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test1515() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = (SimpleType) TypeBindings.UNBOUND;
        ArrayType arrayType0 = typeFactory0.constructArrayType((JavaType) simpleType0);
        arrayType0.isPrimitive();
        assertTrue(arrayType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test1616() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory1 = typeFactory0.withModifier(typeModifier0);
    }

    @Test(timeout = 4000)
    public void test1717() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeFactory typeFactory1 = typeFactory0.withModifier((TypeModifier) null);
        typeFactory1.equals((Object) typeFactory0);
    }

    @Test(timeout = 4000)
    public void test1818() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        TypeModifier typeModifier0 = mock(TypeModifier.class, new ViolatedAssumptionAnswer());
        TypeFactory typeFactory2 = typeFactory1.withModifier(typeModifier0);
    }

    @Test(timeout = 4000)
    public void test1919() throws Throwable {
        Class<Boolean> class0 = Boolean.TYPE;
        Class<?> class1 = TypeFactory.rawClass(class0);
        class1.isSynthetic();
    }

    @Test(timeout = 4000)
    public void test2020() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isJavaLangObject();
    }

    @Test(timeout = 4000)
    public void test2121() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        JavaType javaType0 = typeFactory0._unknownType();
        JavaType javaType1 = typeFactory0.constructSpecializedType(javaType0, class0);
        javaType1.isPrimitive();
        assertTrue(javaType1.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test2222() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        Class<ArrayType> class0 = ArrayType.class;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test2323() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
        typeFactory0.constructSpecializedType(simpleType0, class0);
    }

    @Test(timeout = 4000)
    public void test2424() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType[] javaTypeArray0 = new JavaType[0];
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
        JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class0);
        javaType0.useStaticType();
        assertTrue(javaType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test2425() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType[] javaTypeArray0 = new JavaType[0];
        Class<CollectionLikeType> class0 = CollectionLikeType.class;
        JavaType javaType0 = typeFactory0.constructParametricType(class0, javaTypeArray0);
        JavaType[] javaTypeArray1 = typeFactory0.findTypeParameters(javaType0, class0);
    }

    @Test(timeout = 4000)
    public void test2526() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        Class<SimpleType> class1 = SimpleType.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class1);
        typeFactory0.findTypeParameters(javaType0, class1);
    }

    @Test(timeout = 4000)
    public void test2627() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ObjectReader> class0 = ObjectReader.class;
        Class<Object> class1 = Object.class;
        JavaType[] javaTypeArray0 = typeFactory0.findTypeParameters(class0, class1);
    }

    @Test(timeout = 4000)
    public void test2728() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        Vector<JavaType> vector0 = new Vector<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
        Class<MapLikeType> class1 = MapLikeType.class;
        TypeBindings typeBindings0 = new TypeBindings(typeFactory0, class1);
        JavaType javaType1 = typeFactory0.moreSpecificType(typeBindings0.UNBOUND, javaType0);
        javaType1.isJavaLangObject();
        assertTrue(javaType1.isJavaLangObject());
    }

    @Test(timeout = 4000)
    public void test2829() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.moreSpecificType((JavaType) null, (JavaType) null);
    }

    @Test(timeout = 4000)
    public void test2930() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, (JavaType) null);
        javaType0.isMapLikeType();
        assertTrue(javaType0.isMapLikeType());
    }

    @Test(timeout = 4000)
    public void test3031() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        JavaType javaType0 = typeFactory0.moreSpecificType(simpleType0, simpleType0);
    }

    @Test(timeout = 4000)
    public void test3132() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        Class<HashMap> class0 = HashMap.class;
        MapType mapType0 = typeFactory0.constructRawMapType(class0);
        JavaType javaType0 = typeFactory0.moreSpecificType(mapType0, simpleType0);
        javaType0.isPrimitive();
        assertTrue(javaType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test3233() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) null);
        javaType0.isMapLikeType();
        assertTrue(javaType0.isMapLikeType());
    }

    @Test(timeout = 4000)
    public void test3334() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) simpleType0);
        javaType0.isCollectionLikeType();
        assertTrue(javaType0.isCollectionLikeType());
    }

    @Test(timeout = 4000)
    public void test3435() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<LinkedList> class0 = LinkedList.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (JavaType) null);
        javaType0.isConcrete();
    }

    @Test(timeout = 4000)
    public void test3536() throws Throwable {
        TypeFactory.rawClass((Type) null);
    }

    @Test(timeout = 4000)
    public void test3637() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[0];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        JavaType javaType0 = typeFactory1.constructType((Type) class0);
        javaType0.isCollectionLikeType();
        assertTrue(javaType0.isCollectionLikeType());
    }

    @Test(timeout = 4000)
    public void test3738() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Object> class0 = Object.class;
        TypeParser typeParser0 = new TypeParser(typeFactory0);
        TypeModifier[] typeModifierArray0 = new TypeModifier[4];
        TypeFactory typeFactory1 = new TypeFactory(typeParser0, typeModifierArray0);
        typeFactory1.constructType((Type) class0, (Class<?>) class0);
    }

    @Test(timeout = 4000)
    public void test3839() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<String> class0 = String.class;
        Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 1);
        classArray0[0] = class0;
        typeFactory0.constructParametricType(class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test3940() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        Class<CollectionType>[] classArray0 = (Class<CollectionType>[]) Array.newInstance(Class.class, 0);
        typeFactory0.constructParametrizedType(class0, class0, classArray0);
    }

    @Test(timeout = 4000)
    public void test4041() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<HashMap> class0 = HashMap.class;
        JavaType[] javaTypeArray0 = new JavaType[2];
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4142() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        JavaType[] javaTypeArray0 = new JavaType[1];
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4243() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ArrayList> class0 = ArrayList.class;
        JavaType[] javaTypeArray0 = new JavaType[0];
        typeFactory0.constructParametrizedType(class0, class0, javaTypeArray0);
    }

    @Test(timeout = 4000)
    public void test4344() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<Long> class0 = Long.TYPE;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        javaType0.isPrimitive();
        assertTrue(javaType0.isPrimitive());
    }

    @Test(timeout = 4000)
    public void test4445() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.FIELD;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
        objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        SimpleModule simpleModule0 = new SimpleModule();
        SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleType0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test4546() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        JavaType javaType0 = typeFactory0.constructType((Type) class0, (Class<?>) class0);
        javaType0.hasGenericTypes();
        assertTrue(javaType0.hasGenericTypes());
    }

    @Test(timeout = 4000)
    public void test4647() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ObjectMapper.DefaultTyping> class0 = ObjectMapper.DefaultTyping.class;
        ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, arrayList0);
        javaType0.useStaticType();
        assertTrue(javaType0.useStaticType());
    }

    @Test(timeout = 4000)
    public void test4748() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<ArrayList> class0 = ArrayList.class;
        Vector<JavaType> vector0 = new Vector<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, vector0);
        javaType0.hasGenericTypes();
        assertTrue(javaType0.hasGenericTypes());
    }

    @Test(timeout = 4000)
    public void test4849() throws Throwable {
        Class<HashMap> class0 = HashMap.class;
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = typeFactory0.constructType((Type) class0);
        Stack<JavaType> stack0 = new Stack<JavaType>();
        stack0.add(javaType0);
        JavaType javaType1 = typeFactory0._fromParameterizedClass(class0, stack0);
        javaType1.equals((Object) javaType0);
    }

    @Test(timeout = 4000)
    public void test4950() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<Object> class0 = Object.class;
        ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
        JavaType javaType0 = typeFactory0._fromParameterizedClass(class0, arrayList0);
        javaType0.isCollectionLikeType();
    }

    @Test(timeout = 4000)
    public void test5051() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Vector<JavaType> vector0 = new Vector<JavaType>();
        vector0.add((JavaType) null);
        Class<LinkedList> class0 = LinkedList.class;
        typeFactory0._fromParameterizedClass(class0, vector0);
    }

    @Test(timeout = 4000)
    public void test5152() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        JavaType javaType0 = TypeFactory.unknownType();
        Class<Object> class0 = Object.class;
        ArrayList<JavaType> arrayList0 = new ArrayList<JavaType>();
        arrayList0.add(javaType0);
        typeFactory0._fromParameterizedClass(class0, arrayList0);
    }

    @Test(timeout = 4000)
    public void test5253() throws Throwable {
        ObjectMapper objectMapper0 = new ObjectMapper();
        PropertyAccessor propertyAccessor0 = PropertyAccessor.ALL;
        JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.NON_PRIVATE;
        objectMapper0.setVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
        SimpleModule simpleModule0 = new SimpleModule();
        ObjectReader objectReader0 = objectMapper0.readerForUpdating(simpleModule0);
        assertNotNull(objectReader0);
    }

    @Test(timeout = 4000)
    public void test5354() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        JavaType javaType0 = typeFactory0._resolveVariableViaSubTypes((HierarchicType) null, "+:", (TypeBindings) null);
        javaType0.isPrimitive();
    }

    @Test(timeout = 4000)
    public void test5455() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<HashMap> class0 = HashMap.class;
        Class<ArrayType> class1 = ArrayType.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
    }

    @Test(timeout = 4000)
    public void test5556() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.instance;
        Class<CollectionType> class0 = CollectionType.class;
        Class<Object> class1 = Object.class;
        HierarchicType hierarchicType0 = typeFactory0._findSuperInterfaceChain(class0, class1);
        hierarchicType0.isGeneric();
    }

    @Test(timeout = 4000)
    public void test5657() throws Throwable {
        TypeFactory typeFactory0 = TypeFactory.defaultInstance();
        typeFactory0._arrayListSuperInterfaceChain((HierarchicType) null);
    }
}
