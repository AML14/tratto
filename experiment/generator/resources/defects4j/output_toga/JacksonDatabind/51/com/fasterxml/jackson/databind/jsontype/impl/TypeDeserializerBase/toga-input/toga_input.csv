focal_method,test_prefix,docstring
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test000() throws Throwable {
    Class<ObjectInputStream> class0 = ObjectInputStream.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, ""vze v`s0_X<[0CB"", true, simpleType0, jsonTypeInfo_As0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    TokenBuffer tokenBuffer0 = new TokenBuffer(objectMapper0, true);
    objectMapper0.writeValue((JsonGenerator) tokenBuffer0, (Object) asPropertyTypeDeserializer0);
    assertEquals(""vze v`s0_X<[0CB"", asPropertyTypeDeserializer0.getPropertyName());
}",""
"@Override
public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append('[').append(getClass().getName());
    sb.append(""; base-type:"").append(_baseType);
    sb.append(""; id-resolver: "").append(_idResolver);
    sb.append(']');
    return sb.toString();
}","public void test011() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""g"", false, (JavaType) null);
    String string0 = asWrapperTypeDeserializer0.toString();
    assertEquals(""[com.fasterxml.jackson.databind.jsontype.impl.AsWrapperTypeDeserializer; base-type:null; id-resolver: null]"", string0);
}",""
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test012() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""g"", false, (JavaType) null);
    String string0 = asWrapperTypeDeserializer0.toString();
    assertEquals(""g"", asWrapperTypeDeserializer0.getPropertyName());
}",""
"public String baseTypeName() {
    return _baseType.getRawClass().getName();
}","public void test023() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""g"", false, (JavaType) null);
    // Undeclared exception!
    try {
        asWrapperTypeDeserializer0.baseTypeName();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase"", e);
    }
}",""
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test034() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""JSON"", true, (JavaType) null);
    asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0);
    assertEquals(""JSON"", asWrapperTypeDeserializer0.getPropertyName());
}",""
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test056() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, (String) null, false, (JavaType) null);
    assertEquals("""", asWrapperTypeDeserializer0.getPropertyName());
}",""
"@Override
public Class<?> getDefaultImpl() {
    return (_defaultImpl == null) ? null : _defaultImpl.getRawClass();
}","public void test067() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Map> class0 = Map.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, ""com.fasterxml.jackson.databind.deser.AbstractDeserializer"", false, (JavaType) null);
    Class<?> class1 = asExternalTypeDeserializer0.getDefaultImpl();
    assertNull(class1);
}",""
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test068() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<Map> class0 = Map.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class0, class0);
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(mapType0, typeFactory0);
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(mapType0, classNameIdResolver0, ""com.fasterxml.jackson.databind.deser.AbstractDeserializer"", false, (JavaType) null);
    Class<?> class1 = asExternalTypeDeserializer0.getDefaultImpl();
    assertEquals(""com.fasterxml.jackson.databind.deser.AbstractDeserializer"", asExternalTypeDeserializer0.getPropertyName());
}",""
"protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId) throws IOException {
    JsonDeserializer<Object> deser;
    if (typeId == null) {
        /* 04-May-2014, tatu: Should error be obligatory, or should there be another method
             *   for ""try to deserialize with native tpye id""?
             */
        deser = _findDefaultImplDeserializer(ctxt);
        if (deser == null) {
            ctxt.reportMappingException(""No (native) type id found when one was expected for polymorphic type handling"");
            return null;
        }
    } else {
        String typeIdStr = (typeId instanceof String) ? (String) typeId : String.valueOf(typeId);
        deser = _findDeserializer(ctxt, typeIdStr);
    }
    return deser.deserialize(jp, ctxt);
}","public void test079() throws Throwable {
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""JSON"", true, (JavaType) null);
    // Undeclared exception!
    try {
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, jsonParser0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase"", e);
    }
}","/**
 * Helper method called when {@link JsonParser} indicates that it can use
 * so-called native type ids, and such type id has been found.
 *
 * @since 2.4
 */"
"protected final JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt) throws IOException {
    /* 06-Feb-2013, tatu: As per [databind#148], consider default implementation value of
         *   {@link java.lang.Void} to mean ""serialize as null""; as well as DeserializationFeature
         *   to do swift mapping to null
         */
    if (_defaultImpl == null) {
        if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) {
            return NullifyingDeserializer.instance;
        }
        return null;
    }
    Class<?> raw = _defaultImpl.getRawClass();
    if (ClassUtil.isBogusClass(raw)) {
        return NullifyingDeserializer.instance;
    }
    synchronized (_defaultImpl) {
        if (_defaultImplDeserializer == null) {
            _defaultImplDeserializer = ctxt.findContextualValueDeserializer(_defaultImpl, _property);
        }
        return _defaultImplDeserializer;
    }
}","public void test0810() throws Throwable {
    Class<BeanDeserializer> class0 = BeanDeserializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, (TypeIdResolver) null, ""; base-type:"", true, simpleType0);
    // Undeclared exception!
    try {
        asWrapperTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase"", e);
    }
}",""
"@Override
public final String getPropertyName() {
    return _typePropertyName;
}","public void test0911() throws Throwable {
    Class<BeanDeserializer> class0 = BeanDeserializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(simpleType0, minimalClassNameIdResolver0, ""uT)4++` S]M&3ry"", false, simpleType0);
    CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 0);
    asWrapperTypeDeserializer0._defaultImplDeserializer = (JsonDeserializer<Object>) coreXMLDeserializers_Std0;
    asWrapperTypeDeserializer0._findDefaultImplDeserializer((DeserializationContext) null);
    assertEquals(""uT)4++` S]M&3ry"", asWrapperTypeDeserializer0.getPropertyName());
}",""
"protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId) throws IOException {
    JsonDeserializer<Object> deser;
    if (typeId == null) {
        /* 04-May-2014, tatu: Should error be obligatory, or should there be another method
             *   for ""try to deserialize with native tpye id""?
             */
        deser = _findDefaultImplDeserializer(ctxt);
        if (deser == null) {
            ctxt.reportMappingException(""No (native) type id found when one was expected for polymorphic type handling"");
            return null;
        }
    } else {
        String typeIdStr = (typeId instanceof String) ? (String) typeId : String.valueOf(typeId);
        deser = _findDeserializer(ctxt, typeIdStr);
    }
    return deser.deserialize(jp, ctxt);
}","public void test1012() throws Throwable {
    AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer((JavaType) null, (TypeIdResolver) null, ""xzHOFZ:r6gB*|<a9`"", false, (JavaType) null);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""xzHOFZ:r6gB*|<a9`"");
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        asWrapperTypeDeserializer0._deserializeWithNativeTypeId(jsonParser0, defaultDeserializationContext_Impl0, ""xzHOFZ:r6gB*|<a9`"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase"", e);
    }
}","/**
 * Helper method called when {@link JsonParser} indicates that it can use
 * so-called native type ids, and such type id has been found.
 *
 * @since 2.4
 */"
"protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId, TypeIdResolver idResolver, JavaType baseType) throws IOException {
    String extraDesc;
    if (idResolver instanceof TypeIdResolverBase) {
        extraDesc = ((TypeIdResolverBase) idResolver).getDescForKnownTypeIds();
        if (extraDesc == null) {
            extraDesc = ""known type ids are not statically known"";
        } else {
            extraDesc = ""known type ids = "" + extraDesc;
        }
    } else {
        extraDesc = null;
    }
    return ctxt.handleUnknownTypeId(_baseType, typeId, idResolver, extraDesc);
}","public void test1113() throws Throwable {
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer((JavaType) null, (TypeIdResolver) null, """", true, (JavaType) null);
    // Undeclared exception!
    try {
        asPropertyTypeDeserializer0._handleUnknownTypeId((DeserializationContext) null, """", (TypeIdResolver) null, (JavaType) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeDeserializerBase"", e);
    }
}","/**
 * Helper method called when given type id can not be resolved into
 * concrete deserializer either directly (using given {@link  TypeIdResolver}),
 * or using default type.
 * Default implementation simply throws a {@link com.fasterxml.jackson.databind.JsonMappingException} to
 * indicate the problem; sub-classes may choose
 *
 * @return If it is possible to resolve type id into a {@link JsonDeserializer}
 *   should return that deserializer; otherwise throw an exception to indicate
 *   the problem.
 *
 * @since 2.8
 */"
"protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId, TypeIdResolver idResolver, JavaType baseType) throws IOException {
    String extraDesc;
    if (idResolver instanceof TypeIdResolverBase) {
        extraDesc = ((TypeIdResolverBase) idResolver).getDescForKnownTypeIds();
        if (extraDesc == null) {
            extraDesc = ""known type ids are not statically known"";
        } else {
            extraDesc = ""known type ids = "" + extraDesc;
        }
    } else {
        extraDesc = null;
    }
    return ctxt.handleUnknownTypeId(_baseType, typeId, idResolver, extraDesc);
}","public void test1214() throws Throwable {
    Class<ObjectInputStream> class0 = ObjectInputStream.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    MinimalClassNameIdResolver minimalClassNameIdResolver0 = new MinimalClassNameIdResolver(simpleType0, typeFactory0);
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(simpleType0, minimalClassNameIdResolver0, ""vze v`s0_X<[0CB"", true, simpleType0, jsonTypeInfo_As0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    DeserializationContext deserializationContext0 = objectMapper0.getDeserializationContext();
    // Undeclared exception!
    try {
        asPropertyTypeDeserializer0._handleUnknownTypeId(deserializationContext0, ""vze v`s0_X<[0CB"", minimalClassNameIdResolver0, simpleType0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}","/**
 * Helper method called when given type id can not be resolved into
 * concrete deserializer either directly (using given {@link  TypeIdResolver}),
 * or using default type.
 * Default implementation simply throws a {@link com.fasterxml.jackson.databind.JsonMappingException} to
 * indicate the problem; sub-classes may choose
 *
 * @return If it is possible to resolve type id into a {@link JsonDeserializer}
 *   should return that deserializer; otherwise throw an exception to indicate
 *   the problem.
 *
 * @since 2.8
 */"
