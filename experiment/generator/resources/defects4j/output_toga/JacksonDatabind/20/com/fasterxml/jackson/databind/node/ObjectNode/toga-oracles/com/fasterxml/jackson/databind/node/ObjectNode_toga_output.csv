project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.removeAll();
    assertFalse(objectNode1.isBigInteger());
}",0,assertFalse(objectNode1.isBigInteger())
project,0,test011,"public void test011() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    JsonNode jsonNode0 = objectNode0.putAll(objectNode0);
    assertEquals(0, jsonNode0.size());
}",0,
project,0,test022,"public void test022() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    Iterator<String> iterator0 = objectNode0.fieldNames();
    assertNotNull(iterator0);
}",0,assertNotNull(iterator0)
project,0,test044,"public void test044() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
    objectNode0.hashCode();
}",0,
project,0,test055,"public void test055() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
    HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
    // Undeclared exception!
    try {
        objectNode0._at((JsonPointer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.node.ObjectNode"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    JsonNode jsonNode0 = objectNode0.without(""LpN@SVwK` vp{;"");
    assertNull(jsonNode0.textValue());
}",0,assertNotNull(jsonNode0.textValue())
project,0,test099,"public void test099() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    ObjectNode objectNode1 = objectNode0.putObject(""kC]()QA-"");
    assertEquals(0, objectNode1.size());
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    boolean boolean0 = objectNode0.hasNonNull(""LpN@SVwK` vp{;"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1111,"public void test1111() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.put(""<j]gXCuj8z^ "", (-2016056520));
    assertEquals(1, objectNode1.size());
}",0,"assertEquals(0, objectNode1.size())"
project,0,test1313,"public void test1313() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    HashMap<String, BigIntegerNode> hashMap0 = new HashMap<String, BigIntegerNode>();
    JsonNode jsonNode0 = objectNode0.putAll((Map<String, ? extends JsonNode>) hashMap0);
    assertFalse(jsonNode0.isFloat());
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    TreeSet<String> treeSet0 = new TreeSet<String>();
    ObjectNode objectNode1 = objectNode0.remove((Collection<String>) treeSet0);
    assertFalse(objectNode1.isLong());
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    JsonNode jsonNode0 = objectNode0.remove(""zT4YsA$\""1Q'Zj/2)*j"");
    assertNull(jsonNode0);
}",0,assertNotNull(jsonNode0)
project,0,test1616,"public void test1616() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    boolean boolean0 = objectNode0.has((-1554429048));
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1717,"public void test1717() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    ObjectNode objectNode1 = objectNode0.put(""LpN@SVwK` vp{;"", 0L);
    JsonNode jsonNode0 = objectNode1.findValue(""JSON"");
    assertNull(jsonNode0);
}",0,assertNotNull(jsonNode0)
project,0,test1818,"public void test1818() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    List<String> list0 = objectNode0.findValuesAsText(""#-H*<g;}-e"");
    ObjectNode objectNode1 = objectNode0.retain((Collection<String>) list0);
    assertNull(objectNode1.textValue());
}",0,assertNotNull(objectNode1.textValue())
project,0,test2021,"public void test2021() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
    ObjectNode objectNode1 = new ObjectNode(jsonNodeFactory0);
    boolean boolean0 = objectNode1.equals(objectNode0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test2122,"public void test2122() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    ObjectNode objectNode1 = objectNode0.put("" <"", false);
    assertFalse(objectNode1.isDouble());
}",0,assertFalse(objectNode1.isDouble())
project,0,test2324,"public void test2324() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.put(""b_7~AsxM"", (-1.0F));
    assertFalse(objectNode1.booleanValue());
}",0,assertFalse(objectNode1.booleanValue())
project,0,test2627,"public void test2627() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    TextNode textNode0 = jsonNodeFactory0.textNode(""ULHq4{{gcI"");
    ObjectNode objectNode1 = objectNode0.putPOJO(""ULHq4{{gcI"", textNode0);
    assertSame(objectNode1, objectNode0);
}",0,
project,0,test2728,"public void test2728() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.putNull(""+"");
    ObjectNode objectNode2 = objectNode1.deepCopy();
    assertNotSame(objectNode2, objectNode0);
}",1,
project,0,test2729,"public void test2729() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.putNull(""+"");
    ObjectNode objectNode2 = objectNode1.deepCopy();
    assertEquals(1, objectNode2.size());
}",0,"assertEquals(0, objectNode2.size())"
project,0,test2931,"public void test2931() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(false);
    HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
    ObjectNode objectNode1 = objectNode0.with("",}w({qq]BNqT[1"");
    JsonNode jsonNode0 = objectNode0.path("",}w({qq]BNqT[1"");
    assertSame(jsonNode0, objectNode1);
}",0,
project,0,test3032,"public void test3032() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    objectNode0.putNull((String) null);
    // Undeclared exception!
    try {
        objectNode0.with((String) null);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Property 'null' has value that is not of type ObjectNode (but com.fasterxml.jackson.databind.node.NullNode)
        //
        verifyException(""com.fasterxml.jackson.databind.node.ObjectNode"", e);
    }
}",1,
project,0,test3133,"public void test3133() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    ObjectNode objectNode1 = objectNode0.with(""Xab^sEK*<|~69/<2V"");
    ObjectNode objectNode2 = objectNode0.with(""Xab^sEK*<|~69/<2V"");
    assertSame(objectNode2, objectNode1);
}",1,
project,0,test3234,"public void test3234() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    ArrayNode arrayNode0 = objectNode0.withArray(""Can not pass null property name"");
    arrayNode0.addObject();
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    MockFile mockFile0 = new MockFile(""JSON"");
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
    WriterBasedJsonGenerator writerBasedJsonGenerator0 = (WriterBasedJsonGenerator) jsonFactory0.createGenerator((File) mockFile0, jsonEncoding0);
    SimpleType simpleType0 = (SimpleType) TypeFactory.unknownType();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
    AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer(classNameIdResolver0, (BeanProperty) null, ""JSON"");
    objectNode0.serializeWithType(writerBasedJsonGenerator0, (SerializerProvider) null, asExternalTypeSerializer0);
    assertEquals(56320, GeneratorBase.SURR2_FIRST);
}",0,
project,0,test3335,"public void test3335() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    objectNode0.put(""MTt*yMz"", 460.8990766266048);
    // Undeclared exception!
    try {
        objectNode0.withArray(""MTt*yMz"");
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // Property 'MTt*yMz' has value that is not of type ArrayNode (but com.fasterxml.jackson.databind.node.DoubleNode)
        //
        verifyException(""com.fasterxml.jackson.databind.node.ObjectNode"", e);
    }
}",0,
project,0,test3436,"public void test3436() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    objectNode0.withArray(""H<,2:"");
    ArrayNode arrayNode0 = objectNode0.withArray(""H<,2:"");
    assertFalse(arrayNode0.isIntegralNumber());
}",0,
project,0,test3537,"public void test3537() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    JsonNode jsonNode0 = objectNode0.findValue(""JSON"");
    assertNull(jsonNode0);
}",0,assertNotNull(jsonNode0)
project,0,test3638,"public void test3638() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.with(""<!&"");
    Long long0 = new Long((-2279L));
    objectNode1.put(""=!f{"", long0);
    objectNode0.findValue(""=!f{"");
    assertEquals(1, objectNode0.size());
}",0,"assertEquals(0, objectNode0.size())"
project,0,test4144,"public void test4144() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.with(""<!&"");
    ObjectNode objectNode2 = objectNode0.findParent(""=!f{"");
    assertNotSame(objectNode0, objectNode1);
}",0,
project,0,test4246,"public void test4246() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    Long long0 = new Long((-2279L));
    ObjectNode objectNode1 = objectNode0.put(""=!f{"", long0);
    ObjectNode objectNode2 = objectNode1.findParent(""=!f{"");
    assertFalse(objectNode2.isLong());
}",0,assertTrue(objectNode2.isLong())
project,0,test4347,"public void test4347() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
    ObjectNode objectNode1 = objectNode0.put(""Internal error: entry should be a Number, but is of type "", (short) (-3));
    ArrayNode arrayNode0 = objectNode0.putArray(""7R$O!=;AAfrFl>NPjc"");
    ObjectNode objectNode2 = arrayNode0.insertObject(200);
    ObjectNode objectNode3 = objectNode2._put("")"", objectNode1);
    ObjectNode objectNode4 = objectNode3.findParent(""Internal error: entry should be a Number, but is of type "");
    assertNotNull(objectNode4);
}",0,
project,0,test4348,"public void test4348() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
    ObjectNode objectNode1 = objectNode0.put(""Internal error: entry should be a Number, but is of type "", (short) (-3));
    ArrayNode arrayNode0 = objectNode0.putArray(""7R$O!=;AAfrFl>NPjc"");
    ObjectNode objectNode2 = arrayNode0.insertObject(200);
    ObjectNode objectNode3 = objectNode2._put("")"", objectNode1);
    ObjectNode objectNode4 = objectNode3.findParent(""Internal error: entry should be a Number, but is of type "");
    assertEquals(2, objectNode4.size());
}",0,"assertEquals(1, objectNode4.size())"
project,0,test4550,"public void test4550() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.putNull("" (expected type: "");
    List<JsonNode> list0 = objectNode1.findParents(""com.fasterxml.jackson.databind.deser.AbstractDeserializer"");
    // Undeclared exception!
    try {
        objectNode1.findParents("" (expected type: "", list0);
        fail(""Expecting exception: UnsupportedOperationException"");
    } catch (UnsupportedOperationException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""java.util.AbstractList"", e);
    }
}",0,
project,0,test4651,"public void test4651() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    objectNode0.putNull(""{"");
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectWriter objectWriter0 = objectMapper0.writer();
    IOContext iOContext0 = new IOContext(bufferRecycler0, objectWriter0, true);
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayOutputStream0);
    // Undeclared exception!
    try {
        objectNode0.serialize(uTF8JsonGenerator0, (SerializerProvider) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.node.NullNode"", e);
    }
}",0,
project,0,test4752,"public void test4752() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
    ObjectNode objectNode0 = arrayNode0.insertObject(0);
    JsonNode jsonNode0 = objectNode0.set("";0lx#Wm?`"", arrayNode0);
    assertEquals(JsonNodeType.OBJECT, jsonNode0.getNodeType());
}",0,assertNotNull(jsonNode0.getNodeType())
project,0,test4853,"public void test4853() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    JsonNode jsonNode0 = objectNode0.set(""hj-H4"", (JsonNode) null);
    assertFalse(jsonNode0.isFloatingPointNumber());
}",0,assertFalse(jsonNode0.isFloatingPointNumber())
project,0,test4954,"public void test4954() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    HashMap<String, TextNode> hashMap0 = new HashMap<String, TextNode>();
    hashMap0.put(""ZxdX"", (TextNode) null);
    objectNode0.setAll((Map<String, ? extends JsonNode>) hashMap0);
    assertEquals(1, objectNode0.size());
}",0,"assertEquals(0, objectNode0.size())"
project,0,test5055,"public void test5055() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    NullNode nullNode0 = jsonNodeFactory0.nullNode();
    hashMap0.put("">!Q_l @"", nullNode0);
    objectNode0.setAll((Map<String, ? extends JsonNode>) hashMap0);
    assertEquals(1, objectNode0.size());
}",0,"assertEquals(0, objectNode0.size())"
project,0,test5156,"public void test5156() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    JsonNode jsonNode0 = objectNode0.replace(""zT4YsA$\""1Q'Zj/2)*j"", objectNode0);
    assertNull(jsonNode0);
}",0,
project,0,test5257,"public void test5257() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    JsonNode jsonNode0 = objectNode0.replace(""!=U)md/"", (JsonNode) null);
    assertNull(jsonNode0);
}",0,
project,0,test5358,"public void test5358() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    JsonNode jsonNode0 = objectNode0.put("":`"", (JsonNode) objectNode0);
    assertNull(jsonNode0);
}",0,assertNotNull(jsonNode0)
project,0,test5459,"public void test5459() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory(false);
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, (Map<String, JsonNode>) null);
    // Undeclared exception!
    try {
        objectNode0.put(""com.fasterxml.jackson.databind.ser.std.NumberSerializer"", (JsonNode) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.node.ObjectNode"", e);
    }
}",0,
project,0,test5560,"public void test5560() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    Short short0 = new Short((short) (-1202));
    ObjectNode objectNode1 = objectNode0.put("" getter: "", short0);
    assertNull(objectNode1.textValue());
}",0,assertNotNull(objectNode1.textValue())
project,0,test5661,"public void test5661() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.put(""=9zI)RRvckwLgHU"", (Short) null);
    assertFalse(objectNode1.isFloatingPointNumber());
}",0,assertFalse(objectNode1.isFloatingPointNumber())
project,0,test5762,"public void test5762() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    Integer integer0 = new Integer(0);
    ObjectNode objectNode1 = objectNode0.put("":Q)fa-"", integer0);
    assertEquals("""", objectNode1.asText());
}",0,assertNotNull(objectNode1.asText())
project,0,test5863,"public void test5863() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.put(""LpN@SVwK` vp{;"", (Integer) null);
    assertSame(objectNode0, objectNode1);
}",0,
project,0,test5964,"public void test5964() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.put(""ftfMh"", (Long) null);
    assertSame(objectNode0, objectNode1);
}",0,
project,0,test6065,"public void test6065() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    Float float0 = new Float((-176.3724F));
    ObjectNode objectNode1 = objectNode0.put(""#-H*<g;}-e"", float0);
    assertEquals("""", objectNode1.asText());
}",0,assertNotNull(objectNode1.asText())
project,0,test6166,"public void test6166() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.put(""]`"", (Float) null);
    assertNull(objectNode1.numberType());
}",0,assertNotNull(objectNode1.numberType())
project,0,test6267,"public void test6267() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    Double double0 = new Double(1.0);
    ObjectNode objectNode1 = objectNode0.put(""oU^yF5p'{<R%j1T%"", double0);
    assertEquals("""", objectNode1.asText());
}",0,assertNotNull(objectNode1.asText())
project,0,test6368,"public void test6368() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    ObjectNode objectNode1 = objectNode0.put(""SOLID_MATCH"", (Double) null);
    assertEquals(1, objectNode1.size());
}",0,"assertEquals(0, objectNode1.size())"
project,0,test6469,"public void test6469() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    BigDecimal bigDecimal0 = BigDecimal.TEN;
    ObjectNode objectNode1 = objectNode0.put(""XgZ15KUnv2B}"", bigDecimal0);
    assertNull(objectNode1.numberType());
}",0,assertNotNull(objectNode1.numberType())
project,0,test6570,"public void test6570() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.put((String) null, (BigDecimal) null);
    assertFalse(objectNode1.isLong());
}",0,
project,0,test6671,"public void test6671() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    ObjectNode objectNode1 = objectNode0.put(""-}+OPSl29"", ""-}+OPSl29"");
    assertFalse(objectNode1.isDouble());
}",0,assertFalse(objectNode1.isDouble())
project,0,test6772,"public void test6772() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    ObjectNode objectNode1 = objectNode0.put(""{"", (String) null);
    assertFalse(objectNode1.isInt());
}",0,assertFalse(objectNode1.isInt())
project,0,test6873,"public void test6873() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    Boolean boolean0 = new Boolean("", copied "");
    ObjectNode objectNode1 = objectNode0.put(""2|UEa<\""`(2d"", boolean0);
    assertSame(objectNode0, objectNode1);
}",1,
project,0,test6974,"public void test6974() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    ObjectNode objectNode1 = objectNode0.put(""Xab^sEK*<|~69/<2V"", (Boolean) null);
    assertFalse(objectNode1.isLong());
}",0,
project,0,test7075,"public void test7075() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
    HashMap<String, JsonNode> hashMap0 = new HashMap<String, JsonNode>();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0, hashMap0);
    ObjectNode objectNode1 = objectNode0.put(""Internal error: entry should be a Number, but is of type "", (byte[]) null);
    assertNull(objectNode1.textValue());
}",0,assertNotNull(objectNode1.textValue())
project,0,test7176,"public void test7176() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ArrayNode arrayNode0 = new ArrayNode(jsonNodeFactory0);
    ObjectNode objectNode0 = arrayNode0.insertObject(0);
    boolean boolean0 = objectNode0.equals(objectNode0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test7277,"public void test7277() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.withExactBigDecimals(true);
    ObjectNode objectNode0 = jsonNodeFactory0.objectNode();
    boolean boolean0 = objectNode0.equals((Object) null);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test7378,"public void test7378() throws Throwable {
    JsonNodeFactory jsonNodeFactory0 = new JsonNodeFactory();
    ObjectNode objectNode0 = new ObjectNode(jsonNodeFactory0);
    NullNode nullNode0 = jsonNodeFactory0.nullNode();
    boolean boolean0 = objectNode0.equals(nullNode0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
