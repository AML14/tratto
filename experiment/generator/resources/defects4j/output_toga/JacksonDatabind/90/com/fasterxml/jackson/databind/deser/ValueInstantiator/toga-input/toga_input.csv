focal_method,test_prefix,docstring
"public AnnotatedWithParams getWithArgsCreator() {
    return null;
}","public void test000() throws Throwable {
    Class<JsonFormat.Feature> class0 = JsonFormat.Feature.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getWithArgsCreator();
    assertNull(annotatedWithParams0);
}","/**
 * Method that can be called to try to access member (constructor,
 * static factory method) that is used as the ""non-default creator""
 * (constructor or factory method that takes one or more arguments).
 * Note that implementations not required to return actual object
 * they use (or, they may use some other instantiation) method.
 * That is, even if {@link #canCreateFromObjectWith()} returns true,
 * this method may return null .
 */"
"/*
    /**********************************************************
    /* Instantiation methods for JSON Object
    /**********************************************************
     */
/**
 *  Method called to create value instance from a JSON value when
 *  no data needs to passed to creator (constructor, factory method);
 *  typically this will call the default constructor of the value object.
 *  It will only be used if more specific creator methods are not
 *  applicable; hence ""default"".
 * <p>
 *  This method is called if {@link #getFromObjectArguments} returns
 *  null or empty List.
 */
public Object createUsingDefault(DeserializationContext ctxt) throws IOException {
    return ctxt.handleMissingInstantiator(getValueClass(), ctxt.getParser(), ""no default no-arguments constructor found"");
}","public void test011() throws Throwable {
    Class<Integer> class0 = Integer.TYPE;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    // Undeclared exception!
    try {
        valueInstantiator_Base0.createUsingDefault((DeserializationContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.ValueInstantiator"", e);
    }
}",""
"public Object createFromInt(DeserializationContext ctxt, int value) throws IOException {
    return ctxt.handleMissingInstantiator(getValueClass(), ctxt.getParser(), ""no int/Int-argument constructor/factory method to deserialize from Number value (%s)"", value);
}","public void test022() throws Throwable {
    Class<PushbackInputStream> class0 = PushbackInputStream.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    // Undeclared exception!
    try {
        valueInstantiator_Base0.createFromInt((DeserializationContext) null, (-751));
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.ValueInstantiator"", e);
    }
}",""
"public boolean canInstantiate() {
    return canCreateUsingDefault() || canCreateUsingDelegate() || canCreateFromObjectWith() || canCreateFromString() || canCreateFromInt() || canCreateFromLong() || canCreateFromDouble() || canCreateFromBoolean();
}","public void test033() throws Throwable {
    Class<JsonFormat.Feature> class0 = JsonFormat.Feature.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    boolean boolean0 = valueInstantiator_Base0.canInstantiate();
    assertFalse(boolean0);
}","/**
 * Method that will return true if any of <code>canCreateXxx</code> method
 * returns true: that is, if there is any way that an instance could
 * be created.
 */"
"public Object createFromDouble(DeserializationContext ctxt, double value) throws IOException {
    return ctxt.handleMissingInstantiator(getValueClass(), ctxt.getParser(), ""no double/Double-argument constructor/factory method to deserialize from Number value (%s)"", value);
}","public void test044() throws Throwable {
    Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    // Undeclared exception!
    try {
        valueInstantiator_Base0.createFromDouble((DeserializationContext) null, 0.0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.ValueInstantiator"", e);
    }
}",""
"public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) throws IOException {
    return ctxt.handleMissingInstantiator(getValueClass(), ctxt.getParser(), ""no delegate creator specified"");
}","public void test055() throws Throwable {
    Class<Integer> class0 = Integer.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    // Undeclared exception!
    try {
        valueInstantiator_Base0.createUsingDelegate((DeserializationContext) null, class0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.ValueInstantiator"", e);
    }
}","/**
 * Method to called to create value instance from JSON Object using
 * an intermediate ""delegate"" value to pass to createor method
 */"
"public AnnotatedWithParams getDelegateCreator() {
    return null;
}","public void test066() throws Throwable {
    Class<JsonFormat.Feature> class0 = JsonFormat.Feature.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getDelegateCreator();
    assertNull(annotatedWithParams0);
}","/**
 * Method that can be called to try to access member (constructor,
 * static factory method) that is used as the ""delegate creator"".
 * Note that implementations not required to return actual object
 * they use (or, they may use some other instantiation) method.
 * That is, even if {@link #canCreateUsingDelegate()} returns true,
 * this method may return null .
 */"
"public JavaType getDelegateType(DeserializationConfig config) {
    return null;
}","public void test077() throws Throwable {
    Class<Object> class0 = Object.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    JavaType javaType0 = valueInstantiator_Base0.getDelegateType((DeserializationConfig) null);
    assertNull(javaType0);
}","/**
 * Method that can be used to determine what is the type of delegate
 * type to use, if any; if no delegates are used, will return null.
 * If non-null type is returned, deserializer will bind JSON into
 * specified type (using standard deserializer for that type), and
 * pass that to instantiator.
 */"
"public Object createFromObjectWith(DeserializationContext ctxt, SettableBeanProperty[] props, PropertyValueBuffer buffer) throws IOException {
    return createFromObjectWith(ctxt, buffer.getParameters(props));
}","public void test088() throws Throwable {
    Class<JsonDeserializer> class0 = JsonDeserializer.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    SettableBeanProperty[] settableBeanPropertyArray0 = new SettableBeanProperty[0];
    // Undeclared exception!
    try {
        valueInstantiator_Base0.createFromObjectWith((DeserializationContext) null, settableBeanPropertyArray0, (PropertyValueBuffer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.ValueInstantiator"", e);
    }
}","/**
 *  Method that delegates to
 *  {@link #createFromObjectWith(DeserializationContext, Object[])} by
 *  default, but can be overridden if the application should have customized
 *  behavior with respect to missing properties.
 * <p>
 *  The default implementation of this method uses
 *  {@link PropertyValueBuffer#getParameters(SettableBeanProperty[])} to read
 *  and validate all properties in bulk, possibly substituting defaults for
 *  missing properties or throwing exceptions for missing properties.  An
 *  overridden implementation of this method could, for example, use
 *  {@link PropertyValueBuffer#hasParameter(SettableBeanProperty)} and
 *  {@link PropertyValueBuffer#getParameter(SettableBeanProperty)} to safely
 *  read the present properties only, and to have some other behavior for the
 *  missing properties.
 *
 *  @since 2.8
 */"
"public JavaType getArrayDelegateType(DeserializationConfig config) {
    return null;
}","public void test099() throws Throwable {
    Class<String> class0 = String.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    JavaType javaType0 = valueInstantiator_Base0.getArrayDelegateType((DeserializationConfig) null);
    assertNull(javaType0);
}","/**
 * Method that can be used to determine what is the type of array delegate
 * type to use, if any; if no delegates are used, will return null. If
 * non-null type is returned, deserializer will bind JSON into specified
 * type (using standard deserializer for that type), and pass that to
 * instantiator.
 *
 * @since 2.7
 */"
"public AnnotatedParameter getIncompleteParameter() {
    return null;
}","public void test1010() throws Throwable {
    Class<Object> class0 = Object.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    AnnotatedParameter annotatedParameter0 = valueInstantiator_Base0.getIncompleteParameter();
    assertNull(annotatedParameter0);
}","/**
 * If an incomplete creator was found, this is the first parameter that
 * needs further annotation to help make the creator complete.
 */"
"public AnnotatedWithParams getArrayDelegateCreator() {
    return null;
}","public void test1111() throws Throwable {
    Class<JsonFormat.Feature> class0 = JsonFormat.Feature.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    AnnotatedWithParams annotatedWithParams0 = valueInstantiator_Base0.getArrayDelegateCreator();
    assertNull(annotatedWithParams0);
}","/**
 * Method that can be called to try to access member (constructor,
 * static factory method) that is used as the ""array delegate creator"".
 * Note that implementations not required to return actual object
 * they use (or, they may use some other instantiation) method.
 * That is, even if {@link #canCreateUsingArrayDelegate()} returns true,
 * this method may return null .
 */"
"/*
    /**********************************************************
    /* Instantiation methods for JSON scalar types
    /* (String, Number, Boolean)
    /**********************************************************
     */
public Object createFromString(DeserializationContext ctxt, String value) throws IOException {
    return _createFromStringFallbacks(ctxt, value);
}","public void test1212() throws Throwable {
    Class<String> class0 = String.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        valueInstantiator_Base0.createFromString(defaultDeserializationContext_Impl0, """");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",""
"public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) throws IOException {
    // sanity check; shouldn't really get called if no Creator specified
    return ctxt.handleMissingInstantiator(getValueClass(), ctxt.getParser(), ""no creator with arguments specified"");
}","public void test1313() throws Throwable {
    Class<DecimalNode> class0 = DecimalNode.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    // Undeclared exception!
    try {
        valueInstantiator_Base0.createFromObjectWith((DeserializationContext) null, (Object[]) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.ValueInstantiator"", e);
    }
}","/**
 *  Method called to create value instance from JSON Object when
 *  instantiation arguments are passed; this is done, for example when passing information
 *  specified with ""Creator"" annotations.
 * <p>
 *  This method is called if {@link #getFromObjectArguments} returns
 *  a non-empty List of arguments.
 */"
"public Object createUsingArrayDelegate(DeserializationContext ctxt, Object delegate) throws IOException {
    return ctxt.handleMissingInstantiator(getValueClass(), ctxt.getParser(), ""no array delegate creator specified"");
}","public void test1414() throws Throwable {
    Class<Object> class0 = Object.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    // Undeclared exception!
    try {
        valueInstantiator_Base0.createUsingArrayDelegate((DeserializationContext) null, class0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.ValueInstantiator"", e);
    }
}","/**
 * Method to called to create value instance from JSON Array using
 * an intermediate ""delegate"" value to pass to createor method
 */"
"public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig config) {
    return null;
}","public void test1515() throws Throwable {
    Class<Integer> class0 = Integer.TYPE;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    SettableBeanProperty[] settableBeanPropertyArray0 = valueInstantiator_Base0.getFromObjectArguments((DeserializationConfig) null);
    assertNull(settableBeanPropertyArray0);
}","/**
 *  Method called to determine types of instantiation arguments
 *  to use when creating instances with creator arguments
 *  (when {@link #canCreateFromObjectWith()} returns  true).
 *  These arguments are bound from JSON, using specified
 *  property types to locate deserializers.
 * <p>
 *  NOTE: all properties will be of type
 *  {@link com.fasterxml.jackson.databind.deser.CreatorProperty}.
 */"
"public boolean canCreateUsingArrayDelegate() {
    return false;
}","public void test1616() throws Throwable {
    Class<Integer> class0 = Integer.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    boolean boolean0 = valueInstantiator_Base0.canCreateUsingArrayDelegate();
    assertFalse(boolean0);
}","/**
 * Method that can be called to check whether a array-delegate-based creator
 * (single-arg constructor or factory method)
 * is available for this instantiator
 *
 * @since 2.7
 */"
"public Object createFromBoolean(DeserializationContext ctxt, boolean value) throws IOException {
    return ctxt.handleMissingInstantiator(getValueClass(), ctxt.getParser(), ""no boolean/Boolean-argument constructor/factory method to deserialize from boolean value (%s)"", value);
}","public void test1717() throws Throwable {
    Class<Integer> class0 = Integer.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    // Undeclared exception!
    try {
        valueInstantiator_Base0.createFromBoolean((DeserializationContext) null, true);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.ValueInstantiator"", e);
    }
}",""
"public Object createFromLong(DeserializationContext ctxt, long value) throws IOException {
    return ctxt.handleMissingInstantiator(getValueClass(), ctxt.getParser(), ""no long/Long-argument constructor/factory method to deserialize from Number value (%s)"", value);
}","public void test1818() throws Throwable {
    Class<Object> class0 = Object.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    // Undeclared exception!
    try {
        valueInstantiator_Base0.createFromLong((DeserializationContext) null, 529L);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.ValueInstantiator"", e);
    }
}",""
"/*
    /**********************************************************
    /* Helper methods
    /**********************************************************
     */
/**
 * @since 2.4 (demoted from <code>StdValueInstantiator</code>)
 */
protected Object _createFromStringFallbacks(DeserializationContext ctxt, String value) throws IOException {
    /* 28-Sep-2011, tatu: Ok this is not clean at all; but since there are legacy
         *   systems that expect conversions in some cases, let's just add a minimal
         *   patch (note: same could conceivably be used for numbers too).
         */
    if (canCreateFromBoolean()) {
        String str = value.trim();
        if (""true"".equals(str)) {
            return createFromBoolean(ctxt, true);
        }
        if (""false"".equals(str)) {
            return createFromBoolean(ctxt, false);
        }
    }
    // also, empty Strings might be accepted as null Object...
    if (value.length() == 0) {
        if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {
            return null;
        }
    }
    return ctxt.handleMissingInstantiator(getValueClass(), ctxt.getParser(), ""no String-argument constructor/factory method to deserialize from String value ('%s')"", value);
}","public void test2121() throws Throwable {
    Class<JsonFormat.Feature> class0 = JsonFormat.Feature.class;
    ValueInstantiator.Base valueInstantiator_Base0 = new ValueInstantiator.Base(class0);
    // Undeclared exception!
    try {
        valueInstantiator_Base0._createFromStringFallbacks((DeserializationContext) null, ""2n97:T&W#:f.B^b%Qg"");
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.ValueInstantiator"", e);
    }
}",""
