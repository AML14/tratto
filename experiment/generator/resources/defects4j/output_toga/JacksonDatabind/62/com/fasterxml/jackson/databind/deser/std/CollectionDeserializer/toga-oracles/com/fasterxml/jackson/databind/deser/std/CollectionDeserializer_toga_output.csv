project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    try {
        objectMapper0.writeValueAsBytes(collectionDeserializer0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // (was java.lang.NullPointerException) (through reference chain: com.fasterxml.jackson.databind.deser.std.CollectionDeserializer[\""contentType\""])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test011,"public void test011() throws Throwable {
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
    JsonParser jsonParser0 = arrayNode0.traverse();
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
    // Undeclared exception!
    try {
        collectionDeserializer0.deserializeWithType(jsonParser0, (DeserializationContext) null, (TypeDeserializer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.CollectionDeserializer"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
    CollectionDeserializer collectionDeserializer1 = new CollectionDeserializer(collectionDeserializer0);
    assertTrue(collectionDeserializer1.isCachable());
}",0,assertFalse(collectionDeserializer1.isCachable())
project,0,test033,"public void test033() throws Throwable {
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
    // Undeclared exception!
    try {
        collectionDeserializer0.findBackReference(""M}.Zg#SH!.h#p1YWd"");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not handle managed/back reference 'M}.Zg#SH!.h#p1YWd': type: container deserializer of type com.fasterxml.jackson.databind.deser.std.CollectionDeserializer returned null for 'getContentDeserializer()'
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.ContainerDeserializerBase"", e);
    }
}",0,
project,0,test044,"public void test044() throws Throwable {
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, (ValueInstantiator) null);
    CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (TypeDeserializer) null);
    assertSame(collectionDeserializer1, collectionDeserializer0);
}",0,
project,0,test055,"public void test055() throws Throwable {
    Class<Object> class0 = Object.class;
    TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
    Boolean boolean0 = Boolean.TRUE;
    CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, collectionDeserializer0, (TypeDeserializer) null, boolean0);
    boolean boolean1 = collectionDeserializer1.isCachable();
    assertFalse(boolean1);
}",0,assertTrue(boolean1)
project,0,test066,"public void test066() throws Throwable {
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    Class<SimpleModule> class0 = SimpleModule.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
    Boolean boolean0 = Boolean.TRUE;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
    Class<Integer> class1 = Integer.class;
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(resolvedRecursiveType0, classNameIdResolver0, ""0ZtIb{8$scA&Gfjc;5B"", true, class1, jsonTypeInfo_As0);
    CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, asPropertyTypeDeserializer0, boolean0);
    assertFalse(collectionDeserializer1.isCachable());
}",0,assertFalse(collectionDeserializer1.isCachable())
project,0,test077,"public void test077() throws Throwable {
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    Class<Object> class0 = Object.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
    Boolean boolean0 = Boolean.TRUE;
    CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved((JsonDeserializer<?>) null, (JsonDeserializer<?>) null, (TypeDeserializer) null, boolean0);
    assertNotSame(collectionDeserializer1, collectionDeserializer0);
}",0,
project,0,test088,"public void test088() throws Throwable {
    Class<Object> class0 = Object.class;
    TypeBindings typeBindings0 = TypeBindings.create(class0, (JavaType[]) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<RuntimeException> class1 = RuntimeException.class;
    JavaType javaType0 = typeFactory0.constructReferenceType(class1, resolvedRecursiveType0);
    ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(resolvedRecursiveType0, typeFactory0);
    Class<BooleanNode> class2 = BooleanNode.class;
    JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.WRAPPER_OBJECT;
    AsPropertyTypeDeserializer asPropertyTypeDeserializer0 = new AsPropertyTypeDeserializer(javaType0, classNameIdResolver0, ""_ahMC~QJ9{m+JF^PXH"", true, class2, jsonTypeInfo_As0);
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, asPropertyTypeDeserializer0, jsonLocationInstantiator0);
    boolean boolean0 = collectionDeserializer0.isCachable();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test099,"public void test099() throws Throwable {
    Class<InputStream> class0 = InputStream.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
    Class<RuntimeException> class1 = RuntimeException.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
    Boolean boolean0 = Boolean.TRUE;
    CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(collectionDeserializer0, (JsonDeserializer<?>) null, (TypeDeserializer) null, boolean0);
    boolean boolean1 = collectionDeserializer1.isCachable();
    assertTrue(collectionDeserializer0.isCachable());
}",0,
project,0,test0910,"public void test0910() throws Throwable {
    Class<InputStream> class0 = InputStream.class;
    JavaType[] javaTypeArray0 = new JavaType[0];
    TypeBindings typeBindings0 = TypeBindings.create(class0, javaTypeArray0);
    Class<RuntimeException> class1 = RuntimeException.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
    Boolean boolean0 = Boolean.TRUE;
    CollectionDeserializer collectionDeserializer1 = collectionDeserializer0.withResolved(collectionDeserializer0, (JsonDeserializer<?>) null, (TypeDeserializer) null, boolean0);
    boolean boolean1 = collectionDeserializer1.isCachable();
    assertFalse(boolean1);
}",0,assertTrue(boolean1)
project,0,test1011,"public void test1011() throws Throwable {
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, (ValueInstantiator) null);
    // Undeclared exception!
    try {
        collectionDeserializer0.createContextual((DeserializationContext) null, (BeanProperty) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.StdDeserializer"", e);
    }
}",1,
project,0,test1314,"public void test1314() throws Throwable {
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
    ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
    JsonParser jsonParser0 = arrayNode0.traverse();
    // Undeclared exception!
    try {
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.ValueInstantiator"", e);
    }
}",0,
project,0,test1415,"public void test1415() throws Throwable {
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
    JsonParser jsonParser0 = arrayNode0.traverse();
    Class<Locale> class0 = Locale.class;
    CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 42);
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, coreXMLDeserializers_Std0, (TypeDeserializer) null, jsonLocationInstantiator0, coreXMLDeserializers_Std0, (Boolean) null);
    // Undeclared exception!
    try {
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.FromStringDeserializer"", e);
    }
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
    JsonParser jsonParser0 = arrayNode0.traverse();
    ArrayList<Object> arrayList0 = new ArrayList<Object>();
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, false, false);
    filteringParserDelegate0.nextBooleanValue();
    Class<Locale> class0 = Locale.class;
    CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 22);
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, coreXMLDeserializers_Std0, (TypeDeserializer) null, jsonLocationInstantiator0, coreXMLDeserializers_Std0, (Boolean) null);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) arrayList0);
    // Undeclared exception!
    try {
        collectionDeserializer0.deserialize((JsonParser) filteringParserDelegate0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) arrayList0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.DeserializationContext"", e);
    }
}",0,
project,0,test1617,"public void test1617() throws Throwable {
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
    JsonParser jsonParser0 = arrayNode0.traverse();
    ArrayList<Object> arrayList0 = new ArrayList<Object>();
    TokenFilter tokenFilter0 = TokenFilter.INCLUDE_ALL;
    FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(jsonParser0, tokenFilter0, true, true);
    filteringParserDelegate0.nextBooleanValue();
    Class<Locale> class0 = Locale.class;
    CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class0, 22);
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, coreXMLDeserializers_Std0, (TypeDeserializer) null, jsonLocationInstantiator0, coreXMLDeserializers_Std0, (Boolean) null);
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    Collection<Object> collection0 = collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) arrayList0);
    try {
        collectionDeserializer0.deserialize((JsonParser) filteringParserDelegate0, (DeserializationContext) null, collection0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // (was java.lang.NullPointerException) (through reference chain: java.util.ArrayList[0])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1718,"public void test1718() throws Throwable {
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
    JsonParser jsonParser0 = arrayNode0.traverse();
    ArrayList<Object> arrayList0 = new ArrayList<Object>();
    Boolean boolean0 = Boolean.TRUE;
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
    try {
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) null, (Collection<Object>) arrayList0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // (was java.lang.NullPointerException) (through reference chain: java.lang.Object[0])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
project,0,test1819,"public void test1819() throws Throwable {
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    ArrayNode arrayNode0 = new ArrayNode((JsonNodeFactory) null);
    JsonParser jsonParser0 = arrayNode0.traverse();
    ArrayList<Object> arrayList0 = new ArrayList<Object>();
    Boolean boolean0 = Boolean.FALSE;
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
    // Undeclared exception!
    try {
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) null, (Collection<Object>) arrayList0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.CollectionDeserializer"", e);
    }
}",0,
project,0,test1920,"public void test1920() throws Throwable {
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer((JavaType) null, (JsonDeserializer<Object>) null, (TypeDeserializer) null, jsonLocationInstantiator0);
    ArrayList<Object> arrayList0 = new ArrayList<Object>();
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonParser jsonParser0 = jsonFactory0.createParser(""JSON"");
    BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    // Undeclared exception!
    try {
        collectionDeserializer0.deserialize(jsonParser0, (DeserializationContext) defaultDeserializationContext_Impl0, (Collection<Object>) arrayList0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.deser.std.CollectionDeserializer"", e);
    }
}",0,
project,0,test2021,"public void test2021() throws Throwable {
    ArrayList<Object> arrayList0 = new ArrayList<Object>();
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    Class<SettableBeanProperty> class0 = SettableBeanProperty.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    Boolean boolean0 = Boolean.TRUE;
    JsonLocationInstantiator jsonLocationInstantiator0 = new JsonLocationInstantiator();
    JsonFactory jsonFactory0 = new JsonFactory();
    byte[] byteArray0 = new byte[0];
    JsonParser jsonParser0 = jsonFactory0.createParser(byteArray0);
    Class<InputStream> class1 = InputStream.class;
    AsExternalTypeDeserializer asExternalTypeDeserializer0 = new AsExternalTypeDeserializer(resolvedRecursiveType0, (TypeIdResolver) null, ""END_ARRAY"", true, class1);
    CollectionDeserializer collectionDeserializer0 = new CollectionDeserializer(resolvedRecursiveType0, (JsonDeserializer<Object>) null, asExternalTypeDeserializer0, jsonLocationInstantiator0, (JsonDeserializer<Object>) null, boolean0);
    try {
        collectionDeserializer0.handleNonArray(jsonParser0, (DeserializationContext) null, arrayList0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // (was java.lang.NullPointerException) (through reference chain: java.lang.Object[0])
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}",0,
