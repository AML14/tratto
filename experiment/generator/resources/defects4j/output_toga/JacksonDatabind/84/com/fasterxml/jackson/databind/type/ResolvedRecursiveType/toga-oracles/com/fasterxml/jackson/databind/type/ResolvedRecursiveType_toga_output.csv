project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
    Class<String> class1 = String.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
    JavaType javaType0 = resolvedRecursiveType0.withTypeHandler("""");
    assertFalse(javaType0.isMapLikeType());
}",0,assertTrue(javaType0.isMapLikeType())
project,0,test011,"public void test011() throws Throwable {
    Class<Integer> class0 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    StringBuilder stringBuilder0 = new StringBuilder(1413);
    // Undeclared exception!
    try {
        resolvedRecursiveType0.getGenericSignature(stringBuilder0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ResolvedRecursiveType"", e);
    }
}",0,
project,0,test022,"public void test022() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType1.setReference(resolvedRecursiveType0);
    boolean boolean0 = resolvedRecursiveType1.equals(resolvedRecursiveType0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test033,"public void test033() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    Class<String> class1 = String.class;
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    SimpleType simpleType0 = new SimpleType(class1);
    ArrayType arrayType0 = ArrayType.construct((JavaType) simpleType0, (TypeBindings) null);
    CollectionLikeType collectionLikeType0 = typeFactory0.constructCollectionLikeType((Class<?>) class0, (JavaType) arrayType0);
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded((Class<?>) class1, (JavaType) collectionLikeType0);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JavaType javaType0 = resolvedRecursiveType0.withContentType(collectionLikeType0);
    assertFalse(javaType0.isMapLikeType());
}",0,
project,0,test044,"public void test044() throws Throwable {
    Class<Object> class0 = Object.class;
    TypeBindings typeBindings0 = TypeBindings.emptyBindings();
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    boolean boolean0 = resolvedRecursiveType0.isContainerType();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test055,"public void test055() throws Throwable {
    Class<Integer> class0 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JavaType javaType0 = resolvedRecursiveType0.withContentTypeHandler(typeBindings0);
    assertFalse(javaType0.isInterface());
}",0,assertTrue(javaType0.isInterface())
project,0,test066,"public void test066() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    // Undeclared exception!
    try {
        resolvedRecursiveType0.getErasedSignature();
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.type.ResolvedRecursiveType"", e);
    }
}",0,
project,0,test077,"public void test077() throws Throwable {
    Class<Integer> class0 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JavaType javaType0 = resolvedRecursiveType0.withValueHandler(""Can not add mapping from class "");
    assertFalse(javaType0.useStaticType());
}",0,assertTrue(javaType0.useStaticType())
project,0,test088,"public void test088() throws Throwable {
    Class<Integer> class0 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JavaType[] javaTypeArray0 = new JavaType[7];
    JavaType javaType0 = resolvedRecursiveType0.refine(class0, typeBindings0, (JavaType) null, javaTypeArray0);
    assertNull(javaType0);
}",0,
project,0,test099,"public void test099() throws Throwable {
    Class<Integer> class0 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JavaType[] javaTypeArray0 = new JavaType[7];
    javaTypeArray0[4] = (JavaType) resolvedRecursiveType0;
    CollectionType collectionType0 = CollectionType.construct(class0, typeBindings0, javaTypeArray0[3], javaTypeArray0, javaTypeArray0[4]);
    CollectionType collectionType1 = collectionType0.withStaticTyping();
    assertTrue(collectionType1.isCollectionLikeType());
}",0,assertTrue(collectionType1.isCollectionLikeType())
project,0,test1010,"public void test1010() throws Throwable {
    Class<Integer> class0 = Integer.class;
    TypeBindings typeBindings0 = TypeBindings.createIfNeeded(class0, (JavaType[]) null);
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JavaType javaType0 = resolvedRecursiveType0.withContentValueHandler((Object) null);
    assertFalse(javaType0.isCollectionLikeType());
}",0,assertFalse(javaType0.isCollectionLikeType())
project,0,test1111,"public void test1111() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    JavaType javaType0 = resolvedRecursiveType0._narrow(class0);
    assertFalse(javaType0.hasHandlers());
}",0,assertFalse(javaType0.hasHandlers())
project,0,test1212,"public void test1212() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType0.setReference(resolvedRecursiveType0);
    ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
    // Undeclared exception!
    try {
        resolvedRecursiveType0.setReference(resolvedRecursiveType1);
        fail(""Expecting exception: IllegalStateException"");
    } catch (IllegalStateException e) {
        //
        // Trying to re-set self reference; old value = [recursive type; com.fasterxml.jackson.databind.type.ResolvedRecursiveType, new = [recursive type; UNRESOLVED
        //
        verifyException(""com.fasterxml.jackson.databind.type.ResolvedRecursiveType"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    boolean boolean0 = resolvedRecursiveType0.equals(typeBindings0);
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1414,"public void test1414() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    TypeBindings typeBindings0 = TypeBindings.create(class0, (List<JavaType>) null);
    Class<String> class1 = String.class;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class1, typeBindings0);
    resolvedRecursiveType0.setReference(resolvedRecursiveType0);
    boolean boolean0 = resolvedRecursiveType0.equals(""UNRESOLVED"");
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test1515,"public void test1515() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType0.setReference(resolvedRecursiveType0);
    ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
    assertFalse(resolvedRecursiveType1.equals((Object) resolvedRecursiveType0));
}",0,
project,0,test1516,"public void test1516() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType0.setReference(resolvedRecursiveType0);
    ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType1.setReference(resolvedRecursiveType0);
    boolean boolean0 = resolvedRecursiveType1.equals(resolvedRecursiveType0);
    assertTrue(resolvedRecursiveType1.equals((Object) resolvedRecursiveType0));
}",0,
project,0,test1517,"public void test1517() throws Throwable {
    Class<ResolvedRecursiveType> class0 = ResolvedRecursiveType.class;
    TypeBindings typeBindings0 = TypeFactory.EMPTY_BINDINGS;
    ResolvedRecursiveType resolvedRecursiveType0 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType0.setReference(resolvedRecursiveType0);
    ResolvedRecursiveType resolvedRecursiveType1 = new ResolvedRecursiveType(class0, typeBindings0);
    resolvedRecursiveType1.setReference(resolvedRecursiveType0);
    boolean boolean0 = resolvedRecursiveType1.equals(resolvedRecursiveType0);
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
