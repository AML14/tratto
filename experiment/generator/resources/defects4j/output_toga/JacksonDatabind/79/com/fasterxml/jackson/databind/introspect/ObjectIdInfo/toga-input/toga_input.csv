focal_method,test_prefix,docstring
"public boolean getAlwaysAsId() {
    return _alwaysAsId;
}","public void test000() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""Unexpected token (%s), expected %s"", class0, class0);
    Class<? extends ObjectIdGenerator<?>> class1 = objectIdInfo0.getGeneratorType();
    assertFalse(objectIdInfo0.getAlwaysAsId());
}",""
"public Class<? extends ObjectIdGenerator<?>> getGeneratorType() {
    return _generator;
}","public void test002() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""Unexpected token (%s), expected %s"", class0, class0);
    Class<? extends ObjectIdGenerator<?>> class1 = objectIdInfo0.getGeneratorType();
    assertNotNull(class1);
}",""
"public boolean getAlwaysAsId() {
    return _alwaysAsId;
}","public void test013() throws Throwable {
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    Class<ObjectIdGenerators.IntSequenceGenerator> class1 = ObjectIdGenerators.IntSequenceGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class1);
    assertFalse(objectIdInfo0.getAlwaysAsId());
}",""
"public boolean getAlwaysAsId() {
    return _alwaysAsId;
}","public void test024() throws Throwable {
    PropertyName propertyName0 = PropertyName.NO_NAME;
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    Class<SimpleObjectIdResolver> class1 = SimpleObjectIdResolver.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(propertyName0, class0, class0, class1);
    assertFalse(objectIdInfo0.getAlwaysAsId());
}",""
"public boolean getAlwaysAsId() {
    return _alwaysAsId;
}","public void test035() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""com.fasterxml.jackson.core.JsonStreamContext"", class0, class0);
    Class<? extends ObjectIdResolver> class1 = objectIdInfo0.getResolverType();
    assertFalse(objectIdInfo0.getAlwaysAsId());
}",""
"public Class<? extends ObjectIdResolver> getResolverType() {
    return _resolver;
}","public void test037() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""com.fasterxml.jackson.core.JsonStreamContext"", class0, class0);
    Class<? extends ObjectIdResolver> class1 = objectIdInfo0.getResolverType();
    assertNotNull(class1);
}",""
"public boolean getAlwaysAsId() {
    return _alwaysAsId;
}","public void test048() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""comfasterml.jacksoncore.JsonStreamContext"", class0, class0);
    boolean boolean0 = objectIdInfo0.getAlwaysAsId();
    assertFalse(boolean0);
}",""
"public boolean getAlwaysAsId() {
    return _alwaysAsId;
}","public void test059() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""com.fasterxml.jackson.core.JsonStreamContext"", class0, class0);
    PropertyName propertyName0 = objectIdInfo0.getPropertyName();
    assertFalse(objectIdInfo0.getAlwaysAsId());
}",""
"public PropertyName getPropertyName() {
    return _propertyName;
}","public void test0510() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""com.fasterxml.jackson.core.JsonStreamContext"", class0, class0);
    PropertyName propertyName0 = objectIdInfo0.getPropertyName();
    assertNotNull(propertyName0);
}",""
"public boolean getAlwaysAsId() {
    return _alwaysAsId;
}","public void test0611() throws Throwable {
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("""", class0, class1);
    Class<?> class2 = objectIdInfo0.getScope();
    assertFalse(objectIdInfo0.getAlwaysAsId());
}",""
"public Class<?> getScope() {
    return _scope;
}","public void test0612() throws Throwable {
    Class<SimpleObjectIdResolver> class0 = SimpleObjectIdResolver.class;
    Class<ObjectIdGenerators.StringIdGenerator> class1 = ObjectIdGenerators.StringIdGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo("""", class0, class1);
    Class<?> class2 = objectIdInfo0.getScope();
    assertNotNull(class2);
}",""
"public boolean getAlwaysAsId() {
    return _alwaysAsId;
}","public void test0714() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""com.fasterxml.jackson.core.JsonStreamContext"", class0, class0);
    ObjectIdInfo objectIdInfo1 = objectIdInfo0.withAlwaysAsId(true);
    assertFalse(objectIdInfo0.getAlwaysAsId());
}",""
"public boolean getAlwaysAsId() {
    return _alwaysAsId;
}","public void test0715() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""com.fasterxml.jackson.core.JsonStreamContext"", class0, class0);
    ObjectIdInfo objectIdInfo1 = objectIdInfo0.withAlwaysAsId(true);
    assertTrue(objectIdInfo1.getAlwaysAsId());
}",""
"public ObjectIdInfo withAlwaysAsId(boolean state) {
    if (_alwaysAsId == state) {
        return this;
    }
    return new ObjectIdInfo(_propertyName, _scope, _generator, state, _resolver);
}","public void test0816() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""com.fasterxml.jackson.core.JsonStreamContext"", class0, class0);
    ObjectIdInfo objectIdInfo1 = objectIdInfo0.withAlwaysAsId(false);
    assertSame(objectIdInfo1, objectIdInfo0);
}",""
"@Override
public String toString() {
    return ""ObjectIdInfo: propName="" + _propertyName + "", scope="" + (_scope == null ? ""null"" : _scope.getName()) + "", generatorType="" + (_generator == null ? ""null"" : _generator.getName()) + "", alwaysAsId="" + _alwaysAsId;
}","public void test0917() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""!1q1EO,zS4ggX!t#"", class0, (Class<? extends ObjectIdGenerator<?>>) null);
    String string0 = objectIdInfo0.toString();
    assertEquals(""ObjectIdInfo: propName=!1q1EO,zS4ggX!t#, scope=com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator, generatorType=null, alwaysAsId=false"", string0);
}",""
"@Override
public String toString() {
    return ""ObjectIdInfo: propName="" + _propertyName + "", scope="" + (_scope == null ? ""null"" : _scope.getName()) + "", generatorType="" + (_generator == null ? ""null"" : _generator.getName()) + "", alwaysAsId="" + _alwaysAsId;
}","public void test1018() throws Throwable {
    Class<ObjectIdGenerators.UUIDGenerator> class0 = ObjectIdGenerators.UUIDGenerator.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo(""Can not construct instance of s, problem: %s"", (Class<?>) null, class0);
    String string0 = objectIdInfo0.toString();
    assertEquals(""ObjectIdInfo: propName=Can not construct instance of s, problem: %s, scope=null, generatorType=com.fasterxml.jackson.annotation.ObjectIdGenerators$UUIDGenerator, alwaysAsId=false"", string0);
}",""
