project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test000,"public void test000() throws Throwable {
    Class<StringArraySerializer> class0 = StringArraySerializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    Iterator<PropertyWriter> iterator0 = beanSerializer0.properties();
    assertNotNull(iterator0);
}",0,assertNotNull(iterator0)
project,0,test011,"public void test011() throws Throwable {
    JavaType javaType0 = TypeFactory.unknownType();
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);
    NameTransformer nameTransformer0 = NameTransformer.NOP;
    JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer0);
    assertTrue(jsonSerializer0.isUnwrappingSerializer());
}",0,assertFalse(jsonSerializer0.isUnwrappingSerializer())
project,0,test022,"public void test022() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    // Undeclared exception!
    try {
        objectMapper0.convertValue((Object) jsonFactory0, (JavaType) simpleType0);
        fail(""Expecting exception: NoClassDefFoundError"");
    } catch (NoClassDefFoundError e) {
        //
        // Could not initialize class com.fasterxml.jackson.databind.JsonMappingException
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.BeanSerializerBase"", e);
    }
}",1,
project,0,test033,"public void test033() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];
    MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;
    mapperFeatureArray0[0] = mapperFeature0;
    mapperFeatureArray0[1] = mapperFeatureArray0[0];
    mapperFeatureArray0[2] = mapperFeature0;
    mapperFeatureArray0[3] = mapperFeature0;
    mapperFeatureArray0[4] = mapperFeatureArray0[1];
    mapperFeatureArray0[5] = mapperFeature0;
    mapperFeatureArray0[6] = mapperFeatureArray0[0];
    MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;
    mapperFeatureArray0[7] = mapperFeature1;
    objectMapper0.disable(mapperFeatureArray0);
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
    JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer(class0);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test044,"public void test044() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
    objectMapper0.setSerializationInclusion(jsonInclude_Include0);
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;
    JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer(class0);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test055,"public void test055() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    Class<JavaType> class0 = JavaType.class;
    JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findPrimaryPropertySerializer(class0, (BeanProperty) null);
    assertFalse(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test066,"public void test066() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    PropertyName propertyName0 = PropertyName.NO_NAME;
    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) null, false);
    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    JsonSerializer<?> jsonSerializer0 = beanSerializerBase0.createContextual(serializerProvider0, (BeanProperty) null);
    assertTrue(jsonSerializer0.usesObjectId());
}",0,assertFalse(jsonSerializer0.usesObjectId())
project,0,test077,"public void test077() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    Class<StdArraySerializers.DoubleArraySerializer> class1 = StdArraySerializers.DoubleArraySerializer.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);
    boolean boolean0 = beanSerializer0.usesObjectId();
    assertFalse(boolean0);
}",0,assertTrue(boolean0)
project,0,test088,"public void test088() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    Class<HashMap> class0 = HashMap.class;
    Class<StdArraySerializers.DoubleArraySerializer> class1 = StdArraySerializers.DoubleArraySerializer.class;
    MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);
    CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapType0, mapType0);
    Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;
    Class<ObjectIdResolver> class3 = ObjectIdResolver.class;
    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo((PropertyName) null, class2, class2, class3);
    PropertyBasedObjectIdGenerator propertyBasedObjectIdGenerator0 = new PropertyBasedObjectIdGenerator(objectIdInfo0, (BeanPropertyWriter) null);
    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) collectionLikeType0, (PropertyName) null, (ObjectIdGenerator<?>) propertyBasedObjectIdGenerator0, false);
    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
    boolean boolean0 = beanSerializerBase0.usesObjectId();
    assertTrue(boolean0);
}",0,assertTrue(boolean0)
project,0,test099,"public void test099() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    JsonFactory jsonFactory0 = new JsonFactory();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer((TypeIdResolver) null, (BeanProperty) null, """");
    IteratorSerializer iteratorSerializer0 = new IteratorSerializer(simpleType0, false, asExternalTypeSerializer0);
    // Undeclared exception!
    try {
        beanSerializer0.serializeWithType(iteratorSerializer0, jsonGenerator0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.jsontype.impl.TypeSerializerBase"", e);
    }
}",0,
project,0,test1010,"public void test1010() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    PropertyName propertyName0 = PropertyName.construct(""O36KM|PeT+sa^ TXf)"");
    ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator0 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(objectIdGenerator0).generateId(any());
    ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator1 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
    doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator1, false);
    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    MockPrintStream mockPrintStream0 = new MockPrintStream(""O36KM|PeT+sa^ TXf)"");
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, beanSerializer0, false);
    byte[] byteArray0 = new byte[17];
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArray0, 17, false);
    // Undeclared exception!
    try {
        beanSerializerBase0.serializeWithType(jsonEncoding0, uTF8JsonGenerator0, serializerProvider0, (TypeSerializer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.BeanSerializerBase"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    JsonFactory jsonFactory0 = new JsonFactory();
    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    Class<StringArraySerializer> class0 = StringArraySerializer.class;
    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withFilterId(class0);
    AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer((TypeIdResolver) null, (BeanProperty) null, """");
    IteratorSerializer iteratorSerializer0 = new IteratorSerializer(simpleType0, false, asExternalTypeSerializer0);
    // Undeclared exception!
    try {
        beanSerializerBase0.serializeWithType(iteratorSerializer0, jsonGenerator0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",0,
project,0,test1212,"public void test1212() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    JavaType javaType0 = TypeFactory.unknownType();
    BeanSerializer beanSerializer0 = new BeanSerializer(javaType0, (BeanSerializerBuilder) null, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);
    PropertyName propertyName0 = PropertyName.NO_NAME;
    ObjectIdGenerator<JavaType> objectIdGenerator0 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
    doReturn(javaType0).when(objectIdGenerator0).generateId(any());
    ObjectIdGenerator<JavaType> objectIdGenerator1 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
    doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator1, false);
    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
    // Undeclared exception!
    try {
        beanSerializerBase0.serialize(propertyName0, jsonGenerator0, serializerProvider0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.impl.WritableObjectId"", e);
    }
}",0,
project,0,test1313,"public void test1313() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    JavaType javaType0 = TypeFactory.unknownType();
    BeanSerializer beanSerializer0 = new BeanSerializer(javaType0, (BeanSerializerBuilder) null, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);
    PropertyName propertyName0 = PropertyName.NO_NAME;
    ObjectIdGenerator<StdArraySerializers.ShortArraySerializer> objectIdGenerator0 = (ObjectIdGenerator<StdArraySerializers.ShortArraySerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(objectIdGenerator0).generateId(any());
    ObjectIdGenerator<StdArraySerializers.ShortArraySerializer> objectIdGenerator1 = (ObjectIdGenerator<StdArraySerializers.ShortArraySerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
    doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator1, true);
    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);
    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);
    // Undeclared exception!
    try {
        beanSerializerBase0.serialize(beanSerializer0, jsonGenerator0, serializerProvider0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.BeanSerializerBase"", e);
    }
}",0,
project,0,test1414,"public void test1414() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    PropertyName propertyName0 = PropertyName.construct(""O36KM|PeT+sa^ TXf)"");
    ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator0 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
    doReturn((Object) null).when(objectIdGenerator0).generateId(any());
    ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator1 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());
    doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());
    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator1, true);
    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();
    MockPrintStream mockPrintStream0 = new MockPrintStream(""O36KM|PeT+sa^ TXf)"");
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, beanSerializer0, true);
    byte[] byteArray0 = new byte[17];
    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArray0, 17, false);
    // Undeclared exception!
    try {
        beanSerializerBase0.serializeWithType(jsonEncoding0, uTF8JsonGenerator0, serializerProvider0, (TypeSerializer) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.ser.std.BeanSerializerBase"", e);
    }
}",0,
project,0,test1515,"public void test1515() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);
    assertEquals(2, jsonNode0.size());
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    Class<StringArraySerializer> class0 = StringArraySerializer.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withFilterId(simpleType0);
    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();
    // Undeclared exception!
    try {
        beanSerializerBase0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializerProvider"", e);
    }
}",1,
project,0,test1717,"public void test1717() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();
    beanSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, simpleType0);
    assertFalse(simpleType0.isContainerType());
}",0,assertTrue(simpleType0.isContainerType())
project,0,test1818,"public void test1818() throws Throwable {
    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;
    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);
    beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, simpleType0);
    assertFalse(simpleType0.isContainerType());
}",0,assertTrue(simpleType0.isContainerType())
