{
  "test1212" : {
    "methodSignature" : "public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider) throws IOException",
    "methodName" : "serialize",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1212() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();\n    JavaType javaType0 = TypeFactory.unknownType();\n    BeanSerializer beanSerializer0 = new BeanSerializer(javaType0, (BeanSerializerBuilder) null, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    ObjectIdGenerator<JavaType> objectIdGenerator0 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    doReturn(javaType0).when(objectIdGenerator0).generateId(any());\n    ObjectIdGenerator<JavaType> objectIdGenerator1 = (ObjectIdGenerator<JavaType>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());\n    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator1, false);\n    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);\n    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);\n    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);\n    beanSerializerBase0.serialize(propertyName0, jsonGenerator0, serializerProvider0);\n}",
    "testName" : "test1212"
  },
  "test1313" : {
    "methodSignature" : "public abstract void serialize(T value, JsonGenerator gen, SerializerProvider provider) throws IOException",
    "methodName" : "serialize",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1313() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();\n    JavaType javaType0 = TypeFactory.unknownType();\n    BeanSerializer beanSerializer0 = new BeanSerializer(javaType0, (BeanSerializerBuilder) null, (BeanPropertyWriter[]) null, (BeanPropertyWriter[]) null);\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    ObjectIdGenerator<StdArraySerializers.ShortArraySerializer> objectIdGenerator0 = (ObjectIdGenerator<StdArraySerializers.ShortArraySerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(objectIdGenerator0).generateId(any());\n    ObjectIdGenerator<StdArraySerializers.ShortArraySerializer> objectIdGenerator1 = (ObjectIdGenerator<StdArraySerializers.ShortArraySerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());\n    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct(javaType0, propertyName0, objectIdGenerator1, true);\n    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);\n    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);\n    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) null);\n    beanSerializerBase0.serialize(beanSerializer0, jsonGenerator0, serializerProvider0);\n}",
    "testName" : "test1313"
  },
  "test1010" : {
    "methodSignature" : "public void serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer) throws IOException",
    "methodName" : "serializeWithType",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1010() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    PropertyName propertyName0 = PropertyName.construct(\"O36KM|PeT+sa^ TXf)\");\n    ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator0 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(objectIdGenerator0).generateId(any());\n    ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator1 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());\n    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator1, false);\n    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"O36KM|PeT+sa^ TXf)\");\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    IOContext iOContext0 = new IOContext(bufferRecycler0, beanSerializer0, false);\n    byte[] byteArray0 = new byte[17];\n    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;\n    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArray0, 17, false);\n    beanSerializerBase0.serializeWithType(jsonEncoding0, uTF8JsonGenerator0, serializerProvider0, (TypeSerializer) null);\n}",
    "testName" : "test1010"
  },
  "test1111" : {
    "methodSignature" : "public void serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer) throws IOException",
    "methodName" : "serializeWithType",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    JsonFactory jsonFactory0 = new JsonFactory();\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    Class<StringArraySerializer> class0 = StringArraySerializer.class;\n    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withFilterId(class0);\n    AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer((TypeIdResolver) null, (BeanProperty) null, \"\");\n    IteratorSerializer iteratorSerializer0 = new IteratorSerializer(simpleType0, false, asExternalTypeSerializer0);\n    beanSerializerBase0.serializeWithType(iteratorSerializer0, jsonGenerator0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);\n}",
    "testName" : "test1111"
  },
  "test011" : {
    "methodSignature" : "public boolean isUnwrappingSerializer()",
    "methodName" : "isUnwrappingSerializer",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    JavaType javaType0 = TypeFactory.unknownType();\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(javaType0);\n    NameTransformer nameTransformer0 = NameTransformer.NOP;\n    JsonSerializer<Object> jsonSerializer0 = beanSerializer0.unwrappingSerializer(nameTransformer0);\n    jsonSerializer0.isUnwrappingSerializer();\n}",
    "testName" : "test011"
  },
  "test033" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test033() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[8];\n    MapperFeature mapperFeature0 = MapperFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME;\n    mapperFeatureArray0[0] = mapperFeature0;\n    mapperFeatureArray0[1] = mapperFeatureArray0[0];\n    mapperFeatureArray0[2] = mapperFeature0;\n    mapperFeatureArray0[3] = mapperFeature0;\n    mapperFeatureArray0[4] = mapperFeatureArray0[1];\n    mapperFeatureArray0[5] = mapperFeature0;\n    mapperFeatureArray0[6] = mapperFeatureArray0[0];\n    MapperFeature mapperFeature1 = MapperFeature.DEFAULT_VIEW_INCLUSION;\n    mapperFeatureArray0[7] = mapperFeature1;\n    objectMapper0.disable(mapperFeatureArray0);\n    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();\n    Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;\n    JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer(class0);\n    jsonSerializer0.usesObjectId();\n}",
    "testName" : "test033"
  },
  "test055" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test055() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();\n    Class<JavaType> class0 = JavaType.class;\n    JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findPrimaryPropertySerializer(class0, (BeanProperty) null);\n    jsonSerializer0.usesObjectId();\n}",
    "testName" : "test055"
  },
  "test077" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test077() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    Class<StdArraySerializers.DoubleArraySerializer> class1 = StdArraySerializers.DoubleArraySerializer.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);\n    boolean boolean0 = beanSerializer0.usesObjectId();\n}",
    "testName" : "test077"
  },
  "test099" : {
    "methodSignature" : "public void serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer) throws IOException",
    "methodName" : "serializeWithType",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    JsonFactory jsonFactory0 = new JsonFactory();\n    ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();\n    JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((OutputStream) byteArrayOutputStream0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    AsExternalTypeSerializer asExternalTypeSerializer0 = new AsExternalTypeSerializer((TypeIdResolver) null, (BeanProperty) null, \"\");\n    IteratorSerializer iteratorSerializer0 = new IteratorSerializer(simpleType0, false, asExternalTypeSerializer0);\n    beanSerializer0.serializeWithType(iteratorSerializer0, jsonGenerator0, defaultSerializerProvider_Impl0, asExternalTypeSerializer0);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException",
    "methodName" : "getSchema",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    Class<StringArraySerializer> class0 = StringArraySerializer.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withFilterId(simpleType0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    beanSerializerBase0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) class0);\n}",
    "testName" : "test1616"
  },
  "test1717" : {
    "methodSignature" : "public boolean isContainerType()",
    "methodName" : "isContainerType",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1717() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    JsonFormatVisitorWrapper.Base jsonFormatVisitorWrapper_Base0 = new JsonFormatVisitorWrapper.Base();\n    beanSerializer0.acceptJsonFormatVisitor(jsonFormatVisitorWrapper_Base0, simpleType0);\n    simpleType0.isContainerType();\n}",
    "testName" : "test1717"
  },
  "test1414" : {
    "methodSignature" : "public void serializeWithType(T value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer) throws IOException",
    "methodName" : "serializeWithType",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1414() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    PropertyName propertyName0 = PropertyName.construct(\"O36KM|PeT+sa^ TXf)\");\n    ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator0 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    doReturn((Object) null).when(objectIdGenerator0).generateId(any());\n    ObjectIdGenerator<AsPropertyTypeSerializer> objectIdGenerator1 = (ObjectIdGenerator<AsPropertyTypeSerializer>) mock(ObjectIdGenerator.class, new ViolatedAssumptionAnswer());\n    doReturn(objectIdGenerator0).when(objectIdGenerator1).newForSerialization(any());\n    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) objectIdGenerator1, true);\n    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();\n    MockPrintStream mockPrintStream0 = new MockPrintStream(\"O36KM|PeT+sa^ TXf)\");\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    IOContext iOContext0 = new IOContext(bufferRecycler0, beanSerializer0, true);\n    byte[] byteArray0 = new byte[17];\n    JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;\n    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 3, objectMapper0, mockPrintStream0, byteArray0, 17, false);\n    beanSerializerBase0.serializeWithType(jsonEncoding0, uTF8JsonGenerator0, serializerProvider0, (TypeSerializer) null);\n}",
    "testName" : "test1414"
  },
  "test1515" : {
    "methodSignature" : "public int size()",
    "methodName" : "size",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1515() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    DefaultSerializerProvider.Impl defaultSerializerProvider_Impl0 = new DefaultSerializerProvider.Impl();\n    JsonNode jsonNode0 = beanSerializer0.getSchema((SerializerProvider) defaultSerializerProvider_Impl0, (Type) simpleType0);\n    jsonNode0.size();\n}",
    "testName" : "test1515"
  },
  "test000" : {
    "methodSignature" : "public Iterator<PropertyWriter> properties()",
    "methodName" : "properties",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test000() throws Throwable {\n    Class<StringArraySerializer> class0 = StringArraySerializer.class;\n    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    Iterator<PropertyWriter> iterator0 = beanSerializer0.properties();\n}",
    "testName" : "test000"
  },
  "test022" : {
    "methodSignature" : "public <T> T convertValue(Object fromValue, JavaType toValueType) throws IllegalArgumentException",
    "methodName" : "convertValue",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    JsonFactory jsonFactory0 = new JsonFactory(objectMapper0);\n    objectMapper0.convertValue((Object) jsonFactory0, (JavaType) simpleType0);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;\n    objectMapper0.setSerializationInclusion(jsonInclude_Include0);\n    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();\n    Class<BeanPropertyWriter> class0 = BeanPropertyWriter.class;\n    JsonSerializer<Object> jsonSerializer0 = serializerProvider0.findValueSerializer(class0);\n    jsonSerializer0.usesObjectId();\n}",
    "testName" : "test044"
  },
  "test066" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test066() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) simpleType0, propertyName0, (ObjectIdGenerator<?>) null, false);\n    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SerializerProvider serializerProvider0 = objectMapper0.getSerializerProviderInstance();\n    JsonSerializer<?> jsonSerializer0 = beanSerializerBase0.createContextual(serializerProvider0, (BeanProperty) null);\n    jsonSerializer0.usesObjectId();\n}",
    "testName" : "test066"
  },
  "test088" : {
    "methodSignature" : "public boolean usesObjectId()",
    "methodName" : "usesObjectId",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test088() throws Throwable {\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    Class<HashMap> class0 = HashMap.class;\n    Class<StdArraySerializers.DoubleArraySerializer> class1 = StdArraySerializers.DoubleArraySerializer.class;\n    MapType mapType0 = typeFactory0.constructMapType(class0, class1, class1);\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(mapType0);\n    CollectionLikeType collectionLikeType0 = CollectionLikeType.upgradeFrom(mapType0, mapType0);\n    Class<ObjectIdGenerators.IntSequenceGenerator> class2 = ObjectIdGenerators.IntSequenceGenerator.class;\n    Class<ObjectIdResolver> class3 = ObjectIdResolver.class;\n    ObjectIdInfo objectIdInfo0 = new ObjectIdInfo((PropertyName) null, class2, class2, class3);\n    PropertyBasedObjectIdGenerator propertyBasedObjectIdGenerator0 = new PropertyBasedObjectIdGenerator(objectIdInfo0, (BeanPropertyWriter) null);\n    ObjectIdWriter objectIdWriter0 = ObjectIdWriter.construct((JavaType) collectionLikeType0, (PropertyName) null, (ObjectIdGenerator<?>) propertyBasedObjectIdGenerator0, false);\n    BeanSerializerBase beanSerializerBase0 = beanSerializer0.withObjectIdWriter(objectIdWriter0);\n    boolean boolean0 = beanSerializerBase0.usesObjectId();\n}",
    "testName" : "test088"
  },
  "test1818" : {
    "methodSignature" : "public boolean isContainerType()",
    "methodName" : "isContainerType",
    "className" : "com.fasterxml.jackson.databind.ser.std.BeanSerializerBase",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1818() throws Throwable {\n    SimpleType simpleType0 = (SimpleType) MapSerializer.UNSPECIFIED_TYPE;\n    BeanSerializer beanSerializer0 = BeanSerializer.createDummy(simpleType0);\n    beanSerializer0.acceptJsonFormatVisitor((JsonFormatVisitorWrapper) null, simpleType0);\n    simpleType0.isContainerType();\n}",
    "testName" : "test1818"
  }
}