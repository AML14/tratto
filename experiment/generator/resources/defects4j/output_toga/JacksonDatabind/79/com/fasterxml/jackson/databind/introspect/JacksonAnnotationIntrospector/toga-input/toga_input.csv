focal_method,test_prefix,docstring
"public boolean isTypeIdVisible() {
    return _typeIdVisible;
}","public void test000() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructNoTypeResolverBuilder();
    assertFalse(stdTypeResolverBuilder0.isTypeIdVisible());
}",""
"@Override
public Boolean isTypeId(AnnotatedMember member) {
    return _hasAnnotation(member, JsonTypeId.class);
}","public void test011() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    // Undeclared exception!
    try {
        jacksonAnnotationIntrospector0.isTypeId((AnnotatedMember) null);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.AnnotationIntrospector"", e);
    }
}",""
"public String getTypeProperty() {
    return _typeProperty;
}","public void test044() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    StdTypeResolverBuilder stdTypeResolverBuilder0 = jacksonAnnotationIntrospector0._constructStdTypeResolverBuilder();
    assertNull(stdTypeResolverBuilder0.getTypeProperty());
}",""
"protected Object readResolve() {
    if (_annotationsInside == null) {
        _annotationsInside = new LRUMap<Class<?>, Boolean>(48, 48);
    }
    return this;
}","public void test055() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Object object0 = jacksonAnnotationIntrospector0.readResolve();
    assertSame(jacksonAnnotationIntrospector0, object0);
}",""
"protected Object readResolve() {
    if (_annotationsInside == null) {
        _annotationsInside = new LRUMap<Class<?>, Boolean>(48, 48);
    }
    return this;
}","public void test066() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    jacksonAnnotationIntrospector0._annotationsInside = null;
    Object object0 = jacksonAnnotationIntrospector0.readResolve();
    assertSame(object0, jacksonAnnotationIntrospector0);
}",""
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return _newReader(getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test077() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = objectMapper0.setAnnotationIntrospectors(jacksonAnnotationIntrospector0, jacksonAnnotationIntrospector0);
    ObjectReader objectReader0 = objectMapper1.readerForUpdating(jacksonAnnotationIntrospector0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"/*
    /**********************************************************
    /* General annotations
    /**********************************************************
     */
/**
 * Since 2.6, we have supported use of {@link JsonProperty} for specifying
 * explicit serialized name
 */
@Override
public String findEnumValue(Enum<?> value) {
    // 11-Jun-2015, tatu: As per [databind#677], need to allow explicit naming.
    //   Unfortunately can not quite use standard AnnotatedClass here (due to various
    //   reasons, including odd representation JVM uses); has to do for now
    try {
        // We know that values are actually static fields with matching name so:
        Field f = value.getClass().getField(value.name());
        if (f != null) {
            JsonProperty prop = f.getAnnotation(JsonProperty.class);
            if (prop != null) {
                String n = prop.value();
                if (n != null && !n.isEmpty()) {
                    return n;
                }
            }
        }
    } catch (SecurityException e) {
        // 17-Sep-2015, tatu: Anything we could/should do here?
    } catch (NoSuchFieldException e) {
        // 17-Sep-2015, tatu: should not really happen. But... can we do anything?
    }
    return value.name();
}","public void test088() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    ChronoUnit chronoUnit0 = ChronoUnit.CENTURIES;
    String string0 = jacksonAnnotationIntrospector0.findEnumValue(chronoUnit0);
    assertEquals(""CENTURIES"", string0);
}",""
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return _newReader(getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test099() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SerializationFeature serializationFeature0 = SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID;
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(serializationFeature0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"/*
    /**********************************************************
    /* General class annotations
    /**********************************************************
     */
@Override
public PropertyName findRootName(AnnotatedClass ac) {
    JsonRootName ann = _findAnnotation(ac, JsonRootName.class);
    if (ann == null) {
        return null;
    }
    String ns = ann.namespace();
    if (ns != null && ns.length() == 0) {
        ns = null;
    }
    return PropertyName.construct(ann.value(), ns);
}","public void test1010() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0.findRootName(annotatedClass0);
    assertNull(propertyName0);
}",""
"@Override
// since 2.6, remove from 2.7 or later
@Deprecated
public String[] findPropertiesToIgnore(Annotated ac) {
    JsonIgnoreProperties ignore = _findAnnotation(ac, JsonIgnoreProperties.class);
    return (ignore == null) ? null : ignore.value();
}","public void test1111() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    String[] stringArray0 = jacksonAnnotationIntrospector0.findPropertiesToIgnore((Annotated) annotatedConstructor0);
    assertNull(stringArray0);
}",""
"@SuppressWarnings(""resource"")
public String writeValueAsString(Object value) throws JsonProcessingException {
    // alas, we have to pull the recycler directly here...
    SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler());
    try {
        _configAndWriteValue(_jsonFactory.createGenerator(sw), value);
    } catch (JsonProcessingException e) {
        // to support [JACKSON-758]
        throw e;
    } catch (IOException e) {
        // shouldn't really happen, but is declared as possibility so:
        throw JsonMappingException.fromUnexpectedIOE(e);
    }
    return sw.getAndClear();
}","public void test1212() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    ObjectMapper objectMapper0 = new ObjectMapper();
    try {
        objectMapper0.writeValueAsString(jacksonAnnotationIntrospector0);
        fail(""Expecting exception: IOException"");
    } catch (IOException e) {
        //
        // No serializer found for class com.fasterxml.jackson.databind.introspect.JacksonAnnotationIntrospector and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) )
        //
        verifyException(""com.fasterxml.jackson.databind.JsonMappingException"", e);
    }
}","/**
 *  Method that can be used to serialize any Java value as
 *  a String. Functionally equivalent to calling
 *  {@link #writeValue(Writer,Object)} with {@link java.io.StringWriter}
 *  and constructing String, but more efficient.
 * <p>
 *  Note: prior to version 2.1, throws clause included {@link IOException}; 2.1 removed it.
 */"
"@Override
public String findClassDescription(AnnotatedClass ac) {
    JsonClassDescription ann = _findAnnotation(ac, JsonClassDescription.class);
    return (ann == null) ? null : ann.value();
}","public void test1313() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    String string0 = jacksonAnnotationIntrospector0.findClassDescription(annotatedClass0);
    assertNull(string0);
}",""
"public ObjectReader readerForUpdating(Object valueToUpdate) {
    JavaType t = _typeFactory.constructType(valueToUpdate.getClass());
    return _newReader(getDeserializationConfig(), t, valueToUpdate, null, _injectableValues);
}","public void test1414() throws Throwable {
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectReader objectReader0 = objectMapper0.readerForUpdating(objectMapper0);
    assertNotNull(objectReader0);
}","/**
 * Factory method for constructing {@link ObjectReader} that will
 * update given Object (usually Bean, but can be a Collection or Map
 * as well, but NOT an array) with JSON data. Deserialization occurs
 * normally except that the root-level value in JSON is not used for
 * instantiating a new object; instead give updateable object is used
 * as root.
 * Runtime type of value object is used for locating deserializer,
 * unless overridden by other factory methods of {@link ObjectReader}
 */"
"@Override
public List<NamedType> findSubtypes(Annotated a) {
    JsonSubTypes t = _findAnnotation(a, JsonSubTypes.class);
    if (t == null)
        return null;
    JsonSubTypes.Type[] types = t.value();
    ArrayList<NamedType> result = new ArrayList<NamedType>(types.length);
    for (JsonSubTypes.Type type : types) {
        result.add(new NamedType(type.value(), type.name()));
    }
    return result;
}","public void test1515() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    List<NamedType> list0 = jacksonAnnotationIntrospector0.findSubtypes(annotatedConstructor0);
    assertNull(list0);
}",""
"@Override
public String findTypeName(AnnotatedClass ac) {
    JsonTypeName tn = _findAnnotation(ac, JsonTypeName.class);
    return (tn == null) ? null : tn.value();
}","public void test1616() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.LONG_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    String string0 = jacksonAnnotationIntrospector0.findTypeName(annotatedClass0);
    assertNull(string0);
}",""
"@Override
public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {
    JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);
    if (ref != null) {
        objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());
    }
    return objectIdInfo;
}","public void test1717() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    ObjectIdInfo objectIdInfo0 = jacksonAnnotationIntrospector0.findObjectReferenceInfo(annotatedConstructor0, (ObjectIdInfo) null);
    assertNull(objectIdInfo0);
}",""
"@Override
public Object findKeySerializer(Annotated a) {
    JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);
    if (ann != null) {
        @SuppressWarnings(""rawtypes"")
        Class<? extends JsonSerializer> serClass = ann.keyUsing();
        if (serClass != JsonSerializer.None.class) {
            return serClass;
        }
    }
    return null;
}","public void test1818() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findKeySerializer(annotatedConstructor0);
    assertNull(object0);
}",""
"@Override
public Object findContentSerializer(Annotated a) {
    JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);
    if (ann != null) {
        @SuppressWarnings(""rawtypes"")
        Class<? extends JsonSerializer> serClass = ann.contentUsing();
        if (serClass != JsonSerializer.None.class) {
            return serClass;
        }
    }
    return null;
}","public void test1919() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findContentSerializer(annotatedConstructor0);
    assertNull(object0);
}",""
"@Override
public Object findNullSerializer(Annotated a) {
    JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);
    if (ann != null) {
        @SuppressWarnings(""rawtypes"")
        Class<? extends JsonSerializer> serClass = ann.nullsUsing();
        if (serClass != JsonSerializer.None.class) {
            return serClass;
        }
    }
    return null;
}","public void test2020() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findNullSerializer(annotatedConstructor0);
    assertNull(object0);
}",""
"// since 2.7
@Deprecated
public JsonInclude.Include findSerializationInclusion(Annotated a, JsonInclude.Include defValue) {
    return defValue;
}","public void test2121() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_EMPTY;
    JsonInclude.Include jsonInclude_Include1 = jacksonAnnotationIntrospector0.findSerializationInclusion(annotatedConstructor0, jsonInclude_Include0);
    assertSame(jsonInclude_Include1, jsonInclude_Include0);
}","/**
 *  Method for checking whether given annotated entity (class, method,
 *  field) defines which Bean/Map properties are to be included in
 *  serialization.
 *  If no annotation is found, method should return given second
 *  argument; otherwise value indicated by the annotation.
 * <p>
 *  Note that meaning of inclusion value depends on whether it is for
 *  a Class or property (field/method/constructor): in former case,
 *  it is the default for all properties; in latter case it is specific
 *  override for annotated property.
 *
 *  @return Enumerated value indicating which properties to include
 *    in serialization
 *
 *  @deprecated Since 2.7 Use {@link #findPropertyInclusion} instead
 */"
"// since 2.7
@Deprecated
public JsonInclude.Include findSerializationInclusionForContent(Annotated a, JsonInclude.Include defValue) {
    return defValue;
}","public void test2222() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_DEFAULT;
    JsonInclude.Include jsonInclude_Include1 = jacksonAnnotationIntrospector0.findSerializationInclusionForContent(annotatedConstructor0, jsonInclude_Include0);
    assertSame(jsonInclude_Include0, jsonInclude_Include1);
}","/**
 * Method for checking whether content (entries) of a {@link java.util.Map} property
 * are to be included during serialization or not.
 * NOTE: this is NOT called for POJO properties, or array/Collection elements.
 *
 * @since 2.5
 *
 * @deprecated Since 2.7 Use {@link #findPropertyInclusion} instead
 */"
"@Override
@Deprecated
public Class<?> findSerializationKeyType(Annotated am, JavaType baseType) {
    JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);
    return (ann == null) ? null : _classIfExplicit(ann.keyAs());
}","public void test2424() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Class<?> class0 = jacksonAnnotationIntrospector0.findSerializationKeyType(annotatedConstructor0, (JavaType) null);
    assertNull(class0);
}",""
"@Override
@Deprecated
public Class<?> findSerializationContentType(Annotated am, JavaType baseType) {
    JsonSerialize ann = _findAnnotation(am, JsonSerialize.class);
    return (ann == null) ? null : _classIfExplicit(ann.contentAs());
}","public void test2525() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Class<?> class0 = jacksonAnnotationIntrospector0.findSerializationContentType(annotatedConstructor0, (JavaType) null);
    assertNull(class0);
}",""
"@Override
public JsonSerialize.Typing findSerializationTyping(Annotated a) {
    JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);
    return (ann == null) ? null : ann.typing();
}","public void test2626() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    jacksonAnnotationIntrospector0.findSerializationTyping(annotatedConstructor0);
}",""
"@Override
public Object findSerializationContentConverter(AnnotatedMember a) {
    JsonSerialize ann = _findAnnotation(a, JsonSerialize.class);
    return (ann == null) ? null : _classIfExplicit(ann.contentConverter(), Converter.None.class);
}","public void test2727() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    Object object0 = jacksonAnnotationIntrospector0.findSerializationContentConverter(annotatedConstructor0);
    assertNull(object0);
}",""
"@Override
public JsonPOJOBuilder.Value findPOJOBuilderConfig(AnnotatedClass ac) {
    JsonPOJOBuilder ann = _findAnnotation(ac, JsonPOJOBuilder.class);
    return (ann == null) ? null : new JsonPOJOBuilder.Value(ann);
}","public void test2929() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.INT_DESC;
    BeanSerializerBuilder beanSerializerBuilder0 = new BeanSerializerBuilder(basicBeanDescription0);
    AnnotatedClass annotatedClass0 = beanSerializerBuilder0.getClassInfo();
    JsonPOJOBuilder.Value jsonPOJOBuilder_Value0 = jacksonAnnotationIntrospector0.findPOJOBuilderConfig(annotatedClass0);
    assertNull(jsonPOJOBuilder_Value0);
}",""
"@Override
public boolean hasCreatorAnnotation(Annotated a) {
    /* No dedicated disabling; regular @JsonIgnore used
         * if needs to be ignored (and if so, is handled prior
         * to this method getting called)
         */
    JsonCreator ann = _findAnnotation(a, JsonCreator.class);
    if (ann != null) {
        return (ann.mode() != JsonCreator.Mode.DISABLED);
    }
    // 19-Apr-2016, tatu: As per [databind#1197], [databind#1122] (and some related),
    //    may or may not consider it a creator
    if (_cfgConstructorPropertiesImpliesCreator) {
        if (a instanceof AnnotatedConstructor) {
            if (_jdk7Helper != null) {
                Boolean b = _jdk7Helper.hasCreatorAnnotation(a);
                if (b != null) {
                    return b.booleanValue();
                }
            }
        }
    }
    return false;
}","public void test3030() throws Throwable {
    BasicBeanDescription basicBeanDescription0 = BasicClassIntrospector.STRING_DESC;
    AnnotatedConstructor annotatedConstructor0 = basicBeanDescription0.findDefaultConstructor();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector1 = jacksonAnnotationIntrospector0.setConstructorPropertiesImpliesCreator(false);
    boolean boolean0 = jacksonAnnotationIntrospector1.hasCreatorAnnotation(annotatedConstructor0);
    assertFalse(boolean0);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test3131() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<AnnotatedMethod> class0 = AnnotatedMethod.class;
    Class<?> class1 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class0);
    assertNull(class1);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test3232() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<?> class0 = jacksonAnnotationIntrospector0._classIfExplicit((Class<?>) null, (Class<?>) null);
    assertNull(class0);
}",""
"protected Class<?> _classIfExplicit(Class<?> cls, Class<?> implicit) {
    cls = _classIfExplicit(cls);
    return (cls == null || cls == implicit) ? null : cls;
}","public void test3333() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    Class<Boolean> class0 = Boolean.class;
    Class<AnnotatedMethod> class1 = AnnotatedMethod.class;
    Class<?> class2 = jacksonAnnotationIntrospector0._classIfExplicit(class0, class1);
    assertNotNull(class2);
}",""
"public boolean isEmpty() {
    return (_namespace == null) && (_simpleName.isEmpty());
}","public void test3435() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""; expected Class<JsonDeserializer>"", (String) null);
    assertFalse(propertyName0.isEmpty());
}","/**
 *  Method that is basically equivalent of:
 * <pre>
 *    !hasSimpleName() &lt;&lt; !hasNamespace();
 * </pre>
 *
 *  @since 2.4
 */"
"public boolean isEmpty() {
    return (_namespace == null) && (_simpleName.isEmpty());
}","public void test3536() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName("""", """");
    assertTrue(propertyName0.isEmpty());
}","/**
 *  Method that is basically equivalent of:
 * <pre>
 *    !hasSimpleName() &lt;&lt; !hasNamespace();
 * </pre>
 *
 *  @since 2.4
 */"
"public boolean hasNamespace() {
    return _namespace != null;
}","public void test3637() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""."", ""."");
    assertTrue(propertyName0.hasNamespace());
}",""
"public boolean isEmpty() {
    return (_namespace == null) && (_simpleName.isEmpty());
}","public void test3738() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""Unable to load JDK7 annotation types; will have to skip"", """");
    assertFalse(propertyName0.isEmpty());
}","/**
 *  Method that is basically equivalent of:
 * <pre>
 *    !hasSimpleName() &lt;&lt; !hasNamespace();
 * </pre>
 *
 *  @since 2.4
 */"
"public boolean hasNamespace() {
    return _namespace != null;
}","public void test3739() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._propertyName(""Unable to load JDK7 annotation types; will have to skip"", """");
    assertFalse(propertyName0.hasNamespace());
}",""
"protected PropertyName _findConstructorName(Annotated a) {
    if (a instanceof AnnotatedParameter) {
        AnnotatedParameter p = (AnnotatedParameter) a;
        AnnotatedWithParams ctor = p.getOwner();
        if (ctor != null) {
            if (_jdk7Helper != null) {
                PropertyName name = _jdk7Helper.findConstructorName(p);
                if (name != null) {
                    return name;
                }
            }
        }
    }
    return null;
}","public void test3840() throws Throwable {
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = new JacksonAnnotationIntrospector();
    AnnotationMap annotationMap0 = new AnnotationMap();
    AnnotatedParameter annotatedParameter0 = new AnnotatedParameter((AnnotatedWithParams) null, (JavaType) null, annotationMap0, (-80));
    PropertyName propertyName0 = jacksonAnnotationIntrospector0._findConstructorName(annotatedParameter0);
    assertNull(propertyName0);
}",""
