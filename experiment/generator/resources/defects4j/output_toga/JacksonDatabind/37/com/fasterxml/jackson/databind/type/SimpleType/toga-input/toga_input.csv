focal_method,test_prefix,docstring
"@Override
public SimpleType withContentValueHandler(Object h) {
    // no content type, so:
    throw new IllegalArgumentException(""Simple types have no content types; can not call withContenValueHandler()"");
}","public void test011() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    // Undeclared exception!
    try {
        simpleType0.withContentValueHandler(simpleType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContenValueHandler()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",""
"@Override
public JavaType withContentTypeHandler(Object h) {
    // no content type, so:
    throw new IllegalArgumentException(""Simple types have no content types; can not call withContenTypeHandler()"");
}","public void test022() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_CLASS;
    // Undeclared exception!
    try {
        simpleType0.withContentTypeHandler(""Can not construct SimpleType for a Collection (class: "");
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContenTypeHandler()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",""
"/*
    /**********************************************************
    /* Public API
    /**********************************************************
     */
@Override
public boolean isContainerType() {
    return false;
}","public void test033() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    boolean boolean0 = simpleType0.isContainerType();
    assertFalse(boolean0);
}",""
"@Override
public JavaType withContentType(JavaType contentType) {
    throw new IllegalArgumentException(""Simple types have no content types; can not call withContentType()"");
}","public void test044() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    // Undeclared exception!
    try {
        simpleType0.withContentType(simpleType0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Simple types have no content types; can not call withContentType()
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}",""
"@Override
public boolean isArrayType() {
    return false;
}","public void test055() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
    ReferenceType referenceType1 = referenceType0.withTypeHandler(simpleType0);
    assertFalse(referenceType1.isArrayType());
}",""
"public final boolean useStaticType() {
    return _asStatic;
}","public void test066() throws Throwable {
    Class<Object> class0 = Object.class;
    SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
    assertFalse(simpleType0.useStaticType());
}","/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */"
"public String getErasedSignature() {
    StringBuilder sb = new StringBuilder(40);
    getErasedSignature(sb);
    return sb.toString();
}","public void test077() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_LONG;
    String string0 = simpleType0.getErasedSignature();
    assertEquals(""J"", string0);
}","/**
 * Method for accessing signature without generic
 * type information, in form compatible with all versions
 * of JVM, and specifically used for type descriptions
 * when generating byte code.
 */"
"@Override
protected JavaType _narrow(Class<?> subclass) {
    if (_class == subclass) {
        return this;
    }
    // Should we check that there is a sub-class relationship?
    // 15-Jan-2016, tatu: Almost yes, but there are some complications with
    //    placeholder values, so no.
    /*
        if (!_class.isAssignableFrom(subclass)) {
            throw new IllegalArgumentException(""Class ""+subclass.getName()+"" not sub-type of ""
                    +_class.getName());
        }
        */
    // 15-Jan-2015, tatu: Not correct; should really re-resolve...
    return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, _asStatic);
}","public void test088() throws Throwable {
    Class<String> class0 = String.class;
    SimpleType simpleType0 = SimpleType.construct(class0);
    JavaType javaType0 = simpleType0._narrow(class0);
    assertSame(javaType0, simpleType0);
}",""
"@Deprecated
public static SimpleType construct(Class<?> cls) {
    /* Let's add sanity checks, just to ensure no
         * Map/Collection entries are constructed
         */
    if (Map.class.isAssignableFrom(cls)) {
        throw new IllegalArgumentException(""Can not construct SimpleType for a Map (class: "" + cls.getName() + "")"");
    }
    if (Collection.class.isAssignableFrom(cls)) {
        throw new IllegalArgumentException(""Can not construct SimpleType for a Collection (class: "" + cls.getName() + "")"");
    }
    // ... and while we are at it, not array types either
    if (cls.isArray()) {
        throw new IllegalArgumentException(""Can not construct SimpleType for an array (class: "" + cls.getName() + "")"");
    }
    return new SimpleType(cls);
}","public void test099() throws Throwable {
    Class<HashMap> class0 = HashMap.class;
    // Undeclared exception!
    try {
        SimpleType.construct(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not construct SimpleType for a Map (class: java.util.HashMap)
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}","/**
 *  Method that should NOT to be used by application code:
 *  it does NOT properly handle inspection of super-types, so neither parent
 *  Classes nor implemented Interfaces are accessible with resulting type
 *  instance. Instead, please use {@link TypeFactory}'s <code>constructType</code>
 *  methods which handle introspection appropriately.
 * <p>
 *  Note that prior to 2.7, method usage was not limited and would typically
 *  have worked acceptably: the problem comes from inability to resolve super-type
 *  information, for which {@link TypeFactory} is needed.
 *
 *  @deprecated Since 2.7
 */"
"@Deprecated
public static SimpleType construct(Class<?> cls) {
    /* Let's add sanity checks, just to ensure no
         * Map/Collection entries are constructed
         */
    if (Map.class.isAssignableFrom(cls)) {
        throw new IllegalArgumentException(""Can not construct SimpleType for a Map (class: "" + cls.getName() + "")"");
    }
    if (Collection.class.isAssignableFrom(cls)) {
        throw new IllegalArgumentException(""Can not construct SimpleType for a Collection (class: "" + cls.getName() + "")"");
    }
    // ... and while we are at it, not array types either
    if (cls.isArray()) {
        throw new IllegalArgumentException(""Can not construct SimpleType for an array (class: "" + cls.getName() + "")"");
    }
    return new SimpleType(cls);
}","public void test1010() throws Throwable {
    Class<LinkedList> class0 = LinkedList.class;
    // Undeclared exception!
    try {
        SimpleType.construct(class0);
        fail(""Expecting exception: IllegalArgumentException"");
    } catch (IllegalArgumentException e) {
        //
        // Can not construct SimpleType for a Collection (class: java.util.LinkedList)
        //
        verifyException(""com.fasterxml.jackson.databind.type.SimpleType"", e);
    }
}","/**
 *  Method that should NOT to be used by application code:
 *  it does NOT properly handle inspection of super-types, so neither parent
 *  Classes nor implemented Interfaces are accessible with resulting type
 *  instance. Instead, please use {@link TypeFactory}'s <code>constructType</code>
 *  methods which handle introspection appropriately.
 * <p>
 *  Note that prior to 2.7, method usage was not limited and would typically
 *  have worked acceptably: the problem comes from inability to resolve super-type
 *  information, for which {@link TypeFactory} is needed.
 *
 *  @deprecated Since 2.7
 */"
"@Override
public final boolean isPrimitive() {
    return _class.isPrimitive();
}","public void test1111() throws Throwable {
    Class<String> class0 = String.class;
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    JavaType javaType0 = simpleType0._narrow(class0);
    assertFalse(javaType0.isPrimitive());
}",""
"@Override
public SimpleType withTypeHandler(Object h) {
    if (_typeHandler == h) {
        return this;
    }
    return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);
}","public void test1212() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    SimpleType simpleType1 = simpleType0.withTypeHandler(simpleType0);
    assertNotSame(simpleType1, simpleType0);
}",""
"@Override
public SimpleType withTypeHandler(Object h) {
    if (_typeHandler == h) {
        return this;
    }
    return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);
}","public void test1313() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_ENUM;
    SimpleType simpleType1 = simpleType0.withTypeHandler((Object) null);
    assertSame(simpleType1, simpleType0);
}",""
"public boolean hasValueHandler() {
    return _valueHandler != null;
}","public void test1414() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    SimpleType simpleType1 = simpleType0.withValueHandler(simpleType0);
    assertTrue(simpleType1.hasValueHandler());
}","/**
 * @since 2.6
 */"
"@Override
public SimpleType withValueHandler(Object h) {
    if (h == _valueHandler) {
        return this;
    }
    return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic);
}","public void test1515() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    SimpleType simpleType1 = simpleType0.withValueHandler((Object) null);
    assertSame(simpleType1, simpleType0);
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    SimpleType other = (SimpleType) o;
    // Classes must be identical...
    if (other._class != this._class)
        return false;
    // And finally, generic bindings, if any
    TypeBindings b1 = _bindings;
    TypeBindings b2 = other._bindings;
    return b1.equals(b2);
}","public void test1616() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    SimpleType simpleType1 = simpleType0.withStaticTyping();
    boolean boolean0 = simpleType0.equals(simpleType1);
    assertTrue(boolean0);
}",""
"public final boolean useStaticType() {
    return _asStatic;
}","public void test1617() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    SimpleType simpleType1 = simpleType0.withStaticTyping();
    boolean boolean0 = simpleType0.equals(simpleType1);
    assertTrue(simpleType1.useStaticType());
}","/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */"
"public final boolean useStaticType() {
    return _asStatic;
}","public void test1718() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_BOOL;
    SimpleType simpleType1 = simpleType0.withStaticTyping();
    SimpleType simpleType2 = simpleType1.withStaticTyping();
    assertTrue(simpleType2.useStaticType());
}","/**
 * Accessor for checking whether handlers for dealing with values of
 * this type should use static typing (as opposed to dynamic typing).
 * Note that while value of 'true' does mean that static typing is to
 * be used, value of 'false' may still be overridden by other settings.
 *
 * @since 2.2
 */"
"/*
    /**********************************************************
    /* Support for producing signatures
    /**********************************************************
     */
//public abstract String toCanonical();
/**
 * Method for accessing signature that contains generic
 * type information, in form compatible with JVM 1.5
 * as per JLS. It is a superset of {@link #getErasedSignature},
 * in that generic information can be automatically removed
 * if necessary (just remove outermost
 * angle brackets along with content inside)
 */
public String getGenericSignature() {
    StringBuilder sb = new StringBuilder(40);
    getGenericSignature(sb);
    return sb.toString();
}","public void test1819() throws Throwable {
    TypeFactory typeFactory0 = TypeFactory.instance;
    Class<HashMap> class0 = HashMap.class;
    MapType mapType0 = typeFactory0.constructRawMapType(class0);
    SimpleType simpleType0 = new SimpleType(mapType0);
    String string0 = simpleType0.getGenericSignature();
    assertEquals(""Ljava/util/HashMap<Ljava/lang/Object;Ljava/lang/Object;>;"", string0);
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    SimpleType other = (SimpleType) o;
    // Classes must be identical...
    if (other._class != this._class)
        return false;
    // And finally, generic bindings, if any
    TypeBindings b1 = _bindings;
    TypeBindings b2 = other._bindings;
    return b1.equals(b2);
}","public void test1920() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_INT;
    boolean boolean0 = simpleType0.equals(simpleType0);
    assertTrue(boolean0);
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    SimpleType other = (SimpleType) o;
    // Classes must be identical...
    if (other._class != this._class)
        return false;
    // And finally, generic bindings, if any
    TypeBindings b1 = _bindings;
    TypeBindings b2 = other._bindings;
    return b1.equals(b2);
}","public void test2021() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    boolean boolean0 = simpleType0.equals((Object) null);
    assertFalse(boolean0);
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    SimpleType other = (SimpleType) o;
    // Classes must be identical...
    if (other._class != this._class)
        return false;
    // And finally, generic bindings, if any
    TypeBindings b1 = _bindings;
    TypeBindings b2 = other._bindings;
    return b1.equals(b2);
}","public void test2122() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_COMPARABLE;
    MatchStrength matchStrength0 = MatchStrength.WEAK_MATCH;
    boolean boolean0 = simpleType0.equals(matchStrength0);
    assertFalse(boolean0);
}",""
"@Override
public boolean equals(Object o) {
    if (o == this)
        return true;
    if (o == null)
        return false;
    if (o.getClass() != getClass())
        return false;
    SimpleType other = (SimpleType) o;
    // Classes must be identical...
    if (other._class != this._class)
        return false;
    // And finally, generic bindings, if any
    TypeBindings b1 = _bindings;
    TypeBindings b2 = other._bindings;
    return b1.equals(b2);
}","public void test2223() throws Throwable {
    SimpleType simpleType0 = TypeFactory.CORE_TYPE_STRING;
    SimpleType simpleType1 = TypeFactory.CORE_TYPE_CLASS;
    boolean boolean0 = simpleType0.equals(simpleType1);
    assertFalse(boolean0);
}",""
