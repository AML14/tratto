{
  "test5757" : {
    "methodSignature" : "public SerializationConfig with(SerializationFeature first, SerializationFeature... features)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5757() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);\n    Class<SerializationFeature> class0 = SerializationFeature.class;\n    MapperConfig.collectFeatureDefaults(class0);\n    serializationConfig0.hasSerializationFeatures(9);\n    Locale locale0 = Locale.ITALIAN;\n    serializationConfig0.with(locale0);\n    SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;\n    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];\n    serializationFeatureArray0[0] = serializationFeature0;\n    serializationConfig0.with(serializationFeature0, serializationFeatureArray0);\n}",
    "testName" : "test5757"
  },
  "test2323" : {
    "methodSignature" : "public SerializationConfig withFilters(FilterProvider filterProvider)",
    "methodName" : "withFilters",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2323() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);\n    ClassLoader.getSystemClassLoader();\n    SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;\n    Object object1 = new Object();\n    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();\n    simpleFilterProvider0.setFailOnUnknownId(false);\n    serializationConfig0.withFilters(simpleFilterProvider0);\n}",
    "testName" : "test2323"
  },
  "test3434" : {
    "methodSignature" : "public SerializationConfig withRootName(PropertyName rootName)",
    "methodName" : "withRootName",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3434() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);\n    ClassLoader.getSystemClassLoader();\n    SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;\n    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();\n    PropertyName propertyName0 = PropertyName.construct(\"2nK2P>wkyeT{\\\"%.3N71\");\n    serializationConfig1.withRootName(propertyName0);\n}",
    "testName" : "test3434"
  },
  "test6868" : {
    "methodSignature" : "public SerializationConfig withDefaultPrettyPrinter(PrettyPrinter pp)",
    "methodName" : "withDefaultPrettyPrinter",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6868() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    JsonFactory jsonFactory0 = new JsonFactory();\n    jsonFactory0.copy();\n    PropertyName propertyName0 = PropertyName.construct(\"JSON\");\n    StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();\n    RootNameLookup rootNameLookup1 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver1, simpleMixInResolver0, rootNameLookup1);\n    SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);\n    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();\n    serializationConfig1.with(dateFormat0);\n    serializationConfig1.withRootName((PropertyName) null);\n    MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(\"@BYT?3tI]'[k<;&\");\n    serializationConfig0.withDefaultPrettyPrinter(minimalPrettyPrinter0);\n}",
    "testName" : "test6868"
  },
  "test7979" : {
    "methodSignature" : "public SerializationConfig without(SerializationFeature first, SerializationFeature... features)",
    "methodName" : "without",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7979() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    contextAttributes0.withoutSharedAttribute((Object) null);\n    Object object0 = new Object();\n    contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    serializationConfig0.initialize((JsonGenerator) null);\n    FormatFeature[] formatFeatureArray0 = new FormatFeature[0];\n    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);\n    serializationConfig1.getDefaultVisibilityChecker();\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;\n    serializationConfig0.with(jsonGenerator_Feature0);\n    JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;\n    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];\n    JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;\n    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature2;\n    jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;\n    jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature1;\n    jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;\n    JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.IGNORE_UNKNOWN;\n    jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature3;\n    jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;\n    jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature1;\n    serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);\n    SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;\n    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];\n    serializationFeatureArray0[0] = serializationFeature0;\n    serializationFeatureArray0[1] = serializationFeature0;\n    serializationFeatureArray0[2] = serializationFeature0;\n    serializationFeatureArray0[3] = serializationFeature0;\n    serializationFeatureArray0[4] = serializationFeature0;\n    serializationFeatureArray0[5] = serializationFeature0;\n    serializationFeatureArray0[6] = serializationFeature0;\n    SerializationFeature serializationFeature1 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;\n    serializationFeatureArray0[7] = serializationFeature1;\n    serializationFeatureArray0[8] = serializationFeature0;\n    serializationConfig1.without(serializationFeature0, serializationFeatureArray0);\n}",
    "testName" : "test7979"
  },
  "test2424" : {
    "methodSignature" : "public abstract T with(AnnotationIntrospector ai)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2424() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    BaseSettings baseSettings1 = baseSettings0.withClassIntrospector(basicClassIntrospector0);\n    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;\n    BaseSettings baseSettings2 = baseSettings1.withAppendedAnnotationIntrospector(jacksonAnnotationIntrospector0);\n    PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy) PropertyNamingStrategy.KEBAB_CASE;\n    BaseSettings baseSettings3 = baseSettings2.withPropertyNamingStrategy(propertyNamingStrategy_KebabCaseStrategy0);\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings3, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];\n    MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;\n    mapperFeatureArray0[0] = mapperFeature0;\n    MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_CREATORS;\n    mapperFeatureArray0[1] = mapperFeature1;\n    MapperFeature mapperFeature2 = MapperFeature.USE_GETTERS_AS_SETTERS;\n    mapperFeatureArray0[2] = mapperFeature2;\n    MapperFeature mapperFeature3 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;\n    mapperFeatureArray0[3] = mapperFeature3;\n    MapperFeature mapperFeature4 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;\n    mapperFeatureArray0[4] = mapperFeature4;\n    MapperFeature mapperFeature5 = MapperFeature.AUTO_DETECT_IS_GETTERS;\n    mapperFeatureArray0[5] = mapperFeature5;\n    MapperFeature mapperFeature6 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;\n    mapperFeatureArray0[6] = mapperFeature6;\n    MapperFeature mapperFeature7 = MapperFeature.AUTO_DETECT_FIELDS;\n    mapperFeatureArray0[7] = mapperFeature7;\n    MapperFeature mapperFeature8 = MapperFeature.USE_STD_BEAN_NAMING;\n    mapperFeatureArray0[8] = mapperFeature8;\n    SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeatureArray0);\n    serializationConfig1.with((AnnotationIntrospector) jacksonAnnotationIntrospector0);\n}",
    "testName" : "test2424"
  },
  "test6767" : {
    "methodSignature" : "public abstract T with(TimeZone tz)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6767() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    FormatFeature[] formatFeatureArray0 = new FormatFeature[0];\n    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);\n    serializationConfig1.getDefaultVisibilityChecker();\n    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-421), \"W3QSP2'F6\");\n    serializationConfig0.with((TimeZone) simpleTimeZone0);\n}",
    "testName" : "test6767"
  },
  "test7878" : {
    "methodSignature" : "public SerializationConfig without(SerializationFeature first, SerializationFeature... features)",
    "methodName" : "without",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7878() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    ContextAttributes.Impl.getEmpty();\n    FormatFeature[] formatFeatureArray0 = new FormatFeature[0];\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withOverrides((ClassIntrospector.MixInResolver) null);\n    SimpleMixInResolver simpleMixInResolver2 = simpleMixInResolver1.withoutLocalDefinitions();\n    SimpleMixInResolver simpleMixInResolver3 = simpleMixInResolver2.copy();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver3, rootNameLookup0);\n    SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;\n    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];\n    serializationFeatureArray0[0] = serializationFeature0;\n    SerializationFeature serializationFeature1 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;\n    serializationFeatureArray0[1] = serializationFeature1;\n    serializationFeatureArray0[2] = serializationFeature0;\n    serializationFeatureArray0[3] = serializationFeature0;\n    serializationFeatureArray0[4] = serializationFeature0;\n    serializationFeatureArray0[5] = serializationFeature0;\n    serializationFeatureArray0[6] = serializationFeature0;\n    serializationConfig0.without(serializationFeature0, serializationFeatureArray0);\n}",
    "testName" : "test7878"
  },
  "test5555" : {
    "methodSignature" : "public final boolean isEnabled(JsonGenerator.Feature f, JsonFactory factory)",
    "methodName" : "isEnabled",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5555() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);\n    Object object0 = new Object();\n    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);\n    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();\n    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);\n    Class<SerializationFeature> class0 = SerializationFeature.class;\n    MapperConfig.collectFeatureDefaults(class0);\n    serializationConfig0.hasSerializationFeatures(9);\n    serializationConfig1.getSerializationInclusion();\n    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;\n    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;\n    SerializationConfig serializationConfig3 = serializationConfig1.withoutFeatures(jsonGenerator_FeatureArray0);\n    serializationConfig1.getDefaultVisibilityChecker();\n    SerializationConfig serializationConfig4 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);\n    serializationConfig2.withFilters((FilterProvider) null);\n    SimpleMixInResolver simpleMixInResolver2 = simpleMixInResolver1.withoutLocalDefinitions();\n    SerializationConfig serializationConfig5 = new SerializationConfig(serializationConfig3, simpleMixInResolver1);\n    SerializationConfig serializationConfig6 = new SerializationConfig(serializationConfig5, simpleMixInResolver2);\n    serializationConfig2.isEnabled(jsonGenerator_Feature0, (JsonFactory) null);\n}",
    "testName" : "test5555"
  },
  "test2121" : {
    "methodSignature" : "public SerializationConfig withSerializationInclusion(JsonInclude.Include incl)",
    "methodName" : "withSerializationInclusion",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2121() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);\n    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;\n    serializationConfig1.withSerializationInclusion(jsonInclude_Include0);\n}",
    "testName" : "test2121"
  },
  "test6666" : {
    "methodSignature" : "public SerializationConfig with(DateFormat df)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6666() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);\n    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();\n    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);\n    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());\n    doReturn(2048, 2048).when(formatFeature0).getMask();\n    serializationConfig2.with(formatFeature0);\n    serializationConfig0.with((DateFormat) null);\n}",
    "testName" : "test6666"
  },
  "test7777" : {
    "methodSignature" : "public final boolean isEnabled(JsonGenerator.Feature f, JsonFactory factory)",
    "methodName" : "isEnabled",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7777() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;\n    serializationConfig0.isEnabled(jsonGenerator_Feature0, jsonFactory0);\n}",
    "testName" : "test7777"
  },
  "test1111" : {
    "methodSignature" : "public SerializationConfig with(JsonGenerator.Feature feature)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1111() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];\n    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);\n    MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];\n    MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;\n    mapperFeatureArray0[0] = mapperFeature0;\n    MapperFeature mapperFeature1 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;\n    mapperFeatureArray0[1] = mapperFeature1;\n    serializationConfig0.with(mapperFeatureArray0);\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;\n    serializationConfig1.with(jsonGenerator_Feature0);\n}",
    "testName" : "test1111"
  },
  "test5454" : {
    "methodSignature" : "public SerializationConfig without(FormatFeature feature)",
    "methodName" : "without",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5454() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;\n    JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;\n    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];\n    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;\n    jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;\n    jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;\n    jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;\n    jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;\n    jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature1;\n    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);\n    serializationConfig1.with((SubtypeResolver) stdSubtypeResolver0);\n    serializationConfig0.with(jsonGenerator_Feature0);\n    serializationConfig0.without((FormatFeature) null);\n}",
    "testName" : "test5454"
  },
  "test6565" : {
    "methodSignature" : "public PrettyPrinter constructDefaultPrettyPrinter()",
    "methodName" : "constructDefaultPrettyPrinter",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6565() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(\"fV~5E?lvD@B,qL(DF{f\");\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, minimalPrettyPrinter0);\n    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig1, simpleMixInResolver0, (RootNameLookup) null);\n    serializationConfig2.useRootWrapping();\n    serializationConfig2.constructDefaultPrettyPrinter();\n}",
    "testName" : "test6565"
  },
  "test011" : {
    "methodSignature" : "public SerializationConfig withSerializationInclusion(JsonInclude.Include incl)",
    "methodName" : "withSerializationInclusion",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test011() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);\n    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;\n    serializationConfig1.withSerializationInclusion(jsonInclude_Include0);\n}",
    "testName" : "test011"
  },
  "test099" : {
    "methodSignature" : "public void initialize(JsonGenerator g)",
    "methodName" : "initialize",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test099() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    Object object0 = new Object();\n    JsonGenerator jsonGenerator0 = null;\n    serializationConfig0.initialize((JsonGenerator) null);\n    FormatFeature[] formatFeatureArray0 = new FormatFeature[1];\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0);\n    serializationConfig0.getDefaultVisibilityChecker();\n    serializationConfig1.withoutFeatures(formatFeatureArray0);\n    serializationConfig1.initialize(jsonGenerator0);\n}",
    "testName" : "test099"
  },
  "test1616" : {
    "methodSignature" : "public final boolean hasSerializationFeatures(int featureMask)",
    "methodName" : "hasSerializationFeatures",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test1616() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, (RootNameLookup) null);\n    serializationConfig1.useRootWrapping();\n    serializationConfig1.hasSerializationFeatures(381);\n}",
    "testName" : "test1616"
  },
  "test2727" : {
    "methodSignature" : "public SerializationConfig with(DateFormat df)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2727() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    BaseSettings baseSettings1 = baseSettings0.withHandlerInstantiator((HandlerInstantiator) null);\n    JsonFactory jsonFactory0 = new JsonFactory();\n    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);\n    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);\n    ClassIntrospector classIntrospector0 = objectMapper1.defaultClassIntrospector();\n    BaseSettings baseSettings2 = baseSettings1.withClassIntrospector(classIntrospector0);\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings2, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);\n    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();\n    PropertyName propertyName0 = PropertyName.construct(\"JSON\");\n    serializationConfig0.withRootName(propertyName0);\n    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();\n    serializationConfig0.with(dateFormat0);\n}",
    "testName" : "test2727"
  },
  "test3838" : {
    "methodSignature" : "public abstract T with(TypeFactory typeFactory)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3838() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    BaseSettings baseSettings1 = baseSettings0.withHandlerInstantiator((HandlerInstantiator) null);\n    JsonFactory jsonFactory0 = new JsonFactory();\n    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);\n    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);\n    ClassIntrospector classIntrospector0 = objectMapper1.defaultClassIntrospector();\n    BaseSettings baseSettings2 = baseSettings1.withClassIntrospector(classIntrospector0);\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings2, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);\n    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();\n    byte[] byteArray0 = new byte[5];\n    byteArray0[0] = (byte) (-51);\n    byteArray0[1] = (byte) 20;\n    byteArray0[2] = (byte) (-116);\n    byteArray0[3] = (byte) 57;\n    byteArray0[4] = (byte) 28;\n    jsonFactory0.createParser(byteArray0);\n    PropertyName propertyName0 = PropertyName.construct((String) null);\n    PropertyName.construct(\"\");\n    SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);\n    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();\n    serializationConfig0.with(dateFormat0);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    serializationConfig1.with(typeFactory0);\n}",
    "testName" : "test3838"
  },
  "test4949" : {
    "methodSignature" : "public JsonInclude.Include getSerializationInclusion()",
    "methodName" : "getSerializationInclusion",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4949() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, (RootNameLookup) null);\n    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());\n    doReturn(16, 16).when(formatFeature0).getMask();\n    serializationConfig1.without(formatFeature0);\n    serializationConfig0.getSerializationInclusion();\n}",
    "testName" : "test4949"
  },
  "test3939" : {
    "methodSignature" : "public boolean useRootWrapping()",
    "methodName" : "useRootWrapping",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3939() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver1, simpleMixInResolver0, rootNameLookup0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0);\n    HashMap<String, SerializationFeature> hashMap0 = new HashMap<String, SerializationFeature>();\n    SerializationConfig serializationConfig2 = serializationConfig1.withAttributes(hashMap0);\n    SimpleMixInResolver simpleMixInResolver1 = new SimpleMixInResolver(serializationConfig2);\n    SerializationConfig serializationConfig3 = new SerializationConfig(baseSettings0, stdSubtypeResolver1, simpleMixInResolver0, (RootNameLookup) null);\n    RootNameLookup rootNameLookup1 = new RootNameLookup();\n    SerializationConfig serializationConfig4 = new SerializationConfig(serializationConfig1, simpleMixInResolver0, rootNameLookup1);\n    serializationConfig4.useRootWrapping();\n}",
    "testName" : "test3939"
  },
  "test5959" : {
    "methodSignature" : "public SerializationConfig with(SubtypeResolver str)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5959() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);\n    SimpleMixInResolver simpleMixInResolver0 = objectMapper1._mixIns;\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver1, simpleMixInResolver0, rootNameLookup0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver0);\n    FormatFeature[] formatFeatureArray0 = new FormatFeature[3];\n    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());\n    doReturn(0, 0, 0).when(formatFeature0).getMask();\n    formatFeatureArray0[0] = formatFeature0;\n    formatFeatureArray0[1] = formatFeature0;\n    formatFeatureArray0[2] = formatFeature0;\n    SerializationConfig serializationConfig3 = serializationConfig2.withoutFeatures(formatFeatureArray0);\n    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();\n    simpleFilterProvider0.setFailOnUnknownId(false);\n    serializationConfig3.withFilters(simpleFilterProvider0);\n    serializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);\n}",
    "testName" : "test5959"
  },
  "test2525" : {
    "methodSignature" : "public SerializationConfig without(JsonGenerator.Feature feature)",
    "methodName" : "without",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2525() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;\n    BaseSettings baseSettings1 = baseSettings0.withInsertedAnnotationIntrospector(jacksonAnnotationIntrospector0);\n    PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy) PropertyNamingStrategy.SNAKE_CASE;\n    BaseSettings baseSettings2 = baseSettings1.withPropertyNamingStrategy(propertyNamingStrategy_SnakeCaseStrategy0);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    BaseSettings baseSettings3 = baseSettings2.withTypeFactory(typeFactory0);\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings3, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);\n    MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter((String) null);\n    serializationConfig0.withDefaultPrettyPrinter(minimalPrettyPrinter0);\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;\n    serializationConfig0.without(jsonGenerator_Feature0);\n}",
    "testName" : "test2525"
  },
  "test3636" : {
    "methodSignature" : "public JsonInclude.Include getSerializationInclusion()",
    "methodName" : "getSerializationInclusion",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3636() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);\n    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());\n    doReturn(0, 0).when(formatFeature0).getMask();\n    SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);\n    serializationConfig2.getSerializationInclusion();\n}",
    "testName" : "test3636"
  },
  "test5858" : {
    "methodSignature" : "public JsonInclude.Include getSerializationInclusion()",
    "methodName" : "getSerializationInclusion",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5858() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy) PropertyNamingStrategy.SNAKE_CASE;\n    BaseSettings baseSettings1 = baseSettings0.withPropertyNamingStrategy(propertyNamingStrategy_SnakeCaseStrategy0);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    BaseSettings baseSettings2 = baseSettings1.withTypeFactory(typeFactory0);\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings2, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);\n    MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;\n    serializationConfig0.with(mapperFeature0, false);\n    serializationConfig0.getSerializationInclusion();\n}",
    "testName" : "test5858"
  },
  "test2626" : {
    "methodSignature" : "public SerializationConfig without(SerializationFeature feature)",
    "methodName" : "without",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test2626() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);\n    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());\n    PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;\n    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;\n    serializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);\n    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;\n    serializationConfig0.without(serializationFeature0);\n}",
    "testName" : "test2626"
  },
  "test3737" : {
    "methodSignature" : "public JsonInclude.Include getSerializationInclusion()",
    "methodName" : "getSerializationInclusion",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test3737() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();\n    serializationConfig0.with(propertyNamingStrategy0);\n    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);\n    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();\n    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);\n    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);\n    uTF8JsonGenerator0.overrideStdFeatures((-1438), 2);\n    serializationConfig1.initialize(uTF8JsonGenerator0);\n    serializationConfig1.getSerializationInclusion();\n}",
    "testName" : "test3737"
  },
  "test6969" : {
    "methodSignature" : "public SerializationConfig withRootName(PropertyName rootName)",
    "methodName" : "withRootName",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6969() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    BaseSettings baseSettings1 = baseSettings0.withHandlerInstantiator((HandlerInstantiator) null);\n    JsonFactory jsonFactory0 = new JsonFactory();\n    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);\n    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);\n    ClassIntrospector classIntrospector0 = objectMapper1.defaultClassIntrospector();\n    BaseSettings baseSettings2 = baseSettings1.withClassIntrospector(classIntrospector0);\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings2, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);\n    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();\n    byte[] byteArray0 = new byte[5];\n    byteArray0[0] = (byte) (-51);\n    byteArray0[1] = (byte) 20;\n    byteArray0[2] = (byte) (-116);\n    byteArray0[3] = (byte) 57;\n    byteArray0[4] = (byte) 28;\n    jsonFactory0.createParser(byteArray0);\n    PropertyName propertyName0 = PropertyName.construct((String) null);\n    PropertyName.construct(\"\");\n    serializationConfig0.withRootName(propertyName0);\n    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();\n    serializationConfig0.with(dateFormat0);\n    serializationConfig0.withRootName((PropertyName) null);\n}",
    "testName" : "test6969"
  },
  "test6060" : {
    "methodSignature" : "public final int getSerializationFeatures()",
    "methodName" : "getSerializationFeatures",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6060() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);\n    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();\n    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);\n    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());\n    doReturn(0, 0).when(formatFeature0).getMask();\n    serializationConfig2.with(formatFeature0);\n    serializationConfig0.constructDefaultPrettyPrinter();\n    serializationConfig1.getSerializationFeatures();\n}",
    "testName" : "test6060"
  },
  "test7171" : {
    "methodSignature" : "public SerializationConfig with(JsonGenerator.Feature feature)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7171() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;\n    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];\n    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;\n    jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;\n    jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;\n    jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;\n    JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;\n    jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature1;\n    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);\n    serializationConfig1.with(jsonGenerator_Feature0);\n}",
    "testName" : "test7171"
  },
  "test8282" : {
    "methodSignature" : "public final boolean isEnabled(JsonGenerator.Feature f, JsonFactory factory)",
    "methodName" : "isEnabled",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8282() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;\n    JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);\n    JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.ESCAPE_NON_ASCII;\n    SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature1);\n    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];\n    JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;\n    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature2;\n    jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;\n    jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature1;\n    SerializationConfig serializationConfig2 = serializationConfig1.withFeatures(jsonGenerator_FeatureArray0);\n    serializationConfig2.isEnabled(jsonGenerator_Feature1, jsonFactory0);\n}",
    "testName" : "test8282"
  },
  "test7070" : {
    "methodSignature" : "public JsonInclude.Include getSerializationInclusion()",
    "methodName" : "getSerializationInclusion",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7070() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, (RootNameLookup) null);\n    SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;\n    serializationConfig1.with(serializationFeature0);\n    serializationConfig0.getAnnotationIntrospector();\n    serializationConfig1.getSerializationInclusion();\n}",
    "testName" : "test7070"
  },
  "test8080" : {
    "methodSignature" : "public SerializationConfig withDefaultPrettyPrinter(PrettyPrinter pp)",
    "methodName" : "withDefaultPrettyPrinter",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8080() throws Throwable {\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);\n    Locale locale0 = Locale.CANADA;\n    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver0);\n    Class<Object> class0 = Object.class;\n    simpleMixInResolver0.findMixInClassFor(class0);\n    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withoutLocalDefinitions();\n    simpleMixInResolver0.withOverrides(serializationConfig2);\n    SerializationConfig serializationConfig3 = new SerializationConfig(serializationConfig1, simpleMixInResolver1);\n    SerializationConfig serializationConfig4 = new SerializationConfig(serializationConfig3, simpleMixInResolver1, rootNameLookup0);\n    DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter) SerializationConfig.DEFAULT_PRETTY_PRINTER;\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;\n    IOContext iOContext0 = new IOContext(bufferRecycler0, serializationFeature0, false);\n    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();\n    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayBuilder0);\n    uTF8JsonGenerator0.overrideStdFeatures(3779004, (-789));\n    serializationConfig2.withDefaultPrettyPrinter(defaultPrettyPrinter0);\n}",
    "testName" : "test8080"
  },
  "test7575" : {
    "methodSignature" : "public void initialize(JsonGenerator g)",
    "methodName" : "initialize",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7575() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);\n    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();\n    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);\n    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);\n    uTF8JsonGenerator0.overrideStdFeatures((-1438), 2);\n    serializationConfig1.initialize(uTF8JsonGenerator0);\n}",
    "testName" : "test7575"
  },
  "test4141" : {
    "methodSignature" : "public SerializationConfig withRootName(PropertyName rootName)",
    "methodName" : "withRootName",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test4141() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);\n    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);\n    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);\n    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);\n    SimpleMixInResolver simpleMixInResolver1 = objectMapper0._mixIns;\n    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig1, simpleMixInResolver1);\n    HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());\n    SerializationConfig serializationConfig3 = serializationConfig2.with(handlerInstantiator0);\n    MapperFeature mapperFeature0 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;\n    serializationConfig3.with(mapperFeature0, true);\n    PropertyName propertyName0 = PropertyName.NO_NAME;\n    serializationConfig0.withRootName(propertyName0);\n}",
    "testName" : "test4141"
  },
  "test5252" : {
    "methodSignature" : "public SerializationConfig withRootName(PropertyName rootName)",
    "methodName" : "withRootName",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5252() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    BaseSettings baseSettings1 = baseSettings0.withHandlerInstantiator((HandlerInstantiator) null);\n    JsonFactory jsonFactory0 = new JsonFactory();\n    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);\n    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);\n    ClassIntrospector classIntrospector0 = objectMapper1.defaultClassIntrospector();\n    BaseSettings baseSettings2 = baseSettings1.withClassIntrospector(classIntrospector0);\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings2, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);\n    FormatFeature[] formatFeatureArray0 = new FormatFeature[2];\n    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());\n    doReturn(0, 0).when(formatFeature0).getMask();\n    formatFeatureArray0[0] = formatFeature0;\n    formatFeatureArray0[1] = formatFeature0;\n    SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);\n    PropertyName propertyName0 = PropertyName.construct(\"JSON\");\n    SerializationConfig serializationConfig2 = serializationConfig0.withRootName(propertyName0);\n    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();\n    serializationConfig0.with((ClassIntrospector) basicClassIntrospector0);\n    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];\n    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;\n    serializationFeatureArray0[0] = serializationFeature0;\n    SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;\n    serializationFeatureArray0[1] = serializationFeature1;\n    SerializationFeature serializationFeature2 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;\n    serializationFeatureArray0[2] = serializationFeature2;\n    SerializationFeature serializationFeature3 = SerializationFeature.FAIL_ON_SELF_REFERENCES;\n    serializationFeatureArray0[3] = serializationFeature3;\n    SerializationFeature serializationFeature4 = SerializationFeature.WRAP_EXCEPTIONS;\n    serializationFeatureArray0[4] = serializationFeature4;\n    SerializationFeature serializationFeature5 = SerializationFeature.FAIL_ON_SELF_REFERENCES;\n    serializationFeatureArray0[5] = serializationFeature5;\n    SerializationFeature serializationFeature6 = SerializationFeature.INDENT_OUTPUT;\n    serializationFeatureArray0[6] = serializationFeature6;\n    serializationConfig1.withFeatures(serializationFeatureArray0);\n    serializationConfig2.withRootName(propertyName0);\n}",
    "testName" : "test5252"
  },
  "test6363" : {
    "methodSignature" : "public SerializationConfig with(JsonGenerator.Feature feature)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6363() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, (RootNameLookup) null);\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;\n    serializationConfig1.with(jsonGenerator_Feature0);\n}",
    "testName" : "test6363"
  },
  "test7474" : {
    "methodSignature" : "public SerializationConfig withRootName(PropertyName rootName)",
    "methodName" : "withRootName",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7474() throws Throwable {\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    ObjectMapper objectMapper0 = new ObjectMapper();\n    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);\n    SimpleMixInResolver simpleMixInResolver0 = objectMapper1._mixIns;\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();\n    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver1, simpleMixInResolver0, rootNameLookup0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);\n    Locale locale0 = Locale.SIMPLIFIED_CHINESE;\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;\n    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver0);\n    Class<Object> class0 = Object.class;\n    simpleMixInResolver0.findMixInClassFor(class0);\n    SerializationConfig serializationConfig3 = new SerializationConfig(serializationConfig1, (ContextAttributes) null);\n    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withoutLocalDefinitions();\n    SerializationConfig serializationConfig4 = new SerializationConfig(serializationConfig1, simpleMixInResolver1);\n    SerializationConfig serializationConfig5 = serializationConfig3.without(jsonGenerator_Feature0);\n    DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter) SerializationConfig.DEFAULT_PRETTY_PRINTER;\n    serializationConfig5.without(jsonGenerator_Feature0);\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;\n    IOContext iOContext0 = new IOContext(bufferRecycler0, serializationFeature0, false);\n    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();\n    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayBuilder0);\n    PropertyName propertyName0 = PropertyName.USE_DEFAULT;\n    SerializationConfig serializationConfig6 = new SerializationConfig(serializationConfig4, simpleMixInResolver0, rootNameLookup0);\n    serializationConfig6.withRootName(propertyName0);\n}",
    "testName" : "test7474"
  },
  "test5151" : {
    "methodSignature" : "public JsonInclude.Include getSerializationInclusion()",
    "methodName" : "getSerializationInclusion",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test5151() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);\n    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();\n    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);\n    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];\n    DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);\n    contextAttributes0.withSharedAttribute(defaultPrettyPrinter0, simpleMixInResolver1);\n    serializationConfig1.withFeatures(serializationFeatureArray0);\n    Class<SerializationFeature> class0 = SerializationFeature.class;\n    MapperConfig.collectFeatureDefaults(class0);\n    serializationConfig0.hasSerializationFeatures(9);\n    serializationConfig1.getSerializationInclusion();\n}",
    "testName" : "test5151"
  },
  "test6262" : {
    "methodSignature" : "public JsonInclude.Include getSerializationInclusion()",
    "methodName" : "getSerializationInclusion",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6262() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, (RootNameLookup) null);\n    serializationConfig1.getSerializationInclusion();\n}",
    "testName" : "test6262"
  },
  "test7373" : {
    "methodSignature" : "public SerializationConfig with(SerializationFeature feature)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7373() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    serializationConfig0.initialize((JsonGenerator) null);\n    FormatFeature[] formatFeatureArray0 = new FormatFeature[0];\n    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);\n    serializationConfig1.getDefaultVisibilityChecker();\n    serializationConfig1.initialize((JsonGenerator) null);\n    SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;\n    serializationConfig0.with(serializationFeature0);\n}",
    "testName" : "test7373"
  },
  "test8484" : {
    "methodSignature" : "public final boolean isEnabled(JsonGenerator.Feature f, JsonFactory factory)",
    "methodName" : "isEnabled",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test8484() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;\n    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);\n    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();\n    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);\n    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);\n    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, 1);\n    serializationConfig1.initialize(jsonGenerator0);\n    JsonFactory jsonFactory0 = new JsonFactory();\n    JsonFactory jsonFactory1 = jsonFactory0.copy();\n    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;\n    JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);\n    JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);\n    JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;\n    JsonFactory jsonFactory4 = jsonFactory3.configure(jsonFactory_Feature0, false);\n    serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory4);\n}",
    "testName" : "test8484"
  },
  "test6161" : {
    "methodSignature" : "public final boolean hasSerializationFeatures(int featureMask)",
    "methodName" : "hasSerializationFeatures",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test6161() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy) PropertyNamingStrategy.SNAKE_CASE;\n    BaseSettings baseSettings1 = baseSettings0.withPropertyNamingStrategy(propertyNamingStrategy_SnakeCaseStrategy0);\n    TypeFactory typeFactory0 = TypeFactory.defaultInstance();\n    baseSettings1.withTypeFactory(typeFactory0);\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings1, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (SimpleMixInResolver) null, rootNameLookup0);\n    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig1, (PrettyPrinter) null);\n    ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();\n    HashMap<MinimalPrettyPrinter, SerializationFeature> hashMap0 = new HashMap<MinimalPrettyPrinter, SerializationFeature>();\n    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);\n    SerializationConfig serializationConfig3 = new SerializationConfig(serializationConfig2, contextAttributes1);\n    serializationConfig3.useRootWrapping();\n    serializationConfig2.hasSerializationFeatures(184);\n}",
    "testName" : "test6161"
  },
  "test7272" : {
    "methodSignature" : "public JsonInclude.Include getSerializationInclusion()",
    "methodName" : "getSerializationInclusion",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test7272() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    Class<Object> class0 = Object.class;\n    Class<String> class1 = String.class;\n    simpleMixInResolver0.addLocalDefinition(class0, class1);\n    RootNameLookup rootNameLookup0 = new RootNameLookup();\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);\n    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();\n    Object object0 = new Object();\n    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);\n    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);\n    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();\n    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);\n    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());\n    doReturn(0, (-2062)).when(formatFeature0).getMask();\n    serializationConfig2.with(formatFeature0);\n    serializationConfig1.getSerializationInclusion();\n}",
    "testName" : "test7272"
  },
  "test022" : {
    "methodSignature" : "public abstract T with(Base64Variant base64)",
    "methodName" : "with",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test022() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    serializationConfig0.useRootWrapping();\n    serializationConfig0.with((Base64Variant) null);\n}",
    "testName" : "test022"
  },
  "test044" : {
    "methodSignature" : "public void initialize(JsonGenerator g)",
    "methodName" : "initialize",
    "className" : "com.fasterxml.jackson.databind.SerializationConfig",
    "testPrefix" : "@Test(timeout = 4000)\npublic void test044() throws Throwable {\n    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;\n    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();\n    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);\n    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);\n    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;\n    SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);\n    serializationConfig1.with((HandlerInstantiator) null);\n    BufferRecycler bufferRecycler0 = new BufferRecycler();\n    SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;\n    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);\n    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();\n    serializationConfig0.useRootWrapping();\n    FileSystemHandling.shouldAllThrowIOExceptions();\n    serializationConfig0.initialize((JsonGenerator) null);\n}",
    "testName" : "test044"
  }
}