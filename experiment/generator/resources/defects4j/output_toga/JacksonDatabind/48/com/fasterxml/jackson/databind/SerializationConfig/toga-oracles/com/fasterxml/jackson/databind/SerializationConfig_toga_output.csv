project,bug_num,test_name,test_prefix,except_pred,assert_pred
project,0,test011,"public void test011() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.NON_ABSENT;
    serializationConfig1.withSerializationInclusion(jsonInclude_Include0);
}",0,
project,0,test022,"public void test022() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    serializationConfig0.useRootWrapping();
    serializationConfig0.with((Base64Variant) null);
}",0,
project,0,test044,"public void test044() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
    SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
    serializationConfig1.with((HandlerInstantiator) null);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    serializationConfig0.useRootWrapping();
    FileSystemHandling.shouldAllThrowIOExceptions();
    serializationConfig0.initialize((JsonGenerator) null);
}",0,
project,0,test099,"public void test099() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    Object object0 = new Object();
    JsonGenerator jsonGenerator0 = null;
    serializationConfig0.initialize((JsonGenerator) null);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[1];
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0);
    serializationConfig0.getDefaultVisibilityChecker();
    serializationConfig1.withoutFeatures(formatFeatureArray0);
    // Undeclared exception!
    try {
        serializationConfig1.initialize(jsonGenerator0);
        fail(""Expecting exception: NullPointerException"");
    } catch (NullPointerException e) {
        //
        // no message in exception (getMessage() returned null)
        //
        verifyException(""com.fasterxml.jackson.databind.SerializationConfig"", e);
    }
}",0,
project,0,test1111,"public void test1111() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[0];
    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[2];
    MapperFeature mapperFeature0 = MapperFeature.PROPAGATE_TRANSIENT_MARKER;
    mapperFeatureArray0[0] = mapperFeature0;
    MapperFeature mapperFeature1 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
    mapperFeatureArray0[1] = mapperFeature1;
    serializationConfig0.with(mapperFeatureArray0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
    serializationConfig1.with(jsonGenerator_Feature0);
}",0,
project,0,test1616,"public void test1616() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, (RootNameLookup) null);
    serializationConfig1.useRootWrapping();
    serializationConfig1.hasSerializationFeatures(381);
}",0,
project,0,test2121,"public void test2121() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);
    JsonInclude.Include jsonInclude_Include0 = JsonInclude.Include.USE_DEFAULTS;
    serializationConfig1.withSerializationInclusion(jsonInclude_Include0);
}",0,
project,0,test2323,"public void test2323() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);
    ClassLoader.getSystemClassLoader();
    SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
    Object object1 = new Object();
    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
    simpleFilterProvider0.setFailOnUnknownId(false);
    serializationConfig0.withFilters(simpleFilterProvider0);
}",0,
project,0,test2424,"public void test2424() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    BaseSettings baseSettings1 = baseSettings0.withClassIntrospector(basicClassIntrospector0);
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
    BaseSettings baseSettings2 = baseSettings1.withAppendedAnnotationIntrospector(jacksonAnnotationIntrospector0);
    PropertyNamingStrategy.KebabCaseStrategy propertyNamingStrategy_KebabCaseStrategy0 = (PropertyNamingStrategy.KebabCaseStrategy) PropertyNamingStrategy.KEBAB_CASE;
    BaseSettings baseSettings3 = baseSettings2.withPropertyNamingStrategy(propertyNamingStrategy_KebabCaseStrategy0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings3, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    MapperFeature[] mapperFeatureArray0 = new MapperFeature[9];
    MapperFeature mapperFeature0 = MapperFeature.AUTO_DETECT_SETTERS;
    mapperFeatureArray0[0] = mapperFeature0;
    MapperFeature mapperFeature1 = MapperFeature.AUTO_DETECT_CREATORS;
    mapperFeatureArray0[1] = mapperFeature1;
    MapperFeature mapperFeature2 = MapperFeature.USE_GETTERS_AS_SETTERS;
    mapperFeatureArray0[2] = mapperFeature2;
    MapperFeature mapperFeature3 = MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS;
    mapperFeatureArray0[3] = mapperFeature3;
    MapperFeature mapperFeature4 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
    mapperFeatureArray0[4] = mapperFeature4;
    MapperFeature mapperFeature5 = MapperFeature.AUTO_DETECT_IS_GETTERS;
    mapperFeatureArray0[5] = mapperFeature5;
    MapperFeature mapperFeature6 = MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
    mapperFeatureArray0[6] = mapperFeature6;
    MapperFeature mapperFeature7 = MapperFeature.AUTO_DETECT_FIELDS;
    mapperFeatureArray0[7] = mapperFeature7;
    MapperFeature mapperFeature8 = MapperFeature.USE_STD_BEAN_NAMING;
    mapperFeatureArray0[8] = mapperFeature8;
    SerializationConfig serializationConfig1 = serializationConfig0.with(mapperFeatureArray0);
    serializationConfig1.with((AnnotationIntrospector) jacksonAnnotationIntrospector0);
}",0,
project,0,test2525,"public void test2525() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    JacksonAnnotationIntrospector jacksonAnnotationIntrospector0 = (JacksonAnnotationIntrospector) ObjectMapper.DEFAULT_ANNOTATION_INTROSPECTOR;
    BaseSettings baseSettings1 = baseSettings0.withInsertedAnnotationIntrospector(jacksonAnnotationIntrospector0);
    PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy) PropertyNamingStrategy.SNAKE_CASE;
    BaseSettings baseSettings2 = baseSettings1.withPropertyNamingStrategy(propertyNamingStrategy_SnakeCaseStrategy0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    BaseSettings baseSettings3 = baseSettings2.withTypeFactory(typeFactory0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings3, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter((String) null);
    serializationConfig0.withDefaultPrettyPrinter(minimalPrettyPrinter0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
    serializationConfig0.without(jsonGenerator_Feature0);
}",0,
project,0,test2626,"public void test2626() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());
    PropertyAccessor propertyAccessor0 = PropertyAccessor.GETTER;
    JsonAutoDetect.Visibility jsonAutoDetect_Visibility0 = JsonAutoDetect.Visibility.ANY;
    serializationConfig0.withVisibility(propertyAccessor0, jsonAutoDetect_Visibility0);
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN;
    serializationConfig0.without(serializationFeature0);
}",0,
project,0,test2727,"public void test2727() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    BaseSettings baseSettings1 = baseSettings0.withHandlerInstantiator((HandlerInstantiator) null);
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    ClassIntrospector classIntrospector0 = objectMapper1.defaultClassIntrospector();
    BaseSettings baseSettings2 = baseSettings1.withClassIntrospector(classIntrospector0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings2, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
    PropertyName propertyName0 = PropertyName.construct(""JSON"");
    serializationConfig0.withRootName(propertyName0);
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    serializationConfig0.with(dateFormat0);
}",0,
project,0,test3434,"public void test3434() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);
    ClassLoader.getSystemClassLoader();
    SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
    PropertyName propertyName0 = PropertyName.construct(""2nK2P>wkyeT{\""%.3N71"");
    serializationConfig1.withRootName(propertyName0);
}",0,
project,0,test3636,"public void test3636() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, (SubtypeResolver) null, simpleMixInResolver0, rootNameLookup0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(formatFeature0).getMask();
    SerializationConfig serializationConfig2 = serializationConfig1.without(formatFeature0);
    serializationConfig2.getSerializationInclusion();
}",0,
project,0,test3737,"public void test3737() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
    SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    PropertyNamingStrategy propertyNamingStrategy0 = new PropertyNamingStrategy();
    serializationConfig0.with(propertyNamingStrategy0);
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
    uTF8JsonGenerator0.overrideStdFeatures((-1438), 2);
    serializationConfig1.initialize(uTF8JsonGenerator0);
    serializationConfig1.getSerializationInclusion();
}",0,
project,0,test3838,"public void test3838() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    BaseSettings baseSettings1 = baseSettings0.withHandlerInstantiator((HandlerInstantiator) null);
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    ClassIntrospector classIntrospector0 = objectMapper1.defaultClassIntrospector();
    BaseSettings baseSettings2 = baseSettings1.withClassIntrospector(classIntrospector0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings2, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) (-51);
    byteArray0[1] = (byte) 20;
    byteArray0[2] = (byte) (-116);
    byteArray0[3] = (byte) 57;
    byteArray0[4] = (byte) 28;
    jsonFactory0.createParser(byteArray0);
    PropertyName propertyName0 = PropertyName.construct((String) null);
    PropertyName.construct("""");
    SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    serializationConfig0.with(dateFormat0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    serializationConfig1.with(typeFactory0);
}",0,
project,0,test3939,"public void test3939() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver1, simpleMixInResolver0, rootNameLookup0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0);
    HashMap<String, SerializationFeature> hashMap0 = new HashMap<String, SerializationFeature>();
    SerializationConfig serializationConfig2 = serializationConfig1.withAttributes(hashMap0);
    SimpleMixInResolver simpleMixInResolver1 = new SimpleMixInResolver(serializationConfig2);
    SerializationConfig serializationConfig3 = new SerializationConfig(baseSettings0, stdSubtypeResolver1, simpleMixInResolver0, (RootNameLookup) null);
    RootNameLookup rootNameLookup1 = new RootNameLookup();
    SerializationConfig serializationConfig4 = new SerializationConfig(serializationConfig1, simpleMixInResolver0, rootNameLookup1);
    serializationConfig4.useRootWrapping();
}",0,
project,0,test4141,"public void test4141() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);
    BeanDeserializerFactory beanDeserializerFactory0 = new BeanDeserializerFactory((DeserializerFactoryConfig) null);
    DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
    ObjectMapper objectMapper0 = new ObjectMapper((JsonFactory) null, (DefaultSerializerProvider) null, defaultDeserializationContext_Impl0);
    SimpleMixInResolver simpleMixInResolver1 = objectMapper0._mixIns;
    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig1, simpleMixInResolver1);
    HandlerInstantiator handlerInstantiator0 = mock(HandlerInstantiator.class, new ViolatedAssumptionAnswer());
    SerializationConfig serializationConfig3 = serializationConfig2.with(handlerInstantiator0);
    MapperFeature mapperFeature0 = MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS;
    serializationConfig3.with(mapperFeature0, true);
    PropertyName propertyName0 = PropertyName.NO_NAME;
    serializationConfig0.withRootName(propertyName0);
}",0,
project,0,test4949,"public void test4949() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, (RootNameLookup) null);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(16, 16).when(formatFeature0).getMask();
    serializationConfig1.without(formatFeature0);
    serializationConfig0.getSerializationInclusion();
}",0,
project,0,test5151,"public void test5151() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);
    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();
    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);
    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[0];
    DefaultPrettyPrinter defaultPrettyPrinter0 = new DefaultPrettyPrinter((SerializableString) null);
    contextAttributes0.withSharedAttribute(defaultPrettyPrinter0, simpleMixInResolver1);
    serializationConfig1.withFeatures(serializationFeatureArray0);
    Class<SerializationFeature> class0 = SerializationFeature.class;
    MapperConfig.collectFeatureDefaults(class0);
    serializationConfig0.hasSerializationFeatures(9);
    serializationConfig1.getSerializationInclusion();
}",0,
project,0,test5252,"public void test5252() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    BaseSettings baseSettings1 = baseSettings0.withHandlerInstantiator((HandlerInstantiator) null);
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    ClassIntrospector classIntrospector0 = objectMapper1.defaultClassIntrospector();
    BaseSettings baseSettings2 = baseSettings1.withClassIntrospector(classIntrospector0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings2, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[2];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    SerializationConfig serializationConfig1 = serializationConfig0.withoutFeatures(formatFeatureArray0);
    PropertyName propertyName0 = PropertyName.construct(""JSON"");
    SerializationConfig serializationConfig2 = serializationConfig0.withRootName(propertyName0);
    BasicClassIntrospector basicClassIntrospector0 = new BasicClassIntrospector();
    serializationConfig0.with((ClassIntrospector) basicClassIntrospector0);
    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];
    SerializationFeature serializationFeature0 = SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED;
    serializationFeatureArray0[0] = serializationFeature0;
    SerializationFeature serializationFeature1 = SerializationFeature.WRITE_DATES_WITH_ZONE_ID;
    serializationFeatureArray0[1] = serializationFeature1;
    SerializationFeature serializationFeature2 = SerializationFeature.WRITE_EMPTY_JSON_ARRAYS;
    serializationFeatureArray0[2] = serializationFeature2;
    SerializationFeature serializationFeature3 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
    serializationFeatureArray0[3] = serializationFeature3;
    SerializationFeature serializationFeature4 = SerializationFeature.WRAP_EXCEPTIONS;
    serializationFeatureArray0[4] = serializationFeature4;
    SerializationFeature serializationFeature5 = SerializationFeature.FAIL_ON_SELF_REFERENCES;
    serializationFeatureArray0[5] = serializationFeature5;
    SerializationFeature serializationFeature6 = SerializationFeature.INDENT_OUTPUT;
    serializationFeatureArray0[6] = serializationFeature6;
    serializationConfig1.withFeatures(serializationFeatureArray0);
    serializationConfig2.withRootName(propertyName0);
}",0,
project,0,test5454,"public void test5454() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.IGNORE_UNKNOWN;
    JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[6];
    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
    jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
    jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
    jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
    jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature0;
    jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature1;
    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
    serializationConfig1.with((SubtypeResolver) stdSubtypeResolver0);
    serializationConfig0.with(jsonGenerator_Feature0);
    serializationConfig0.without((FormatFeature) null);
}",0,
project,0,test5555,"public void test5555() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
    Object object0 = new Object();
    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);
    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();
    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);
    Class<SerializationFeature> class0 = SerializationFeature.class;
    MapperConfig.collectFeatureDefaults(class0);
    serializationConfig0.hasSerializationFeatures(9);
    serializationConfig1.getSerializationInclusion();
    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[1];
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
    SerializationConfig serializationConfig3 = serializationConfig1.withoutFeatures(jsonGenerator_FeatureArray0);
    serializationConfig1.getDefaultVisibilityChecker();
    SerializationConfig serializationConfig4 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);
    serializationConfig2.withFilters((FilterProvider) null);
    SimpleMixInResolver simpleMixInResolver2 = simpleMixInResolver1.withoutLocalDefinitions();
    SerializationConfig serializationConfig5 = new SerializationConfig(serializationConfig3, simpleMixInResolver1);
    SerializationConfig serializationConfig6 = new SerializationConfig(serializationConfig5, simpleMixInResolver2);
    serializationConfig2.isEnabled(jsonGenerator_Feature0, (JsonFactory) null);
}",0,
project,0,test5757,"public void test5757() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);
    Class<SerializationFeature> class0 = SerializationFeature.class;
    MapperConfig.collectFeatureDefaults(class0);
    serializationConfig0.hasSerializationFeatures(9);
    Locale locale0 = Locale.ITALIAN;
    serializationConfig0.with(locale0);
    SerializationFeature serializationFeature0 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[1];
    serializationFeatureArray0[0] = serializationFeature0;
    serializationConfig0.with(serializationFeature0, serializationFeatureArray0);
}",0,
project,0,test5858,"public void test5858() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy) PropertyNamingStrategy.SNAKE_CASE;
    BaseSettings baseSettings1 = baseSettings0.withPropertyNamingStrategy(propertyNamingStrategy_SnakeCaseStrategy0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    BaseSettings baseSettings2 = baseSettings1.withTypeFactory(typeFactory0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings2, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    MapperFeature mapperFeature0 = MapperFeature.INFER_PROPERTY_MUTATORS;
    serializationConfig0.with(mapperFeature0, false);
    serializationConfig0.getSerializationInclusion();
}",0,
project,0,test5959,"public void test5959() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    SimpleMixInResolver simpleMixInResolver0 = objectMapper1._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver1, simpleMixInResolver0, rootNameLookup0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver0);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[3];
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0, 0).when(formatFeature0).getMask();
    formatFeatureArray0[0] = formatFeature0;
    formatFeatureArray0[1] = formatFeature0;
    formatFeatureArray0[2] = formatFeature0;
    SerializationConfig serializationConfig3 = serializationConfig2.withoutFeatures(formatFeatureArray0);
    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
    simpleFilterProvider0.setFailOnUnknownId(false);
    serializationConfig3.withFilters(simpleFilterProvider0);
    serializationConfig0.with((SubtypeResolver) stdSubtypeResolver0);
}",0,
project,0,test6060,"public void test6060() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);
    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();
    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, 0).when(formatFeature0).getMask();
    serializationConfig2.with(formatFeature0);
    serializationConfig0.constructDefaultPrettyPrinter();
    serializationConfig1.getSerializationFeatures();
}",0,
project,0,test6161,"public void test6161() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    PropertyNamingStrategy.SnakeCaseStrategy propertyNamingStrategy_SnakeCaseStrategy0 = (PropertyNamingStrategy.SnakeCaseStrategy) PropertyNamingStrategy.SNAKE_CASE;
    BaseSettings baseSettings1 = baseSettings0.withPropertyNamingStrategy(propertyNamingStrategy_SnakeCaseStrategy0);
    TypeFactory typeFactory0 = TypeFactory.defaultInstance();
    baseSettings1.withTypeFactory(typeFactory0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings1, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, (SimpleMixInResolver) null, rootNameLookup0);
    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig1, (PrettyPrinter) null);
    ContextAttributes contextAttributes0 = ContextAttributes.getEmpty();
    HashMap<MinimalPrettyPrinter, SerializationFeature> hashMap0 = new HashMap<MinimalPrettyPrinter, SerializationFeature>();
    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttributes(hashMap0);
    SerializationConfig serializationConfig3 = new SerializationConfig(serializationConfig2, contextAttributes1);
    serializationConfig3.useRootWrapping();
    serializationConfig2.hasSerializationFeatures(184);
}",0,
project,0,test6262,"public void test6262() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, (RootNameLookup) null);
    serializationConfig1.getSerializationInclusion();
}",0,
project,0,test6363,"public void test6363() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, (RootNameLookup) null);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
    serializationConfig1.with(jsonGenerator_Feature0);
}",0,
project,0,test6565,"public void test6565() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(""fV~5E?lvD@B,qL(DF{f"");
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, minimalPrettyPrinter0);
    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig1, simpleMixInResolver0, (RootNameLookup) null);
    serializationConfig2.useRootWrapping();
    serializationConfig2.constructDefaultPrettyPrinter();
}",0,
project,0,test6666,"public void test6666() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);
    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();
    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(2048, 2048).when(formatFeature0).getMask();
    serializationConfig2.with(formatFeature0);
    serializationConfig0.with((DateFormat) null);
}",0,
project,0,test6767,"public void test6767() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
    serializationConfig1.getDefaultVisibilityChecker();
    SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-421), ""W3QSP2'F6"");
    serializationConfig0.with((TimeZone) simpleTimeZone0);
}",0,
project,0,test6868,"public void test6868() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    JsonFactory jsonFactory0 = new JsonFactory();
    jsonFactory0.copy();
    PropertyName propertyName0 = PropertyName.construct(""JSON"");
    StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup1 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver1, simpleMixInResolver0, rootNameLookup1);
    SerializationConfig serializationConfig1 = serializationConfig0.withRootName(propertyName0);
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    serializationConfig1.with(dateFormat0);
    serializationConfig1.withRootName((PropertyName) null);
    MinimalPrettyPrinter minimalPrettyPrinter0 = new MinimalPrettyPrinter(""@BYT?3tI]'[k<;&"");
    serializationConfig0.withDefaultPrettyPrinter(minimalPrettyPrinter0);
}",0,
project,0,test6969,"public void test6969() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    BaseSettings baseSettings1 = baseSettings0.withHandlerInstantiator((HandlerInstantiator) null);
    JsonFactory jsonFactory0 = new JsonFactory();
    ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    ClassIntrospector classIntrospector0 = objectMapper1.defaultClassIntrospector();
    BaseSettings baseSettings2 = baseSettings1.withClassIntrospector(classIntrospector0);
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings2, stdSubtypeResolver0, (SimpleMixInResolver) null, rootNameLookup0);
    SimpleFilterProvider simpleFilterProvider0 = new SimpleFilterProvider();
    byte[] byteArray0 = new byte[5];
    byteArray0[0] = (byte) (-51);
    byteArray0[1] = (byte) 20;
    byteArray0[2] = (byte) (-116);
    byteArray0[3] = (byte) 57;
    byteArray0[4] = (byte) 28;
    jsonFactory0.createParser(byteArray0);
    PropertyName propertyName0 = PropertyName.construct((String) null);
    PropertyName.construct("""");
    serializationConfig0.withRootName(propertyName0);
    DateFormat dateFormat0 = MockDateFormat.getTimeInstance();
    serializationConfig0.with(dateFormat0);
    serializationConfig0.withRootName((PropertyName) null);
}",0,
project,0,test7070,"public void test7070() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, (RootNameLookup) null);
    SerializationFeature serializationFeature0 = SerializationFeature.EAGER_SERIALIZER_FETCH;
    serializationConfig1.with(serializationFeature0);
    serializationConfig0.getAnnotationIntrospector();
    serializationConfig1.getSerializationInclusion();
}",0,
project,0,test7171,"public void test7171() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_TARGET;
    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[5];
    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature0;
    jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
    jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature0;
    jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
    JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
    jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature1;
    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(jsonGenerator_FeatureArray0);
    serializationConfig1.with(jsonGenerator_Feature0);
}",0,
project,0,test7272,"public void test7272() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    Class<Object> class0 = Object.class;
    Class<String> class1 = String.class;
    simpleMixInResolver0.addLocalDefinition(class0, class1);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    ContextAttributes contextAttributes1 = contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, contextAttributes1);
    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.copy();
    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver1);
    FormatFeature formatFeature0 = mock(FormatFeature.class, new ViolatedAssumptionAnswer());
    doReturn(0, (-2062)).when(formatFeature0).getMask();
    serializationConfig2.with(formatFeature0);
    serializationConfig1.getSerializationInclusion();
}",0,
project,0,test7373,"public void test7373() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    Object object0 = new Object();
    contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    serializationConfig0.initialize((JsonGenerator) null);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
    serializationConfig1.getDefaultVisibilityChecker();
    serializationConfig1.initialize((JsonGenerator) null);
    SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
    serializationConfig0.with(serializationFeature0);
}",0,
project,0,test7474,"public void test7474() throws Throwable {
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    ObjectMapper objectMapper0 = new ObjectMapper();
    ObjectMapper objectMapper1 = new ObjectMapper(objectMapper0);
    SimpleMixInResolver simpleMixInResolver0 = objectMapper1._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver1 = new StdSubtypeResolver();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver1, simpleMixInResolver0, rootNameLookup0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);
    Locale locale0 = Locale.SIMPLIFIED_CHINESE;
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver0);
    Class<Object> class0 = Object.class;
    simpleMixInResolver0.findMixInClassFor(class0);
    SerializationConfig serializationConfig3 = new SerializationConfig(serializationConfig1, (ContextAttributes) null);
    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withoutLocalDefinitions();
    SerializationConfig serializationConfig4 = new SerializationConfig(serializationConfig1, simpleMixInResolver1);
    SerializationConfig serializationConfig5 = serializationConfig3.without(jsonGenerator_Feature0);
    DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter) SerializationConfig.DEFAULT_PRETTY_PRINTER;
    serializationConfig5.without(jsonGenerator_Feature0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
    IOContext iOContext0 = new IOContext(bufferRecycler0, serializationFeature0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayBuilder0);
    PropertyName propertyName0 = PropertyName.USE_DEFAULT;
    SerializationConfig serializationConfig6 = new SerializationConfig(serializationConfig4, simpleMixInResolver0, rootNameLookup0);
    serializationConfig6.withRootName(propertyName0);
}",0,
project,0,test7575,"public void test7575() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
    SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
    uTF8JsonGenerator0.overrideStdFeatures((-1438), 2);
    serializationConfig1.initialize(uTF8JsonGenerator0);
}",0,
project,0,test7777,"public void test7777() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.QUOTE_NON_NUMERIC_NUMBERS;
    serializationConfig0.isEnabled(jsonGenerator_Feature0, jsonFactory0);
}",0,
project,0,test7878,"public void test7878() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    ContextAttributes.Impl.getEmpty();
    FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withOverrides((ClassIntrospector.MixInResolver) null);
    SimpleMixInResolver simpleMixInResolver2 = simpleMixInResolver1.withoutLocalDefinitions();
    SimpleMixInResolver simpleMixInResolver3 = simpleMixInResolver2.copy();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver3, rootNameLookup0);
    SerializationFeature serializationFeature0 = SerializationFeature.INDENT_OUTPUT;
    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[7];
    serializationFeatureArray0[0] = serializationFeature0;
    SerializationFeature serializationFeature1 = SerializationFeature.FLUSH_AFTER_WRITE_VALUE;
    serializationFeatureArray0[1] = serializationFeature1;
    serializationFeatureArray0[2] = serializationFeature0;
    serializationFeatureArray0[3] = serializationFeature0;
    serializationFeatureArray0[4] = serializationFeature0;
    serializationFeatureArray0[5] = serializationFeature0;
    serializationFeatureArray0[6] = serializationFeature0;
    serializationConfig0.without(serializationFeature0, serializationFeatureArray0);
}",0,
project,0,test7979,"public void test7979() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
    ContextAttributes contextAttributes0 = ContextAttributes.Impl.getEmpty();
    contextAttributes0.withoutSharedAttribute((Object) null);
    Object object0 = new Object();
    contextAttributes0.withSharedAttribute(object0, stdSubtypeResolver0);
    serializationConfig0.initialize((JsonGenerator) null);
    FormatFeature[] formatFeatureArray0 = new FormatFeature[0];
    SerializationConfig serializationConfig1 = serializationConfig0.withFeatures(formatFeatureArray0);
    serializationConfig1.getDefaultVisibilityChecker();
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION;
    serializationConfig0.with(jsonGenerator_Feature0);
    JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[7];
    JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT;
    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature2;
    jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
    jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature1;
    jsonGenerator_FeatureArray0[3] = jsonGenerator_Feature0;
    JsonGenerator.Feature jsonGenerator_Feature3 = JsonGenerator.Feature.IGNORE_UNKNOWN;
    jsonGenerator_FeatureArray0[4] = jsonGenerator_Feature3;
    jsonGenerator_FeatureArray0[5] = jsonGenerator_Feature0;
    jsonGenerator_FeatureArray0[6] = jsonGenerator_Feature1;
    serializationConfig0.withoutFeatures(jsonGenerator_FeatureArray0);
    SerializationFeature serializationFeature0 = SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS;
    SerializationFeature[] serializationFeatureArray0 = new SerializationFeature[9];
    serializationFeatureArray0[0] = serializationFeature0;
    serializationFeatureArray0[1] = serializationFeature0;
    serializationFeatureArray0[2] = serializationFeature0;
    serializationFeatureArray0[3] = serializationFeature0;
    serializationFeatureArray0[4] = serializationFeature0;
    serializationFeatureArray0[5] = serializationFeature0;
    serializationFeatureArray0[6] = serializationFeature0;
    SerializationFeature serializationFeature1 = SerializationFeature.WRITE_ENUMS_USING_TO_STRING;
    serializationFeatureArray0[7] = serializationFeature1;
    serializationFeatureArray0[8] = serializationFeature0;
    serializationConfig1.without(serializationFeature0, serializationFeatureArray0);
}",0,
project,0,test8080,"public void test8080() throws Throwable {
    ObjectMapper objectMapper0 = new ObjectMapper();
    SimpleMixInResolver simpleMixInResolver0 = objectMapper0._mixIns;
    RootNameLookup rootNameLookup0 = new RootNameLookup();
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SerializationConfig serializationConfig0 = new SerializationConfig((BaseSettings) null, stdSubtypeResolver0, simpleMixInResolver0, rootNameLookup0);
    SerializationConfig serializationConfig1 = new SerializationConfig(serializationConfig0, simpleMixInResolver0, rootNameLookup0);
    Locale locale0 = Locale.CANADA;
    SerializationConfig serializationConfig2 = new SerializationConfig(serializationConfig0, simpleMixInResolver0);
    Class<Object> class0 = Object.class;
    simpleMixInResolver0.findMixInClassFor(class0);
    SimpleMixInResolver simpleMixInResolver1 = simpleMixInResolver0.withoutLocalDefinitions();
    simpleMixInResolver0.withOverrides(serializationConfig2);
    SerializationConfig serializationConfig3 = new SerializationConfig(serializationConfig1, simpleMixInResolver1);
    SerializationConfig serializationConfig4 = new SerializationConfig(serializationConfig3, simpleMixInResolver1, rootNameLookup0);
    DefaultPrettyPrinter defaultPrettyPrinter0 = (DefaultPrettyPrinter) SerializationConfig.DEFAULT_PRETTY_PRINTER;
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
    IOContext iOContext0 = new IOContext(bufferRecycler0, serializationFeature0, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 0, objectMapper0, byteArrayBuilder0);
    uTF8JsonGenerator0.overrideStdFeatures(3779004, (-789));
    serializationConfig2.withDefaultPrettyPrinter(defaultPrettyPrinter0);
}",0,
project,0,test8282,"public void test8282() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
    JsonFactory jsonFactory0 = new JsonFactory((ObjectCodec) null);
    JsonGenerator.Feature jsonGenerator_Feature1 = JsonGenerator.Feature.ESCAPE_NON_ASCII;
    SerializationConfig serializationConfig1 = serializationConfig0.with(jsonGenerator_Feature1);
    JsonGenerator.Feature[] jsonGenerator_FeatureArray0 = new JsonGenerator.Feature[3];
    JsonGenerator.Feature jsonGenerator_Feature2 = JsonGenerator.Feature.QUOTE_FIELD_NAMES;
    jsonGenerator_FeatureArray0[0] = jsonGenerator_Feature2;
    jsonGenerator_FeatureArray0[1] = jsonGenerator_Feature0;
    jsonGenerator_FeatureArray0[2] = jsonGenerator_Feature1;
    SerializationConfig serializationConfig2 = serializationConfig1.withFeatures(jsonGenerator_FeatureArray0);
    serializationConfig2.isEnabled(jsonGenerator_Feature1, jsonFactory0);
}",0,
project,0,test8484,"public void test8484() throws Throwable {
    BaseSettings baseSettings0 = ObjectMapper.DEFAULT_BASE;
    StdSubtypeResolver stdSubtypeResolver0 = new StdSubtypeResolver();
    SimpleMixInResolver simpleMixInResolver0 = new SimpleMixInResolver((ClassIntrospector.MixInResolver) null);
    SerializationConfig serializationConfig0 = new SerializationConfig(baseSettings0, stdSubtypeResolver0, simpleMixInResolver0, (RootNameLookup) null);
    JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN;
    SerializationConfig serializationConfig1 = serializationConfig0.without(jsonGenerator_Feature0);
    BufferRecycler bufferRecycler0 = new BufferRecycler();
    SerializationFeature serializationFeature0 = SerializationFeature.WRAP_EXCEPTIONS;
    IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
    ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
    MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayBuilder0);
    UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockPrintStream0);
    JsonGenerator jsonGenerator0 = uTF8JsonGenerator0.overrideStdFeatures(0, 1);
    serializationConfig1.initialize(jsonGenerator0);
    JsonFactory jsonFactory0 = new JsonFactory();
    JsonFactory jsonFactory1 = jsonFactory0.copy();
    JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_CONTROL_CHARS;
    JsonFactory jsonFactory2 = jsonFactory1.configure(jsonParser_Feature0, false);
    JsonFactory jsonFactory3 = jsonFactory2.enable(jsonGenerator_Feature0);
    JsonFactory.Feature jsonFactory_Feature0 = JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW;
    JsonFactory jsonFactory4 = jsonFactory3.configure(jsonFactory_Feature0, false);
    serializationConfig1.isEnabled(jsonGenerator_Feature0, jsonFactory4);
}",0,
